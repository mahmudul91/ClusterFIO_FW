
ClusterFIOBoard_V1.0.0_20240204.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029bb0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003330  08029e80  08029e80  00039e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802d1b0  0802d1b0  0003d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802d1b8  0802d1b8  0003d1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802d1bc  0802d1bc  0003d1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000474  24000000  0802d1c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005bbc  24000478  0802d634  00040478  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24006034  0802d634  00046034  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040474  2**0
                  CONTENTS, READONLY
 10 .debug_info   0009d744  00000000  00000000  000404a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000d844  00000000  00000000  000ddbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003b88  00000000  00000000  000eb430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003888  00000000  00000000  000eefb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004667d  00000000  00000000  000f2840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00058613  00000000  00000000  00138ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001817db  00000000  00000000  001914d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00312cab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010ed8  00000000  00000000  00312d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000478 	.word	0x24000478
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08029e68 	.word	0x08029e68

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400047c 	.word	0x2400047c
 800030c:	08029e68 	.word	0x08029e68

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b98e 	b.w	8000a6c <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f826 	bl	80007a8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <ADC_Init>:
  * @brief ADC Initialization Function
  * @param hadc: pointer to the adc handler
  * @param SamplingTime: sample time in cycle
  * @retval None
  */
void ADC_Init(ADC_HandleTypeDef *hadc){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	  ADC_MultiModeTypeDef multimode = {0};
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
//	hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
//	hadc->Init.DataAlign = ADC3_DATAALIGN_RIGHT;	// todo: need to uncomment
//	hadc->Init.NbrOfConversion = 1;
//	hadc->Init.DMAContinuousRequests = DISABLE;
//	hadc->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  hadc->Instance = ADC1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <ADC_Init+0xa8>)
 8000a88:	601a      	str	r2, [r3, #0]
	  hadc->Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000a90:	605a      	str	r2, [r3, #4]
	  hadc->Init.Resolution = ADC_RESOLUTION_12B;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2208      	movs	r2, #8
 8000a96:	609a      	str	r2, [r3, #8]
	  hadc->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	611a      	str	r2, [r3, #16]
	  hadc->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	615a      	str	r2, [r3, #20]
	  hadc->Init.LowPowerAutoWait = DISABLE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	761a      	strb	r2, [r3, #24]
	  hadc->Init.ContinuousConvMode = DISABLE;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	765a      	strb	r2, [r3, #25]
	  hadc->Init.NbrOfConversion = 1;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	61da      	str	r2, [r3, #28]
	  hadc->Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc->Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc->Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	641a      	str	r2, [r3, #64]	; 0x40
	  hadc->Init.OversamplingMode = DISABLE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(hadc) != HAL_OK){
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f016 f81f 	bl	8016b28 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <ADC_Init+0x84>
		Error_Handler();
 8000af0:	f00b fbc2 	bl	800c278 <Error_Handler>
	}
	  /** Configure the ADC multi-mode
	  */

	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADCEx_MultiModeConfigChannel(hadc, &multimode) != HAL_OK)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f017 fbfe 	bl	8018300 <HAL_ADCEx_MultiModeConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <ADC_Init+0x9e>
	  {
	    Error_Handler();
 8000b0a:	f00b fbb5 	bl	800c278 <Error_Handler>
	  }
////	COUNT_MAX = 16;//(HAL_RCC_GetHCLKFreq()/1000000UL);
//	DEBUG_SPRINT_NL("%u",COUNT_MAX, SystemCoreClock);
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40022000 	.word	0x40022000

08000b1c <ADC_SelectChannel>:
  * @brief Select ADC channel
  * @param hadc: pointer to the adc handler
  * @param Channel: adc channel
  * @retval None
  */
void ADC_SelectChannel(ADC_HandleTypeDef *hadc, uint32_t Channel){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	  sConfig.Channel = Channel;
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <ADC_SelectChannel+0x54>)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	6013      	str	r3, [r2, #0]
//	  sConfig.Rank = 1;
//	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;// todo: need to uncomment
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <ADC_SelectChannel+0x54>)
 8000b2e:	2206      	movs	r2, #6
 8000b30:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <ADC_SelectChannel+0x54>)
 8000b34:	2205      	movs	r2, #5
 8000b36:	609a      	str	r2, [r3, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <ADC_SelectChannel+0x54>)
 8000b3a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b3e:	60da      	str	r2, [r3, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <ADC_SelectChannel+0x54>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	611a      	str	r2, [r3, #16]
	  sConfig.Offset = 0;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <ADC_SelectChannel+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
	  sConfig.OffsetSignedSaturation = DISABLE;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <ADC_SelectChannel+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8000b54:	4906      	ldr	r1, [pc, #24]	; (8000b70 <ADC_SelectChannel+0x54>)
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f016 fbee 	bl	8017338 <HAL_ADC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <ADC_SelectChannel+0x4a>
	  {
	    Error_Handler();
 8000b62:	f00b fb89 	bl	800c278 <Error_Handler>
	  }
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	24000494 	.word	0x24000494

08000b74 <ADC_ReadValue>:
  * @param hadc: pointer to the adc handler
  * @param Channel: adc channel
  * @retval none
  */

uint32_t ADC_ReadValue(ADC_HandleTypeDef *hadc, uint32_t channel){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	uint32_t adc_value = 0u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
	ADC_SelectChannel(hadc, channel);
 8000b82:	6839      	ldr	r1, [r7, #0]
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ffc9 	bl	8000b1c <ADC_SelectChannel>
	HAL_ADC_Start(hadc);									// start adc to read the value
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f016 f9d4 	bl	8016f38 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(hadc,  1u) == HAL_OK){		// start conversion
 8000b90:	2101      	movs	r1, #1
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f016 face 	bl	8017134 <HAL_ADC_PollForConversion>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d103      	bne.n	8000ba6 <ADC_ReadValue+0x32>
		adc_value = HAL_ADC_GetValue(hadc);					// get the adc value after completing the conversion
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f016 fbbc 	bl	801731c <HAL_ADC_GetValue>
 8000ba4:	60f8      	str	r0, [r7, #12]
	}
	HAL_ADC_Stop(hadc);										// stop the adc
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f016 fa90 	bl	80170cc <HAL_ADC_Stop>
	return adc_value;
 8000bac:	68fb      	ldr	r3, [r7, #12]

}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <ADC_ReadValue_BM>:


/*
 * Bare metal
 * */
uint32_t ADC_ReadValue_BM(ADC_HandleTypeDef *hadc, uint32_t channel){
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
	uint32_t adc_value = 0u;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
//
//
//


	return adc_value;
 8000bc4:	68fb      	ldr	r3, [r7, #12]

}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <ADC_CalcVolt>:
/**
  * @brief  calculate voltage from adc value
  * @param adcValue: adc raw value
  * @retval none
  */
float ADC_CalcVolt(uint16_t adcValue){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
	return (float)((adcValue*ADC_REF_VOLT)/(ADC_RESOLUTION-1U));
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	ee07 3a90 	vmov	s15, r3
 8000be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000be8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000c0c <ADC_CalcVolt+0x38>
 8000bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c10 <ADC_CalcVolt+0x3c>
 8000bf4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000bf8:	eef0 7a66 	vmov.f32	s15, s13
}
 8000bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40533333 	.word	0x40533333
 8000c10:	457ff000 	.word	0x457ff000

08000c14 <AO_Init>:
/**
  * @brief initialize timer for the PWM of analog output
  * @param _htim: pointer to the struct of timer which generating the PWM
  * @retval none
  */
void AO_Init(TIM_HandleTypeDef *_htim){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	timer = _htim;
 8000c1c:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <AO_Init+0x64>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
	sysClock = HAL_RCC_GetHCLKFreq();
 8000c22:	f01e fae5 	bl	801f1f0 <HAL_RCC_GetHCLKFreq>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <AO_Init+0x68>)
 8000c2a:	6013      	str	r3, [r2, #0]
	aoPWMFreq = (float)(sysClock/(timer->Init.Period*timer->Init.Prescaler));
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <AO_Init+0x68>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <AO_Init+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	4910      	ldr	r1, [pc, #64]	; (8000c78 <AO_Init+0x64>)
 8000c38:	6809      	ldr	r1, [r1, #0]
 8000c3a:	6849      	ldr	r1, [r1, #4]
 8000c3c:	fb01 f303 	mul.w	r3, r1, r3
 8000c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c50:	ee17 2a90 	vmov	r2, s15
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <AO_Init+0x6c>)
 8000c56:	601a      	str	r2, [r3, #0]

	chConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <AO_Init+0x70>)
 8000c5a:	2260      	movs	r2, #96	; 0x60
 8000c5c:	601a      	str	r2, [r3, #0]
	chConfigOC.Pulse = 0;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <AO_Init+0x70>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
	#ifdef AO_PWM_POLARITY_INV
		chConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <AO_Init+0x70>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
	#else
		chConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
	#endif
	chConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <AO_Init+0x70>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	24002048 	.word	0x24002048
 8000c7c:	240004d4 	.word	0x240004d4
 8000c80:	240004d8 	.word	0x240004d8
 8000c84:	240004b8 	.word	0x240004b8

08000c88 <AO_Enable>:
/**
  * @brief Enable the analog output. Basically it will enable the the pwm channel
  * @param ao: pointer to the struct of AnalogOut
  * @retval error status
  */
uint8_t AO_Enable(AnalogOut *ao){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	return HAL_TIM_PWM_Start(timer, ao->pwm.channel);
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <AO_Enable+0x24>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f021 fe56 	bl	802294c <HAL_TIM_PWM_Start>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	24002048 	.word	0x24002048

08000cb0 <AO_CalculatePWM>:
/**
  * @brief calculates pwm parameters for the analog output
  * @param ao: pointer to the struct for the analog output
  * @retval none
  */
void AO_CalculatePWM(AnalogOut *ao){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	/*If value is not changed, it returns from the function immediately*/

	if(ao->value == ao->lastValue && ao->value != 0) return;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	891a      	ldrh	r2, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	895b      	ldrh	r3, [r3, #10]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d104      	bne.n	8000cce <AO_CalculatePWM+0x1e>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	891b      	ldrh	r3, [r3, #8]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f040 80a8 	bne.w	8000e1e <AO_CalculatePWM+0x16e>
	ao->lastValue = ao->value;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	891a      	ldrh	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	815a      	strh	r2, [r3, #10]
//	DEBUG_SPRINT_NL("AO_1");
	/*check the Modbus value is not in the rang, it returns from the function immediately*/
	if(!((ao->value >= 0U && ao->value <= AO_PWM_RESOLUTION)) && (ao->pwm.period == 0)) return;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	891b      	ldrh	r3, [r3, #8]
 8000cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cde:	d304      	bcc.n	8000cea <AO_CalculatePWM+0x3a>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 809c 	beq.w	8000e22 <AO_CalculatePWM+0x172>
//	DEBUG_SPRINT_NL("AO_2");
	ao->pwm.period = timer->Init.Period;
 8000cea:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <AO_CalculatePWM+0x17c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	61da      	str	r2, [r3, #28]
	ao->pwm.frequency = aoPWMFreq;
 8000cf4:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <AO_CalculatePWM+0x180>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	ee07 3a90 	vmov	s15, r3
 8000cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	edc3 7a04 	vstr	s15, [r3, #16]
	switch (ao->mode){
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	78db      	ldrb	r3, [r3, #3]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <AO_CalculatePWM+0x64>
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d02e      	beq.n	8000d70 <AO_CalculatePWM+0xc0>
				ao->pwm.onDuration = (uint16_t)roundf(((AO_PWM_DUTY_AT_10V - AO_PWM_DUTY_AT_0V) *
						(float)((float)(ao->value * ao->pwm.period) / (float)AO_PWM_RESOLUTION)) +
						(ao->pwm.period * AO_PWM_DUTY_AT_0V));
			break;
		default:
			return;
 8000d12:	e087      	b.n	8000e24 <AO_CalculatePWM+0x174>
						(float)((float)(ao->value * ao->pwm.period) / (float)AO_PWM_RESOLUTION)) +
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	891b      	ldrh	r3, [r3, #8]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	fb03 f302 	mul.w	r3, r3, r2
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d2a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8000e34 <AO_CalculatePWM+0x184>
 8000d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
				ao->pwm.onDuration = (uint16_t)roundf(((AO_PWM_DUTY_AT_20MA - AO_PWM_DUTY_AT_4MA) *
 8000d32:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000e38 <AO_CalculatePWM+0x188>
 8000d36:	ee27 7a87 	vmul.f32	s14, s15, s14
						(ao->pwm.period * AO_PWM_DUTY_AT_4MA));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000e3c <AO_CalculatePWM+0x18c>
 8000d4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
				ao->pwm.onDuration = (uint16_t)roundf(((AO_PWM_DUTY_AT_20MA - AO_PWM_DUTY_AT_4MA) *
 8000d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d52:	eeb0 0a67 	vmov.f32	s0, s15
 8000d56:	f028 fcf7 	bl	8029748 <roundf>
 8000d5a:	eef0 7a40 	vmov.f32	s15, s0
 8000d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d62:	ee17 3a90 	vmov	r3, s15
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	615a      	str	r2, [r3, #20]
			break;
 8000d6e:	e02d      	b.n	8000dcc <AO_CalculatePWM+0x11c>
						(float)((float)(ao->value * ao->pwm.period) / (float)AO_PWM_RESOLUTION)) +
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	891b      	ldrh	r3, [r3, #8]
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	fb03 f302 	mul.w	r3, r3, r2
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d86:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000e34 <AO_CalculatePWM+0x184>
 8000d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
				ao->pwm.onDuration = (uint16_t)roundf(((AO_PWM_DUTY_AT_10V - AO_PWM_DUTY_AT_0V) *
 8000d8e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000e40 <AO_CalculatePWM+0x190>
 8000d92:	ee27 7a87 	vmul.f32	s14, s15, s14
						(ao->pwm.period * AO_PWM_DUTY_AT_0V));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8000e44 <AO_CalculatePWM+0x194>
 8000da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
				ao->pwm.onDuration = (uint16_t)roundf(((AO_PWM_DUTY_AT_10V - AO_PWM_DUTY_AT_0V) *
 8000daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dae:	eeb0 0a67 	vmov.f32	s0, s15
 8000db2:	f028 fcc9 	bl	8029748 <roundf>
 8000db6:	eef0 7a40 	vmov.f32	s15, s0
 8000dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dbe:	ee17 3a90 	vmov	r3, s15
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	615a      	str	r2, [r3, #20]
			break;
 8000dca:	bf00      	nop
			break;
	}
	ao->pwm.dutyCycle = (uint16_t)roundf((float)((ao->pwm.onDuration*100.0f)/(float)ao->pwm.period));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000e48 <AO_CalculatePWM+0x198>
 8000ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000df0:	eeb0 0a66 	vmov.f32	s0, s13
 8000df4:	f028 fca8 	bl	8029748 <roundf>
 8000df8:	eef0 7a40 	vmov.f32	s15, s0
 8000dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e00:	ee17 3a90 	vmov	r3, s15
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f883 2020 	strb.w	r2, [r3, #32]
	ao->pwm.offDuration = ao->pwm.period - ao->pwm.onDuration;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	1ad2      	subs	r2, r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	619a      	str	r2, [r3, #24]
 8000e1c:	e002      	b.n	8000e24 <AO_CalculatePWM+0x174>
	if(ao->value == ao->lastValue && ao->value != 0) return;
 8000e1e:	bf00      	nop
 8000e20:	e000      	b.n	8000e24 <AO_CalculatePWM+0x174>
	if(!((ao->value >= 0U && ao->value <= AO_PWM_RESOLUTION)) && (ao->pwm.period == 0)) return;
 8000e22:	bf00      	nop
}
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	24002048 	.word	0x24002048
 8000e30:	240004d8 	.word	0x240004d8
 8000e34:	457ff000 	.word	0x457ff000
 8000e38:	3f3ae148 	.word	0x3f3ae148
 8000e3c:	3e3851ec 	.word	0x3e3851ec
 8000e40:	3f589375 	.word	0x3f589375
 8000e44:	00000000 	.word	0x00000000
 8000e48:	42c80000 	.word	0x42c80000

08000e4c <AO_UpdatePWM>:
/**
  * @brief Generates PWM for analog output
  * @param ao: pointer to the struct for the analog output
  * @retval error status
  */
uint8_t AO_UpdatePWM(AnalogOut *ao){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
	if(ao->enabled){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d022      	beq.n	8000ea6 <AO_UpdatePWM+0x5a>
		/*if duty cycle not changed return from the loop*/
		if(ao->pwm.dutyCycle == ao->pwm.lastDutyCycle && ao->pwm.dutyCycle != 0) {return HAL_OK;}
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d106      	bne.n	8000e7e <AO_UpdatePWM+0x32>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <AO_UpdatePWM+0x32>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e031      	b.n	8000ee2 <AO_UpdatePWM+0x96>
		ao->pwm.lastDutyCycle = ao->pwm.dutyCycle ;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		if(!(ao->pwm.onDuration >= 0 && ao->pwm.onDuration <= timer->Init.Period)){return HAL_OK;}
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695a      	ldr	r2, [r3, #20]
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <AO_UpdatePWM+0xa0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d901      	bls.n	8000e9c <AO_UpdatePWM+0x50>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e022      	b.n	8000ee2 <AO_UpdatePWM+0x96>
		chConfigOC.Pulse = ao->pwm.onDuration;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <AO_UpdatePWM+0xa4>)
 8000ea2:	6053      	str	r3, [r2, #4]
 8000ea4:	e002      	b.n	8000eac <AO_UpdatePWM+0x60>

	}else{
		chConfigOC.Pulse = 0;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <AO_UpdatePWM+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
	}
		/*Stop timer---------*/
		HAL_TIM_PWM_Stop(timer, (uint32_t)ao->pwm.channel);
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <AO_UpdatePWM+0xa0>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f021 fe64 	bl	8022b84 <HAL_TIM_PWM_Stop>
		/*COnfig---------------------------------------*/

		ret = HAL_TIM_PWM_ConfigChannel(timer, &chConfigOC, (uint32_t)ao->pwm.channel);
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <AO_UpdatePWM+0xa0>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	490a      	ldr	r1, [pc, #40]	; (8000ef0 <AO_UpdatePWM+0xa4>)
 8000ec8:	f022 fca6 	bl	8023818 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]
		/*Start the timer again-----------*/
		HAL_TIM_PWM_Start(timer, (uint32_t)ao->pwm.channel);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <AO_UpdatePWM+0xa0>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4610      	mov	r0, r2
 8000edc:	f021 fd36 	bl	802294c <HAL_TIM_PWM_Start>
	return ret;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	24002048 	.word	0x24002048
 8000ef0:	240004b8 	.word	0x240004b8

08000ef4 <AO_IsValidInpSrc>:

/**
  * @brief Check analog output source is valid or not
  * @retval 1 = valid, 0 = invalid
  */
uint8_t AO_IsValidInpSrc(AO_InpSrc src){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	return (src > AO_PWM_SRC_NONE && src < AO_PWM_SRC_MAX);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <AO_IsValidInpSrc+0x1a>
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d801      	bhi.n	8000f0e <AO_IsValidInpSrc+0x1a>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <AO_IsValidInpSrc+0x1c>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <AI_Init>:

/*-------- Analog Output End ---------*/


/*-------- Analog Input Start ---------*/
void AI_Init(ADC_HandleTypeDef *_hadc){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	hadc = _hadc;
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <AI_Init+0x20>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
#ifdef AI_USE_ADC_DMA
	ADC_InitDMA(hadc);
#else
	ADC_Init(hadc);
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <AI_Init+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fd9c 	bl	8000a70 <ADC_Init>
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2400204c 	.word	0x2400204c

08000f44 <AI_Config>:

void AI_Config(AnalogIn *ai, uint32_t channel, AIO_Mode mode){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71fb      	strb	r3, [r7, #7]
	ai->channel = channel;					// input channel
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	605a      	str	r2, [r3, #4]
	ai->mode = mode;						// default input mode
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	721a      	strb	r2, [r3, #8]
	ai->rawValue = 0U;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	815a      	strh	r2, [r3, #10]
	ai->current = 0.0f;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
	ai->voltage = 0.0f;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
	FLTR_ClearMedian(&ai->medFilter);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3314      	adds	r3, #20
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00d fe0b 	bl	800eb94 <FLTR_ClearMedian>
	FLTR_ClearMovAvg(&ai->movAvgFilter);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3340      	adds	r3, #64	; 0x40
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00d fe1e 	bl	800ebc4 <FLTR_ClearMovAvg>
//		case ADC_CHANNEL_13: rank = 4; break;
//		default: break;
//	}
	ADC_ConfigChannel(hadc, channel, (ai->id+1), ADC_SAMPLETIME_84CYCLES);
#endif
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <AI_Read>:

void AI_Read(AnalogIn *ai){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
#ifdef AI_USE_ADC_DMA
	ai->medFilter.nextValue = ai->rawValue;
#else
	ai->medFilter.nextValue = ADC_ReadValue_BM(hadc, ai->channel);			// read adc value
 8000f98:	4b63      	ldr	r3, [pc, #396]	; (8001128 <AI_Read+0x198>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f7ff fe07 	bl	8000bb6 <ADC_ReadValue_BM>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	875a      	strh	r2, [r3, #58]	; 0x3a
	ai->medFilter.nextValue = ADC_ReadValue(hadc, ai->channel);			// read adc value
 8000fb0:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <AI_Read+0x198>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f7ff fdda 	bl	8000b74 <ADC_ReadValue>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif
	FLTR_ApplyMedian(&ai->medFilter);									// apply median filter
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3314      	adds	r3, #20
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00d fd71 	bl	800eab4 <FLTR_ApplyMedian>
	ai->movAvgFilter.nextValue = ai->medFilter.value;					// set median output to moving average filter
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	FLTR_ApplyMovAvg(&ai->movAvgFilter);								// apply moving average filter
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3340      	adds	r3, #64	; 0x40
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00d fd9b 	bl	800eb1c <FLTR_ApplyMovAvg>
	ai->rawValue = ai->movAvgFilter.value;								// set moving average output to the adc raw value
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	815a      	strh	r2, [r3, #10]

	switch (ai->mode) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7a1b      	ldrb	r3, [r3, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <AI_Read+0x6e>
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d03f      	beq.n	800107c <AI_Read+0xec>
					(AI_VOLT_UPPER_THRESHOLD - AI_VOLT_LOWER_THRESHOLD));																	// use the input channel for pwm duty cycle
//			ai->voltage = ai->voltage/1000.0F;

			break;
		default:
			break;
 8000ffc:	e090      	b.n	8001120 <AI_Read+0x190>
			if(ai->rawValue <= AI_CURRENT_LOWER_THRESHOLD)			ai->rawValue = AI_CURRENT_LOWER_THRESHOLD;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	895b      	ldrh	r3, [r3, #10]
 8001002:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8001006:	d204      	bcs.n	8001012 <AI_Read+0x82>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f240 321b 	movw	r2, #795	; 0x31b
 800100e:	815a      	strh	r2, [r3, #10]
 8001010:	e009      	b.n	8001026 <AI_Read+0x96>
			else if(ai->rawValue >= AI_CURRENT_UPPER_THRESHOLD) 	ai->rawValue = AI_CURRENT_UPPER_THRESHOLD;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	895b      	ldrh	r3, [r3, #10]
 8001016:	f640 7281 	movw	r2, #3969	; 0xf81
 800101a:	4293      	cmp	r3, r2
 800101c:	d903      	bls.n	8001026 <AI_Read+0x96>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f640 7282 	movw	r2, #3970	; 0xf82
 8001024:	815a      	strh	r2, [r3, #10]
			ai->voltage =(float)(ADC_CalcVolt(ai->rawValue)*1000.00f);		// in millivolt
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	895b      	ldrh	r3, [r3, #10]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fdd2 	bl	8000bd4 <ADC_CalcVolt>
 8001030:	eef0 7a40 	vmov.f32	s15, s0
 8001034:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800112c <AI_Read+0x19c>
 8001038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	edc3 7a03 	vstr	s15, [r3, #12]
			ai->current = (float)(ai->voltage/(float)AI_CURRENT_SCALE_FACTOR);									// in milliamp
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	ed93 7a03 	vldr	s14, [r3, #12]
 8001048:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001130 <AI_Read+0x1a0>
 800104c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edc3 7a04 	vstr	s15, [r3, #16]
			ai->rawValue =(uint16_t)(((ai->rawValue-AI_CURRENT_LOWER_THRESHOLD)* (ADC_RESOLUTION-1))/
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	895b      	ldrh	r3, [r3, #10]
 800105a:	f2a3 331b 	subw	r3, r3, #795	; 0x31b
 800105e:	461a      	mov	r2, r3
 8001060:	4613      	mov	r3, r2
 8001062:	031b      	lsls	r3, r3, #12
 8001064:	1a9a      	subs	r2, r3, r2
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <AI_Read+0x1a4>)
 8001068:	fba3 1302 	umull	r1, r3, r3, r2
 800106c:	1ad2      	subs	r2, r2, r3
 800106e:	0852      	lsrs	r2, r2, #1
 8001070:	4413      	add	r3, r2
 8001072:	0adb      	lsrs	r3, r3, #11
 8001074:	b29a      	uxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	815a      	strh	r2, [r3, #10]
			break;
 800107a:	e051      	b.n	8001120 <AI_Read+0x190>
			if(ai->rawValue <= AI_VOLT_LOWER_THRESHOLD)			ai->rawValue = AI_VOLT_LOWER_THRESHOLD;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	895b      	ldrh	r3, [r3, #10]
 8001080:	2b05      	cmp	r3, #5
 8001082:	d803      	bhi.n	800108c <AI_Read+0xfc>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2205      	movs	r2, #5
 8001088:	815a      	strh	r2, [r3, #10]
 800108a:	e009      	b.n	80010a0 <AI_Read+0x110>
			else if(ai->rawValue >= AI_VOLT_UPPER_THRESHOLD) 	ai->rawValue = AI_VOLT_UPPER_THRESHOLD;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	895b      	ldrh	r3, [r3, #10]
 8001090:	f640 6291 	movw	r2, #3729	; 0xe91
 8001094:	4293      	cmp	r3, r2
 8001096:	d903      	bls.n	80010a0 <AI_Read+0x110>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f640 6292 	movw	r2, #3730	; 0xe92
 800109e:	815a      	strh	r2, [r3, #10]
			ai->voltage = ai->rawValue <= AI_VOLT_LOWER_THRESHOLD? 0.0F: (float)(ADC_CalcVolt(ai->rawValue)*AI_VOLT_SCALE_FACTOR*1000.00f);							// in millivolt
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	895b      	ldrh	r3, [r3, #10]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d90f      	bls.n	80010c8 <AI_Read+0x138>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	895b      	ldrh	r3, [r3, #10]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd91 	bl	8000bd4 <ADC_CalcVolt>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001138 <AI_Read+0x1a8>
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010be:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800112c <AI_Read+0x19c>
 80010c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c6:	e001      	b.n	80010cc <AI_Read+0x13c>
 80010c8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800113c <AI_Read+0x1ac>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	edc3 7a03 	vstr	s15, [r3, #12]
			ai->current = ai->rawValue <= AI_VOLT_LOWER_THRESHOLD? 0.0F: (float)((ai->voltage/1000.00f)/(AI_VOLT_R1+AI_VOLT_R2));									// in milliamp
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	895b      	ldrh	r3, [r3, #10]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d90b      	bls.n	80010f2 <AI_Read+0x162>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80010e0:	eddf 6a12 	vldr	s13, [pc, #72]	; 800112c <AI_Read+0x19c>
 80010e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001140 <AI_Read+0x1b0>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	e001      	b.n	80010f6 <AI_Read+0x166>
 80010f2:	eddf 7a12 	vldr	s15, [pc, #72]	; 800113c <AI_Read+0x1ac>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	edc3 7a04 	vstr	s15, [r3, #16]
			ai->rawValue =(uint16_t)(((ai->rawValue-AI_VOLT_LOWER_THRESHOLD)* (ADC_RESOLUTION-1))/
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	895b      	ldrh	r3, [r3, #10]
 8001100:	3b05      	subs	r3, #5
 8001102:	461a      	mov	r2, r3
 8001104:	4613      	mov	r3, r2
 8001106:	031b      	lsls	r3, r3, #12
 8001108:	1a9a      	subs	r2, r3, r2
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <AI_Read+0x1b4>)
 800110c:	fba3 1302 	umull	r1, r3, r3, r2
 8001110:	1ad2      	subs	r2, r2, r3
 8001112:	0852      	lsrs	r2, r2, #1
 8001114:	4413      	add	r3, r2
 8001116:	0adb      	lsrs	r3, r3, #11
 8001118:	b29a      	uxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	815a      	strh	r2, [r3, #10]
			break;
 800111e:	bf00      	nop
	}

}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2400204c 	.word	0x2400204c
 800112c:	447a0000 	.word	0x447a0000
 8001130:	43200000 	.word	0x43200000
 8001134:	4a4299af 	.word	0x4a4299af
 8001138:	40555555 	.word	0x40555555
 800113c:	00000000 	.word	0x00000000
 8001140:	42a00000 	.word	0x42a00000
 8001144:	197f35ad 	.word	0x197f35ad

08001148 <AIO_IsValidMode>:

/**
  * @brief Check analog IO mod is valid or not
  * @retval 1 = valid, 0 = invalid
  */
uint8_t AIO_IsValidMode(AIO_Mode mode){
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	return (mode == AIO_MODE_CURRENT || mode == AIO_MODE_VOLT);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <AIO_IsValidMode+0x16>
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <AIO_IsValidMode+0x1a>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <AIO_IsValidMode+0x1c>
 8001162:	2300      	movs	r3, #0
 8001164:	b2db      	uxtb	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <CB_Init>:


/*Initialization of callback-------------------------*/
/* It COntains all attach functions for the callback
 * */
void CB_Init(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

	CB_DIO_InitCallback();
 800117a:	f000 fa21 	bl	80015c0 <CB_DIO_InitCallback>
	CB_MB_InitCallback();
 800117e:	f000 fa2d 	bl	80015dc <CB_MB_InitCallback>



	/*L6360 IOLink i2c Read/write callback----------*/
	L6360_AttachTimerCallback(&CB_L6360_TimeSrc);
 8001182:	4841      	ldr	r0, [pc, #260]	; (8001288 <CB_Init+0x114>)
 8001184:	f00d ff04 	bl	800ef90 <L6360_AttachTimerCallback>
	for(uint8_t i = 0; i < IOL_PI_MAX; i++){
 8001188:	2300      	movs	r3, #0
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	e072      	b.n	8001274 <CB_Init+0x100>
		L6360_I2CAttachWriteCallback(&gVar.iolm.port[i], &CB_L6360_I2CWrite);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f240 1277 	movw	r2, #375	; 0x177
 8001194:	fb02 f203 	mul.w	r2, r2, r3
 8001198:	f242 6308 	movw	r3, #9736	; 0x2608
 800119c:	4413      	add	r3, r2
 800119e:	4a3b      	ldr	r2, [pc, #236]	; (800128c <CB_Init+0x118>)
 80011a0:	4413      	add	r3, r2
 80011a2:	493b      	ldr	r1, [pc, #236]	; (8001290 <CB_Init+0x11c>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00d fe42 	bl	800ee2e <L6360_I2CAttachWriteCallback>
		L6360_I2CAttachReadCallback(&gVar.iolm.port[i], &CB_L6360_I2CRead);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f240 1277 	movw	r2, #375	; 0x177
 80011b0:	fb02 f203 	mul.w	r2, r2, r3
 80011b4:	f242 6308 	movw	r3, #9736	; 0x2608
 80011b8:	4413      	add	r3, r2
 80011ba:	4a34      	ldr	r2, [pc, #208]	; (800128c <CB_Init+0x118>)
 80011bc:	4413      	add	r3, r2
 80011be:	4935      	ldr	r1, [pc, #212]	; (8001294 <CB_Init+0x120>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00d fe43 	bl	800ee4c <L6360_I2CAttachReadCallback>
		L6360_UartAttachConfigCallback(&gVar.iolm.port[i], &CB_L6360_UartConfig);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f240 1277 	movw	r2, #375	; 0x177
 80011cc:	fb02 f203 	mul.w	r2, r2, r3
 80011d0:	f242 6308 	movw	r3, #9736	; 0x2608
 80011d4:	4413      	add	r3, r2
 80011d6:	4a2d      	ldr	r2, [pc, #180]	; (800128c <CB_Init+0x118>)
 80011d8:	4413      	add	r3, r2
 80011da:	492f      	ldr	r1, [pc, #188]	; (8001298 <CB_Init+0x124>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f00d fe69 	bl	800eeb4 <L6360_UartAttachConfigCallback>
		L6360_UartAttachTXCallback(&gVar.iolm.port[i], &CB_L6360_UartTX);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f240 1277 	movw	r2, #375	; 0x177
 80011e8:	fb02 f203 	mul.w	r2, r2, r3
 80011ec:	f242 6308 	movw	r3, #9736	; 0x2608
 80011f0:	4413      	add	r3, r2
 80011f2:	4a26      	ldr	r2, [pc, #152]	; (800128c <CB_Init+0x118>)
 80011f4:	4413      	add	r3, r2
 80011f6:	4929      	ldr	r1, [pc, #164]	; (800129c <CB_Init+0x128>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00d fe6a 	bl	800eed2 <L6360_UartAttachTXCallback>
		L6360_UartAttachRXCallback(&gVar.iolm.port[i], &CB_L6360_UartRX);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f240 1277 	movw	r2, #375	; 0x177
 8001204:	fb02 f203 	mul.w	r2, r2, r3
 8001208:	f242 6308 	movw	r3, #9736	; 0x2608
 800120c:	4413      	add	r3, r2
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <CB_Init+0x118>)
 8001210:	4413      	add	r3, r2
 8001212:	4923      	ldr	r1, [pc, #140]	; (80012a0 <CB_Init+0x12c>)
 8001214:	4618      	mov	r0, r3
 8001216:	f00d fe6b 	bl	800eef0 <L6360_UartAttachRXCallback>
		L6360_AttachLplusPinCallback(&gVar.iolm.port[i], &CB_L6360_LplusPin);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f240 1277 	movw	r2, #375	; 0x177
 8001220:	fb02 f203 	mul.w	r2, r2, r3
 8001224:	f242 6308 	movw	r3, #9736	; 0x2608
 8001228:	4413      	add	r3, r2
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <CB_Init+0x118>)
 800122c:	4413      	add	r3, r2
 800122e:	491d      	ldr	r1, [pc, #116]	; (80012a4 <CB_Init+0x130>)
 8001230:	4618      	mov	r0, r3
 8001232:	f00d fe7f 	bl	800ef34 <L6360_AttachLplusPinCallback>
		L6360_AttachCQPinCallback(&gVar.iolm.port[i], &CB_L6360_CQPin);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f240 1277 	movw	r2, #375	; 0x177
 800123c:	fb02 f203 	mul.w	r2, r2, r3
 8001240:	f242 6308 	movw	r3, #9736	; 0x2608
 8001244:	4413      	add	r3, r2
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <CB_Init+0x118>)
 8001248:	4413      	add	r3, r2
 800124a:	4917      	ldr	r1, [pc, #92]	; (80012a8 <CB_Init+0x134>)
 800124c:	4618      	mov	r0, r3
 800124e:	f00d fe80 	bl	800ef52 <L6360_AttachCQPinCallback>
		L6360_AttachResetPinCallback(&gVar.iolm.port[i], &CB_L6360_ResetPin);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f240 1277 	movw	r2, #375	; 0x177
 8001258:	fb02 f203 	mul.w	r2, r2, r3
 800125c:	f242 6308 	movw	r3, #9736	; 0x2608
 8001260:	4413      	add	r3, r2
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <CB_Init+0x118>)
 8001264:	4413      	add	r3, r2
 8001266:	4911      	ldr	r1, [pc, #68]	; (80012ac <CB_Init+0x138>)
 8001268:	4618      	mov	r0, r3
 800126a:	f00d fe81 	bl	800ef70 <L6360_AttachResetPinCallback>
	for(uint8_t i = 0; i < IOL_PI_MAX; i++){
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	3301      	adds	r3, #1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d989      	bls.n	800118e <CB_Init+0x1a>
	}

	/*IOLInk callbacks-------------------------------*/
	IOL_Timer_AttachTimeSourceCallback(&CB_IOL_TimeSource);
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <CB_Init+0x13c>)
 800127c:	f00d fd3e 	bl	800ecfc <IOL_Timer_AttachTimeSourceCallback>


}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	080014dd 	.word	0x080014dd
 800128c:	24002050 	.word	0x24002050
 8001290:	080012f1 	.word	0x080012f1
 8001294:	0800130f 	.word	0x0800130f
 8001298:	080013ad 	.word	0x080013ad
 800129c:	08001425 	.word	0x08001425
 80012a0:	08001481 	.word	0x08001481
 80012a4:	0800132d 	.word	0x0800132d
 80012a8:	08001357 	.word	0x08001357
 80012ac:	08001381 	.word	0x08001381
 80012b0:	080014f5 	.word	0x080014f5

080012b4 <CB_DBG_Tx>:
/*Debug callback----------------------------*/
void CB_DBG_Tx(uint8_t* data, uint16_t len){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]

	uint32_t timeout = (11000*len/huart3.Init.BaudRate)+1;
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <CB_DBG_Tx+0x38>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, data, len, timeout);
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4803      	ldr	r0, [pc, #12]	; (80012ec <CB_DBG_Tx+0x38>)
 80012e0:	f023 fb08 	bl	80248f4 <HAL_UART_Transmit>

}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	240054d8 	.word	0x240054d8

080012f0 <CB_L6360_I2CWrite>:
  * @param  devAddress: device address
  * 		data: data pointer
  * 		len: data length
  * @retval error status
  */
L6360_Status CB_L6360_I2CWrite(uint8_t devAddress, uint8_t* data, uint16_t len){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80bb      	strh	r3, [r7, #4]
//	return (L6360_Status)HAL_I2C_Master_Transmit(gVar.iolm.hi2c, devAddress,  data, len, (len+1)*2);
	return L6360_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <CB_L6360_I2CRead>:
  * @param  devAddress: device address
  * 		data: data pointer
  * 		len: data length
  * @retval error status
  */
L6360_Status CB_L6360_I2CRead(uint8_t devAddress, uint8_t* data, uint16_t len){
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	6039      	str	r1, [r7, #0]
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	4613      	mov	r3, r2
 800131c:	80bb      	strh	r3, [r7, #4]
//	return (L6360_Status)HAL_I2C_Master_Receive(gVar.iolm.hi2c, devAddress, data, len, (len+1)*2);
	return L6360_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <CB_L6360_LplusPin>:

/*Services for L6360 Control pins-------------*/
void CB_L6360_LplusPin(L6360_IOLink_hw_t* l6360, L6360_PinState state){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(l6360->ctrlPins.lpEnPort, l6360->ctrlPins.lpEnPin, state);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f8d3 0157 	ldr.w	r0, [r3, #343]	; 0x157
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f8b3 3163 	ldrh.w	r3, [r3, #355]	; 0x163
 8001344:	b29b      	uxth	r3, r3
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	4619      	mov	r1, r3
 800134a:	f01a fce3 	bl	801bd14 <HAL_GPIO_WritePin>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <CB_L6360_CQPin>:
void CB_L6360_CQPin(L6360_IOLink_hw_t* l6360, L6360_PinState state){
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(l6360->ctrlPins.cqEnPort, l6360->ctrlPins.cqEnPin, state);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 015b 	ldr.w	r0, [r3, #347]	; 0x15b
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8b3 3165 	ldrh.w	r3, [r3, #357]	; 0x165
 800136e:	b29b      	uxth	r3, r3
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	4619      	mov	r1, r3
 8001374:	f01a fcce 	bl	801bd14 <HAL_GPIO_WritePin>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <CB_L6360_ResetPin>:
void CB_L6360_ResetPin(L6360_IOLink_hw_t* l6360, L6360_PinState state){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(l6360->ctrlPins.rstPort, l6360->ctrlPins.rstPin, state);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 015f 	ldr.w	r0, [r3, #351]	; 0x15f
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8b3 3167 	ldrh.w	r3, [r3, #359]	; 0x167
 8001398:	b29b      	uxth	r3, r3
 800139a:	78fa      	ldrb	r2, [r7, #3]
 800139c:	4619      	mov	r1, r3
 800139e:	f01a fcb9 	bl	801bd14 <HAL_GPIO_WritePin>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <CB_L6360_UartConfig>:
  * @param  data: data pointer
  * 		len: data length
  * 		timeout: timeout value for transmission
  * @retval error status
  */
L6360_Status CB_L6360_UartConfig(L6360_IOLink_hw_t* l6360, L6360_RWMode rwMode, uint32_t* baudrate){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	460b      	mov	r3, r1
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	72fb      	strb	r3, [r7, #11]
	if(rwMode == L6360_RW_MODE_READ){
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d106      	bne.n	80013ce <CB_L6360_UartConfig+0x22>
		/*Read mode*/
		*baudrate = l6360->uart.huart->Init.BaudRate;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f8d3 3122 	ldr.w	r3, [r3, #290]	; 0x122
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e005      	b.n	80013da <CB_L6360_UartConfig+0x2e>
	}else{
		/*Read mode*/
		l6360->uart.huart->Init.BaudRate = *baudrate;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f8d3 3122 	ldr.w	r3, [r3, #290]	; 0x122
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	605a      	str	r2, [r3, #4]
	}
	HAL_StatusTypeDef status = HAL_UART_Init(l6360->uart.huart);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f8d3 3122 	ldr.w	r3, [r3, #290]	; 0x122
 80013e0:	4618      	mov	r0, r3
 80013e2:	f023 fa37 	bl	8024854 <HAL_UART_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	75fb      	strb	r3, [r7, #23]
		switch (status) {
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d813      	bhi.n	8001418 <CB_L6360_UartConfig+0x6c>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <CB_L6360_UartConfig+0x4c>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	08001409 	.word	0x08001409
 80013fc:	0800140d 	.word	0x0800140d
 8001400:	08001411 	.word	0x08001411
 8001404:	08001415 	.word	0x08001415
			case HAL_OK:
				return L6360_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	e006      	b.n	800141a <CB_L6360_UartConfig+0x6e>
				break;
			case HAL_ERROR:
				return L6360_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e004      	b.n	800141a <CB_L6360_UartConfig+0x6e>
				break;
			case HAL_BUSY:
				return L6360_BUSY;
 8001410:	2302      	movs	r3, #2
 8001412:	e002      	b.n	800141a <CB_L6360_UartConfig+0x6e>
				break;
			case HAL_TIMEOUT:
				return L6360_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e000      	b.n	800141a <CB_L6360_UartConfig+0x6e>
				break;
			default:
				return L6360_UNKNOWN;
 8001418:	2304      	movs	r3, #4
				break;
		}
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop

08001424 <CB_L6360_UartTX>:
  * @param  data: data pointer
  * 		len: data length
  * 		timeout: timeout value for transmission
  * @retval error status
  */
L6360_Status CB_L6360_UartTX(L6360_IOLink_hw_t* l6360, uint8_t* data, uint16_t len, uint32_t timeout){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status = HAL_UART_Transmit(l6360->uart.huart, data, len, timeout);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f8d3 0122 	ldr.w	r0, [r3, #290]	; 0x122
 800143a:	88fa      	ldrh	r2, [r7, #6]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68b9      	ldr	r1, [r7, #8]
 8001440:	f023 fa58 	bl	80248f4 <HAL_UART_Transmit>
 8001444:	4603      	mov	r3, r0
 8001446:	75fb      	strb	r3, [r7, #23]
//	DBG_SPRINT_NL("txd: %02X, %02X, stat: %d", data[0], data[1], status);
	switch (status) {
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d812      	bhi.n	8001474 <CB_L6360_UartTX+0x50>
 800144e:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <CB_L6360_UartTX+0x30>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	08001465 	.word	0x08001465
 8001458:	08001469 	.word	0x08001469
 800145c:	0800146d 	.word	0x0800146d
 8001460:	08001471 	.word	0x08001471
		case HAL_OK:
			return L6360_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	e006      	b.n	8001476 <CB_L6360_UartTX+0x52>
			break;
		case HAL_ERROR:
			return L6360_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e004      	b.n	8001476 <CB_L6360_UartTX+0x52>
			break;
		case HAL_BUSY:
			return L6360_BUSY;
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <CB_L6360_UartTX+0x52>
			break;
		case HAL_TIMEOUT:
			return L6360_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e000      	b.n	8001476 <CB_L6360_UartTX+0x52>
			break;
		default:
			return L6360_UNKNOWN;
 8001474:	2304      	movs	r3, #4
			break;
	}

}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop

08001480 <CB_L6360_UartRX>:
  * @param  data: data pointer
  * 		len: data length
  * 		timeout: timeout value for receiveing
  * @retval error status
  */
L6360_Status CB_L6360_UartRX(L6360_IOLink_hw_t* l6360, uint8_t* data, uint16_t len, uint32_t timeout){
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_UART_Receive(l6360->uart.huart, data, len, timeout);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8d3 0122 	ldr.w	r0, [r3, #290]	; 0x122
 8001496:	88fa      	ldrh	r2, [r7, #6]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	f023 fac0 	bl	8024a20 <HAL_UART_Receive>
 80014a0:	4603      	mov	r3, r0
 80014a2:	75fb      	strb	r3, [r7, #23]
	switch (status) {
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d812      	bhi.n	80014d0 <CB_L6360_UartRX+0x50>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <CB_L6360_UartRX+0x30>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	080014cd 	.word	0x080014cd
		case HAL_OK:
			return L6360_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e006      	b.n	80014d2 <CB_L6360_UartRX+0x52>
			break;
		case HAL_ERROR:
			return L6360_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e004      	b.n	80014d2 <CB_L6360_UartRX+0x52>
			break;
		case HAL_BUSY:
			return L6360_BUSY;
 80014c8:	2302      	movs	r3, #2
 80014ca:	e002      	b.n	80014d2 <CB_L6360_UartRX+0x52>
			break;
		case HAL_TIMEOUT:
			return L6360_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e000      	b.n	80014d2 <CB_L6360_UartRX+0x52>
			break;
		default:
			return L6360_UNKNOWN;
 80014d0:	2304      	movs	r3, #4
			break;
	}
return L6360_OK;
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop

080014dc <CB_L6360_TimeSrc>:
/*L6360 time source callback services--------------*/
/** @brief  l6360 time source
  * @param  none
  * @retval time in us
  */
uint64_t CB_L6360_TimeSrc(void){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	//TODO: HAL_GetTick is ms timer, so need to change with us timer

	return TS_GetUS(&gVar.ts);	//
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <CB_L6360_TimeSrc+0x14>)
 80014e2:	f009 fd41 	bl	800af68 <TS_GetUS>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
}
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	24004c38 	.word	0x24004c38

080014f4 <CB_IOL_TimeSource>:
/*IOLInk callback-------------------------------*/
/** @brief  IOLink time source
  * @param  none
  * @retval time in us
  */
uint64_t CB_IOL_TimeSource(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	return TS_GetUS(&gVar.ts);	//
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <CB_IOL_TimeSource+0x14>)
 80014fa:	f009 fd35 	bl	800af68 <TS_GetUS>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
}
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	bd80      	pop	{r7, pc}
 8001508:	24004c38 	.word	0x24004c38

0800150c <HAL_GPIO_EXTI_Callback>:




/*External Interrupt callback---------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151c:	d010      	beq.n	8001540 <HAL_GPIO_EXTI_Callback+0x34>
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	dc19      	bgt.n	8001558 <HAL_GPIO_EXTI_Callback+0x4c>
 8001524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001528:	d00e      	beq.n	8001548 <HAL_GPIO_EXTI_Callback+0x3c>
 800152a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152e:	dc13      	bgt.n	8001558 <HAL_GPIO_EXTI_Callback+0x4c>
 8001530:	2b04      	cmp	r3, #4
 8001532:	d00d      	beq.n	8001550 <HAL_GPIO_EXTI_Callback+0x44>
 8001534:	2b40      	cmp	r3, #64	; 0x40
 8001536:	d10f      	bne.n	8001558 <HAL_GPIO_EXTI_Callback+0x4c>
		/*Interrupt handler for L6360 IOlink Master chip*/
		case IOL1_IRQ_Pin:
			L6360_I2CIRQHandler(&gVar.iolm.port[IOL_PI_0]);
 8001538:	481c      	ldr	r0, [pc, #112]	; (80015ac <HAL_GPIO_EXTI_Callback+0xa0>)
 800153a:	f00d fc68 	bl	800ee0e <L6360_I2CIRQHandler>
			break;
 800153e:	e00c      	b.n	800155a <HAL_GPIO_EXTI_Callback+0x4e>
		case IOL2_IRQ_Pin:
			L6360_I2CIRQHandler(&gVar.iolm.port[IOL_PI_1]);
 8001540:	481b      	ldr	r0, [pc, #108]	; (80015b0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001542:	f00d fc64 	bl	800ee0e <L6360_I2CIRQHandler>
			break;
 8001546:	e008      	b.n	800155a <HAL_GPIO_EXTI_Callback+0x4e>
		case IOL3_IRQ_Pin:
			L6360_I2CIRQHandler(&gVar.iolm.port[IOL_PI_2]);
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800154a:	f00d fc60 	bl	800ee0e <L6360_I2CIRQHandler>
			break;
 800154e:	e004      	b.n	800155a <HAL_GPIO_EXTI_Callback+0x4e>
		case IOL4_IRQ_Pin:
			L6360_I2CIRQHandler(&gVar.iolm.port[IOL_PI_3]);
 8001550:	4819      	ldr	r0, [pc, #100]	; (80015b8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001552:	f00d fc5c 	bl	800ee0e <L6360_I2CIRQHandler>
			break;
 8001556:	e000      	b.n	800155a <HAL_GPIO_EXTI_Callback+0x4e>
		default:
			break;
 8001558:	bf00      	nop
	}

	//	DI_CounterExtiCallback(GPIO_Pin);
		if(gVar.dio.di[DI_7].config.pin == GPIO_Pin){
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_GPIO_EXTI_Callback+0xb0>)
 800155c:	f242 33d0 	movw	r3, #9168	; 0x23d0
 8001560:	4413      	add	r3, r2
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	429a      	cmp	r2, r3
 8001568:	d01b      	beq.n	80015a2 <HAL_GPIO_EXTI_Callback+0x96>
//			CB_DI_CounterExtiCallback(GPIO_Pin); //TODO: to uncomment
		}else if(gVar.w5500Chip.spi.int_pin == GPIO_Pin){
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_GPIO_EXTI_Callback+0xb0>)
 800156c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	429a      	cmp	r2, r3
 8001574:	d115      	bne.n	80015a2 <HAL_GPIO_EXTI_Callback+0x96>
			gVar.w5500Chip.intrptFlag = 1;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_GPIO_EXTI_Callback+0xb0>)
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	//		W5500_ReadInterrupt(&gVar.w5500Chip);
			// read interrupt for server sockets
			for(uint8_t i = 0; i < SERVER_SOCK_MAX; i++){
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e002      	b.n	800158a <HAL_GPIO_EXTI_Callback+0x7e>
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3301      	adds	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f9      	beq.n	8001584 <HAL_GPIO_EXTI_Callback+0x78>
	//			Sock_ReadInterrupt(&gVar.server.sock[i]);
			}
			// read interrupt for client sockets
			for(uint8_t i = 0; i < CLIENT_SOCK_MAX; i++){
 8001590:	2300      	movs	r3, #0
 8001592:	73bb      	strb	r3, [r7, #14]
 8001594:	e002      	b.n	800159c <HAL_GPIO_EXTI_Callback+0x90>
 8001596:	7bbb      	ldrb	r3, [r7, #14]
 8001598:	3301      	adds	r3, #1
 800159a:	73bb      	strb	r3, [r7, #14]
 800159c:	7bbb      	ldrb	r3, [r7, #14]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f9      	beq.n	8001596 <HAL_GPIO_EXTI_Callback+0x8a>
	//		W5500_ClearAllInterrupt();
	//		uint8_t initState = HAL_GPIO_ReadPin(gVar.w5500Chip.spi.int_port, gVar.w5500Chip.spi.int_pin);
	//		DBG_SPRINT_NL("w5500 interrupt !: %d", initState);
		}

}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24004658 	.word	0x24004658
 80015b0:	240047cf 	.word	0x240047cf
 80015b4:	24004946 	.word	0x24004946
 80015b8:	24004abd 	.word	0x24004abd
 80015bc:	24002050 	.word	0x24002050

080015c0 <CB_DIO_InitCallback>:


/**
  * @brief  initialize callback for digital inpur counter
  */
void CB_DIO_InitCallback(void){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	DI_AttachStateChangeCallback(&CB_DI_StateChangeCallback);
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <CB_DIO_InitCallback+0x14>)
 80015c6:	f00c ffa9 	bl	800e51c <DI_AttachStateChangeCallback>
	DI_AttachCounterExtiCallback(&CB_DI_CounterExtiCallback);
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <CB_DIO_InitCallback+0x18>)
 80015cc:	f00c ffb6 	bl	800e53c <DI_AttachCounterExtiCallback>


//	DO_AttachStateCHangeCallback(&CB_DO_StateChangeCallback);
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	08001661 	.word	0x08001661
 80015d8:	08001745 	.word	0x08001745

080015dc <CB_MB_InitCallback>:


/**
  * @brief callback initialize
  */
void CB_MB_InitCallback(void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
//	MB_REG_AttachChangeCORegCallback(&CB_MB_REG_ChangeCOCallback);
//	MB_REG_AttachChangeIRRegCallback(&CB_MB_REG_ChangeIRCallback);
//	MB_REG_AttachChangeHRRegCallback(&CB_MB_REG_ChangeHRCallback);


	MB_attachDICallback(&CB_MB_readDICallback);
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <CB_MB_InitCallback+0x50>)
 80015e2:	f010 f967 	bl	80118b4 <MB_attachDICallback>
	MB_attachCOCallback(&CB_MB_writeCOCallback, &CB_MB_readCOCallback);
 80015e6:	4912      	ldr	r1, [pc, #72]	; (8001630 <CB_MB_InitCallback+0x54>)
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <CB_MB_InitCallback+0x58>)
 80015ea:	f010 f973 	bl	80118d4 <MB_attachCOCallback>
	MB_attachIRCallback(&CB_MB_readIRCallback);
 80015ee:	4812      	ldr	r0, [pc, #72]	; (8001638 <CB_MB_InitCallback+0x5c>)
 80015f0:	f010 f986 	bl	8011900 <MB_attachIRCallback>
	MB_attachHRCallback(&CB_MB_writeHRCallback, &CB_MB_readHRCallback);
 80015f4:	4911      	ldr	r1, [pc, #68]	; (800163c <CB_MB_InitCallback+0x60>)
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <CB_MB_InitCallback+0x64>)
 80015f8:	f010 f992 	bl	8011920 <MB_attachHRCallback>
	MB_attachMaskWHRCallback(&CB_MB_maskWriteHRCallbackS);
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <CB_MB_InitCallback+0x68>)
 80015fe:	f010 f9a5 	bl	801194c <MB_attachMaskWHRCallback>

	MB_DIAG_attachCallback(&CB_MB_diagSubFuncCallback);
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <CB_MB_InitCallback+0x6c>)
 8001604:	f00e fae0 	bl	800fbc8 <MB_DIAG_attachCallback>
	MB_attachChangeSACllback(&CB_MB_ChangSACallback);
 8001608:	4810      	ldr	r0, [pc, #64]	; (800164c <CB_MB_InitCallback+0x70>)
 800160a:	f010 f9af 	bl	801196c <MB_attachChangeSACllback>

	MBS_attachCmpltTxCallback(&CB_MB_CmpltTxCallback);
 800160e:	4810      	ldr	r0, [pc, #64]	; (8001650 <CB_MB_InitCallback+0x74>)
 8001610:	f011 fa9a 	bl	8012b48 <MBS_attachCmpltTxCallback>
	MBS_attachCmpltRxCallback(&CB_MB_CmoltRxCallback);
 8001614:	480f      	ldr	r0, [pc, #60]	; (8001654 <CB_MB_InitCallback+0x78>)
 8001616:	f011 faa7 	bl	8012b68 <MBS_attachCmpltRxCallback>


	MB_CUST_attachProcess109ReqAODOCallback(&CB_MB_CUST_Process109ReqAODO);
 800161a:	480f      	ldr	r0, [pc, #60]	; (8001658 <CB_MB_InitCallback+0x7c>)
 800161c:	f00e f8ba 	bl	800f794 <MB_CUST_attachProcess109ReqAODOCallback>
	MB_CUST_attachBuild107RespAIDICallback(&CB_MB_CUST_Build107RespAIDI);
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <CB_MB_InitCallback+0x80>)
 8001622:	f00e f8c7 	bl	800f7b4 <MB_CUST_attachBuild107RespAIDICallback>

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	08001799 	.word	0x08001799
 8001630:	08001e19 	.word	0x08001e19
 8001634:	08001921 	.word	0x08001921
 8001638:	080020b1 	.word	0x080020b1
 800163c:	08003a61 	.word	0x08003a61
 8001640:	080026c1 	.word	0x080026c1
 8001644:	080044b1 	.word	0x080044b1
 8001648:	08004827 	.word	0x08004827
 800164c:	08004849 	.word	0x08004849
 8001650:	08004701 	.word	0x08004701
 8001654:	08004811 	.word	0x08004811
 8001658:	080045ed 	.word	0x080045ed
 800165c:	080044d5 	.word	0x080044d5

08001660 <CB_DI_StateChangeCallback>:
/**
  * @brief digital input as a counter using external interrupt
  * @param pin: pin number where the interrupt happened
  * @retval return error if an exception happen
  */
void CB_DI_StateChangeCallback(DigitalIn_t *di){
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	switch (di->index) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b07      	cmp	r3, #7
 800166e:	d863      	bhi.n	8001738 <CB_DI_StateChangeCallback+0xd8>
 8001670:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <CB_DI_StateChangeCallback+0x18>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	08001699 	.word	0x08001699
 800167c:	080016ad 	.word	0x080016ad
 8001680:	080016c1 	.word	0x080016c1
 8001684:	080016d5 	.word	0x080016d5
 8001688:	080016e9 	.word	0x080016e9
 800168c:	080016fd 	.word	0x080016fd
 8001690:	08001711 	.word	0x08001711
 8001694:	08001725 	.word	0x08001725
		case DI_1:
			MB_REG_SetDI(MB_DIA_DI1_STATUS, di->state);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	f242 7011 	movw	r0, #10001	; 0x2711
 80016a6:	f010 fd2f 	bl	8012108 <MB_REG_SetDI>
			break;
 80016aa:	e046      	b.n	800173a <CB_DI_StateChangeCallback+0xda>
		case DI_2:
			MB_REG_SetDI(MB_DIA_DI2_STATUS, di->state);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4619      	mov	r1, r3
 80016b6:	f242 7012 	movw	r0, #10002	; 0x2712
 80016ba:	f010 fd25 	bl	8012108 <MB_REG_SetDI>
			break;
 80016be:	e03c      	b.n	800173a <CB_DI_StateChangeCallback+0xda>
		case DI_3:
			MB_REG_SetDI(MB_DIA_DI3_STATUS, di->state);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	f242 7013 	movw	r0, #10003	; 0x2713
 80016ce:	f010 fd1b 	bl	8012108 <MB_REG_SetDI>
			break;
 80016d2:	e032      	b.n	800173a <CB_DI_StateChangeCallback+0xda>
		case DI_4:
			MB_REG_SetDI(MB_DIA_DI4_STATUS, di->state);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4619      	mov	r1, r3
 80016de:	f242 7014 	movw	r0, #10004	; 0x2714
 80016e2:	f010 fd11 	bl	8012108 <MB_REG_SetDI>
			break;
 80016e6:	e028      	b.n	800173a <CB_DI_StateChangeCallback+0xda>
		case DI_5:
			MB_REG_SetDI(MB_DIA_DI5_STATUS, di->state);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4619      	mov	r1, r3
 80016f2:	f242 7015 	movw	r0, #10005	; 0x2715
 80016f6:	f010 fd07 	bl	8012108 <MB_REG_SetDI>
			break;
 80016fa:	e01e      	b.n	800173a <CB_DI_StateChangeCallback+0xda>
		case DI_6:
			MB_REG_SetDI(MB_DIA_DI6_STATUS, di->state);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001702:	b29b      	uxth	r3, r3
 8001704:	4619      	mov	r1, r3
 8001706:	f242 7016 	movw	r0, #10006	; 0x2716
 800170a:	f010 fcfd 	bl	8012108 <MB_REG_SetDI>
			break;
 800170e:	e014      	b.n	800173a <CB_DI_StateChangeCallback+0xda>
		case DI_7:
			MB_REG_SetDI(MB_DIA_DI7_STATUS, di->state);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001716:	b29b      	uxth	r3, r3
 8001718:	4619      	mov	r1, r3
 800171a:	f242 7017 	movw	r0, #10007	; 0x2717
 800171e:	f010 fcf3 	bl	8012108 <MB_REG_SetDI>
			break;
 8001722:	e00a      	b.n	800173a <CB_DI_StateChangeCallback+0xda>
		case DI_8:
			MB_REG_SetDI(MB_DIA_DI8_STATUS, di->state);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172a:	b29b      	uxth	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	f242 7018 	movw	r0, #10008	; 0x2718
 8001732:	f010 fce9 	bl	8012108 <MB_REG_SetDI>
			break;
 8001736:	e000      	b.n	800173a <CB_DI_StateChangeCallback+0xda>
		default:
			break;
 8001738:	bf00      	nop
	}
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop

08001744 <CB_DI_CounterExtiCallback>:
/**
  * @brief digital input as a counter using external interrupt
  * @param pin: pin number where the interrupt happened
  * @retval return error if an exception happen
  */
void CB_DI_CounterExtiCallback(uint16_t pin){
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
	for(DI_Index i = (DI_1-1); i < (DI_MAX-DI_1); i++){
 800174e:	23ff      	movs	r3, #255	; 0xff
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e017      	b.n	8001784 <CB_DI_CounterExtiCallback+0x40>
		if(gVar.dio.di[i].config.pin == pin){
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <CB_DI_CounterExtiCallback+0x50>)
 8001758:	019b      	lsls	r3, r3, #6
 800175a:	441a      	add	r2, r3
 800175c:	f242 2350 	movw	r3, #8784	; 0x2250
 8001760:	4413      	add	r3, r2
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	88fa      	ldrh	r2, [r7, #6]
 8001766:	429a      	cmp	r2, r3
 8001768:	d109      	bne.n	800177e <CB_DI_CounterExtiCallback+0x3a>
			DI_CounterByExtI(&gVar.dio.di[i]);
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3389      	adds	r3, #137	; 0x89
 800176e:	019b      	lsls	r3, r3, #6
 8001770:	4a08      	ldr	r2, [pc, #32]	; (8001794 <CB_DI_CounterExtiCallback+0x50>)
 8001772:	4413      	add	r3, r2
 8001774:	3304      	adds	r3, #4
 8001776:	4618      	mov	r0, r3
 8001778:	f00c fef0 	bl	800e55c <DI_CounterByExtI>
			break;
 800177c:	e006      	b.n	800178c <CB_DI_CounterExtiCallback+0x48>
	for(DI_Index i = (DI_1-1); i < (DI_MAX-DI_1); i++){
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3301      	adds	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d9e4      	bls.n	8001754 <CB_DI_CounterExtiCallback+0x10>
		}
	}

}
 800178a:	bf00      	nop
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	24002050 	.word	0x24002050

08001798 <CB_MB_readDICallback>:
  * @brief calback function for discrete input
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  */
uint8_t CB_MB_readDICallback(MB_DIAddrEnum address, uint8_t *value){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	80fb      	strh	r3, [r7, #6]
	uint8_t errorStatus = MB_OK;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]

	switch (address) {
 80017a8:	88fa      	ldrh	r2, [r7, #6]
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <CB_MB_readDICallback+0x180>)
 80017ac:	4413      	add	r3, r2
 80017ae:	2b07      	cmp	r3, #7
 80017b0:	f200 80ac 	bhi.w	800190c <CB_MB_readDICallback+0x174>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <CB_MB_readDICallback+0x24>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017dd 	.word	0x080017dd
 80017c0:	08001803 	.word	0x08001803
 80017c4:	08001829 	.word	0x08001829
 80017c8:	0800184f 	.word	0x0800184f
 80017cc:	08001875 	.word	0x08001875
 80017d0:	0800189b 	.word	0x0800189b
 80017d4:	080018c1 	.word	0x080018c1
 80017d8:	080018e7 	.word	0x080018e7
		case MB_DIA_DI1_STATUS:
			*value = HAL_GPIO_ReadPin(gVar.dio.di[DI_1].config.port, gVar.dio.di[DI_1].config.pin);
 80017dc:	4a4f      	ldr	r2, [pc, #316]	; (800191c <CB_MB_readDICallback+0x184>)
 80017de:	f242 234c 	movw	r3, #8780	; 0x224c
 80017e2:	4413      	add	r3, r2
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	494d      	ldr	r1, [pc, #308]	; (800191c <CB_MB_readDICallback+0x184>)
 80017e8:	f242 2350 	movw	r3, #8784	; 0x2250
 80017ec:	440b      	add	r3, r1
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4610      	mov	r0, r2
 80017f4:	f01a fa76 	bl	801bce4 <HAL_GPIO_ReadPin>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
			break;
 8001800:	e085      	b.n	800190e <CB_MB_readDICallback+0x176>
		case MB_DIA_DI2_STATUS:
			*value = HAL_GPIO_ReadPin(gVar.dio.di[DI_2].config.port, gVar.dio.di[DI_2].config.pin);
 8001802:	4a46      	ldr	r2, [pc, #280]	; (800191c <CB_MB_readDICallback+0x184>)
 8001804:	f242 238c 	movw	r3, #8844	; 0x228c
 8001808:	4413      	add	r3, r2
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4943      	ldr	r1, [pc, #268]	; (800191c <CB_MB_readDICallback+0x184>)
 800180e:	f242 2390 	movw	r3, #8848	; 0x2290
 8001812:	440b      	add	r3, r1
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f01a fa63 	bl	801bce4 <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	701a      	strb	r2, [r3, #0]
			break;
 8001826:	e072      	b.n	800190e <CB_MB_readDICallback+0x176>
		case MB_DIA_DI3_STATUS:
			*value = HAL_GPIO_ReadPin(gVar.dio.di[DI_3].config.port, gVar.dio.di[DI_3].config.pin);
 8001828:	4a3c      	ldr	r2, [pc, #240]	; (800191c <CB_MB_readDICallback+0x184>)
 800182a:	f242 23cc 	movw	r3, #8908	; 0x22cc
 800182e:	4413      	add	r3, r2
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	493a      	ldr	r1, [pc, #232]	; (800191c <CB_MB_readDICallback+0x184>)
 8001834:	f242 23d0 	movw	r3, #8912	; 0x22d0
 8001838:	440b      	add	r3, r1
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f01a fa50 	bl	801bce4 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	701a      	strb	r2, [r3, #0]
			break;
 800184c:	e05f      	b.n	800190e <CB_MB_readDICallback+0x176>
		case MB_DIA_DI4_STATUS:
			*value = HAL_GPIO_ReadPin(gVar.dio.di[DI_4].config.port, gVar.dio.di[DI_4].config.pin);
 800184e:	4a33      	ldr	r2, [pc, #204]	; (800191c <CB_MB_readDICallback+0x184>)
 8001850:	f242 330c 	movw	r3, #8972	; 0x230c
 8001854:	4413      	add	r3, r2
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4930      	ldr	r1, [pc, #192]	; (800191c <CB_MB_readDICallback+0x184>)
 800185a:	f242 3310 	movw	r3, #8976	; 0x2310
 800185e:	440b      	add	r3, r1
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f01a fa3d 	bl	801bce4 <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	701a      	strb	r2, [r3, #0]
			break;
 8001872:	e04c      	b.n	800190e <CB_MB_readDICallback+0x176>
		case MB_DIA_DI5_STATUS:
			*value = HAL_GPIO_ReadPin(gVar.dio.di[DI_5].config.port, gVar.dio.di[DI_5].config.pin);
 8001874:	4a29      	ldr	r2, [pc, #164]	; (800191c <CB_MB_readDICallback+0x184>)
 8001876:	f242 334c 	movw	r3, #9036	; 0x234c
 800187a:	4413      	add	r3, r2
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4927      	ldr	r1, [pc, #156]	; (800191c <CB_MB_readDICallback+0x184>)
 8001880:	f242 3350 	movw	r3, #9040	; 0x2350
 8001884:	440b      	add	r3, r1
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f01a fa2a 	bl	801bce4 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	701a      	strb	r2, [r3, #0]
			break;
 8001898:	e039      	b.n	800190e <CB_MB_readDICallback+0x176>
		case MB_DIA_DI6_STATUS:
			*value = HAL_GPIO_ReadPin(gVar.dio.di[DI_6].config.port, gVar.dio.di[DI_6].config.pin);
 800189a:	4a20      	ldr	r2, [pc, #128]	; (800191c <CB_MB_readDICallback+0x184>)
 800189c:	f242 338c 	movw	r3, #9100	; 0x238c
 80018a0:	4413      	add	r3, r2
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	491d      	ldr	r1, [pc, #116]	; (800191c <CB_MB_readDICallback+0x184>)
 80018a6:	f242 3390 	movw	r3, #9104	; 0x2390
 80018aa:	440b      	add	r3, r1
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f01a fa17 	bl	801bce4 <HAL_GPIO_ReadPin>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
			break;
 80018be:	e026      	b.n	800190e <CB_MB_readDICallback+0x176>
		case MB_DIA_DI7_STATUS:
			*value = HAL_GPIO_ReadPin(gVar.dio.di[DI_7].config.port, gVar.dio.di[DI_7].config.pin);
 80018c0:	4a16      	ldr	r2, [pc, #88]	; (800191c <CB_MB_readDICallback+0x184>)
 80018c2:	f242 33cc 	movw	r3, #9164	; 0x23cc
 80018c6:	4413      	add	r3, r2
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4914      	ldr	r1, [pc, #80]	; (800191c <CB_MB_readDICallback+0x184>)
 80018cc:	f242 33d0 	movw	r3, #9168	; 0x23d0
 80018d0:	440b      	add	r3, r1
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f01a fa04 	bl	801bce4 <HAL_GPIO_ReadPin>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	701a      	strb	r2, [r3, #0]
			break;
 80018e4:	e013      	b.n	800190e <CB_MB_readDICallback+0x176>
		case MB_DIA_DI8_STATUS:
			*value = HAL_GPIO_ReadPin(gVar.dio.di[DI_8].config.port, gVar.dio.di[DI_8].config.pin);
 80018e6:	4a0d      	ldr	r2, [pc, #52]	; (800191c <CB_MB_readDICallback+0x184>)
 80018e8:	f242 430c 	movw	r3, #9228	; 0x240c
 80018ec:	4413      	add	r3, r2
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	490a      	ldr	r1, [pc, #40]	; (800191c <CB_MB_readDICallback+0x184>)
 80018f2:	f242 4310 	movw	r3, #9232	; 0x2410
 80018f6:	440b      	add	r3, r1
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f01a f9f1 	bl	801bce4 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	701a      	strb	r2, [r3, #0]
			break;
 800190a:	e000      	b.n	800190e <CB_MB_readDICallback+0x176>
		default:

			break;
 800190c:	bf00      	nop
	}


//	DBG_SPRINT_NL("%s %s: { %s: %d, %s: %d }",STR_MB, STR_REQ, STR_ADDRESS, address, STR_VALUE, *value);
	return errorStatus;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	ffffd8ef 	.word	0xffffd8ef
 800191c:	24002050 	.word	0x24002050

08001920 <CB_MB_writeCOCallback>:
  * @brief calback function for coil output
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  */
uint8_t CB_MB_writeCOCallback(MB_CoilAddrEnum address, uint8_t value){
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
	uint8_t errStatus = MB_OK;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
	/*------Write your code here------*/


	switch (address) {
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	3b01      	subs	r3, #1
 8001938:	2b3d      	cmp	r3, #61	; 0x3d
 800193a:	f200 824f 	bhi.w	8001ddc <CB_MB_writeCOCallback+0x4bc>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <CB_MB_writeCOCallback+0x24>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001a3d 	.word	0x08001a3d
 8001948:	08001a5f 	.word	0x08001a5f
 800194c:	08001a81 	.word	0x08001a81
 8001950:	08001aa3 	.word	0x08001aa3
 8001954:	08001ac5 	.word	0x08001ac5
 8001958:	08001ae7 	.word	0x08001ae7
 800195c:	08001ddd 	.word	0x08001ddd
 8001960:	08001ddd 	.word	0x08001ddd
 8001964:	08001ddd 	.word	0x08001ddd
 8001968:	08001ddd 	.word	0x08001ddd
 800196c:	08001ddd 	.word	0x08001ddd
 8001970:	08001ddd 	.word	0x08001ddd
 8001974:	08001ddd 	.word	0x08001ddd
 8001978:	08001ddd 	.word	0x08001ddd
 800197c:	08001ddd 	.word	0x08001ddd
 8001980:	08001ddd 	.word	0x08001ddd
 8001984:	08001b09 	.word	0x08001b09
 8001988:	08001b43 	.word	0x08001b43
 800198c:	08001b7d 	.word	0x08001b7d
 8001990:	08001bb7 	.word	0x08001bb7
 8001994:	08001ddd 	.word	0x08001ddd
 8001998:	08001ddd 	.word	0x08001ddd
 800199c:	08001ddd 	.word	0x08001ddd
 80019a0:	08001ddd 	.word	0x08001ddd
 80019a4:	08001ddd 	.word	0x08001ddd
 80019a8:	08001ddd 	.word	0x08001ddd
 80019ac:	08001ddd 	.word	0x08001ddd
 80019b0:	08001ddd 	.word	0x08001ddd
 80019b4:	08001bf1 	.word	0x08001bf1
 80019b8:	08001ddd 	.word	0x08001ddd
 80019bc:	08001ddd 	.word	0x08001ddd
 80019c0:	08001ddd 	.word	0x08001ddd
 80019c4:	08001c8f 	.word	0x08001c8f
 80019c8:	08001ddd 	.word	0x08001ddd
 80019cc:	08001ddd 	.word	0x08001ddd
 80019d0:	08001cf7 	.word	0x08001cf7
 80019d4:	08001ddd 	.word	0x08001ddd
 80019d8:	08001ddd 	.word	0x08001ddd
 80019dc:	08001d25 	.word	0x08001d25
 80019e0:	08001ddd 	.word	0x08001ddd
 80019e4:	08001ddd 	.word	0x08001ddd
 80019e8:	08001ddd 	.word	0x08001ddd
 80019ec:	08001ddd 	.word	0x08001ddd
 80019f0:	08001ddd 	.word	0x08001ddd
 80019f4:	08001ddd 	.word	0x08001ddd
 80019f8:	08001ddd 	.word	0x08001ddd
 80019fc:	08001ddd 	.word	0x08001ddd
 8001a00:	08001ddd 	.word	0x08001ddd
 8001a04:	08001ddd 	.word	0x08001ddd
 8001a08:	08001ddd 	.word	0x08001ddd
 8001a0c:	08001d61 	.word	0x08001d61
 8001a10:	08001ddd 	.word	0x08001ddd
 8001a14:	08001ddd 	.word	0x08001ddd
 8001a18:	08001ddd 	.word	0x08001ddd
 8001a1c:	08001ddd 	.word	0x08001ddd
 8001a20:	08001ddd 	.word	0x08001ddd
 8001a24:	08001ddd 	.word	0x08001ddd
 8001a28:	08001ddd 	.word	0x08001ddd
 8001a2c:	08001ddd 	.word	0x08001ddd
 8001a30:	08001ddd 	.word	0x08001ddd
 8001a34:	08001d99 	.word	0x08001d99
 8001a38:	08001dad 	.word	0x08001dad
		case MB_COA_DO1_ENABLE:
			gVar.dio.dout[DO_1].state = value>0;
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4abe      	ldr	r2, [pc, #760]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001a4c:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 8001a50:	4413      	add	r3, r2
 8001a52:	460a      	mov	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
			DO_Write(&gVar.dio.dout[DO_1]);
 8001a56:	48bc      	ldr	r0, [pc, #752]	; (8001d48 <CB_MB_writeCOCallback+0x428>)
 8001a58:	f00c fdce 	bl	800e5f8 <DO_Write>
			break;
 8001a5c:	e1d4      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
		case MB_COA_DO2_ENABLE:
			gVar.dio.dout[DO_2].state = value>0;
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4ab5      	ldr	r2, [pc, #724]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001a6e:	f242 0358 	movw	r3, #8280	; 0x2058
 8001a72:	4413      	add	r3, r2
 8001a74:	460a      	mov	r2, r1
 8001a76:	701a      	strb	r2, [r3, #0]
			DO_Write(&gVar.dio.dout[DO_2]);
 8001a78:	48b4      	ldr	r0, [pc, #720]	; (8001d4c <CB_MB_writeCOCallback+0x42c>)
 8001a7a:	f00c fdbd 	bl	800e5f8 <DO_Write>
			break;
 8001a7e:	e1c3      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
		case MB_COA_DO3_ENABLE:
			gVar.dio.dout[DO_3].state = value>0;
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bf14      	ite	ne
 8001a86:	2301      	movne	r3, #1
 8001a88:	2300      	moveq	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4aad      	ldr	r2, [pc, #692]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001a90:	f242 03bc 	movw	r3, #8380	; 0x20bc
 8001a94:	4413      	add	r3, r2
 8001a96:	460a      	mov	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
			DO_Write(&gVar.dio.dout[DO_3]);
 8001a9a:	48ad      	ldr	r0, [pc, #692]	; (8001d50 <CB_MB_writeCOCallback+0x430>)
 8001a9c:	f00c fdac 	bl	800e5f8 <DO_Write>
			break;
 8001aa0:	e1b2      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
		case MB_COA_DO4_ENABLE:
			gVar.dio.dout[DO_4].state = value>0;
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4aa4      	ldr	r2, [pc, #656]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001ab2:	f242 1320 	movw	r3, #8480	; 0x2120
 8001ab6:	4413      	add	r3, r2
 8001ab8:	460a      	mov	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
			DO_Write(&gVar.dio.dout[DO_4]);
 8001abc:	48a5      	ldr	r0, [pc, #660]	; (8001d54 <CB_MB_writeCOCallback+0x434>)
 8001abe:	f00c fd9b 	bl	800e5f8 <DO_Write>
			break;
 8001ac2:	e1a1      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
		case MB_COA_DO5_ENABLE:
			gVar.dio.dout[DO_5].state = value>0;
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4a9c      	ldr	r2, [pc, #624]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001ad4:	f242 1384 	movw	r3, #8580	; 0x2184
 8001ad8:	4413      	add	r3, r2
 8001ada:	460a      	mov	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
			DO_Write(&gVar.dio.dout[DO_5]);
 8001ade:	489e      	ldr	r0, [pc, #632]	; (8001d58 <CB_MB_writeCOCallback+0x438>)
 8001ae0:	f00c fd8a 	bl	800e5f8 <DO_Write>
			break;
 8001ae4:	e190      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
		case MB_COA_DO6_ENABLE:
			gVar.dio.dout[DO_6].state = value>0;
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4619      	mov	r1, r3
 8001af4:	4a93      	ldr	r2, [pc, #588]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001af6:	f242 13e8 	movw	r3, #8680	; 0x21e8
 8001afa:	4413      	add	r3, r2
 8001afc:	460a      	mov	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
			DO_Write(&gVar.dio.dout[DO_6]);
 8001b00:	4896      	ldr	r0, [pc, #600]	; (8001d5c <CB_MB_writeCOCallback+0x43c>)
 8001b02:	f00c fd79 	bl	800e5f8 <DO_Write>
			break;
 8001b06:	e17f      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
//			DO_Write(&gVar.dio.dout[DO_8]);
//			break;

			/*Analog Outputs 1 to 4-------------*/
		case MB_COA_AO1_ENABLE:
			gVar.ao[AO_1].enabled = value>0;
 8001b08:	79bb      	ldrb	r3, [r7, #6]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	4a8b      	ldr	r2, [pc, #556]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001b18:	f641 6355 	movw	r3, #7765	; 0x1e55
 8001b1c:	4413      	add	r3, r2
 8001b1e:	460a      	mov	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
			if(FSExt_WriteIntNum(SA_AO1_ENABLE, (uint32_t)(gVar.ao[AO_1].enabled)) ==0){
 8001b22:	4a88      	ldr	r2, [pc, #544]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001b24:	f641 6355 	movw	r3, #7765	; 0x1e55
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	203a      	movs	r0, #58	; 0x3a
 8001b30:	f002 ff4e 	bl	80049d0 <FSExt_WriteIntNum>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 8153 	bne.w	8001de2 <CB_MB_writeCOCallback+0x4c2>
				errStatus = MB_ERROR;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
			}

			break;
 8001b40:	e14f      	b.n	8001de2 <CB_MB_writeCOCallback+0x4c2>
		case MB_COA_AO2_ENABLE:
			gVar.ao[AO_2].enabled = value>0;
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4a7c      	ldr	r2, [pc, #496]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001b52:	f641 6381 	movw	r3, #7809	; 0x1e81
 8001b56:	4413      	add	r3, r2
 8001b58:	460a      	mov	r2, r1
 8001b5a:	701a      	strb	r2, [r3, #0]
			if(FSExt_WriteIntNum(SA_AO2_ENABLE, (uint32_t)(gVar.ao[AO_2].enabled)) ==0){
 8001b5c:	4a79      	ldr	r2, [pc, #484]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001b5e:	f641 6381 	movw	r3, #7809	; 0x1e81
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	203b      	movs	r0, #59	; 0x3b
 8001b6a:	f002 ff31 	bl	80049d0 <FSExt_WriteIntNum>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 8138 	bne.w	8001de6 <CB_MB_writeCOCallback+0x4c6>
				errStatus = MB_ERROR;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001b7a:	e134      	b.n	8001de6 <CB_MB_writeCOCallback+0x4c6>
		case MB_COA_AO3_ENABLE:
			gVar.ao[AO_3].enabled = value>0;
 8001b7c:	79bb      	ldrb	r3, [r7, #6]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4a6e      	ldr	r2, [pc, #440]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001b8c:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8001b90:	4413      	add	r3, r2
 8001b92:	460a      	mov	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
			if(FSExt_WriteIntNum(SA_AO3_ENABLE, (uint32_t)(gVar.ao[AO_3].enabled)) ==0){
 8001b96:	4a6b      	ldr	r2, [pc, #428]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001b98:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	203c      	movs	r0, #60	; 0x3c
 8001ba4:	f002 ff14 	bl	80049d0 <FSExt_WriteIntNum>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 811d 	bne.w	8001dea <CB_MB_writeCOCallback+0x4ca>
				errStatus = MB_ERROR;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001bb4:	e119      	b.n	8001dea <CB_MB_writeCOCallback+0x4ca>
		case MB_COA_AO4_ENABLE:
			gVar.ao[AO_4].enabled = value>0;
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4a5f      	ldr	r2, [pc, #380]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001bc6:	f641 63d9 	movw	r3, #7897	; 0x1ed9
 8001bca:	4413      	add	r3, r2
 8001bcc:	460a      	mov	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
			if(FSExt_WriteIntNum(SA_AO4_ENABLE, (uint32_t)(gVar.ao[AO_4].enabled)) ==0){
 8001bd0:	4a5c      	ldr	r2, [pc, #368]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001bd2:	f641 63d9 	movw	r3, #7897	; 0x1ed9
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	203d      	movs	r0, #61	; 0x3d
 8001bde:	f002 fef7 	bl	80049d0 <FSExt_WriteIntNum>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 8102 	bne.w	8001dee <CB_MB_writeCOCallback+0x4ce>
				errStatus = MB_ERROR;
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001bee:	e0fe      	b.n	8001dee <CB_MB_writeCOCallback+0x4ce>
//			break;

			/*Dev net info ------------*/
		case MB_COA_MB_SAVE_NET_INFO:

			if(value > 0){
 8001bf0:	79bb      	ldrb	r3, [r7, #6]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80fd 	beq.w	8001df2 <CB_MB_writeCOCallback+0x4d2>
				for( uint8_t i = 0;i < 6;i++){
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73bb      	strb	r3, [r7, #14]
 8001bfc:	e041      	b.n	8001c82 <CB_MB_writeCOCallback+0x362>
					FSExt_WriteIntNum(SA_DEV_MAC_1+i, (uint32_t)(gVar.w5500Chip.netInfo.mac[i]));
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	f103 020d 	add.w	r2, r3, #13
 8001c04:	7bbb      	ldrb	r3, [r7, #14]
 8001c06:	494f      	ldr	r1, [pc, #316]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001c08:	440b      	add	r3, r1
 8001c0a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4610      	mov	r0, r2
 8001c12:	f002 fedd 	bl	80049d0 <FSExt_WriteIntNum>
					if(i<4){
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d82f      	bhi.n	8001c7c <CB_MB_writeCOCallback+0x35c>
						FSExt_WriteIntNum(SA_DEV_IP_1+i, (uint32_t)(gVar.w5500Chip.netInfo.ip[i]));
 8001c1c:	7bbb      	ldrb	r3, [r7, #14]
 8001c1e:	f103 0213 	add.w	r2, r3, #19
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	4947      	ldr	r1, [pc, #284]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001c26:	440b      	add	r3, r1
 8001c28:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f002 fece 	bl	80049d0 <FSExt_WriteIntNum>
						FSExt_WriteIntNum(SA_DEV_SN_1+i, (uint32_t)(gVar.w5500Chip.netInfo.sn[i]));
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
 8001c36:	f103 0217 	add.w	r2, r3, #23
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	4941      	ldr	r1, [pc, #260]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001c3e:	440b      	add	r3, r1
 8001c40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f002 fec2 	bl	80049d0 <FSExt_WriteIntNum>
						FSExt_WriteIntNum(SA_DEV_GW_1+i, (uint32_t)(gVar.w5500Chip.netInfo.gw[i]));
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	f103 021b 	add.w	r2, r3, #27
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	493b      	ldr	r1, [pc, #236]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001c56:	440b      	add	r3, r1
 8001c58:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f002 feb6 	bl	80049d0 <FSExt_WriteIntNum>
						FSExt_WriteIntNum(SA_DEV_DNS_1+i, (uint32_t)(gVar.w5500Chip.netInfo.dns[i]));
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	f103 021f 	add.w	r2, r3, #31
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001c6e:	440b      	add	r3, r1
 8001c70:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f002 feaa 	bl	80049d0 <FSExt_WriteIntNum>
				for( uint8_t i = 0;i < 6;i++){
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	73bb      	strb	r3, [r7, #14]
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d9ba      	bls.n	8001bfe <CB_MB_writeCOCallback+0x2de>
					}
				}

				address = SA_DEV_GW_4;
 8001c88:	231e      	movs	r3, #30
 8001c8a:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8001c8c:	e0b1      	b.n	8001df2 <CB_MB_writeCOCallback+0x4d2>
//			}
//			break;

			/*NModbus RTU Serial------------*/
		case MB_COA_MB_SAVE_SERIAL_CONFIG:
			if(MB_GetListenOnlyMode() == 0U){
 8001c8e:	f00f fdc9 	bl	8011824 <MB_GetListenOnlyMode>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 80ae 	bne.w	8001df6 <CB_MB_writeCOCallback+0x4d6>
				if(value > 0){
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80aa 	beq.w	8001df6 <CB_MB_writeCOCallback+0x4d6>
					if(FSExt_WriteIntNum(SA_MB_SERIAL_CONFIG, (uint32_t)(gVar.mbSerial.serialConfigValue)) ==0){
 8001ca2:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001ca4:	f8b3 368e 	ldrh.w	r3, [r3, #1678]	; 0x68e
 8001ca8:	4619      	mov	r1, r3
 8001caa:	202f      	movs	r0, #47	; 0x2f
 8001cac:	f002 fe90 	bl	80049d0 <FSExt_WriteIntNum>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <CB_MB_writeCOCallback+0x39a>
						errStatus = MB_ERROR;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
					}
					if(FSExt_WriteIntNum(SA_MB_SERIAl_BAUD_RATE_USER_DEF, (uint32_t)(MBS_GetBaudRateUserDef())) ==0){
 8001cba:	f010 fcbd 	bl	8012638 <MBS_GetBaudRateUserDef>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	2030      	movs	r0, #48	; 0x30
 8001cc4:	f002 fe84 	bl	80049d0 <FSExt_WriteIntNum>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <CB_MB_writeCOCallback+0x3b2>
						errStatus = MB_ERROR;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
					}
					if(MBS_CheckProtocol(value)){
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f200 808e 	bhi.w	8001df6 <CB_MB_writeCOCallback+0x4d6>
						if(FSExt_WriteIntNum(SA_MB_SERIAl_PROTOCOL, (uint32_t)(gVar.mbSerial.protocolTemp)) ==0){
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001cdc:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2031      	movs	r0, #49	; 0x31
 8001ce4:	f002 fe74 	bl	80049d0 <FSExt_WriteIntNum>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 8083 	bne.w	8001df6 <CB_MB_writeCOCallback+0x4d6>
							errStatus = MB_ERROR;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
						}
					}
				}
			}
			break;
 8001cf4:	e07f      	b.n	8001df6 <CB_MB_writeCOCallback+0x4d6>

			/*NModbus RTU Master------------*/
		case MB_COA_MB_MSTR_ENABLE:
				gVar.mbRTUMaster.enable = value > 0;
 8001cf6:	79bb      	ldrb	r3, [r7, #6]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001d06:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
				if(FSExt_WriteIntNum(SA_MB_MSTR_ENABLE, (uint32_t)(gVar.mbRTUMaster.enable)) ==0){
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001d0c:	f893 3948 	ldrb.w	r3, [r3, #2376]	; 0x948
 8001d10:	4619      	mov	r1, r3
 8001d12:	2032      	movs	r0, #50	; 0x32
 8001d14:	f002 fe5c 	bl	80049d0 <FSExt_WriteIntNum>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d16d      	bne.n	8001dfa <CB_MB_writeCOCallback+0x4da>
					errStatus = MB_ERROR;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
				}

			break;
 8001d22:	e06a      	b.n	8001dfa <CB_MB_writeCOCallback+0x4da>
			/*NModbus RTU Slave------------*/
		case MB_COA_MB_SAVE_SLAVE_ADDR:
			if(value > 0){
 8001d24:	79bb      	ldrb	r3, [r7, #6]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d069      	beq.n	8001dfe <CB_MB_writeCOCallback+0x4de>
				if(FSExt_WriteIntNum(SA_SLAVE_ADDRESS, (uint32_t)(gVar.slvAddrTemp )) ==0){
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <CB_MB_writeCOCallback+0x424>)
 8001d2c:	7a9b      	ldrb	r3, [r3, #10]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	2037      	movs	r0, #55	; 0x37
 8001d32:	f002 fe4d 	bl	80049d0 <FSExt_WriteIntNum>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d160      	bne.n	8001dfe <CB_MB_writeCOCallback+0x4de>
					errStatus = MB_ERROR;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
				}
			}
			break;
 8001d40:	e05d      	b.n	8001dfe <CB_MB_writeCOCallback+0x4de>
 8001d42:	bf00      	nop
 8001d44:	24002050 	.word	0x24002050
 8001d48:	2400403c 	.word	0x2400403c
 8001d4c:	240040a0 	.word	0x240040a0
 8001d50:	24004104 	.word	0x24004104
 8001d54:	24004168 	.word	0x24004168
 8001d58:	240041cc 	.word	0x240041cc
 8001d5c:	24004230 	.word	0x24004230

			/*Encoder--------------------*/
		case MB_COA_ENC_ENABLE:
			gVar.dio.enc.enable = (uint8_t)(value>0);
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf14      	ite	ne
 8001d66:	2301      	movne	r3, #1
 8001d68:	2300      	moveq	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <CB_MB_writeCOCallback+0x4f4>)
 8001d70:	f242 4344 	movw	r3, #9284	; 0x2444
 8001d74:	4413      	add	r3, r2
 8001d76:	460a      	mov	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]
			if(FSExt_WriteIntNum(SA_ENC_ENABLE, (uint32_t)(gVar.dio.enc.enable)) ==0){
 8001d7a:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <CB_MB_writeCOCallback+0x4f4>)
 8001d7c:	f242 4344 	movw	r3, #9284	; 0x2444
 8001d80:	4413      	add	r3, r2
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	208a      	movs	r0, #138	; 0x8a
 8001d88:	f002 fe22 	bl	80049d0 <FSExt_WriteIntNum>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d137      	bne.n	8001e02 <CB_MB_writeCOCallback+0x4e2>
				errStatus = MB_ERROR;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001d96:	e034      	b.n	8001e02 <CB_MB_writeCOCallback+0x4e2>

			/*Dev utilities--------------*/
		case MB_COA_RESTART:
			gVar.restartFlage = (uint8_t)(value > 0);
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bf14      	ite	ne
 8001d9e:	2301      	movne	r3, #1
 8001da0:	2300      	moveq	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <CB_MB_writeCOCallback+0x4f4>)
 8001da8:	725a      	strb	r2, [r3, #9]
			break;
 8001daa:	e02d      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
		case MB_COA_DBUG_ENABLE:

			(value > 0) ? DBG_ENABLE() : DBG_DISABLE();
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <CB_MB_writeCOCallback+0x498>
 8001db2:	f00b ffcf 	bl	800dd54 <DBG_ENABLE>
 8001db6:	e001      	b.n	8001dbc <CB_MB_writeCOCallback+0x49c>
 8001db8:	f00b ffd8 	bl	800dd6c <DBG_DISABLE>

			if(FSExt_WriteIntNum(SA_DBUG_ENABLE, (uint32_t)(value > 0)) ==0){
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4619      	mov	r1, r3
 8001dca:	2090      	movs	r0, #144	; 0x90
 8001dcc:	f002 fe00 	bl	80049d0 <FSExt_WriteIntNum>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d117      	bne.n	8001e06 <CB_MB_writeCOCallback+0x4e6>
				errStatus = MB_ERROR;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001dda:	e014      	b.n	8001e06 <CB_MB_writeCOCallback+0x4e6>
		default:
			errStatus = MB_ERROR;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
			break;
 8001de0:	e012      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001de2:	bf00      	nop
 8001de4:	e010      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001de6:	bf00      	nop
 8001de8:	e00e      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001dea:	bf00      	nop
 8001dec:	e00c      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001dee:	bf00      	nop
 8001df0:	e00a      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001df2:	bf00      	nop
 8001df4:	e008      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001df6:	bf00      	nop
 8001df8:	e006      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001dfa:	bf00      	nop
 8001dfc:	e004      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001dfe:	bf00      	nop
 8001e00:	e002      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001e02:	bf00      	nop
 8001e04:	e000      	b.n	8001e08 <CB_MB_writeCOCallback+0x4e8>
			break;
 8001e06:	bf00      	nop
//	if (address < MB_COA_MAX) {
//		MB_REG_SetCO(address, value>0);
//	}
//	DBG_SPRINT_NL("%s %s: { %s: %d, %s: %d }",STR_MB, STR_REQ, STR_ADDRESS, address, STR_VALUE, value);

	return errStatus;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24002050 	.word	0x24002050

08001e18 <CB_MB_readCOCallback>:
  * @brief calback function for reading coil output
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  */
uint8_t CB_MB_readCOCallback( MB_CoilAddrEnum address, uint8_t *value){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
	uint8_t errorStatus = MB_OK;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]

	switch (address) {
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	2b3d      	cmp	r3, #61	; 0x3d
 8001e2e:	f200 8136 	bhi.w	800209e <CB_MB_readCOCallback+0x286>
 8001e32:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <CB_MB_readCOCallback+0x20>)
 8001e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e38:	08001f31 	.word	0x08001f31
 8001e3c:	08001f57 	.word	0x08001f57
 8001e40:	08001f7d 	.word	0x08001f7d
 8001e44:	08001fa1 	.word	0x08001fa1
 8001e48:	08001fc7 	.word	0x08001fc7
 8001e4c:	08001fed 	.word	0x08001fed
 8001e50:	0800209f 	.word	0x0800209f
 8001e54:	0800209f 	.word	0x0800209f
 8001e58:	0800209f 	.word	0x0800209f
 8001e5c:	0800209f 	.word	0x0800209f
 8001e60:	0800209f 	.word	0x0800209f
 8001e64:	0800209f 	.word	0x0800209f
 8001e68:	0800209f 	.word	0x0800209f
 8001e6c:	0800209f 	.word	0x0800209f
 8001e70:	0800209f 	.word	0x0800209f
 8001e74:	0800209f 	.word	0x0800209f
 8001e78:	08002013 	.word	0x08002013
 8001e7c:	08002023 	.word	0x08002023
 8001e80:	08002033 	.word	0x08002033
 8001e84:	08002043 	.word	0x08002043
 8001e88:	0800209f 	.word	0x0800209f
 8001e8c:	0800209f 	.word	0x0800209f
 8001e90:	0800209f 	.word	0x0800209f
 8001e94:	0800209f 	.word	0x0800209f
 8001e98:	0800209f 	.word	0x0800209f
 8001e9c:	0800209f 	.word	0x0800209f
 8001ea0:	0800209f 	.word	0x0800209f
 8001ea4:	0800209f 	.word	0x0800209f
 8001ea8:	08002053 	.word	0x08002053
 8001eac:	0800209f 	.word	0x0800209f
 8001eb0:	0800209f 	.word	0x0800209f
 8001eb4:	0800209f 	.word	0x0800209f
 8001eb8:	0800205b 	.word	0x0800205b
 8001ebc:	0800209f 	.word	0x0800209f
 8001ec0:	0800209f 	.word	0x0800209f
 8001ec4:	08002063 	.word	0x08002063
 8001ec8:	0800209f 	.word	0x0800209f
 8001ecc:	0800209f 	.word	0x0800209f
 8001ed0:	0800206f 	.word	0x0800206f
 8001ed4:	0800209f 	.word	0x0800209f
 8001ed8:	0800209f 	.word	0x0800209f
 8001edc:	0800209f 	.word	0x0800209f
 8001ee0:	0800209f 	.word	0x0800209f
 8001ee4:	0800209f 	.word	0x0800209f
 8001ee8:	0800209f 	.word	0x0800209f
 8001eec:	0800209f 	.word	0x0800209f
 8001ef0:	0800209f 	.word	0x0800209f
 8001ef4:	0800209f 	.word	0x0800209f
 8001ef8:	0800209f 	.word	0x0800209f
 8001efc:	0800209f 	.word	0x0800209f
 8001f00:	08002077 	.word	0x08002077
 8001f04:	0800209f 	.word	0x0800209f
 8001f08:	0800209f 	.word	0x0800209f
 8001f0c:	0800209f 	.word	0x0800209f
 8001f10:	0800209f 	.word	0x0800209f
 8001f14:	0800209f 	.word	0x0800209f
 8001f18:	0800209f 	.word	0x0800209f
 8001f1c:	0800209f 	.word	0x0800209f
 8001f20:	0800209f 	.word	0x0800209f
 8001f24:	0800209f 	.word	0x0800209f
 8001f28:	08002087 	.word	0x08002087
 8001f2c:	08002091 	.word	0x08002091
	/*Digital outputs------------*/
	//@NB: never change this addressing for the digital inputs, MB read function use this sequence

		case MB_COA_DO1_ENABLE:
			*value = HAL_GPIO_ReadPin(gVar.dio.dout[DO_1].port, gVar.dio.dout[DO_1].pin);
 8001f30:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001f32:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8001f36:	4413      	add	r3, r2
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	495c      	ldr	r1, [pc, #368]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001f3c:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8001f40:	440b      	add	r3, r1
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f019 fecc 	bl	801bce4 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	701a      	strb	r2, [r3, #0]
			break;
 8001f54:	e0a4      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_DO2_ENABLE:
			*value = HAL_GPIO_ReadPin(gVar.dio.dout[DO_2].port, gVar.dio.dout[DO_2].pin);
 8001f56:	4a55      	ldr	r2, [pc, #340]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001f58:	f242 035c 	movw	r3, #8284	; 0x205c
 8001f5c:	4413      	add	r3, r2
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4952      	ldr	r1, [pc, #328]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001f62:	f242 0360 	movw	r3, #8288	; 0x2060
 8001f66:	440b      	add	r3, r1
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f019 feb9 	bl	801bce4 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e091      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_DO3_ENABLE:
			*value = HAL_GPIO_ReadPin(gVar.dio.dout[DO_3].port, gVar.dio.dout[DO_3].pin);
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001f7e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4949      	ldr	r1, [pc, #292]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001f86:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8001f8a:	440b      	add	r3, r1
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f019 fea7 	bl	801bce4 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	701a      	strb	r2, [r3, #0]
			break;
 8001f9e:	e07f      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_DO4_ENABLE:
			*value = HAL_GPIO_ReadPin(gVar.dio.dout[DO_4].port, gVar.dio.dout[DO_4].pin);
 8001fa0:	4a42      	ldr	r2, [pc, #264]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001fa2:	f242 1324 	movw	r3, #8484	; 0x2124
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4940      	ldr	r1, [pc, #256]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001fac:	f242 1328 	movw	r3, #8488	; 0x2128
 8001fb0:	440b      	add	r3, r1
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f019 fe94 	bl	801bce4 <HAL_GPIO_ReadPin>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	701a      	strb	r2, [r3, #0]
			break;
 8001fc4:	e06c      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_DO5_ENABLE:
			*value = HAL_GPIO_ReadPin(gVar.dio.dout[DO_5].port, gVar.dio.dout[DO_5].pin);
 8001fc6:	4a39      	ldr	r2, [pc, #228]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001fc8:	f242 1388 	movw	r3, #8584	; 0x2188
 8001fcc:	4413      	add	r3, r2
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4936      	ldr	r1, [pc, #216]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001fd2:	f242 138c 	movw	r3, #8588	; 0x218c
 8001fd6:	440b      	add	r3, r1
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f019 fe81 	bl	801bce4 <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	701a      	strb	r2, [r3, #0]
			break;
 8001fea:	e059      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_DO6_ENABLE:
			*value = HAL_GPIO_ReadPin(gVar.dio.dout[DO_6].port, gVar.dio.dout[DO_6].pin);
 8001fec:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001fee:	f242 13ec 	movw	r3, #8684	; 0x21ec
 8001ff2:	4413      	add	r3, r2
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	492d      	ldr	r1, [pc, #180]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8001ff8:	f242 13f0 	movw	r3, #8688	; 0x21f0
 8001ffc:	440b      	add	r3, r1
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f019 fe6e 	bl	801bce4 <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	701a      	strb	r2, [r3, #0]
			break;
 8002010:	e046      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
//			break;

			/*Analog outputs------------*/
			//@NB: never change this addressing for the digital inputs, MB read function use this sequence
		case MB_COA_AO1_ENABLE:
			*value = gVar.ao[AO_1].enabled;
 8002012:	4a26      	ldr	r2, [pc, #152]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8002014:	f641 6355 	movw	r3, #7765	; 0x1e55
 8002018:	4413      	add	r3, r2
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	701a      	strb	r2, [r3, #0]
			break;
 8002020:	e03e      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_AO2_ENABLE:
			*value = gVar.ao[AO_2].enabled;
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8002024:	f641 6381 	movw	r3, #7809	; 0x1e81
 8002028:	4413      	add	r3, r2
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	701a      	strb	r2, [r3, #0]
			break;
 8002030:	e036      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_AO3_ENABLE:
			*value = gVar.ao[AO_3].enabled;
 8002032:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8002034:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8002038:	4413      	add	r3, r2
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	701a      	strb	r2, [r3, #0]
			break;
 8002040:	e02e      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_AO4_ENABLE:
			*value = gVar.ao[AO_4].enabled;
 8002042:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8002044:	f641 63d9 	movw	r3, #7897	; 0x1ed9
 8002048:	4413      	add	r3, r2
 800204a:	781a      	ldrb	r2, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	701a      	strb	r2, [r3, #0]
			break;
 8002050:	e026      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
			/*Dev net info ------------*/
		case MB_COA_MB_SAVE_NET_INFO:
			*value = 0;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
			break;
 8002058:	e022      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
			/*NModbus RTU Serial------------*/
		case MB_COA_MB_SAVE_SERIAL_CONFIG:
			*value = 0;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
			break;
 8002060:	e01e      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
//
//			break;

			/*NModbus RTU Master------------*/
		case MB_COA_MB_MSTR_ENABLE:
			*value = gVar.mbRTUMaster.enable;
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8002064:	f893 2948 	ldrb.w	r2, [r3, #2376]	; 0x948
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	701a      	strb	r2, [r3, #0]
			break;
 800206c:	e018      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
			/*NModbus RTU Slave------------*/
		case MB_COA_MB_SAVE_SLAVE_ADDR:
			*value = 0;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			break;
 8002074:	e014      	b.n	80020a0 <CB_MB_readCOCallback+0x288>

			/*Encoder--------------------*/
		case MB_COA_ENC_ENABLE:
			*value = gVar.dio.enc.enable;
 8002076:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8002078:	f242 4344 	movw	r3, #9284	; 0x2444
 800207c:	4413      	add	r3, r2
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	701a      	strb	r2, [r3, #0]
			break;
 8002084:	e00c      	b.n	80020a0 <CB_MB_readCOCallback+0x288>


			/*Dev utilities--------------*/
		case MB_COA_RESTART:
			*value = gVar.restartFlage;
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <CB_MB_readCOCallback+0x294>)
 8002088:	7a5a      	ldrb	r2, [r3, #9]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	701a      	strb	r2, [r3, #0]
			break;
 800208e:	e007      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
		case MB_COA_DBUG_ENABLE:
			*value = DBG_IS_ENABLED();
 8002090:	f00b fe90 	bl	800ddb4 <DBG_IS_ENABLED>
 8002094:	4603      	mov	r3, r0
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	701a      	strb	r2, [r3, #0]
			break;
 800209c:	e000      	b.n	80020a0 <CB_MB_readCOCallback+0x288>
//			if(address < MB_COA_MAX){
//				errorStatus =	MB_REG_GetCO(address, value);
//			}else{
//				errorStatus = MB_ERROR;
//			}
			break;
 800209e:	bf00      	nop
	}



//	DBG_SPRINT_NL("%s %s: { %s: %d, %s: %d }",STR_MB, STR_REQ, STR_ADDRESS, address, STR_VALUE, *value);
	return errorStatus;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	24002050 	.word	0x24002050

080020b0 <CB_MB_readIRCallback>:
  * @brief calback function for input register
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  */
uint8_t CB_MB_readIRCallback(MB_IRAddrEnum address, uint16_t *value){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	80fb      	strh	r3, [r7, #6]
	uint8_t errorStatus = MB_OK;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]

	switch (address) {
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	4be5      	ldr	r3, [pc, #916]	; (8002458 <CB_MB_readIRCallback+0x3a8>)
 80020c4:	4413      	add	r3, r2
 80020c6:	2bb1      	cmp	r3, #177	; 0xb1
 80020c8:	f200 82ed 	bhi.w	80026a6 <CB_MB_readIRCallback+0x5f6>
 80020cc:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <CB_MB_readIRCallback+0x24>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	0800239d 	.word	0x0800239d
 80020d8:	080023ad 	.word	0x080023ad
 80020dc:	080023d1 	.word	0x080023d1
 80020e0:	080026a7 	.word	0x080026a7
 80020e4:	080026a7 	.word	0x080026a7
 80020e8:	080023ed 	.word	0x080023ed
 80020ec:	080023fd 	.word	0x080023fd
 80020f0:	08002421 	.word	0x08002421
 80020f4:	080026a7 	.word	0x080026a7
 80020f8:	080026a7 	.word	0x080026a7
 80020fc:	080026a7 	.word	0x080026a7
 8002100:	080026a7 	.word	0x080026a7
 8002104:	080026a7 	.word	0x080026a7
 8002108:	080026a7 	.word	0x080026a7
 800210c:	080026a7 	.word	0x080026a7
 8002110:	080026a7 	.word	0x080026a7
 8002114:	080026a7 	.word	0x080026a7
 8002118:	080026a7 	.word	0x080026a7
 800211c:	080026a7 	.word	0x080026a7
 8002120:	080026a7 	.word	0x080026a7
 8002124:	0800243d 	.word	0x0800243d
 8002128:	0800244b 	.word	0x0800244b
 800212c:	08002465 	.word	0x08002465
 8002130:	08002473 	.word	0x08002473
 8002134:	08002481 	.word	0x08002481
 8002138:	0800248d 	.word	0x0800248d
 800213c:	080026a7 	.word	0x080026a7
 8002140:	080026a7 	.word	0x080026a7
 8002144:	080026a7 	.word	0x080026a7
 8002148:	080026a7 	.word	0x080026a7
 800214c:	080026a7 	.word	0x080026a7
 8002150:	080026a7 	.word	0x080026a7
 8002154:	080026a7 	.word	0x080026a7
 8002158:	080026a7 	.word	0x080026a7
 800215c:	080026a7 	.word	0x080026a7
 8002160:	080026a7 	.word	0x080026a7
 8002164:	080026a7 	.word	0x080026a7
 8002168:	080026a7 	.word	0x080026a7
 800216c:	080026a7 	.word	0x080026a7
 8002170:	080026a7 	.word	0x080026a7
 8002174:	080026a7 	.word	0x080026a7
 8002178:	080026a7 	.word	0x080026a7
 800217c:	080026a7 	.word	0x080026a7
 8002180:	080026a7 	.word	0x080026a7
 8002184:	080026a7 	.word	0x080026a7
 8002188:	080026a7 	.word	0x080026a7
 800218c:	080026a7 	.word	0x080026a7
 8002190:	080026a7 	.word	0x080026a7
 8002194:	080026a7 	.word	0x080026a7
 8002198:	080026a7 	.word	0x080026a7
 800219c:	0800249b 	.word	0x0800249b
 80021a0:	080024a7 	.word	0x080024a7
 80021a4:	080026a7 	.word	0x080026a7
 80021a8:	080026a7 	.word	0x080026a7
 80021ac:	080026a7 	.word	0x080026a7
 80021b0:	080026a7 	.word	0x080026a7
 80021b4:	080026a7 	.word	0x080026a7
 80021b8:	080026a7 	.word	0x080026a7
 80021bc:	080026a7 	.word	0x080026a7
 80021c0:	080026a7 	.word	0x080026a7
 80021c4:	080024b5 	.word	0x080024b5
 80021c8:	080026a7 	.word	0x080026a7
 80021cc:	080026a7 	.word	0x080026a7
 80021d0:	080026a7 	.word	0x080026a7
 80021d4:	080026a7 	.word	0x080026a7
 80021d8:	080024c7 	.word	0x080024c7
 80021dc:	080026a7 	.word	0x080026a7
 80021e0:	080026a7 	.word	0x080026a7
 80021e4:	080026a7 	.word	0x080026a7
 80021e8:	080026a7 	.word	0x080026a7
 80021ec:	080024d9 	.word	0x080024d9
 80021f0:	080024f1 	.word	0x080024f1
 80021f4:	08002509 	.word	0x08002509
 80021f8:	0800251d 	.word	0x0800251d
 80021fc:	08002535 	.word	0x08002535
 8002200:	08002549 	.word	0x08002549
 8002204:	08002561 	.word	0x08002561
 8002208:	080026a7 	.word	0x080026a7
 800220c:	080026a7 	.word	0x080026a7
 8002210:	080026a7 	.word	0x080026a7
 8002214:	080026a7 	.word	0x080026a7
 8002218:	080026a7 	.word	0x080026a7
 800221c:	080026a7 	.word	0x080026a7
 8002220:	080026a7 	.word	0x080026a7
 8002224:	080026a7 	.word	0x080026a7
 8002228:	080026a7 	.word	0x080026a7
 800222c:	080026a7 	.word	0x080026a7
 8002230:	080026a7 	.word	0x080026a7
 8002234:	080026a7 	.word	0x080026a7
 8002238:	080026a7 	.word	0x080026a7
 800223c:	080026a7 	.word	0x080026a7
 8002240:	080026a7 	.word	0x080026a7
 8002244:	080026a7 	.word	0x080026a7
 8002248:	080026a7 	.word	0x080026a7
 800224c:	080026a7 	.word	0x080026a7
 8002250:	080026a7 	.word	0x080026a7
 8002254:	080026a7 	.word	0x080026a7
 8002258:	080026a7 	.word	0x080026a7
 800225c:	080026a7 	.word	0x080026a7
 8002260:	080026a7 	.word	0x080026a7
 8002264:	08002575 	.word	0x08002575
 8002268:	0800257f 	.word	0x0800257f
 800226c:	080026a7 	.word	0x080026a7
 8002270:	080026a7 	.word	0x080026a7
 8002274:	080026a7 	.word	0x080026a7
 8002278:	080026a7 	.word	0x080026a7
 800227c:	080026a7 	.word	0x080026a7
 8002280:	080026a7 	.word	0x080026a7
 8002284:	080026a7 	.word	0x080026a7
 8002288:	080026a7 	.word	0x080026a7
 800228c:	08002589 	.word	0x08002589
 8002290:	080025a5 	.word	0x080025a5
 8002294:	080026a7 	.word	0x080026a7
 8002298:	080026a7 	.word	0x080026a7
 800229c:	080026a7 	.word	0x080026a7
 80022a0:	080025b9 	.word	0x080025b9
 80022a4:	080025d5 	.word	0x080025d5
 80022a8:	080026a7 	.word	0x080026a7
 80022ac:	080026a7 	.word	0x080026a7
 80022b0:	080026a7 	.word	0x080026a7
 80022b4:	080026a7 	.word	0x080026a7
 80022b8:	080026a7 	.word	0x080026a7
 80022bc:	080026a7 	.word	0x080026a7
 80022c0:	080026a7 	.word	0x080026a7
 80022c4:	080026a7 	.word	0x080026a7
 80022c8:	080026a7 	.word	0x080026a7
 80022cc:	080026a7 	.word	0x080026a7
 80022d0:	080026a7 	.word	0x080026a7
 80022d4:	080026a7 	.word	0x080026a7
 80022d8:	080026a7 	.word	0x080026a7
 80022dc:	080026a7 	.word	0x080026a7
 80022e0:	080026a7 	.word	0x080026a7
 80022e4:	080026a7 	.word	0x080026a7
 80022e8:	080026a7 	.word	0x080026a7
 80022ec:	080026a7 	.word	0x080026a7
 80022f0:	080026a7 	.word	0x080026a7
 80022f4:	080026a7 	.word	0x080026a7
 80022f8:	080026a7 	.word	0x080026a7
 80022fc:	080026a7 	.word	0x080026a7
 8002300:	080026a7 	.word	0x080026a7
 8002304:	080026a7 	.word	0x080026a7
 8002308:	080026a7 	.word	0x080026a7
 800230c:	080026a7 	.word	0x080026a7
 8002310:	080026a7 	.word	0x080026a7
 8002314:	080026a7 	.word	0x080026a7
 8002318:	080026a7 	.word	0x080026a7
 800231c:	080026a7 	.word	0x080026a7
 8002320:	080026a7 	.word	0x080026a7
 8002324:	080026a7 	.word	0x080026a7
 8002328:	080026a7 	.word	0x080026a7
 800232c:	080025e9 	.word	0x080025e9
 8002330:	080025fd 	.word	0x080025fd
 8002334:	08002607 	.word	0x08002607
 8002338:	08002611 	.word	0x08002611
 800233c:	080025f3 	.word	0x080025f3
 8002340:	0800261b 	.word	0x0800261b
 8002344:	08002625 	.word	0x08002625
 8002348:	080026a7 	.word	0x080026a7
 800234c:	080026a7 	.word	0x080026a7
 8002350:	080026a7 	.word	0x080026a7
 8002354:	0800262f 	.word	0x0800262f
 8002358:	08002657 	.word	0x08002657
 800235c:	08002661 	.word	0x08002661
 8002360:	0800266b 	.word	0x0800266b
 8002364:	08002639 	.word	0x08002639
 8002368:	08002643 	.word	0x08002643
 800236c:	0800264d 	.word	0x0800264d
 8002370:	08002675 	.word	0x08002675
 8002374:	0800267f 	.word	0x0800267f
 8002378:	080026a7 	.word	0x080026a7
 800237c:	080026a7 	.word	0x080026a7
 8002380:	080026a7 	.word	0x080026a7
 8002384:	080026a7 	.word	0x080026a7
 8002388:	080026a7 	.word	0x080026a7
 800238c:	080026a7 	.word	0x080026a7
 8002390:	08002689 	.word	0x08002689
 8002394:	08002693 	.word	0x08002693
 8002398:	0800269d 	.word	0x0800269d
		/*Analog Inputs-----------------------*/
		//Analog Input - 1
		case MB_IRA_AI1_VALUE_12BIT:
			*value = gVar.ai[AI_1].rawValue;
 800239c:	4a2f      	ldr	r2, [pc, #188]	; (800245c <CB_MB_readIRCallback+0x3ac>)
 800239e:	f641 7312 	movw	r3, #7954	; 0x1f12
 80023a2:	4413      	add	r3, r2
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	801a      	strh	r2, [r3, #0]
			break;
 80023aa:	e17f      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_AI1_CURRENT:
			*value = gVar.ai[AI_1].current*100;
 80023ac:	4a2b      	ldr	r2, [pc, #172]	; (800245c <CB_MB_readIRCallback+0x3ac>)
 80023ae:	f641 7318 	movw	r3, #7960	; 0x1f18
 80023b2:	4413      	add	r3, r2
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002460 <CB_MB_readIRCallback+0x3b0>
 80023bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c4:	ee17 3a90 	vmov	r3, s15
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	801a      	strh	r2, [r3, #0]
			break;
 80023ce:	e16d      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_AI1_VOLTAGE:
			*value = gVar.ai[AI_1].voltage;
 80023d0:	4a22      	ldr	r2, [pc, #136]	; (800245c <CB_MB_readIRCallback+0x3ac>)
 80023d2:	f641 7314 	movw	r3, #7956	; 0x1f14
 80023d6:	4413      	add	r3, r2
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	801a      	strh	r2, [r3, #0]
			break;
 80023ea:	e15f      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		//Analog Input - 2
		case MB_IRA_AI2_VALUE_12BIT:
			*value = gVar.ai[AI_2].rawValue;
 80023ec:	4a1b      	ldr	r2, [pc, #108]	; (800245c <CB_MB_readIRCallback+0x3ac>)
 80023ee:	f641 7382 	movw	r3, #8066	; 0x1f82
 80023f2:	4413      	add	r3, r2
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	801a      	strh	r2, [r3, #0]
			break;
 80023fa:	e157      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_AI2_CURRENT:
			*value = gVar.ai[AI_2].current*100;
 80023fc:	4a17      	ldr	r2, [pc, #92]	; (800245c <CB_MB_readIRCallback+0x3ac>)
 80023fe:	f641 7388 	movw	r3, #8072	; 0x1f88
 8002402:	4413      	add	r3, r2
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002460 <CB_MB_readIRCallback+0x3b0>
 800240c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002414:	ee17 3a90 	vmov	r3, s15
 8002418:	b29a      	uxth	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	801a      	strh	r2, [r3, #0]
			break;
 800241e:	e145      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_AI2_VOLTAGE:
			*value = gVar.ai[AI_2].voltage;
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <CB_MB_readIRCallback+0x3ac>)
 8002422:	f641 7384 	movw	r3, #8068	; 0x1f84
 8002426:	4413      	add	r3, r2
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002430:	ee17 3a90 	vmov	r3, s15
 8002434:	b29a      	uxth	r2, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	801a      	strh	r2, [r3, #0]
			break;
 800243a:	e137      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>

			/*NModbus TCP Server------------*/
			//Socket 0

		case MB_IRA_MB_TCPS_SOCK0_DEST_IP_1:
			*value = gVar.server.sock[0].destIP[0];
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <CB_MB_readIRCallback+0x3ac>)
 800243e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8002442:	b29a      	uxth	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	801a      	strh	r2, [r3, #0]
			break;
 8002448:	e130      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_MB_TCPS_SOCK0_DEST_IP_2:
			*value = gVar.server.sock[0].destIP[1];
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <CB_MB_readIRCallback+0x3ac>)
 800244c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002450:	b29a      	uxth	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	801a      	strh	r2, [r3, #0]
			break;
 8002456:	e129      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
 8002458:	ffff8acf 	.word	0xffff8acf
 800245c:	24002050 	.word	0x24002050
 8002460:	42c80000 	.word	0x42c80000
		case MB_IRA_MB_TCPS_SOCK0_DEST_IP_3:
			*value = gVar.server.sock[0].destIP[2];
 8002464:	4b94      	ldr	r3, [pc, #592]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002466:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800246a:	b29a      	uxth	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	801a      	strh	r2, [r3, #0]
			break;
 8002470:	e11c      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_MB_TCPS_SOCK0_DEST_IP_4:
			*value = gVar.server.sock[0].destIP[3];
 8002472:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002474:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8002478:	b29a      	uxth	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	801a      	strh	r2, [r3, #0]
			break;
 800247e:	e115      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_MB_TCPS_SOCK0_DEST_PORT:
			*value = gVar.server.sock[0].destPort;
 8002480:	4b8d      	ldr	r3, [pc, #564]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002482:	f8b3 2370 	ldrh.w	r2, [r3, #880]	; 0x370
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	801a      	strh	r2, [r3, #0]
			break;
 800248a:	e10f      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_MB_TCPS_SOCK0_STATUS:
			*value = gVar.server.sock[0].status;
 800248c:	4b8a      	ldr	r3, [pc, #552]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800248e:	f993 3085 	ldrsb.w	r3, [r3, #133]	; 0x85
 8002492:	b29a      	uxth	r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	801a      	strh	r2, [r3, #0]
			break;
 8002498:	e108      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
//			*value = gVar.server.sock[1].status;
//			break;
			/*NModbus TCP client------------*/

		case MB_IRA_MB_TCPC_SOCK_SRC_PORT:
			*value = gVar.client.sock[0].srcPort;
 800249a:	4b87      	ldr	r3, [pc, #540]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800249c:	f8b3 266e 	ldrh.w	r2, [r3, #1646]	; 0x66e
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	801a      	strh	r2, [r3, #0]
			break;
 80024a4:	e102      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_MB_TCPC_SOCK_STATUS:
			*value = gVar.client.sock[0].status;
 80024a6:	4b84      	ldr	r3, [pc, #528]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80024a8:	f993 3385 	ldrsb.w	r3, [r3, #901]	; 0x385
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	801a      	strh	r2, [r3, #0]
			break;
 80024b2:	e0fb      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>

			/*Digital Inputs------------*/
		case MB_IRA_DI1_SIGNAL_PERIOD:
			*value = gVar.dio.di[DI_1].pulseInf.period;
 80024b4:	4a80      	ldr	r2, [pc, #512]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80024b6:	f242 2378 	movw	r3, #8824	; 0x2278
 80024ba:	4413      	add	r3, r2
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	801a      	strh	r2, [r3, #0]
			break;
 80024c4:	e0f2      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DI2_SIGNAL_PERIOD:
			*value = gVar.dio.di[DI_2].pulseInf.period;
 80024c6:	4a7c      	ldr	r2, [pc, #496]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80024c8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80024cc:	4413      	add	r3, r2
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	801a      	strh	r2, [r3, #0]
			break;
 80024d6:	e0e9      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>

			/*Encoder-------------------*/
		case MB_IRA_ENC_QUAD_DIRECTION:
			ENC_GetDirQuad(&gVar.dio.enc);
 80024d8:	4878      	ldr	r0, [pc, #480]	; (80026bc <CB_MB_readIRCallback+0x60c>)
 80024da:	f00c fa45 	bl	800e968 <ENC_GetDirQuad>
			*value = (uint16_t)(gVar.dio.enc.direction);
 80024de:	4a76      	ldr	r2, [pc, #472]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80024e0:	f242 43b8 	movw	r3, #9400	; 0x24b8
 80024e4:	4413      	add	r3, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	801a      	strh	r2, [r3, #0]
			break;
 80024ee:	e0dd      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_ENC_QUAD_COUNT_LSB16:
			ENC_ReadQuad(&gVar.dio.enc);
 80024f0:	4872      	ldr	r0, [pc, #456]	; (80026bc <CB_MB_readIRCallback+0x60c>)
 80024f2:	f00c f9d5 	bl	800e8a0 <ENC_ReadQuad>
			*value = (uint16_t)(gVar.dio.enc.counterQuad&0x0000FFFF);
 80024f6:	4a70      	ldr	r2, [pc, #448]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80024f8:	f242 43a0 	movw	r3, #9376	; 0x24a0
 80024fc:	4413      	add	r3, r2
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b29a      	uxth	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	801a      	strh	r2, [r3, #0]
			break;
 8002506:	e0d1      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_ENC_QUAD_COUNT_MSB16:
			*value = (uint16_t)(gVar.dio.enc.counterQuad>>16)&0x0000FFFF;
 8002508:	4a6b      	ldr	r2, [pc, #428]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800250a:	f242 43a0 	movw	r3, #9376	; 0x24a0
 800250e:	4413      	add	r3, r2
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	141b      	asrs	r3, r3, #16
 8002514:	b29a      	uxth	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	801a      	strh	r2, [r3, #0]
			break;
 800251a:	e0c7      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_ENC_INCR_CHA_COUNT_LSB16:
			ENC_ReadChA(&gVar.dio.enc);
 800251c:	4867      	ldr	r0, [pc, #412]	; (80026bc <CB_MB_readIRCallback+0x60c>)
 800251e:	f00c fa8f 	bl	800ea40 <ENC_ReadChA>
			*value = (uint16_t)(gVar.dio.enc.counterA&0x0000FFFF);
 8002522:	4a65      	ldr	r2, [pc, #404]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002524:	f242 43a4 	movw	r3, #9380	; 0x24a4
 8002528:	4413      	add	r3, r2
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b29a      	uxth	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	801a      	strh	r2, [r3, #0]
			break;
 8002532:	e0bb      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_ENC_INCR_CHA_COUNT_MSB16:
			*value = (uint16_t)(gVar.dio.enc.counterA>>16)&0x0000FFFF;
 8002534:	4a60      	ldr	r2, [pc, #384]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002536:	f242 43a4 	movw	r3, #9380	; 0x24a4
 800253a:	4413      	add	r3, r2
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0c1b      	lsrs	r3, r3, #16
 8002540:	b29a      	uxth	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	801a      	strh	r2, [r3, #0]
			break;
 8002546:	e0b1      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_ENC_INCR_CHB_COUNT_LSB16:
			ENC_ReadChB(&gVar.dio.enc);
 8002548:	485c      	ldr	r0, [pc, #368]	; (80026bc <CB_MB_readIRCallback+0x60c>)
 800254a:	f00c fa96 	bl	800ea7a <ENC_ReadChB>
			*value = (uint16_t)(gVar.dio.enc.counterB&0x0000FFFF);
 800254e:	4a5a      	ldr	r2, [pc, #360]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002550:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8002554:	4413      	add	r3, r2
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29a      	uxth	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	801a      	strh	r2, [r3, #0]
			break;
 800255e:	e0a5      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_ENC_INCR_CHB_COUNT_MSB16:
			*value = (uint16_t)(gVar.dio.enc.counterB>>16)&0x0000FFFF;
 8002560:	4a55      	ldr	r2, [pc, #340]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002562:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8002566:	4413      	add	r3, r2
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	0c1b      	lsrs	r3, r3, #16
 800256c:	b29a      	uxth	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	801a      	strh	r2, [r3, #0]
			break;
 8002572:	e09b      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>


			/*Utilities----------------*/

		case MB_IRA_DEV_HW_VERSION:
			*value = (uint16_t)HW_VIRSION;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	801a      	strh	r2, [r3, #0]
			break;
 800257c:	e096      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DEV_FW_VERSION:
			*value =  (uint16_t)FW_VIRSION;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002584:	801a      	strh	r2, [r3, #0]
			break;
 8002586:	e091      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>

			/*PID-------------------*/
		case MB_IRA_PID1_FEEDBACK:
			*value = gVar.pid1.measurement;
 8002588:	4a4b      	ldr	r2, [pc, #300]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800258a:	f242 5314 	movw	r3, #9492	; 0x2514
 800258e:	4413      	add	r3, r2
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002598:	ee17 3a90 	vmov	r3, s15
 800259c:	b29a      	uxth	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	801a      	strh	r2, [r3, #0]
			break;
 80025a2:	e083      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_PID1_OUTPUT:
			*value = gVar.pid1.output_pid;
 80025a4:	4a44      	ldr	r2, [pc, #272]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80025a6:	f242 5338 	movw	r3, #9528	; 0x2538
 80025aa:	4413      	add	r3, r2
 80025ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	801a      	strh	r2, [r3, #0]
			break;
 80025b6:	e079      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_PID2_FEEDBACK:
			*value = gVar.pid2.measurement;
 80025b8:	4a3f      	ldr	r2, [pc, #252]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80025ba:	f242 5354 	movw	r3, #9556	; 0x2554
 80025be:	4413      	add	r3, r2
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c8:	ee17 3a90 	vmov	r3, s15
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	801a      	strh	r2, [r3, #0]
			break;
 80025d2:	e06b      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_PID2_OUTPUT:
			*value = gVar.pid2.output_pid;
 80025d4:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80025d6:	f242 5378 	movw	r3, #9592	; 0x2578
 80025da:	4413      	add	r3, r2
 80025dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	801a      	strh	r2, [r3, #0]
			break;
 80025e6:	e061      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>

			/*Diagnosis---------------------*/
			//RTU bus error
		case MB_IRA_DIAG_RTU_OVERRUN_ERR_COUNT:
			*value = gVar.diag.rtuBus.oreCount;
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80025ea:	8a5a      	ldrh	r2, [r3, #18]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	801a      	strh	r2, [r3, #0]
			break;
 80025f0:	e05c      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_RTU_DMATX_ERR_COUNT:
			*value = gVar.diag.rtuBus.dteCount;
 80025f2:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80025f4:	8a9a      	ldrh	r2, [r3, #20]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	801a      	strh	r2, [r3, #0]
			break;
 80025fa:	e057      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_RTU_PARITY_ERR_COUNT:
			*value = gVar.diag.rtuBus.peCount;
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 80025fe:	899a      	ldrh	r2, [r3, #12]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	801a      	strh	r2, [r3, #0]
			break;
 8002604:	e052      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_RTU_NOISE_ERR_COUNT:
			*value = gVar.diag.rtuBus.neCount;
 8002606:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002608:	89da      	ldrh	r2, [r3, #14]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	801a      	strh	r2, [r3, #0]
			break;
 800260e:	e04d      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_RTU_FRAME_ERR_COUNT:
			*value = gVar.diag.rtuBus.feCount;
 8002610:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002612:	8a1a      	ldrh	r2, [r3, #16]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	801a      	strh	r2, [r3, #0]
			break;
 8002618:	e048      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_RTU_DMATX_ERR_CODE:
			*value = gVar.diag.rtuBus.dmaTxErrCode;
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800261c:	8ada      	ldrh	r2, [r3, #22]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	801a      	strh	r2, [r3, #0]
			break;
 8002622:	e043      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_RTU_DMARX_ERR_CODE:
			*value = gVar.diag.rtuBus.dmaRxErrCode;
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002626:	8b1a      	ldrh	r2, [r3, #24]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	801a      	strh	r2, [r3, #0]
			break;
 800262c:	e03e      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
			//SPI bus error
		case MB_IRA_DIAG_SPI_OVERRUN_ERR_COUNT:
			*value = gVar.diag.w5500Spi.oreCount;
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002630:	8c1a      	ldrh	r2, [r3, #32]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	801a      	strh	r2, [r3, #0]
			break;
 8002636:	e039      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_SPI_DMATX_ERR_COUNT:
			*value = gVar.diag.w5500Spi.dteCount;
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800263a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	801a      	strh	r2, [r3, #0]
			break;
 8002640:	e034      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_SPI_FLAG_ERR_COUNT:
			*value = gVar.diag.w5500Spi.flgeCount;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002644:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	801a      	strh	r2, [r3, #0]
			break;
 800264a:	e02f      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_SPI_ABORT_ERR_COUNT:
			*value = gVar.diag.w5500Spi.abreCount;
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800264e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	801a      	strh	r2, [r3, #0]
			break;
 8002654:	e02a      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_SPI_MODF_ERR_COUNT:
			*value = gVar.diag.w5500Spi.modfeCount;
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002658:	8b9a      	ldrh	r2, [r3, #28]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	801a      	strh	r2, [r3, #0]
			break;
 800265e:	e025      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_SPI_CRC_ERR_COUNT:
			*value = gVar.diag.w5500Spi.crceCount;
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002662:	8bda      	ldrh	r2, [r3, #30]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	801a      	strh	r2, [r3, #0]
			break;
 8002668:	e020      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_SPI_FRAME_ERR_COUNT:
			*value = gVar.diag.w5500Spi.feCount;
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800266c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	801a      	strh	r2, [r3, #0]
			break;
 8002672:	e01b      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_SPI_DMATX_ERR_CODE:
			*value = gVar.diag.w5500Spi.dmaTxErrCode;
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002676:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	801a      	strh	r2, [r3, #0]
			break;
 800267c:	e016      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_SPI_DMARX_ERR_CODE:
			*value = gVar.diag.w5500Spi.dmaRxErrCode;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002680:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	801a      	strh	r2, [r3, #0]

			break;
 8002686:	e011      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
			//I2C comm. err
		case MB_IRA_DIAG_I2C_ERR_CODE:
			*value = gVar.diag.i2c.ErrCode;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800268a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	801a      	strh	r2, [r3, #0]
			break;
 8002690:	e00c      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_I2C_DMATX_CODE:
			*value = gVar.diag.i2c.dmaTxErrCode;
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 8002694:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	801a      	strh	r2, [r3, #0]
			break;
 800269a:	e007      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
		case MB_IRA_DIAG_I2C_DMARX_CODE:
			*value = gVar.diag.i2c.dmaRxErrCode;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <CB_MB_readIRCallback+0x608>)
 800269e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	801a      	strh	r2, [r3, #0]
			break;
 80026a4:	e002      	b.n	80026ac <CB_MB_readIRCallback+0x5fc>
//			if(address < MB_IRA_MAX){
//				errorStatus =	MB_REG_GetIR(address, value);
//			}else{
//				errorStatus = MB_ERROR;
//			}
			errorStatus = MB_ERROR;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
			break;
 80026aa:	bf00      	nop
//	}else{
//		errorStatus = MB_ERROR;
//	}

//	DBG_SPRINT_NL("%s %s: { %s: %d, %s: %d }",STR_MB, STR_REQ, STR_ADDRESS, address, STR_VALUE, *value);
	return errorStatus;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	24002050 	.word	0x24002050
 80026bc:	24004494 	.word	0x24004494

080026c0 <CB_MB_writeHRCallback>:
  * @param reg: pointer to modbus registers
  * @param address: address of a register
  * @retval return error if an exception happen
  *
  */
uint8_t CB_MB_writeHRCallback( MB_HRAddrEnum address, uint16_t value){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4602      	mov	r2, r0
 80026ca:	1dbb      	adds	r3, r7, #6
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	460a      	mov	r2, r1
 80026d2:	801a      	strh	r2, [r3, #0]
	uint8_t errStatus = MB_OK;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f

	/*------Write your code here------*/

	switch (address) {
 80026da:	1dbb      	adds	r3, r7, #6
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <CB_MB_writeHRCallback+0x28>)
 80026e0:	4413      	add	r3, r2
 80026e2:	f240 1239 	movw	r2, #313	; 0x139
 80026e6:	e001      	b.n	80026ec <CB_MB_writeHRCallback+0x2c>
 80026e8:	ffff63bf 	.word	0xffff63bf
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f201 81a6 	bhi.w	8003a3e <CB_MB_writeHRCallback+0x137e>
 80026f2:	a101      	add	r1, pc, #4	; (adr r1, 80026f8 <CB_MB_writeHRCallback+0x38>)
 80026f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026f8:	08002be1 	.word	0x08002be1
 80026fc:	08003a3f 	.word	0x08003a3f
 8002700:	08003a3f 	.word	0x08003a3f
 8002704:	08002c2b 	.word	0x08002c2b
 8002708:	08003a3f 	.word	0x08003a3f
 800270c:	08003a3f 	.word	0x08003a3f
 8002710:	08003a3f 	.word	0x08003a3f
 8002714:	08003a3f 	.word	0x08003a3f
 8002718:	08003a3f 	.word	0x08003a3f
 800271c:	08002c75 	.word	0x08002c75
 8002720:	08002ca5 	.word	0x08002ca5
 8002724:	08003a3f 	.word	0x08003a3f
 8002728:	08003a3f 	.word	0x08003a3f
 800272c:	08002cef 	.word	0x08002cef
 8002730:	08003a3f 	.word	0x08003a3f
 8002734:	08003a3f 	.word	0x08003a3f
 8002738:	08003a3f 	.word	0x08003a3f
 800273c:	08003a3f 	.word	0x08003a3f
 8002740:	08003a3f 	.word	0x08003a3f
 8002744:	08002d39 	.word	0x08002d39
 8002748:	08003a3f 	.word	0x08003a3f
 800274c:	08003a3f 	.word	0x08003a3f
 8002750:	08003a3f 	.word	0x08003a3f
 8002754:	08003a3f 	.word	0x08003a3f
 8002758:	08003a3f 	.word	0x08003a3f
 800275c:	08003a3f 	.word	0x08003a3f
 8002760:	08003a3f 	.word	0x08003a3f
 8002764:	08003a3f 	.word	0x08003a3f
 8002768:	08003a3f 	.word	0x08003a3f
 800276c:	08003a3f 	.word	0x08003a3f
 8002770:	08003a3f 	.word	0x08003a3f
 8002774:	08003a3f 	.word	0x08003a3f
 8002778:	08003a3f 	.word	0x08003a3f
 800277c:	08003a3f 	.word	0x08003a3f
 8002780:	08003a3f 	.word	0x08003a3f
 8002784:	08003a3f 	.word	0x08003a3f
 8002788:	08003a3f 	.word	0x08003a3f
 800278c:	08003a3f 	.word	0x08003a3f
 8002790:	08003a3f 	.word	0x08003a3f
 8002794:	08003a3f 	.word	0x08003a3f
 8002798:	08003a3f 	.word	0x08003a3f
 800279c:	08003a3f 	.word	0x08003a3f
 80027a0:	08003a3f 	.word	0x08003a3f
 80027a4:	08003a3f 	.word	0x08003a3f
 80027a8:	08003a3f 	.word	0x08003a3f
 80027ac:	08003a3f 	.word	0x08003a3f
 80027b0:	08003a3f 	.word	0x08003a3f
 80027b4:	08003a3f 	.word	0x08003a3f
 80027b8:	08003a3f 	.word	0x08003a3f
 80027bc:	08003a3f 	.word	0x08003a3f
 80027c0:	08003a3f 	.word	0x08003a3f
 80027c4:	08003a3f 	.word	0x08003a3f
 80027c8:	08003a3f 	.word	0x08003a3f
 80027cc:	08003a3f 	.word	0x08003a3f
 80027d0:	08003a3f 	.word	0x08003a3f
 80027d4:	08003a3f 	.word	0x08003a3f
 80027d8:	08003a3f 	.word	0x08003a3f
 80027dc:	08003a3f 	.word	0x08003a3f
 80027e0:	08003a3f 	.word	0x08003a3f
 80027e4:	08003a3f 	.word	0x08003a3f
 80027e8:	08003a3f 	.word	0x08003a3f
 80027ec:	08003a3f 	.word	0x08003a3f
 80027f0:	08003a3f 	.word	0x08003a3f
 80027f4:	08003a3f 	.word	0x08003a3f
 80027f8:	08003a3f 	.word	0x08003a3f
 80027fc:	08003a3f 	.word	0x08003a3f
 8002800:	08003a3f 	.word	0x08003a3f
 8002804:	08003a3f 	.word	0x08003a3f
 8002808:	08003a3f 	.word	0x08003a3f
 800280c:	08003a3f 	.word	0x08003a3f
 8002810:	08003a3f 	.word	0x08003a3f
 8002814:	08003a3f 	.word	0x08003a3f
 8002818:	08003a3f 	.word	0x08003a3f
 800281c:	08003a3f 	.word	0x08003a3f
 8002820:	08003a3f 	.word	0x08003a3f
 8002824:	08003a3f 	.word	0x08003a3f
 8002828:	08003a3f 	.word	0x08003a3f
 800282c:	08003a3f 	.word	0x08003a3f
 8002830:	08003a3f 	.word	0x08003a3f
 8002834:	08003a3f 	.word	0x08003a3f
 8002838:	08003a3f 	.word	0x08003a3f
 800283c:	08003a3f 	.word	0x08003a3f
 8002840:	08003a3f 	.word	0x08003a3f
 8002844:	08003a3f 	.word	0x08003a3f
 8002848:	08003a3f 	.word	0x08003a3f
 800284c:	08003a3f 	.word	0x08003a3f
 8002850:	08003a3f 	.word	0x08003a3f
 8002854:	08003a3f 	.word	0x08003a3f
 8002858:	08003a3f 	.word	0x08003a3f
 800285c:	08003a3f 	.word	0x08003a3f
 8002860:	08003a3f 	.word	0x08003a3f
 8002864:	08003a3f 	.word	0x08003a3f
 8002868:	08003a3f 	.word	0x08003a3f
 800286c:	08003a3f 	.word	0x08003a3f
 8002870:	08003a3f 	.word	0x08003a3f
 8002874:	08003a3f 	.word	0x08003a3f
 8002878:	08003a3f 	.word	0x08003a3f
 800287c:	08003a3f 	.word	0x08003a3f
 8002880:	08003a3f 	.word	0x08003a3f
 8002884:	08003a3f 	.word	0x08003a3f
 8002888:	08003a3f 	.word	0x08003a3f
 800288c:	08003a3f 	.word	0x08003a3f
 8002890:	08003a3f 	.word	0x08003a3f
 8002894:	08003a3f 	.word	0x08003a3f
 8002898:	08003a3f 	.word	0x08003a3f
 800289c:	08003a3f 	.word	0x08003a3f
 80028a0:	08003a3f 	.word	0x08003a3f
 80028a4:	08003a3f 	.word	0x08003a3f
 80028a8:	08003a3f 	.word	0x08003a3f
 80028ac:	08003a3f 	.word	0x08003a3f
 80028b0:	08003a3f 	.word	0x08003a3f
 80028b4:	08003a3f 	.word	0x08003a3f
 80028b8:	08003a3f 	.word	0x08003a3f
 80028bc:	08003a3f 	.word	0x08003a3f
 80028c0:	08003a3f 	.word	0x08003a3f
 80028c4:	08003a3f 	.word	0x08003a3f
 80028c8:	08003a3f 	.word	0x08003a3f
 80028cc:	08003a3f 	.word	0x08003a3f
 80028d0:	08003a3f 	.word	0x08003a3f
 80028d4:	08003a3f 	.word	0x08003a3f
 80028d8:	08003a3f 	.word	0x08003a3f
 80028dc:	08003a3f 	.word	0x08003a3f
 80028e0:	08003a3f 	.word	0x08003a3f
 80028e4:	08003a3f 	.word	0x08003a3f
 80028e8:	08003a3f 	.word	0x08003a3f
 80028ec:	08003a3f 	.word	0x08003a3f
 80028f0:	08003a3f 	.word	0x08003a3f
 80028f4:	08003a3f 	.word	0x08003a3f
 80028f8:	08003a3f 	.word	0x08003a3f
 80028fc:	08003a3f 	.word	0x08003a3f
 8002900:	08003a3f 	.word	0x08003a3f
 8002904:	08003a3f 	.word	0x08003a3f
 8002908:	08003a3f 	.word	0x08003a3f
 800290c:	08003a3f 	.word	0x08003a3f
 8002910:	08003a3f 	.word	0x08003a3f
 8002914:	08003a3f 	.word	0x08003a3f
 8002918:	08003a3f 	.word	0x08003a3f
 800291c:	08002d69 	.word	0x08002d69
 8002920:	08002da7 	.word	0x08002da7
 8002924:	08003a3f 	.word	0x08003a3f
 8002928:	08003a3f 	.word	0x08003a3f
 800292c:	08003a3f 	.word	0x08003a3f
 8002930:	08003a3f 	.word	0x08003a3f
 8002934:	08003a3f 	.word	0x08003a3f
 8002938:	08003a3f 	.word	0x08003a3f
 800293c:	08002de1 	.word	0x08002de1
 8002940:	08002e5d 	.word	0x08002e5d
 8002944:	08002e1f 	.word	0x08002e1f
 8002948:	08003a3f 	.word	0x08003a3f
 800294c:	08003a3f 	.word	0x08003a3f
 8002950:	08002e83 	.word	0x08002e83
 8002954:	08002eff 	.word	0x08002eff
 8002958:	08002ec1 	.word	0x08002ec1
 800295c:	08003a3f 	.word	0x08003a3f
 8002960:	08003a3f 	.word	0x08003a3f
 8002964:	08002f29 	.word	0x08002f29
 8002968:	08002f67 	.word	0x08002f67
 800296c:	08003a3f 	.word	0x08003a3f
 8002970:	08003a3f 	.word	0x08003a3f
 8002974:	08003a3f 	.word	0x08003a3f
 8002978:	08002f8d 	.word	0x08002f8d
 800297c:	08002fcb 	.word	0x08002fcb
 8002980:	08003a3f 	.word	0x08003a3f
 8002984:	08003a3f 	.word	0x08003a3f
 8002988:	08003a3f 	.word	0x08003a3f
 800298c:	08003a3f 	.word	0x08003a3f
 8002990:	08003a3f 	.word	0x08003a3f
 8002994:	08003a3f 	.word	0x08003a3f
 8002998:	08003a3f 	.word	0x08003a3f
 800299c:	08003a3f 	.word	0x08003a3f
 80029a0:	08002fef 	.word	0x08002fef
 80029a4:	0800301d 	.word	0x0800301d
 80029a8:	0800304b 	.word	0x0800304b
 80029ac:	08003079 	.word	0x08003079
 80029b0:	080030a7 	.word	0x080030a7
 80029b4:	080030d5 	.word	0x080030d5
 80029b8:	08003103 	.word	0x08003103
 80029bc:	08003131 	.word	0x08003131
 80029c0:	0800315f 	.word	0x0800315f
 80029c4:	0800318d 	.word	0x0800318d
 80029c8:	080031bb 	.word	0x080031bb
 80029cc:	080031e9 	.word	0x080031e9
 80029d0:	08003217 	.word	0x08003217
 80029d4:	08003249 	.word	0x08003249
 80029d8:	08003273 	.word	0x08003273
 80029dc:	0800329d 	.word	0x0800329d
 80029e0:	080032c7 	.word	0x080032c7
 80029e4:	080032f1 	.word	0x080032f1
 80029e8:	0800331b 	.word	0x0800331b
 80029ec:	08003345 	.word	0x08003345
 80029f0:	0800336f 	.word	0x0800336f
 80029f4:	08003399 	.word	0x08003399
 80029f8:	08003a3f 	.word	0x08003a3f
 80029fc:	08003a3f 	.word	0x08003a3f
 8002a00:	08003a3f 	.word	0x08003a3f
 8002a04:	08003a3f 	.word	0x08003a3f
 8002a08:	08003a3f 	.word	0x08003a3f
 8002a0c:	08003a3f 	.word	0x08003a3f
 8002a10:	08003a3f 	.word	0x08003a3f
 8002a14:	08003a3f 	.word	0x08003a3f
 8002a18:	080033c3 	.word	0x080033c3
 8002a1c:	080033db 	.word	0x080033db
 8002a20:	08003a3f 	.word	0x08003a3f
 8002a24:	08003a3f 	.word	0x08003a3f
 8002a28:	08003a3f 	.word	0x08003a3f
 8002a2c:	08003a3f 	.word	0x08003a3f
 8002a30:	08003a3f 	.word	0x08003a3f
 8002a34:	08003a3f 	.word	0x08003a3f
 8002a38:	08003a3f 	.word	0x08003a3f
 8002a3c:	08003a3f 	.word	0x08003a3f
 8002a40:	08003a3f 	.word	0x08003a3f
 8002a44:	08003a3f 	.word	0x08003a3f
 8002a48:	08003a3f 	.word	0x08003a3f
 8002a4c:	08003a3f 	.word	0x08003a3f
 8002a50:	08003a3f 	.word	0x08003a3f
 8002a54:	08003a3f 	.word	0x08003a3f
 8002a58:	08003a3f 	.word	0x08003a3f
 8002a5c:	08003a3f 	.word	0x08003a3f
 8002a60:	08003a3f 	.word	0x08003a3f
 8002a64:	08003a3f 	.word	0x08003a3f
 8002a68:	08003403 	.word	0x08003403
 8002a6c:	0800342d 	.word	0x0800342d
 8002a70:	08003457 	.word	0x08003457
 8002a74:	08003481 	.word	0x08003481
 8002a78:	080034ab 	.word	0x080034ab
 8002a7c:	080034c3 	.word	0x080034c3
 8002a80:	08003525 	.word	0x08003525
 8002a84:	080034eb 	.word	0x080034eb
 8002a88:	08003a3f 	.word	0x08003a3f
 8002a8c:	08003a3f 	.word	0x08003a3f
 8002a90:	08003a3f 	.word	0x08003a3f
 8002a94:	08003a3f 	.word	0x08003a3f
 8002a98:	08003a3f 	.word	0x08003a3f
 8002a9c:	08003a3f 	.word	0x08003a3f
 8002aa0:	08003a3f 	.word	0x08003a3f
 8002aa4:	08003a3f 	.word	0x08003a3f
 8002aa8:	08003a3f 	.word	0x08003a3f
 8002aac:	08003a3f 	.word	0x08003a3f
 8002ab0:	08003a3f 	.word	0x08003a3f
 8002ab4:	08003a3f 	.word	0x08003a3f
 8002ab8:	0800355f 	.word	0x0800355f
 8002abc:	080035bd 	.word	0x080035bd
 8002ac0:	08003599 	.word	0x08003599
 8002ac4:	080035e1 	.word	0x080035e1
 8002ac8:	08003a3f 	.word	0x08003a3f
 8002acc:	08003a3f 	.word	0x08003a3f
 8002ad0:	08003a3f 	.word	0x08003a3f
 8002ad4:	08003a3f 	.word	0x08003a3f
 8002ad8:	08003a3f 	.word	0x08003a3f
 8002adc:	08003a3f 	.word	0x08003a3f
 8002ae0:	080035ff 	.word	0x080035ff
 8002ae4:	08003633 	.word	0x08003633
 8002ae8:	0800366f 	.word	0x0800366f
 8002aec:	080036a3 	.word	0x080036a3
 8002af0:	08003a3f 	.word	0x08003a3f
 8002af4:	08003a3f 	.word	0x08003a3f
 8002af8:	08003a3f 	.word	0x08003a3f
 8002afc:	08003a3f 	.word	0x08003a3f
 8002b00:	08003a3f 	.word	0x08003a3f
 8002b04:	08003a3f 	.word	0x08003a3f
 8002b08:	080036d7 	.word	0x080036d7
 8002b0c:	080036fb 	.word	0x080036fb
 8002b10:	08003a3f 	.word	0x08003a3f
 8002b14:	08003a3f 	.word	0x08003a3f
 8002b18:	08003a3f 	.word	0x08003a3f
 8002b1c:	0800372f 	.word	0x0800372f
 8002b20:	08003a3f 	.word	0x08003a3f
 8002b24:	08003a3f 	.word	0x08003a3f
 8002b28:	08003a3f 	.word	0x08003a3f
 8002b2c:	08003a3f 	.word	0x08003a3f
 8002b30:	08003a3f 	.word	0x08003a3f
 8002b34:	08003a3f 	.word	0x08003a3f
 8002b38:	08003a3f 	.word	0x08003a3f
 8002b3c:	08003a3f 	.word	0x08003a3f
 8002b40:	08003a3f 	.word	0x08003a3f
 8002b44:	08003a3f 	.word	0x08003a3f
 8002b48:	08003a3f 	.word	0x08003a3f
 8002b4c:	08003a3f 	.word	0x08003a3f
 8002b50:	08003a3f 	.word	0x08003a3f
 8002b54:	08003a3f 	.word	0x08003a3f
 8002b58:	08003783 	.word	0x08003783
 8002b5c:	08003a3f 	.word	0x08003a3f
 8002b60:	08003a3f 	.word	0x08003a3f
 8002b64:	08003a3f 	.word	0x08003a3f
 8002b68:	08003a3f 	.word	0x08003a3f
 8002b6c:	08003a3f 	.word	0x08003a3f
 8002b70:	08003a3f 	.word	0x08003a3f
 8002b74:	08003a3f 	.word	0x08003a3f
 8002b78:	08003a3f 	.word	0x08003a3f
 8002b7c:	08003a3f 	.word	0x08003a3f
 8002b80:	080037dd 	.word	0x080037dd
 8002b84:	08003821 	.word	0x08003821
 8002b88:	08003867 	.word	0x08003867
 8002b8c:	080038a3 	.word	0x080038a3
 8002b90:	08003a3f 	.word	0x08003a3f
 8002b94:	08003a3f 	.word	0x08003a3f
 8002b98:	08003a3f 	.word	0x08003a3f
 8002b9c:	08003a3f 	.word	0x08003a3f
 8002ba0:	08003a3f 	.word	0x08003a3f
 8002ba4:	08003a3f 	.word	0x08003a3f
 8002ba8:	080038df 	.word	0x080038df
 8002bac:	0800390d 	.word	0x0800390d
 8002bb0:	0800393b 	.word	0x0800393b
 8002bb4:	08003969 	.word	0x08003969
 8002bb8:	08003a3f 	.word	0x08003a3f
 8002bbc:	08003a3f 	.word	0x08003a3f
 8002bc0:	08003a3f 	.word	0x08003a3f
 8002bc4:	08003a3f 	.word	0x08003a3f
 8002bc8:	08003a3f 	.word	0x08003a3f
 8002bcc:	08003a3f 	.word	0x08003a3f
 8002bd0:	0800398f 	.word	0x0800398f
 8002bd4:	080039bd 	.word	0x080039bd
 8002bd8:	080039eb 	.word	0x080039eb
 8002bdc:	08003a19 	.word	0x08003a19


		/*Digital Inputs--------------*/
		//Digitla Input 1
		case MB_HRA_DI1_MODE:
			if(value == DI_MODE_NORMAL || value == DI_MODE_PULSE_CAPTURE){
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <CB_MB_writeHRCallback+0x530>
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d117      	bne.n	8002c20 <CB_MB_writeHRCallback+0x560>
				gVar.dio.di[DI_1].config.mode = value;
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b2d9      	uxtb	r1, r3
 8002bf6:	4acb      	ldr	r2, [pc, #812]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002bf8:	f242 2348 	movw	r3, #8776	; 0x2248
 8002bfc:	4413      	add	r3, r2
 8002bfe:	460a      	mov	r2, r1
 8002c00:	701a      	strb	r2, [r3, #0]
				gVar.dio.di[DI_1].isChanged = 1;
 8002c02:	4ac8      	ldr	r2, [pc, #800]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002c04:	f242 2345 	movw	r3, #8773	; 0x2245
 8002c08:	4413      	add	r3, r2
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_DI1_MODE, value);
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	2043      	movs	r0, #67	; 0x43
 8002c16:	f001 fedb 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == DI_MODE_NORMAL || value == DI_MODE_PULSE_CAPTURE){
 8002c1a:	bf00      	nop
//				DI_Config(&gVar.dio.di[DI_1]);
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002c1c:	f000 bf14 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002c26:	f000 bf0f 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
//		case MB_HRA_DI1_COUNTER_TYPE:
//			break;
//		case MB_HRA_DI1_COUNTER_MODE:
//			break;
		case MB_HRA_DI1_TRIGGER_MODE:
			if(value == DI_TRIG_MODE_RISING || value == DI_TRIG_MODE_FALLING){
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d003      	beq.n	8002c3a <CB_MB_writeHRCallback+0x57a>
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d117      	bne.n	8002c6a <CB_MB_writeHRCallback+0x5aa>
				gVar.dio.di[DI_1].config.trigMode = value;
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b2d9      	uxtb	r1, r3
 8002c40:	4ab8      	ldr	r2, [pc, #736]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002c42:	f242 234b 	movw	r3, #8779	; 0x224b
 8002c46:	4413      	add	r3, r2
 8002c48:	460a      	mov	r2, r1
 8002c4a:	701a      	strb	r2, [r3, #0]
				gVar.dio.di[DI_1].isChanged = 1;
 8002c4c:	4ab5      	ldr	r2, [pc, #724]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002c4e:	f242 2345 	movw	r3, #8773	; 0x2245
 8002c52:	4413      	add	r3, r2
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_DI1_TRIGGER_MODE, value);
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2046      	movs	r0, #70	; 0x46
 8002c60:	f001 feb6 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == DI_TRIG_MODE_RISING || value == DI_TRIG_MODE_FALLING){
 8002c64:	bf00      	nop
//				DI_Config(&gVar.dio.di[DI_1]);
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002c66:	f000 beef 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002c70:	f000 beea 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
//		case MB_HRA_DI1_DEBOUNCE_MAX:
//
//			break;
		case MB_HRA_DI1_SIGNAL_PERIOD_MIN:
			if(value >= 1 && value <= DEF_U16_MAX_VALUE){
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <CB_MB_writeHRCallback+0x5da>
				gVar.dio.di[DI_1].pulseInf.periodMin = value;
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	881a      	ldrh	r2, [r3, #0]
 8002c80:	49a8      	ldr	r1, [pc, #672]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002c82:	f242 237c 	movw	r3, #8828	; 0x227c
 8002c86:	440b      	add	r3, r1
 8002c88:	601a      	str	r2, [r3, #0]
				FSExt_WriteIntNum(SA_DI1_SIGNAL_PERIOD_MIN, value);
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	2048      	movs	r0, #72	; 0x48
 8002c92:	f001 fe9d 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002c96:	f000 bed7 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002ca0:	f000 bed2 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>

		//Digitla Input 2
		case MB_HRA_DI2_MODE:
			if(value == DI_MODE_NORMAL || value == DI_MODE_PULSE_CAPTURE){
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <CB_MB_writeHRCallback+0x5f4>
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d117      	bne.n	8002ce4 <CB_MB_writeHRCallback+0x624>
				gVar.dio.di[DI_2].config.mode = value;
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b2d9      	uxtb	r1, r3
 8002cba:	4a9a      	ldr	r2, [pc, #616]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002cbc:	f242 2388 	movw	r3, #8840	; 0x2288
 8002cc0:	4413      	add	r3, r2
 8002cc2:	460a      	mov	r2, r1
 8002cc4:	701a      	strb	r2, [r3, #0]
				gVar.dio.di[DI_2].isChanged = 1;
 8002cc6:	4a97      	ldr	r2, [pc, #604]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002cc8:	f242 2385 	movw	r3, #8837	; 0x2285
 8002ccc:	4413      	add	r3, r2
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_DI2_MODE, value);
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	2049      	movs	r0, #73	; 0x49
 8002cda:	f001 fe79 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == DI_MODE_NORMAL || value == DI_MODE_PULSE_CAPTURE){
 8002cde:	bf00      	nop
//				DI_Config(&gVar.dio.di[DI_2]);
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002ce0:	f000 beb2 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002cea:	f000 bead 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
//		case MB_HRA_DI2_COUNTER_TYPE:
//			break;
//		case MB_HRA_DI2_COUNTER_MODE:
//			break;
		case MB_HRA_DI2_TRIGGER_MODE:
			if(value == DI_TRIG_MODE_RISING || value == DI_TRIG_MODE_FALLING){
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d003      	beq.n	8002cfe <CB_MB_writeHRCallback+0x63e>
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d117      	bne.n	8002d2e <CB_MB_writeHRCallback+0x66e>
				gVar.dio.di[DI_2].config.trigMode = value;
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b2d9      	uxtb	r1, r3
 8002d04:	4a87      	ldr	r2, [pc, #540]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002d06:	f242 238b 	movw	r3, #8843	; 0x228b
 8002d0a:	4413      	add	r3, r2
 8002d0c:	460a      	mov	r2, r1
 8002d0e:	701a      	strb	r2, [r3, #0]
				gVar.dio.di[DI_2].isChanged = 1;
 8002d10:	4a84      	ldr	r2, [pc, #528]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002d12:	f242 2385 	movw	r3, #8837	; 0x2285
 8002d16:	4413      	add	r3, r2
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_DI2_TRIGGER_MODE, value);
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	204c      	movs	r0, #76	; 0x4c
 8002d24:	f001 fe54 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == DI_TRIG_MODE_RISING || value == DI_TRIG_MODE_FALLING){
 8002d28:	bf00      	nop
//				DI_Config(&gVar.dio.di[DI_2]);
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002d2a:	f000 be8d 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002d34:	f000 be88 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
//		case MB_HRA_DI2_DEBOUNCE_MAX:
//
//			break;
		case MB_HRA_DI2_SIGNAL_PERIOD_MIN:
			if(value >= 1 && value <= DEF_U16_MAX_VALUE){
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <CB_MB_writeHRCallback+0x69e>
				gVar.dio.di[DI_2].pulseInf.periodMin = value;
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	4977      	ldr	r1, [pc, #476]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002d46:	f242 23bc 	movw	r3, #8892	; 0x22bc
 8002d4a:	440b      	add	r3, r1
 8002d4c:	601a      	str	r2, [r3, #0]
				FSExt_WriteIntNum(SA_DI2_SIGNAL_PERIOD_MIN, value);
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	204e      	movs	r0, #78	; 0x4e
 8002d56:	f001 fe3b 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002d5a:	f000 be75 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002d64:	f000 be70 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
//			}
//			break;

		/*Analog Inputs-----------*/
		case MB_HRA_AI1_MODE:
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <CB_MB_writeHRCallback+0x6b8>
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d111      	bne.n	8002d9c <CB_MB_writeHRCallback+0x6dc>
				gVar.ai[AI_1].mode = value;
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b2d9      	uxtb	r1, r3
 8002d7e:	4a69      	ldr	r2, [pc, #420]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002d80:	f641 7310 	movw	r3, #7952	; 0x1f10
 8002d84:	4413      	add	r3, r2
 8002d86:	460a      	mov	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_AI1_MODE, value);
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	2001      	movs	r0, #1
 8002d92:	f001 fe1d 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002d96:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002d98:	f000 be56 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002da2:	f000 be51 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_AI2_MODE:
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <CB_MB_writeHRCallback+0x6f6>
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10f      	bne.n	8002dd6 <CB_MB_writeHRCallback+0x716>
				gVar.ai[AI_2].mode = value;
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002dbe:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8002dc2:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_AI2_MODE, value);
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	2002      	movs	r0, #2
 8002dcc:	f001 fe00 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002dd0:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002dd2:	f000 be39 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002ddc:	f000 be34 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
//			break;

		/*Analog Outputs 1 to 4-------------*/
		//Analog Output 1
		case MB_HRA_AO1_MODE:
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <CB_MB_writeHRCallback+0x730>
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d111      	bne.n	8002e14 <CB_MB_writeHRCallback+0x754>
				gVar.ao[AO_1].mode = value;
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b2d9      	uxtb	r1, r3
 8002df6:	4a4b      	ldr	r2, [pc, #300]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002df8:	f641 6357 	movw	r3, #7767	; 0x1e57
 8002dfc:	4413      	add	r3, r2
 8002dfe:	460a      	mov	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_AO1_MODE, value);
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	2005      	movs	r0, #5
 8002e0a:	f001 fde1 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002e0e:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002e10:	f000 be1a 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002e1a:	f000 be15 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_AO1_SRC:
			if(value == AO_PWM_SRC_MODBUS || value == AO_PWM_SRC_PID){
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d003      	beq.n	8002e2e <CB_MB_writeHRCallback+0x76e>
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d111      	bne.n	8002e52 <CB_MB_writeHRCallback+0x792>
				gVar.ao[AO_1].source = value;
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b2d9      	uxtb	r1, r3
 8002e34:	4a3b      	ldr	r2, [pc, #236]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002e36:	f641 6356 	movw	r3, #7766	; 0x1e56
 8002e3a:	4413      	add	r3, r2
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_AO1_SRC, value);
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	203f      	movs	r0, #63	; 0x3f
 8002e48:	f001 fdc2 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == AO_PWM_SRC_MODBUS || value == AO_PWM_SRC_PID){
 8002e4c:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002e4e:	f000 bdfb 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002e58:	f000 bdf6 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_AO1_DUTY:
			if(value >= 0 && value <= AO_PWM_RESOLUTION){
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e64:	d208      	bcs.n	8002e78 <CB_MB_writeHRCallback+0x7b8>
				gVar.ao[AO_1].mbValue = value;
 8002e66:	4a2f      	ldr	r2, [pc, #188]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002e68:	f641 635a 	movw	r3, #7770	; 0x1e5a
 8002e6c:	4413      	add	r3, r2
 8002e6e:	1d3a      	adds	r2, r7, #4
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	801a      	strh	r2, [r3, #0]
//				FSExt_WriteIntNum(SA_AO1_DUTY, value);
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002e74:	f000 bde8 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002e7e:	f000 bde3 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>

			//Analog Output 2
		case MB_HRA_AO2_MODE:
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <CB_MB_writeHRCallback+0x7d2>
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d111      	bne.n	8002eb6 <CB_MB_writeHRCallback+0x7f6>
				gVar.ao[AO_2].mode = value;
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b2d9      	uxtb	r1, r3
 8002e98:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002e9a:	f641 6383 	movw	r3, #7811	; 0x1e83
 8002e9e:	4413      	add	r3, r2
 8002ea0:	460a      	mov	r2, r1
 8002ea2:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_AO2_MODE, value);
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	2007      	movs	r0, #7
 8002eac:	f001 fd90 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002eb0:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002eb2:	f000 bdc9 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002ebc:	f000 bdc4 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_AO2_SRC:
			if(value == AO_PWM_SRC_MODBUS || value == AO_PWM_SRC_PID){
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d003      	beq.n	8002ed0 <CB_MB_writeHRCallback+0x810>
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d111      	bne.n	8002ef4 <CB_MB_writeHRCallback+0x834>
				gVar.ao[AO_2].source = value;
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b2d9      	uxtb	r1, r3
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002ed8:	f641 6382 	movw	r3, #7810	; 0x1e82
 8002edc:	4413      	add	r3, r2
 8002ede:	460a      	mov	r2, r1
 8002ee0:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_AO2_SRC, value);
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	2040      	movs	r0, #64	; 0x40
 8002eea:	f001 fd71 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == AO_PWM_SRC_MODBUS || value == AO_PWM_SRC_PID){
 8002eee:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002ef0:	f000 bdaa 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002efa:	f000 bda5 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_AO2_DUTY:
			if(value >= 0 && value <= AO_PWM_RESOLUTION){
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f06:	d208      	bcs.n	8002f1a <CB_MB_writeHRCallback+0x85a>
				gVar.ao[AO_2].mbValue = value;
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <CB_MB_writeHRCallback+0x864>)
 8002f0a:	f641 6386 	movw	r3, #7814	; 0x1e86
 8002f0e:	4413      	add	r3, r2
 8002f10:	1d3a      	adds	r2, r7, #4
 8002f12:	8812      	ldrh	r2, [r2, #0]
 8002f14:	801a      	strh	r2, [r3, #0]
//				FSExt_WriteIntNum(SA_AO2_DUTY, value);
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002f16:	f000 bd97 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002f20:	f000 bd92 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
 8002f24:	24002050 	.word	0x24002050

			//Analog Output 3
		case MB_HRA_AO3_MODE:
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <CB_MB_writeHRCallback+0x878>
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d111      	bne.n	8002f5c <CB_MB_writeHRCallback+0x89c>
				gVar.ao[AO_3].mode = value;
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b2d9      	uxtb	r1, r3
 8002f3e:	4ac1      	ldr	r2, [pc, #772]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8002f40:	f641 63af 	movw	r3, #7855	; 0x1eaf
 8002f44:	4413      	add	r3, r2
 8002f46:	460a      	mov	r2, r1
 8002f48:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_AO3_MODE, value);
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	2009      	movs	r0, #9
 8002f52:	f001 fd3d 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002f56:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002f58:	f000 bd76 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002f62:	f000 bd71 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
//			}else{
//				errStatus = MB_ERROR;
//			}
//			break;
		case MB_HRA_AO3_DUTY:
			if(value >= 0 && value <= AO_PWM_RESOLUTION){
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6e:	d208      	bcs.n	8002f82 <CB_MB_writeHRCallback+0x8c2>
				gVar.ao[AO_3].value = value;
 8002f70:	4ab4      	ldr	r2, [pc, #720]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8002f72:	f641 63b4 	movw	r3, #7860	; 0x1eb4
 8002f76:	4413      	add	r3, r2
 8002f78:	1d3a      	adds	r2, r7, #4
 8002f7a:	8812      	ldrh	r2, [r2, #0]
 8002f7c:	801a      	strh	r2, [r3, #0]
//				FSExt_WriteIntNum(SA_AO3_DUTY, value);
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002f7e:	f000 bd63 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002f88:	f000 bd5e 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>

			//Analog Output 4
		case MB_HRA_AO4_MODE:
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <CB_MB_writeHRCallback+0x8dc>
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d111      	bne.n	8002fc0 <CB_MB_writeHRCallback+0x900>
				gVar.ao[AO_4].mode = value;
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b2d9      	uxtb	r1, r3
 8002fa2:	4aa8      	ldr	r2, [pc, #672]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8002fa4:	f641 63db 	movw	r3, #7899	; 0x1edb
 8002fa8:	4413      	add	r3, r2
 8002faa:	460a      	mov	r2, r1
 8002fac:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_AO4_MODE, value);
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	200b      	movs	r0, #11
 8002fb6:	f001 fd0b 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == AIO_MODE_CURRENT || value == AIO_MODE_VOLT){
 8002fba:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002fbc:	f000 bd44 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002fc6:	f000 bd3f 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
//			}else{
//				errStatus = MB_ERROR;
//			}
//			break;
		case MB_HRA_AO4_DUTY:
			if(value >= 0 && value <= AO_PWM_RESOLUTION){
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd2:	d207      	bcs.n	8002fe4 <CB_MB_writeHRCallback+0x924>
				gVar.ao[AO_4].value = value;
 8002fd4:	4b9b      	ldr	r3, [pc, #620]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8002fd6:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8002fda:	1d3a      	adds	r2, r7, #4
 8002fdc:	8812      	ldrh	r2, [r2, #0]
 8002fde:	801a      	strh	r2, [r3, #0]
//				FSExt_WriteIntNum(SA_AO4_DUTY, value);
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8002fe0:	f000 bd32 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8002fea:	f000 bd2d 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>

			/*Net Information------------*/
			//Device IP MAC
		case MB_HRA_DEV_MAC_1:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	2bff      	cmp	r3, #255	; 0xff
 8002ff4:	d80d      	bhi.n	8003012 <CB_MB_writeHRCallback+0x952>
				gVar.w5500Chip.netInfo.mac[0] = value;
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b91      	ldr	r3, [pc, #580]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8002ffe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				FSExt_WriteIntNum(SA_DEV_MAC_1, value);
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	200d      	movs	r0, #13
 800300a:	f001 fce1 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800300e:	f000 bd1b 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003018:	f000 bd16 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_MAC_2:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	2bff      	cmp	r3, #255	; 0xff
 8003022:	d80d      	bhi.n	8003040 <CB_MB_writeHRCallback+0x980>
				gVar.w5500Chip.netInfo.mac[1] = value;
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b86      	ldr	r3, [pc, #536]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 800302c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
				FSExt_WriteIntNum(SA_DEV_MAC_2, value);
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	4619      	mov	r1, r3
 8003036:	200e      	movs	r0, #14
 8003038:	f001 fcca 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800303c:	f000 bd04 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003046:	f000 bcff 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_MAC_3:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	2bff      	cmp	r3, #255	; 0xff
 8003050:	d80d      	bhi.n	800306e <CB_MB_writeHRCallback+0x9ae>
				gVar.w5500Chip.netInfo.mac[2] = value;
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b7a      	ldr	r3, [pc, #488]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 800305a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				FSExt_WriteIntNum(SA_DEV_MAC_3, value);
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	4619      	mov	r1, r3
 8003064:	200f      	movs	r0, #15
 8003066:	f001 fcb3 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800306a:	f000 bced 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003074:	f000 bce8 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_MAC_4:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	2bff      	cmp	r3, #255	; 0xff
 800307e:	d80d      	bhi.n	800309c <CB_MB_writeHRCallback+0x9dc>
				gVar.w5500Chip.netInfo.mac[3] = value;
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8003088:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				FSExt_WriteIntNum(SA_DEV_MAC_4, value);
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	4619      	mov	r1, r3
 8003092:	2010      	movs	r0, #16
 8003094:	f001 fc9c 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003098:	f000 bcd6 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800309c:	2300      	movs	r3, #0
 800309e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80030a2:	f000 bcd1 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_MAC_5:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d80d      	bhi.n	80030ca <CB_MB_writeHRCallback+0xa0a>
				gVar.w5500Chip.netInfo.mac[4] = value;
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b63      	ldr	r3, [pc, #396]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 80030b6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
				FSExt_WriteIntNum(SA_DEV_MAC_5, value);
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	4619      	mov	r1, r3
 80030c0:	2011      	movs	r0, #17
 80030c2:	f001 fc85 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80030c6:	f000 bcbf 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80030d0:	f000 bcba 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_MAC_6:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 80030d4:	1d3b      	adds	r3, r7, #4
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	2bff      	cmp	r3, #255	; 0xff
 80030da:	d80d      	bhi.n	80030f8 <CB_MB_writeHRCallback+0xa38>
				gVar.w5500Chip.netInfo.mac[5] = value;
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b58      	ldr	r3, [pc, #352]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 80030e4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
				FSExt_WriteIntNum(SA_DEV_MAC_6, value);
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	2012      	movs	r0, #18
 80030f0:	f001 fc6e 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80030f4:	f000 bca8 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80030fe:	f000 bca3 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
			//Device IP Address
		case MB_HRA_DEV_IP_1:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){		// first byte of the ip address cannot be zero
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	2bff      	cmp	r3, #255	; 0xff
 8003108:	d80d      	bhi.n	8003126 <CB_MB_writeHRCallback+0xa66>
				gVar.w5500Chip.netInfo.ip[0] = value;
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8003112:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				FSExt_WriteIntNum(SA_DEV_IP_1, value);
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	4619      	mov	r1, r3
 800311c:	2013      	movs	r0, #19
 800311e:	f001 fc57 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003122:	f000 bc91 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800312c:	f000 bc8c 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_IP_2:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	2bff      	cmp	r3, #255	; 0xff
 8003136:	d80d      	bhi.n	8003154 <CB_MB_writeHRCallback+0xa94>
				gVar.w5500Chip.netInfo.ip[1] = value;
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b41      	ldr	r3, [pc, #260]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8003140:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
				FSExt_WriteIntNum(SA_DEV_IP_2, value);
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	2014      	movs	r0, #20
 800314c:	f001 fc40 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003150:	f000 bc7a 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003154:	2300      	movs	r3, #0
 8003156:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800315a:	f000 bc75 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_IP_3:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d80d      	bhi.n	8003182 <CB_MB_writeHRCallback+0xac2>
				gVar.w5500Chip.netInfo.ip[2] = value;
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b35      	ldr	r3, [pc, #212]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 800316e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				FSExt_WriteIntNum(SA_DEV_IP_3, value);
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	4619      	mov	r1, r3
 8003178:	2015      	movs	r0, #21
 800317a:	f001 fc29 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800317e:	f000 bc63 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003188:	f000 bc5e 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_IP_4:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d80d      	bhi.n	80031b0 <CB_MB_writeHRCallback+0xaf0>
				gVar.w5500Chip.netInfo.ip[3] = value;
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 800319c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
				FSExt_WriteIntNum(SA_DEV_IP_4, value);
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	4619      	mov	r1, r3
 80031a6:	2016      	movs	r0, #22
 80031a8:	f001 fc12 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80031ac:	f000 bc4c 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80031b6:	f000 bc47 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>

			//Device Subnet mask
		case MB_HRA_DEV_SN_1:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	2bff      	cmp	r3, #255	; 0xff
 80031c0:	d80d      	bhi.n	80031de <CB_MB_writeHRCallback+0xb1e>
				gVar.w5500Chip.netInfo.sn[0] = value;
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 80031ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				FSExt_WriteIntNum(SA_DEV_SN_1, value);
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	2017      	movs	r0, #23
 80031d6:	f001 fbfb 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}

			break;
 80031da:	f000 bc35 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80031e4:	f000 bc30 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_SN_2:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	2bff      	cmp	r3, #255	; 0xff
 80031ee:	d80d      	bhi.n	800320c <CB_MB_writeHRCallback+0xb4c>
				gVar.w5500Chip.netInfo.sn[1] = value;
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 80031f8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
				FSExt_WriteIntNum(SA_DEV_SN_2, value);
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	4619      	mov	r1, r3
 8003202:	2018      	movs	r0, #24
 8003204:	f001 fbe4 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003208:	f000 bc1e 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003212:	f000 bc19 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_SN_3:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	2bff      	cmp	r3, #255	; 0xff
 800321c:	d80d      	bhi.n	800323a <CB_MB_writeHRCallback+0xb7a>
				gVar.w5500Chip.netInfo.sn[2] = value;
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <CB_MB_writeHRCallback+0xb84>)
 8003226:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				FSExt_WriteIntNum(SA_DEV_SN_3, value);
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	2019      	movs	r0, #25
 8003232:	f001 fbcd 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003236:	f000 bc07 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800323a:	2300      	movs	r3, #0
 800323c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003240:	f000 bc02 	b.w	8003a48 <CB_MB_writeHRCallback+0x1388>
 8003244:	24002050 	.word	0x24002050
		case MB_HRA_DEV_SN_4:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	2bff      	cmp	r3, #255	; 0xff
 800324e:	d80c      	bhi.n	800326a <CB_MB_writeHRCallback+0xbaa>
				gVar.w5500Chip.netInfo.sn[3] = value;
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4bb2      	ldr	r3, [pc, #712]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 8003258:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				FSExt_WriteIntNum(SA_DEV_SN_4, value);
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	201a      	movs	r0, #26
 8003264:	f001 fbb4 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003268:	e3ee      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003270:	e3ea      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
			//Device Gateway
		case MB_HRA_DEV_GW_1:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	2bff      	cmp	r3, #255	; 0xff
 8003278:	d80c      	bhi.n	8003294 <CB_MB_writeHRCallback+0xbd4>
				gVar.w5500Chip.netInfo.gw[0] = value;
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4ba7      	ldr	r3, [pc, #668]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 8003282:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
				FSExt_WriteIntNum(SA_DEV_GW_1, value);
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	201b      	movs	r0, #27
 800328e:	f001 fb9f 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003292:	e3d9      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800329a:	e3d5      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_GW_2:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	2bff      	cmp	r3, #255	; 0xff
 80032a2:	d80c      	bhi.n	80032be <CB_MB_writeHRCallback+0xbfe>
				gVar.w5500Chip.netInfo.gw[1] = value;
 80032a4:	1d3b      	adds	r3, r7, #4
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b9d      	ldr	r3, [pc, #628]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 80032ac:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				FSExt_WriteIntNum(SA_DEV_GW_2, value);
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	201c      	movs	r0, #28
 80032b8:	f001 fb8a 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80032bc:	e3c4      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80032c4:	e3c0      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_GW_3:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	2bff      	cmp	r3, #255	; 0xff
 80032cc:	d80c      	bhi.n	80032e8 <CB_MB_writeHRCallback+0xc28>
				gVar.w5500Chip.netInfo.gw[2] = value;
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b92      	ldr	r3, [pc, #584]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 80032d6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
				FSExt_WriteIntNum(SA_DEV_GW_3, value);
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	4619      	mov	r1, r3
 80032e0:	201d      	movs	r0, #29
 80032e2:	f001 fb75 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80032e6:	e3af      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80032ee:	e3ab      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_GW_4:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2bff      	cmp	r3, #255	; 0xff
 80032f6:	d80c      	bhi.n	8003312 <CB_MB_writeHRCallback+0xc52>
				gVar.w5500Chip.netInfo.gw[3] = value;
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4b88      	ldr	r3, [pc, #544]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 8003300:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
				FSExt_WriteIntNum(SA_DEV_GW_4, value);
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	201e      	movs	r0, #30
 800330c:	f001 fb60 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003310:	e39a      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003312:	2300      	movs	r3, #0
 8003314:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003318:	e396      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>

			//Device DNS
		case MB_HRA_DEV_DNS_1:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	2bff      	cmp	r3, #255	; 0xff
 8003320:	d80c      	bhi.n	800333c <CB_MB_writeHRCallback+0xc7c>
				gVar.w5500Chip.netInfo.dns[0] = value;
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 800332a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				FSExt_WriteIntNum(SA_DEV_DNS_1, value);
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	201f      	movs	r0, #31
 8003336:	f001 fb4b 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800333a:	e385      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003342:	e381      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_DNS_2:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	2bff      	cmp	r3, #255	; 0xff
 800334a:	d80c      	bhi.n	8003366 <CB_MB_writeHRCallback+0xca6>
				gVar.w5500Chip.netInfo.dns[1] = value;
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b73      	ldr	r3, [pc, #460]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 8003354:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				FSExt_WriteIntNum(SA_DEV_DNS_2, value);
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	4619      	mov	r1, r3
 800335e:	2020      	movs	r0, #32
 8003360:	f001 fb36 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003364:	e370      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003366:	2300      	movs	r3, #0
 8003368:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800336c:	e36c      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_DNS_3:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2bff      	cmp	r3, #255	; 0xff
 8003374:	d80c      	bhi.n	8003390 <CB_MB_writeHRCallback+0xcd0>
				gVar.w5500Chip.netInfo.dns[2] = value;
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b68      	ldr	r3, [pc, #416]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 800337e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				FSExt_WriteIntNum(SA_DEV_DNS_3, value);
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	4619      	mov	r1, r3
 8003388:	2021      	movs	r0, #33	; 0x21
 800338a:	f001 fb21 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800338e:	e35b      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003390:	2300      	movs	r3, #0
 8003392:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003396:	e357      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_DEV_DNS_4:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	2bff      	cmp	r3, #255	; 0xff
 800339e:	d80c      	bhi.n	80033ba <CB_MB_writeHRCallback+0xcfa>
				gVar.w5500Chip.netInfo.dns[3] = value;
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4b5e      	ldr	r3, [pc, #376]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 80033a8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				FSExt_WriteIntNum(SA_DEV_DNS_4, value);
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	2022      	movs	r0, #34	; 0x22
 80033b4:	f001 fb0c 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80033b8:	e346      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80033c0:	e342      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>

			/*NModbus TCP Server------------*/
			//socket - 0 & 1
		case MB_HRA_MB_TCPS_SOCK0_SRC_PORT:
			if(value >= 0 && value <= DEF_U16_MAX_VALUE){
				gVar.server.sock[0].srcPort = value;
 80033c2:	4a57      	ldr	r2, [pc, #348]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f8a2 336e 	strh.w	r3, [r2, #878]	; 0x36e
				FSExt_WriteIntNum(SA_MB_TCPS_SOCK0_SRC_PORT, value);
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	2023      	movs	r0, #35	; 0x23
 80033d4:	f001 fafc 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80033d8:	e336      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_TCPS_SOCK0_KPALV_TIM:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	2bff      	cmp	r3, #255	; 0xff
 80033e0:	d80b      	bhi.n	80033fa <CB_MB_writeHRCallback+0xd3a>
				gVar.server.sock[0].kpAlvTime = value;
 80033e2:	4a4f      	ldr	r2, [pc, #316]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	f8a2 336c 	strh.w	r3, [r2, #876]	; 0x36c
				FSExt_WriteIntNum(SA_MB_TCPS_SOCK0_KPALV_TIM, value);
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	2024      	movs	r0, #36	; 0x24
 80033f4:	f001 faec 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80033f8:	e326      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003400:	e322      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
////				errStatus = MB_ERROR;
////			}
//			break;
			/*NModbus TCP Client------------*/
		case MB_HRA_MB_TCPC_DEST_IP_1:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	2bff      	cmp	r3, #255	; 0xff
 8003408:	d80c      	bhi.n	8003424 <CB_MB_writeHRCallback+0xd64>
				gVar.client.sock[0].destIP[0] = value;
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b43      	ldr	r3, [pc, #268]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 8003412:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
				FSExt_WriteIntNum(SA_MB_TCPC_DEST_IP_1, value);
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	2027      	movs	r0, #39	; 0x27
 800341e:	f001 fad7 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003422:	e311      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800342a:	e30d      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_TCPC_DEST_IP_2:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	2bff      	cmp	r3, #255	; 0xff
 8003432:	d80c      	bhi.n	800344e <CB_MB_writeHRCallback+0xd8e>
				gVar.client.sock[0].destIP[1] = value;
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4b39      	ldr	r3, [pc, #228]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 800343c:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
				FSExt_WriteIntNum(SA_MB_TCPC_DEST_IP_2, value);
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	2028      	movs	r0, #40	; 0x28
 8003448:	f001 fac2 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800344c:	e2fc      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800344e:	2300      	movs	r3, #0
 8003450:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003454:	e2f8      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_TCPC_DEST_IP_3:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	2bff      	cmp	r3, #255	; 0xff
 800345c:	d80c      	bhi.n	8003478 <CB_MB_writeHRCallback+0xdb8>
				gVar.client.sock[0].destIP[2] = value;
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 8003466:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
				FSExt_WriteIntNum(SA_MB_TCPC_DEST_IP_3, value);
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	4619      	mov	r1, r3
 8003470:	2029      	movs	r0, #41	; 0x29
 8003472:	f001 faad 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003476:	e2e7      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800347e:	e2e3      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_TCPC_DEST_IP_4:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	2bff      	cmp	r3, #255	; 0xff
 8003486:	d80c      	bhi.n	80034a2 <CB_MB_writeHRCallback+0xde2>
				gVar.client.sock[0].destIP[3] = value;
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 8003490:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
				FSExt_WriteIntNum(SA_MB_TCPC_DEST_IP_4, value);
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	202a      	movs	r0, #42	; 0x2a
 800349c:	f001 fa98 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80034a0:	e2d2      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80034a8:	e2ce      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_TCPC_DEST_PORT:
			if(value >= 0 && value <= DEF_U16_MAX_VALUE){
				gVar.client.sock[0].destPort = value;
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	f8a2 3670 	strh.w	r3, [r2, #1648]	; 0x670
				FSExt_WriteIntNum(SA_MB_TCPC_DEST_PORT, value);
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	202b      	movs	r0, #43	; 0x2b
 80034bc:	f001 fa88 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80034c0:	e2c2      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_TCPC_SOCK_KPALV_TIM:
			if(value >= 0 && value <= DEF_U8_MAX_VALUE){
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d80b      	bhi.n	80034e2 <CB_MB_writeHRCallback+0xe22>
				gVar.client.sock[0].kpAlvTime = value;
 80034ca:	4a15      	ldr	r2, [pc, #84]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	f8a2 366c 	strh.w	r3, [r2, #1644]	; 0x66c
				FSExt_WriteIntNum(SA_MB_TCPC_SOCK_KPALV_TIM, value);
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	4619      	mov	r1, r3
 80034da:	202c      	movs	r0, #44	; 0x2c
 80034dc:	f001 fa78 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80034e0:	e2b2      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80034e8:	e2ae      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>

		case MB_HRA_MB_TCPC_SOCK_CONN_MODE:
			if(value == SOCK_CONN_MODE_AUTO || value == SOCK_CONN_MODE_MANUAL){
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <CB_MB_writeHRCallback+0xe3a>
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10d      	bne.n	8003516 <CB_MB_writeHRCallback+0xe56>
				gVar.client.sock[0].connectMode = value;
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <CB_MB_writeHRCallback+0xe60>)
 8003502:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
				FSExt_WriteIntNum(SA_MB_TCPC_SOCK_CONN_MODE, value);
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	4619      	mov	r1, r3
 800350c:	202d      	movs	r0, #45	; 0x2d
 800350e:	f001 fa5f 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == SOCK_CONN_MODE_AUTO || value == SOCK_CONN_MODE_MANUAL){
 8003512:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003514:	e298      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800351c:	e294      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
 800351e:	bf00      	nop
 8003520:	24002050 	.word	0x24002050

		case MB_HRA_MB_TCPC_TX_TIM_INTRVAL:
			if(value > 0 && value <= CONF_DEF_MB_TCPC_TX_TIM_INTERVAL_MAX){
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d014      	beq.n	8003556 <CB_MB_writeHRCallback+0xe96>
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003534:	4293      	cmp	r3, r2
 8003536:	d80e      	bhi.n	8003556 <CB_MB_writeHRCallback+0xe96>
				gVar.mbTCPClient.txTimIntrvl = value;
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	881a      	ldrh	r2, [r3, #0]
 800353c:	49b6      	ldr	r1, [pc, #728]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 800353e:	f641 1338 	movw	r3, #6456	; 0x1938
 8003542:	440b      	add	r3, r1
 8003544:	601a      	str	r2, [r3, #0]
				FSExt_WriteIntNum(SA_MB_TCPC_TX_TIM_INTRVAL, value);
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	202e      	movs	r0, #46	; 0x2e
 800354e:	f001 fa3f 	bl	80049d0 <FSExt_WriteIntNum>
			if(value > 0 && value <= CONF_DEF_MB_TCPC_TX_TIM_INTERVAL_MAX){
 8003552:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003554:	e278      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800355c:	e274      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>

			/*NModbus RTU Serial------------*/
		case MB_HRA_MB_SERIAL_CONFIG:
			if(MB_GetListenOnlyMode() == 0U){
 800355e:	f00e f961 	bl	8011824 <MB_GetListenOnlyMode>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	f040 826e 	bne.w	8003a46 <CB_MB_writeHRCallback+0x1386>

				MBS_Serial serial;
				serial.serialConfigValue = value;
 800356a:	f107 0308 	add.w	r3, r7, #8
 800356e:	1d3a      	adds	r2, r7, #4
 8003570:	8812      	ldrh	r2, [r2, #0]
 8003572:	80da      	strh	r2, [r3, #6]
				if(MBS_CheckSerialConfigValidity(&serial) == MB_OK){
 8003574:	f107 0308 	add.w	r3, r7, #8
 8003578:	4618      	mov	r0, r3
 800357a:	f00f f81f 	bl	80125bc <MBS_CheckSerialConfigValidity>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <CB_MB_writeHRCallback+0xed0>
					gVar.mbSerial.serialConfigValue = value;
 8003584:	4aa4      	ldr	r2, [pc, #656]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f8a2 368e 	strh.w	r3, [r2, #1678]	; 0x68e
				}else{
					errStatus = MB_ERROR;
				}
			}
			break;
 800358e:	e25a      	b.n	8003a46 <CB_MB_writeHRCallback+0x1386>
					errStatus = MB_ERROR;
 8003590:	2300      	movs	r3, #0
 8003592:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003596:	e256      	b.n	8003a46 <CB_MB_writeHRCallback+0x1386>

		case MB_HRA_MB_SERIAL_BAUD_RATE_MS16B:
			if(value >= 0 && value <= DEF_U16_MAX_VALUE){
				uint32_t br = MBS_GetBaudRateUserDef();
 8003598:	f00f f84e 	bl	8012638 <MBS_GetBaudRateUserDef>
 800359c:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				br =  ((br&0x0000FFFF) | ((uint32_t)value<<16));
 80035a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
				MBS_SetBaudRateUserDef(br);
 80035b2:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80035b6:	f00f f82f 	bl	8012618 <MBS_SetBaudRateUserDef>
			}
			break;
 80035ba:	e245      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_SERIAL_BAUD_RATE_LS16B:
			if(value >= 0 && value <= DEF_U16_MAX_VALUE){
				uint32_t br = MBS_GetBaudRateUserDef();
 80035bc:	f00f f83c 	bl	8012638 <MBS_GetBaudRateUserDef>
 80035c0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				br =  ((br&0xFFFF0000) | ((uint32_t)value&0x0000FFFF));
 80035c4:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80035c8:	4b94      	ldr	r3, [pc, #592]	; (800381c <CB_MB_writeHRCallback+0x115c>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	1d3a      	adds	r2, r7, #4
 80035ce:	8812      	ldrh	r2, [r2, #0]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				MBS_SetBaudRateUserDef(br);
 80035d6:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80035da:	f00f f81d 	bl	8012618 <MBS_SetBaudRateUserDef>
			}
			break;
 80035de:	e233      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>

		case MB_HRA_MB_SERIAl_PROTOCOL:
			if(MBS_CheckProtocol(value)){
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d806      	bhi.n	80035f6 <CB_MB_writeHRCallback+0xf36>
				gVar.mbSerial.protocolTemp = value;
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4b8a      	ldr	r3, [pc, #552]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 80035f0:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80035f4:	e228      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80035fc:	e224      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>

			/*Modbus RTU Master------------*/
		case MB_HRA_MB_MSTR_SLAVE_START_ADDR:
			if(value > 0 && value <= MB_SLAVE_ADDR_MAX){
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d011      	beq.n	800362a <CB_MB_writeHRCallback+0xf6a>
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	2bf7      	cmp	r3, #247	; 0xf7
 800360c:	d80d      	bhi.n	800362a <CB_MB_writeHRCallback+0xf6a>
				gVar.mbRTUMaster.custom.slvStartAddr =  value;
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b80      	ldr	r3, [pc, #512]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003616:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
				FSExt_WriteIntNum(SA_MB_MSTR_SLV_START_ADDR, value);
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	4619      	mov	r1, r3
 8003620:	2033      	movs	r0, #51	; 0x33
 8003622:	f001 f9d5 	bl	80049d0 <FSExt_WriteIntNum>
			if(value > 0 && value <= MB_SLAVE_ADDR_MAX){
 8003626:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003628:	e20e      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003630:	e20a      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_MSTR_NUM_OF_SLAVES:
			if((value >= 0 && value <= MB_CUST_NUM_OF_SLAVE_MAX )
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	2b18      	cmp	r3, #24
 8003638:	d815      	bhi.n	8003666 <CB_MB_writeHRCallback+0xfa6>
					&& ((value+gVar.mbRTUMaster.custom.slvStartAddr) < MB_SLAVE_ADDR_MAX)){
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	4a76      	ldr	r2, [pc, #472]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003640:	f892 2971 	ldrb.w	r2, [r2, #2417]	; 0x971
 8003644:	4413      	add	r3, r2
 8003646:	2bf6      	cmp	r3, #246	; 0xf6
 8003648:	d80d      	bhi.n	8003666 <CB_MB_writeHRCallback+0xfa6>
				gVar.mbRTUMaster.custom.numOfSlv =  value;
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b71      	ldr	r3, [pc, #452]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003652:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
				FSExt_WriteIntNum(SA_MB_MSTR_NUM_OF_SLAVE, value);
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	4619      	mov	r1, r3
 800365c:	2034      	movs	r0, #52	; 0x34
 800365e:	f001 f9b7 	bl	80049d0 <FSExt_WriteIntNum>
					&& ((value+gVar.mbRTUMaster.custom.slvStartAddr) < MB_SLAVE_ADDR_MAX)){
 8003662:	bf00      	nop

			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003664:	e1f0      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800366c:	e1ec      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_MSTR_REPLY_TIMEOUT:
			if(value > 0 && value <= CONF_DEF_MBGW_TIMEOUT_MAX ){
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d011      	beq.n	800369a <CB_MB_writeHRCallback+0xfda>
				gVar.mbRTUMaster.replyTimer.timeout =  value*1000; //TODO: value*10; change from ms to us for test purpose
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	461a      	mov	r2, r3
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003686:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
				FSExt_WriteIntNum(SA_MB_MSTR_REPLY_TIMEOUT, gVar.mbRTUMaster.replyTimer.timeout);
 800368a:	4b63      	ldr	r3, [pc, #396]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 800368c:	f8d3 3960 	ldr.w	r3, [r3, #2400]	; 0x960
 8003690:	4619      	mov	r1, r3
 8003692:	2035      	movs	r0, #53	; 0x35
 8003694:	f001 f99c 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}

			break;
 8003698:	e1d6      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80036a0:	e1d2      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_MSTR_PERIODIC_REQ_INTERVAL:
			if(value > 0  && value <= CONF_DEF_MBRTUM_PREIODIC_REQ_TIMEOUT_MAX ){
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d011      	beq.n	80036ce <CB_MB_writeHRCallback+0x100e>
				gVar.mbRTUMaster.custom.reTransTimer.timeout =  value*1000; //TODO: value*10; change from ms to us for test purpose
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	4b57      	ldr	r3, [pc, #348]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 80036ba:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
				FSExt_WriteIntNum(SA_MB_MSTR_PERIODIC_REQ_INTERVAL, gVar.mbRTUMaster.custom.reTransTimer.timeout);
 80036be:	4b56      	ldr	r3, [pc, #344]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 80036c0:	f8d3 3988 	ldr.w	r3, [r3, #2440]	; 0x988
 80036c4:	4619      	mov	r1, r3
 80036c6:	2036      	movs	r0, #54	; 0x36
 80036c8:	f001 f982 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80036cc:	e1bc      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80036d4:	e1b8      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
//		case MB_HRA_MB_MSTR_RETRY_MAX:
//			break;

			/*NModbus RTU Slave------------*/
		case MB_HRA_MB_SLAVE_ADDRESS:
			if(value > 0 && value <= MB_SLAVE_ADDR_MAX ){
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <CB_MB_writeHRCallback+0x1032>
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	2bf7      	cmp	r3, #247	; 0xf7
 80036e4:	d805      	bhi.n	80036f2 <CB_MB_writeHRCallback+0x1032>
				gVar.slvAddrTemp = value;
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 80036ee:	729a      	strb	r2, [r3, #10]
			}else{
				errStatus = MB_ERROR;
			}

			break;
 80036f0:	e1aa      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80036f8:	e1a6      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_MB_SLAVE_CUST_RESP_TIMEOUT:
			if(value > 0 && value <= CONF_DEF_MBRTUS_CUST_RESP_TIMEOUT_MAX ){
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <CB_MB_writeHRCallback+0x1066>
				gVar.mbRTUSlave.custom.waitingTimer.timeout = value*1000; //TODO: value*10; change from ms to us for test purpose
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	461a      	mov	r2, r3
 8003710:	4b41      	ldr	r3, [pc, #260]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003712:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
				FSExt_WriteIntNum(SA_MB_SLAVE_CUST_RESP_TIMEOUT, gVar.mbRTUSlave.custom.waitingTimer.timeout );
 8003716:	4b40      	ldr	r3, [pc, #256]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003718:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800371c:	4619      	mov	r1, r3
 800371e:	203e      	movs	r0, #62	; 0x3e
 8003720:	f001 f956 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003724:	e190      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003726:	2300      	movs	r3, #0
 8003728:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 800372c:	e18c      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
			/*NModbus Gateway------------*/
		case MB_HRA_MB_GW_TIMEOUT:

			if(value > 0  && value <= CONF_DEF_MBGW_TIMEOUT_MAX ){
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d021      	beq.n	800377a <CB_MB_writeHRCallback+0x10ba>
				gVar.mbGateway.rplyTimer.timeout =  value*1000; //TODO: value*10; change from ms to us for test purpose
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	4619      	mov	r1, r3
 8003744:	4a34      	ldr	r2, [pc, #208]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003746:	f641 1368 	movw	r3, #6504	; 0x1968
 800374a:	4413      	add	r3, r2
 800374c:	6019      	str	r1, [r3, #0]
				gVar.mbGateway.rplyTimRglrFC.timeout = value*1000; //TODO: value*10; change from ms to us for test purpose
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	4619      	mov	r1, r3
 800375c:	4a2e      	ldr	r2, [pc, #184]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 800375e:	f641 1388 	movw	r3, #6536	; 0x1988
 8003762:	4413      	add	r3, r2
 8003764:	6019      	str	r1, [r3, #0]
				FSExt_WriteIntNum(SA_MB_GW_TIMEOUT, gVar.mbGateway.rplyTimer.timeout);
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 8003768:	f641 1368 	movw	r3, #6504	; 0x1968
 800376c:	4413      	add	r3, r2
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	2038      	movs	r0, #56	; 0x38
 8003774:	f001 f92c 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003778:	e166      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003780:	e162      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
			/*Device Utilities----------------*/
		case MB_HRA_DEV_MODE:
			if(value == DEV_MODE_SLAVE || value == DEV_MODE_MASTER){
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <CB_MB_writeHRCallback+0x10d2>
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d120      	bne.n	80037d4 <CB_MB_writeHRCallback+0x1114>
				gVar.devMode = value;
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 800379a:	721a      	strb	r2, [r3, #8]
//				gVar.mbRTUMaster.isBusy = 0;
				gVar.mbSerial.mode = (value == DEV_MODE_MASTER ? MBS_MODE_MASTER : MBS_MODE_SLAVE);
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <CB_MB_writeHRCallback+0x10e8>
 80037a4:	2201      	movs	r2, #1
 80037a6:	e000      	b.n	80037aa <CB_MB_writeHRCallback+0x10ea>
 80037a8:	2202      	movs	r2, #2
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 80037ac:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688

				MB_SetRTUMode(value == DEV_MODE_SLAVE ? MB_RTU_MODE_SLAVE : MB_RTU_MODE_MASTER);
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	4618      	mov	r0, r3
 80037c0:	f00c fb46 	bl	800fe50 <MB_SetRTUMode>

				FSExt_WriteIntNum(SA_DEV_MODE, value);
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	2039      	movs	r0, #57	; 0x39
 80037cc:	f001 f900 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == DEV_MODE_SLAVE || value == DEV_MODE_MASTER){
 80037d0:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}

			break;
 80037d2:	e139      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80037da:	e135      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>

			/*Encoder----------------*/
		case MB_HRA_ENC_MODE:
			if(value >= 0 && value < ENC_MODE_MAX ){
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d815      	bhi.n	8003810 <CB_MB_writeHRCallback+0x1150>
				gVar.dio.enc.configs.mode = value;
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b2d9      	uxtb	r1, r3
 80037ea:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 80037ec:	f242 4348 	movw	r3, #9288	; 0x2448
 80037f0:	4413      	add	r3, r2
 80037f2:	460a      	mov	r2, r1
 80037f4:	701a      	strb	r2, [r3, #0]
				gVar.dio.enc.isChanged = 1;
 80037f6:	4a08      	ldr	r2, [pc, #32]	; (8003818 <CB_MB_writeHRCallback+0x1158>)
 80037f8:	f242 439c 	movw	r3, #9372	; 0x249c
 80037fc:	4413      	add	r3, r2
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_ENC_MODE, (uint32_t)value);
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	208b      	movs	r0, #139	; 0x8b
 800380a:	f001 f8e1 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800380e:	e11b      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 8003810:	2300      	movs	r3, #0
 8003812:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003816:	e117      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
 8003818:	24002050 	.word	0x24002050
 800381c:	ffff0000 	.word	0xffff0000
		case MB_HRA_ENC_QUAD_TRIG_MODE:
			if(value == ENC_TRIG_MODE_RISING || value == ENC_TRIG_MODE_FALLING ){
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <CB_MB_writeHRCallback+0x1170>
 8003828:	1d3b      	adds	r3, r7, #4
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d116      	bne.n	800385e <CB_MB_writeHRCallback+0x119e>
				gVar.dio.enc.configs.quadrature.trigMode = value;
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b2d9      	uxtb	r1, r3
 8003836:	4a88      	ldr	r2, [pc, #544]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003838:	f242 4374 	movw	r3, #9332	; 0x2474
 800383c:	4413      	add	r3, r2
 800383e:	460a      	mov	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
				gVar.dio.enc.isChanged = 1;
 8003842:	4a85      	ldr	r2, [pc, #532]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003844:	f242 439c 	movw	r3, #9372	; 0x249c
 8003848:	4413      	add	r3, r2
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_ENC_QUAD_TRIG_MODE, (uint32_t)value);
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	4619      	mov	r1, r3
 8003854:	208c      	movs	r0, #140	; 0x8c
 8003856:	f001 f8bb 	bl	80049d0 <FSExt_WriteIntNum>
			if(value == ENC_TRIG_MODE_RISING || value == ENC_TRIG_MODE_FALLING ){
 800385a:	bf00      	nop
			}else{
				errStatus = MB_ERROR;
			}
			break;
 800385c:	e0f4      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800385e:	2300      	movs	r3, #0
 8003860:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003864:	e0f0      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_ENC_CHA_TRIG_MODE:
			if(value >= 0 && value < ENC_TRIG_MAX ){
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d815      	bhi.n	800389a <CB_MB_writeHRCallback+0x11da>
				gVar.dio.enc.configs.channelA.trigMode = value;
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b2d9      	uxtb	r1, r3
 8003874:	4a78      	ldr	r2, [pc, #480]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003876:	f242 438e 	movw	r3, #9358	; 0x248e
 800387a:	4413      	add	r3, r2
 800387c:	460a      	mov	r2, r1
 800387e:	701a      	strb	r2, [r3, #0]
				gVar.dio.enc.isChanged = 1;
 8003880:	4a75      	ldr	r2, [pc, #468]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003882:	f242 439c 	movw	r3, #9372	; 0x249c
 8003886:	4413      	add	r3, r2
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_ENC_CHA_TRIG_MODE, (uint32_t)value);
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	208d      	movs	r0, #141	; 0x8d
 8003894:	f001 f89c 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 8003898:	e0d6      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80038a0:	e0d2      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_ENC_CHB_TRIG_MODE:
			if(value >= 0 && value < ENC_TRIG_MAX ){
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d815      	bhi.n	80038d6 <CB_MB_writeHRCallback+0x1216>
				gVar.dio.enc.configs.channelB.trigMode = value;
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b2d9      	uxtb	r1, r3
 80038b0:	4a69      	ldr	r2, [pc, #420]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 80038b2:	f242 439a 	movw	r3, #9370	; 0x249a
 80038b6:	4413      	add	r3, r2
 80038b8:	460a      	mov	r2, r1
 80038ba:	701a      	strb	r2, [r3, #0]
				gVar.dio.enc.isChanged = 1;
 80038bc:	4a66      	ldr	r2, [pc, #408]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 80038be:	f242 439c 	movw	r3, #9372	; 0x249c
 80038c2:	4413      	add	r3, r2
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
				FSExt_WriteIntNum(SA_ENC_CHB_TRIG_MODE, (uint32_t)value);
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	208e      	movs	r0, #142	; 0x8e
 80038d0:	f001 f87e 	bl	80049d0 <FSExt_WriteIntNum>
			}else{
				errStatus = MB_ERROR;
			}
			break;
 80038d4:	e0b8      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
				errStatus = MB_ERROR;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 80038dc:	e0b4      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>


			/*PID----------------*/
			//PID 1
		case MB_HRA_PID1_KP:
			gVar.pid1.kp = ((float)value/MB_VALUE_MULTIPLIER_100);;
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038ea:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003a5c <CB_MB_writeHRCallback+0x139c>
 80038ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038f2:	4a59      	ldr	r2, [pc, #356]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 80038f4:	f242 5318 	movw	r3, #9496	; 0x2518
 80038f8:	4413      	add	r3, r2
 80038fa:	edc3 7a00 	vstr	s15, [r3]
			FSExt_WriteIntNum(SA_PID1_KP, value);
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	4619      	mov	r1, r3
 8003904:	2082      	movs	r0, #130	; 0x82
 8003906:	f001 f863 	bl	80049d0 <FSExt_WriteIntNum>
			break;
 800390a:	e09d      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_PID1_KI:
			gVar.pid1.ki = ((float)value/MB_VALUE_MULTIPLIER_100);;
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003918:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003a5c <CB_MB_writeHRCallback+0x139c>
 800391c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003920:	4a4d      	ldr	r2, [pc, #308]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003922:	f242 531c 	movw	r3, #9500	; 0x251c
 8003926:	4413      	add	r3, r2
 8003928:	edc3 7a00 	vstr	s15, [r3]
			FSExt_WriteIntNum(SA_PID1_KI, value);
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	4619      	mov	r1, r3
 8003932:	2083      	movs	r0, #131	; 0x83
 8003934:	f001 f84c 	bl	80049d0 <FSExt_WriteIntNum>
			break;
 8003938:	e086      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_PID1_KD:
			gVar.pid1.kd = ((float)value/MB_VALUE_MULTIPLIER_100);;
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003946:	eddf 6a45 	vldr	s13, [pc, #276]	; 8003a5c <CB_MB_writeHRCallback+0x139c>
 800394a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800394e:	4a42      	ldr	r2, [pc, #264]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003950:	f242 5320 	movw	r3, #9504	; 0x2520
 8003954:	4413      	add	r3, r2
 8003956:	edc3 7a00 	vstr	s15, [r3]
			FSExt_WriteIntNum(SA_PID1_KD, value);
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	2084      	movs	r0, #132	; 0x84
 8003962:	f001 f835 	bl	80049d0 <FSExt_WriteIntNum>
			break;
 8003966:	e06f      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_PID1_I_OUT_LIMIT:
			gVar.pid1.output_i_max = ((float)value);;
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003974:	4a38      	ldr	r2, [pc, #224]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003976:	f242 533c 	movw	r3, #9532	; 0x253c
 800397a:	4413      	add	r3, r2
 800397c:	edc3 7a00 	vstr	s15, [r3]
			FSExt_WriteIntNum(SA_PID1_I_OUT_LIMIT, value);
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	2085      	movs	r0, #133	; 0x85
 8003988:	f001 f822 	bl	80049d0 <FSExt_WriteIntNum>
			break;
 800398c:	e05c      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>

			//PID 2
		case MB_HRA_PID2_KP:
			gVar.pid2.kp = ((float)value/MB_VALUE_MULTIPLIER_100);;
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800399a:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003a5c <CB_MB_writeHRCallback+0x139c>
 800399e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a2:	4a2d      	ldr	r2, [pc, #180]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 80039a4:	f242 5358 	movw	r3, #9560	; 0x2558
 80039a8:	4413      	add	r3, r2
 80039aa:	edc3 7a00 	vstr	s15, [r3]
			FSExt_WriteIntNum(SA_PID2_KP, value);
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	4619      	mov	r1, r3
 80039b4:	2086      	movs	r0, #134	; 0x86
 80039b6:	f001 f80b 	bl	80049d0 <FSExt_WriteIntNum>
			break;
 80039ba:	e045      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_PID2_KI:
			gVar.pid2.ki = ((float)value/MB_VALUE_MULTIPLIER_100);;
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039c8:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003a5c <CB_MB_writeHRCallback+0x139c>
 80039cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 80039d2:	f242 535c 	movw	r3, #9564	; 0x255c
 80039d6:	4413      	add	r3, r2
 80039d8:	edc3 7a00 	vstr	s15, [r3]
			FSExt_WriteIntNum(SA_PID2_KI, value);
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	2087      	movs	r0, #135	; 0x87
 80039e4:	f000 fff4 	bl	80049d0 <FSExt_WriteIntNum>
			break;
 80039e8:	e02e      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_PID2_KD:
			gVar.pid2.kd = ((float)value/MB_VALUE_MULTIPLIER_100);;
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f6:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003a5c <CB_MB_writeHRCallback+0x139c>
 80039fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003a00:	f242 5360 	movw	r3, #9568	; 0x2560
 8003a04:	4413      	add	r3, r2
 8003a06:	edc3 7a00 	vstr	s15, [r3]
			FSExt_WriteIntNum(SA_PID2_KD, value);
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	2088      	movs	r0, #136	; 0x88
 8003a12:	f000 ffdd 	bl	80049d0 <FSExt_WriteIntNum>
			break;
 8003a16:	e017      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		case MB_HRA_PID2_I_OUT_LIMIT:
			gVar.pid2.output_i_max = ((float)value);;
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a24:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <CB_MB_writeHRCallback+0x1398>)
 8003a26:	f242 537c 	movw	r3, #9596	; 0x257c
 8003a2a:	4413      	add	r3, r2
 8003a2c:	edc3 7a00 	vstr	s15, [r3]
			FSExt_WriteIntNum(SA_PID2_I_OUT_LIMIT, value);
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	4619      	mov	r1, r3
 8003a36:	2089      	movs	r0, #137	; 0x89
 8003a38:	f000 ffca 	bl	80049d0 <FSExt_WriteIntNum>
			break;
 8003a3c:	e004      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
		default:
			errStatus = MB_ERROR;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			break;
 8003a44:	e000      	b.n	8003a48 <CB_MB_writeHRCallback+0x1388>
			break;
 8003a46:	bf00      	nop
	}
//	if (errStatus == MB_OK) {
//		MB_REG_SetHR(address, value);
//	}
//	DBG_SPRINT_NL("%s %s: { %s: %d, %s: %d }",STR_MB, STR_REQ, STR_ADDRESS, address, STR_VALUE, value);
	return errStatus;
 8003a48:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	24002050 	.word	0x24002050
 8003a5c:	42c80000 	.word	0x42c80000

08003a60 <CB_MB_readHRCallback>:


uint8_t CB_MB_readHRCallback( MB_HRAddrEnum address, uint16_t *value){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	6039      	str	r1, [r7, #0]
 8003a6a:	80fb      	strh	r3, [r7, #6]
	uint8_t errorStatus = MB_OK;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
	//
	switch(address){
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	4b02      	ldr	r3, [pc, #8]	; (8003a7c <CB_MB_readHRCallback+0x1c>)
 8003a74:	4413      	add	r3, r2
 8003a76:	f240 1239 	movw	r2, #313	; 0x139
 8003a7a:	e001      	b.n	8003a80 <CB_MB_readHRCallback+0x20>
 8003a7c:	ffff63bf 	.word	0xffff63bf
 8003a80:	4293      	cmp	r3, r2
 8003a82:	f200 8509 	bhi.w	8004498 <CB_MB_readHRCallback+0xa38>
 8003a86:	a101      	add	r1, pc, #4	; (adr r1, 8003a8c <CB_MB_readHRCallback+0x2c>)
 8003a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a8c:	08003f75 	.word	0x08003f75
 8003a90:	08004499 	.word	0x08004499
 8003a94:	08004499 	.word	0x08004499
 8003a98:	08003f87 	.word	0x08003f87
 8003a9c:	08004499 	.word	0x08004499
 8003aa0:	08004499 	.word	0x08004499
 8003aa4:	08004499 	.word	0x08004499
 8003aa8:	08004499 	.word	0x08004499
 8003aac:	08004499 	.word	0x08004499
 8003ab0:	08003f99 	.word	0x08003f99
 8003ab4:	08003fab 	.word	0x08003fab
 8003ab8:	08004499 	.word	0x08004499
 8003abc:	08004499 	.word	0x08004499
 8003ac0:	08003fbd 	.word	0x08003fbd
 8003ac4:	08004499 	.word	0x08004499
 8003ac8:	08004499 	.word	0x08004499
 8003acc:	08004499 	.word	0x08004499
 8003ad0:	08004499 	.word	0x08004499
 8003ad4:	08004499 	.word	0x08004499
 8003ad8:	08003fcf 	.word	0x08003fcf
 8003adc:	08004499 	.word	0x08004499
 8003ae0:	08004499 	.word	0x08004499
 8003ae4:	08004499 	.word	0x08004499
 8003ae8:	08004499 	.word	0x08004499
 8003aec:	08004499 	.word	0x08004499
 8003af0:	08004499 	.word	0x08004499
 8003af4:	08004499 	.word	0x08004499
 8003af8:	08004499 	.word	0x08004499
 8003afc:	08004499 	.word	0x08004499
 8003b00:	08004499 	.word	0x08004499
 8003b04:	08004499 	.word	0x08004499
 8003b08:	08004499 	.word	0x08004499
 8003b0c:	08004499 	.word	0x08004499
 8003b10:	08004499 	.word	0x08004499
 8003b14:	08004499 	.word	0x08004499
 8003b18:	08004499 	.word	0x08004499
 8003b1c:	08004499 	.word	0x08004499
 8003b20:	08004499 	.word	0x08004499
 8003b24:	08004499 	.word	0x08004499
 8003b28:	08004499 	.word	0x08004499
 8003b2c:	08004499 	.word	0x08004499
 8003b30:	08004499 	.word	0x08004499
 8003b34:	08004499 	.word	0x08004499
 8003b38:	08004499 	.word	0x08004499
 8003b3c:	08004499 	.word	0x08004499
 8003b40:	08004499 	.word	0x08004499
 8003b44:	08004499 	.word	0x08004499
 8003b48:	08004499 	.word	0x08004499
 8003b4c:	08004499 	.word	0x08004499
 8003b50:	08004499 	.word	0x08004499
 8003b54:	08004499 	.word	0x08004499
 8003b58:	08004499 	.word	0x08004499
 8003b5c:	08004499 	.word	0x08004499
 8003b60:	08004499 	.word	0x08004499
 8003b64:	08004499 	.word	0x08004499
 8003b68:	08004499 	.word	0x08004499
 8003b6c:	08004499 	.word	0x08004499
 8003b70:	08004499 	.word	0x08004499
 8003b74:	08004499 	.word	0x08004499
 8003b78:	08004499 	.word	0x08004499
 8003b7c:	08004499 	.word	0x08004499
 8003b80:	08004499 	.word	0x08004499
 8003b84:	08004499 	.word	0x08004499
 8003b88:	08004499 	.word	0x08004499
 8003b8c:	08004499 	.word	0x08004499
 8003b90:	08004499 	.word	0x08004499
 8003b94:	08004499 	.word	0x08004499
 8003b98:	08004499 	.word	0x08004499
 8003b9c:	08004499 	.word	0x08004499
 8003ba0:	08004499 	.word	0x08004499
 8003ba4:	08004499 	.word	0x08004499
 8003ba8:	08004499 	.word	0x08004499
 8003bac:	08004499 	.word	0x08004499
 8003bb0:	08004499 	.word	0x08004499
 8003bb4:	08004499 	.word	0x08004499
 8003bb8:	08004499 	.word	0x08004499
 8003bbc:	08004499 	.word	0x08004499
 8003bc0:	08004499 	.word	0x08004499
 8003bc4:	08004499 	.word	0x08004499
 8003bc8:	08004499 	.word	0x08004499
 8003bcc:	08004499 	.word	0x08004499
 8003bd0:	08004499 	.word	0x08004499
 8003bd4:	08004499 	.word	0x08004499
 8003bd8:	08004499 	.word	0x08004499
 8003bdc:	08004499 	.word	0x08004499
 8003be0:	08004499 	.word	0x08004499
 8003be4:	08004499 	.word	0x08004499
 8003be8:	08004499 	.word	0x08004499
 8003bec:	08004499 	.word	0x08004499
 8003bf0:	08004499 	.word	0x08004499
 8003bf4:	08004499 	.word	0x08004499
 8003bf8:	08004499 	.word	0x08004499
 8003bfc:	08004499 	.word	0x08004499
 8003c00:	08004499 	.word	0x08004499
 8003c04:	08004499 	.word	0x08004499
 8003c08:	08004499 	.word	0x08004499
 8003c0c:	08004499 	.word	0x08004499
 8003c10:	08004499 	.word	0x08004499
 8003c14:	08004499 	.word	0x08004499
 8003c18:	08004499 	.word	0x08004499
 8003c1c:	08004499 	.word	0x08004499
 8003c20:	08004499 	.word	0x08004499
 8003c24:	08004499 	.word	0x08004499
 8003c28:	08004499 	.word	0x08004499
 8003c2c:	08004499 	.word	0x08004499
 8003c30:	08004499 	.word	0x08004499
 8003c34:	08004499 	.word	0x08004499
 8003c38:	08004499 	.word	0x08004499
 8003c3c:	08004499 	.word	0x08004499
 8003c40:	08004499 	.word	0x08004499
 8003c44:	08004499 	.word	0x08004499
 8003c48:	08004499 	.word	0x08004499
 8003c4c:	08004499 	.word	0x08004499
 8003c50:	08004499 	.word	0x08004499
 8003c54:	08004499 	.word	0x08004499
 8003c58:	08004499 	.word	0x08004499
 8003c5c:	08004499 	.word	0x08004499
 8003c60:	08004499 	.word	0x08004499
 8003c64:	08004499 	.word	0x08004499
 8003c68:	08004499 	.word	0x08004499
 8003c6c:	08004499 	.word	0x08004499
 8003c70:	08004499 	.word	0x08004499
 8003c74:	08004499 	.word	0x08004499
 8003c78:	08004499 	.word	0x08004499
 8003c7c:	08004499 	.word	0x08004499
 8003c80:	08004499 	.word	0x08004499
 8003c84:	08004499 	.word	0x08004499
 8003c88:	08004499 	.word	0x08004499
 8003c8c:	08004499 	.word	0x08004499
 8003c90:	08004499 	.word	0x08004499
 8003c94:	08004499 	.word	0x08004499
 8003c98:	08004499 	.word	0x08004499
 8003c9c:	08004499 	.word	0x08004499
 8003ca0:	08004499 	.word	0x08004499
 8003ca4:	08004499 	.word	0x08004499
 8003ca8:	08004499 	.word	0x08004499
 8003cac:	08004499 	.word	0x08004499
 8003cb0:	08003fe1 	.word	0x08003fe1
 8003cb4:	08003ff3 	.word	0x08003ff3
 8003cb8:	08004499 	.word	0x08004499
 8003cbc:	08004499 	.word	0x08004499
 8003cc0:	08004499 	.word	0x08004499
 8003cc4:	08004499 	.word	0x08004499
 8003cc8:	08004499 	.word	0x08004499
 8003ccc:	08004499 	.word	0x08004499
 8003cd0:	08004003 	.word	0x08004003
 8003cd4:	08004027 	.word	0x08004027
 8003cd8:	08004015 	.word	0x08004015
 8003cdc:	08004499 	.word	0x08004499
 8003ce0:	08004499 	.word	0x08004499
 8003ce4:	08004037 	.word	0x08004037
 8003ce8:	0800405b 	.word	0x0800405b
 8003cec:	08004049 	.word	0x08004049
 8003cf0:	08004499 	.word	0x08004499
 8003cf4:	08004499 	.word	0x08004499
 8003cf8:	0800406b 	.word	0x0800406b
 8003cfc:	0800407d 	.word	0x0800407d
 8003d00:	08004499 	.word	0x08004499
 8003d04:	08004499 	.word	0x08004499
 8003d08:	08004499 	.word	0x08004499
 8003d0c:	0800408d 	.word	0x0800408d
 8003d10:	0800409f 	.word	0x0800409f
 8003d14:	08004499 	.word	0x08004499
 8003d18:	08004499 	.word	0x08004499
 8003d1c:	08004499 	.word	0x08004499
 8003d20:	08004499 	.word	0x08004499
 8003d24:	08004499 	.word	0x08004499
 8003d28:	08004499 	.word	0x08004499
 8003d2c:	08004499 	.word	0x08004499
 8003d30:	08004499 	.word	0x08004499
 8003d34:	080040ad 	.word	0x080040ad
 8003d38:	080040bb 	.word	0x080040bb
 8003d3c:	080040c9 	.word	0x080040c9
 8003d40:	080040d7 	.word	0x080040d7
 8003d44:	080040e5 	.word	0x080040e5
 8003d48:	080040f3 	.word	0x080040f3
 8003d4c:	08004101 	.word	0x08004101
 8003d50:	0800410f 	.word	0x0800410f
 8003d54:	0800411d 	.word	0x0800411d
 8003d58:	0800412b 	.word	0x0800412b
 8003d5c:	08004139 	.word	0x08004139
 8003d60:	08004147 	.word	0x08004147
 8003d64:	08004155 	.word	0x08004155
 8003d68:	08004163 	.word	0x08004163
 8003d6c:	08004171 	.word	0x08004171
 8003d70:	0800417f 	.word	0x0800417f
 8003d74:	0800418d 	.word	0x0800418d
 8003d78:	0800419b 	.word	0x0800419b
 8003d7c:	080041a9 	.word	0x080041a9
 8003d80:	080041b7 	.word	0x080041b7
 8003d84:	080041c9 	.word	0x080041c9
 8003d88:	080041d7 	.word	0x080041d7
 8003d8c:	08004499 	.word	0x08004499
 8003d90:	08004499 	.word	0x08004499
 8003d94:	08004499 	.word	0x08004499
 8003d98:	08004499 	.word	0x08004499
 8003d9c:	08004499 	.word	0x08004499
 8003da0:	08004499 	.word	0x08004499
 8003da4:	08004499 	.word	0x08004499
 8003da8:	08004499 	.word	0x08004499
 8003dac:	080041e5 	.word	0x080041e5
 8003db0:	080041f1 	.word	0x080041f1
 8003db4:	08004499 	.word	0x08004499
 8003db8:	08004499 	.word	0x08004499
 8003dbc:	08004499 	.word	0x08004499
 8003dc0:	08004499 	.word	0x08004499
 8003dc4:	08004499 	.word	0x08004499
 8003dc8:	08004499 	.word	0x08004499
 8003dcc:	08004499 	.word	0x08004499
 8003dd0:	08004499 	.word	0x08004499
 8003dd4:	08004499 	.word	0x08004499
 8003dd8:	08004499 	.word	0x08004499
 8003ddc:	08004499 	.word	0x08004499
 8003de0:	08004499 	.word	0x08004499
 8003de4:	08004499 	.word	0x08004499
 8003de8:	08004499 	.word	0x08004499
 8003dec:	08004499 	.word	0x08004499
 8003df0:	08004499 	.word	0x08004499
 8003df4:	08004499 	.word	0x08004499
 8003df8:	08004499 	.word	0x08004499
 8003dfc:	080041fd 	.word	0x080041fd
 8003e00:	0800420b 	.word	0x0800420b
 8003e04:	08004219 	.word	0x08004219
 8003e08:	08004227 	.word	0x08004227
 8003e0c:	08004235 	.word	0x08004235
 8003e10:	08004241 	.word	0x08004241
 8003e14:	0800425b 	.word	0x0800425b
 8003e18:	0800424d 	.word	0x0800424d
 8003e1c:	08004499 	.word	0x08004499
 8003e20:	08004499 	.word	0x08004499
 8003e24:	08004499 	.word	0x08004499
 8003e28:	08004499 	.word	0x08004499
 8003e2c:	08004499 	.word	0x08004499
 8003e30:	08004499 	.word	0x08004499
 8003e34:	08004499 	.word	0x08004499
 8003e38:	08004499 	.word	0x08004499
 8003e3c:	08004499 	.word	0x08004499
 8003e40:	08004499 	.word	0x08004499
 8003e44:	08004499 	.word	0x08004499
 8003e48:	08004499 	.word	0x08004499
 8003e4c:	08004287 	.word	0x08004287
 8003e50:	080042a3 	.word	0x080042a3
 8003e54:	08004293 	.word	0x08004293
 8003e58:	080042b1 	.word	0x080042b1
 8003e5c:	08004499 	.word	0x08004499
 8003e60:	08004499 	.word	0x08004499
 8003e64:	08004499 	.word	0x08004499
 8003e68:	08004499 	.word	0x08004499
 8003e6c:	08004499 	.word	0x08004499
 8003e70:	08004499 	.word	0x08004499
 8003e74:	080042bf 	.word	0x080042bf
 8003e78:	080042cd 	.word	0x080042cd
 8003e7c:	080042db 	.word	0x080042db
 8003e80:	080042f1 	.word	0x080042f1
 8003e84:	08004499 	.word	0x08004499
 8003e88:	08004499 	.word	0x08004499
 8003e8c:	08004499 	.word	0x08004499
 8003e90:	08004499 	.word	0x08004499
 8003e94:	08004499 	.word	0x08004499
 8003e98:	08004499 	.word	0x08004499
 8003e9c:	08004307 	.word	0x08004307
 8003ea0:	08004313 	.word	0x08004313
 8003ea4:	08004499 	.word	0x08004499
 8003ea8:	08004499 	.word	0x08004499
 8003eac:	08004499 	.word	0x08004499
 8003eb0:	0800426d 	.word	0x0800426d
 8003eb4:	08004499 	.word	0x08004499
 8003eb8:	08004499 	.word	0x08004499
 8003ebc:	08004499 	.word	0x08004499
 8003ec0:	08004499 	.word	0x08004499
 8003ec4:	08004499 	.word	0x08004499
 8003ec8:	08004499 	.word	0x08004499
 8003ecc:	08004499 	.word	0x08004499
 8003ed0:	08004499 	.word	0x08004499
 8003ed4:	08004499 	.word	0x08004499
 8003ed8:	08004499 	.word	0x08004499
 8003edc:	08004499 	.word	0x08004499
 8003ee0:	08004499 	.word	0x08004499
 8003ee4:	08004499 	.word	0x08004499
 8003ee8:	08004499 	.word	0x08004499
 8003eec:	08004329 	.word	0x08004329
 8003ef0:	08004499 	.word	0x08004499
 8003ef4:	08004499 	.word	0x08004499
 8003ef8:	08004499 	.word	0x08004499
 8003efc:	08004499 	.word	0x08004499
 8003f00:	08004499 	.word	0x08004499
 8003f04:	08004499 	.word	0x08004499
 8003f08:	08004499 	.word	0x08004499
 8003f0c:	08004499 	.word	0x08004499
 8003f10:	08004499 	.word	0x08004499
 8003f14:	08004335 	.word	0x08004335
 8003f18:	08004347 	.word	0x08004347
 8003f1c:	08004359 	.word	0x08004359
 8003f20:	0800436b 	.word	0x0800436b
 8003f24:	08004499 	.word	0x08004499
 8003f28:	08004499 	.word	0x08004499
 8003f2c:	08004499 	.word	0x08004499
 8003f30:	08004499 	.word	0x08004499
 8003f34:	08004499 	.word	0x08004499
 8003f38:	08004499 	.word	0x08004499
 8003f3c:	0800437d 	.word	0x0800437d
 8003f40:	080043a1 	.word	0x080043a1
 8003f44:	080043c5 	.word	0x080043c5
 8003f48:	080043e9 	.word	0x080043e9
 8003f4c:	08004499 	.word	0x08004499
 8003f50:	08004499 	.word	0x08004499
 8003f54:	08004499 	.word	0x08004499
 8003f58:	08004499 	.word	0x08004499
 8003f5c:	08004499 	.word	0x08004499
 8003f60:	08004499 	.word	0x08004499
 8003f64:	08004405 	.word	0x08004405
 8003f68:	08004429 	.word	0x08004429
 8003f6c:	08004459 	.word	0x08004459
 8003f70:	0800447d 	.word	0x0800447d
//	/*Digital Inputs--------------*/
		case MB_HRA_DI1_MODE:
			*value = gVar.dio.di[DI_1].config.mode;
 8003f74:	4a93      	ldr	r2, [pc, #588]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8003f76:	f242 2348 	movw	r3, #8776	; 0x2248
 8003f7a:	4413      	add	r3, r2
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	801a      	strh	r2, [r3, #0]
			break;
 8003f84:	e28b      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//			break;
//		case MB_HRA_DI1_COUNTER_MODE:
//			*value = gVar.dio.di[DI_1].config.countMode;
//			break;
		case MB_HRA_DI1_TRIGGER_MODE:
			*value = gVar.dio.di[DI_1].config.trigMode;
 8003f86:	4a8f      	ldr	r2, [pc, #572]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8003f88:	f242 234b 	movw	r3, #8779	; 0x224b
 8003f8c:	4413      	add	r3, r2
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	801a      	strh	r2, [r3, #0]
			break;
 8003f96:	e282      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//		case MB_HRA_DI1_DEBOUNCE_MAX:
//			*value = gVar.dio.di[DI_1].dbunce.countMax;
//			break;
		case MB_HRA_DI1_SIGNAL_PERIOD_MIN:
			*value = gVar.dio.di[DI_1].pulseInf.periodMin;
 8003f98:	4a8a      	ldr	r2, [pc, #552]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8003f9a:	f242 237c 	movw	r3, #8828	; 0x227c
 8003f9e:	4413      	add	r3, r2
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	801a      	strh	r2, [r3, #0]
			break;
 8003fa8:	e279      	b.n	800449e <CB_MB_readHRCallback+0xa3e>


		case MB_HRA_DI2_MODE:
			*value = gVar.dio.di[DI_2].config.mode;
 8003faa:	4a86      	ldr	r2, [pc, #536]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8003fac:	f242 2388 	movw	r3, #8840	; 0x2288
 8003fb0:	4413      	add	r3, r2
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	801a      	strh	r2, [r3, #0]
			break;
 8003fba:	e270      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//			break;
//		case MB_HRA_DI2_COUNTER_MODE:
//			*value = gVar.dio.di[DI_2].config.countMode;
//			break;
		case MB_HRA_DI2_TRIGGER_MODE:
			*value = gVar.dio.di[DI_2].config.trigMode;
 8003fbc:	4a81      	ldr	r2, [pc, #516]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8003fbe:	f242 238b 	movw	r3, #8843	; 0x228b
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	801a      	strh	r2, [r3, #0]
			break;
 8003fcc:	e267      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//		case MB_HRA_DI2_DEBOUNCE_MAX:
//			*value = gVar.dio.di[DI_2].dbunce.countMax;
//			break;
		case MB_HRA_DI2_SIGNAL_PERIOD_MIN:
			*value = gVar.dio.di[DI_2].pulseInf.periodMin;
 8003fce:	4a7d      	ldr	r2, [pc, #500]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8003fd0:	f242 23bc 	movw	r3, #8892	; 0x22bc
 8003fd4:	4413      	add	r3, r2
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	801a      	strh	r2, [r3, #0]
			break;
 8003fde:	e25e      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//			*value = gVar.dio.dout[DO_8].pwm.duty12Bits;
//			break;

		/*Analog Inputs-----------*/
		case MB_HRA_AI1_MODE:
			*value = gVar.ai[AI_1].mode;
 8003fe0:	4a78      	ldr	r2, [pc, #480]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8003fe2:	f641 7310 	movw	r3, #7952	; 0x1f10
 8003fe6:	4413      	add	r3, r2
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	801a      	strh	r2, [r3, #0]
			break;
 8003ff0:	e255      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_AI2_MODE:
			*value = gVar.ai[AI_2].mode;
 8003ff2:	4b74      	ldr	r3, [pc, #464]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8003ff4:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	801a      	strh	r2, [r3, #0]
			break;
 8004000:	e24d      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//			*value = gVar.ai[AI_4].mode;
//			break;

		/*Analog outputs------------*/
		case MB_HRA_AO1_MODE:
			*value = gVar.ao[AO_1].mode;
 8004002:	4a70      	ldr	r2, [pc, #448]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004004:	f641 6357 	movw	r3, #7767	; 0x1e57
 8004008:	4413      	add	r3, r2
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	b29a      	uxth	r2, r3
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	801a      	strh	r2, [r3, #0]
			break;
 8004012:	e244      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_AO1_SRC:
			*value = gVar.ao[AO_1].source;
 8004014:	4a6b      	ldr	r2, [pc, #428]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004016:	f641 6356 	movw	r3, #7766	; 0x1e56
 800401a:	4413      	add	r3, r2
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	b29a      	uxth	r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	801a      	strh	r2, [r3, #0]
			break;
 8004024:	e23b      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_AO1_DUTY:
			*value = gVar.ao[AO_1].mbValue;
 8004026:	4a67      	ldr	r2, [pc, #412]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004028:	f641 635a 	movw	r3, #7770	; 0x1e5a
 800402c:	4413      	add	r3, r2
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	801a      	strh	r2, [r3, #0]
			break;
 8004034:	e233      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_AO2_MODE:
			*value = gVar.ao[AO_2].mode;
 8004036:	4a63      	ldr	r2, [pc, #396]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004038:	f641 6383 	movw	r3, #7811	; 0x1e83
 800403c:	4413      	add	r3, r2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b29a      	uxth	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	801a      	strh	r2, [r3, #0]
			break;
 8004046:	e22a      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_AO2_SRC:
			*value = gVar.ao[AO_2].source;
 8004048:	4a5e      	ldr	r2, [pc, #376]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800404a:	f641 6382 	movw	r3, #7810	; 0x1e82
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b29a      	uxth	r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	801a      	strh	r2, [r3, #0]
			break;
 8004058:	e221      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_AO2_DUTY:
			*value = gVar.ao[AO_2].mbValue;
 800405a:	4a5a      	ldr	r2, [pc, #360]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800405c:	f641 6386 	movw	r3, #7814	; 0x1e86
 8004060:	4413      	add	r3, r2
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	801a      	strh	r2, [r3, #0]
			break;
 8004068:	e219      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_AO3_MODE:
			*value = gVar.ao[AO_3].mode;
 800406a:	4a56      	ldr	r2, [pc, #344]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800406c:	f641 63af 	movw	r3, #7855	; 0x1eaf
 8004070:	4413      	add	r3, r2
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b29a      	uxth	r2, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	801a      	strh	r2, [r3, #0]
			break;
 800407a:	e210      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//		case MB_HRA_AO3_SRC:
//			*value = gVar.ao[AO_3].source;
//			break;
		case MB_HRA_AO3_DUTY:
			*value = gVar.ao[AO_3].value;
 800407c:	4a51      	ldr	r2, [pc, #324]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800407e:	f641 63b4 	movw	r3, #7860	; 0x1eb4
 8004082:	4413      	add	r3, r2
 8004084:	881a      	ldrh	r2, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	801a      	strh	r2, [r3, #0]
			break;
 800408a:	e208      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_AO4_MODE:
			*value = gVar.ao[AO_4].mode;
 800408c:	4a4d      	ldr	r2, [pc, #308]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800408e:	f641 63db 	movw	r3, #7899	; 0x1edb
 8004092:	4413      	add	r3, r2
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	b29a      	uxth	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	801a      	strh	r2, [r3, #0]
			break;
 800409c:	e1ff      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//		case MB_HRA_AO4_SRC:
//			*value = gVar.ao[AO_4].source;
//			break;
		case MB_HRA_AO4_DUTY:
			*value = gVar.ao[AO_4].value;
 800409e:	4b49      	ldr	r3, [pc, #292]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80040a0:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	801a      	strh	r2, [r3, #0]
			break;
 80040aa:	e1f8      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		/*Net Information------------*/

		case MB_HRA_DEV_MAC_1:		//ok
			*value = gVar.w5500Chip.netInfo.mac[0];
 80040ac:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80040ae:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	801a      	strh	r2, [r3, #0]
			break;
 80040b8:	e1f1      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_MAC_2:
			*value = gVar.w5500Chip.netInfo.mac[1];
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80040bc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	801a      	strh	r2, [r3, #0]
			break;
 80040c6:	e1ea      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_MAC_3:
			*value = gVar.w5500Chip.netInfo.mac[2];
 80040c8:	4b3e      	ldr	r3, [pc, #248]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80040ca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	801a      	strh	r2, [r3, #0]
			break;
 80040d4:	e1e3      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_MAC_4:
			*value = gVar.w5500Chip.netInfo.mac[3];
 80040d6:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80040d8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80040dc:	b29a      	uxth	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	801a      	strh	r2, [r3, #0]
			break;
 80040e2:	e1dc      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_MAC_5:
			*value = gVar.w5500Chip.netInfo.mac[4];
 80040e4:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80040e6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	801a      	strh	r2, [r3, #0]
			break;
 80040f0:	e1d5      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_MAC_6:
			*value = gVar.w5500Chip.netInfo.mac[5];
 80040f2:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80040f4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	801a      	strh	r2, [r3, #0]
			break;
 80040fe:	e1ce      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_DEV_IP_1:
			*value = gVar.w5500Chip.netInfo.ip[0];
 8004100:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004102:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004106:	b29a      	uxth	r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	801a      	strh	r2, [r3, #0]
			break;
 800410c:	e1c7      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_IP_2:
			*value = gVar.w5500Chip.netInfo.ip[1];
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004110:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004114:	b29a      	uxth	r2, r3
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	801a      	strh	r2, [r3, #0]
			break;
 800411a:	e1c0      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_IP_3:
			*value = gVar.w5500Chip.netInfo.ip[2];
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800411e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8004122:	b29a      	uxth	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	801a      	strh	r2, [r3, #0]
			break;
 8004128:	e1b9      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_IP_4:
			*value = gVar.w5500Chip.netInfo.ip[3];
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800412c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8004130:	b29a      	uxth	r2, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	801a      	strh	r2, [r3, #0]
			break;
 8004136:	e1b2      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_DEV_SN_1:
			*value = gVar.w5500Chip.netInfo.sn[0];
 8004138:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800413a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800413e:	b29a      	uxth	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	801a      	strh	r2, [r3, #0]
			break;
 8004144:	e1ab      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_SN_2:
			*value = gVar.w5500Chip.netInfo.sn[1];
 8004146:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004148:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800414c:	b29a      	uxth	r2, r3
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	801a      	strh	r2, [r3, #0]
			break;
 8004152:	e1a4      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_SN_3:
			*value = gVar.w5500Chip.netInfo.sn[2];
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004156:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800415a:	b29a      	uxth	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	801a      	strh	r2, [r3, #0]
			break;
 8004160:	e19d      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_SN_4:
			*value = gVar.w5500Chip.netInfo.sn[3];
 8004162:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004164:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8004168:	b29a      	uxth	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	801a      	strh	r2, [r3, #0]
			break;
 800416e:	e196      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_DEV_GW_1:
			*value = gVar.w5500Chip.netInfo.gw[0];
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004172:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004176:	b29a      	uxth	r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	801a      	strh	r2, [r3, #0]
			break;
 800417c:	e18f      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_GW_2:
			*value = gVar.w5500Chip.netInfo.gw[1];
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 8004180:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8004184:	b29a      	uxth	r2, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	801a      	strh	r2, [r3, #0]
			break;
 800418a:	e188      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_GW_3:
			*value = gVar.w5500Chip.netInfo.gw[2];
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800418e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8004192:	b29a      	uxth	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	801a      	strh	r2, [r3, #0]
			break;
 8004198:	e181      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_GW_4:
			*value = gVar.w5500Chip.netInfo.gw[3];
 800419a:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 800419c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	801a      	strh	r2, [r3, #0]
			break;
 80041a6:	e17a      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_DEV_DNS_1:
			*value = gVar.w5500Chip.netInfo.dns[0];
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80041aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	801a      	strh	r2, [r3, #0]
			break;
 80041b4:	e173      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_DNS_2:
			*value = gVar.w5500Chip.netInfo.dns[1];
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <CB_MB_readHRCallback+0x764>)
 80041b8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80041bc:	b29a      	uxth	r2, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	801a      	strh	r2, [r3, #0]
			break;
 80041c2:	e16c      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
 80041c4:	24002050 	.word	0x24002050
		case MB_HRA_DEV_DNS_3:
			*value = gVar.w5500Chip.netInfo.dns[2];
 80041c8:	4ba0      	ldr	r3, [pc, #640]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80041ca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	801a      	strh	r2, [r3, #0]
			break;
 80041d4:	e163      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_DEV_DNS_4:
			*value = gVar.w5500Chip.netInfo.dns[3];
 80041d6:	4b9d      	ldr	r3, [pc, #628]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80041d8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80041dc:	b29a      	uxth	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	801a      	strh	r2, [r3, #0]
			break;
 80041e2:	e15c      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		/*NModbus TCP Server------------*/
	//	MB_HRA_MB_TCPS_TRANS_MAX,
		//socket - 0 & 1
		case MB_HRA_MB_TCPS_SOCK0_SRC_PORT:
			*value = gVar.server.sock[0].srcPort;
 80041e4:	4b99      	ldr	r3, [pc, #612]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80041e6:	f8b3 236e 	ldrh.w	r2, [r3, #878]	; 0x36e
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	801a      	strh	r2, [r3, #0]
			break;
 80041ee:	e156      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_MB_TCPS_SOCK0_KPALV_TIM:
			*value = gVar.server.sock[0].kpAlvTime;
 80041f0:	4b96      	ldr	r3, [pc, #600]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80041f2:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	801a      	strh	r2, [r3, #0]
			break;
 80041fa:	e150      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//			break;
		/*NModbus TCP Client------------*/

		case MB_HRA_MB_TCPC_DEST_IP_1:

			*value = gVar.client.sock[0].destIP[0];
 80041fc:	4b93      	ldr	r3, [pc, #588]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80041fe:	f893 338b 	ldrb.w	r3, [r3, #907]	; 0x38b
 8004202:	b29a      	uxth	r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	801a      	strh	r2, [r3, #0]
			break;
 8004208:	e149      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_TCPC_DEST_IP_2:
			*value = gVar.client.sock[0].destIP[1];
 800420a:	4b90      	ldr	r3, [pc, #576]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800420c:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8004210:	b29a      	uxth	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	801a      	strh	r2, [r3, #0]
			break;
 8004216:	e142      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_TCPC_DEST_IP_3:
			*value = gVar.client.sock[0].destIP[2];
 8004218:	4b8c      	ldr	r3, [pc, #560]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800421a:	f893 338d 	ldrb.w	r3, [r3, #909]	; 0x38d
 800421e:	b29a      	uxth	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	801a      	strh	r2, [r3, #0]
			break;
 8004224:	e13b      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_TCPC_DEST_IP_4:
			*value = gVar.client.sock[0].destIP[3];
 8004226:	4b89      	ldr	r3, [pc, #548]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004228:	f893 338e 	ldrb.w	r3, [r3, #910]	; 0x38e
 800422c:	b29a      	uxth	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	801a      	strh	r2, [r3, #0]
			break;
 8004232:	e134      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_TCPC_DEST_PORT:
			*value = gVar.client.sock[0].destPort;
 8004234:	4b85      	ldr	r3, [pc, #532]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004236:	f8b3 2670 	ldrh.w	r2, [r3, #1648]	; 0x670
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	801a      	strh	r2, [r3, #0]
			break;
 800423e:	e12e      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_TCPC_SOCK_KPALV_TIM:
			*value = gVar.client.sock[0].kpAlvTime;
 8004240:	4b82      	ldr	r3, [pc, #520]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004242:	f8b3 266c 	ldrh.w	r2, [r3, #1644]	; 0x66c
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	801a      	strh	r2, [r3, #0]
			break;
 800424a:	e128      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_TCPC_SOCK_CONN_MODE:
			*value = gVar.client.sock[0].connectMode;
 800424c:	4b7f      	ldr	r3, [pc, #508]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800424e:	f893 3386 	ldrb.w	r3, [r3, #902]	; 0x386
 8004252:	b29a      	uxth	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	801a      	strh	r2, [r3, #0]
			break;
 8004258:	e121      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_TCPC_TX_TIM_INTRVAL:

			*value = gVar.mbTCPClient.txTimIntrvl;
 800425a:	4a7c      	ldr	r2, [pc, #496]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800425c:	f641 1338 	movw	r3, #6456	; 0x1938
 8004260:	4413      	add	r3, r2
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	b29a      	uxth	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	801a      	strh	r2, [r3, #0]

			break;
 800426a:	e118      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
			/*NModbus Gateway------------*/
		case MB_HRA_MB_GW_TIMEOUT:
			*value = gVar.mbGateway.rplyTimer.timeout/10;
 800426c:	4a77      	ldr	r2, [pc, #476]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800426e:	f641 1368 	movw	r3, #6504	; 0x1968
 8004272:	4413      	add	r3, r2
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a76      	ldr	r2, [pc, #472]	; (8004450 <CB_MB_readHRCallback+0x9f0>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	08db      	lsrs	r3, r3, #3
 800427e:	b29a      	uxth	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	801a      	strh	r2, [r3, #0]
			break;
 8004284:	e10b      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
			/*NModbus RTU Serial------------*/
		case MB_HRA_MB_SERIAL_CONFIG:
			*value = gVar.mbSerial.serialConfigValue;
 8004286:	4b71      	ldr	r3, [pc, #452]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004288:	f8b3 268e 	ldrh.w	r2, [r3, #1678]	; 0x68e
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	801a      	strh	r2, [r3, #0]
			break;
 8004290:	e105      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_SERIAL_BAUD_RATE_MS16B:
			*value =  (uint16_t)((MBS_GetBaudRateUserDef())>>16);
 8004292:	f00e f9d1 	bl	8012638 <MBS_GetBaudRateUserDef>
 8004296:	4603      	mov	r3, r0
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	b29a      	uxth	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	801a      	strh	r2, [r3, #0]
			break;
 80042a0:	e0fd      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_SERIAL_BAUD_RATE_LS16B:
			*value =  (uint16_t)(MBS_GetBaudRateUserDef()&0x0000FFFF);
 80042a2:	f00e f9c9 	bl	8012638 <MBS_GetBaudRateUserDef>
 80042a6:	4603      	mov	r3, r0
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	801a      	strh	r2, [r3, #0]
			break;
 80042ae:	e0f6      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_SERIAl_PROTOCOL:
			*value = gVar.mbSerial.protocolTemp;
 80042b0:	4b66      	ldr	r3, [pc, #408]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80042b2:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	801a      	strh	r2, [r3, #0]
			break;
 80042bc:	e0ef      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		/*NModbus RTU Master------------*/
			/*Modbus RTU Master------------*/
		case MB_HRA_MB_MSTR_SLAVE_START_ADDR:
			*value = gVar.mbRTUMaster.custom.slvStartAddr;
 80042be:	4b63      	ldr	r3, [pc, #396]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80042c0:	f893 3971 	ldrb.w	r3, [r3, #2417]	; 0x971
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	801a      	strh	r2, [r3, #0]
			break;
 80042ca:	e0e8      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_MSTR_NUM_OF_SLAVES:
			*value = gVar.mbRTUMaster.custom.numOfSlv;
 80042cc:	4b5f      	ldr	r3, [pc, #380]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80042ce:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	801a      	strh	r2, [r3, #0]
			break;
 80042d8:	e0e1      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_MSTR_REPLY_TIMEOUT:
			*value = gVar.mbRTUMaster.replyTimer.timeout/10;
 80042da:	4b5c      	ldr	r3, [pc, #368]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80042dc:	f8d3 3960 	ldr.w	r3, [r3, #2400]	; 0x960
 80042e0:	4a5b      	ldr	r2, [pc, #364]	; (8004450 <CB_MB_readHRCallback+0x9f0>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	08db      	lsrs	r3, r3, #3
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	801a      	strh	r2, [r3, #0]
			break;
 80042ee:	e0d6      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_MSTR_PERIODIC_REQ_INTERVAL:
			*value = gVar.mbRTUMaster.custom.reTransTimer.timeout/10;
 80042f0:	4b56      	ldr	r3, [pc, #344]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80042f2:	f8d3 3988 	ldr.w	r3, [r3, #2440]	; 0x988
 80042f6:	4a56      	ldr	r2, [pc, #344]	; (8004450 <CB_MB_readHRCallback+0x9f0>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	08db      	lsrs	r3, r3, #3
 80042fe:	b29a      	uxth	r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	801a      	strh	r2, [r3, #0]
			break;
 8004304:	e0cb      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

	//	case MB_HRA_MB_MSTR_RETRY_MAX:
	//		break;
		/*NModbus RTU Slave------------*/
		case MB_HRA_MB_SLAVE_ADDRESS:
			*value = gVar.slvAddrTemp;
 8004306:	4b51      	ldr	r3, [pc, #324]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004308:	7a9b      	ldrb	r3, [r3, #10]
 800430a:	b29a      	uxth	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	801a      	strh	r2, [r3, #0]
			break;
 8004310:	e0c5      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_MB_SLAVE_CUST_RESP_TIMEOUT:
			*value = gVar.mbRTUSlave.custom.waitingTimer.timeout/10;
 8004312:	4b4e      	ldr	r3, [pc, #312]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004314:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8004318:	4a4d      	ldr	r2, [pc, #308]	; (8004450 <CB_MB_readHRCallback+0x9f0>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	08db      	lsrs	r3, r3, #3
 8004320:	b29a      	uxth	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	801a      	strh	r2, [r3, #0]
			break;
 8004326:	e0ba      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
	//		break;
	//	case MB_HRA_MB_GW_TIMEOUT:
	//		break;

		case MB_HRA_DEV_MODE:
			*value = gVar.devMode;
 8004328:	4b48      	ldr	r3, [pc, #288]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800432a:	7a1b      	ldrb	r3, [r3, #8]
 800432c:	b29a      	uxth	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	801a      	strh	r2, [r3, #0]
			break;
 8004332:	e0b4      	b.n	800449e <CB_MB_readHRCallback+0xa3e>


			/*Encoder----------------*/
		case MB_HRA_ENC_MODE:
			*value = gVar.dio.enc.configs.mode;
 8004334:	4a45      	ldr	r2, [pc, #276]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004336:	f242 4348 	movw	r3, #9288	; 0x2448
 800433a:	4413      	add	r3, r2
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	b29a      	uxth	r2, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	801a      	strh	r2, [r3, #0]
			break;
 8004344:	e0ab      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_ENC_QUAD_TRIG_MODE:
			*value = gVar.dio.enc.configs.quadrature.trigMode;
 8004346:	4a41      	ldr	r2, [pc, #260]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004348:	f242 4374 	movw	r3, #9332	; 0x2474
 800434c:	4413      	add	r3, r2
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b29a      	uxth	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	801a      	strh	r2, [r3, #0]
			break;
 8004356:	e0a2      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_ENC_CHA_TRIG_MODE:
			*value = gVar.dio.enc.configs.channelA.trigMode;
 8004358:	4a3c      	ldr	r2, [pc, #240]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800435a:	f242 438e 	movw	r3, #9358	; 0x248e
 800435e:	4413      	add	r3, r2
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	b29a      	uxth	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	801a      	strh	r2, [r3, #0]
			break;
 8004368:	e099      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_ENC_CHB_TRIG_MODE:
			*value = gVar.dio.enc.configs.channelB.trigMode;
 800436a:	4a38      	ldr	r2, [pc, #224]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800436c:	f242 439a 	movw	r3, #9370	; 0x249a
 8004370:	4413      	add	r3, r2
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b29a      	uxth	r2, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	801a      	strh	r2, [r3, #0]
			break;
 800437a:	e090      	b.n	800449e <CB_MB_readHRCallback+0xa3e>



			/*PID-------------*/
		case MB_HRA_PID1_KP:
			*value = (uint16_t)(gVar.pid1.kp*MB_VALUE_MULTIPLIER_100);
 800437c:	4a33      	ldr	r2, [pc, #204]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800437e:	f242 5318 	movw	r3, #9496	; 0x2518
 8004382:	4413      	add	r3, r2
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004454 <CB_MB_readHRCallback+0x9f4>
 800438c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004394:	ee17 3a90 	vmov	r3, s15
 8004398:	b29a      	uxth	r2, r3
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	801a      	strh	r2, [r3, #0]
			break;
 800439e:	e07e      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_PID1_KI:
			*value = (uint16_t)(gVar.pid1.ki*MB_VALUE_MULTIPLIER_100);
 80043a0:	4a2a      	ldr	r2, [pc, #168]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80043a2:	f242 531c 	movw	r3, #9500	; 0x251c
 80043a6:	4413      	add	r3, r2
 80043a8:	edd3 7a00 	vldr	s15, [r3]
 80043ac:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004454 <CB_MB_readHRCallback+0x9f4>
 80043b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b8:	ee17 3a90 	vmov	r3, s15
 80043bc:	b29a      	uxth	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	801a      	strh	r2, [r3, #0]
			break;
 80043c2:	e06c      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_PID1_KD:
			*value = (uint16_t)(gVar.pid1.kd*MB_VALUE_MULTIPLIER_100);
 80043c4:	4a21      	ldr	r2, [pc, #132]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80043c6:	f242 5320 	movw	r3, #9504	; 0x2520
 80043ca:	4413      	add	r3, r2
 80043cc:	edd3 7a00 	vldr	s15, [r3]
 80043d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004454 <CB_MB_readHRCallback+0x9f4>
 80043d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043dc:	ee17 3a90 	vmov	r3, s15
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	801a      	strh	r2, [r3, #0]
			break;
 80043e6:	e05a      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_PID1_I_OUT_LIMIT:
			*value = (uint16_t)gVar.pid1.output_i_max;
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 80043ea:	f242 533c 	movw	r3, #9532	; 0x253c
 80043ee:	4413      	add	r3, r2
 80043f0:	edd3 7a00 	vldr	s15, [r3]
 80043f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f8:	ee17 3a90 	vmov	r3, s15
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	801a      	strh	r2, [r3, #0]
			break;
 8004402:	e04c      	b.n	800449e <CB_MB_readHRCallback+0xa3e>

		case MB_HRA_PID2_KP:
			*value = (uint16_t)(gVar.pid2.kp*MB_VALUE_MULTIPLIER_100);
 8004404:	4a11      	ldr	r2, [pc, #68]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 8004406:	f242 5358 	movw	r3, #9560	; 0x2558
 800440a:	4413      	add	r3, r2
 800440c:	edd3 7a00 	vldr	s15, [r3]
 8004410:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004454 <CB_MB_readHRCallback+0x9f4>
 8004414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441c:	ee17 3a90 	vmov	r3, s15
 8004420:	b29a      	uxth	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	801a      	strh	r2, [r3, #0]
			break;
 8004426:	e03a      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_PID2_KI:
			*value = (uint16_t)(gVar.pid2.ki*MB_VALUE_MULTIPLIER_100);
 8004428:	4a08      	ldr	r2, [pc, #32]	; (800444c <CB_MB_readHRCallback+0x9ec>)
 800442a:	f242 535c 	movw	r3, #9564	; 0x255c
 800442e:	4413      	add	r3, r2
 8004430:	edd3 7a00 	vldr	s15, [r3]
 8004434:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004454 <CB_MB_readHRCallback+0x9f4>
 8004438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800443c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004440:	ee17 3a90 	vmov	r3, s15
 8004444:	b29a      	uxth	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	801a      	strh	r2, [r3, #0]
			break;
 800444a:	e028      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
 800444c:	24002050 	.word	0x24002050
 8004450:	cccccccd 	.word	0xcccccccd
 8004454:	42c80000 	.word	0x42c80000
		case MB_HRA_PID2_KD:
			*value = (uint16_t)(gVar.pid2.kd*MB_VALUE_MULTIPLIER_100);
 8004458:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <CB_MB_readHRCallback+0xa48>)
 800445a:	f242 5360 	movw	r3, #9568	; 0x2560
 800445e:	4413      	add	r3, r2
 8004460:	edd3 7a00 	vldr	s15, [r3]
 8004464:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80044ac <CB_MB_readHRCallback+0xa4c>
 8004468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004470:	ee17 3a90 	vmov	r3, s15
 8004474:	b29a      	uxth	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	801a      	strh	r2, [r3, #0]
			break;
 800447a:	e010      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
		case MB_HRA_PID2_I_OUT_LIMIT:
			*value = (uint16_t)gVar.pid2.output_i_max;
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <CB_MB_readHRCallback+0xa48>)
 800447e:	f242 537c 	movw	r3, #9596	; 0x257c
 8004482:	4413      	add	r3, r2
 8004484:	edd3 7a00 	vldr	s15, [r3]
 8004488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448c:	ee17 3a90 	vmov	r3, s15
 8004490:	b29a      	uxth	r2, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	801a      	strh	r2, [r3, #0]
			break;
 8004496:	e002      	b.n	800449e <CB_MB_readHRCallback+0xa3e>
//			if(address < MB_HRA_MAX){
//				errorStatus =	MB_REG_GetHR(address, value);
//			}else{
//				errorStatus = MB_ERROR;
//			}
			errorStatus = MB_ERROR;
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
			break;
 800449c:	bf00      	nop
	}

//	DBG_SPRINT_NL("%s %s: { %s: %d, %s: %d }",STR_MB, STR_REQ, STR_ADDRESS, address, STR_VALUE, *value);
	return errorStatus;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	24002050 	.word	0x24002050
 80044ac:	42c80000 	.word	0x42c80000

080044b0 <CB_MB_maskWriteHRCallbackS>:


uint8_t CB_MB_maskWriteHRCallbackS(MB_HRAddrEnum address, uint16_t andMask, uint16_t orMask){
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
 80044ba:	460b      	mov	r3, r1
 80044bc:	80bb      	strh	r3, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	807b      	strh	r3, [r7, #2]
	uint8_t errorStatus = MB_OK;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
	/*------Write your code here------*/


	return errorStatus;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <CB_MB_CUST_Build107RespAIDI>:
 * Regular read functions has lot checking and small function, thats why those make lot of overhead.
 * also those have time complexity. So that, this function is introduced
 * Purpose of this function is to reduce the overhead to build the response packet for 107 fc
 * */

uint8_t CB_MB_CUST_Build107RespAIDI(uint8_t *buff, uint16_t size){
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]

	uint16_t len = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 0; i < AI_MAX; i++){
 80044e4:	2300      	movs	r3, #0
 80044e6:	81bb      	strh	r3, [r7, #12]
 80044e8:	e031      	b.n	800454e <CB_MB_CUST_Build107RespAIDI+0x7a>
		if(len>= size) return len;
 80044ea:	89fa      	ldrh	r2, [r7, #14]
 80044ec:	887b      	ldrh	r3, [r7, #2]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <CB_MB_CUST_Build107RespAIDI+0x24>
 80044f2:	89fb      	ldrh	r3, [r7, #14]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e073      	b.n	80045e0 <CB_MB_CUST_Build107RespAIDI+0x10c>
		buff[len++] = (gVar.ai[i].rawValue>>8)&0xFF;
 80044f8:	89ba      	ldrh	r2, [r7, #12]
 80044fa:	493b      	ldr	r1, [pc, #236]	; (80045e8 <CB_MB_CUST_Build107RespAIDI+0x114>)
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	18ca      	adds	r2, r1, r3
 8004506:	f641 7312 	movw	r3, #7954	; 0x1f12
 800450a:	4413      	add	r3, r2
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29a      	uxth	r2, r3
 8004512:	89fb      	ldrh	r3, [r7, #14]
 8004514:	1c59      	adds	r1, r3, #1
 8004516:	81f9      	strh	r1, [r7, #14]
 8004518:	4619      	mov	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	440b      	add	r3, r1
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
		buff[len++] = gVar.ai[i].rawValue&0xFF;
 8004522:	89ba      	ldrh	r2, [r7, #12]
 8004524:	4930      	ldr	r1, [pc, #192]	; (80045e8 <CB_MB_CUST_Build107RespAIDI+0x114>)
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	18ca      	adds	r2, r1, r3
 8004530:	f641 7312 	movw	r3, #7954	; 0x1f12
 8004534:	4413      	add	r3, r2
 8004536:	881a      	ldrh	r2, [r3, #0]
 8004538:	89fb      	ldrh	r3, [r7, #14]
 800453a:	1c59      	adds	r1, r3, #1
 800453c:	81f9      	strh	r1, [r7, #14]
 800453e:	4619      	mov	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	440b      	add	r3, r1
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < AI_MAX; i++){
 8004548:	89bb      	ldrh	r3, [r7, #12]
 800454a:	3301      	adds	r3, #1
 800454c:	81bb      	strh	r3, [r7, #12]
 800454e:	89bb      	ldrh	r3, [r7, #12]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d9ca      	bls.n	80044ea <CB_MB_CUST_Build107RespAIDI+0x16>
	}
	buff[len++] = 0;	// set the device status byte, it is 9th byte
 8004554:	89fb      	ldrh	r3, [r7, #14]
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	81fa      	strh	r2, [r7, #14]
 800455a:	461a      	mov	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4413      	add	r3, r2
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
	if(len>= size) return len;
 8004564:	89fa      	ldrh	r2, [r7, #14]
 8004566:	887b      	ldrh	r3, [r7, #2]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <CB_MB_CUST_Build107RespAIDI+0x9e>
 800456c:	89fb      	ldrh	r3, [r7, #14]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	e036      	b.n	80045e0 <CB_MB_CUST_Build107RespAIDI+0x10c>

	//(gVar.dio.di[DI_1].config.port->IDR & gVar.dio.di[DI_1].config.pin) != (uint32_t)GPIO_PIN_RESET;
	buff[len] = 0;
 8004572:	89fb      	ldrh	r3, [r7, #14]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = DI_1; i < DI_MAX; i++){
 800457c:	2300      	movs	r3, #0
 800457e:	72fb      	strb	r3, [r7, #11]
 8004580:	e026      	b.n	80045d0 <CB_MB_CUST_Build107RespAIDI+0xfc>
		buff[len] |= HAL_GPIO_ReadPin(gVar.dio.di[i].config.port, gVar.dio.di[i].config.pin)<<(i-DI_1);
 8004582:	7afb      	ldrb	r3, [r7, #11]
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <CB_MB_CUST_Build107RespAIDI+0x114>)
 8004586:	3389      	adds	r3, #137	; 0x89
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	4413      	add	r3, r2
 800458c:	330c      	adds	r3, #12
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	7afb      	ldrb	r3, [r7, #11]
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <CB_MB_CUST_Build107RespAIDI+0x114>)
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	441a      	add	r2, r3
 8004598:	f242 2350 	movw	r3, #8784	; 0x2250
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	4619      	mov	r1, r3
 80045a2:	f017 fb9f 	bl	801bce4 <HAL_GPIO_ReadPin>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	fa02 f103 	lsl.w	r1, r2, r3
 80045b0:	89fb      	ldrh	r3, [r7, #14]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	b25a      	sxtb	r2, r3
 80045ba:	b24b      	sxtb	r3, r1
 80045bc:	4313      	orrs	r3, r2
 80045be:	b259      	sxtb	r1, r3
 80045c0:	89fb      	ldrh	r3, [r7, #14]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	b2ca      	uxtb	r2, r1
 80045c8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = DI_1; i < DI_MAX; i++){
 80045ca:	7afb      	ldrb	r3, [r7, #11]
 80045cc:	3301      	adds	r3, #1
 80045ce:	72fb      	strb	r3, [r7, #11]
 80045d0:	7afb      	ldrb	r3, [r7, #11]
 80045d2:	2b07      	cmp	r3, #7
 80045d4:	d9d5      	bls.n	8004582 <CB_MB_CUST_Build107RespAIDI+0xae>
	}
	return ++len;
 80045d6:	89fb      	ldrh	r3, [r7, #14]
 80045d8:	3301      	adds	r3, #1
 80045da:	81fb      	strh	r3, [r7, #14]
 80045dc:	89fb      	ldrh	r3, [r7, #14]
 80045de:	b2db      	uxtb	r3, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	24002050 	.word	0x24002050

080045ec <CB_MB_CUST_Process109ReqAODO>:
 * Callback the custom function code 109, to pack Analog outputs & digital output
 * Regular write functions has lot checking and small function, thats why those make lot of overhead.
 * also those have time complexity. So that, this function is introduced
 * Purpose of this function is to reduce the overhead to write Analog outputs & digital output from the packet for 109 fc
 * */
uint8_t CB_MB_CUST_Process109ReqAODO(uint8_t *buff, uint16_t size){
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]
	/*
	 * AO-1&2 have PID so we have to set the value to mbValue parameter, but AO-3&4 don't have PID so we directly set the value to value parameter
	*/
	if(size <= 7) return size;
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	2b07      	cmp	r3, #7
 80045fc:	d802      	bhi.n	8004604 <CB_MB_CUST_Process109ReqAODO+0x18>
 80045fe:	887b      	ldrh	r3, [r7, #2]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e076      	b.n	80046f2 <CB_MB_CUST_Process109ReqAODO+0x106>
	for(uint8_t i = AO_1; i < AO_MAX; i++){
 8004604:	2300      	movs	r3, #0
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	e032      	b.n	8004670 <CB_MB_CUST_Process109ReqAODO+0x84>
		uint16_t aoValue = ((uint16_t)buff[(2*i)]<<8 | (uint16_t)buff[(2*i+1)]);
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	461a      	mov	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	b21a      	sxth	r2, r3
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	3301      	adds	r3, #1
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	440b      	add	r3, r1
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b21b      	sxth	r3, r3
 8004628:	4313      	orrs	r3, r2
 800462a:	b21b      	sxth	r3, r3
 800462c:	817b      	strh	r3, [r7, #10]
		if(aoValue <= AO_PWM_RESOLUTION) {
 800462e:	897b      	ldrh	r3, [r7, #10]
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004634:	d219      	bcs.n	800466a <CB_MB_CUST_Process109ReqAODO+0x7e>
			if (i<=AO_2) gVar.ao[i].mbValue  = aoValue;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d80b      	bhi.n	8004654 <CB_MB_CUST_Process109ReqAODO+0x68>
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	4a2f      	ldr	r2, [pc, #188]	; (80046fc <CB_MB_CUST_Process109ReqAODO+0x110>)
 8004640:	212c      	movs	r1, #44	; 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	441a      	add	r2, r3
 8004648:	f641 635a 	movw	r3, #7770	; 0x1e5a
 800464c:	4413      	add	r3, r2
 800464e:	897a      	ldrh	r2, [r7, #10]
 8004650:	801a      	strh	r2, [r3, #0]
 8004652:	e00a      	b.n	800466a <CB_MB_CUST_Process109ReqAODO+0x7e>
			else  gVar.ao[i].value = aoValue;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	4a29      	ldr	r2, [pc, #164]	; (80046fc <CB_MB_CUST_Process109ReqAODO+0x110>)
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	441a      	add	r2, r3
 8004660:	f641 635c 	movw	r3, #7772	; 0x1e5c
 8004664:	4413      	add	r3, r2
 8004666:	897a      	ldrh	r2, [r7, #10]
 8004668:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = AO_1; i < AO_MAX; i++){
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	3301      	adds	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d9c9      	bls.n	800460a <CB_MB_CUST_Process109ReqAODO+0x1e>
		}
	}
	buff[8] = 0;// set the device status byte, it is 9th byte(len = 9-1 = 8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3308      	adds	r3, #8
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
	uint8_t doByteIndex = 9;   // index 9 byte is for digital outputs
 800467e:	2309      	movs	r3, #9
 8004680:	737b      	strb	r3, [r7, #13]
	if(size <= doByteIndex) return doByteIndex;
 8004682:	7b7b      	ldrb	r3, [r7, #13]
 8004684:	b29b      	uxth	r3, r3
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	429a      	cmp	r2, r3
 800468a:	d801      	bhi.n	8004690 <CB_MB_CUST_Process109ReqAODO+0xa4>
 800468c:	7b7b      	ldrb	r3, [r7, #13]
 800468e:	e030      	b.n	80046f2 <CB_MB_CUST_Process109ReqAODO+0x106>
	for(uint8_t i = DO_1; i < DO_MAX; i++){
 8004690:	2300      	movs	r3, #0
 8004692:	73bb      	strb	r3, [r7, #14]
 8004694:	e026      	b.n	80046e4 <CB_MB_CUST_Process109ReqAODO+0xf8>
		gVar.dio.dout[i].state = ((buff[doByteIndex]>>(i-DO_1))&0x01);
 8004696:	7b7b      	ldrb	r3, [r7, #13]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	4413      	add	r3, r2
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	7bbb      	ldrb	r3, [r7, #14]
 80046a2:	fa42 f303 	asr.w	r3, r2, r3
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	f002 0201 	and.w	r2, r2, #1
 80046ae:	b2d0      	uxtb	r0, r2
 80046b0:	4a12      	ldr	r2, [pc, #72]	; (80046fc <CB_MB_CUST_Process109ReqAODO+0x110>)
 80046b2:	2164      	movs	r1, #100	; 0x64
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	441a      	add	r2, r3
 80046ba:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 80046be:	4413      	add	r3, r2
 80046c0:	4602      	mov	r2, r0
 80046c2:	701a      	strb	r2, [r3, #0]
		DO_Write(&gVar.dio.dout[i]);
 80046c4:	7bbb      	ldrb	r3, [r7, #14]
 80046c6:	2264      	movs	r2, #100	; 0x64
 80046c8:	fb02 f203 	mul.w	r2, r2, r3
 80046cc:	f641 73e8 	movw	r3, #8168	; 0x1fe8
 80046d0:	4413      	add	r3, r2
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <CB_MB_CUST_Process109ReqAODO+0x110>)
 80046d4:	4413      	add	r3, r2
 80046d6:	3304      	adds	r3, #4
 80046d8:	4618      	mov	r0, r3
 80046da:	f009 ff8d 	bl	800e5f8 <DO_Write>
	for(uint8_t i = DO_1; i < DO_MAX; i++){
 80046de:	7bbb      	ldrb	r3, [r7, #14]
 80046e0:	3301      	adds	r3, #1
 80046e2:	73bb      	strb	r3, [r7, #14]
 80046e4:	7bbb      	ldrb	r3, [r7, #14]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d9d5      	bls.n	8004696 <CB_MB_CUST_Process109ReqAODO+0xaa>
	}

	return ++doByteIndex;
 80046ea:	7b7b      	ldrb	r3, [r7, #13]
 80046ec:	3301      	adds	r3, #1
 80046ee:	737b      	strb	r3, [r7, #13]
 80046f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	24002050 	.word	0x24002050

08004700 <CB_MB_CmpltTxCallback>:


uint8_t CB_MB_CmpltTxCallback(MBS_Serial *mbSerial, uint16_t address, uint16_t value){
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	807b      	strh	r3, [r7, #2]
 800470c:	4613      	mov	r3, r2
 800470e:	803b      	strh	r3, [r7, #0]
	uint8_t errorStatus = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]


		switch (mbSerial->mode) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d00b      	beq.n	8004734 <CB_MB_CmpltTxCallback+0x34>
 800471c:	2b03      	cmp	r3, #3
 800471e:	dc63      	bgt.n	80047e8 <CB_MB_CmpltTxCallback+0xe8>
 8004720:	2b01      	cmp	r3, #1
 8004722:	d063      	beq.n	80047ec <CB_MB_CmpltTxCallback+0xec>
 8004724:	2b02      	cmp	r3, #2
 8004726:	d000      	beq.n	800472a <CB_MB_CmpltTxCallback+0x2a>
				}
//				DBG_SPRINT("G_CB: %d",gVar.mbGateway.custom.funCode);

				break;
			default:
				break;
 8004728:	e05e      	b.n	80047e8 <CB_MB_CmpltTxCallback+0xe8>
				gVar.mbRTUSlave.custom.numOfSlv = 0;
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 800472c:	2200      	movs	r2, #0
 800472e:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
				break;
 8004732:	e05e      	b.n	80047f2 <CB_MB_CmpltTxCallback+0xf2>
				if(MB_CUST_CheckCFunCode(gVar.mbGateway.custom.funCode)>0){
 8004734:	4a34      	ldr	r2, [pc, #208]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 8004736:	f641 1398 	movw	r3, #6552	; 0x1998
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f00a fd62 	bl	800f208 <MB_CUST_CheckCFunCode>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d02f      	beq.n	80047aa <CB_MB_CmpltTxCallback+0xaa>
					gVar.mbGateway.custom.slvStartAddr = gVar.mbSerial.txBuff[MB_FC_INDEX+1];
 800474a:	4b2f      	ldr	r3, [pc, #188]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 800474c:	f893 17ac 	ldrb.w	r1, [r3, #1964]	; 0x7ac
 8004750:	4a2d      	ldr	r2, [pc, #180]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 8004752:	f641 1399 	movw	r3, #6553	; 0x1999
 8004756:	4413      	add	r3, r2
 8004758:	460a      	mov	r2, r1
 800475a:	701a      	strb	r2, [r3, #0]
					gVar.mbGateway.custom.numOfSlv = gVar.mbSerial.txBuff[MB_FC_INDEX+2];
 800475c:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 800475e:	f893 17ad 	ldrb.w	r1, [r3, #1965]	; 0x7ad
 8004762:	4a29      	ldr	r2, [pc, #164]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 8004764:	f641 139a 	movw	r3, #6554	; 0x199a
 8004768:	4413      	add	r3, r2
 800476a:	460a      	mov	r2, r1
 800476c:	701a      	strb	r2, [r3, #0]
					gVar.mbGateway.txBuffSize = 0;
 800476e:	4a26      	ldr	r2, [pc, #152]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 8004770:	f641 634c 	movw	r3, #7756	; 0x1e4c
 8004774:	4413      	add	r3, r2
 8004776:	2200      	movs	r2, #0
 8004778:	801a      	strh	r2, [r3, #0]
					gVar.mbGateway.isReqSent = 1;
 800477a:	4a23      	ldr	r2, [pc, #140]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 800477c:	f641 1371 	movw	r3, #6513	; 0x1971
 8004780:	4413      	add	r3, r2
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
					gVar.mbGateway.isBusy = 0;
 8004786:	4a20      	ldr	r2, [pc, #128]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 8004788:	f641 1370 	movw	r3, #6512	; 0x1970
 800478c:	4413      	add	r3, r2
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
					gVar.mbSerial.txBuffSize = 0;
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 8004794:	2200      	movs	r2, #0
 8004796:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac
					gVar.mbSerial.isBusy = 0;
 800479a:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 800479c:	2200      	movs	r2, #0
 800479e:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
					MBG_StartTimeout(&gVar.mbGateway.rplyTimer);
 80047a2:	481a      	ldr	r0, [pc, #104]	; (800480c <CB_MB_CmpltTxCallback+0x10c>)
 80047a4:	f00b faa4 	bl	800fcf0 <MBG_StartTimeout>
				break;
 80047a8:	e022      	b.n	80047f0 <CB_MB_CmpltTxCallback+0xf0>
					else if(MBTCP_isFunCodeValid(gVar.mbGateway.custom.funCode)>0U){
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 80047ac:	f641 1398 	movw	r3, #6552	; 0x1998
 80047b0:	4413      	add	r3, r2
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f00e facb 	bl	8012d50 <MBTCP_isFunCodeValid>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d117      	bne.n	80047f0 <CB_MB_CmpltTxCallback+0xf0>
					gVar.mbGateway.isReqSent = 1;
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 80047c2:	f641 1371 	movw	r3, #6513	; 0x1971
 80047c6:	4413      	add	r3, r2
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
					gVar.mbGateway.isBusy = 0;
 80047cc:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 80047ce:	f641 1370 	movw	r3, #6512	; 0x1970
 80047d2:	4413      	add	r3, r2
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
					gVar.mbSerial.isBusy = 0;
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
					MBG_StartTimeout(&gVar.mbGateway.rplyTimer);
 80047e0:	480a      	ldr	r0, [pc, #40]	; (800480c <CB_MB_CmpltTxCallback+0x10c>)
 80047e2:	f00b fa85 	bl	800fcf0 <MBG_StartTimeout>
				break;
 80047e6:	e003      	b.n	80047f0 <CB_MB_CmpltTxCallback+0xf0>
				break;
 80047e8:	bf00      	nop
 80047ea:	e002      	b.n	80047f2 <CB_MB_CmpltTxCallback+0xf2>
				break;
 80047ec:	bf00      	nop
 80047ee:	e000      	b.n	80047f2 <CB_MB_CmpltTxCallback+0xf2>
				break;
 80047f0:	bf00      	nop
		}
	/*------Write your code here------*/
	if(gVar.restartFlage > 0){
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <CB_MB_CmpltTxCallback+0x108>)
 80047f4:	7a5b      	ldrb	r3, [r3, #9]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <CB_MB_CmpltTxCallback+0xfe>
		RestartMCU();
 80047fa:	f006 fd25 	bl	800b248 <RestartMCU>
	}
	return errorStatus;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	24002050 	.word	0x24002050
 800480c:	240039a8 	.word	0x240039a8

08004810 <CB_MB_CmoltRxCallback>:

uint8_t CB_MB_CmoltRxCallback(MBS_Serial *mbSerial){
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

	TH_MBSerial();
 8004818:	f005 ff22 	bl	800a660 <TH_MBSerial>
//
//			break;
//		default:
//			break;
//	}
	return 0;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <CB_MB_diagSubFuncCallback>:

uint8_t CB_MB_diagSubFuncCallback(uint16_t subFuncCode, uint16_t value){
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	4603      	mov	r3, r0
 800482e:	460a      	mov	r2, r1
 8004830:	80fb      	strh	r3, [r7, #6]
 8004832:	4613      	mov	r3, r2
 8004834:	80bb      	strh	r3, [r7, #4]
	uint8_t errorStatus = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
	/*------Write your code here------*/

	return errorStatus;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <CB_MB_ChangSACallback>:



uint8_t CB_MB_ChangSACallback(uint8_t slaveAddress){
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
//	uint8_t errorStatus = 0U;
	/*------Write your code here------*/
	gVar.mbRTUSlave.slave_address = slaveAddress;
 8004852:	4a09      	ldr	r2, [pc, #36]	; (8004878 <CB_MB_ChangSACallback+0x30>)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	f882 38c8 	strb.w	r3, [r2, #2248]	; 0x8c8
	return gVar.mbRTUSlave.slave_address == slaveAddress;
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <CB_MB_ChangSACallback+0x30>)
 800485c:	f893 38c8 	ldrb.w	r3, [r3, #2248]	; 0x8c8
 8004860:	79fa      	ldrb	r2, [r7, #7]
 8004862:	429a      	cmp	r2, r3
 8004864:	bf0c      	ite	eq
 8004866:	2301      	moveq	r3, #1
 8004868:	2300      	movne	r3, #0
 800486a:	b2db      	uxtb	r3, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	24002050 	.word	0x24002050

0800487c <FS_Write>:
  * @param startAddress: start address of the flash storage
  * @param data: pointer to a data array
  * @param noOfData: number of data in the data array
  * @retval returns error value while writing data in Flash memory
  */
uint32_t FS_Write(uint32_t *data){
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	//uint32_t currentPageStartAdress = FS_GetActivePage();
	uint32_t _startAddress = FS_PAGE1_ADDRESS;
 8004884:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <FS_Write+0x74>)
 8004886:	617b      	str	r3, [r7, #20]
	flasEraseInit.TypeErase = FLASH_TY;
	flasEraseInit.PageAddress = FS_PAGE1_ADDRESS;
	flasEraseInit.NbPages = 1U;
*/

	HAL_FLASH_Unlock();
 8004888:	f016 fe12 	bl	801b4b0 <HAL_FLASH_Unlock>
	/*--------- erase the active page -----------*/
	if(HAL_FLASHEx_Erase(&flasEraseInit, &pageError) != HAL_OK){
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	4619      	mov	r1, r3
 8004892:	4818      	ldr	r0, [pc, #96]	; (80048f4 <FS_Write+0x78>)
 8004894:	f016 fea8 	bl	801b5e8 <HAL_FLASHEx_Erase>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <FS_Write+0x2a>
		return HAL_FLASH_GetError();
 800489e:	f016 fe41 	bl	801b524 <HAL_FLASH_GetError>
 80048a2:	4603      	mov	r3, r0
 80048a4:	e020      	b.n	80048e8 <FS_Write+0x6c>
	}

	for(uint16_t address = FS_PAGE_START; address < FS_MAX_STORAGE_SIZE; address++){
 80048a6:	2300      	movs	r3, #0
 80048a8:	827b      	strh	r3, [r7, #18]
 80048aa:	e017      	b.n	80048dc <FS_Write+0x60>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, _startAddress, data[address]) == HAL_OK){			// write the inactive page, now it is active page
 80048ac:	8a7b      	ldrh	r3, [r7, #18]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4413      	add	r3, r2
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6979      	ldr	r1, [r7, #20]
 80048ba:	2001      	movs	r0, #1
 80048bc:	f016 fd8a 	bl	801b3d4 <HAL_FLASH_Program>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <FS_Write+0x52>
			_startAddress += FS_DATA_BYTE_SIZE;  								// use startAddress += 2 for half word and 8 for double word
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	3304      	adds	r3, #4
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e003      	b.n	80048d6 <FS_Write+0x5a>
		 }else{
		   /* Error occurred while writing data in Flash memory*/
			 return HAL_FLASH_GetError ();
 80048ce:	f016 fe29 	bl	801b524 <HAL_FLASH_GetError>
 80048d2:	4603      	mov	r3, r0
 80048d4:	e008      	b.n	80048e8 <FS_Write+0x6c>
	for(uint16_t address = FS_PAGE_START; address < FS_MAX_STORAGE_SIZE; address++){
 80048d6:	8a7b      	ldrh	r3, [r7, #18]
 80048d8:	3301      	adds	r3, #1
 80048da:	827b      	strh	r3, [r7, #18]
 80048dc:	8a7b      	ldrh	r3, [r7, #18]
 80048de:	2b91      	cmp	r3, #145	; 0x91
 80048e0:	d9e4      	bls.n	80048ac <FS_Write+0x30>
		 }
	}


	HAL_FLASH_Lock();
 80048e2:	f016 fe07 	bl	801b4f4 <HAL_FLASH_Lock>
	return 0;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	0803f000 	.word	0x0803f000
 80048f4:	24000724 	.word	0x24000724

080048f8 <FS_WriteIntNum>:
  * @brief stores sngle integer number to the flash
  * @param startAddress: start address of the flash storage
  * @param number: floating point number to be stored
  * @retval returns error value while writing data in Flash memory
  */
uint32_t FS_WriteIntNum (uint32_t address, uint32_t number){										// set the floating point number to the FS_FloatBytes union
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
	if(address >= FS_PAGE_START && address < FS_MAX_STORAGE_SIZE){
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b91      	cmp	r3, #145	; 0x91
 8004906:	d81a      	bhi.n	800493e <FS_WriteIntNum+0x46>
		uint32_t lastValue = FS_Buffer[address];
 8004908:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <FS_WriteIntNum+0x50>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004910:	60fb      	str	r3, [r7, #12]
		FS_Buffer[address] = number;
 8004912:	490d      	ldr	r1, [pc, #52]	; (8004948 <FS_WriteIntNum+0x50>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint8_t error = FS_Write (FS_Buffer);
 800491c:	480a      	ldr	r0, [pc, #40]	; (8004948 <FS_WriteIntNum+0x50>)
 800491e:	f7ff ffad 	bl	800487c <FS_Write>
 8004922:	4603      	mov	r3, r0
 8004924:	72fb      	strb	r3, [r7, #11]
		if(error != HAL_FLASH_ERROR_NONE){		// store the bytes for floating point number
 8004926:	7afb      	ldrb	r3, [r7, #11]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d006      	beq.n	800493a <FS_WriteIntNum+0x42>
			FS_Buffer[address] = lastValue;
 800492c:	4906      	ldr	r1, [pc, #24]	; (8004948 <FS_WriteIntNum+0x50>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			return error;
 8004936:	7afb      	ldrb	r3, [r7, #11]
 8004938:	e002      	b.n	8004940 <FS_WriteIntNum+0x48>
		}else{
			return error;
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	e000      	b.n	8004940 <FS_WriteIntNum+0x48>
		}
	}else{
		/*// todo: it is needed but our mcu is not supported
		return HAL_FLASH_ERROR_PROG;
		*/
		return 0;
 800493e:	2300      	movs	r3, #0
	}

}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	240004dc 	.word	0x240004dc

0800494c <FSExt_Init>:

/**
  * @brief Initialize flash storage
  * @retval 0 = error, 1 = no error
  */
uint8_t FSExt_Init(SPI_HandleTypeDef *spi, FSExt_dataType _dataType){
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
	w25q = W25Q_GetInstance();
 8004958:	f009 f872 	bl	800da40 <W25Q_GetInstance>
 800495c:	4603      	mov	r3, r0
 800495e:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <FSExt_Init+0x44>)
 8004960:	6013      	str	r3, [r2, #0]
	dataType = _dataType;
 8004962:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <FSExt_Init+0x48>)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	7013      	strb	r3, [r2, #0]
	buffStatus.count = 0;
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <FSExt_Init+0x4c>)
 800496a:	2200      	movs	r2, #0
 800496c:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	 if(W25Q_Init(W25Q64, W25QXX_INTERFACE_SPI, W25QXX_BOOL_FALSE)==0){
 8004970:	2200      	movs	r2, #0
 8004972:	2100      	movs	r1, #0
 8004974:	f64e 7016 	movw	r0, #61206	; 0xef16
 8004978:	f008 ff82 	bl	800d880 <W25Q_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <FSExt_Init+0x3a>
		 return 1;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <FSExt_Init+0x3c>
	 }else{
		 return 0;
 8004986:	2300      	movs	r3, #0
	 }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	24004f18 	.word	0x24004f18
 8004994:	2400085e 	.word	0x2400085e
 8004998:	24000738 	.word	0x24000738

0800499c <FSExt_Download>:

/**
  * @brief Download buffer from flash storage
  * @retval 0 = error, 1 = no error
  */
uint8_t FSExt_Download(void){
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
	uint8_t status = FSExt_Read(FSEXT_START_ADDRES, FSExt_Buffer, FSEXT_MAX_STORAGE_SIZE);
 80049a2:	2292      	movs	r2, #146	; 0x92
 80049a4:	4909      	ldr	r1, [pc, #36]	; (80049cc <FSExt_Download+0x30>)
 80049a6:	2000      	movs	r0, #0
 80049a8:	f000 f8d6 	bl	8004b58 <FSExt_Read>
 80049ac:	4603      	mov	r3, r0
 80049ae:	71fb      	strb	r3, [r7, #7]

	if(status <= 0) memset(FSExt_Buffer, 0xFF, FSEXT_MAX_STORAGE_SIZE*sizeof(FSExt_Buffer[0]));
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <FSExt_Download+0x26>
 80049b6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80049ba:	21ff      	movs	r1, #255	; 0xff
 80049bc:	4803      	ldr	r0, [pc, #12]	; (80049cc <FSExt_Download+0x30>)
 80049be:	f021 feb9 	bl	8026734 <memset>
	return status;
 80049c2:	79fb      	ldrb	r3, [r7, #7]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	24004f1c 	.word	0x24004f1c

080049d0 <FSExt_WriteIntNum>:

/**
  * @brief write integer number to the flash
  * @retval 0 = error, 1 = no error
  */
uint8_t FSExt_WriteIntNum(uint16_t address, uint32_t data){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	6039      	str	r1, [r7, #0]
 80049da:	80fb      	strh	r3, [r7, #6]

#ifdef FSEXT_DIRECT_ACCESS_FLASH
	return FSExt_Write(address, &data, 1);
#else
	 FSExt_Buffer[address] = data;
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	4906      	ldr	r1, [pc, #24]	; (80049f8 <FSExt_WriteIntNum+0x28>)
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 FSExt_SetChngFlag(address);
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f95b 	bl	8004ca4 <FSExt_SetChngFlag>
	 return 1;
 80049ee:	2301      	movs	r3, #1
#endif
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	24004f1c 	.word	0x24004f1c

080049fc <FSExt_ReadIntNum>:

/**
  * @brief read integer number from the flash
  * @retval 0 = error, 1 = no error
  */
uint32_t FSExt_ReadIntNum(uint16_t address){
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	80fb      	strh	r3, [r7, #6]
	uint32_t data = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
#ifdef FSEXT_DIRECT_ACCESS_FLASH
	FSExt_Read(address, &data,1);
#else
	data = FSExt_Buffer[address];
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <FSExt_ReadIntNum+0x28>)
 8004a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a12:	60fb      	str	r3, [r7, #12]
#endif
	return data;
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	24004f1c 	.word	0x24004f1c

08004a28 <FSExt_Write>:
  * @param startAddr: data address
  * @param data: data buffer
  * @param quantity: number off data
  * @retval 0 = error, 1 = no error
  */
uint8_t FSExt_Write(uint16_t startAddr, uint32_t *data, uint16_t quantity){
 8004a28:	b5b0      	push	{r4, r5, r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	6039      	str	r1, [r7, #0]
 8004a32:	80fb      	strh	r3, [r7, #6]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80bb      	strh	r3, [r7, #4]
 8004a38:	466b      	mov	r3, sp
 8004a3a:	461d      	mov	r5, r3
	if(quantity > FSEXT_MAX_STORAGE_SIZE || (startAddr+quantity) > FSEXT_MAX_STORAGE_SIZE) return 0;
 8004a3c:	88bb      	ldrh	r3, [r7, #4]
 8004a3e:	2b92      	cmp	r3, #146	; 0x92
 8004a40:	d804      	bhi.n	8004a4c <FSExt_Write+0x24>
 8004a42:	88fa      	ldrh	r2, [r7, #6]
 8004a44:	88bb      	ldrh	r3, [r7, #4]
 8004a46:	4413      	add	r3, r2
 8004a48:	2b92      	cmp	r3, #146	; 0x92
 8004a4a:	dd01      	ble.n	8004a50 <FSExt_Write+0x28>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e075      	b.n	8004b3c <FSExt_Write+0x114>
	uint8_t bytes[(quantity*dataType)];
 8004a50:	88bb      	ldrh	r3, [r7, #4]
 8004a52:	4a3d      	ldr	r2, [pc, #244]	; (8004b48 <FSExt_Write+0x120>)
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	fb02 f403 	mul.w	r4, r2, r3
 8004a5a:	1e63      	subs	r3, r4, #1
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	4623      	mov	r3, r4
 8004a60:	4618      	mov	r0, r3
 8004a62:	f04f 0100 	mov.w	r1, #0
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	00cb      	lsls	r3, r1, #3
 8004a70:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004a74:	00c2      	lsls	r2, r0, #3
 8004a76:	4623      	mov	r3, r4
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	00cb      	lsls	r3, r1, #3
 8004a88:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004a8c:	00c2      	lsls	r2, r0, #3
 8004a8e:	4623      	mov	r3, r4
 8004a90:	3307      	adds	r3, #7
 8004a92:	08db      	lsrs	r3, r3, #3
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	ebad 0d03 	sub.w	sp, sp, r3
 8004a9a:	466b      	mov	r3, sp
 8004a9c:	3300      	adds	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
	uint32_t size =0 ;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
	uint32_t index = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
	/*Convert u32 to u8*/
	while(index < quantity){
 8004aa8:	e02c      	b.n	8004b04 <FSExt_Write+0xdc>
		do{
			bytes[size] = (uint8_t)((data[index]>>(dataType-1-size%dataType)*8)&0x000000FF);
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <FSExt_Write+0x120>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	461c      	mov	r4, r3
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <FSExt_Write+0x120>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ac6:	fb02 f200 	mul.w	r2, r2, r0
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	1ae3      	subs	r3, r4, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ad6:	b2d9      	uxtb	r1, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	4413      	add	r3, r2
 8004ade:	460a      	mov	r2, r1
 8004ae0:	701a      	strb	r2, [r3, #0]
			size++;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	61bb      	str	r3, [r7, #24]
		}while(size%dataType != 0 );
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <FSExt_Write+0x120>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004af4:	fb02 f201 	mul.w	r2, r2, r1
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1d5      	bne.n	8004aaa <FSExt_Write+0x82>
		index++;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3301      	adds	r3, #1
 8004b02:	61fb      	str	r3, [r7, #28]
	while(index < quantity){
 8004b04:	88bb      	ldrh	r3, [r7, #4]
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d3ce      	bcc.n	8004aaa <FSExt_Write+0x82>
	}

	/*Calculate actual memory address*/
	uint32_t address = (uint32_t)((startAddr*dataType) | FSEXT_ADDRESS_OFFSET);
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <FSExt_Write+0x120>)
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	fb02 f203 	mul.w	r2, r2, r3
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <FSExt_Write+0x124>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

	/*Write data*/
	if(w25qxx_write(w25q, address, bytes, size) !=0) {
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <FSExt_Write+0x128>)
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	f011 fa5b 	bl	8015fe0 <w25qxx_write>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <FSExt_Write+0x112>
		DBG_SPRINT_NL("Error: Flash write failed");
 8004b30:	4808      	ldr	r0, [pc, #32]	; (8004b54 <FSExt_Write+0x12c>)
 8004b32:	f009 f887 	bl	800dc44 <DBG_SPRINT_NL>
		return 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <FSExt_Write+0x114>
	}else{
		return 1;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	46ad      	mov	sp, r5
	}

}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bdb0      	pop	{r4, r5, r7, pc}
 8004b46:	bf00      	nop
 8004b48:	2400085e 	.word	0x2400085e
 8004b4c:	007ff000 	.word	0x007ff000
 8004b50:	24004f18 	.word	0x24004f18
 8004b54:	08029e80 	.word	0x08029e80

08004b58 <FSExt_Read>:
  * @param startAddr: data address
  * @param data: data buffer
  * @param quantity: number off data
  * @retval 0 = error, 1 = no error
  */
uint8_t FSExt_Read(uint16_t startAddr, uint32_t *data, uint16_t quantity){
 8004b58:	b5b0      	push	{r4, r5, r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	6039      	str	r1, [r7, #0]
 8004b62:	80fb      	strh	r3, [r7, #6]
 8004b64:	4613      	mov	r3, r2
 8004b66:	80bb      	strh	r3, [r7, #4]
 8004b68:	466b      	mov	r3, sp
 8004b6a:	461d      	mov	r5, r3
	/*Check quantity & address*/
	if(quantity > FSEXT_MAX_STORAGE_SIZE || (startAddr+quantity) > FSEXT_MAX_STORAGE_SIZE) return 0;
 8004b6c:	88bb      	ldrh	r3, [r7, #4]
 8004b6e:	2b92      	cmp	r3, #146	; 0x92
 8004b70:	d804      	bhi.n	8004b7c <FSExt_Read+0x24>
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	88bb      	ldrh	r3, [r7, #4]
 8004b76:	4413      	add	r3, r2
 8004b78:	2b92      	cmp	r3, #146	; 0x92
 8004b7a:	dd01      	ble.n	8004b80 <FSExt_Read+0x28>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e06f      	b.n	8004c60 <FSExt_Read+0x108>
	uint16_t size = (quantity*dataType) ;
 8004b80:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <FSExt_Read+0x114>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	88ba      	ldrh	r2, [r7, #4]
 8004b88:	fb12 f303 	smulbb	r3, r2, r3
 8004b8c:	83fb      	strh	r3, [r7, #30]
	uint8_t bytes[size];
 8004b8e:	8bfc      	ldrh	r4, [r7, #30]
 8004b90:	4623      	mov	r3, r4
 8004b92:	3b01      	subs	r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	b2a0      	uxth	r0, r4
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	00cb      	lsls	r3, r1, #3
 8004ba6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004baa:	00c2      	lsls	r2, r0, #3
 8004bac:	b2a0      	uxth	r0, r4
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	00cb      	lsls	r3, r1, #3
 8004bbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004bc0:	00c2      	lsls	r2, r0, #3
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	3307      	adds	r3, #7
 8004bc6:	08db      	lsrs	r3, r3, #3
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	ebad 0d03 	sub.w	sp, sp, r3
 8004bce:	466b      	mov	r3, sp
 8004bd0:	3300      	adds	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

	/*Calculate actual memory address*/
	uint32_t address = (uint32_t)((startAddr*dataType) | FSEXT_ADDRESS_OFFSET);
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	4a25      	ldr	r2, [pc, #148]	; (8004c6c <FSExt_Read+0x114>)
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	fb02 f203 	mul.w	r2, r2, r3
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <FSExt_Read+0x118>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]

	/*Read data*/
	uint8_t status = w25qxx_read(w25q, address, bytes, size);
 8004be4:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <FSExt_Read+0x11c>)
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	8bfb      	ldrh	r3, [r7, #30]
 8004bec:	6939      	ldr	r1, [r7, #16]
 8004bee:	f00f fe41 	bl	8014874 <w25qxx_read>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	73fb      	strb	r3, [r7, #15]

	/*Convert u8 to u32*/
	if(status==0){
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d12d      	bne.n	8004c58 <FSExt_Read+0x100>
		uint32_t j = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	623b      	str	r3, [r7, #32]
		for(uint32_t i = 0; i < quantity; i ++){
 8004c00:	2300      	movs	r3, #0
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
 8004c04:	e022      	b.n	8004c4c <FSExt_Read+0xf4>
			data[i] = (uint32_t)((bytes[j]<<24) | (bytes[j+1]<<16) | (bytes[j+2]<<8) | (bytes[j+3]));
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	061a      	lsls	r2, r3, #24
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	3301      	adds	r3, #1
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	3302      	adds	r3, #2
 8004c20:	6979      	ldr	r1, [r7, #20]
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	4313      	orrs	r3, r2
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	3203      	adds	r2, #3
 8004c2c:	6979      	ldr	r1, [r7, #20]
 8004c2e:	5c8a      	ldrb	r2, [r1, r2]
 8004c30:	ea43 0102 	orr.w	r1, r3, r2
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	460a      	mov	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
			j += 4;
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	3304      	adds	r3, #4
 8004c44:	623b      	str	r3, [r7, #32]
		for(uint32_t i = 0; i < quantity; i ++){
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	3301      	adds	r3, #1
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4c:	88bb      	ldrh	r3, [r7, #4]
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3d8      	bcc.n	8004c06 <FSExt_Read+0xae>
		}
		return 1;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e003      	b.n	8004c60 <FSExt_Read+0x108>
	}else{
		DBG_SPRINT_NL("Error: Flash read failed");
 8004c58:	4807      	ldr	r0, [pc, #28]	; (8004c78 <FSExt_Read+0x120>)
 8004c5a:	f008 fff3 	bl	800dc44 <DBG_SPRINT_NL>
		return 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	46ad      	mov	sp, r5
	}
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bdb0      	pop	{r4, r5, r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	2400085e 	.word	0x2400085e
 8004c70:	007ff000 	.word	0x007ff000
 8004c74:	24004f18 	.word	0x24004f18
 8004c78:	08029e9c 	.word	0x08029e9c

08004c7c <FSExt_EraseFull>:
  * @param startAddr: data address
  * @param data: data buffer
  * @param quantity: number off data
  * @retval 0 = error, 1 = no error
  */
uint8_t FSExt_EraseFull(void){
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
	uint32_t address = (FSEXT_BLOCK_ADDRESS |FSEXT_SECTOR_ADDRESS);
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <FSExt_EraseFull+0x20>)
 8004c84:	607b      	str	r3, [r7, #4]
	return w25qxx_sector_erase_4k(w25q, address);
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <FSExt_EraseFull+0x24>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f00e fd89 	bl	80137a4 <w25qxx_sector_erase_4k>
 8004c92:	4603      	mov	r3, r0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	007ff000 	.word	0x007ff000
 8004ca0:	24004f18 	.word	0x24004f18

08004ca4 <FSExt_SetChngFlag>:
/*
 * @brief These functions will track the changes of local flash buffer and update the eeprom
 * automatically if FSExt_CheckChangesAndUpdate() this function is checked periodically
 * */

void FSExt_SetChngFlag( uint16_t address){
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	80fb      	strh	r3, [r7, #6]
	if(buffStatus.count < FSEXT_MAX_STORAGE_SIZE){
 8004cae:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <FSExt_SetChngFlag+0x3c>)
 8004cb0:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8004cb4:	2b91      	cmp	r3, #145	; 0x91
 8004cb6:	d80c      	bhi.n	8004cd2 <FSExt_SetChngFlag+0x2e>
		buffStatus.modified[buffStatus.count++] = address;
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <FSExt_SetChngFlag+0x3c>)
 8004cba:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	b291      	uxth	r1, r2
 8004cc2:	4a07      	ldr	r2, [pc, #28]	; (8004ce0 <FSExt_SetChngFlag+0x3c>)
 8004cc4:	f8a2 1124 	strh.w	r1, [r2, #292]	; 0x124
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4a05      	ldr	r2, [pc, #20]	; (8004ce0 <FSExt_SetChngFlag+0x3c>)
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	}
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	24000738 	.word	0x24000738

08004ce4 <FSExt_ClearAllChngFlag>:

/* @brief clear change flag
 * */
void FSExt_ClearAllChngFlag(void){
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
	buffStatus.count = 0;
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <FSExt_ClearAllChngFlag+0x1c>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    memset(buffStatus.modified, 0, sizeof(buffStatus.modified));
 8004cf0:	f44f 7292 	mov.w	r2, #292	; 0x124
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4802      	ldr	r0, [pc, #8]	; (8004d00 <FSExt_ClearAllChngFlag+0x1c>)
 8004cf8:	f021 fd1c 	bl	8026734 <memset>
}
 8004cfc:	bf00      	nop
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	24000738 	.word	0x24000738

08004d04 <FSExt_CheckAndUpdateChanges>:


/* @brief check and update the changes
 * */
void FSExt_CheckAndUpdateChanges(void){
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
	if(buffStatus.count<= 0) return;
 8004d08:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <FSExt_CheckAndUpdateChanges+0x40>)
 8004d0a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d015      	beq.n	8004d3e <FSExt_CheckAndUpdateChanges+0x3a>
	if(FSExt_Write(FSEXT_START_ADDRES, FSExt_Buffer,FSEXT_MAX_STORAGE_SIZE) > 0){
 8004d12:	2292      	movs	r2, #146	; 0x92
 8004d14:	490c      	ldr	r1, [pc, #48]	; (8004d48 <FSExt_CheckAndUpdateChanges+0x44>)
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7ff fe86 	bl	8004a28 <FSExt_Write>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <FSExt_CheckAndUpdateChanges+0x32>
		DBG_SPRINT_NL("Storage: Updated!");
 8004d22:	480a      	ldr	r0, [pc, #40]	; (8004d4c <FSExt_CheckAndUpdateChanges+0x48>)
 8004d24:	f008 ff8e 	bl	800dc44 <DBG_SPRINT_NL>
		FSExt_ClearAllChngFlag();
 8004d28:	f7ff ffdc 	bl	8004ce4 <FSExt_ClearAllChngFlag>
		buffStatus.count = 0;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <FSExt_CheckAndUpdateChanges+0x40>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
 8004d34:	e004      	b.n	8004d40 <FSExt_CheckAndUpdateChanges+0x3c>
	}else{
		DBG_SPRINT_NL("Error: Flash write failed!");
 8004d36:	4806      	ldr	r0, [pc, #24]	; (8004d50 <FSExt_CheckAndUpdateChanges+0x4c>)
 8004d38:	f008 ff84 	bl	800dc44 <DBG_SPRINT_NL>
 8004d3c:	e000      	b.n	8004d40 <FSExt_CheckAndUpdateChanges+0x3c>
	if(buffStatus.count<= 0) return;
 8004d3e:	bf00      	nop
	}
}
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	24000738 	.word	0x24000738
 8004d48:	24004f1c 	.word	0x24004f1c
 8004d4c:	08029eb8 	.word	0x08029eb8
 8004d50:	08029ecc 	.word	0x08029ecc

08004d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0

  while (1)
 8004d58:	e7fe      	b.n	8004d58 <NMI_Handler+0x4>
	...

08004d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0

	DBG_SPRINT_NL("----------HardFault----------");
 8004d60:	4801      	ldr	r0, [pc, #4]	; (8004d68 <HardFault_Handler+0xc>)
 8004d62:	f008 ff6f 	bl	800dc44 <DBG_SPRINT_NL>

  while (1)
 8004d66:	e7fe      	b.n	8004d66 <HardFault_Handler+0xa>
 8004d68:	08029ee8 	.word	0x08029ee8

08004d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0

	DBG_SPRINT_NL("----------MemManageFault----------");
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <MemManage_Handler+0xc>)
 8004d72:	f008 ff67 	bl	800dc44 <DBG_SPRINT_NL>

  while (1)
 8004d76:	e7fe      	b.n	8004d76 <MemManage_Handler+0xa>
 8004d78:	08029f08 	.word	0x08029f08

08004d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0

	DBG_SPRINT_NL("----------BusFault----------");
 8004d80:	4801      	ldr	r0, [pc, #4]	; (8004d88 <BusFault_Handler+0xc>)
 8004d82:	f008 ff5f 	bl	800dc44 <DBG_SPRINT_NL>

  while (1)
 8004d86:	e7fe      	b.n	8004d86 <BusFault_Handler+0xa>
 8004d88:	08029f2c 	.word	0x08029f2c

08004d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0

	DBG_SPRINT_NL("----------UsageFault----------");
 8004d90:	4801      	ldr	r0, [pc, #4]	; (8004d98 <UsageFault_Handler+0xc>)
 8004d92:	f008 ff57 	bl	800dc44 <DBG_SPRINT_NL>

  while (1)
 8004d96:	e7fe      	b.n	8004d96 <UsageFault_Handler+0xa>
 8004d98:	08029f4c 	.word	0x08029f4c

08004d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0

}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004daa:	b480      	push	{r7}
 8004dac:	af00      	add	r7, sp, #0

}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0

}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	af00      	add	r7, sp, #0
//			ENC_CalcSpeedQuad(&gVar.dio.enc);
//		}
//	}


  HAL_IncTick();
 8004dca:	f011 fb7d 	bl	80164c8 <HAL_IncTick>

}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
	/*For incremental encoder channel Z----------------*/
	//	ENC_ReadChZ(&gVar.dio.enc); //TODO: speed calculation will be implemented later
	if(gVar.dio.enc.enable > 0 && gVar.dio.enc.configs.mode == ENC_MODE_QUAD){
 8004dd8:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <EXTI2_IRQHandler+0x90>)
 8004dda:	f242 4344 	movw	r3, #9284	; 0x2444
 8004dde:	4413      	add	r3, r2
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01f      	beq.n	8004e26 <EXTI2_IRQHandler+0x52>
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <EXTI2_IRQHandler+0x90>)
 8004de8:	f242 4348 	movw	r3, #9288	; 0x2448
 8004dec:	4413      	add	r3, r2
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d118      	bne.n	8004e26 <EXTI2_IRQHandler+0x52>
		gVar.dio.enc.counterZ ++;
 8004df4:	4a1b      	ldr	r2, [pc, #108]	; (8004e64 <EXTI2_IRQHandler+0x90>)
 8004df6:	f242 43ac 	movw	r3, #9388	; 0x24ac
 8004dfa:	4413      	add	r3, r2
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	4918      	ldr	r1, [pc, #96]	; (8004e64 <EXTI2_IRQHandler+0x90>)
 8004e02:	f242 43ac 	movw	r3, #9388	; 0x24ac
 8004e06:	440b      	add	r3, r1
 8004e08:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.countQuadAtRef = __HAL_TIM_GET_COUNTER(gVar.dio.enc.configs.quadrature.timer);
 8004e0a:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <EXTI2_IRQHandler+0x90>)
 8004e0c:	f242 434c 	movw	r3, #9292	; 0x244c
 8004e10:	4413      	add	r3, r2
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4a12      	ldr	r2, [pc, #72]	; (8004e64 <EXTI2_IRQHandler+0x90>)
 8004e1c:	f242 43b0 	movw	r3, #9392	; 0x24b0
 8004e20:	4413      	add	r3, r2
 8004e22:	6019      	str	r1, [r3, #0]
 8004e24:	e00b      	b.n	8004e3e <EXTI2_IRQHandler+0x6a>
	}else{
		gVar.dio.enc.counterZ = 0;
 8004e26:	4a0f      	ldr	r2, [pc, #60]	; (8004e64 <EXTI2_IRQHandler+0x90>)
 8004e28:	f242 43ac 	movw	r3, #9388	; 0x24ac
 8004e2c:	4413      	add	r3, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.countQuadAtRef = 0;
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <EXTI2_IRQHandler+0x90>)
 8004e34:	f242 43b0 	movw	r3, #9392	; 0x24b0
 8004e38:	4413      	add	r3, r2
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
	}

	if (__HAL_GPIO_EXTI_GET_IT(DI_3_ENC_Z_Pin) != 0x00U)
 8004e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <EXTI2_IRQHandler+0x84>
	{
	__HAL_GPIO_EXTI_CLEAR_IT(DI_3_ENC_Z_Pin);
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e52:	2204      	movs	r2, #4
 8004e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}

//  HAL_GPIO_EXTI_IRQHandler(DI_3_Pin);
}
 8004e58:	bf00      	nop
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	24002050 	.word	0x24002050

08004e68 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
	// clear interrupt and make ready for next interrupt
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(DI_4_Pin) != 0x00U)
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <EXTI4_IRQHandler+0x1e>
	{
	__HAL_GPIO_EXTI_CLEAR_IT(DI_4_Pin);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	2210      	movs	r2, #16
 8004e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}

//  HAL_GPIO_EXTI_IRQHandler(DI_4_Pin);
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
	/*For incremental encoder channel A-----------------*/
	//ENC_ReadChA(&gVar.dio.enc);
	if(gVar.dio.enc.enable > 0){
 8004e94:	4a45      	ldr	r2, [pc, #276]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004e96:	f242 4344 	movw	r3, #9284	; 0x2444
 8004e9a:	4413      	add	r3, r2
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d014      	beq.n	8004ecc <EXTI9_5_IRQHandler+0x3c>
		if(gVar.dio.enc.configs.mode & ENC_MODE_INCRE_CHA){gVar.dio.enc.counterA++;}
 8004ea2:	4a42      	ldr	r2, [pc, #264]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004ea4:	f242 4348 	movw	r3, #9288	; 0x2448
 8004ea8:	4413      	add	r3, r2
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d011      	beq.n	8004ed8 <EXTI9_5_IRQHandler+0x48>
 8004eb4:	4a3d      	ldr	r2, [pc, #244]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004eb6:	f242 43a4 	movw	r3, #9380	; 0x24a4
 8004eba:	4413      	add	r3, r2
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	493a      	ldr	r1, [pc, #232]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004ec2:	f242 43a4 	movw	r3, #9380	; 0x24a4
 8004ec6:	440b      	add	r3, r1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e005      	b.n	8004ed8 <EXTI9_5_IRQHandler+0x48>
	}else{
		gVar.dio.enc.counterA = 0;
 8004ecc:	4a37      	ldr	r2, [pc, #220]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004ece:	f242 43a4 	movw	r3, #9380	; 0x24a4
 8004ed2:	4413      	add	r3, r2
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
	}
	// clear interrupt and make ready for next interrupt
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(DI_1_ENC_A_Pin) != 0x00U)
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <EXTI9_5_IRQHandler+0x62>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(DI_1_ENC_A_Pin);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}

	/*For incremental encoder channel B----------------*/
	  //ENC_ReadChB(&gVar.dio.enc);
	if(gVar.dio.enc.enable > 0){
 8004ef2:	4a2e      	ldr	r2, [pc, #184]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004ef4:	f242 4344 	movw	r3, #9284	; 0x2444
 8004ef8:	4413      	add	r3, r2
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d014      	beq.n	8004f2a <EXTI9_5_IRQHandler+0x9a>
		if(gVar.dio.enc.configs.mode & ENC_MODE_INCRE_CHB){	gVar.dio.enc.counterB ++;}
 8004f00:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004f02:	f242 4348 	movw	r3, #9288	; 0x2448
 8004f06:	4413      	add	r3, r2
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d011      	beq.n	8004f36 <EXTI9_5_IRQHandler+0xa6>
 8004f12:	4a26      	ldr	r2, [pc, #152]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004f14:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8004f18:	4413      	add	r3, r2
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	4923      	ldr	r1, [pc, #140]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004f20:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8004f24:	440b      	add	r3, r1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e005      	b.n	8004f36 <EXTI9_5_IRQHandler+0xa6>
	}else{
		gVar.dio.enc.counterB = 0;
 8004f2a:	4a20      	ldr	r2, [pc, #128]	; (8004fac <EXTI9_5_IRQHandler+0x11c>)
 8004f2c:	f242 43a8 	movw	r3, #9384	; 0x24a8
 8004f30:	4413      	add	r3, r2
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
	}
	// clear interrupt and make ready for next interrupt
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(DI_2_ENC_B_Pin) != 0x00U)
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <EXTI9_5_IRQHandler+0xc0>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(DI_2_ENC_B_Pin);
 8004f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}

	/*DI 5-----------------------------------------------*/
	// clear interrupt and make ready for next interrupt
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(DI_5_Pin) != 0x00U)
 8004f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <EXTI9_5_IRQHandler+0xda>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(DI_5_Pin);
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}

	/*DI 6-----------------------------------------------*/
	// clear interrupt and make ready for next interrupt
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(DI_6_Pin) != 0x00U)
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <EXTI9_5_IRQHandler+0xf6>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(DI_6_Pin);
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}

	/*DI 6-----------------------------------------------*/
	// clear interrupt and make ready for next interrupt
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(DI_7_Pin) != 0x00U)
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <EXTI9_5_IRQHandler+0x112>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(DI_7_Pin);
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
//  HAL_GPIO_EXTI_IRQHandler(DI_1_Pin);
//  HAL_GPIO_EXTI_IRQHandler(DI_2_Pin);
//  HAL_GPIO_EXTI_IRQHandler(DI_5_Pin);
//  HAL_GPIO_EXTI_IRQHandler(DI_6_Pin);
//  HAL_GPIO_EXTI_IRQHandler(DI_7_Pin);
}
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	24002050 	.word	0x24002050

08004fb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI_8_Pin);
 8004fb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fb8:	f016 fedf 	bl	801bd7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fbc:	bf00      	nop
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <TIM4_IRQHandler>:
  * The achievement is that, we are able to save 4.15 us.
  * So that, MBS_ChackRcvdFrame(), function is deprecated
  *
  */
void TIM4_IRQHandler(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(DO_2_PWM_GPIO_Port, DO_2_PWM_Pin);
//	DBG_PRINT("\r\nTIM4  1.5 char");
//	MBS_ChackRcvdFrame(&gVar.mbSerial, &gVar.mbRTUSlave);		// DEPRECATED: Sept 20, 2023

	//REPLACED: Sept 20, 2023---------------------
	if(htim4.Instance->SR & TIM_SR_UIF){		// TODO:  uncomment
 8004fc6:	4b46      	ldr	r3, [pc, #280]	; (80050e0 <TIM4_IRQHandler+0x120>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8081 	beq.w	80050d8 <TIM4_IRQHandler+0x118>
		MBS_STOP_TIMER(&htim4);
 8004fd6:	4b42      	ldr	r3, [pc, #264]	; (80050e0 <TIM4_IRQHandler+0x120>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8004fde:	4b40      	ldr	r3, [pc, #256]	; (80050e0 <TIM4_IRQHandler+0x120>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <TIM4_IRQHandler+0x120>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	4b3c      	ldr	r3, [pc, #240]	; (80050e0 <TIM4_IRQHandler+0x120>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <TIM4_IRQHandler+0x120>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	611a      	str	r2, [r3, #16]
//		HAL_TIM_Base_Stop_IT(&htim4);
		gVar.mbSerial.frameOkFlag = 0U;
 8004ffe:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005000:	2200      	movs	r2, #0
 8005002:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
		if(gVar.mbSerial.rxBuffSize >= (MBS_RTU_PDU_MIN_SIZE-1U)){		// if the buffer size is less than the max buffer size
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005008:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 800500c:	2b02      	cmp	r3, #2
 800500e:	d963      	bls.n	80050d8 <TIM4_IRQHandler+0x118>

			gVar.mbHandle->diag.bus_msg_count++;
 8005010:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005012:	f8d3 3684 	ldr.w	r3, [r3, #1668]	; 0x684
 8005016:	8a5a      	ldrh	r2, [r3, #18]
 8005018:	3201      	adds	r2, #1
 800501a:	b292      	uxth	r2, r2
 800501c:	825a      	strh	r2, [r3, #18]
			if(gVar.mbSerial.rxBuff[MB_SA_INDEX] == gVar.mbRTUSlave.slave_address
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005020:	f893 26aa 	ldrb.w	r2, [r3, #1706]	; 0x6aa
 8005024:	4b2f      	ldr	r3, [pc, #188]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005026:	f893 38c8 	ldrb.w	r3, [r3, #2248]	; 0x8c8
 800502a:	429a      	cmp	r2, r3
 800502c:	d004      	beq.n	8005038 <TIM4_IRQHandler+0x78>
				|| gVar.mbSerial.rxBuff[MB_SA_INDEX] == MB_BROADCAST_ADDR){			// if slave address is matched
 800502e:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005030:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 8005034:	2b00      	cmp	r3, #0
 8005036:	d14f      	bne.n	80050d8 <TIM4_IRQHandler+0x118>

				uint16_t receivedCRC16 = (gVar.mbSerial.rxBuff[gVar.mbSerial.rxBuffSize-1] << 8) | gVar.mbSerial.rxBuff[gVar.mbSerial.rxBuffSize-2];
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <TIM4_IRQHandler+0x124>)
 800503a:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 800503e:	3b01      	subs	r3, #1
 8005040:	4a28      	ldr	r2, [pc, #160]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005042:	4413      	add	r3, r2
 8005044:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	b21a      	sxth	r2, r3
 800504c:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <TIM4_IRQHandler+0x124>)
 800504e:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 8005052:	3b02      	subs	r3, #2
 8005054:	4923      	ldr	r1, [pc, #140]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005056:	440b      	add	r3, r1
 8005058:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 800505c:	b21b      	sxth	r3, r3
 800505e:	4313      	orrs	r3, r2
 8005060:	b21b      	sxth	r3, r3
 8005062:	80fb      	strh	r3, [r7, #6]
				if(receivedCRC16 == MB_CalcCRC16(gVar.mbSerial.rxBuff, gVar.mbSerial.rxBuffSize-2)){//MB_CRCCheck(gVar.mbSerial.rxBuff, gVar.mbSerial.rxBuffSize)){
 8005064:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005066:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 800506a:	3b02      	subs	r3, #2
 800506c:	b29b      	uxth	r3, r3
 800506e:	4619      	mov	r1, r3
 8005070:	481d      	ldr	r0, [pc, #116]	; (80050e8 <TIM4_IRQHandler+0x128>)
 8005072:	f009 ffc1 	bl	800eff8 <MB_CalcCRC16>
 8005076:	4603      	mov	r3, r0
 8005078:	461a      	mov	r2, r3
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	4293      	cmp	r3, r2
 800507e:	d11a      	bne.n	80050b6 <TIM4_IRQHandler+0xf6>
					gVar.mbRTUSlave.rxBuffer = &gVar.mbSerial.rxBuff[0];
 8005080:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005082:	4a19      	ldr	r2, [pc, #100]	; (80050e8 <TIM4_IRQHandler+0x128>)
 8005084:	f8c3 28cc 	str.w	r2, [r3, #2252]	; 0x8cc
					gVar.mbRTUSlave.txBuffer = &gVar.mbSerial.txBuff[0];
 8005088:	4b16      	ldr	r3, [pc, #88]	; (80050e4 <TIM4_IRQHandler+0x124>)
 800508a:	4a18      	ldr	r2, [pc, #96]	; (80050ec <TIM4_IRQHandler+0x12c>)
 800508c:	f8c3 28d0 	str.w	r2, [r3, #2256]	; 0x8d0
					gVar.mbRTUSlave.rxBufferSize = gVar.mbSerial.rxBuffSize;
 8005090:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <TIM4_IRQHandler+0x124>)
 8005092:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 8005096:	b2da      	uxtb	r2, r3
 8005098:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <TIM4_IRQHandler+0x124>)
 800509a:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
					gVar.mbRTUSlave.txBufferSize = gVar.mbSerial.txBuffSize;
 800509e:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <TIM4_IRQHandler+0x124>)
 80050a0:	f8b3 38ac 	ldrh.w	r3, [r3, #2220]	; 0x8ac
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <TIM4_IRQHandler+0x124>)
 80050a8:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
					gVar.mbSerial.frameOkFlag=1;
 80050ac:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <TIM4_IRQHandler+0x124>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 80050b4:	e00a      	b.n	80050cc <TIM4_IRQHandler+0x10c>
				}else{
					gVar.mbSerial.frameOkFlag = 0;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <TIM4_IRQHandler+0x124>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
					gVar.mbHandle->diag.bus_com_err_count++;	// counts the quantity of CRC errors encountered by the slave since its last restart
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <TIM4_IRQHandler+0x124>)
 80050c0:	f8d3 3684 	ldr.w	r3, [r3, #1668]	; 0x684
 80050c4:	8a9a      	ldrh	r2, [r3, #20]
 80050c6:	3201      	adds	r2, #1
 80050c8:	b292      	uxth	r2, r2
 80050ca:	829a      	strh	r2, [r3, #20]
				}
				gVar.mbHandle->busy_status = MB_STATUS_OK;
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <TIM4_IRQHandler+0x124>)
 80050ce:	f8d3 3684 	ldr.w	r3, [r3, #1668]	; 0x684
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2020 	strb.w	r2, [r3, #32]
	//TODO: to implement this LED using IOExtender
	//----------------------------------------------
//	HAL_TIM_IRQHandler(&htim4);
//	MBS_START_TIMER(&htim4);

}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	2400548c 	.word	0x2400548c
 80050e4:	24002050 	.word	0x24002050
 80050e8:	240026fa 	.word	0x240026fa
 80050ec:	240027fa 	.word	0x240027fa

080050f0 <TIM6_DAC_IRQHandler>:
  * to reduce the execution time, that function job is implemented here directly.
  * The achievement is that, we are able to save 4.15 us.
  * So that, MBS_StopReceiving(), function is deprecated
  */
void TIM6_DAC_IRQHandler(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
	/*-------- for 3.5 char -------------*/
//	HAL_GPIO_TogglePin(DO_3_PWM_GPIO_Port, DO_3_PWM_Pin);
//	DBG_PRINT("\r\nTIM6 3.5 char");

	gVar.mbSerial.isSending = 0;
 80050f4:	4b26      	ldr	r3, [pc, #152]	; (8005190 <TIM6_DAC_IRQHandler+0xa0>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
	MBS_StopReceiving(&gVar.mbSerial);			// DEPRECATED: Sept 20, 2023
 80050fc:	4825      	ldr	r0, [pc, #148]	; (8005194 <TIM6_DAC_IRQHandler+0xa4>)
 80050fe:	f00d fc03 	bl	8012908 <MBS_StopReceiving>
	HAL_TIM_Base_Start_IT(&htim2);
 8005102:	4825      	ldr	r0, [pc, #148]	; (8005198 <TIM6_DAC_IRQHandler+0xa8>)
 8005104:	f01d fb3a 	bl	802277c <HAL_TIM_Base_Start_IT>
	//REPLACED: Sept 20, 2023---------------------
	if(htim6.Instance->SR & TIM_SR_UIF){
 8005108:	4b24      	ldr	r3, [pc, #144]	; (800519c <TIM6_DAC_IRQHandler+0xac>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d039      	beq.n	800518a <TIM6_DAC_IRQHandler+0x9a>
//		HAL_TIM_Base_Stop_IT(&htim6);
		MBS_STOP_TIMER(&htim6);		//stop the 3.5 char timer, once a data packet is received
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <TIM6_DAC_IRQHandler+0xac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	625a      	str	r2, [r3, #36]	; 0x24
 800511e:	4b1f      	ldr	r3, [pc, #124]	; (800519c <TIM6_DAC_IRQHandler+0xac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b1d      	ldr	r3, [pc, #116]	; (800519c <TIM6_DAC_IRQHandler+0xac>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <TIM6_DAC_IRQHandler+0xac>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <TIM6_DAC_IRQHandler+0xac>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	611a      	str	r2, [r3, #16]
		gVar.mbSerial.isDataReceived = 1U;
 800513e:	4b14      	ldr	r3, [pc, #80]	; (8005190 <TIM6_DAC_IRQHandler+0xa0>)
 8005140:	2201      	movs	r2, #1
 8005142:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b


//		DBG_ENABLE();
//			DEBUG_SPRINT("\nR%d",gVar.mbSerial.rxBuffSize); //\r\nR:(%d)
//			dbug.enable = !dbug.enable;
		if(gVar.mbSerial.rxBuffSize <= MB_PDU_MIN_SIZE || gVar.mbSerial.rxBuffSize >= MB_PDU_MAX_SIZE){
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <TIM6_DAC_IRQHandler+0xa0>)
 8005148:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 800514c:	2b04      	cmp	r3, #4
 800514e:	d904      	bls.n	800515a <TIM6_DAC_IRQHandler+0x6a>
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <TIM6_DAC_IRQHandler+0xa0>)
 8005152:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 8005156:	2bff      	cmp	r3, #255	; 0xff
 8005158:	d908      	bls.n	800516c <TIM6_DAC_IRQHandler+0x7c>
			gVar.mbSerial.rxBuffSize = 0 ;
 800515a:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <TIM6_DAC_IRQHandler+0xa0>)
 800515c:	2200      	movs	r2, #0
 800515e:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
			gVar.mbSerial.isDataReceived = 0U;
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <TIM6_DAC_IRQHandler+0xa0>)
 8005164:	2200      	movs	r2, #0
 8005166:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 800516a:	e005      	b.n	8005178 <TIM6_DAC_IRQHandler+0x88>
		}else{
			TH_MBSerial();
 800516c:	f005 fa78 	bl	800a660 <TH_MBSerial>
			gVar.mbSerial.rxBuffSize = 0 ;
 8005170:	4b07      	ldr	r3, [pc, #28]	; (8005190 <TIM6_DAC_IRQHandler+0xa0>)
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
		}
		gVar.mbSerial.isReceiving = 0;
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <TIM6_DAC_IRQHandler+0xa0>)
 800517a:	2200      	movs	r2, #0
 800517c:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
		rtuRxCount++; //TODO: to remove
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <TIM6_DAC_IRQHandler+0xb0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	4a06      	ldr	r2, [pc, #24]	; (80051a0 <TIM6_DAC_IRQHandler+0xb0>)
 8005188:	6013      	str	r3, [r2, #0]
	//TODO: to implement this LED using IOExtender
	//-----------------------------------
//  HAL_TIM_IRQHandler(&htim6);
//	MBS_START_TIMER(&htim6);

}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	24002050 	.word	0x24002050
 8005194:	240026d8 	.word	0x240026d8
 8005198:	24005218 	.word	0x24005218
 800519c:	24005a1c 	.word	0x24005a1c
 80051a0:	240008c0 	.word	0x240008c0

080051a4 <Uart_Receive_IT>:
////	HAL_SPI_MspInit(hspi);
//}
//

HAL_StatusTypeDef Uart_Receive_IT(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	2b22      	cmp	r3, #34	; 0x22
 80051b4:	f040 80a6 	bne.w	8005304 <Uart_Receive_IT+0x160>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d117      	bne.n	80051f2 <Uart_Receive_IT+0x4e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d113      	bne.n	80051f2 <Uart_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	623b      	str	r3, [r7, #32]
      *pdata16bits = (uint16_t)(huart->Instance->RDR & (uint16_t)0x01FF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	1c9a      	adds	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	659a      	str	r2, [r3, #88]	; 0x58
 80051f0:	e026      	b.n	8005240 <Uart_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
      pdata16bits  = NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	623b      	str	r3, [r7, #32]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005204:	d007      	beq.n	8005216 <Uart_Receive_IT+0x72>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <Uart_Receive_IT+0x80>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <Uart_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)0x00FF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	b2da      	uxtb	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e008      	b.n	8005236 <Uart_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)0x007F);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005230:	b2da      	uxtb	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    if (--huart->RxXferCount == 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29b      	uxth	r3, r3
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4619      	mov	r1, r3
 8005250:	f8a2 105e 	strh.w	r1, [r2, #94]	; 0x5e
 8005254:	2b00      	cmp	r3, #0
 8005256:	d153      	bne.n	8005300 <Uart_Receive_IT+0x15c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0220 	bic.w	r2, r2, #32
 8005266:	601a      	str	r2, [r3, #0]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005276:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d12e      	bne.n	80052f6 <Uart_Receive_IT+0x152>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f023 0310 	bic.w	r3, r3, #16
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e6      	bne.n	800529e <Uart_Receive_IT+0xfa>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d103      	bne.n	80052e6 <Uart_Receive_IT+0x142>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2210      	movs	r2, #16
 80052e4:	621a      	str	r2, [r3, #32]
        }


        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fab0 	bl	8005854 <HAL_UARTEx_RxEventCallback>
 80052f4:	e002      	b.n	80052fc <Uart_Receive_IT+0x158>

      }
      else
      {
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fb72 	bl	80059e0 <HAL_UART_RxCpltCallback>
      }

      return HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e002      	b.n	8005306 <Uart_Receive_IT+0x162>
    }
    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <Uart_Receive_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3728      	adds	r7, #40	; 0x28
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <USART2_IRQHandler>:


/**
  * @brief This function handles USART6 global interrupt.
  */
void USART2_IRQHandler(void){
 8005310:	b580      	push	{r7, lr}
 8005312:	b094      	sub	sp, #80	; 0x50
 8005314:	af00      	add	r7, sp, #0


//		HAL_UART_IRQHandler(&huart2);
	/*--------------------------------------------------------------*/
	  uint32_t isrflags   = huart2.Instance->ISR;//READ_REG(huart->Instance->SR);
 8005316:	4b6b      	ldr	r3, [pc, #428]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	64fb      	str	r3, [r7, #76]	; 0x4c

	  /* If no error occurs */
	  errorflag = (isrflags & errFlag);
 800531e:	4b6a      	ldr	r3, [pc, #424]	; (80054c8 <USART2_IRQHandler+0x1b8>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005324:	4013      	ands	r3, r2
 8005326:	4a69      	ldr	r2, [pc, #420]	; (80054cc <USART2_IRQHandler+0x1bc>)
 8005328:	6013      	str	r3, [r2, #0]

	   /* If some errors occur */
	   if ((errorflag != RESET)) {
 800532a:	4b68      	ldr	r3, [pc, #416]	; (80054cc <USART2_IRQHandler+0x1bc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04b      	beq.n	80053ca <USART2_IRQHandler+0xba>
		 /* UART parity error interrupt occurred ----------------------------------*/
		 if ((isrflags & USART_ISR_PE) != RESET) {
 8005332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <USART2_IRQHandler+0x48>
		   huart2.ErrorCode |= HAL_UART_ERROR_PE;
 800533c:	4b61      	ldr	r3, [pc, #388]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 800533e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	4a5f      	ldr	r2, [pc, #380]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 8005348:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		   gVar.diag.rtuBus.peCount++;
 800534c:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 800534e:	899b      	ldrh	r3, [r3, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	4b5e      	ldr	r3, [pc, #376]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 8005356:	819a      	strh	r2, [r3, #12]
		 }
		 /* UART noise error interrupt occurred -----------------------------------*/
		 if ((isrflags & USART_ISR_NE) != RESET) {
 8005358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <USART2_IRQHandler+0x6e>
		   huart2.ErrorCode |= HAL_UART_ERROR_NE;
 8005362:	4b58      	ldr	r3, [pc, #352]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 8005364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005368:	f043 0302 	orr.w	r3, r3, #2
 800536c:	4a55      	ldr	r2, [pc, #340]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 800536e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		   gVar.diag.rtuBus.neCount++;
 8005372:	4b57      	ldr	r3, [pc, #348]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 8005374:	89db      	ldrh	r3, [r3, #14]
 8005376:	3301      	adds	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	4b55      	ldr	r3, [pc, #340]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 800537c:	81da      	strh	r2, [r3, #14]
		 }

		 /* UART frame error interrupt occurred -----------------------------------*/
		 if ((isrflags & USART_ISR_FE) != RESET)  {
 800537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <USART2_IRQHandler+0x94>
			 gVar.diag.rtuBus.feCount++;
 8005388:	4b51      	ldr	r3, [pc, #324]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 800538a:	8a1b      	ldrh	r3, [r3, #16]
 800538c:	3301      	adds	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	4b4f      	ldr	r3, [pc, #316]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 8005392:	821a      	strh	r2, [r3, #16]
		   huart2.ErrorCode |= HAL_UART_ERROR_FE;
 8005394:	4b4b      	ldr	r3, [pc, #300]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 8005396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	4a49      	ldr	r2, [pc, #292]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 80053a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		 }

		 /* UART Over-Run interrupt occurred --------------------------------------*/
		 if ((isrflags & USART_ISR_ORE) != RESET) {
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <USART2_IRQHandler+0xba>
			 gVar.diag.rtuBus.oreCount++;
 80053ae:	4b48      	ldr	r3, [pc, #288]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 80053b0:	8a5b      	ldrh	r3, [r3, #18]
 80053b2:	3301      	adds	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	4b46      	ldr	r3, [pc, #280]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 80053b8:	825a      	strh	r2, [r3, #18]
		   huart2.ErrorCode |= HAL_UART_ERROR_ORE;
 80053ba:	4b42      	ldr	r3, [pc, #264]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 80053bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c0:	f043 0308 	orr.w	r3, r3, #8
 80053c4:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 80053c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		 }
	   }

	   //Check the protocol
	 if(gVar.mbSerial.protocol == MBS_PROTO_RTU_CLUSTER_DMA){
 80053ca:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 80053cc:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	f040 821a 	bne.w	800580a <USART2_IRQHandler+0x4fa>
	   if ((errorflag != RESET)) {
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <USART2_IRQHandler+0x1bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8109 	beq.w	80055f2 <USART2_IRQHandler+0x2e2>
		 /* Call UART Error Call back function if need be --------------------------*/
		 if (huart2.ErrorCode != HAL_UART_ERROR_NONE)
 80053e0:	4b38      	ldr	r3, [pc, #224]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 80053e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8213 	beq.w	8005812 <USART2_IRQHandler+0x502>
		 {
		   /* UART in mode Receiver -----------------------------------------------*/
		   if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 80053ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <USART2_IRQHandler+0xfa>
 80053f6:	4b33      	ldr	r3, [pc, #204]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <USART2_IRQHandler+0xfa>
		   {
			 Uart_Receive_IT(&huart2);
 8005404:	482f      	ldr	r0, [pc, #188]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 8005406:	f7ff fecd 	bl	80051a4 <Uart_Receive_IT>
		   }
		   /* If Overrun error occurs, or if any error occurs in DMA mode reception, */
		   dmarequest = HAL_IS_BIT_SET(huart2.Instance->CR3, USART_CR3_DMAR);
 800540a:	4b2e      	ldr	r3, [pc, #184]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <USART2_IRQHandler+0x1c4>)
 8005422:	601a      	str	r2, [r3, #0]
		   if (((huart2.ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 8005426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <USART2_IRQHandler+0x12c>
 8005432:	4b28      	ldr	r3, [pc, #160]	; (80054d4 <USART2_IRQHandler+0x1c4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 80d2 	beq.w	80055e0 <USART2_IRQHandler+0x2d0>
		   {
			 /* Disable the UART DMA Rx request if enabled */
			 if (HAL_IS_BIT_SET(huart2.Instance->CR3, USART_CR3_DMAR))
 800543c:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	f040 80c6 	bne.w	80055d8 <USART2_IRQHandler+0x2c8>
			 {
			   ATOMIC_CLEAR_BIT(huart2.Instance->CR3, USART_CR3_DMAR);
 800544c:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005462:	643b      	str	r3, [r7, #64]	; 0x40
 8005464:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800546c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800546e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e5      	bne.n	800544c <USART2_IRQHandler+0x13c>

			   /* Abort the UART DMA Rx stream */
			   if (huart2.hdmarx != NULL)
 8005480:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 8005482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80a3 	beq.w	80055d0 <USART2_IRQHandler+0x2c0>
			   {
				if (huart2.hdmarx->State != HAL_DMA_STATE_BUSY)
 800548a:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 800548c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d01f      	beq.n	80054d8 <USART2_IRQHandler+0x1c8>
				 {
				   huart2.RxXferCount = 0x00U;
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 800549a:	2200      	movs	r2, #0
 800549c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				   huart2.TxXferCount = 0x00U;
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				   huart2.hdmarx->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 80054aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ac:	2280      	movs	r2, #128	; 0x80
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
				   gVar.diag.rtuBus.dteCount++;
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 80054b2:	8a9b      	ldrh	r3, [r3, #20]
 80054b4:	3301      	adds	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <USART2_IRQHandler+0x1c0>)
 80054ba:	829a      	strh	r2, [r3, #20]
				   /*Call legacy weak error callback*/
				   HAL_UART_ErrorCallback(&huart2);
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <USART2_IRQHandler+0x1b4>)
 80054be:	f000 fad9 	bl	8005a74 <HAL_UART_ErrorCallback>
			 if (HAL_IS_BIT_SET(huart2.Instance->CR3, USART_CR3_DMAR))
 80054c2:	e095      	b.n	80055f0 <USART2_IRQHandler+0x2e0>
 80054c4:	24005bbc 	.word	0x24005bbc
 80054c8:	24000000 	.word	0x24000000
 80054cc:	24000868 	.word	0x24000868
 80054d0:	24002050 	.word	0x24002050
 80054d4:	24000860 	.word	0x24000860
				 } else{
					 huart2.hdmarx->State = HAL_DMA_STATE_ABORT; /* Set Abort State  */
 80054d8:	4b84      	ldr	r3, [pc, #528]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80054da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054dc:	2204      	movs	r2, #4
 80054de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				   __HAL_DMA_DISABLE(huart2.hdmarx);			 /* Disable the stream */
 80054e2:	4b82      	ldr	r3, [pc, #520]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80054e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a81      	ldr	r2, [pc, #516]	; (80056f0 <USART2_IRQHandler+0x3e0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d059      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 80054ee:	4b7f      	ldr	r3, [pc, #508]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80054f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a7f      	ldr	r2, [pc, #508]	; (80056f4 <USART2_IRQHandler+0x3e4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d053      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 80054fa:	4b7c      	ldr	r3, [pc, #496]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80054fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a7d      	ldr	r2, [pc, #500]	; (80056f8 <USART2_IRQHandler+0x3e8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d04d      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 8005506:	4b79      	ldr	r3, [pc, #484]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a7b      	ldr	r2, [pc, #492]	; (80056fc <USART2_IRQHandler+0x3ec>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d047      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 8005512:	4b76      	ldr	r3, [pc, #472]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a79      	ldr	r2, [pc, #484]	; (8005700 <USART2_IRQHandler+0x3f0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d041      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 800551e:	4b73      	ldr	r3, [pc, #460]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a77      	ldr	r2, [pc, #476]	; (8005704 <USART2_IRQHandler+0x3f4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d03b      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 800552a:	4b70      	ldr	r3, [pc, #448]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800552c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a75      	ldr	r2, [pc, #468]	; (8005708 <USART2_IRQHandler+0x3f8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d035      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 8005536:	4b6d      	ldr	r3, [pc, #436]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a73      	ldr	r2, [pc, #460]	; (800570c <USART2_IRQHandler+0x3fc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d02f      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 8005542:	4b6a      	ldr	r3, [pc, #424]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a71      	ldr	r2, [pc, #452]	; (8005710 <USART2_IRQHandler+0x400>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d029      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 800554e:	4b67      	ldr	r3, [pc, #412]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a6f      	ldr	r2, [pc, #444]	; (8005714 <USART2_IRQHandler+0x404>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d023      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 800555a:	4b64      	ldr	r3, [pc, #400]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800555c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a6d      	ldr	r2, [pc, #436]	; (8005718 <USART2_IRQHandler+0x408>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01d      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 8005566:	4b61      	ldr	r3, [pc, #388]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a6b      	ldr	r2, [pc, #428]	; (800571c <USART2_IRQHandler+0x40c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d017      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 8005572:	4b5e      	ldr	r3, [pc, #376]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a69      	ldr	r2, [pc, #420]	; (8005720 <USART2_IRQHandler+0x410>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d011      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 800557e:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a67      	ldr	r2, [pc, #412]	; (8005724 <USART2_IRQHandler+0x414>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00b      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 800558a:	4b58      	ldr	r3, [pc, #352]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800558c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a65      	ldr	r2, [pc, #404]	; (8005728 <USART2_IRQHandler+0x418>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d005      	beq.n	80055a2 <USART2_IRQHandler+0x292>
 8005596:	4b55      	ldr	r3, [pc, #340]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a63      	ldr	r2, [pc, #396]	; (800572c <USART2_IRQHandler+0x41c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10b      	bne.n	80055ba <USART2_IRQHandler+0x2aa>
 80055a2:	4b52      	ldr	r3, [pc, #328]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b50      	ldr	r3, [pc, #320]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	bf00      	nop
			 if (HAL_IS_BIT_SET(huart2.Instance->CR3, USART_CR3_DMAR))
 80055b8:	e01a      	b.n	80055f0 <USART2_IRQHandler+0x2e0>
				   __HAL_DMA_DISABLE(huart2.hdmarx);			 /* Disable the stream */
 80055ba:	4b4c      	ldr	r3, [pc, #304]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
			 if (HAL_IS_BIT_SET(huart2.Instance->CR3, USART_CR3_DMAR))
 80055ce:	e00f      	b.n	80055f0 <USART2_IRQHandler+0x2e0>
				 }
			   }else{
				 /*Call legacy weak error callback*/
				 HAL_UART_ErrorCallback(&huart2);
 80055d0:	4846      	ldr	r0, [pc, #280]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055d2:	f000 fa4f 	bl	8005a74 <HAL_UART_ErrorCallback>
			 if (HAL_IS_BIT_SET(huart2.Instance->CR3, USART_CR3_DMAR))
 80055d6:	e00b      	b.n	80055f0 <USART2_IRQHandler+0x2e0>
			   }
			 }else{
			   /*Call legacy weak error callback*/
			   HAL_UART_ErrorCallback(&huart2);
 80055d8:	4844      	ldr	r0, [pc, #272]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055da:	f000 fa4b 	bl	8005a74 <HAL_UART_ErrorCallback>
			 if (HAL_IS_BIT_SET(huart2.Instance->CR3, USART_CR3_DMAR))
 80055de:	e007      	b.n	80055f0 <USART2_IRQHandler+0x2e0>
			 }
		   }else{
			 /* Non Blocking error : transfer could go on.*/
			 HAL_UART_ErrorCallback(&huart2);
 80055e0:	4842      	ldr	r0, [pc, #264]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055e2:	f000 fa47 	bl	8005a74 <HAL_UART_ErrorCallback>
			 huart2.ErrorCode = HAL_UART_ERROR_NONE;
 80055e6:	4b41      	ldr	r3, [pc, #260]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		   }
		 }
		 return;
 80055ee:	e110      	b.n	8005812 <USART2_IRQHandler+0x502>
 80055f0:	e10f      	b.n	8005812 <USART2_IRQHandler+0x502>
	   } /* End if some error occurs */

	   /* Check current reception Mode :
		  If Reception till IDLE event has been selected : */
	   if ((huart2.ReceptionType == HAL_UART_RECEPTION_TOIDLE)  && ((isrflags & USART_ISR_IDLE) != 0U)) {
 80055f2:	4b3e      	ldr	r3, [pc, #248]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80055f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	f040 809c 	bne.w	8005734 <USART2_IRQHandler+0x424>
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 8096 	beq.w	8005734 <USART2_IRQHandler+0x424>
		   /*Clear the IDLE line detection interrupt */
		   tmpreg = huart2.Instance->ISR;
 8005608:	4b38      	ldr	r3, [pc, #224]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4a48      	ldr	r2, [pc, #288]	; (8005730 <USART2_IRQHandler+0x420>)
 8005610:	6013      	str	r3, [r2, #0]
		   tmpreg = huart2.Instance->RDR;
 8005612:	4b36      	ldr	r3, [pc, #216]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	4a45      	ldr	r2, [pc, #276]	; (8005730 <USART2_IRQHandler+0x420>)
 800561a:	6013      	str	r3, [r2, #0]

		   /* DMA mode enabled */
		   /* Check received length : If all expected data are received, do nothing, (DMA cplt callback will be called).
			  Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
		  if (((uint16_t)((DMA_Stream_TypeDef*)huart2.hdmarx->Instance)->NDTR > 0U) && ((uint16_t)((DMA_Stream_TypeDef*)huart2.hdmarx->Instance)->NDTR < huart2.RxXferSize)) {
 800561c:	4b33      	ldr	r3, [pc, #204]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800561e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 8084 	beq.w	8005734 <USART2_IRQHandler+0x424>
 800562c:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800562e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	b29a      	uxth	r2, r3
 8005636:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800563c:	429a      	cmp	r2, r3
 800563e:	d279      	bcs.n	8005734 <USART2_IRQHandler+0x424>
			 /* Reception is not complete */
			huart2.RxXferCount = (uint16_t)((DMA_Stream_TypeDef*)huart2.hdmarx->Instance)->NDTR;
 8005640:	4b2a      	ldr	r3, [pc, #168]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	b29a      	uxth	r2, r3
 800564a:	4b28      	ldr	r3, [pc, #160]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800564c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			/* In Normal mode, end DMA xfer and HAL UART Rx process*/
			/* Disable the DMA transfer for the receiver request by resetting the DMAR bit in the UART CR3 register */
			ATOMIC_CLEAR_BIT(huart2.Instance->CR3, USART_CR3_DMAR);
 8005650:	4b26      	ldr	r3, [pc, #152]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005666:	64bb      	str	r3, [r7, #72]	; 0x48
 8005668:	4b20      	ldr	r3, [pc, #128]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005670:	62ba      	str	r2, [r7, #40]	; 0x28
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	623b      	str	r3, [r7, #32]
   return(result);
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <USART2_IRQHandler+0x340>

			/* At end of Rx process, restore huart2.RxState to Ready */
			huart2.RxState = HAL_UART_STATE_READY;
 8005684:	4b19      	ldr	r3, [pc, #100]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005686:	2220      	movs	r2, #32
 8005688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			huart2.ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	4b17      	ldr	r3, [pc, #92]	; (80056ec <USART2_IRQHandler+0x3dc>)
 800568e:	2200      	movs	r2, #0
 8005690:	66da      	str	r2, [r3, #108]	; 0x6c
			ATOMIC_CLEAR_BIT(huart2.Instance->CR1, USART_CR1_IDLEIE);
 8005692:	4b16      	ldr	r3, [pc, #88]	; (80056ec <USART2_IRQHandler+0x3dc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	607b      	str	r3, [r7, #4]
   return(result);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f023 0310 	bic.w	r3, r3, #16
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
 80056a8:	4b10      	ldr	r3, [pc, #64]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6939      	ldr	r1, [r7, #16]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <USART2_IRQHandler+0x382>

			(void)HAL_DMA_Abort(huart2.hdmarx);		/* Last bytes received, so no need as the abort is immediate */
 80056c4:	4b09      	ldr	r3, [pc, #36]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80056c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c8:	4618      	mov	r0, r3
 80056ca:	f013 fe01 	bl	80192d0 <HAL_DMA_Abort>
			HAL_UARTEx_RxEventCallback(&huart2, (huart2.RxXferSize - huart2.RxXferCount));	/*Call legacy weak Rx Event callback*/
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80056d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80056d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	b29b      	uxth	r3, r3
 80056e0:	4619      	mov	r1, r3
 80056e2:	4802      	ldr	r0, [pc, #8]	; (80056ec <USART2_IRQHandler+0x3dc>)
 80056e4:	f000 f8b6 	bl	8005854 <HAL_UARTEx_RxEventCallback>
			return;
 80056e8:	e096      	b.n	8005818 <USART2_IRQHandler+0x508>
 80056ea:	bf00      	nop
 80056ec:	24005bbc 	.word	0x24005bbc
 80056f0:	40020010 	.word	0x40020010
 80056f4:	40020028 	.word	0x40020028
 80056f8:	40020040 	.word	0x40020040
 80056fc:	40020058 	.word	0x40020058
 8005700:	40020070 	.word	0x40020070
 8005704:	40020088 	.word	0x40020088
 8005708:	400200a0 	.word	0x400200a0
 800570c:	400200b8 	.word	0x400200b8
 8005710:	40020410 	.word	0x40020410
 8005714:	40020428 	.word	0x40020428
 8005718:	40020440 	.word	0x40020440
 800571c:	40020458 	.word	0x40020458
 8005720:	40020470 	.word	0x40020470
 8005724:	40020488 	.word	0x40020488
 8005728:	400204a0 	.word	0x400204a0
 800572c:	400204b8 	.word	0x400204b8
 8005730:	24000864 	.word	0x24000864
		 }
	   }

	   /* UART in mode Transmitter ------------------------------------------------*/
	   if (((isrflags & USART_ISR_TXE_TXFNF) != RESET) && ((huart2.Instance->CR1 & USART_CR1_TXEIE_TXFNFIE) != RESET))
 8005734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b00      	cmp	r3, #0
 800573c:	d046      	beq.n	80057cc <USART2_IRQHandler+0x4bc>
 800573e:	4b38      	ldr	r3, [pc, #224]	; (8005820 <USART2_IRQHandler+0x510>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b00      	cmp	r3, #0
 800574a:	d03f      	beq.n	80057cc <USART2_IRQHandler+0x4bc>
	   {
		  /* Check that a Tx process is ongoing */
		  if (huart2.gState == HAL_UART_STATE_BUSY_TX)
 800574c:	4b34      	ldr	r3, [pc, #208]	; (8005820 <USART2_IRQHandler+0x510>)
 800574e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005752:	2b21      	cmp	r3, #33	; 0x21
 8005754:	d15f      	bne.n	8005816 <USART2_IRQHandler+0x506>
		  {
			if ((huart2.Init.WordLength == UART_WORDLENGTH_9B) && (huart2.Init.Parity == UART_PARITY_NONE)){
 8005756:	4b32      	ldr	r3, [pc, #200]	; (8005820 <USART2_IRQHandler+0x510>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575e:	d10f      	bne.n	8005780 <USART2_IRQHandler+0x470>
 8005760:	4b2f      	ldr	r3, [pc, #188]	; (8005820 <USART2_IRQHandler+0x510>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <USART2_IRQHandler+0x470>
			  huart2.Instance->RDR = (uint16_t)(*huart2.pTxBuffPtr & (uint16_t)0x01FF);
 8005768:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <USART2_IRQHandler+0x510>)
 800576a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <USART2_IRQHandler+0x510>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24
			  huart2.pTxBuffPtr += 2U;
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <USART2_IRQHandler+0x510>)
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	3302      	adds	r3, #2
 800577a:	4a29      	ldr	r2, [pc, #164]	; (8005820 <USART2_IRQHandler+0x510>)
 800577c:	6513      	str	r3, [r2, #80]	; 0x50
 800577e:	e008      	b.n	8005792 <USART2_IRQHandler+0x482>
			}else{
			  huart2.Instance->RDR = (uint8_t)(*huart2.pTxBuffPtr++ & (uint8_t)0x00FF);
 8005780:	4b27      	ldr	r3, [pc, #156]	; (8005820 <USART2_IRQHandler+0x510>)
 8005782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	4926      	ldr	r1, [pc, #152]	; (8005820 <USART2_IRQHandler+0x510>)
 8005788:	650a      	str	r2, [r1, #80]	; 0x50
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	4b24      	ldr	r3, [pc, #144]	; (8005820 <USART2_IRQHandler+0x510>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if (--huart2.TxXferCount == 0U) {
 8005792:	4b23      	ldr	r3, [pc, #140]	; (8005820 <USART2_IRQHandler+0x510>)
 8005794:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29b      	uxth	r3, r3
 800579e:	4a20      	ldr	r2, [pc, #128]	; (8005820 <USART2_IRQHandler+0x510>)
 80057a0:	4619      	mov	r1, r3
 80057a2:	f8a2 1056 	strh.w	r1, [r2, #86]	; 0x56
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d135      	bne.n	8005816 <USART2_IRQHandler+0x506>
			  __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);		/* Disable the UART Transmit Complete Interrupt */
 80057aa:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <USART2_IRQHandler+0x510>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <USART2_IRQHandler+0x510>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057b8:	601a      	str	r2, [r3, #0]
			  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);		/* Enable the UART Transmit Complete Interrupt */
 80057ba:	4b19      	ldr	r3, [pc, #100]	; (8005820 <USART2_IRQHandler+0x510>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <USART2_IRQHandler+0x510>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c8:	601a      	str	r2, [r3, #0]
			}
		  }
		 return;
 80057ca:	e024      	b.n	8005816 <USART2_IRQHandler+0x506>
	   }

	   /* UART in mode Transmitter end --------------------------------------------*/
	   if (((isrflags & USART_ISR_TC) != RESET) && ((huart2.Instance->CR1 & USART_CR1_TCIE) != RESET))
 80057cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <USART2_IRQHandler+0x4f4>
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <USART2_IRQHandler+0x510>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00f      	beq.n	8005804 <USART2_IRQHandler+0x4f4>
	   {
		   huart2.gState = HAL_UART_STATE_READY;		/* Tx process is ended, restore huart->gState to Ready */
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <USART2_IRQHandler+0x510>)
 80057e6:	2220      	movs	r2, #32
 80057e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		   __HAL_UART_DISABLE_IT(&huart2, UART_IT_TC);	/* Disable the UART Transmit Complete Interrupt */
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <USART2_IRQHandler+0x510>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <USART2_IRQHandler+0x510>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057fa:	601a      	str	r2, [r3, #0]
		   HAL_UART_TxCpltCallback(&huart2);			/*Call legacy weak Tx complete callback*/
 80057fc:	4808      	ldr	r0, [pc, #32]	; (8005820 <USART2_IRQHandler+0x510>)
 80057fe:	f000 f8f9 	bl	80059f4 <HAL_UART_TxCpltCallback>
		 return;
 8005802:	e009      	b.n	8005818 <USART2_IRQHandler+0x508>
	   }
	   (void)tmpreg;
 8005804:	4b07      	ldr	r3, [pc, #28]	; (8005824 <USART2_IRQHandler+0x514>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	e006      	b.n	8005818 <USART2_IRQHandler+0x508>

	}else{
		MBS_Receive(&gVar.mbSerial);
 800580a:	4807      	ldr	r0, [pc, #28]	; (8005828 <USART2_IRQHandler+0x518>)
 800580c:	f00c fffc 	bl	8012808 <MBS_Receive>
 8005810:	e002      	b.n	8005818 <USART2_IRQHandler+0x508>
		 return;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <USART2_IRQHandler+0x508>
		 return;
 8005816:	bf00      	nop
	}

//	DBG_SPRINT_NL("RTU_RX:");

}
 8005818:	3750      	adds	r7, #80	; 0x50
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	24005bbc 	.word	0x24005bbc
 8005824:	24000864 	.word	0x24000864
 8005828:	240026d8 	.word	0x240026d8

0800582c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005830:	4802      	ldr	r0, [pc, #8]	; (800583c <DMA2_Stream0_IRQHandler+0x10>)
 8005832:	f014 faaf 	bl	8019d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	24005328 	.word	0x24005328

08005840 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005844:	4802      	ldr	r0, [pc, #8]	; (8005850 <DMA2_Stream1_IRQHandler+0x10>)
 8005846:	f014 faa5 	bl	8019d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	24005910 	.word	0x24005910

08005854 <HAL_UARTEx_RxEventCallback>:

/**
  * @brief This function handles USART6 DMA Rx Event interrupt.
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a57      	ldr	r2, [pc, #348]	; (80059c4 <HAL_UARTEx_RxEventCallback+0x170>)
 8005866:	4293      	cmp	r3, r2
 8005868:	f040 809c 	bne.w	80059a4 <HAL_UARTEx_RxEventCallback+0x150>
		if(gVar.mbSerial.protocol == MBS_PROTO_RTU_CLUSTER_DMA){
 800586c:	4b56      	ldr	r3, [pc, #344]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800586e:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 8005872:	2b02      	cmp	r3, #2
 8005874:	f040 8096 	bne.w	80059a4 <HAL_UARTEx_RxEventCallback+0x150>
//			rtuRxCount++; //TODO: to remove

//			DIO_WRITE_PIN_SET(RS485_RX_LED_GPIO_Port, RS485_RX_LED_Pin);
			//TODO: to implement LED with IOExtender

			gVar.mbSerial.rxBuffSize = Size;
 8005878:	4a53      	ldr	r2, [pc, #332]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800587a:	887b      	ldrh	r3, [r7, #2]
 800587c:	f8a2 38aa 	strh.w	r3, [r2, #2218]	; 0x8aa
//			MBS_ChackRcvdFrame(&gVar.mbSerial, &gVar.mbRTUSlave);
			gVar.mbSerial.frameOkFlag = 0U;
 8005880:	4b51      	ldr	r3, [pc, #324]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005882:	2200      	movs	r2, #0
 8005884:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
			//Check the slave address and CRC
			if(gVar.mbSerial.rxBuffSize >= (MBS_RTU_PDU_MIN_SIZE-1U)){		// if the buffer size is less than the max buffer size
 8005888:	4b4f      	ldr	r3, [pc, #316]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800588a:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 800588e:	2b02      	cmp	r3, #2
 8005890:	d963      	bls.n	800595a <HAL_UARTEx_RxEventCallback+0x106>
				gVar.mbHandle->diag.bus_msg_count++;
 8005892:	4b4d      	ldr	r3, [pc, #308]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005894:	f8d3 3684 	ldr.w	r3, [r3, #1668]	; 0x684
 8005898:	8a5a      	ldrh	r2, [r3, #18]
 800589a:	3201      	adds	r2, #1
 800589c:	b292      	uxth	r2, r2
 800589e:	825a      	strh	r2, [r3, #18]
				if(gVar.mbSerial.rxBuff[MB_SA_INDEX] == gVar.mbRTUSlave.slave_address
 80058a0:	4b49      	ldr	r3, [pc, #292]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 80058a2:	f893 26aa 	ldrb.w	r2, [r3, #1706]	; 0x6aa
 80058a6:	4b48      	ldr	r3, [pc, #288]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 80058a8:	f893 38c8 	ldrb.w	r3, [r3, #2248]	; 0x8c8
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d004      	beq.n	80058ba <HAL_UARTEx_RxEventCallback+0x66>
					|| gVar.mbSerial.rxBuff[MB_SA_INDEX] == MB_BROADCAST_ADDR){			// if slave address is matched
 80058b0:	4b45      	ldr	r3, [pc, #276]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 80058b2:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d14f      	bne.n	800595a <HAL_UARTEx_RxEventCallback+0x106>

					uint16_t receivedCRC16 = (gVar.mbSerial.rxBuff[gVar.mbSerial.rxBuffSize-1] << 8) | gVar.mbSerial.rxBuff[gVar.mbSerial.rxBuffSize-2];
 80058ba:	4b43      	ldr	r3, [pc, #268]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 80058bc:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 80058c0:	3b01      	subs	r3, #1
 80058c2:	4a41      	ldr	r2, [pc, #260]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 80058c4:	4413      	add	r3, r2
 80058c6:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	b21a      	sxth	r2, r3
 80058ce:	4b3e      	ldr	r3, [pc, #248]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 80058d0:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 80058d4:	3b02      	subs	r3, #2
 80058d6:	493c      	ldr	r1, [pc, #240]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 80058d8:	440b      	add	r3, r1
 80058da:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 80058de:	b21b      	sxth	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b21b      	sxth	r3, r3
 80058e4:	81fb      	strh	r3, [r7, #14]
					if(receivedCRC16 == MB_CalcCRC16(gVar.mbSerial.rxBuff, gVar.mbSerial.rxBuffSize-2)){//MB_CRCCheck(gVar.mbSerial.rxBuff, gVar.mbSerial.rxBuffSize)){
 80058e6:	4b38      	ldr	r3, [pc, #224]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 80058e8:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 80058ec:	3b02      	subs	r3, #2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	4836      	ldr	r0, [pc, #216]	; (80059cc <HAL_UARTEx_RxEventCallback+0x178>)
 80058f4:	f009 fb80 	bl	800eff8 <MB_CalcCRC16>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	89fb      	ldrh	r3, [r7, #14]
 80058fe:	4293      	cmp	r3, r2
 8005900:	d11a      	bne.n	8005938 <HAL_UARTEx_RxEventCallback+0xe4>
						gVar.mbRTUSlave.rxBuffer = &gVar.mbSerial.rxBuff[0];
 8005902:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005904:	4a31      	ldr	r2, [pc, #196]	; (80059cc <HAL_UARTEx_RxEventCallback+0x178>)
 8005906:	f8c3 28cc 	str.w	r2, [r3, #2252]	; 0x8cc
						gVar.mbRTUSlave.txBuffer = &gVar.mbSerial.txBuff[0];
 800590a:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800590c:	4a30      	ldr	r2, [pc, #192]	; (80059d0 <HAL_UARTEx_RxEventCallback+0x17c>)
 800590e:	f8c3 28d0 	str.w	r2, [r3, #2256]	; 0x8d0
						gVar.mbRTUSlave.rxBufferSize = gVar.mbSerial.rxBuffSize;
 8005912:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005914:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4b2b      	ldr	r3, [pc, #172]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800591c:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
						gVar.mbRTUSlave.txBufferSize = gVar.mbSerial.txBuffSize;
 8005920:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005922:	f8b3 38ac 	ldrh.w	r3, [r3, #2220]	; 0x8ac
 8005926:	b2da      	uxtb	r2, r3
 8005928:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800592a:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
						gVar.mbSerial.frameOkFlag=1;
 800592e:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005930:	2201      	movs	r2, #1
 8005932:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 8005936:	e00a      	b.n	800594e <HAL_UARTEx_RxEventCallback+0xfa>
					}else{
						gVar.mbSerial.frameOkFlag = 0;
 8005938:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800593a:	2200      	movs	r2, #0
 800593c:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
						gVar.mbHandle->diag.bus_com_err_count++;	// counts the quantity of CRC errors encountered by the slave since its last restart
 8005940:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005942:	f8d3 3684 	ldr.w	r3, [r3, #1668]	; 0x684
 8005946:	8a9a      	ldrh	r2, [r3, #20]
 8005948:	3201      	adds	r2, #1
 800594a:	b292      	uxth	r2, r2
 800594c:	829a      	strh	r2, [r3, #20]
					}
					gVar.mbHandle->busy_status = MB_STATUS_OK;
 800594e:	4b1e      	ldr	r3, [pc, #120]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005950:	f8d3 3684 	ldr.w	r3, [r3, #1668]	; 0x684
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2020 	strb.w	r2, [r3, #32]
				}
			}

			// Stop receiving and process the data
			MBS_StopReceiving(&gVar.mbSerial);
 800595a:	481e      	ldr	r0, [pc, #120]	; (80059d4 <HAL_UARTEx_RxEventCallback+0x180>)
 800595c:	f00c ffd4 	bl	8012908 <MBS_StopReceiving>

	//		DEBUG_SPRINT("\r\nR:(%d)",serial->rxBuffSize);
			if(gVar.mbSerial.rxBuffSize <= MB_PDU_MIN_SIZE || gVar.mbSerial.rxBuffSize >= MB_PDU_MAX_SIZE){
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005962:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 8005966:	2b04      	cmp	r3, #4
 8005968:	d904      	bls.n	8005974 <HAL_UARTEx_RxEventCallback+0x120>
 800596a:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800596c:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 8005970:	2bff      	cmp	r3, #255	; 0xff
 8005972:	d908      	bls.n	8005986 <HAL_UARTEx_RxEventCallback+0x132>
				gVar.mbSerial.rxBuffSize = 0 ;
 8005974:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005976:	2200      	movs	r2, #0
 8005978:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
				gVar.mbSerial.isDataReceived = 0U;
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800597e:	2200      	movs	r2, #0
 8005980:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 8005984:	e005      	b.n	8005992 <HAL_UARTEx_RxEventCallback+0x13e>
			}else{
				gVar.mbSerial.isDataReceived = 1U;
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 8005988:	2201      	movs	r2, #1
 800598a:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
				TH_MBSerial();
 800598e:	f004 fe67 	bl	800a660 <TH_MBSerial>
			}

			MB_UartReceiveDMA(gVar.mbSerial.rxBuff, MB_PDU_MAX_SIZE);
 8005992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005996:	480d      	ldr	r0, [pc, #52]	; (80059cc <HAL_UARTEx_RxEventCallback+0x178>)
 8005998:	f00d fb8c 	bl	80130b4 <MB_UartReceiveDMA>
			gVar.mbSerial.isFreeze = 0;
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b

		}
	}


	if(huart->Instance == UART5){
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a0b      	ldr	r2, [pc, #44]	; (80059d8 <HAL_UARTEx_RxEventCallback+0x184>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d105      	bne.n	80059ba <HAL_UARTEx_RxEventCallback+0x166>
		L6360_UartRxcIRQ(&gVar.iolm.port[IOL_PI_0],0,Size);
 80059ae:	887b      	ldrh	r3, [r7, #2]
 80059b0:	461a      	mov	r2, r3
 80059b2:	2100      	movs	r1, #0
 80059b4:	4809      	ldr	r0, [pc, #36]	; (80059dc <HAL_UARTEx_RxEventCallback+0x188>)
 80059b6:	f009 fa63 	bl	800ee80 <L6360_UartRxcIRQ>
//		DBG_SPRINT_NL("RX[%d]:%02X %02X", Size, gVar.iolm.port[IOL_PI_0].uart.rxBuf[0], gVar.iolm.port[IOL_PI_0].uart.rxBuf[1]);
	}
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40004400 	.word	0x40004400
 80059c8:	24002050 	.word	0x24002050
 80059cc:	240026fa 	.word	0x240026fa
 80059d0:	240027fa 	.word	0x240027fa
 80059d4:	240026d8 	.word	0x240026d8
 80059d8:	40005000 	.word	0x40005000
 80059dc:	24004658 	.word	0x24004658

080059e0 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
//	if(huart->Instance == USART1){
//		__HAL_UAGET
//		L6360_UartRxcIRQ(&gVar.iolm.port[IOL_PI_0],0,0);
//	}

}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_UART_TxCpltCallback>:


/* UART DMA transfer complete callback for TX */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <HAL_UART_TxCpltCallback+0x68>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d11e      	bne.n	8005a44 <HAL_UART_TxCpltCallback+0x50>
		if(gVar.mbSerial.protocol == MBS_PROTO_RTU_CLUSTER_DMA){
 8005a06:	4b16      	ldr	r3, [pc, #88]	; (8005a60 <HAL_UART_TxCpltCallback+0x6c>)
 8005a08:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d119      	bne.n	8005a44 <HAL_UART_TxCpltCallback+0x50>
			for(uint32_t i = 0; i <  50; i++){
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e003      	b.n	8005a1e <HAL_UART_TxCpltCallback+0x2a>
				__NOP();
 8005a16:	bf00      	nop
			for(uint32_t i = 0; i <  50; i++){
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b31      	cmp	r3, #49	; 0x31
 8005a22:	d9f8      	bls.n	8005a16 <HAL_UART_TxCpltCallback+0x22>
			};
			MBS_AllCmpltTxCallback(&gVar.mbSerial, MB_getSCRAddress(), 0);
 8005a24:	f00a fea6 	bl	8010774 <MB_getSCRAddress>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	480d      	ldr	r0, [pc, #52]	; (8005a64 <HAL_UART_TxCpltCallback+0x70>)
 8005a30:	f00d f876 	bl	8012b20 <MBS_AllCmpltTxCallback>
//			dbug.enable = 1;

			DIO_WRITE_PIN_RESET(RS485_DIR_GPIO_Port, RS485_DIR_Pin);
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <HAL_UART_TxCpltCallback+0x74>)
 8005a36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a3a:	619a      	str	r2, [r3, #24]
//			DIO_WRITE_PIN_RESET(RS485_TX_LED_GPIO_Port, RS485_TX_LED_Pin);
			//TODO: to implement LED with IOExtender
			gVar.mbSerial.isSending = 0;
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <HAL_UART_TxCpltCallback+0x6c>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e

		}
	}
	if(huart->Instance == USART1){
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <HAL_UART_TxCpltCallback+0x78>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d102      	bne.n	8005a54 <HAL_UART_TxCpltCallback+0x60>
		L6360_UartTxcIRQ(&gVar.iolm.port[IOL_PI_0]);
 8005a4e:	4808      	ldr	r0, [pc, #32]	; (8005a70 <HAL_UART_TxCpltCallback+0x7c>)
 8005a50:	f009 fa0b 	bl	800ee6a <L6360_UartTxcIRQ>
	}
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40004400 	.word	0x40004400
 8005a60:	24002050 	.word	0x24002050
 8005a64:	240026d8 	.word	0x240026d8
 8005a68:	58021000 	.word	0x58021000
 8005a6c:	40011000 	.word	0x40011000
 8005a70:	24004658 	.word	0x24004658

08005a74 <HAL_UART_ErrorCallback>:
 *	0x00000002U  = Noise error
 *	0x00000004U  = Frame error
 *	0x00000008U  = Overrun error
 *	0x00000010U  = DMA transfer error
 * */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b092      	sub	sp, #72	; 0x48
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a9f      	ldr	r2, [pc, #636]	; (8005d00 <HAL_UART_ErrorCallback+0x28c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	f040 8170 	bne.w	8005d68 <HAL_UART_ErrorCallback+0x2f4>
		char str[50] = {0};
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	f107 0310 	add.w	r3, r7, #16
 8005a90:	222e      	movs	r2, #46	; 0x2e
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f020 fe4d 	bl	8026734 <memset>

		uint16_t len = DBG_SPRINT_APPEND(str,"UartErr: %02X, Rx:%02x, TX:%02X", huart->ErrorCode, huart->hdmarx->ErrorCode, huart->hdmatx->ErrorCode);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	f107 000c 	add.w	r0, r7, #12
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4993      	ldr	r1, [pc, #588]	; (8005d04 <HAL_UART_ErrorCallback+0x290>)
 8005ab6:	f008 f901 	bl	800dcbc <DBG_SPRINT_APPEND>
 8005aba:	4603      	mov	r3, r0
 8005abc:	87fb      	strh	r3, [r7, #62]	; 0x3e
		len += DBG_SPRINT_APPEND(&str[len],", ISR: %08X : ",huart->Instance->ISR);
 8005abe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ac0:	f107 020c 	add.w	r2, r7, #12
 8005ac4:	18d0      	adds	r0, r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	461a      	mov	r2, r3
 8005ace:	498e      	ldr	r1, [pc, #568]	; (8005d08 <HAL_UART_ErrorCallback+0x294>)
 8005ad0:	f008 f8f4 	bl	800dcbc <DBG_SPRINT_APPEND>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ada:	4413      	add	r3, r2
 8005adc:	87fb      	strh	r3, [r7, #62]	; 0x3e
			if(  huart->ErrorCode & HAL_UART_ERROR_NONE){
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
				len += DBG_SPRINT_APPEND(&str[len],"None");
			}if(  huart->ErrorCode & HAL_UART_ERROR_FE){
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00c      	beq.n	8005b0c <HAL_UART_ErrorCallback+0x98>
				len += DBG_SPRINT_APPEND(&str[len],"FE,");
 8005af2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005af4:	f107 020c 	add.w	r2, r7, #12
 8005af8:	4413      	add	r3, r2
 8005afa:	4984      	ldr	r1, [pc, #528]	; (8005d0c <HAL_UART_ErrorCallback+0x298>)
 8005afc:	4618      	mov	r0, r3
 8005afe:	f008 f8dd 	bl	800dcbc <DBG_SPRINT_APPEND>
 8005b02:	4603      	mov	r3, r0
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b08:	4413      	add	r3, r2
 8005b0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}if(  huart->ErrorCode & HAL_UART_ERROR_NE){
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_UART_ErrorCallback+0xc0>
				len += DBG_SPRINT_APPEND(&str[len],"NE,");
 8005b1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b1c:	f107 020c 	add.w	r2, r7, #12
 8005b20:	4413      	add	r3, r2
 8005b22:	497b      	ldr	r1, [pc, #492]	; (8005d10 <HAL_UART_ErrorCallback+0x29c>)
 8005b24:	4618      	mov	r0, r3
 8005b26:	f008 f8c9 	bl	800dcbc <DBG_SPRINT_APPEND>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b30:	4413      	add	r3, r2
 8005b32:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}if(  huart->ErrorCode &  HAL_UART_ERROR_ORE){
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d010      	beq.n	8005b64 <HAL_UART_ErrorCallback+0xf0>
				__HAL_UART_CLEAR_OREFLAG(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2208      	movs	r2, #8
 8005b48:	621a      	str	r2, [r3, #32]
				len += DBG_SPRINT_APPEND(&str[len],"ORE,");
 8005b4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b4c:	f107 020c 	add.w	r2, r7, #12
 8005b50:	4413      	add	r3, r2
 8005b52:	4970      	ldr	r1, [pc, #448]	; (8005d14 <HAL_UART_ErrorCallback+0x2a0>)
 8005b54:	4618      	mov	r0, r3
 8005b56:	f008 f8b1 	bl	800dcbc <DBG_SPRINT_APPEND>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b60:	4413      	add	r3, r2
 8005b62:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}if(  huart->ErrorCode &  HAL_UART_ERROR_PE){
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_UART_ErrorCallback+0x118>
				len += DBG_SPRINT_APPEND(&str[len],"PE,");
 8005b72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b74:	f107 020c 	add.w	r2, r7, #12
 8005b78:	4413      	add	r3, r2
 8005b7a:	4967      	ldr	r1, [pc, #412]	; (8005d18 <HAL_UART_ErrorCallback+0x2a4>)
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f008 f89d 	bl	800dcbc <DBG_SPRINT_APPEND>
 8005b82:	4603      	mov	r3, r0
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b88:	4413      	add	r3, r2
 8005b8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}if(  huart->ErrorCode &  HAL_UART_ERROR_RTO){
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_UART_ErrorCallback+0x140>
				len += DBG_SPRINT_APPEND(&str[len],"RTO,");
 8005b9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b9c:	f107 020c 	add.w	r2, r7, #12
 8005ba0:	4413      	add	r3, r2
 8005ba2:	495e      	ldr	r1, [pc, #376]	; (8005d1c <HAL_UART_ErrorCallback+0x2a8>)
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f008 f889 	bl	800dcbc <DBG_SPRINT_APPEND>
 8005baa:	4603      	mov	r3, r0
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005bb0:	4413      	add	r3, r2
 8005bb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}if(  huart->ErrorCode &  HAL_UART_ERROR_DMA){
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00c      	beq.n	8005bdc <HAL_UART_ErrorCallback+0x168>
				len += DBG_SPRINT_APPEND(&str[len],"DMA,");
 8005bc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005bc4:	f107 020c 	add.w	r2, r7, #12
 8005bc8:	4413      	add	r3, r2
 8005bca:	4955      	ldr	r1, [pc, #340]	; (8005d20 <HAL_UART_ErrorCallback+0x2ac>)
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f008 f875 	bl	800dcbc <DBG_SPRINT_APPEND>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005bd8:	4413      	add	r3, r2
 8005bda:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}
		DBG_PRINT(str);
 8005bdc:	f107 030c 	add.w	r3, r7, #12
 8005be0:	4618      	mov	r0, r3
 8005be2:	f007 ffe1 	bl	800dba8 <DBG_PRINT>
//		MX_USART1_UART_Init(); // todo: to replace
		__HAL_UART_ENABLE_IT(huart, UART_FLAG_TC);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	605a      	str	r2, [r3, #4]
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0210 	orr.w	r2, r2, #16
 8005c04:	601a      	str	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(huart, gVar.iolm.port[0].uart.rxBuf, 256);
 8005c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c0a:	4946      	ldr	r1, [pc, #280]	; (8005d24 <HAL_UART_ErrorCallback+0x2b0>)
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f020 fbe0 	bl	80263d2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a43      	ldr	r2, [pc, #268]	; (8005d28 <HAL_UART_ErrorCallback+0x2b4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d059      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a41      	ldr	r2, [pc, #260]	; (8005d2c <HAL_UART_ErrorCallback+0x2b8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d053      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3f      	ldr	r2, [pc, #252]	; (8005d30 <HAL_UART_ErrorCallback+0x2bc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d04d      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a3d      	ldr	r2, [pc, #244]	; (8005d34 <HAL_UART_ErrorCallback+0x2c0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d047      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a3b      	ldr	r2, [pc, #236]	; (8005d38 <HAL_UART_ErrorCallback+0x2c4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d041      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a39      	ldr	r2, [pc, #228]	; (8005d3c <HAL_UART_ErrorCallback+0x2c8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d03b      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a37      	ldr	r2, [pc, #220]	; (8005d40 <HAL_UART_ErrorCallback+0x2cc>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d035      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a35      	ldr	r2, [pc, #212]	; (8005d44 <HAL_UART_ErrorCallback+0x2d0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d02f      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a33      	ldr	r2, [pc, #204]	; (8005d48 <HAL_UART_ErrorCallback+0x2d4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d029      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a31      	ldr	r2, [pc, #196]	; (8005d4c <HAL_UART_ErrorCallback+0x2d8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d023      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2f      	ldr	r2, [pc, #188]	; (8005d50 <HAL_UART_ErrorCallback+0x2dc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01d      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2d      	ldr	r2, [pc, #180]	; (8005d54 <HAL_UART_ErrorCallback+0x2e0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d017      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a2b      	ldr	r2, [pc, #172]	; (8005d58 <HAL_UART_ErrorCallback+0x2e4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d011      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a29      	ldr	r2, [pc, #164]	; (8005d5c <HAL_UART_ErrorCallback+0x2e8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00b      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a27      	ldr	r2, [pc, #156]	; (8005d60 <HAL_UART_ErrorCallback+0x2ec>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d005      	beq.n	8005cd2 <HAL_UART_ErrorCallback+0x25e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a25      	ldr	r2, [pc, #148]	; (8005d64 <HAL_UART_ErrorCallback+0x2f0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_UART_ErrorCallback+0x274>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0208 	bic.w	r2, r2, #8
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e04b      	b.n	8005d80 <HAL_UART_ErrorCallback+0x30c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0204 	bic.w	r2, r2, #4
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	e040      	b.n	8005d80 <HAL_UART_ErrorCallback+0x30c>
 8005cfe:	bf00      	nop
 8005d00:	40011000 	.word	0x40011000
 8005d04:	08029f6c 	.word	0x08029f6c
 8005d08:	08029f8c 	.word	0x08029f8c
 8005d0c:	08029f9c 	.word	0x08029f9c
 8005d10:	08029fa0 	.word	0x08029fa0
 8005d14:	08029fa4 	.word	0x08029fa4
 8005d18:	08029fac 	.word	0x08029fac
 8005d1c:	08029fb0 	.word	0x08029fb0
 8005d20:	08029fb8 	.word	0x08029fb8
 8005d24:	2400466c 	.word	0x2400466c
 8005d28:	40020010 	.word	0x40020010
 8005d2c:	40020028 	.word	0x40020028
 8005d30:	40020040 	.word	0x40020040
 8005d34:	40020058 	.word	0x40020058
 8005d38:	40020070 	.word	0x40020070
 8005d3c:	40020088 	.word	0x40020088
 8005d40:	400200a0 	.word	0x400200a0
 8005d44:	400200b8 	.word	0x400200b8
 8005d48:	40020410 	.word	0x40020410
 8005d4c:	40020428 	.word	0x40020428
 8005d50:	40020440 	.word	0x40020440
 8005d54:	40020458 	.word	0x40020458
 8005d58:	40020470 	.word	0x40020470
 8005d5c:	40020488 	.word	0x40020488
 8005d60:	400204a0 	.word	0x400204a0
 8005d64:	400204b8 	.word	0x400204b8
	}else if(huart->Instance == USART3){
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_UART_ErrorCallback+0x378>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d106      	bne.n	8005d80 <HAL_UART_ErrorCallback+0x30c>
		DBG_SPRINT_NL("DBG: ERR: %d",huart->ErrorCode);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d78:	4619      	mov	r1, r3
 8005d7a:	481d      	ldr	r0, [pc, #116]	; (8005df0 <HAL_UART_ErrorCallback+0x37c>)
 8005d7c:	f007 ff62 	bl	800dc44 <DBG_SPRINT_NL>
	}
	if (huart->Instance == USART2) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_UART_ErrorCallback+0x380>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d12d      	bne.n	8005de6 <HAL_UART_ErrorCallback+0x372>
		if(huart->ErrorCode == 0U) return;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d027      	beq.n	8005de4 <HAL_UART_ErrorCallback+0x370>

		rtuErrCount++;
 8005d94:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_UART_ErrorCallback+0x384>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <HAL_UART_ErrorCallback+0x384>)
 8005d9c:	6013      	str	r3, [r2, #0]

		gVar.mbSerial.errorCode = huart->ErrorCode;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da4:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <HAL_UART_ErrorCallback+0x388>)
 8005da6:	f8c2 38b0 	str.w	r3, [r2, #2224]	; 0x8b0
		gVar.diag.rtuBus.ErrCode = huart->ErrorCode;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <HAL_UART_ErrorCallback+0x388>)
 8005db4:	835a      	strh	r2, [r3, #26]
		gVar.diag.rtuBus.dmaRxErrCode = huart->hdmarx->ErrorCode;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <HAL_UART_ErrorCallback+0x388>)
 8005dc0:	831a      	strh	r2, [r3, #24]
		gVar.diag.rtuBus.dmaTxErrCode = huart->hdmatx->ErrorCode;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <HAL_UART_ErrorCallback+0x388>)
 8005dcc:	82da      	strh	r2, [r3, #22]

		if(gVar.mbSerial.protocol == MBS_PROTO_RTU_CLUSTER_DMA){
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_UART_ErrorCallback+0x388>)
 8005dd0:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d106      	bne.n	8005de6 <HAL_UART_ErrorCallback+0x372>
			MB_UartReceiveDMA(gVar.mbSerial.rxBuff, MB_PDU_MAX_SIZE);
 8005dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ddc:	4808      	ldr	r0, [pc, #32]	; (8005e00 <HAL_UART_ErrorCallback+0x38c>)
 8005dde:	f00d f969 	bl	80130b4 <MB_UartReceiveDMA>
 8005de2:	e000      	b.n	8005de6 <HAL_UART_ErrorCallback+0x372>
		if(huart->ErrorCode == 0U) return;
 8005de4:	bf00      	nop
		}
	}

}
 8005de6:	3740      	adds	r7, #64	; 0x40
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40004800 	.word	0x40004800
 8005df0:	08029fc0 	.word	0x08029fc0
 8005df4:	40004400 	.word	0x40004400
 8005df8:	240008c8 	.word	0x240008c8
 8005dfc:	24002050 	.word	0x24002050
 8005e00:	240026fa 	.word	0x240026fa

08005e04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0

	// input capture for channel 1
	 if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 8005e08:	4b51      	ldr	r3, [pc, #324]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d129      	bne.n	8005e6a <TIM3_IRQHandler+0x66>
	  {
		__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1);
 8005e16:	4b4e      	ldr	r3, [pc, #312]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f06f 0202 	mvn.w	r2, #2
 8005e1e:	611a      	str	r2, [r3, #16]
		/* Input capture event */
		if ((htim3.Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e20:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01d      	beq.n	8005e6a <TIM3_IRQHandler+0x66>
		{
//		  HAL_TIM_IC_CaptureCallback(htim);
			gVar.dio.di[DI_1].pulseInf.lastEdgeTime = gVar.dio.di[DI_1].pulseInf.edgeTime;
 8005e2e:	4a49      	ldr	r2, [pc, #292]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005e30:	f242 2370 	movw	r3, #8816	; 0x2270
 8005e34:	4413      	add	r3, r2
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4946      	ldr	r1, [pc, #280]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005e3a:	f242 2374 	movw	r3, #8820	; 0x2274
 8005e3e:	440b      	add	r3, r1
 8005e40:	601a      	str	r2, [r3, #0]
			gVar.dio.di[DI_1].pulseInf.edgeTime = htim3.Instance->CCR1;
 8005e42:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e48:	4942      	ldr	r1, [pc, #264]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005e4a:	f242 2370 	movw	r3, #8816	; 0x2270
 8005e4e:	440b      	add	r3, r1
 8005e50:	601a      	str	r2, [r3, #0]
			gVar.dio.di[DI_1].pulseInf.isEdgeDtctd = 1;
 8005e52:	4a40      	ldr	r2, [pc, #256]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005e54:	f242 2382 	movw	r3, #8834	; 0x2282
 8005e58:	4413      	add	r3, r2
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
			gVar.dio.di[DI_1].pulseInf.isPulseDtctd = 1;
 8005e5e:	4a3d      	ldr	r2, [pc, #244]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005e60:	f242 2383 	movw	r3, #8835	; 0x2283
 8005e64:	4413      	add	r3, r2
 8005e66:	2201      	movs	r2, #1
 8005e68:	701a      	strb	r2, [r3, #0]
		}
	  }
	 // input capture for channel 2
	  /* Capture compare 2 event */
	  if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC2) != RESET)
 8005e6a:	4b39      	ldr	r3, [pc, #228]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d129      	bne.n	8005ecc <TIM3_IRQHandler+0xc8>
	  {
	      __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC2);
 8005e78:	4b35      	ldr	r3, [pc, #212]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0204 	mvn.w	r2, #4
 8005e80:	611a      	str	r2, [r3, #16]
	      /* Input capture event */
	      if ((htim3.Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e82:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01d      	beq.n	8005ecc <TIM3_IRQHandler+0xc8>
	      {
//	    	HAL_TIM_IC_CaptureCallback(htim);
			gVar.dio.di[DI_2].pulseInf.lastEdgeTime = gVar.dio.di[DI_2].pulseInf.edgeTime;
 8005e90:	4a30      	ldr	r2, [pc, #192]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005e92:	f242 23b0 	movw	r3, #8880	; 0x22b0
 8005e96:	4413      	add	r3, r2
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	492e      	ldr	r1, [pc, #184]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005e9c:	f242 23b4 	movw	r3, #8884	; 0x22b4
 8005ea0:	440b      	add	r3, r1
 8005ea2:	601a      	str	r2, [r3, #0]
			gVar.dio.di[DI_2].pulseInf.edgeTime = htim3.Instance->CCR2;
 8005ea4:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eaa:	492a      	ldr	r1, [pc, #168]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005eac:	f242 23b0 	movw	r3, #8880	; 0x22b0
 8005eb0:	440b      	add	r3, r1
 8005eb2:	601a      	str	r2, [r3, #0]
			gVar.dio.di[DI_2].pulseInf.isEdgeDtctd = 1;
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005eb6:	f242 23c2 	movw	r3, #8898	; 0x22c2
 8005eba:	4413      	add	r3, r2
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]
			gVar.dio.di[DI_2].pulseInf.isPulseDtctd = 1;
 8005ec0:	4a24      	ldr	r2, [pc, #144]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005ec2:	f242 23c3 	movw	r3, #8899	; 0x22c3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	2201      	movs	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]
	      }
	  }


	/*To capture and count the overflow*/
	if ((htim3.Instance->SR & TIM_FLAG_UPDATE) == TIM_FLAG_UPDATE)
 8005ecc:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d134      	bne.n	8005f44 <TIM3_IRQHandler+0x140>
	  {
		htim3.Instance->SR = ~TIM_IT_UPDATE;//((0x1UL << (0U))));
 8005eda:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <TIM3_IRQHandler+0x14c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0201 	mvn.w	r2, #1
 8005ee2:	611a      	str	r2, [r3, #16]
//		TH_DICaptureOverflow(&htim3);
		if(gVar.dio.di[DI_1].config.mode == DI_MODE_PULSE_CAPTURE && gVar.dio.di[DI_1].config.counterType == DI_COUNT_TYPE_TIMER ){
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005ee6:	f242 2348 	movw	r3, #8776	; 0x2248
 8005eea:	4413      	add	r3, r2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d110      	bne.n	8005f14 <TIM3_IRQHandler+0x110>
 8005ef2:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005ef4:	f242 2349 	movw	r3, #8777	; 0x2249
 8005ef8:	4413      	add	r3, r2
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d109      	bne.n	8005f14 <TIM3_IRQHandler+0x110>
			gVar.dio.di[DI_1].pulseInf.countOVF++;
 8005f00:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005f02:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005f0e:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
 8005f12:	801a      	strh	r2, [r3, #0]
		}

		if(gVar.dio.di[DI_2].config.mode == DI_MODE_PULSE_CAPTURE && gVar.dio.di[DI_2].config.counterType == DI_COUNT_TYPE_TIMER ){
 8005f14:	4a0f      	ldr	r2, [pc, #60]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005f16:	f242 2388 	movw	r3, #8840	; 0x2288
 8005f1a:	4413      	add	r3, r2
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d110      	bne.n	8005f44 <TIM3_IRQHandler+0x140>
 8005f22:	4a0c      	ldr	r2, [pc, #48]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005f24:	f242 2389 	movw	r3, #8841	; 0x2289
 8005f28:	4413      	add	r3, r2
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d109      	bne.n	8005f44 <TIM3_IRQHandler+0x140>
			gVar.dio.di[DI_2].pulseInf.countOVF++;
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005f32:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <TIM3_IRQHandler+0x150>)
 8005f3e:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
 8005f42:	801a      	strh	r2, [r3, #0]
	  }


//  HAL_TIM_IRQHandler(&htim3);

}
 8005f44:	bf00      	nop
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	240055e4 	.word	0x240055e4
 8005f54:	24002050 	.word	0x24002050

08005f58 <I2C1_EV_IRQHandler>:
/*I2C1 IRQs----------*/
/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0

  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005f5c:	4802      	ldr	r0, [pc, #8]	; (8005f68 <I2C1_EV_IRQHandler+0x10>)
 8005f5e:	f016 fb19 	bl	801c594 <HAL_I2C_EV_IRQHandler>
}
 8005f62:	bf00      	nop
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	24004c84 	.word	0x24004c84

08005f6c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 8005f70:	4802      	ldr	r0, [pc, #8]	; (8005f7c <I2C1_ER_IRQHandler+0x10>)
 8005f72:	f016 fb29 	bl	801c5c8 <HAL_I2C_ER_IRQHandler>
}
 8005f76:	bf00      	nop
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	24004c84 	.word	0x24004c84

08005f80 <HAL_I2C_ErrorCallback>:


/**
  * @brief This function handles I2C1 error callback.
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a11      	ldr	r2, [pc, #68]	; (8005fd4 <HAL_I2C_ErrorCallback+0x54>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d11c      	bne.n	8005fcc <HAL_I2C_ErrorCallback+0x4c>
		/*Process unlock*/
		PCA_UNLOCK(&gVar.ioExt);
 8005f92:	4a11      	ldr	r2, [pc, #68]	; (8005fd8 <HAL_I2C_ErrorCallback+0x58>)
 8005f94:	f242 43f2 	movw	r3, #9458	; 0x24f2
 8005f98:	4413      	add	r3, r2
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]

		 DBG_SPRINT_NL("I2C1_Err: (%d)", hi2c->ErrorCode);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	480d      	ldr	r0, [pc, #52]	; (8005fdc <HAL_I2C_ErrorCallback+0x5c>)
 8005fa6:	f007 fe4d 	bl	800dc44 <DBG_SPRINT_NL>
		 gVar.diag.i2c.ErrCode = hi2c->ErrorCode;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_I2C_ErrorCallback+0x58>)
 8005fb2:	861a      	strh	r2, [r3, #48]	; 0x30
		 gVar.diag.i2c.dmaRxErrCode = hi2c->hdmarx->ErrorCode;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <HAL_I2C_ErrorCallback+0x58>)
 8005fbe:	869a      	strh	r2, [r3, #52]	; 0x34
		 gVar.diag.i2c.dmaTxErrCode = hi2c->hdmatx->ErrorCode;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	4b03      	ldr	r3, [pc, #12]	; (8005fd8 <HAL_I2C_ErrorCallback+0x58>)
 8005fca:	865a      	strh	r2, [r3, #50]	; 0x32
	}
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40005400 	.word	0x40005400
 8005fd8:	24002050 	.word	0x24002050
 8005fdc:	08029fd0 	.word	0x08029fd0

08005fe0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005fe4:	4802      	ldr	r0, [pc, #8]	; (8005ff0 <DMA2_Stream2_IRQHandler+0x10>)
 8005fe6:	f013 fed5 	bl	8019d94 <HAL_DMA_IRQHandler>
}
 8005fea:	bf00      	nop
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	24005568 	.word	0x24005568

08005ff4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005ff8:	4802      	ldr	r0, [pc, #8]	; (8006004 <DMA2_Stream3_IRQHandler+0x10>)
 8005ffa:	f013 fecb 	bl	8019d94 <HAL_DMA_IRQHandler>
}
 8005ffe:	bf00      	nop
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	24005ab4 	.word	0x24005ab4

08006008 <HAL_I2C_MasterTxCpltCallback>:


/**
  * @brief This function handles Master Tx callback interrupt.
  */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef* hi2c){
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a0b      	ldr	r2, [pc, #44]	; (8006044 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d10d      	bne.n	8006036 <HAL_I2C_MasterTxCpltCallback+0x2e>
		/*Process unlock*/
		PCA_UNLOCK(&gVar.ioExt);
 800601a:	4a0b      	ldr	r2, [pc, #44]	; (8006048 <HAL_I2C_MasterTxCpltCallback+0x40>)
 800601c:	f242 43f2 	movw	r3, #9458	; 0x24f2
 8006020:	4413      	add	r3, r2
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
		gVar.ioExt.flag.writeCmplt = PCA_WRITE_COMPLETED;
 8006026:	4a08      	ldr	r2, [pc, #32]	; (8006048 <HAL_I2C_MasterTxCpltCallback+0x40>)
 8006028:	f242 43f3 	movw	r3, #9459	; 0x24f3
 800602c:	4413      	add	r3, r2
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	f36f 0200 	bfc	r2, #0, #1
 8006034:	701a      	strb	r2, [r3, #0]
//		DBG_SPRINT_NL("IOX_TXCPLT");
	}
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40005400 	.word	0x40005400
 8006048:	24002050 	.word	0x24002050

0800604c <HAL_I2C_MasterRxCpltCallback>:

/**
  * @brief This function handles Master rx callback interrupt.
  */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0b      	ldr	r2, [pc, #44]	; (8006088 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d10d      	bne.n	800607a <HAL_I2C_MasterRxCpltCallback+0x2e>
		/*Process unlock*/
		PCA_UNLOCK(&gVar.ioExt);
 800605e:	4a0b      	ldr	r2, [pc, #44]	; (800608c <HAL_I2C_MasterRxCpltCallback+0x40>)
 8006060:	f242 43f2 	movw	r3, #9458	; 0x24f2
 8006064:	4413      	add	r3, r2
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
		gVar.ioExt.flag.readCmplt = PCA_READ_COMPLETED;
 800606a:	4a08      	ldr	r2, [pc, #32]	; (800608c <HAL_I2C_MasterRxCpltCallback+0x40>)
 800606c:	f242 43f3 	movw	r3, #9459	; 0x24f3
 8006070:	4413      	add	r3, r2
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	f36f 0241 	bfc	r2, #1, #1
 8006078:	701a      	strb	r2, [r3, #0]

	}
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40005400 	.word	0x40005400
 800608c:	24002050 	.word	0x24002050

08006090 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0

//  HAL_TIM_IRQHandler(&htim24);
	DBG_SPRINT_NL("htim24");
 8006094:	4809      	ldr	r0, [pc, #36]	; (80060bc <TIM24_IRQHandler+0x2c>)
 8006096:	f007 fdd5 	bl	800dc44 <DBG_SPRINT_NL>
	if ((htim24.Instance->SR & TIM_FLAG_UPDATE) == TIM_FLAG_UPDATE)
 800609a:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <TIM24_IRQHandler+0x30>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d107      	bne.n	80060b8 <TIM24_IRQHandler+0x28>
	  {
		htim24.Instance->SR = ~TIM_IT_UPDATE;//((0x1UL << (0U))));
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <TIM24_IRQHandler+0x30>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0201 	mvn.w	r2, #1
 80060b0:	611a      	str	r2, [r3, #16]
		  TS_CatchOVF(&gVar.ts);
 80060b2:	4804      	ldr	r0, [pc, #16]	; (80060c4 <TIM24_IRQHandler+0x34>)
 80060b4:	f005 f888 	bl	800b1c8 <TS_CatchOVF>
//		  gVar.ts.ovfCount++;
	  }
}
 80060b8:	bf00      	nop
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	08029fe0 	.word	0x08029fe0
 80060c0:	24005264 	.word	0x24005264
 80060c4:	24004c38 	.word	0x24004c38

080060c8 <INST_GetTimeStamp>:

extern GlobalVar_t gVar;

/*@brif get time stamp instance
 * */
TimeStamp* INST_GetTimeStamp(void){
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
	return &gVar.ts;
 80060cc:	4b02      	ldr	r3, [pc, #8]	; (80060d8 <INST_GetTimeStamp+0x10>)
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	24004c38 	.word	0x24004c38

080060dc <SchedulerInit>:
static void SlowLoop();
static void VerySlowLoop();



void SchedulerInit(void){
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af02      	add	r7, sp, #8


	/*Debug init--------------------------*/
	DBG_INIT(DBG_ENABLED);
 80060e2:	2001      	movs	r0, #1
 80060e4:	f007 fd38 	bl	800db58 <DBG_INIT>

	DBG_AttachTxCallback(&CB_DBG_Tx);
 80060e8:	48be      	ldr	r0, [pc, #760]	; (80063e4 <SchedulerInit+0x308>)
 80060ea:	f007 fe6f 	bl	800ddcc <DBG_AttachTxCallback>
//	DBG_SPRINT_NL("Starting...");



	/*Microsecond delay init--------------*/
	Delay_Init();
 80060ee:	f007 fe7d 	bl	800ddec <Delay_Init>

	/*Initial settings--------------------*/
	InitialSettings();
 80060f2:	f000 fe6d 	bl	8006dd0 <InitialSettings>

	/*Time stamp initialize--------*/
	TS_Init(&gVar.ts, TS_TIM_TYP_TIMER);
 80060f6:	2101      	movs	r1, #1
 80060f8:	48bb      	ldr	r0, [pc, #748]	; (80063e8 <SchedulerInit+0x30c>)
 80060fa:	f004 fed1 	bl	800aea0 <TS_Init>
	TS_AttachTimer(&htim24, HAL_RCC_GetHCLKFreq());
 80060fe:	f019 f877 	bl	801f1f0 <HAL_RCC_GetHCLKFreq>
 8006102:	4603      	mov	r3, r0
 8006104:	4619      	mov	r1, r3
 8006106:	48b9      	ldr	r0, [pc, #740]	; (80063ec <SchedulerInit+0x310>)
 8006108:	f004 fefc 	bl	800af04 <TS_AttachTimer>
	DBG_ENABLE_TIMESTAMP();
 800610c:	f007 fe3a 	bl	800dd84 <DBG_ENABLE_TIMESTAMP>

//	DBG_SPRINT_NL("%lu: %lu, %lu", gVar.ts.sec, gVar.ts.us, gVar.ts.us);


	/*Print Device Information-----------*/
	TH_PrintDevInfo();
 8006110:	f003 fa1e 	bl	8009550 <TH_PrintDevInfo>
	DBG_SPRINT_NL("Initializing...");
 8006114:	48b6      	ldr	r0, [pc, #728]	; (80063f0 <SchedulerInit+0x314>)
 8006116:	f007 fd95 	bl	800dc44 <DBG_SPRINT_NL>

	/*Digital Output---------------------*/
	DBG_SPRINT("Digital Outputs: ");
 800611a:	48b6      	ldr	r0, [pc, #728]	; (80063f4 <SchedulerInit+0x318>)
 800611c:	f007 fd68 	bl	800dbf0 <DBG_SPRINT>
	uint8_t count = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = DO_1; i < DO_MAX; i++){
 8006124:	2300      	movs	r3, #0
 8006126:	71bb      	strb	r3, [r7, #6]
 8006128:	e026      	b.n	8006178 <SchedulerInit+0x9c>
		DO_Error err = DO_Init(&gVar.dio.dout[i], GPIO_MODE_OUTPUT_PP, GPIO_NOPULL,
 800612a:	79bb      	ldrb	r3, [r7, #6]
 800612c:	2264      	movs	r2, #100	; 0x64
 800612e:	fb02 f203 	mul.w	r2, r2, r3
 8006132:	f641 73e8 	movw	r3, #8168	; 0x1fe8
 8006136:	4413      	add	r3, r2
 8006138:	4aaf      	ldr	r2, [pc, #700]	; (80063f8 <SchedulerInit+0x31c>)
 800613a:	4413      	add	r3, r2
 800613c:	1d18      	adds	r0, r3, #4
 800613e:	79bb      	ldrb	r3, [r7, #6]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d801      	bhi.n	8006148 <SchedulerInit+0x6c>
 8006144:	2303      	movs	r3, #3
 8006146:	e000      	b.n	800614a <SchedulerInit+0x6e>
 8006148:	2300      	movs	r3, #0
 800614a:	2200      	movs	r2, #0
 800614c:	2101      	movs	r1, #1
 800614e:	f008 fa12 	bl	800e576 <DO_Init>
 8006152:	4603      	mov	r3, r0
 8006154:	70bb      	strb	r3, [r7, #2]
					   (i <= DO_4 ? GPIO_SPEED_FREQ_VERY_HIGH : GPIO_SPEED_FREQ_LOW));
		if(err != DO_ERR_NONE){
 8006156:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <SchedulerInit+0x96>
			DBG_SPRINT_NL("\r\nDO_%d: Failed! - Error(%d)",i, err);
 800615e:	79bb      	ldrb	r3, [r7, #6]
 8006160:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8006164:	4619      	mov	r1, r3
 8006166:	48a5      	ldr	r0, [pc, #660]	; (80063fc <SchedulerInit+0x320>)
 8006168:	f007 fd6c 	bl	800dc44 <DBG_SPRINT_NL>
			count++;
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	3301      	adds	r3, #1
 8006170:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = DO_1; i < DO_MAX; i++){
 8006172:	79bb      	ldrb	r3, [r7, #6]
 8006174:	3301      	adds	r3, #1
 8006176:	71bb      	strb	r3, [r7, #6]
 8006178:	79bb      	ldrb	r3, [r7, #6]
 800617a:	2b05      	cmp	r3, #5
 800617c:	d9d5      	bls.n	800612a <SchedulerInit+0x4e>
		}
	}
	if(count == 0){
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <SchedulerInit+0xae>
		DBG_SPRINT_NL("Done!");
 8006184:	489e      	ldr	r0, [pc, #632]	; (8006400 <SchedulerInit+0x324>)
 8006186:	f007 fd5d 	bl	800dc44 <DBG_SPRINT_NL>
	}
	count = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	71fb      	strb	r3, [r7, #7]

	/*Digital Inputs-----------------------*/
	DBG_SPRINT("Digital Inputs: ");
 800618e:	489d      	ldr	r0, [pc, #628]	; (8006404 <SchedulerInit+0x328>)
 8006190:	f007 fd2e 	bl	800dbf0 <DBG_SPRINT>

	DI_AttachTimer(&htim3);
 8006194:	489c      	ldr	r0, [pc, #624]	; (8006408 <SchedulerInit+0x32c>)
 8006196:	f007 fef7 	bl	800df88 <DI_AttachTimer>
	for(uint8_t i = DI_1; i < DI_MAX; i++){
 800619a:	2300      	movs	r3, #0
 800619c:	717b      	strb	r3, [r7, #5]
 800619e:	e01a      	b.n	80061d6 <SchedulerInit+0xfa>
		DI_Error err = DI_Init(&gVar.dio.di[i]);
 80061a0:	797b      	ldrb	r3, [r7, #5]
 80061a2:	3389      	adds	r3, #137	; 0x89
 80061a4:	019b      	lsls	r3, r3, #6
 80061a6:	4a94      	ldr	r2, [pc, #592]	; (80063f8 <SchedulerInit+0x31c>)
 80061a8:	4413      	add	r3, r2
 80061aa:	3304      	adds	r3, #4
 80061ac:	4618      	mov	r0, r3
 80061ae:	f007 fe75 	bl	800de9c <DI_Init>
 80061b2:	4603      	mov	r3, r0
 80061b4:	70fb      	strb	r3, [r7, #3]
		if(err != DI_ERR_NONE){
 80061b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <SchedulerInit+0xf4>
			DBG_SPRINT_NL("\r\nDI_%d: Failed! - Error(%d)",err);
 80061be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061c2:	4619      	mov	r1, r3
 80061c4:	4891      	ldr	r0, [pc, #580]	; (800640c <SchedulerInit+0x330>)
 80061c6:	f007 fd3d 	bl	800dc44 <DBG_SPRINT_NL>
			count++;
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	3301      	adds	r3, #1
 80061ce:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = DI_1; i < DI_MAX; i++){
 80061d0:	797b      	ldrb	r3, [r7, #5]
 80061d2:	3301      	adds	r3, #1
 80061d4:	717b      	strb	r3, [r7, #5]
 80061d6:	797b      	ldrb	r3, [r7, #5]
 80061d8:	2b07      	cmp	r3, #7
 80061da:	d9e1      	bls.n	80061a0 <SchedulerInit+0xc4>
		}
	}
	if(count == 0){
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <SchedulerInit+0x10c>
		DBG_SPRINT_NL("Done!");
 80061e2:	4887      	ldr	r0, [pc, #540]	; (8006400 <SchedulerInit+0x324>)
 80061e4:	f007 fd2e 	bl	800dc44 <DBG_SPRINT_NL>
	}
	count = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	71fb      	strb	r3, [r7, #7]


	/*PCA9557 IO Extender--------------------------------*/
	DBG_SPRINT("PCA9557 IO Extender: ");
 80061ec:	4888      	ldr	r0, [pc, #544]	; (8006410 <SchedulerInit+0x334>)
 80061ee:	f007 fcff 	bl	800dbf0 <DBG_SPRINT>
	PCA_AttachI2C(&hi2c1);
 80061f2:	4888      	ldr	r0, [pc, #544]	; (8006414 <SchedulerInit+0x338>)
 80061f4:	f00d f80c 	bl	8013210 <PCA_AttachI2C>
	PCA_Error_te error = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	713b      	strb	r3, [r7, #4]
	error = PCA_Init(&gVar.ioExt, PCA_IOEX_I2C_DEV_ADDR);
 80061fc:	2102      	movs	r1, #2
 80061fe:	4886      	ldr	r0, [pc, #536]	; (8006418 <SchedulerInit+0x33c>)
 8006200:	f00d f81c 	bl	801323c <PCA_Init>
 8006204:	4603      	mov	r3, r0
 8006206:	713b      	strb	r3, [r7, #4]
	if(error != PCA_ERR_NONE){
 8006208:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <SchedulerInit+0x146>
		DBG_SPRINT_NL("Init Failed - Error(%d)", error);
 8006210:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006214:	4619      	mov	r1, r3
 8006216:	4881      	ldr	r0, [pc, #516]	; (800641c <SchedulerInit+0x340>)
 8006218:	f007 fd14 	bl	800dc44 <DBG_SPRINT_NL>
		count++;
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	3301      	adds	r3, #1
 8006220:	71fb      	strb	r3, [r7, #7]
	}
	PCA_SET_OUTPUTMODE(&gVar.ioExt, PCA_PIN_ALL);
 8006222:	4a75      	ldr	r2, [pc, #468]	; (80063f8 <SchedulerInit+0x31c>)
 8006224:	f242 43f0 	movw	r3, #9456	; 0x24f0
 8006228:	4413      	add	r3, r2
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
	PCA_SET_POLARITYNONE(&gVar.ioExt,  PCA_PIN_ALL);
 800622e:	4a72      	ldr	r2, [pc, #456]	; (80063f8 <SchedulerInit+0x31c>)
 8006230:	f242 43f1 	movw	r3, #9457	; 0x24f1
 8006234:	4413      	add	r3, r2
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
	error = PCA_ConfigPin(&gVar.ioExt);
 800623a:	4877      	ldr	r0, [pc, #476]	; (8006418 <SchedulerInit+0x33c>)
 800623c:	f00d f846 	bl	80132cc <PCA_ConfigPin>
 8006240:	4603      	mov	r3, r0
 8006242:	713b      	strb	r3, [r7, #4]
	if(error != PCA_ERR_NONE){
 8006244:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <SchedulerInit+0x182>
		DBG_SPRINT_NL("Config Failed - Error(%d)", error);
 800624c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006250:	4619      	mov	r1, r3
 8006252:	4873      	ldr	r0, [pc, #460]	; (8006420 <SchedulerInit+0x344>)
 8006254:	f007 fcf6 	bl	800dc44 <DBG_SPRINT_NL>
		count++;
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	3301      	adds	r3, #1
 800625c:	71fb      	strb	r3, [r7, #7]
	}
	if(count == 0){
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <SchedulerInit+0x18e>
		DBG_SPRINT_NL("Done!");
 8006264:	4866      	ldr	r0, [pc, #408]	; (8006400 <SchedulerInit+0x324>)
 8006266:	f007 fced 	bl	800dc44 <DBG_SPRINT_NL>
	}
	count = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	71fb      	strb	r3, [r7, #7]

	/*Analog output ------------------*/
	DBG_SPRINT("Analog Outputs: ");
 800626e:	486d      	ldr	r0, [pc, #436]	; (8006424 <SchedulerInit+0x348>)
 8006270:	f007 fcbe 	bl	800dbf0 <DBG_SPRINT>
	AO_Init(&htim2);
 8006274:	486c      	ldr	r0, [pc, #432]	; (8006428 <SchedulerInit+0x34c>)
 8006276:	f7fa fccd 	bl	8000c14 <AO_Init>

	/*TODO: Comment*/
	AO_Enable(&gVar.ao[0]);
 800627a:	486c      	ldr	r0, [pc, #432]	; (800642c <SchedulerInit+0x350>)
 800627c:	f7fa fd04 	bl	8000c88 <AO_Enable>
	AO_Enable(&gVar.ao[1]);
 8006280:	486b      	ldr	r0, [pc, #428]	; (8006430 <SchedulerInit+0x354>)
 8006282:	f7fa fd01 	bl	8000c88 <AO_Enable>
	AO_Enable(&gVar.ao[2]);
 8006286:	486b      	ldr	r0, [pc, #428]	; (8006434 <SchedulerInit+0x358>)
 8006288:	f7fa fcfe 	bl	8000c88 <AO_Enable>
	AO_Enable(&gVar.ao[3]);
 800628c:	486a      	ldr	r0, [pc, #424]	; (8006438 <SchedulerInit+0x35c>)
 800628e:	f7fa fcfb 	bl	8000c88 <AO_Enable>
	DBG_SPRINT_NL("Done!");
 8006292:	485b      	ldr	r0, [pc, #364]	; (8006400 <SchedulerInit+0x324>)
 8006294:	f007 fcd6 	bl	800dc44 <DBG_SPRINT_NL>



//
	/*Analog Inputs ------------------*/
	DBG_SPRINT("Analog Inputs: ");
 8006298:	4868      	ldr	r0, [pc, #416]	; (800643c <SchedulerInit+0x360>)
 800629a:	f007 fca9 	bl	800dbf0 <DBG_SPRINT>
	AI_Init(&hadc1);
 800629e:	4868      	ldr	r0, [pc, #416]	; (8006440 <SchedulerInit+0x364>)
 80062a0:	f7fa fe3e 	bl	8000f20 <AI_Init>
	AI_Config( &gVar.ai[AI_1], ADC_CHANNEL_3, AIO_MODE_CURRENT);
 80062a4:	2200      	movs	r2, #0
 80062a6:	4967      	ldr	r1, [pc, #412]	; (8006444 <SchedulerInit+0x368>)
 80062a8:	4867      	ldr	r0, [pc, #412]	; (8006448 <SchedulerInit+0x36c>)
 80062aa:	f7fa fe4b 	bl	8000f44 <AI_Config>
	AI_Config( &gVar.ai[AI_2], ADC_CHANNEL_5, AIO_MODE_CURRENT);
 80062ae:	2200      	movs	r2, #0
 80062b0:	4966      	ldr	r1, [pc, #408]	; (800644c <SchedulerInit+0x370>)
 80062b2:	4867      	ldr	r0, [pc, #412]	; (8006450 <SchedulerInit+0x374>)
 80062b4:	f7fa fe46 	bl	8000f44 <AI_Config>
#ifdef USE_AI_ADC_DMA
	AI_StartReadingDMA(gVar.aiBuffDMA, AI_MAX);
#endif
	DBG_SPRINT_NL("Done!");
 80062b8:	4851      	ldr	r0, [pc, #324]	; (8006400 <SchedulerInit+0x324>)
 80062ba:	f007 fcc3 	bl	800dc44 <DBG_SPRINT_NL>



	/*Initialize the external flash memory(W25Q64)--------*/
	DBG_SPRINT("W25Q64 Flash Memory: ");
 80062be:	4865      	ldr	r0, [pc, #404]	; (8006454 <SchedulerInit+0x378>)
 80062c0:	f007 fc96 	bl	800dbf0 <DBG_SPRINT>
	if(FSExt_Init(&hspi1, FSEXT_DATATYPE_WORD) == 0){
 80062c4:	2104      	movs	r1, #4
 80062c6:	4864      	ldr	r0, [pc, #400]	; (8006458 <SchedulerInit+0x37c>)
 80062c8:	f7fe fb40 	bl	800494c <FSExt_Init>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <SchedulerInit+0x1fe>
		DBG_SPRINT_NL("Failed!");
 80062d2:	4862      	ldr	r0, [pc, #392]	; (800645c <SchedulerInit+0x380>)
 80062d4:	f007 fcb6 	bl	800dc44 <DBG_SPRINT_NL>
 80062d8:	e002      	b.n	80062e0 <SchedulerInit+0x204>
	}else{
		DBG_SPRINT_NL("Done!");
 80062da:	4849      	ldr	r0, [pc, #292]	; (8006400 <SchedulerInit+0x324>)
 80062dc:	f007 fcb2 	bl	800dc44 <DBG_SPRINT_NL>




	/*Callback init--------------------*/
	CB_Init();
 80062e0:	f7fa ff48 	bl	8001174 <CB_Init>

	/*Reset watchdog-------------------*/
	HAL_IWDG_Refresh(&hiwdg1);
 80062e4:	485e      	ldr	r0, [pc, #376]	; (8006460 <SchedulerInit+0x384>)
 80062e6:	f018 f85d 	bl	801e3a4 <HAL_IWDG_Refresh>

	/*Update setting-------------------*/
	UpdateSettings();
 80062ea:	f002 f9e1 	bl	80086b0 <UpdateSettings>

	DBG_ENABLE();//TODO: comment
 80062ee:	f007 fd31 	bl	800dd54 <DBG_ENABLE>

	/*Modbus RTU Serial-----------------------*/
	DBG_SPRINT("Modbus RTU UART: ");
 80062f2:	485c      	ldr	r0, [pc, #368]	; (8006464 <SchedulerInit+0x388>)
 80062f4:	f007 fc7c 	bl	800dbf0 <DBG_SPRINT>
	gVar.devMode = DEV_MODE_SLAVE;
 80062f8:	4b3f      	ldr	r3, [pc, #252]	; (80063f8 <SchedulerInit+0x31c>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	721a      	strb	r2, [r3, #8]
//		TS_SetTimerType(&gVar.ts, TS_TIM_TYP_TIMER);
//		TS_StartTimer(&gVar.ts);
//	}

	/*Decode serial config value (baudrate,data,stop and parity bit)*/
	if(MBS_DecodeConfigValue(&gVar.mbSerial) == 0){
 80062fe:	485a      	ldr	r0, [pc, #360]	; (8006468 <SchedulerInit+0x38c>)
 8006300:	f00c f920 	bl	8012544 <MBS_DecodeConfigValue>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <SchedulerInit+0x23a>
		DBG_SPRINT("Invalid config!");
 800630a:	4858      	ldr	r0, [pc, #352]	; (800646c <SchedulerInit+0x390>)
 800630c:	f007 fc70 	bl	800dbf0 <DBG_SPRINT>
		count++;
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	3301      	adds	r3, #1
 8006314:	71fb      	strb	r3, [r7, #7]
	}
	if(MB_UartInit(&huart2, USART2, gVar.mbSerial.baudRate) == 0){
 8006316:	4b38      	ldr	r3, [pc, #224]	; (80063f8 <SchedulerInit+0x31c>)
 8006318:	f8d3 3694 	ldr.w	r3, [r3, #1684]	; 0x694
 800631c:	461a      	mov	r2, r3
 800631e:	4954      	ldr	r1, [pc, #336]	; (8006470 <SchedulerInit+0x394>)
 8006320:	4854      	ldr	r0, [pc, #336]	; (8006474 <SchedulerInit+0x398>)
 8006322:	f00c fe35 	bl	8012f90 <MB_UartInit>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <SchedulerInit+0x25c>
		DBG_SPRINT("Init failed!");
 800632c:	4852      	ldr	r0, [pc, #328]	; (8006478 <SchedulerInit+0x39c>)
 800632e:	f007 fc5f 	bl	800dbf0 <DBG_SPRINT>
		count++;
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	3301      	adds	r3, #1
 8006336:	71fb      	strb	r3, [r7, #7]
	}
	if(count == 0){
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <SchedulerInit+0x268>
		DBG_SPRINT_NL("Done!");
 800633e:	4830      	ldr	r0, [pc, #192]	; (8006400 <SchedulerInit+0x324>)
 8006340:	f007 fc80 	bl	800dc44 <DBG_SPRINT_NL>
	}
	count = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	71fb      	strb	r3, [r7, #7]

	DBG_SPRINT("Modbus RTU Config: ");
 8006348:	484c      	ldr	r0, [pc, #304]	; (800647c <SchedulerInit+0x3a0>)
 800634a:	f007 fc51 	bl	800dbf0 <DBG_SPRINT>
	MBS_Init(&gVar.mbSerial, &huart2, &htim4, &htim6, RS485_DIR_GPIO_Port, RS485_DIR_Pin);		// initialize modbus serial//TODO: to uncomment
 800634e:	2308      	movs	r3, #8
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	4b4b      	ldr	r3, [pc, #300]	; (8006480 <SchedulerInit+0x3a4>)
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	4b4b      	ldr	r3, [pc, #300]	; (8006484 <SchedulerInit+0x3a8>)
 8006358:	4a4b      	ldr	r2, [pc, #300]	; (8006488 <SchedulerInit+0x3ac>)
 800635a:	4946      	ldr	r1, [pc, #280]	; (8006474 <SchedulerInit+0x398>)
 800635c:	4842      	ldr	r0, [pc, #264]	; (8006468 <SchedulerInit+0x38c>)
 800635e:	f00b ff39 	bl	80121d4 <MBS_Init>
	if(MBS_Config(&gVar.mbSerial) != MB_OK){								// to configure the modbus serial and 3.5 and 1.5 char timer
 8006362:	4841      	ldr	r0, [pc, #260]	; (8006468 <SchedulerInit+0x38c>)
 8006364:	f00b ffde 	bl	8012324 <MBS_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	2b01      	cmp	r3, #1
 800636c:	d003      	beq.n	8006376 <SchedulerInit+0x29a>
		DBG_SPRINT_NL("failed!");
 800636e:	4847      	ldr	r0, [pc, #284]	; (800648c <SchedulerInit+0x3b0>)
 8006370:	f007 fc68 	bl	800dc44 <DBG_SPRINT_NL>
 8006374:	e002      	b.n	800637c <SchedulerInit+0x2a0>
	}else{
		DBG_SPRINT_NL("Done!");
 8006376:	4822      	ldr	r0, [pc, #136]	; (8006400 <SchedulerInit+0x324>)
 8006378:	f007 fc64 	bl	800dc44 <DBG_SPRINT_NL>
	}
//	HAL_TIM_Base_Start_IT(&htim4);			// timer for 1.5 char interval for modbus serial
//	HAL_TIM_Base_Start_IT(&htim6);			// timer for 3.5 char interval for modbus serial

	MB_CUST_StartTimer(&gVar.mbRTUMaster.custom.reTransTimer);
 800637c:	4844      	ldr	r0, [pc, #272]	; (8006490 <SchedulerInit+0x3b4>)
 800637e:	f008 ff59 	bl	800f234 <MB_CUST_StartTimer>
	gVar.mbSerial.mode = (gVar.devMode == DEV_MODE_MASTER ? MBS_MODE_MASTER : MBS_MODE_SLAVE);
 8006382:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <SchedulerInit+0x31c>)
 8006384:	7a1b      	ldrb	r3, [r3, #8]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <SchedulerInit+0x2b2>
 800638a:	2201      	movs	r2, #1
 800638c:	e000      	b.n	8006390 <SchedulerInit+0x2b4>
 800638e:	2202      	movs	r2, #2
 8006390:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <SchedulerInit+0x31c>)
 8006392:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	//TODO:remove later
	MB_SetRTUMode((gVar.devMode == DEV_MODE_SLAVE ? MB_RTU_MODE_SLAVE : MB_RTU_MODE_MASTER));		// set the rtu mode
 8006396:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <SchedulerInit+0x31c>)
 8006398:	7a1b      	ldrb	r3, [r3, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	4618      	mov	r0, r3
 80063a6:	f009 fd53 	bl	800fe50 <MB_SetRTUMode>
	gVar.mbHandle = MB_GetHandlerInstance();
 80063aa:	f009 fd6d 	bl	800fe88 <MB_GetHandlerInstance>
 80063ae:	4603      	mov	r3, r0
 80063b0:	4a11      	ldr	r2, [pc, #68]	; (80063f8 <SchedulerInit+0x31c>)
 80063b2:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684

	DBG_SPRINT("Modbus RTU DMA: ");
 80063b6:	4837      	ldr	r0, [pc, #220]	; (8006494 <SchedulerInit+0x3b8>)
 80063b8:	f007 fc1a 	bl	800dbf0 <DBG_SPRINT>
	if(gVar.mbSerial.protocol == MBS_PROTO_RTU_CLUSTER_DMA){		//
 80063bc:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <SchedulerInit+0x31c>)
 80063be:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d17a      	bne.n	80064bc <SchedulerInit+0x3e0>
		if(MB_UartInitDMA(&hdma_usart2_rx, &hdma_usart2_tx) == 0){
 80063c6:	4934      	ldr	r1, [pc, #208]	; (8006498 <SchedulerInit+0x3bc>)
 80063c8:	4834      	ldr	r0, [pc, #208]	; (800649c <SchedulerInit+0x3c0>)
 80063ca:	f00c fe37 	bl	801303c <MB_UartInitDMA>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d165      	bne.n	80064a0 <SchedulerInit+0x3c4>
			DBG_SPRINT("Init failed!");
 80063d4:	4828      	ldr	r0, [pc, #160]	; (8006478 <SchedulerInit+0x39c>)
 80063d6:	f007 fc0b 	bl	800dbf0 <DBG_SPRINT>
			count++;
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	3301      	adds	r3, #1
 80063de:	71fb      	strb	r3, [r7, #7]
 80063e0:	e06c      	b.n	80064bc <SchedulerInit+0x3e0>
 80063e2:	bf00      	nop
 80063e4:	080012b5 	.word	0x080012b5
 80063e8:	24004c38 	.word	0x24004c38
 80063ec:	24005264 	.word	0x24005264
 80063f0:	08029fe8 	.word	0x08029fe8
 80063f4:	08029ff8 	.word	0x08029ff8
 80063f8:	24002050 	.word	0x24002050
 80063fc:	0802a00c 	.word	0x0802a00c
 8006400:	0802a02c 	.word	0x0802a02c
 8006404:	0802a034 	.word	0x0802a034
 8006408:	240055e4 	.word	0x240055e4
 800640c:	0802a048 	.word	0x0802a048
 8006410:	0802a068 	.word	0x0802a068
 8006414:	24004c84 	.word	0x24004c84
 8006418:	2400453c 	.word	0x2400453c
 800641c:	0802a080 	.word	0x0802a080
 8006420:	0802a098 	.word	0x0802a098
 8006424:	0802a0b4 	.word	0x0802a0b4
 8006428:	24005218 	.word	0x24005218
 800642c:	24003ea4 	.word	0x24003ea4
 8006430:	24003ed0 	.word	0x24003ed0
 8006434:	24003efc 	.word	0x24003efc
 8006438:	24003f28 	.word	0x24003f28
 800643c:	0802a0c8 	.word	0x0802a0c8
 8006440:	240057b0 	.word	0x240057b0
 8006444:	0c900008 	.word	0x0c900008
 8006448:	24003f58 	.word	0x24003f58
 800644c:	14f00020 	.word	0x14f00020
 8006450:	24003fc8 	.word	0x24003fc8
 8006454:	0802a0d8 	.word	0x0802a0d8
 8006458:	24005190 	.word	0x24005190
 800645c:	0802a0f0 	.word	0x0802a0f0
 8006460:	240053ec 	.word	0x240053ec
 8006464:	0802a0f8 	.word	0x0802a0f8
 8006468:	240026d8 	.word	0x240026d8
 800646c:	0802a10c 	.word	0x0802a10c
 8006470:	40004400 	.word	0x40004400
 8006474:	24005bbc 	.word	0x24005bbc
 8006478:	0802a11c 	.word	0x0802a11c
 800647c:	0802a12c 	.word	0x0802a12c
 8006480:	58021000 	.word	0x58021000
 8006484:	24005a1c 	.word	0x24005a1c
 8006488:	2400548c 	.word	0x2400548c
 800648c:	0802a140 	.word	0x0802a140
 8006490:	240029c8 	.word	0x240029c8
 8006494:	0802a148 	.word	0x0802a148
 8006498:	24005910 	.word	0x24005910
 800649c:	24005328 	.word	0x24005328
		}else{
			if(MB_UartReceiveDMA(gVar.mbSerial.rxBuff, MB_PDU_MAX_SIZE) != HAL_OK){
 80064a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064a4:	480c      	ldr	r0, [pc, #48]	; (80064d8 <SchedulerInit+0x3fc>)
 80064a6:	f00c fe05 	bl	80130b4 <MB_UartReceiveDMA>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <SchedulerInit+0x3e0>
				DBG_SPRINT("RX idle line config failed!");
 80064b0:	480a      	ldr	r0, [pc, #40]	; (80064dc <SchedulerInit+0x400>)
 80064b2:	f007 fb9d 	bl	800dbf0 <DBG_SPRINT>
				count++;
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	3301      	adds	r3, #1
 80064ba:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	if(count == 0){
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <SchedulerInit+0x3ec>
		DBG_SPRINT_NL("Done!");
 80064c2:	4807      	ldr	r0, [pc, #28]	; (80064e0 <SchedulerInit+0x404>)
 80064c4:	f007 fbbe 	bl	800dc44 <DBG_SPRINT_NL>
	}
	count = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	71fb      	strb	r3, [r7, #7]
////	dbug.enable = 1;
////	TH_DigitalInConfig();
//
//
//	HAL_Delay(1000);
	DBG_DISABLE_TIMESTAMP();
 80064cc:	f007 fc66 	bl	800dd9c <DBG_DISABLE_TIMESTAMP>
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	240026fa 	.word	0x240026fa
 80064dc:	0802a15c 	.word	0x0802a15c
 80064e0:	0802a02c 	.word	0x0802a02c

080064e4 <Scheduler>:

/**
  * @brief Scheduler A is used for the non blocking task
  *
  */
void Scheduler(void){
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0


	SupperLoop();
 80064e8:	f000 f87a 	bl	80065e0 <SupperLoop>

	if(TimeReached(SCHEDULE_VERYFAST, INTERVAL_5MS)){
 80064ec:	2105      	movs	r1, #5
 80064ee:	2000      	movs	r0, #0
 80064f0:	f000 f83c 	bl	800656c <TimeReached>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <Scheduler+0x20>
		SetLastScheduleTime(SCHEDULE_VERYFAST);
 80064fa:	2000      	movs	r0, #0
 80064fc:	f000 f85e 	bl	80065bc <SetLastScheduleTime>
		VeryFastLoop();
 8006500:	f000 f89c 	bl	800663c <VeryFastLoop>
	}

	if(TimeReached(SCHEDULE_FAST, INTERVAL_100MS)){
 8006504:	2164      	movs	r1, #100	; 0x64
 8006506:	2001      	movs	r0, #1
 8006508:	f000 f830 	bl	800656c <TimeReached>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <Scheduler+0x38>
		SetLastScheduleTime(SCHEDULE_FAST);
 8006512:	2001      	movs	r0, #1
 8006514:	f000 f852 	bl	80065bc <SetLastScheduleTime>
//		DBG_SPRINT_NL("FastLoop");

		FastLoop();
 8006518:	f000 f898 	bl	800664c <FastLoop>
	}

	if(TimeReached(SCHEDULE_SLOW, INTERVAL_250MS)){
 800651c:	21fa      	movs	r1, #250	; 0xfa
 800651e:	2003      	movs	r0, #3
 8006520:	f000 f824 	bl	800656c <TimeReached>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d004      	beq.n	8006534 <Scheduler+0x50>
		SetLastScheduleTime(SCHEDULE_SLOW);
 800652a:	2003      	movs	r0, #3
 800652c:	f000 f846 	bl	80065bc <SetLastScheduleTime>
		MediumLoop();
 8006530:	f000 f8a6 	bl	8006680 <MediumLoop>

	}

	if(TimeReached(SCHEDULE_MEDIUM, INTERVAL_1000MS)){
 8006534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006538:	2002      	movs	r0, #2
 800653a:	f000 f817 	bl	800656c <TimeReached>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <Scheduler+0x6a>
		SetLastScheduleTime(SCHEDULE_MEDIUM);
 8006544:	2002      	movs	r0, #2
 8006546:	f000 f839 	bl	80065bc <SetLastScheduleTime>
//		HAL_IWDG_Refresh(&hiwdg);
		SlowLoop();
 800654a:	f000 f8a5 	bl	8006698 <SlowLoop>
	}

	if(TimeReached(SCHEDULE_VERYSLOW, INTERVAL_5000MS)){
 800654e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006552:	2004      	movs	r0, #4
 8006554:	f000 f80a 	bl	800656c <TimeReached>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <Scheduler+0x84>
		SetLastScheduleTime(SCHEDULE_VERYSLOW);
 800655e:	2004      	movs	r0, #4
 8006560:	f000 f82c 	bl	80065bc <SetLastScheduleTime>
		VerySlowLoop();
 8006564:	f000 f8d2 	bl	800670c <VerySlowLoop>
	}

}
 8006568:	bf00      	nop
 800656a:	bd80      	pop	{r7, pc}

0800656c <TimeReached>:
  * @param schedule: schedule task id
  * @param interval: interval between two schedule task
  * @retval if time reached it will return true otherwise false
  *
  */
static uint8_t TimeReached(uint8_t schedule, uint16_t interval){
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	460a      	mov	r2, r1
 8006576:	71fb      	strb	r3, [r7, #7]
 8006578:	4613      	mov	r3, r2
 800657a:	80bb      	strh	r3, [r7, #4]
	return (((HAL_GetTick()-LastScheduleTime[schedule]) >= interval) || ((int32_t)(HAL_GetTick() - LastScheduleTime[schedule]) < 0));
 800657c:	f00f ffb8 	bl	80164f0 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	490c      	ldr	r1, [pc, #48]	; (80065b8 <TimeReached+0x4c>)
 8006586:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	88bb      	ldrh	r3, [r7, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d209      	bcs.n	80065a6 <TimeReached+0x3a>
 8006592:	f00f ffad 	bl	80164f0 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	4907      	ldr	r1, [pc, #28]	; (80065b8 <TimeReached+0x4c>)
 800659c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da01      	bge.n	80065aa <TimeReached+0x3e>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <TimeReached+0x40>
 80065aa:	2300      	movs	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	2400086c 	.word	0x2400086c

080065bc <SetLastScheduleTime>:
/**
  * @brief Sets the last time of the executed schedule task
  * @param schedule: schedule task id
  * @retval none
  */
static void SetLastScheduleTime(uint8_t schedule){
 80065bc:	b590      	push	{r4, r7, lr}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
	LastScheduleTime[schedule] = HAL_GetTick();
 80065c6:	79fc      	ldrb	r4, [r7, #7]
 80065c8:	f00f ff92 	bl	80164f0 <HAL_GetTick>
 80065cc:	4603      	mov	r3, r0
 80065ce:	4a03      	ldr	r2, [pc, #12]	; (80065dc <SetLastScheduleTime+0x20>)
 80065d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd90      	pop	{r4, r7, pc}
 80065dc:	2400086c 	.word	0x2400086c

080065e0 <SupperLoop>:


/*executes in main loop*/
static void SupperLoop(){
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0

	/*Digital Outputs----------------------------*/
	TH_DigitalOut();	//TODO: to uncomment
 80065e4:	f002 ffce 	bl	8009584 <TH_DigitalOut>
	TH_DigitalIn();
 80065e8:	f003 f8a0 	bl	800972c <TH_DigitalIn>
	//Modbus TCP Server
//	Server_TCP(&gVar.server);
//	MBTCPS_ReqHandler(&gVar.mbTCPServer, &gVar.mbGateway);


	if(gVar.devMode == DEV_MODE_MASTER ){
 80065ec:	4b12      	ldr	r3, [pc, #72]	; (8006638 <SupperLoop+0x58>)
 80065ee:	7a1b      	ldrb	r3, [r3, #8]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d117      	bne.n	8006624 <SupperLoop+0x44>
		//MB RTU Master function
		MB_SetRTUMode(MB_RTU_MODE_MASTER);
 80065f4:	2001      	movs	r0, #1
 80065f6:	f009 fc2b 	bl	800fe50 <MB_SetRTUMode>
		if(!gVar.mbGateway.isBusy ){		//&& gVar.mbTCPServer.isDataRcvd > 0//&& gVar.mbRTUMaster.custom.enableRetrans>0
 80065fa:	4a0f      	ldr	r2, [pc, #60]	; (8006638 <SupperLoop+0x58>)
 80065fc:	f641 1370 	movw	r3, #6512	; 0x1970
 8006600:	4413      	add	r3, r2
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <SupperLoop+0x30>
			TH_MBRTUMasterTimoutHandler();		// check timeout for master
 8006608:	f003 fa46 	bl	8009a98 <TH_MBRTUMasterTimoutHandler>
			TH_MBRTUMaster();
 800660c:	f003 f9e2 	bl	80099d4 <TH_MBRTUMaster>

		}

		//MB gateway function
		if(!gVar.mbRTUMaster.isBusy){
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <SupperLoop+0x58>)
 8006612:	f893 396b 	ldrb.w	r3, [r3, #2411]	; 0x96b
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <SupperLoop+0x48>
			TH_MBGWCheckTimeOut();
 800661a:	f003 fe65 	bl	800a2e8 <TH_MBGWCheckTimeOut>
			TH_MBGateway();
 800661e:	f003 fc59 	bl	8009ed4 <TH_MBGateway>
 8006622:	e001      	b.n	8006628 <SupperLoop+0x48>
		}

//		TH_MBRTUMasterTimoutHandler();		// check timeout for master
//		TH_MBGWCheckTimeOut();				// check timeout for gateway
	}else{
		TH_MBRTUSlaveTimoutHandler();		// check timeout for slave
 8006624:	f003 fb26 	bl	8009c74 <TH_MBRTUSlaveTimoutHandler>
//	TH_W5500SPIErrDiag();



	/*Analog inputs-----------------*/
	TH_AnalogInput();
 8006628:	f004 fc06 	bl	800ae38 <TH_AnalogInput>

	/*Analog outputs-----------------*/
	TH_AnalogOutput();
 800662c:	f004 f904 	bl	800a838 <TH_AnalogOutput>

	/*IOExtender*/
	TH_IOExtender();
 8006630:	f004 fa46 	bl	800aac0 <TH_IOExtender>
}
 8006634:	bf00      	nop
 8006636:	bd80      	pop	{r7, pc}
 8006638:	24002050 	.word	0x24002050

0800663c <VeryFastLoop>:

static void VeryFastLoop(){
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0

}
 8006640:	bf00      	nop
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <FastLoop>:

/*Old---------------*/
/*executes in every 50 ms */
void FastLoop(){
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0

	/* TH_AOMap2DIandPID(), this function is used to map the analog output, pid & digital input
	 * Warning: This function has time dependency. So, be careful if you need to change the loop time
	 * for this function
	 * */
	TH_AOMap2DIandPID(&gVar.ao[AO_1], &gVar.dio.di[DI_1], &gVar.pid1);
 8006650:	4a05      	ldr	r2, [pc, #20]	; (8006668 <FastLoop+0x1c>)
 8006652:	4906      	ldr	r1, [pc, #24]	; (800666c <FastLoop+0x20>)
 8006654:	4806      	ldr	r0, [pc, #24]	; (8006670 <FastLoop+0x24>)
 8006656:	f004 f935 	bl	800a8c4 <TH_AOMap2DIandPID>
	TH_AOMap2DIandPID(&gVar.ao[AO_2], &gVar.dio.di[DI_2], &gVar.pid2);
 800665a:	4a06      	ldr	r2, [pc, #24]	; (8006674 <FastLoop+0x28>)
 800665c:	4906      	ldr	r1, [pc, #24]	; (8006678 <FastLoop+0x2c>)
 800665e:	4807      	ldr	r0, [pc, #28]	; (800667c <FastLoop+0x30>)
 8006660:	f004 f930 	bl	800a8c4 <TH_AOMap2DIandPID>
}
 8006664:	bf00      	nop
 8006666:	bd80      	pop	{r7, pc}
 8006668:	24004558 	.word	0x24004558
 800666c:	24004294 	.word	0x24004294
 8006670:	24003ea4 	.word	0x24003ea4
 8006674:	24004598 	.word	0x24004598
 8006678:	240042d4 	.word	0x240042d4
 800667c:	24003ed0 	.word	0x24003ed0

08006680 <MediumLoop>:

/*executes in every 250 ms */
void MediumLoop(){
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0

	/*Digital Inputs----------------------*/
	/*COnfigs the digital Inputs & encoder inputs*/
	TH_DigitalInConfig();
 8006684:	f003 f8b4 	bl	80097f0 <TH_DigitalInConfig>
	/*If there is no pulse detected by the digital inputs it clears the related parameters*/
	TH_DIClearOnNoPulse();
 8006688:	f003 f92a 	bl	80098e0 <TH_DIClearOnNoPulse>


	/*Check the changes and update the non-volatile data*/
	FSExt_CheckAndUpdateChanges();
 800668c:	f7fe fb3a 	bl	8004d04 <FSExt_CheckAndUpdateChanges>

	/*Factory reset*/
	TH_FactoryResetButton();
 8006690:	f004 fbaa 	bl	800ade8 <TH_FactoryResetButton>

	/*General purpose LED*/
//	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);		// blink led// TODO: TO uncomment
}
 8006694:	bf00      	nop
 8006696:	bd80      	pop	{r7, pc}

08006698 <SlowLoop>:

/*executes in every 500 ms */
void SlowLoop(){
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0

	/*IOExtender*/
	TH_IOExtender();
 800669c:	f004 fa10 	bl	800aac0 <TH_IOExtender>

	/* refresh watchdog timer-----------*/
	HAL_IWDG_Refresh(&hiwdg1);
 80066a0:	4816      	ldr	r0, [pc, #88]	; (80066fc <SlowLoop+0x64>)
 80066a2:	f017 fe7f 	bl	801e3a4 <HAL_IWDG_Refresh>


	/*Check the Modbus 107 packet retransmission timer is stop or not
	 * If it is stop, start it immediately
	 * */
	if(gVar.devMode == DEV_MODE_MASTER && !MB_CUST_IsTimerRunning(&gVar.mbRTUMaster.custom.reTransTimer)){
 80066a6:	4b16      	ldr	r3, [pc, #88]	; (8006700 <SlowLoop+0x68>)
 80066a8:	7a1b      	ldrb	r3, [r3, #8]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d108      	bne.n	80066c0 <SlowLoop+0x28>
 80066ae:	4815      	ldr	r0, [pc, #84]	; (8006704 <SlowLoop+0x6c>)
 80066b0:	f008 fe04 	bl	800f2bc <MB_CUST_IsTimerRunning>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <SlowLoop+0x28>
		MB_CUST_StartTimer(&gVar.mbRTUMaster.custom.reTransTimer);
 80066ba:	4812      	ldr	r0, [pc, #72]	; (8006704 <SlowLoop+0x6c>)
 80066bc:	f008 fdba 	bl	800f234 <MB_CUST_StartTimer>
	}


	if(gVar.mbSerial.protocol == MBS_PROTO_RTU_CLUSTER_DMA ){
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <SlowLoop+0x68>)
 80066c2:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d116      	bne.n	80066f8 <SlowLoop+0x60>
		/*Check if the rtu bus is frozen due to unknown error-------------*/
		// If the serial receive option is locked, the it will unlocked after 500 ms
		if( gVar.mbSerial.isFreeze == 1){
 80066ca:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <SlowLoop+0x68>)
 80066cc:	f893 368b 	ldrb.w	r3, [r3, #1675]	; 0x68b
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d108      	bne.n	80066e6 <SlowLoop+0x4e>
			MB_UartReceiveDMA(gVar.mbSerial.rxBuff, MB_PDU_MAX_SIZE);
 80066d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066d8:	480b      	ldr	r0, [pc, #44]	; (8006708 <SlowLoop+0x70>)
 80066da:	f00c fceb 	bl	80130b4 <MB_UartReceiveDMA>
//			DBG_SPRINT_NL("MB_UartReceiveDMA.............");
			gVar.mbSerial.isFreeze = 2;
 80066de:	4b08      	ldr	r3, [pc, #32]	; (8006700 <SlowLoop+0x68>)
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
		}
		if(gVar.mbSerial.isFreeze == 0)	{gVar.mbSerial.isFreeze = 1;}
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <SlowLoop+0x68>)
 80066e8:	f893 368b 	ldrb.w	r3, [r3, #1675]	; 0x68b
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <SlowLoop+0x60>
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <SlowLoop+0x68>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
	}
}
 80066f8:	bf00      	nop
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	240053ec 	.word	0x240053ec
 8006700:	24002050 	.word	0x24002050
 8006704:	240029c8 	.word	0x240029c8
 8006708:	240026fa 	.word	0x240026fa

0800670c <VerySlowLoop>:

/*executes in every 5000 ms */
void VerySlowLoop(){
 800670c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670e:	b0cb      	sub	sp, #300	; 0x12c
 8006710:	af06      	add	r7, sp, #24

	DBG_ENABLE_TIMESTAMP();
 8006712:	f007 fb37 	bl	800dd84 <DBG_ENABLE_TIMESTAMP>


//	TS_GetUS(&timStamp);
//	RCC_TypeDef rcc;
	static uint32_t rxLast = 0;
	if(rxLast == rtuRxCount){
 8006716:	4bb5      	ldr	r3, [pc, #724]	; (80069ec <VerySlowLoop+0x2e0>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4bb5      	ldr	r3, [pc, #724]	; (80069f0 <VerySlowLoop+0x2e4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	f040 833a 	bne.w	8006d98 <VerySlowLoop+0x68c>
		DBG_SPRINT_NL(" ");
 8006724:	48b3      	ldr	r0, [pc, #716]	; (80069f4 <VerySlowLoop+0x2e8>)
 8006726:	f007 fa8d 	bl	800dc44 <DBG_SPRINT_NL>
//		__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST);
//		DBG_SPRINT_NL("Rst: %X", __HAL_RCC_GET_FLAG(RCC_CSR_LPWRRSTF | RCC_CSR_WDGRSTF | RCC_CSR_IWDGRSTF | RCC_CSR_SFTRSTF | RCC_CSR_PORRSTF | RCC_CSR_PINRSTF | RCC_CSR_BORRSTF));

//		rcc.CSR &= ~ RCC_CSR_RMVF;
//		__HAL_RCC_CLEAR_RESET_FLAGS();
		DBG_SPRINT_NL("Dev : { MOD: %d, Addr: %d }", gVar.devMode, (gVar.devMode == DEV_MODE_MASTER ? MBTCP_SERVER_UNIT_ID : gVar.mbRTUSlave.slave_address));
 800672a:	4bb3      	ldr	r3, [pc, #716]	; (80069f8 <VerySlowLoop+0x2ec>)
 800672c:	7a1b      	ldrb	r3, [r3, #8]
 800672e:	4619      	mov	r1, r3
 8006730:	4bb1      	ldr	r3, [pc, #708]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006732:	7a1b      	ldrb	r3, [r3, #8]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d003      	beq.n	8006740 <VerySlowLoop+0x34>
 8006738:	4baf      	ldr	r3, [pc, #700]	; (80069f8 <VerySlowLoop+0x2ec>)
 800673a:	f893 38c8 	ldrb.w	r3, [r3, #2248]	; 0x8c8
 800673e:	e000      	b.n	8006742 <VerySlowLoop+0x36>
 8006740:	23ff      	movs	r3, #255	; 0xff
 8006742:	461a      	mov	r2, r3
 8006744:	48ad      	ldr	r0, [pc, #692]	; (80069fc <VerySlowLoop+0x2f0>)
 8006746:	f007 fa7d 	bl	800dc44 <DBG_SPRINT_NL>
		DBG_SPRINT_NL("RTU: {RX:%u,TX:%u, Err:%u}, Reg: {SR:0x%08X, CR1:0x%08X, CR2:0x%08X, CR3: 0x%08X}",
 800674a:	4ba9      	ldr	r3, [pc, #676]	; (80069f0 <VerySlowLoop+0x2e4>)
 800674c:	681c      	ldr	r4, [r3, #0]
 800674e:	4bac      	ldr	r3, [pc, #688]	; (8006a00 <VerySlowLoop+0x2f4>)
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	4bac      	ldr	r3, [pc, #688]	; (8006a04 <VerySlowLoop+0x2f8>)
 8006754:	681e      	ldr	r6, [r3, #0]
				rtuRxCount, rtuTxCount, rtuErrCount,
//				0,0,0,0);
				huart2.Instance->ISR, huart2.Instance->CR1, huart2.Instance->CR2, huart2.Instance->CR3);
 8006756:	4bac      	ldr	r3, [pc, #688]	; (8006a08 <VerySlowLoop+0x2fc>)
 8006758:	681b      	ldr	r3, [r3, #0]
		DBG_SPRINT_NL("RTU: {RX:%u,TX:%u, Err:%u}, Reg: {SR:0x%08X, CR1:0x%08X, CR2:0x%08X, CR3: 0x%08X}",
 800675a:	69db      	ldr	r3, [r3, #28]
				huart2.Instance->ISR, huart2.Instance->CR1, huart2.Instance->CR2, huart2.Instance->CR3);
 800675c:	4aaa      	ldr	r2, [pc, #680]	; (8006a08 <VerySlowLoop+0x2fc>)
 800675e:	6812      	ldr	r2, [r2, #0]
		DBG_SPRINT_NL("RTU: {RX:%u,TX:%u, Err:%u}, Reg: {SR:0x%08X, CR1:0x%08X, CR2:0x%08X, CR3: 0x%08X}",
 8006760:	6812      	ldr	r2, [r2, #0]
				huart2.Instance->ISR, huart2.Instance->CR1, huart2.Instance->CR2, huart2.Instance->CR3);
 8006762:	49a9      	ldr	r1, [pc, #676]	; (8006a08 <VerySlowLoop+0x2fc>)
 8006764:	6809      	ldr	r1, [r1, #0]
		DBG_SPRINT_NL("RTU: {RX:%u,TX:%u, Err:%u}, Reg: {SR:0x%08X, CR1:0x%08X, CR2:0x%08X, CR3: 0x%08X}",
 8006766:	6849      	ldr	r1, [r1, #4]
				huart2.Instance->ISR, huart2.Instance->CR1, huart2.Instance->CR2, huart2.Instance->CR3);
 8006768:	48a7      	ldr	r0, [pc, #668]	; (8006a08 <VerySlowLoop+0x2fc>)
 800676a:	6800      	ldr	r0, [r0, #0]
		DBG_SPRINT_NL("RTU: {RX:%u,TX:%u, Err:%u}, Reg: {SR:0x%08X, CR1:0x%08X, CR2:0x%08X, CR3: 0x%08X}",
 800676c:	6880      	ldr	r0, [r0, #8]
 800676e:	9003      	str	r0, [sp, #12]
 8006770:	9102      	str	r1, [sp, #8]
 8006772:	9201      	str	r2, [sp, #4]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	4633      	mov	r3, r6
 8006778:	462a      	mov	r2, r5
 800677a:	4621      	mov	r1, r4
 800677c:	48a3      	ldr	r0, [pc, #652]	; (8006a0c <VerySlowLoop+0x300>)
 800677e:	f007 fa61 	bl	800dc44 <DBG_SPRINT_NL>
//

	DBG_SPRINT_NL("Serial: { Proto: %d, Config: 0x%04X, BR_Hal: %u "
			"BR_Set: %u, data: %d, parit: %d, stop: %ld, "
			"BRR: %04X, Timout: %ld  }",
			gVar.mbSerial.protocol, gVar.mbSerial.serialConfigValue, huart2.Init.BaudRate,
 8006782:	4b9d      	ldr	r3, [pc, #628]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006784:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
	DBG_SPRINT_NL("Serial: { Proto: %d, Config: 0x%04X, BR_Hal: %u "
 8006788:	469c      	mov	ip, r3
			gVar.mbSerial.protocol, gVar.mbSerial.serialConfigValue, huart2.Init.BaudRate,
 800678a:	4b9b      	ldr	r3, [pc, #620]	; (80069f8 <VerySlowLoop+0x2ec>)
 800678c:	f8b3 368e 	ldrh.w	r3, [r3, #1678]	; 0x68e
	DBG_SPRINT_NL("Serial: { Proto: %d, Config: 0x%04X, BR_Hal: %u "
 8006790:	469e      	mov	lr, r3
 8006792:	4b9d      	ldr	r3, [pc, #628]	; (8006a08 <VerySlowLoop+0x2fc>)
 8006794:	6859      	ldr	r1, [r3, #4]
 8006796:	4b98      	ldr	r3, [pc, #608]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006798:	f8d3 3694 	ldr.w	r3, [r3, #1684]	; 0x694
			gVar.mbSerial.baudRate, gVar.mbSerial.dataBits, gVar.mbSerial.parityBit,
 800679c:	4a96      	ldr	r2, [pc, #600]	; (80069f8 <VerySlowLoop+0x2ec>)
 800679e:	f892 2698 	ldrb.w	r2, [r2, #1688]	; 0x698
	DBG_SPRINT_NL("Serial: { Proto: %d, Config: 0x%04X, BR_Hal: %u "
 80067a2:	4614      	mov	r4, r2
			gVar.mbSerial.baudRate, gVar.mbSerial.dataBits, gVar.mbSerial.parityBit,
 80067a4:	4a94      	ldr	r2, [pc, #592]	; (80069f8 <VerySlowLoop+0x2ec>)
 80067a6:	f892 2699 	ldrb.w	r2, [r2, #1689]	; 0x699
	DBG_SPRINT_NL("Serial: { Proto: %d, Config: 0x%04X, BR_Hal: %u "
 80067aa:	4615      	mov	r5, r2
			gVar.mbSerial.stopBit, huart2.Instance->BRR,gVar.mbSerial.respTimer.timeout);
 80067ac:	4a92      	ldr	r2, [pc, #584]	; (80069f8 <VerySlowLoop+0x2ec>)
 80067ae:	f892 269a 	ldrb.w	r2, [r2, #1690]	; 0x69a
	DBG_SPRINT_NL("Serial: { Proto: %d, Config: 0x%04X, BR_Hal: %u "
 80067b2:	4616      	mov	r6, r2
			gVar.mbSerial.stopBit, huart2.Instance->BRR,gVar.mbSerial.respTimer.timeout);
 80067b4:	4a94      	ldr	r2, [pc, #592]	; (8006a08 <VerySlowLoop+0x2fc>)
 80067b6:	6812      	ldr	r2, [r2, #0]
	DBG_SPRINT_NL("Serial: { Proto: %d, Config: 0x%04X, BR_Hal: %u "
 80067b8:	68d2      	ldr	r2, [r2, #12]
			gVar.mbSerial.stopBit, huart2.Instance->BRR,gVar.mbSerial.respTimer.timeout);
 80067ba:	488f      	ldr	r0, [pc, #572]	; (80069f8 <VerySlowLoop+0x2ec>)
 80067bc:	f8b0 06a6 	ldrh.w	r0, [r0, #1702]	; 0x6a6
	DBG_SPRINT_NL("Serial: { Proto: %d, Config: 0x%04X, BR_Hal: %u "
 80067c0:	9005      	str	r0, [sp, #20]
 80067c2:	9204      	str	r2, [sp, #16]
 80067c4:	9603      	str	r6, [sp, #12]
 80067c6:	9502      	str	r5, [sp, #8]
 80067c8:	9401      	str	r4, [sp, #4]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	460b      	mov	r3, r1
 80067ce:	4672      	mov	r2, lr
 80067d0:	4661      	mov	r1, ip
 80067d2:	488f      	ldr	r0, [pc, #572]	; (8006a10 <VerySlowLoop+0x304>)
 80067d4:	f007 fa36 	bl	800dc44 <DBG_SPRINT_NL>
////
	DBG_SPRINT_NL("MB Serial: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld }",
			gVar.mbSerial.mode,gVar.mbSerial.isBusy, gVar.mbSerial.respTimer.isTimeout,
 80067d8:	4b87      	ldr	r3, [pc, #540]	; (80069f8 <VerySlowLoop+0x2ec>)
 80067da:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
	DBG_SPRINT_NL("MB Serial: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld }",
 80067de:	4619      	mov	r1, r3
			gVar.mbSerial.mode,gVar.mbSerial.isBusy, gVar.mbSerial.respTimer.isTimeout,
 80067e0:	4b85      	ldr	r3, [pc, #532]	; (80069f8 <VerySlowLoop+0x2ec>)
 80067e2:	f893 369c 	ldrb.w	r3, [r3, #1692]	; 0x69c
	DBG_SPRINT_NL("MB Serial: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld }",
 80067e6:	461a      	mov	r2, r3
			gVar.mbSerial.mode,gVar.mbSerial.isBusy, gVar.mbSerial.respTimer.isTimeout,
 80067e8:	4b83      	ldr	r3, [pc, #524]	; (80069f8 <VerySlowLoop+0x2ec>)
 80067ea:	f893 36a8 	ldrb.w	r3, [r3, #1704]	; 0x6a8
	DBG_SPRINT_NL("MB Serial: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld }",
 80067ee:	4618      	mov	r0, r3
			gVar.mbSerial.respTimer.timeout);
 80067f0:	4b81      	ldr	r3, [pc, #516]	; (80069f8 <VerySlowLoop+0x2ec>)
 80067f2:	f8b3 36a6 	ldrh.w	r3, [r3, #1702]	; 0x6a6
	DBG_SPRINT_NL("MB Serial: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld }",
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4603      	mov	r3, r0
 80067fa:	4886      	ldr	r0, [pc, #536]	; (8006a14 <VerySlowLoop+0x308>)
 80067fc:	f007 fa22 	bl	800dc44 <DBG_SPRINT_NL>
	DBG_SPRINT_NL("MB Gateway: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld ,rfcTEN: %d, rfcTOUT: %ld }",
			gVar.mbGateway.mode, gVar.mbGateway.isBusy, gVar.mbGateway.rplyTimer.enable, gVar.mbGateway.rplyTimer.timeout,
 8006800:	4a7d      	ldr	r2, [pc, #500]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006802:	f641 134e 	movw	r3, #6478	; 0x194e
 8006806:	4413      	add	r3, r2
 8006808:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("MB Gateway: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld ,rfcTEN: %d, rfcTOUT: %ld }",
 800680a:	461c      	mov	r4, r3
			gVar.mbGateway.mode, gVar.mbGateway.isBusy, gVar.mbGateway.rplyTimer.enable, gVar.mbGateway.rplyTimer.timeout,
 800680c:	4a7a      	ldr	r2, [pc, #488]	; (80069f8 <VerySlowLoop+0x2ec>)
 800680e:	f641 1370 	movw	r3, #6512	; 0x1970
 8006812:	4413      	add	r3, r2
 8006814:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("MB Gateway: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld ,rfcTEN: %d, rfcTOUT: %ld }",
 8006816:	461d      	mov	r5, r3
			gVar.mbGateway.mode, gVar.mbGateway.isBusy, gVar.mbGateway.rplyTimer.enable, gVar.mbGateway.rplyTimer.timeout,
 8006818:	4a77      	ldr	r2, [pc, #476]	; (80069f8 <VerySlowLoop+0x2ec>)
 800681a:	f641 1358 	movw	r3, #6488	; 0x1958
 800681e:	4413      	add	r3, r2
 8006820:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("MB Gateway: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld ,rfcTEN: %d, rfcTOUT: %ld }",
 8006822:	461e      	mov	r6, r3
 8006824:	4a74      	ldr	r2, [pc, #464]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006826:	f641 1368 	movw	r3, #6504	; 0x1968
 800682a:	4413      	add	r3, r2
 800682c:	681a      	ldr	r2, [r3, #0]
			gVar.mbGateway.rplyTimRglrFC.enable, gVar.mbGateway.rplyTimRglrFC.timeout);
 800682e:	4972      	ldr	r1, [pc, #456]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006830:	f641 1378 	movw	r3, #6520	; 0x1978
 8006834:	440b      	add	r3, r1
 8006836:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("MB Gateway: { MD: %d, BSY: %d, TEN: %d, TOUT: %ld ,rfcTEN: %d, rfcTOUT: %ld }",
 8006838:	4618      	mov	r0, r3
 800683a:	496f      	ldr	r1, [pc, #444]	; (80069f8 <VerySlowLoop+0x2ec>)
 800683c:	f641 1388 	movw	r3, #6536	; 0x1988
 8006840:	440b      	add	r3, r1
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	9302      	str	r3, [sp, #8]
 8006846:	9001      	str	r0, [sp, #4]
 8006848:	9200      	str	r2, [sp, #0]
 800684a:	4633      	mov	r3, r6
 800684c:	462a      	mov	r2, r5
 800684e:	4621      	mov	r1, r4
 8006850:	4871      	ldr	r0, [pc, #452]	; (8006a18 <VerySlowLoop+0x30c>)
 8006852:	f007 f9f7 	bl	800dc44 <DBG_SPRINT_NL>
	DBG_SPRINT_NL("MB Master: { EN: %d, BSY: %d, RTEN: %d, RTOUT: %d, PTEN: %d, RTOUT: %ld }",
			gVar.mbRTUMaster.enable, gVar.mbRTUMaster.isBusy,
 8006856:	4b68      	ldr	r3, [pc, #416]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006858:	f893 3948 	ldrb.w	r3, [r3, #2376]	; 0x948
	DBG_SPRINT_NL("MB Master: { EN: %d, BSY: %d, RTEN: %d, RTOUT: %d, PTEN: %d, RTOUT: %ld }",
 800685c:	4618      	mov	r0, r3
			gVar.mbRTUMaster.enable, gVar.mbRTUMaster.isBusy,
 800685e:	4b66      	ldr	r3, [pc, #408]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006860:	f893 396b 	ldrb.w	r3, [r3, #2411]	; 0x96b
	DBG_SPRINT_NL("MB Master: { EN: %d, BSY: %d, RTEN: %d, RTOUT: %d, PTEN: %d, RTOUT: %ld }",
 8006864:	461c      	mov	r4, r3
			gVar.mbRTUMaster.replyTimer.enableTimer, gVar.mbRTUMaster.replyTimer.timeout,
 8006866:	4b64      	ldr	r3, [pc, #400]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006868:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
	DBG_SPRINT_NL("MB Master: { EN: %d, BSY: %d, RTEN: %d, RTOUT: %d, PTEN: %d, RTOUT: %ld }",
 800686c:	461d      	mov	r5, r3
 800686e:	4b62      	ldr	r3, [pc, #392]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006870:	f8d3 3960 	ldr.w	r3, [r3, #2400]	; 0x960
			gVar.mbRTUMaster.custom.reTransTimer.enable, gVar.mbRTUMaster.custom.reTransTimer.timeout);
 8006874:	4a60      	ldr	r2, [pc, #384]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006876:	f892 2978 	ldrb.w	r2, [r2, #2424]	; 0x978
	DBG_SPRINT_NL("MB Master: { EN: %d, BSY: %d, RTEN: %d, RTOUT: %d, PTEN: %d, RTOUT: %ld }",
 800687a:	4611      	mov	r1, r2
 800687c:	4a5e      	ldr	r2, [pc, #376]	; (80069f8 <VerySlowLoop+0x2ec>)
 800687e:	f8d2 2988 	ldr.w	r2, [r2, #2440]	; 0x988
 8006882:	9202      	str	r2, [sp, #8]
 8006884:	9101      	str	r1, [sp, #4]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	462b      	mov	r3, r5
 800688a:	4622      	mov	r2, r4
 800688c:	4601      	mov	r1, r0
 800688e:	4863      	ldr	r0, [pc, #396]	; (8006a1c <VerySlowLoop+0x310>)
 8006890:	f007 f9d8 	bl	800dc44 <DBG_SPRINT_NL>
//
	DBG_SPRINT_NL("MB Master: { EN: %d, slvSA: %d, nSlv: %d, rplyTmout: %ld, reTxTimout: %ld }",
				gVar.mbRTUMaster.enable, gVar.mbRTUMaster.custom.slvStartAddr,
 8006894:	4b58      	ldr	r3, [pc, #352]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006896:	f893 3948 	ldrb.w	r3, [r3, #2376]	; 0x948
	DBG_SPRINT_NL("MB Master: { EN: %d, slvSA: %d, nSlv: %d, rplyTmout: %ld, reTxTimout: %ld }",
 800689a:	4619      	mov	r1, r3
				gVar.mbRTUMaster.enable, gVar.mbRTUMaster.custom.slvStartAddr,
 800689c:	4b56      	ldr	r3, [pc, #344]	; (80069f8 <VerySlowLoop+0x2ec>)
 800689e:	f893 3971 	ldrb.w	r3, [r3, #2417]	; 0x971
	DBG_SPRINT_NL("MB Master: { EN: %d, slvSA: %d, nSlv: %d, rplyTmout: %ld, reTxTimout: %ld }",
 80068a2:	4618      	mov	r0, r3
				gVar.mbRTUMaster.custom.numOfSlv,  gVar.mbRTUMaster.replyTimer.timeout, gVar.mbRTUMaster.custom.reTransTimer.timeout);
 80068a4:	4b54      	ldr	r3, [pc, #336]	; (80069f8 <VerySlowLoop+0x2ec>)
 80068a6:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
	DBG_SPRINT_NL("MB Master: { EN: %d, slvSA: %d, nSlv: %d, rplyTmout: %ld, reTxTimout: %ld }",
 80068aa:	461c      	mov	r4, r3
 80068ac:	4b52      	ldr	r3, [pc, #328]	; (80069f8 <VerySlowLoop+0x2ec>)
 80068ae:	f8d3 3960 	ldr.w	r3, [r3, #2400]	; 0x960
 80068b2:	4a51      	ldr	r2, [pc, #324]	; (80069f8 <VerySlowLoop+0x2ec>)
 80068b4:	f8d2 2988 	ldr.w	r2, [r2, #2440]	; 0x988
 80068b8:	9201      	str	r2, [sp, #4]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	4623      	mov	r3, r4
 80068be:	4602      	mov	r2, r0
 80068c0:	4857      	ldr	r0, [pc, #348]	; (8006a20 <VerySlowLoop+0x314>)
 80068c2:	f007 f9bf 	bl	800dc44 <DBG_SPRINT_NL>

//
	DBG_SPRINT_NL("MB Slave: { SA: %d, Timout: %ld }",
			gVar.mbRTUSlave.slave_address, gVar.mbRTUSlave.custom.waitingTimer.timeout);
 80068c6:	4b4c      	ldr	r3, [pc, #304]	; (80069f8 <VerySlowLoop+0x2ec>)
 80068c8:	f893 38c8 	ldrb.w	r3, [r3, #2248]	; 0x8c8
	DBG_SPRINT_NL("MB Slave: { SA: %d, Timout: %ld }",
 80068cc:	4619      	mov	r1, r3
 80068ce:	4b4a      	ldr	r3, [pc, #296]	; (80069f8 <VerySlowLoop+0x2ec>)
 80068d0:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80068d4:	461a      	mov	r2, r3
 80068d6:	4853      	ldr	r0, [pc, #332]	; (8006a24 <VerySlowLoop+0x318>)
 80068d8:	f007 f9b4 	bl	800dc44 <DBG_SPRINT_NL>
//
//	DBG_SPRINT_NL(dbug.str);
//

//
	char str[256] = {0};
 80068dc:	f107 030c 	add.w	r3, r7, #12
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	3304      	adds	r3, #4
 80068e6:	22fc      	movs	r2, #252	; 0xfc
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f01f ff22 	bl	8026734 <memset>
//	gVar.pid2.kp,  gVar.pid2.ki, gVar.pid2.kd,
//	gVar.pid2.output_p, gVar.pid2.output_i, gVar.pid2.output_d,
//	gVar.pid2.output_i_max, gVar.pid2.output_pid);
//////	DBG_SPRINT_NL(" period: %u", gVar.dio.di[DI_1].pulseInf.period);

	ENC_GetDirQuad(&gVar.dio.enc);
 80068f0:	484d      	ldr	r0, [pc, #308]	; (8006a28 <VerySlowLoop+0x31c>)
 80068f2:	f008 f839 	bl	800e968 <ENC_GetDirQuad>
	DBG_SPRINT_APPEND(str,"ENC_1: { " );
 80068f6:	f107 030c 	add.w	r3, r7, #12
 80068fa:	494c      	ldr	r1, [pc, #304]	; (8006a2c <VerySlowLoop+0x320>)
 80068fc:	4618      	mov	r0, r3
 80068fe:	f007 f9dd 	bl	800dcbc <DBG_SPRINT_APPEND>
	DBG_SPRINT_APPEND(str,"EN: %d, MOD: %d, QTrig: %d, ATrig: %d, BTrig: %d"
			,gVar.dio.enc.enable,gVar.dio.enc.configs.mode, gVar.dio.enc.configs.quadrature.trigMode,
 8006902:	4a3d      	ldr	r2, [pc, #244]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006904:	f242 4344 	movw	r3, #9284	; 0x2444
 8006908:	4413      	add	r3, r2
 800690a:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_APPEND(str,"EN: %d, MOD: %d, QTrig: %d, ATrig: %d, BTrig: %d"
 800690c:	461d      	mov	r5, r3
			,gVar.dio.enc.enable,gVar.dio.enc.configs.mode, gVar.dio.enc.configs.quadrature.trigMode,
 800690e:	4a3a      	ldr	r2, [pc, #232]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006910:	f242 4348 	movw	r3, #9288	; 0x2448
 8006914:	4413      	add	r3, r2
 8006916:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_APPEND(str,"EN: %d, MOD: %d, QTrig: %d, ATrig: %d, BTrig: %d"
 8006918:	461e      	mov	r6, r3
			,gVar.dio.enc.enable,gVar.dio.enc.configs.mode, gVar.dio.enc.configs.quadrature.trigMode,
 800691a:	4a37      	ldr	r2, [pc, #220]	; (80069f8 <VerySlowLoop+0x2ec>)
 800691c:	f242 4374 	movw	r3, #9332	; 0x2474
 8006920:	4413      	add	r3, r2
 8006922:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_APPEND(str,"EN: %d, MOD: %d, QTrig: %d, ATrig: %d, BTrig: %d"
 8006924:	4619      	mov	r1, r3
			gVar.dio.enc.configs.channelA.trigMode,gVar.dio.enc.configs.channelB.trigMode);
 8006926:	4a34      	ldr	r2, [pc, #208]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006928:	f242 438e 	movw	r3, #9358	; 0x248e
 800692c:	4413      	add	r3, r2
 800692e:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_APPEND(str,"EN: %d, MOD: %d, QTrig: %d, ATrig: %d, BTrig: %d"
 8006930:	461c      	mov	r4, r3
			gVar.dio.enc.configs.channelA.trigMode,gVar.dio.enc.configs.channelB.trigMode);
 8006932:	4a31      	ldr	r2, [pc, #196]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006934:	f242 439a 	movw	r3, #9370	; 0x249a
 8006938:	4413      	add	r3, r2
 800693a:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_APPEND(str,"EN: %d, MOD: %d, QTrig: %d, ATrig: %d, BTrig: %d"
 800693c:	f107 000c 	add.w	r0, r7, #12
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	9401      	str	r4, [sp, #4]
 8006944:	9100      	str	r1, [sp, #0]
 8006946:	4633      	mov	r3, r6
 8006948:	462a      	mov	r2, r5
 800694a:	4939      	ldr	r1, [pc, #228]	; (8006a30 <VerySlowLoop+0x324>)
 800694c:	f007 f9b6 	bl	800dcbc <DBG_SPRINT_APPEND>
	DBG_SPRINT_APPEND(str," }\r\n" );
 8006950:	f107 030c 	add.w	r3, r7, #12
 8006954:	4937      	ldr	r1, [pc, #220]	; (8006a34 <VerySlowLoop+0x328>)
 8006956:	4618      	mov	r0, r3
 8006958:	f007 f9b0 	bl	800dcbc <DBG_SPRINT_APPEND>
	DBG_PRINT(str);
 800695c:	f107 030c 	add.w	r3, r7, #12
 8006960:	4618      	mov	r0, r3
 8006962:	f007 f921 	bl	800dba8 <DBG_PRINT>

	ENC_GetDirQuad(&gVar.dio.enc);
 8006966:	4830      	ldr	r0, [pc, #192]	; (8006a28 <VerySlowLoop+0x31c>)
 8006968:	f007 fffe 	bl	800e968 <ENC_GetDirQuad>
	DBG_SPRINT_APPEND(str,"ENC_2: { " );
 800696c:	f107 030c 	add.w	r3, r7, #12
 8006970:	4931      	ldr	r1, [pc, #196]	; (8006a38 <VerySlowLoop+0x32c>)
 8006972:	4618      	mov	r0, r3
 8006974:	f007 f9a2 	bl	800dcbc <DBG_SPRINT_APPEND>
	DBG_SPRINT_APPEND(str,"CuntQ: %d, DIR: %d, CuntA: %d, CuntB: %d, CuntZ: %d",
 8006978:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <VerySlowLoop+0x2ec>)
 800697a:	f242 43a0 	movw	r3, #9376	; 0x24a0
 800697e:	4413      	add	r3, r2
 8006980:	681c      	ldr	r4, [r3, #0]
			 gVar.dio.enc.counterQuad, gVar.dio.enc.direction,
 8006982:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006984:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8006988:	4413      	add	r3, r2
 800698a:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_APPEND(str,"CuntQ: %d, DIR: %d, CuntA: %d, CuntB: %d, CuntZ: %d",
 800698c:	461d      	mov	r5, r3
 800698e:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <VerySlowLoop+0x2ec>)
 8006990:	f242 43a4 	movw	r3, #9380	; 0x24a4
 8006994:	4413      	add	r3, r2
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	4917      	ldr	r1, [pc, #92]	; (80069f8 <VerySlowLoop+0x2ec>)
 800699a:	f242 43a8 	movw	r3, #9384	; 0x24a8
 800699e:	440b      	add	r3, r1
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	4815      	ldr	r0, [pc, #84]	; (80069f8 <VerySlowLoop+0x2ec>)
 80069a4:	f242 43ac 	movw	r3, #9388	; 0x24ac
 80069a8:	4403      	add	r3, r0
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f107 000c 	add.w	r0, r7, #12
 80069b0:	9302      	str	r3, [sp, #8]
 80069b2:	9101      	str	r1, [sp, #4]
 80069b4:	9200      	str	r2, [sp, #0]
 80069b6:	462b      	mov	r3, r5
 80069b8:	4622      	mov	r2, r4
 80069ba:	4920      	ldr	r1, [pc, #128]	; (8006a3c <VerySlowLoop+0x330>)
 80069bc:	f007 f97e 	bl	800dcbc <DBG_SPRINT_APPEND>
			 gVar.dio.enc.counterA, gVar.dio.enc.counterB, gVar.dio.enc.counterZ);
	DBG_SPRINT_APPEND(str," }\r\n" );
 80069c0:	f107 030c 	add.w	r3, r7, #12
 80069c4:	491b      	ldr	r1, [pc, #108]	; (8006a34 <VerySlowLoop+0x328>)
 80069c6:	4618      	mov	r0, r3
 80069c8:	f007 f978 	bl	800dcbc <DBG_SPRINT_APPEND>
	DBG_PRINT(str);
 80069cc:	f107 030c 	add.w	r3, r7, #12
 80069d0:	4618      	mov	r0, r3
 80069d2:	f007 f8e9 	bl	800dba8 <DBG_PRINT>

	DBG_SPRINT_APPEND(str,"DI_A: { " );
 80069d6:	f107 030c 	add.w	r3, r7, #12
 80069da:	4919      	ldr	r1, [pc, #100]	; (8006a40 <VerySlowLoop+0x334>)
 80069dc:	4618      	mov	r0, r3
 80069de:	f007 f96d 	bl	800dcbc <DBG_SPRINT_APPEND>
	for (uint8_t i = DI_1; i <= DI_2; ++i) {
 80069e2:	2300      	movs	r3, #0
 80069e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80069e8:	e077      	b.n	8006ada <VerySlowLoop+0x3ce>
 80069ea:	bf00      	nop
 80069ec:	24000880 	.word	0x24000880
 80069f0:	240008c0 	.word	0x240008c0
 80069f4:	0802a178 	.word	0x0802a178
 80069f8:	24002050 	.word	0x24002050
 80069fc:	0802a17c 	.word	0x0802a17c
 8006a00:	240008c4 	.word	0x240008c4
 8006a04:	240008c8 	.word	0x240008c8
 8006a08:	24005bbc 	.word	0x24005bbc
 8006a0c:	0802a198 	.word	0x0802a198
 8006a10:	0802a1ec 	.word	0x0802a1ec
 8006a14:	0802a264 	.word	0x0802a264
 8006a18:	0802a298 	.word	0x0802a298
 8006a1c:	0802a2e8 	.word	0x0802a2e8
 8006a20:	0802a334 	.word	0x0802a334
 8006a24:	0802a380 	.word	0x0802a380
 8006a28:	24004494 	.word	0x24004494
 8006a2c:	0802a3a4 	.word	0x0802a3a4
 8006a30:	0802a3b0 	.word	0x0802a3b0
 8006a34:	0802a3e4 	.word	0x0802a3e4
 8006a38:	0802a3ec 	.word	0x0802a3ec
 8006a3c:	0802a3f8 	.word	0x0802a3f8
 8006a40:	0802a42c 	.word	0x0802a42c
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d, CTYP: %d, TMD: %d, pPRD: %ld, PRDMIN: %ld}, "
 8006a44:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
				,i,gVar.dio.di[i].config.mode, gVar.dio.di[i].state, gVar.dio.di[i].config.counterType, gVar.dio.di[i].config.trigMode,
 8006a48:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006a4c:	4a5e      	ldr	r2, [pc, #376]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006a4e:	3389      	adds	r3, #137	; 0x89
 8006a50:	019b      	lsls	r3, r3, #6
 8006a52:	4413      	add	r3, r2
 8006a54:	3308      	adds	r3, #8
 8006a56:	781b      	ldrb	r3, [r3, #0]
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d, CTYP: %d, TMD: %d, pPRD: %ld, PRDMIN: %ld}, "
 8006a58:	469c      	mov	ip, r3
				,i,gVar.dio.di[i].config.mode, gVar.dio.di[i].state, gVar.dio.di[i].config.counterType, gVar.dio.di[i].config.trigMode,
 8006a5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006a5e:	4a5a      	ldr	r2, [pc, #360]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006a60:	019b      	lsls	r3, r3, #6
 8006a62:	441a      	add	r2, r3
 8006a64:	f242 2368 	movw	r3, #8808	; 0x2268
 8006a68:	4413      	add	r3, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d, CTYP: %d, TMD: %d, pPRD: %ld, PRDMIN: %ld}, "
 8006a6c:	461d      	mov	r5, r3
				,i,gVar.dio.di[i].config.mode, gVar.dio.di[i].state, gVar.dio.di[i].config.counterType, gVar.dio.di[i].config.trigMode,
 8006a6e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006a72:	4a55      	ldr	r2, [pc, #340]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006a74:	3389      	adds	r3, #137	; 0x89
 8006a76:	019b      	lsls	r3, r3, #6
 8006a78:	4413      	add	r3, r2
 8006a7a:	3309      	adds	r3, #9
 8006a7c:	781b      	ldrb	r3, [r3, #0]
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d, CTYP: %d, TMD: %d, pPRD: %ld, PRDMIN: %ld}, "
 8006a7e:	461e      	mov	r6, r3
				,i,gVar.dio.di[i].config.mode, gVar.dio.di[i].state, gVar.dio.di[i].config.counterType, gVar.dio.di[i].config.trigMode,
 8006a80:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006a84:	4a50      	ldr	r2, [pc, #320]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006a86:	3389      	adds	r3, #137	; 0x89
 8006a88:	019b      	lsls	r3, r3, #6
 8006a8a:	4413      	add	r3, r2
 8006a8c:	330b      	adds	r3, #11
 8006a8e:	781b      	ldrb	r3, [r3, #0]
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d, CTYP: %d, TMD: %d, pPRD: %ld, PRDMIN: %ld}, "
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006a96:	4a4c      	ldr	r2, [pc, #304]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006a98:	019b      	lsls	r3, r3, #6
 8006a9a:	441a      	add	r2, r3
 8006a9c:	f242 2378 	movw	r3, #8824	; 0x2278
 8006aa0:	4413      	add	r3, r2
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006aa8:	4947      	ldr	r1, [pc, #284]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006aaa:	019b      	lsls	r3, r3, #6
 8006aac:	4419      	add	r1, r3
 8006aae:	f242 237c 	movw	r3, #8828	; 0x227c
 8006ab2:	440b      	add	r3, r1
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f107 000c 	add.w	r0, r7, #12
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	9203      	str	r2, [sp, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	9302      	str	r3, [sp, #8]
 8006ac2:	9601      	str	r6, [sp, #4]
 8006ac4:	9500      	str	r5, [sp, #0]
 8006ac6:	4663      	mov	r3, ip
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4940      	ldr	r1, [pc, #256]	; (8006bcc <VerySlowLoop+0x4c0>)
 8006acc:	f007 f8f6 	bl	800dcbc <DBG_SPRINT_APPEND>
	for (uint8_t i = DI_1; i <= DI_2; ++i) {
 8006ad0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8006ada:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d9b0      	bls.n	8006a44 <VerySlowLoop+0x338>
				gVar.dio.di[i].pulseInf.period, gVar.dio.di[i].pulseInf.periodMin);
	}
	DBG_SPRINT_APPEND(str,"}\r\n" );
 8006ae2:	f107 030c 	add.w	r3, r7, #12
 8006ae6:	493a      	ldr	r1, [pc, #232]	; (8006bd0 <VerySlowLoop+0x4c4>)
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f007 f8e7 	bl	800dcbc <DBG_SPRINT_APPEND>
	DBG_PRINT(str);
 8006aee:	f107 030c 	add.w	r3, r7, #12
 8006af2:	4618      	mov	r0, r3
 8006af4:	f007 f858 	bl	800dba8 <DBG_PRINT>


	DBG_SPRINT_APPEND(str,"DI_B: { " );
 8006af8:	f107 030c 	add.w	r3, r7, #12
 8006afc:	4935      	ldr	r1, [pc, #212]	; (8006bd4 <VerySlowLoop+0x4c8>)
 8006afe:	4618      	mov	r0, r3
 8006b00:	f007 f8dc 	bl	800dcbc <DBG_SPRINT_APPEND>
	for (uint8_t i = DI_3; i <= DI_4; ++i) {
 8006b04:	2302      	movs	r3, #2
 8006b06:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8006b0a:	e020      	b.n	8006b4e <VerySlowLoop+0x442>
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d}, "
 8006b0c:	f897 110e 	ldrb.w	r1, [r7, #270]	; 0x10e
				,i,gVar.dio.di[i].config.mode, gVar.dio.di[i].state);
 8006b10:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8006b14:	4a2c      	ldr	r2, [pc, #176]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006b16:	3389      	adds	r3, #137	; 0x89
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	781b      	ldrb	r3, [r3, #0]
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d}, "
 8006b20:	461c      	mov	r4, r3
				,i,gVar.dio.di[i].config.mode, gVar.dio.di[i].state);
 8006b22:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8006b26:	4a28      	ldr	r2, [pc, #160]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006b28:	019b      	lsls	r3, r3, #6
 8006b2a:	441a      	add	r2, r3
 8006b2c:	f242 2368 	movw	r3, #8808	; 0x2268
 8006b30:	4413      	add	r3, r2
 8006b32:	781b      	ldrb	r3, [r3, #0]
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d}, "
 8006b34:	f107 000c 	add.w	r0, r7, #12
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	460a      	mov	r2, r1
 8006b3e:	4926      	ldr	r1, [pc, #152]	; (8006bd8 <VerySlowLoop+0x4cc>)
 8006b40:	f007 f8bc 	bl	800dcbc <DBG_SPRINT_APPEND>
	for (uint8_t i = DI_3; i <= DI_4; ++i) {
 8006b44:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8006b48:	3301      	adds	r3, #1
 8006b4a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8006b4e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d9da      	bls.n	8006b0c <VerySlowLoop+0x400>
	}
//	DBG_SPRINT_APPEND(str,"}" );
//	DBG_PRINT(str);

//	DBG_SPRINT_APPEND(str,"\r\nDI_B: { " );
	for (uint8_t i = DI_5; i < DI_MAX; ++i) {
 8006b56:	2304      	movs	r3, #4
 8006b58:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8006b5c:	e020      	b.n	8006ba0 <VerySlowLoop+0x494>
		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, STAT: %d}, ",i,gVar.dio.di[i].config.mode, gVar.dio.di[i].state);
 8006b5e:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 8006b62:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8006b66:	4a18      	ldr	r2, [pc, #96]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006b68:	3389      	adds	r3, #137	; 0x89
 8006b6a:	019b      	lsls	r3, r3, #6
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3308      	adds	r3, #8
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	461c      	mov	r4, r3
 8006b74:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8006b78:	4a13      	ldr	r2, [pc, #76]	; (8006bc8 <VerySlowLoop+0x4bc>)
 8006b7a:	019b      	lsls	r3, r3, #6
 8006b7c:	441a      	add	r2, r3
 8006b7e:	f242 2368 	movw	r3, #8808	; 0x2268
 8006b82:	4413      	add	r3, r2
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	f107 000c 	add.w	r0, r7, #12
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4623      	mov	r3, r4
 8006b8e:	460a      	mov	r2, r1
 8006b90:	4911      	ldr	r1, [pc, #68]	; (8006bd8 <VerySlowLoop+0x4cc>)
 8006b92:	f007 f893 	bl	800dcbc <DBG_SPRINT_APPEND>
	for (uint8_t i = DI_5; i < DI_MAX; ++i) {
 8006b96:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8006ba0:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8006ba4:	2b07      	cmp	r3, #7
 8006ba6:	d9da      	bls.n	8006b5e <VerySlowLoop+0x452>
	}
	DBG_SPRINT_APPEND(str,"}\r\n" );
 8006ba8:	f107 030c 	add.w	r3, r7, #12
 8006bac:	4908      	ldr	r1, [pc, #32]	; (8006bd0 <VerySlowLoop+0x4c4>)
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f007 f884 	bl	800dcbc <DBG_SPRINT_APPEND>
	DBG_PRINT(str);
 8006bb4:	f107 030c 	add.w	r3, r7, #12
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f006 fff5 	bl	800dba8 <DBG_PRINT>
//		DBG_SPRINT_APPEND(str,"Ch-%d: {MOD: %d, SRC: %d, STAT: %d}, ",i,gVar.dio.dout[i].mode, gVar.dio.dout[i].source, gVar.dio.dout[i].state);
//	}
//	DBG_SPRINT_APPEND(str,"}" );
//	DBG_PRINT(str);

	for(uint8_t i = 0; i < AI_MAX; i++){
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8006bc4:	e053      	b.n	8006c6e <VerySlowLoop+0x562>
 8006bc6:	bf00      	nop
 8006bc8:	24002050 	.word	0x24002050
 8006bcc:	0802a438 	.word	0x0802a438
 8006bd0:	0802a480 	.word	0x0802a480
 8006bd4:	0802a484 	.word	0x0802a484
 8006bd8:	0802a490 	.word	0x0802a490
	DBG_SPRINT_NL("AI_%d: { MOD: %d, ADC: %d, V: %0.2fmV, I: %0.2fmA }",i+1,
 8006bdc:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8006be0:	1c59      	adds	r1, r3, #1
			gVar.ai[i].mode, gVar.ai[i].rawValue, gVar.ai[i].voltage,  gVar.ai[i].current);
 8006be2:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8006be6:	4872      	ldr	r0, [pc, #456]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006be8:	4613      	mov	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	18c2      	adds	r2, r0, r3
 8006bf2:	f641 7310 	movw	r3, #7952	; 0x1f10
 8006bf6:	4413      	add	r3, r2
 8006bf8:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AI_%d: { MOD: %d, ADC: %d, V: %0.2fmV, I: %0.2fmA }",i+1,
 8006bfa:	461c      	mov	r4, r3
			gVar.ai[i].mode, gVar.ai[i].rawValue, gVar.ai[i].voltage,  gVar.ai[i].current);
 8006bfc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8006c00:	486b      	ldr	r0, [pc, #428]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006c02:	4613      	mov	r3, r2
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	18c2      	adds	r2, r0, r3
 8006c0c:	f641 7312 	movw	r3, #7954	; 0x1f12
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
	DBG_SPRINT_NL("AI_%d: { MOD: %d, ADC: %d, V: %0.2fmV, I: %0.2fmA }",i+1,
 8006c14:	461d      	mov	r5, r3
			gVar.ai[i].mode, gVar.ai[i].rawValue, gVar.ai[i].voltage,  gVar.ai[i].current);
 8006c16:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8006c1a:	4865      	ldr	r0, [pc, #404]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	18c2      	adds	r2, r0, r3
 8006c26:	f641 7314 	movw	r3, #7956	; 0x1f14
 8006c2a:	4413      	add	r3, r2
 8006c2c:	edd3 7a00 	vldr	s15, [r3]
	DBG_SPRINT_NL("AI_%d: { MOD: %d, ADC: %d, V: %0.2fmV, I: %0.2fmA }",i+1,
 8006c30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			gVar.ai[i].mode, gVar.ai[i].rawValue, gVar.ai[i].voltage,  gVar.ai[i].current);
 8006c34:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8006c38:	485d      	ldr	r0, [pc, #372]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	18c2      	adds	r2, r0, r3
 8006c44:	f641 7318 	movw	r3, #7960	; 0x1f18
 8006c48:	4413      	add	r3, r2
 8006c4a:	edd3 6a00 	vldr	s13, [r3]
	DBG_SPRINT_NL("AI_%d: { MOD: %d, ADC: %d, V: %0.2fmV, I: %0.2fmA }",i+1,
 8006c4e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8006c52:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006c56:	ed8d 7b00 	vstr	d7, [sp]
 8006c5a:	462b      	mov	r3, r5
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	4855      	ldr	r0, [pc, #340]	; (8006db4 <VerySlowLoop+0x6a8>)
 8006c60:	f006 fff0 	bl	800dc44 <DBG_SPRINT_NL>
	for(uint8_t i = 0; i < AI_MAX; i++){
 8006c64:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8006c68:	3301      	adds	r3, #1
 8006c6a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8006c6e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d9b2      	bls.n	8006bdc <VerySlowLoop+0x4d0>
//			gVar.ai3.mode, gVar.ai3.rawValue, gVar.ai3.voltage,  gVar.ai3.current);
//	DBG_SPRINT_NL("AI_4: { MOD: %d, ADC: %d, V: %0.2fmV, I: %0.2fmA }",
//			gVar.ai4.mode, gVar.ai4.rawValue, gVar.ai4.voltage,  gVar.ai4.current);

	DBG_SPRINT_NL("AO_1: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
			gVar.ao[AO_1].enabled, gVar.ao[AO_1].mode, gVar.ao[AO_1].source, gVar.ao[AO_1].value,  gVar.ao[AO_1].pwm.dutyCycle);
 8006c76:	4a4e      	ldr	r2, [pc, #312]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006c78:	f641 6355 	movw	r3, #7765	; 0x1e55
 8006c7c:	4413      	add	r3, r2
 8006c7e:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_1: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006c80:	4618      	mov	r0, r3
			gVar.ao[AO_1].enabled, gVar.ao[AO_1].mode, gVar.ao[AO_1].source, gVar.ao[AO_1].value,  gVar.ao[AO_1].pwm.dutyCycle);
 8006c82:	4a4b      	ldr	r2, [pc, #300]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006c84:	f641 6357 	movw	r3, #7767	; 0x1e57
 8006c88:	4413      	add	r3, r2
 8006c8a:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_1: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006c8c:	461c      	mov	r4, r3
			gVar.ao[AO_1].enabled, gVar.ao[AO_1].mode, gVar.ao[AO_1].source, gVar.ao[AO_1].value,  gVar.ao[AO_1].pwm.dutyCycle);
 8006c8e:	4a48      	ldr	r2, [pc, #288]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006c90:	f641 6356 	movw	r3, #7766	; 0x1e56
 8006c94:	4413      	add	r3, r2
 8006c96:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_1: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006c98:	461d      	mov	r5, r3
			gVar.ao[AO_1].enabled, gVar.ao[AO_1].mode, gVar.ao[AO_1].source, gVar.ao[AO_1].value,  gVar.ao[AO_1].pwm.dutyCycle);
 8006c9a:	4a45      	ldr	r2, [pc, #276]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006c9c:	f641 635c 	movw	r3, #7772	; 0x1e5c
 8006ca0:	4413      	add	r3, r2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
	DBG_SPRINT_NL("AO_1: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006ca4:	4619      	mov	r1, r3
			gVar.ao[AO_1].enabled, gVar.ao[AO_1].mode, gVar.ao[AO_1].source, gVar.ao[AO_1].value,  gVar.ao[AO_1].pwm.dutyCycle);
 8006ca6:	4a42      	ldr	r2, [pc, #264]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006ca8:	f641 6374 	movw	r3, #7796	; 0x1e74
 8006cac:	4413      	add	r3, r2
 8006cae:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_1: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	9100      	str	r1, [sp, #0]
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	4601      	mov	r1, r0
 8006cba:	483f      	ldr	r0, [pc, #252]	; (8006db8 <VerySlowLoop+0x6ac>)
 8006cbc:	f006 ffc2 	bl	800dc44 <DBG_SPRINT_NL>
	DBG_SPRINT_NL("AO_2: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
			gVar.ao[AO_2].enabled, gVar.ao[AO_2].mode, gVar.ao[AO_2].source, gVar.ao[AO_2].value,  gVar.ao[AO_2].pwm.dutyCycle);
 8006cc0:	4a3b      	ldr	r2, [pc, #236]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006cc2:	f641 6381 	movw	r3, #7809	; 0x1e81
 8006cc6:	4413      	add	r3, r2
 8006cc8:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_2: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006cca:	4619      	mov	r1, r3
			gVar.ao[AO_2].enabled, gVar.ao[AO_2].mode, gVar.ao[AO_2].source, gVar.ao[AO_2].value,  gVar.ao[AO_2].pwm.dutyCycle);
 8006ccc:	4a38      	ldr	r2, [pc, #224]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006cce:	f641 6383 	movw	r3, #7811	; 0x1e83
 8006cd2:	4413      	add	r3, r2
 8006cd4:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_2: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006cd6:	4618      	mov	r0, r3
			gVar.ao[AO_2].enabled, gVar.ao[AO_2].mode, gVar.ao[AO_2].source, gVar.ao[AO_2].value,  gVar.ao[AO_2].pwm.dutyCycle);
 8006cd8:	4a35      	ldr	r2, [pc, #212]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006cda:	f641 6382 	movw	r3, #7810	; 0x1e82
 8006cde:	4413      	add	r3, r2
 8006ce0:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_2: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006ce2:	461c      	mov	r4, r3
			gVar.ao[AO_2].enabled, gVar.ao[AO_2].mode, gVar.ao[AO_2].source, gVar.ao[AO_2].value,  gVar.ao[AO_2].pwm.dutyCycle);
 8006ce4:	4a32      	ldr	r2, [pc, #200]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006ce6:	f641 6388 	movw	r3, #7816	; 0x1e88
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
	DBG_SPRINT_NL("AO_2: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006cee:	461a      	mov	r2, r3
			gVar.ao[AO_2].enabled, gVar.ao[AO_2].mode, gVar.ao[AO_2].source, gVar.ao[AO_2].value,  gVar.ao[AO_2].pwm.dutyCycle);
 8006cf0:	4b2f      	ldr	r3, [pc, #188]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006cf2:	f503 53f5 	add.w	r3, r3, #7840	; 0x1ea0
 8006cf6:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_2: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	9200      	str	r2, [sp, #0]
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	4602      	mov	r2, r0
 8006d00:	482e      	ldr	r0, [pc, #184]	; (8006dbc <VerySlowLoop+0x6b0>)
 8006d02:	f006 ff9f 	bl	800dc44 <DBG_SPRINT_NL>
	DBG_SPRINT_NL("AO_3: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
			gVar.ao[AO_3].enabled, gVar.ao[AO_3].mode, gVar.ao[AO_3].source, gVar.ao[AO_3].value,  gVar.ao[AO_3].pwm.dutyCycle);
 8006d06:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d08:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8006d0c:	4413      	add	r3, r2
 8006d0e:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_3: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d10:	4618      	mov	r0, r3
			gVar.ao[AO_3].enabled, gVar.ao[AO_3].mode, gVar.ao[AO_3].source, gVar.ao[AO_3].value,  gVar.ao[AO_3].pwm.dutyCycle);
 8006d12:	4a27      	ldr	r2, [pc, #156]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d14:	f641 63af 	movw	r3, #7855	; 0x1eaf
 8006d18:	4413      	add	r3, r2
 8006d1a:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_3: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d1c:	461c      	mov	r4, r3
			gVar.ao[AO_3].enabled, gVar.ao[AO_3].mode, gVar.ao[AO_3].source, gVar.ao[AO_3].value,  gVar.ao[AO_3].pwm.dutyCycle);
 8006d1e:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d20:	f641 63ae 	movw	r3, #7854	; 0x1eae
 8006d24:	4413      	add	r3, r2
 8006d26:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_3: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d28:	461d      	mov	r5, r3
			gVar.ao[AO_3].enabled, gVar.ao[AO_3].mode, gVar.ao[AO_3].source, gVar.ao[AO_3].value,  gVar.ao[AO_3].pwm.dutyCycle);
 8006d2a:	4a21      	ldr	r2, [pc, #132]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d2c:	f641 63b4 	movw	r3, #7860	; 0x1eb4
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
	DBG_SPRINT_NL("AO_3: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d34:	4619      	mov	r1, r3
			gVar.ao[AO_3].enabled, gVar.ao[AO_3].mode, gVar.ao[AO_3].source, gVar.ao[AO_3].value,  gVar.ao[AO_3].pwm.dutyCycle);
 8006d36:	4a1e      	ldr	r2, [pc, #120]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d38:	f641 63cc 	movw	r3, #7884	; 0x1ecc
 8006d3c:	4413      	add	r3, r2
 8006d3e:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_3: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	9100      	str	r1, [sp, #0]
 8006d44:	462b      	mov	r3, r5
 8006d46:	4622      	mov	r2, r4
 8006d48:	4601      	mov	r1, r0
 8006d4a:	481d      	ldr	r0, [pc, #116]	; (8006dc0 <VerySlowLoop+0x6b4>)
 8006d4c:	f006 ff7a 	bl	800dc44 <DBG_SPRINT_NL>
	DBG_SPRINT_NL("AO_4: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
			gVar.ao[AO_4].enabled, gVar.ao[AO_4].mode, gVar.ao[AO_4].source, gVar.ao[AO_4].value,  gVar.ao[AO_4].pwm.dutyCycle);
 8006d50:	4a17      	ldr	r2, [pc, #92]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d52:	f641 63d9 	movw	r3, #7897	; 0x1ed9
 8006d56:	4413      	add	r3, r2
 8006d58:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_4: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d5a:	4618      	mov	r0, r3
			gVar.ao[AO_4].enabled, gVar.ao[AO_4].mode, gVar.ao[AO_4].source, gVar.ao[AO_4].value,  gVar.ao[AO_4].pwm.dutyCycle);
 8006d5c:	4a14      	ldr	r2, [pc, #80]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d5e:	f641 63db 	movw	r3, #7899	; 0x1edb
 8006d62:	4413      	add	r3, r2
 8006d64:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_4: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d66:	461c      	mov	r4, r3
			gVar.ao[AO_4].enabled, gVar.ao[AO_4].mode, gVar.ao[AO_4].source, gVar.ao[AO_4].value,  gVar.ao[AO_4].pwm.dutyCycle);
 8006d68:	4a11      	ldr	r2, [pc, #68]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d6a:	f641 63da 	movw	r3, #7898	; 0x1eda
 8006d6e:	4413      	add	r3, r2
 8006d70:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_4: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d72:	461d      	mov	r5, r3
			gVar.ao[AO_4].enabled, gVar.ao[AO_4].mode, gVar.ao[AO_4].source, gVar.ao[AO_4].value,  gVar.ao[AO_4].pwm.dutyCycle);
 8006d74:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d76:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8006d7a:	881b      	ldrh	r3, [r3, #0]
	DBG_SPRINT_NL("AO_4: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d7c:	4619      	mov	r1, r3
			gVar.ao[AO_4].enabled, gVar.ao[AO_4].mode, gVar.ao[AO_4].source, gVar.ao[AO_4].value,  gVar.ao[AO_4].pwm.dutyCycle);
 8006d7e:	4a0c      	ldr	r2, [pc, #48]	; (8006db0 <VerySlowLoop+0x6a4>)
 8006d80:	f641 63f8 	movw	r3, #7928	; 0x1ef8
 8006d84:	4413      	add	r3, r2
 8006d86:	781b      	ldrb	r3, [r3, #0]
	DBG_SPRINT_NL("AO_4: { EN: %d, MOD: %d, SRC: %d, DUTY(12-bit): %d, DUTY: %d%% }",
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	9100      	str	r1, [sp, #0]
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	4622      	mov	r2, r4
 8006d90:	4601      	mov	r1, r0
 8006d92:	480c      	ldr	r0, [pc, #48]	; (8006dc4 <VerySlowLoop+0x6b8>)
 8006d94:	f006 ff56 	bl	800dc44 <DBG_SPRINT_NL>
//		DBG_SPRINT("\r\nDO-%d: { SRC: %d, MOD: %d, STAT: %d}",i+1,gVar.dio.do_[i].source,gVar.dio.do_[i].mode,gVar.dio.do_[i].state);
//	}

//	dbug.enable = 0;
	}
	rxLast = rtuRxCount;
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <VerySlowLoop+0x6bc>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a0b      	ldr	r2, [pc, #44]	; (8006dcc <VerySlowLoop+0x6c0>)
 8006d9e:	6013      	str	r3, [r2, #0]
	DBG_DISABLE_TIMESTAMP();
 8006da0:	f006 fffc 	bl	800dd9c <DBG_DISABLE_TIMESTAMP>
}
 8006da4:	bf00      	nop
 8006da6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dae:	bf00      	nop
 8006db0:	24002050 	.word	0x24002050
 8006db4:	0802a4b0 	.word	0x0802a4b0
 8006db8:	0802a4e4 	.word	0x0802a4e4
 8006dbc:	0802a528 	.word	0x0802a528
 8006dc0:	0802a56c 	.word	0x0802a56c
 8006dc4:	0802a5b0 	.word	0x0802a5b0
 8006dc8:	240008c0 	.word	0x240008c0
 8006dcc:	24000880 	.word	0x24000880

08006dd0 <InitialSettings>:
};


/* Default Settings
 * */
void InitialSettings(void){
 8006dd0:	b5b0      	push	{r4, r5, r7, lr}
 8006dd2:	b092      	sub	sp, #72	; 0x48
 8006dd4:	af00      	add	r7, sp, #0

	L6360_IOLink_hw_t* iolPort[IOL_PI_MAX];

	/*Assign Port number to IOLink chip*/
	for(uint8_t i = IOL_PI_0; i < IOL_PI_MAX; i++ ){
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006ddc:	e08d      	b.n	8006efa <InitialSettings+0x12a>
		iolPort[i] 				= &gVar.iolm.port[i];
 8006dde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006de2:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8006de6:	f240 1277 	movw	r2, #375	; 0x177
 8006dea:	fb02 f203 	mul.w	r2, r2, r3
 8006dee:	f242 6308 	movw	r3, #9736	; 0x2608
 8006df2:	4413      	add	r3, r2
 8006df4:	4ae5      	ldr	r2, [pc, #916]	; (800718c <InitialSettings+0x3bc>)
 8006df6:	441a      	add	r2, r3
 8006df8:	008b      	lsls	r3, r1, #2
 8006dfa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006dfe:	440b      	add	r3, r1
 8006e00:	f843 2c1c 	str.w	r2, [r3, #-28]
		iolPort[i]->portNum 	= IOL_PORT_1+i;
 8006e04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e0e:	4413      	add	r3, r2
 8006e10:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006e14:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006e18:	3201      	adds	r2, #1
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]
		/*I2C*/
		L6360_I2CRegister_t reg = {0};
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	721a      	strb	r2, [r3, #8]
		iolPort[i]->i2c.hi2c 	= &hi2c4;
 8006e28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e32:	4413      	add	r3, r2
 8006e34:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006e38:	4ad5      	ldr	r2, [pc, #852]	; (8007190 <InitialSettings+0x3c0>)
 8006e3a:	f8c3 214f 	str.w	r2, [r3, #335]	; 0x14f
		iolPort[i]->i2c.lock	= L6360_UNLOCKED;
 8006e3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e48:	4413      	add	r3, r2
 8006e4a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
		iolPort[i]->i2c.wMode	= L6360_RW_MODE_READ;
 8006e54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e5e:	4413      	add	r3, r2
 8006e60:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
		iolPort[i]->i2c.wRetry	= 0U;
 8006e6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e74:	4413      	add	r3, r2
 8006e76:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		iolPort[i]->i2c.status	= 0;
 8006e80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
		iolPort[i]->reg = reg;
 8006e96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006ea6:	1c9a      	adds	r2, r3, #2
 8006ea8:	1d3b      	adds	r3, r7, #4
 8006eaa:	cb03      	ldmia	r3!, {r0, r1}
 8006eac:	6010      	str	r0, [r2, #0]
 8006eae:	6051      	str	r1, [r2, #4]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	7213      	strb	r3, [r2, #8]
		/*UART*/
		iolPort[i]->uart.lock		= L6360_UNLOCKED;
 8006eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	72da      	strb	r2, [r3, #11]
		iolPort[i]->uart.baudrate	= L6360_UART_COM3_BR230400;
 8006ec8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	731a      	strb	r2, [r3, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8006ee2:	735a      	strb	r2, [r3, #13]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f042 0203 	orr.w	r2, r2, #3
 8006eea:	739a      	strb	r2, [r3, #14]
 8006eec:	2200      	movs	r2, #0
 8006eee:	73da      	strb	r2, [r3, #15]
	for(uint8_t i = IOL_PI_0; i < IOL_PI_MAX; i++ ){
 8006ef0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	f67f af6d 	bls.w	8006dde <InitialSettings+0xe>
	}
	DBG_SPRINT_NL("l6360: %p", &gVar.iolm.port[IOL_PI_0]);
 8006f04:	49a3      	ldr	r1, [pc, #652]	; (8007194 <InitialSettings+0x3c4>)
 8006f06:	48a4      	ldr	r0, [pc, #656]	; (8007198 <InitialSettings+0x3c8>)
 8006f08:	f006 fe9c 	bl	800dc44 <DBG_SPRINT_NL>
	/*IOLink master chip l6360 1---------------------*/
	/*I2C*/
	iolPort[IOL_PI_0]->i2c.devAddress 	= L6360_I2C_DEV_ADDR_1;
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	22c2      	movs	r2, #194	; 0xc2
 8006f10:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

	/*Control pins*/
	iolPort[IOL_PI_0]->ctrlPins.lpEnPort = IOL1_ENL_GPIO_Port;
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f042 0218 	orr.w	r2, r2, #24
 8006f22:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8006f26:	2200      	movs	r2, #0
 8006f28:	f042 0202 	orr.w	r2, r2, #2
 8006f2c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8006f30:	2200      	movs	r2, #0
 8006f32:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8006f36:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	iolPort[IOL_PI_0]->ctrlPins.cqEnPort = IOL1_ENCQ_GPIO_Port;
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
 8006f42:	2200      	movs	r2, #0
 8006f44:	f042 0218 	orr.w	r2, r2, #24
 8006f48:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f042 0202 	orr.w	r2, r2, #2
 8006f52:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
 8006f56:	2200      	movs	r2, #0
 8006f58:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8006f5c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	iolPort[IOL_PI_0]->ctrlPins.rstPort = IOL1_RST_GPIO_Port;
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f042 020c 	orr.w	r2, r2, #12
 8006f6e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8006f72:	2200      	movs	r2, #0
 8006f74:	f042 0202 	orr.w	r2, r2, #2
 8006f78:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8006f82:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	iolPort[IOL_PI_0]->ctrlPins.lpEnPin = IOL1_ENL_Pin;
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f042 0208 	orr.w	r2, r2, #8
 8006f8e:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	iolPort[IOL_PI_0]->ctrlPins.cqEnPin = IOL1_ENCQ_Pin;
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f042 0204 	orr.w	r2, r2, #4
 8006fa0:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	iolPort[IOL_PI_0]->ctrlPins.rstPin = IOL1_RST_Pin;
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f042 0208 	orr.w	r2, r2, #8
 8006fb8:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	/*UART*/
	iolPort[IOL_PI_0]->uart.huart = &huart5;
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	4a77      	ldr	r2, [pc, #476]	; (800719c <InitialSettings+0x3cc>)
 8006fc0:	f8c3 2122 	str.w	r2, [r3, #290]	; 0x122
	iolPort[IOL_PI_0]->uart.huart->Instance = UART5;
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	f8d3 3122 	ldr.w	r3, [r3, #290]	; 0x122
 8006fca:	4a75      	ldr	r2, [pc, #468]	; (80071a0 <InitialSettings+0x3d0>)
 8006fcc:	601a      	str	r2, [r3, #0]
	iolPort[IOL_PI_0]->uart.txPort = IOL1_TX_U5_GPIO_Port;
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f042 0204 	orr.w	r2, r2, #4
 8006fdc:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f042 0202 	orr.w	r2, r2, #2
 8006fe6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8006fea:	2200      	movs	r2, #0
 8006fec:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8006ff0:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
	iolPort[IOL_PI_0]->uart.txPin = IOL1_TX_U5_Pin;
 8006ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f042 0220 	orr.w	r2, r2, #32
 8007002:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
	iolPort[IOL_PI_0]->uart.rxPort = IOL1_RX_U5_GPIO_Port;
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	2200      	movs	r2, #0
 800700a:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 800700e:	2200      	movs	r2, #0
 8007010:	f042 0204 	orr.w	r2, r2, #4
 8007014:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 8007018:	2200      	movs	r2, #0
 800701a:	f042 0202 	orr.w	r2, r2, #2
 800701e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8007022:	2200      	movs	r2, #0
 8007024:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8007028:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	iolPort[IOL_PI_0]->uart.rxPin = IOL1_RX_U5_Pin;
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8007034:	2200      	movs	r2, #0
 8007036:	f042 0210 	orr.w	r2, r2, #16
 800703a:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	iolPort[IOL_PI_0]->uart.irqType = UART5_IRQn;
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	2200      	movs	r2, #0
 8007042:	f042 0235 	orr.w	r2, r2, #53	; 0x35
 8007046:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	iolPort[IOL_PI_0]->uart.priority = 0;
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	iolPort[IOL_PI_0]->uart.subPriority = 0;
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

	iolPort[IOL_PI_0]->uart.dma.hdmaRx = &hdma_uart5_rx;
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007062:	4a50      	ldr	r2, [pc, #320]	; (80071a4 <InitialSettings+0x3d4>)
 8007064:	f8c3 213a 	str.w	r2, [r3, #314]	; 0x13a
//	iolPort[IOL_PI_0]->uart.dma.irqTypDmaRx = DMA1_Stream1_IRQn;
	iolPort[IOL_PI_0]->uart.dma.priorityRx = 0;
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	iolPort[IOL_PI_0]->uart.dma.subPriorityRx = 0;
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	iolPort[IOL_PI_0]->uart.dma.hdmaTx = &hdma_uart5_tx;
 8007078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707a:	4a4b      	ldr	r2, [pc, #300]	; (80071a8 <InitialSettings+0x3d8>)
 800707c:	f8c3 2136 	str.w	r2, [r3, #310]	; 0x136
//	iolPort[IOL_PI_0]->uart.dma.irqTypDmaTx = DMA1_Stream0_IRQn;
	iolPort[IOL_PI_0]->uart.dma.priorityTx = 0;
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2200      	movs	r2, #0
 8007084:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	iolPort[IOL_PI_0]->uart.dma.subPriorityTx = 0;
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	2200      	movs	r2, #0
 800708c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

	/*IOLink master chip l6360 2---------------------*/
	/*I2C*/
	iolPort[IOL_PI_1]->i2c.devAddress 	= L6360_I2C_DEV_ADDR_2;
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	22c4      	movs	r2, #196	; 0xc4
 8007094:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

	/*Control pins*/
	iolPort[IOL_PI_1]->ctrlPins.lpEnPort = IOL2_ENL_GPIO_Port;
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 80070a0:	2200      	movs	r2, #0
 80070a2:	f042 020c 	orr.w	r2, r2, #12
 80070a6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 80070aa:	2200      	movs	r2, #0
 80070ac:	f042 0202 	orr.w	r2, r2, #2
 80070b0:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80070b4:	2200      	movs	r2, #0
 80070b6:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80070ba:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	iolPort[IOL_PI_1]->ctrlPins.cqEnPort = IOL2_ENCQ_GPIO_Port;
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
 80070c6:	2200      	movs	r2, #0
 80070c8:	f042 020c 	orr.w	r2, r2, #12
 80070cc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 80070d0:	2200      	movs	r2, #0
 80070d2:	f042 0202 	orr.w	r2, r2, #2
 80070d6:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
 80070da:	2200      	movs	r2, #0
 80070dc:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80070e0:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	iolPort[IOL_PI_1]->ctrlPins.rstPort = IOL2_RST_GPIO_Port;
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 80070ec:	2200      	movs	r2, #0
 80070ee:	f042 0214 	orr.w	r2, r2, #20
 80070f2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 80070f6:	2200      	movs	r2, #0
 80070f8:	f042 0202 	orr.w	r2, r2, #2
 80070fc:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8007100:	2200      	movs	r2, #0
 8007102:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8007106:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	iolPort[IOL_PI_1]->ctrlPins.lpEnPin = IOL2_ENL_Pin;
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	2200      	movs	r2, #0
 800710e:	f042 0208 	orr.w	r2, r2, #8
 8007112:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	iolPort[IOL_PI_1]->ctrlPins.cqEnPin = IOL2_ENCQ_Pin;
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	2200      	movs	r2, #0
 8007120:	f042 0210 	orr.w	r2, r2, #16
 8007124:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	iolPort[IOL_PI_1]->ctrlPins.rstPin = IOL2_RST_Pin;
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8007136:	2200      	movs	r2, #0
 8007138:	f042 0201 	orr.w	r2, r2, #1
 800713c:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	/*UART*/
	iolPort[IOL_PI_1]->uart.huart = &huart7;
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <InitialSettings+0x3dc>)
 8007144:	f8c3 2122 	str.w	r2, [r3, #290]	; 0x122
	iolPort[IOL_PI_1]->uart.huart->Instance = UART7;
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	f8d3 3122 	ldr.w	r3, [r3, #290]	; 0x122
 800714e:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <InitialSettings+0x3e0>)
 8007150:	601a      	str	r2, [r3, #0]
	iolPort[IOL_PI_1]->uart.txPort = IOL2_TX_U7_GPIO_Port;
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 800715a:	2200      	movs	r2, #0
 800715c:	f042 0214 	orr.w	r2, r2, #20
 8007160:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 8007164:	2200      	movs	r2, #0
 8007166:	f042 0202 	orr.w	r2, r2, #2
 800716a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800716e:	2200      	movs	r2, #0
 8007170:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8007174:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
	iolPort[IOL_PI_1]->uart.txPin = IOL2_TX_U7_Pin;
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007180:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
 8007184:	2200      	movs	r2, #0
 8007186:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 800718a:	e013      	b.n	80071b4 <InitialSettings+0x3e4>
 800718c:	24002050 	.word	0x24002050
 8007190:	240053a0 	.word	0x240053a0
 8007194:	24004658 	.word	0x24004658
 8007198:	0802a5f4 	.word	0x0802a5f4
 800719c:	24005720 	.word	0x24005720
 80071a0:	40005000 	.word	0x40005000
 80071a4:	24005c4c 	.word	0x24005c4c
 80071a8:	24005dbc 	.word	0x24005dbc
 80071ac:	240053fc 	.word	0x240053fc
 80071b0:	40007800 	.word	0x40007800
	iolPort[IOL_PI_1]->uart.rxPort = IOL2_RX_U7_GPIO_Port;
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 80071bc:	2200      	movs	r2, #0
 80071be:	f042 0214 	orr.w	r2, r2, #20
 80071c2:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 80071c6:	2200      	movs	r2, #0
 80071c8:	f042 0202 	orr.w	r2, r2, #2
 80071cc:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 80071d0:	2200      	movs	r2, #0
 80071d2:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80071d6:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	iolPort[IOL_PI_1]->uart.rxPin = IOL2_RX_U7_Pin;
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2200      	movs	r2, #0
 80071de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	iolPort[IOL_PI_1]->uart.irqType = UART7_IRQn;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	2200      	movs	r2, #0
 80071f0:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 80071f4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	iolPort[IOL_PI_1]->uart.priority = 0;
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	iolPort[IOL_PI_1]->uart.subPriority = 0;
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	/*UART DMA*/
	iolPort[IOL_PI_1]->uart.dma.hdmaRx = &hdma_uart7_rx;
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	4ac9      	ldr	r2, [pc, #804]	; (8007538 <InitialSettings+0x768>)
 8007212:	f8c3 213a 	str.w	r2, [r3, #314]	; 0x13a
//	iolPort[IOL_PI_1]->uart.dma.irqTypDmaRx = DMA1_Stream1_IRQn;
	iolPort[IOL_PI_1]->uart.dma.priorityRx = 0;
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	iolPort[IOL_PI_1]->uart.dma.subPriorityRx = 0;
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	iolPort[IOL_PI_1]->uart.dma.hdmaTx = &hdma_uart7_tx;
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	4ac4      	ldr	r2, [pc, #784]	; (800753c <InitialSettings+0x76c>)
 800722a:	f8c3 2136 	str.w	r2, [r3, #310]	; 0x136
//	iolPort[IOL_PI_1]->uart.dma.irqTypDmaTx = DMA1_Stream0_IRQn;
	iolPort[IOL_PI_1]->uart.dma.priorityTx = 0;
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	2200      	movs	r2, #0
 8007232:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	iolPort[IOL_PI_1]->uart.dma.subPriorityTx = 0;
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2200      	movs	r2, #0
 800723a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

	/*IOLink master chip l6360 3 ---------------------*/
	/*I2C*/
	iolPort[IOL_PI_2]->i2c.devAddress 	= L6360_I2C_DEV_ADDR_3;
 800723e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007240:	22c6      	movs	r2, #198	; 0xc6
 8007242:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

	/*Control pins*/
	iolPort[IOL_PI_2]->ctrlPins.lpEnPort = IOL3_ENL_GPIO_Port;
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 800724e:	2200      	movs	r2, #0
 8007250:	f042 0208 	orr.w	r2, r2, #8
 8007254:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8007258:	2200      	movs	r2, #0
 800725a:	f042 0202 	orr.w	r2, r2, #2
 800725e:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8007262:	2200      	movs	r2, #0
 8007264:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8007268:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	iolPort[IOL_PI_2]->ctrlPins.cqEnPort = IOL3_ENCQ_GPIO_Port;
 800726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726e:	2200      	movs	r2, #0
 8007270:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
 8007274:	2200      	movs	r2, #0
 8007276:	f042 0208 	orr.w	r2, r2, #8
 800727a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 800727e:	2200      	movs	r2, #0
 8007280:	f042 0202 	orr.w	r2, r2, #2
 8007284:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
 8007288:	2200      	movs	r2, #0
 800728a:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 800728e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	iolPort[IOL_PI_2]->ctrlPins.rstPort = IOL3_RST_GPIO_Port;
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	2200      	movs	r2, #0
 8007296:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 800729a:	2200      	movs	r2, #0
 800729c:	f042 0218 	orr.w	r2, r2, #24
 80072a0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 80072a4:	2200      	movs	r2, #0
 80072a6:	f042 0202 	orr.w	r2, r2, #2
 80072aa:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 80072ae:	2200      	movs	r2, #0
 80072b0:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80072b4:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	iolPort[IOL_PI_2]->ctrlPins.lpEnPin = IOL3_ENL_Pin;
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
 80072c0:	2200      	movs	r2, #0
 80072c2:	f042 0202 	orr.w	r2, r2, #2
 80072c6:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	iolPort[IOL_PI_2]->ctrlPins.cqEnPin = IOL3_ENCQ_Pin;
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
 80072d2:	2200      	movs	r2, #0
 80072d4:	f042 0201 	orr.w	r2, r2, #1
 80072d8:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	iolPort[IOL_PI_2]->ctrlPins.rstPin = IOL3_RST_Pin;
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	2200      	movs	r2, #0
 80072e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072e4:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	/*UART*/
	iolPort[IOL_PI_2]->uart.huart = &huart1;
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f0:	4a93      	ldr	r2, [pc, #588]	; (8007540 <InitialSettings+0x770>)
 80072f2:	f8c3 2122 	str.w	r2, [r3, #290]	; 0x122
	iolPort[IOL_PI_2]->uart.huart->Instance = USART1;
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	f8d3 3122 	ldr.w	r3, [r3, #290]	; 0x122
 80072fc:	4a91      	ldr	r2, [pc, #580]	; (8007544 <InitialSettings+0x774>)
 80072fe:	601a      	str	r2, [r3, #0]
	iolPort[IOL_PI_2]->uart.txPort = IOL3_TX_U1_GPIO_Port;
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 8007308:	2200      	movs	r2, #0
 800730a:	f042 0204 	orr.w	r2, r2, #4
 800730e:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 8007312:	2200      	movs	r2, #0
 8007314:	f042 0202 	orr.w	r2, r2, #2
 8007318:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800731c:	2200      	movs	r2, #0
 800731e:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8007322:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
	iolPort[IOL_PI_2]->uart.txPin = IOL3_TX_U1_Pin;
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	2200      	movs	r2, #0
 800732a:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
 800732e:	2200      	movs	r2, #0
 8007330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007334:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
	iolPort[IOL_PI_2]->uart.rxPort = IOL3_RX_U1_GPIO_Port;
 8007338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733a:	2200      	movs	r2, #0
 800733c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8007340:	2200      	movs	r2, #0
 8007342:	f042 0204 	orr.w	r2, r2, #4
 8007346:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 800734a:	2200      	movs	r2, #0
 800734c:	f042 0202 	orr.w	r2, r2, #2
 8007350:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8007354:	2200      	movs	r2, #0
 8007356:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 800735a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	iolPort[IOL_PI_2]->uart.rxPin = IOL3_RX_U1_Pin;
 800735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8007366:	2200      	movs	r2, #0
 8007368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800736c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	iolPort[IOL_PI_2]->uart.irqType = USART1_IRQn;
 8007370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007372:	2200      	movs	r2, #0
 8007374:	f042 0225 	orr.w	r2, r2, #37	; 0x25
 8007378:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	iolPort[IOL_PI_2]->uart.priority = 0;
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	iolPort[IOL_PI_2]->uart.subPriority = 0;
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

	iolPort[IOL_PI_2]->uart.dma.hdmaRx = &hdma_usart1_rx;
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	4a6c      	ldr	r2, [pc, #432]	; (8007548 <InitialSettings+0x778>)
 8007396:	f8c3 213a 	str.w	r2, [r3, #314]	; 0x13a
//	iolPort[IOL_PI_2]->uart.dma.irqTypDmaRx = DMA1_Stream1_IRQn;
	iolPort[IOL_PI_2]->uart.dma.priorityRx = 0;
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	iolPort[IOL_PI_2]->uart.dma.subPriorityRx = 0;
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	iolPort[IOL_PI_2]->uart.dma.hdmaTx = &hdma_usart1_tx;
 80073aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ac:	4a67      	ldr	r2, [pc, #412]	; (800754c <InitialSettings+0x77c>)
 80073ae:	f8c3 2136 	str.w	r2, [r3, #310]	; 0x136
//	iolPort[IOL_PI_2]->uart.dma.irqTypDmaTx = DMA1_Stream0_IRQn;
	iolPort[IOL_PI_2]->uart.dma.priorityTx = 0;
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	iolPort[IOL_PI_2]->uart.dma.subPriorityTx = 0;
 80073ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

	/*IOLink master chip l6360 4---------------------*/
	/*I2C*/
	iolPort[IOL_PI_3]->i2c.devAddress 	= L6360_I2C_DEV_ADDR_4;
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	22c8      	movs	r2, #200	; 0xc8
 80073c6:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
//	iolPort[IOL_PI_3]->ctrlPins.rstPort = IOL4_RST_GPIO_Port;
//	iolPort[IOL_PI_3]->ctrlPins.lpEnPin = IOL4_ENL_Pin;
//	iolPort[IOL_PI_3]->ctrlPins.cqEnPin = IOL4_ENCQ_Pin;
//	iolPort[IOL_PI_3]->ctrlPins.rstPin = IOL4_RST_Pin;
	/*UART*/
	iolPort[IOL_PI_3]->uart.huart = &huart4;
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	4a60      	ldr	r2, [pc, #384]	; (8007550 <InitialSettings+0x780>)
 80073ce:	f8c3 2122 	str.w	r2, [r3, #290]	; 0x122
	iolPort[IOL_PI_3]->uart.huart->Instance = UART4;
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	f8d3 3122 	ldr.w	r3, [r3, #290]	; 0x122
 80073d8:	4a5e      	ldr	r2, [pc, #376]	; (8007554 <InitialSettings+0x784>)
 80073da:	601a      	str	r2, [r3, #0]
	iolPort[IOL_PI_3]->uart.txPort = IOL4_TX_U4_GPIO_Port;
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 80073ea:	2200      	movs	r2, #0
 80073ec:	f042 0202 	orr.w	r2, r2, #2
 80073f0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80073f4:	2200      	movs	r2, #0
 80073f6:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80073fa:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
	iolPort[IOL_PI_3]->uart.txPin = IOL4_TX_U4_Pin;
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	2200      	movs	r2, #0
 8007402:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
 8007406:	2200      	movs	r2, #0
 8007408:	f042 0210 	orr.w	r2, r2, #16
 800740c:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
	iolPort[IOL_PI_3]->uart.rxPort = IOL4_RX_U4_GPIO_Port;
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	2200      	movs	r2, #0
 8007414:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8007418:	2200      	movs	r2, #0
 800741a:	f042 0208 	orr.w	r2, r2, #8
 800741e:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 8007422:	2200      	movs	r2, #0
 8007424:	f042 0202 	orr.w	r2, r2, #2
 8007428:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 800742c:	2200      	movs	r2, #0
 800742e:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8007432:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	iolPort[IOL_PI_3]->uart.rxPin = IOL4_RX_U4_Pin;
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800743e:	2200      	movs	r2, #0
 8007440:	f042 0208 	orr.w	r2, r2, #8
 8007444:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	iolPort[IOL_PI_3]->uart.irqType = UART4_IRQn;
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	2200      	movs	r2, #0
 800744c:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8007450:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	iolPort[IOL_PI_3]->uart.priority = 0;
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	iolPort[IOL_PI_3]->uart.subPriority = 0;
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

	iolPort[IOL_PI_3]->uart.dma.hdmaRx = &hdma_uart4_rx;
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	4a3a      	ldr	r2, [pc, #232]	; (8007558 <InitialSettings+0x788>)
 800746e:	f8c3 213a 	str.w	r2, [r3, #314]	; 0x13a
//	iolPort[IOL_PI_3]->uart.dma.irqTypDmaRx = DMA1_Stream1_IRQn;
	iolPort[IOL_PI_3]->uart.dma.priorityRx = 0;
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	iolPort[IOL_PI_3]->uart.dma.subPriorityRx = 0;
 800747a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	iolPort[IOL_PI_3]->uart.dma.hdmaTx = &hdma_uart4_tx;
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	4a35      	ldr	r2, [pc, #212]	; (800755c <InitialSettings+0x78c>)
 8007486:	f8c3 2136 	str.w	r2, [r3, #310]	; 0x136
//	iolPort[IOL_PI_3]->uart.dma.irqTypDmaTx = DMA1_Stream0_IRQn;
	iolPort[IOL_PI_3]->uart.dma.priorityTx = 0;
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	2200      	movs	r2, #0
 800748e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	iolPort[IOL_PI_3]->uart.dma.subPriorityTx = 0;
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2200      	movs	r2, #0
 8007496:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

	/*Old------------*/


	// Utilities-----------------------
	gVar.sysFreq = HAL_RCC_GetSysClockFreq();
 800749a:	f017 fd2f 	bl	801eefc <HAL_RCC_GetSysClockFreq>
 800749e:	4603      	mov	r3, r0
 80074a0:	4a2f      	ldr	r2, [pc, #188]	; (8007560 <InitialSettings+0x790>)
 80074a2:	6053      	str	r3, [r2, #4]
	gVar.devMode = CONF_DEF_DEV_MODE;
 80074a4:	4b2e      	ldr	r3, [pc, #184]	; (8007560 <InitialSettings+0x790>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	721a      	strb	r2, [r3, #8]

	MB_SetRTUMode((gVar.devMode== DEV_MODE_SLAVE ? MB_RTU_MODE_SLAVE : MB_RTU_MODE_MASTER));		// set the rtu mode
 80074aa:	4b2d      	ldr	r3, [pc, #180]	; (8007560 <InitialSettings+0x790>)
 80074ac:	7a1b      	ldrb	r3, [r3, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	4618      	mov	r0, r3
 80074ba:	f008 fcc9 	bl	800fe50 <MB_SetRTUMode>

	gVar.diag.rtuBus.peCount 		= 0;
 80074be:	4b28      	ldr	r3, [pc, #160]	; (8007560 <InitialSettings+0x790>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	819a      	strh	r2, [r3, #12]
	gVar.diag.rtuBus.neCount 		= 0;
 80074c4:	4b26      	ldr	r3, [pc, #152]	; (8007560 <InitialSettings+0x790>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	81da      	strh	r2, [r3, #14]
	gVar.diag.rtuBus.feCount 		= 0;
 80074ca:	4b25      	ldr	r3, [pc, #148]	; (8007560 <InitialSettings+0x790>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	821a      	strh	r2, [r3, #16]
	gVar.diag.rtuBus.oreCount 		= 0;
 80074d0:	4b23      	ldr	r3, [pc, #140]	; (8007560 <InitialSettings+0x790>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	825a      	strh	r2, [r3, #18]
	gVar.diag.rtuBus.dteCount 		= 0;
 80074d6:	4b22      	ldr	r3, [pc, #136]	; (8007560 <InitialSettings+0x790>)
 80074d8:	2200      	movs	r2, #0
 80074da:	829a      	strh	r2, [r3, #20]
	gVar.diag.rtuBus.dmaTxErrCode	= 0;
 80074dc:	4b20      	ldr	r3, [pc, #128]	; (8007560 <InitialSettings+0x790>)
 80074de:	2200      	movs	r2, #0
 80074e0:	82da      	strh	r2, [r3, #22]
	gVar.diag.rtuBus.dmaRxErrCode	= 0;
 80074e2:	4b1f      	ldr	r3, [pc, #124]	; (8007560 <InitialSettings+0x790>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	831a      	strh	r2, [r3, #24]
	gVar.diag.rtuBus.ErrCode	= 0;
 80074e8:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <InitialSettings+0x790>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	835a      	strh	r2, [r3, #26]

	gVar.diag.w5500Spi.modfeCount 	= 0;
 80074ee:	4b1c      	ldr	r3, [pc, #112]	; (8007560 <InitialSettings+0x790>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	839a      	strh	r2, [r3, #28]
	gVar.diag.w5500Spi.crceCount 	= 0;
 80074f4:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <InitialSettings+0x790>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	83da      	strh	r2, [r3, #30]
	gVar.diag.w5500Spi.feCount 		= 0;
 80074fa:	4b19      	ldr	r3, [pc, #100]	; (8007560 <InitialSettings+0x790>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	845a      	strh	r2, [r3, #34]	; 0x22
	gVar.diag.w5500Spi.oreCount 	= 0;
 8007500:	4b17      	ldr	r3, [pc, #92]	; (8007560 <InitialSettings+0x790>)
 8007502:	2200      	movs	r2, #0
 8007504:	841a      	strh	r2, [r3, #32]
	gVar.diag.w5500Spi.dteCount 	= 0;
 8007506:	4b16      	ldr	r3, [pc, #88]	; (8007560 <InitialSettings+0x790>)
 8007508:	2200      	movs	r2, #0
 800750a:	849a      	strh	r2, [r3, #36]	; 0x24
	gVar.diag.w5500Spi.flgeCount 	= 0;
 800750c:	4b14      	ldr	r3, [pc, #80]	; (8007560 <InitialSettings+0x790>)
 800750e:	2200      	movs	r2, #0
 8007510:	84da      	strh	r2, [r3, #38]	; 0x26
	gVar.diag.w5500Spi.abreCount 	= 0;
 8007512:	4b13      	ldr	r3, [pc, #76]	; (8007560 <InitialSettings+0x790>)
 8007514:	2200      	movs	r2, #0
 8007516:	851a      	strh	r2, [r3, #40]	; 0x28
	gVar.diag.w5500Spi.dmaTxErrCode	= 0;
 8007518:	4b11      	ldr	r3, [pc, #68]	; (8007560 <InitialSettings+0x790>)
 800751a:	2200      	movs	r2, #0
 800751c:	855a      	strh	r2, [r3, #42]	; 0x2a
	gVar.diag.w5500Spi.dmaRxErrCode	= 0;
 800751e:	4b10      	ldr	r3, [pc, #64]	; (8007560 <InitialSettings+0x790>)
 8007520:	2200      	movs	r2, #0
 8007522:	859a      	strh	r2, [r3, #44]	; 0x2c
	gVar.diag.w5500Spi.ErrCode	= 0;
 8007524:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <InitialSettings+0x790>)
 8007526:	2200      	movs	r2, #0
 8007528:	85da      	strh	r2, [r3, #46]	; 0x2e

	gVar.diag.i2c.ErrCode 		= 0;
 800752a:	4b0d      	ldr	r3, [pc, #52]	; (8007560 <InitialSettings+0x790>)
 800752c:	2200      	movs	r2, #0
 800752e:	861a      	strh	r2, [r3, #48]	; 0x30
	gVar.diag.i2c.dmaRxErrCode 		= 0;
 8007530:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <InitialSettings+0x790>)
 8007532:	2200      	movs	r2, #0
 8007534:	869a      	strh	r2, [r3, #52]	; 0x34
 8007536:	e015      	b.n	8007564 <InitialSettings+0x794>
 8007538:	24005820 	.word	0x24005820
 800753c:	24005630 	.word	0x24005630
 8007540:	2400598c 	.word	0x2400598c
 8007544:	40011000 	.word	0x40011000
 8007548:	24005898 	.word	0x24005898
 800754c:	240056a8 	.word	0x240056a8
 8007550:	24005b2c 	.word	0x24005b2c
 8007554:	40004c00 	.word	0x40004c00
 8007558:	240052b0 	.word	0x240052b0
 800755c:	24005d44 	.word	0x24005d44
 8007560:	24002050 	.word	0x24002050
	gVar.diag.i2c.dmaTxErrCode 		= 0;
 8007564:	4b77      	ldr	r3, [pc, #476]	; (8007744 <InitialSettings+0x974>)
 8007566:	2200      	movs	r2, #0
 8007568:	865a      	strh	r2, [r3, #50]	; 0x32
//		gVar.w5500Chip.spi.errorCode	= 0U;
//		gVar.w5500Chip.spi.dmaTxErrCode	= 0U;
//		gVar.w5500Chip.spi.dmaRxErrCode	= 0U;

	// initiates default net configuration
	wiz_NetInfo tempNetInfo = {
 800756a:	4b77      	ldr	r3, [pc, #476]	; (8007748 <InitialSettings+0x978>)
 800756c:	f107 0414 	add.w	r4, r7, #20
 8007570:	461d      	mov	r5, r3
 8007572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007576:	e895 0003 	ldmia.w	r5, {r0, r1}
 800757a:	6020      	str	r0, [r4, #0]
 800757c:	3404      	adds	r4, #4
 800757e:	8021      	strh	r1, [r4, #0]
 8007580:	3402      	adds	r4, #2
 8007582:	0c0b      	lsrs	r3, r1, #16
 8007584:	7023      	strb	r3, [r4, #0]
		.sn 	= CONF_DEF_NETINFO_SN,
		.gw 	= CONF_DEF_NETINFO_GW,
		.dns 	= CONF_DEF_NETINFO_DNS,
		.dhcp 	= CONF_DEF_NETINFO_DHCP
	};
	gVar.w5500Chip.netInfo 	= tempNetInfo;										// sets the server info
 8007586:	4b6f      	ldr	r3, [pc, #444]	; (8007744 <InitialSettings+0x974>)
 8007588:	f103 046a 	add.w	r4, r3, #106	; 0x6a
 800758c:	f107 0514 	add.w	r5, r7, #20
 8007590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007592:	6020      	str	r0, [r4, #0]
 8007594:	6061      	str	r1, [r4, #4]
 8007596:	60a2      	str	r2, [r4, #8]
 8007598:	60e3      	str	r3, [r4, #12]
 800759a:	6828      	ldr	r0, [r5, #0]
 800759c:	6120      	str	r0, [r4, #16]
 800759e:	88ab      	ldrh	r3, [r5, #4]
 80075a0:	79aa      	ldrb	r2, [r5, #6]
 80075a2:	82a3      	strh	r3, [r4, #20]
 80075a4:	4613      	mov	r3, r2
 80075a6:	75a3      	strb	r3, [r4, #22]



	/*Modbus RTU Serial line----------------------*/

	gVar.mbSerial.mode			 				= MBS_MODE_SLAVE;
 80075a8:	4b66      	ldr	r3, [pc, #408]	; (8007744 <InitialSettings+0x974>)
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	gVar.mbSerial.errorCode						= 0U;
 80075b0:	4b64      	ldr	r3, [pc, #400]	; (8007744 <InitialSettings+0x974>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 28b0 	str.w	r2, [r3, #2224]	; 0x8b0
	gVar.mbSerial.protocol						= CONF_DEF_MB_SERIAL_PROTOCOL;
 80075b8:	4b62      	ldr	r3, [pc, #392]	; (8007744 <InitialSettings+0x974>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
	gVar.mbSerial.isFreeze						= 0U;
 80075c0:	4b60      	ldr	r3, [pc, #384]	; (8007744 <InitialSettings+0x974>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
	gVar.mbSerial.isDataReceived 				= 0U;
 80075c8:	4b5e      	ldr	r3, [pc, #376]	; (8007744 <InitialSettings+0x974>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
	gVar.mbSerial.isBusy 						= 0U;
 80075d0:	4b5c      	ldr	r3, [pc, #368]	; (8007744 <InitialSettings+0x974>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
	gVar.mbSerial.isReceiving 					= 0U;
 80075d8:	4b5a      	ldr	r3, [pc, #360]	; (8007744 <InitialSettings+0x974>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
	gVar.mbSerial.isSending 					= 0U;
 80075e0:	4b58      	ldr	r3, [pc, #352]	; (8007744 <InitialSettings+0x974>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
	gVar.mbSerial.frameOkFlag					= 0U;
 80075e8:	4b56      	ldr	r3, [pc, #344]	; (8007744 <InitialSettings+0x974>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
	gVar.mbSerial.respTimer.enable				= 0U;
 80075f0:	4b54      	ldr	r3, [pc, #336]	; (8007744 <InitialSettings+0x974>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
	gVar.mbSerial.respTimer.isTimeout			= 0U;
 80075f8:	4b52      	ldr	r3, [pc, #328]	; (8007744 <InitialSettings+0x974>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
	gVar.mbSerial.respTimer.timer				= 0U;
 8007600:	4b50      	ldr	r3, [pc, #320]	; (8007744 <InitialSettings+0x974>)
 8007602:	2200      	movs	r2, #0
 8007604:	f8a3 26a4 	strh.w	r2, [r3, #1700]	; 0x6a4
	gVar.mbSerial.respTimer.timeout				= MB_RESP_TIIMEOUT;
 8007608:	4b4e      	ldr	r3, [pc, #312]	; (8007744 <InitialSettings+0x974>)
 800760a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800760e:	f8a3 26a6 	strh.w	r2, [r3, #1702]	; 0x6a6
	gVar.mbSerial.rxCount						= 0;
 8007612:	4b4c      	ldr	r3, [pc, #304]	; (8007744 <InitialSettings+0x974>)
 8007614:	2200      	movs	r2, #0
 8007616:	f8c3 28bc 	str.w	r2, [r3, #2236]	; 0x8bc
	gVar.mbSerial.txCount						= 0;
 800761a:	4b4a      	ldr	r3, [pc, #296]	; (8007744 <InitialSettings+0x974>)
 800761c:	2200      	movs	r2, #0
 800761e:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0

	gVar.mbSerial.serialConfigValue 			= CONF_DEF_MB_SERIAL_CONFIG;
 8007622:	4b48      	ldr	r3, [pc, #288]	; (8007744 <InitialSettings+0x974>)
 8007624:	f64c 0221 	movw	r2, #51233	; 0xc821
 8007628:	f8a3 268e 	strh.w	r2, [r3, #1678]	; 0x68e
	MBS_DecodeConfigValue(&gVar.mbSerial);
 800762c:	4847      	ldr	r0, [pc, #284]	; (800774c <InitialSettings+0x97c>)
 800762e:	f00a ff89 	bl	8012544 <MBS_DecodeConfigValue>

	/*Modbus RTU Slave----------------------*/
	gVar.mbRTUSlave.slave_address 				= CONF_DEF_MBRTUS_SLAVE_ADDRESS;			// the slave address only for test purpose
 8007632:	4b44      	ldr	r3, [pc, #272]	; (8007744 <InitialSettings+0x974>)
 8007634:	2201      	movs	r2, #1
 8007636:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
	gVar.mbRTUSlave.custom.waitingTimer.timeout = CONF_DEF_MBRTUS_CUST_WAITING_TIMEOUT;
 800763a:	4b42      	ldr	r3, [pc, #264]	; (8007744 <InitialSettings+0x974>)
 800763c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007640:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
	gVar.mbRTUSlave.custom.waitingTimer.isTimeRst		= 0;
 8007644:	4b3f      	ldr	r3, [pc, #252]	; (8007744 <InitialSettings+0x974>)
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
	gVar.mbRTUSlave.custom.eventType			= MB_CUST_EVENT_NONE;
 800764c:	4b3d      	ldr	r3, [pc, #244]	; (8007744 <InitialSettings+0x974>)
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
	MBRS_Init(&gVar.mbRTUSlave);
 8007654:	483e      	ldr	r0, [pc, #248]	; (8007750 <InitialSettings+0x980>)
 8007656:	f00a fc5f 	bl	8011f18 <MBRS_Init>

	/*Modbus RTU Master----------------------*/
	MBRM_Init(&gVar.mbRTUMaster);
 800765a:	483e      	ldr	r0, [pc, #248]	; (8007754 <InitialSettings+0x984>)
 800765c:	f00a f9fc 	bl	8011a58 <MBRM_Init>
	gVar.mbRTUMaster.enable = 0;
 8007660:	4b38      	ldr	r3, [pc, #224]	; (8007744 <InitialSettings+0x974>)
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
	gVar.mbRTUMaster.replyTimer.timeout 		= CONF_DEF_MBRTUM_CUST_REPLAY_TIMEOUT;
 8007668:	4b36      	ldr	r3, [pc, #216]	; (8007744 <InitialSettings+0x974>)
 800766a:	f241 7270 	movw	r2, #6000	; 0x1770
 800766e:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
	gVar.mbRTUMaster.replyTimer.timer 			= 0;
 8007672:	4b34      	ldr	r3, [pc, #208]	; (8007744 <InitialSettings+0x974>)
 8007674:	f603 1158 	addw	r1, r3, #2392	; 0x958
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	e9c1 2300 	strd	r2, r3, [r1]
	gVar.mbRTUMaster.replyTimer.enableTimer 	= 0;
 8007684:	4b2f      	ldr	r3, [pc, #188]	; (8007744 <InitialSettings+0x974>)
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
	gVar.mbRTUMaster.replyTimer.isTimeout 		= 0;
 800768c:	4b2d      	ldr	r3, [pc, #180]	; (8007744 <InitialSettings+0x974>)
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
	gVar.mbRTUMaster.retryMax 					= MBRM_RETRY_MAX;
 8007694:	4b2b      	ldr	r3, [pc, #172]	; (8007744 <InitialSettings+0x974>)
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
	gVar.mbRTUMaster.state 						= MBRM_STATE_IDLE;
 800769c:	4b29      	ldr	r3, [pc, #164]	; (8007744 <InitialSettings+0x974>)
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
	gVar.mbRTUMaster.custom.slvStartAddr		= CONF_DEF_MBRTUM_CUST_SLV_START_ADDR;
 80076a4:	4b27      	ldr	r3, [pc, #156]	; (8007744 <InitialSettings+0x974>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
	gVar.mbRTUMaster.custom.numOfSlv			= CONF_DEF_MBRTUM_CUST_NUM_OF_SLV;
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <InitialSettings+0x974>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
	gVar.mbRTUMaster.custom.enableRetrans		= 0;
 80076b4:	4b23      	ldr	r3, [pc, #140]	; (8007744 <InitialSettings+0x974>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
	gVar.mbRTUMaster.custom.reTransTimer.enable	= 0;
 80076bc:	4b21      	ldr	r3, [pc, #132]	; (8007744 <InitialSettings+0x974>)
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
	gVar.mbRTUMaster.custom.reTransTimer.time	= 0;
 80076c4:	4b1f      	ldr	r3, [pc, #124]	; (8007744 <InitialSettings+0x974>)
 80076c6:	f503 6118 	add.w	r1, r3, #2432	; 0x980
 80076ca:	f04f 0200 	mov.w	r2, #0
 80076ce:	f04f 0300 	mov.w	r3, #0
 80076d2:	e9c1 2300 	strd	r2, r3, [r1]
	gVar.mbRTUMaster.custom.reTransTimer.timeout= CONF_DEF_MBRTUM_CUST_PREIODIC_REQ_INTERVAL;//MBRM_RETRANS_TIMEOUT_CUST;
 80076d6:	4b1b      	ldr	r3, [pc, #108]	; (8007744 <InitialSettings+0x974>)
 80076d8:	f244 2268 	movw	r2, #17000	; 0x4268
 80076dc:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
	gVar.mbRTUMaster.custom.timeoutCount        = 0;
 80076e0:	4b18      	ldr	r3, [pc, #96]	; (8007744 <InitialSettings+0x974>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
	memset(gVar.mbRTUMaster.custom.rcvFailedCount, 0, sizeof(gVar.mbRTUMaster.custom.rcvFailedCount));
 80076e8:	2219      	movs	r2, #25
 80076ea:	2100      	movs	r1, #0
 80076ec:	481a      	ldr	r0, [pc, #104]	; (8007758 <InitialSettings+0x988>)
 80076ee:	f01f f821 	bl	8026734 <memset>
	memset(gVar.mbRTUMaster.custom.rcvConsecCount, 0, sizeof(gVar.mbRTUMaster.custom.rcvConsecCount));
 80076f2:	2219      	movs	r2, #25
 80076f4:	2100      	movs	r1, #0
 80076f6:	4819      	ldr	r0, [pc, #100]	; (800775c <InitialSettings+0x98c>)
 80076f8:	f01f f81c 	bl	8026734 <memset>
	MBRM_BindSerial(&gVar.mbSerial);
 80076fc:	4813      	ldr	r0, [pc, #76]	; (800774c <InitialSettings+0x97c>)
 80076fe:	f00a fa03 	bl	8011b08 <MBRM_BindSerial>

	/*Modbus TCP Server-------------------*/
	gVar.mbTCPServer.isDataRcvd 				= 0;
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <InitialSettings+0x974>)
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2be8 	strb.w	r2, [r3, #3048]	; 0xbe8
	gVar.mbTCPServer.isReloadReq 				= 0;
 800770a:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <InitialSettings+0x974>)
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2be9 	strb.w	r2, [r3, #3049]	; 0xbe9
	gVar.mbTCPServer.clientIndex 				= 0;
 8007712:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <InitialSettings+0x974>)
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2bea 	strb.w	r2, [r3, #3050]	; 0xbea
	gVar.mbTCPServer.curntTrnsNo 				= 0;
 800771a:	4a0a      	ldr	r2, [pc, #40]	; (8007744 <InitialSettings+0x974>)
 800771c:	f241 0365 	movw	r3, #4197	; 0x1065
 8007720:	4413      	add	r3, r2
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
	gVar.mbTCPServer.maxTrnsNo 					= MBTCPS_MAX_TRANS;
 8007726:	4a07      	ldr	r2, [pc, #28]	; (8007744 <InitialSettings+0x974>)
 8007728:	f241 0366 	movw	r3, #4198	; 0x1066
 800772c:	4413      	add	r3, r2
 800772e:	2204      	movs	r2, #4
 8007730:	701a      	strb	r2, [r3, #0]
	gVar.mbTCPServer.nbOfConns 					= 0;
 8007732:	4b04      	ldr	r3, [pc, #16]	; (8007744 <InitialSettings+0x974>)
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2beb 	strb.w	r2, [r3, #3051]	; 0xbeb
	for(uint8_t i = 0; i < MBTCPS_MAX_CONNS; i++){
 800773a:	2300      	movs	r3, #0
 800773c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007740:	e021      	b.n	8007786 <InitialSettings+0x9b6>
 8007742:	bf00      	nop
 8007744:	24002050 	.word	0x24002050
 8007748:	0802a600 	.word	0x0802a600
 800774c:	240026d8 	.word	0x240026d8
 8007750:	24002918 	.word	0x24002918
 8007754:	24002998 	.word	0x24002998
 8007758:	240029fc 	.word	0x240029fc
 800775c:	24002a15 	.word	0x24002a15
		MBTCPS_ClearClientParams(&gVar.mbTCPServer.clients[i]);
 8007760:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007764:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8007768:	fb02 f303 	mul.w	r3, r2, r3
 800776c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007770:	4ad4      	ldr	r2, [pc, #848]	; (8007ac4 <InitialSettings+0xcf4>)
 8007772:	4413      	add	r3, r2
 8007774:	3304      	adds	r3, #4
 8007776:	4618      	mov	r0, r3
 8007778:	f00b fb69 	bl	8012e4e <MBTCPS_ClearClientParams>
	for(uint8_t i = 0; i < MBTCPS_MAX_CONNS; i++){
 800777c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007780:	3301      	adds	r3, #1
 8007782:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007786:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0e8      	beq.n	8007760 <InitialSettings+0x990>
	}
//	MBMQ_clear(&gVar.mbTCPServer.msgQ);
	MBMQ_clearMsg(&gVar.mbTCPServer.msg);
 800778e:	48ce      	ldr	r0, [pc, #824]	; (8007ac8 <InitialSettings+0xcf8>)
 8007790:	f00a f948 	bl	8011a24 <MBMQ_clearMsg>


	/*Modbus TCP Client-----------------------*/
	gVar.mbTCPClient.id 						= 0U;
 8007794:	4acb      	ldr	r2, [pc, #812]	; (8007ac4 <InitialSettings+0xcf4>)
 8007796:	f241 0369 	movw	r3, #4201	; 0x1069
 800779a:	4413      	add	r3, r2
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
	gVar.mbTCPClient.connect 					= 1;
 80077a0:	4ac8      	ldr	r2, [pc, #800]	; (8007ac4 <InitialSettings+0xcf4>)
 80077a2:	f241 0368 	movw	r3, #4200	; 0x1068
 80077a6:	4413      	add	r3, r2
 80077a8:	2201      	movs	r2, #1
 80077aa:	701a      	strb	r2, [r3, #0]
	gVar.mbTCPClient.curntTrnsNo				= 0U;
 80077ac:	4ac5      	ldr	r2, [pc, #788]	; (8007ac4 <InitialSettings+0xcf4>)
 80077ae:	f241 0373 	movw	r3, #4211	; 0x1073
 80077b2:	4413      	add	r3, r2
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
	gVar.mbTCPClient.nbOfConns 					= 0U;
 80077b8:	4ac2      	ldr	r2, [pc, #776]	; (8007ac4 <InitialSettings+0xcf4>)
 80077ba:	f241 0372 	movw	r3, #4210	; 0x1072
 80077be:	4413      	add	r3, r2
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
	gVar.mbTCPClient.lastTrnsIndex 				= 0U;
 80077c4:	4abf      	ldr	r2, [pc, #764]	; (8007ac4 <InitialSettings+0xcf4>)
 80077c6:	f241 0374 	movw	r3, #4212	; 0x1074
 80077ca:	4413      	add	r3, r2
 80077cc:	2200      	movs	r2, #0
 80077ce:	701a      	strb	r2, [r3, #0]
	gVar.mbTCPClient.header.transId 			= 0U;
 80077d0:	4abc      	ldr	r2, [pc, #752]	; (8007ac4 <InitialSettings+0xcf4>)
 80077d2:	f241 036a 	movw	r3, #4202	; 0x106a
 80077d6:	4413      	add	r3, r2
 80077d8:	2200      	movs	r2, #0
 80077da:	801a      	strh	r2, [r3, #0]
	gVar.mbTCPClient.header.protocolId			= MBTCP_PROTOCOL_ID;
 80077dc:	4ab9      	ldr	r2, [pc, #740]	; (8007ac4 <InitialSettings+0xcf4>)
 80077de:	f241 036c 	movw	r3, #4204	; 0x106c
 80077e2:	4413      	add	r3, r2
 80077e4:	2200      	movs	r2, #0
 80077e6:	801a      	strh	r2, [r3, #0]
	gVar.mbTCPClient.header.length				= 0U;
 80077e8:	4ab6      	ldr	r2, [pc, #728]	; (8007ac4 <InitialSettings+0xcf4>)
 80077ea:	f241 036e 	movw	r3, #4206	; 0x106e
 80077ee:	4413      	add	r3, r2
 80077f0:	2200      	movs	r2, #0
 80077f2:	801a      	strh	r2, [r3, #0]
	gVar.mbTCPClient.header.unitId 				= MB_BROADCAST_ADDR;//MBTCP_SERVER_UNIT_ID;
 80077f4:	4ab3      	ldr	r2, [pc, #716]	; (8007ac4 <InitialSettings+0xcf4>)
 80077f6:	f241 0370 	movw	r3, #4208	; 0x1070
 80077fa:	4413      	add	r3, r2
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
	gVar.mbTCPClient.destPort 					= CONF_DEF_MB_TCPC_DEST_PORT;
 8007800:	4ab0      	ldr	r2, [pc, #704]	; (8007ac4 <InitialSettings+0xcf4>)
 8007802:	f241 0378 	movw	r3, #4216	; 0x1078
 8007806:	4413      	add	r3, r2
 8007808:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800780c:	801a      	strh	r2, [r3, #0]
	gVar.mbTCPClient.srcPort 					= CONF_DEF_MB_TCPC_SRC_PORT;
 800780e:	4aad      	ldr	r2, [pc, #692]	; (8007ac4 <InitialSettings+0xcf4>)
 8007810:	f241 0376 	movw	r3, #4214	; 0x1076
 8007814:	4413      	add	r3, r2
 8007816:	f240 4201 	movw	r2, #1025	; 0x401
 800781a:	801a      	strh	r2, [r3, #0]
	gVar.mbTCPClient.txTimIntrvl 				= CONF_DEF_MB_TCPC_TX_TIM_INTRVL;
 800781c:	4aa9      	ldr	r2, [pc, #676]	; (8007ac4 <InitialSettings+0xcf4>)
 800781e:	f641 1338 	movw	r3, #6456	; 0x1938
 8007822:	4413      	add	r3, r2
 8007824:	2205      	movs	r2, #5
 8007826:	601a      	str	r2, [r3, #0]
	gVar.mbTCPClient.dlyAftrConct				= CONF_DEF_MB_TCPC_DLY_AFTER_CONNECT;
 8007828:	4aa6      	ldr	r2, [pc, #664]	; (8007ac4 <InitialSettings+0xcf4>)
 800782a:	f641 133c 	movw	r3, #6460	; 0x193c
 800782e:	4413      	add	r3, r2
 8007830:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007834:	601a      	str	r2, [r3, #0]
	uint8_t ip_0[4] 							= CONF_DEF_MB_TCPC_DEST_IP;
 8007836:	4ba5      	ldr	r3, [pc, #660]	; (8007acc <InitialSettings+0xcfc>)
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	693a      	ldr	r2, [r7, #16]
	memcpy(gVar.mbTCPClient.destIP, ip_0, 4);
 800783c:	49a1      	ldr	r1, [pc, #644]	; (8007ac4 <InitialSettings+0xcf4>)
 800783e:	f241 037e 	movw	r3, #4222	; 0x107e
 8007842:	440b      	add	r3, r1
 8007844:	601a      	str	r2, [r3, #0]

	MBTCPC_ClearPendingList(gVar.mbTCPClient.pendingList);
 8007846:	48a2      	ldr	r0, [pc, #648]	; (8007ad0 <InitialSettings+0xd00>)
 8007848:	f00b fa9d 	bl	8012d86 <MBTCPC_ClearPendingList>
	MBMQ_clear(&gVar.mbTCPClient.msgQ);
 800784c:	48a1      	ldr	r0, [pc, #644]	; (8007ad4 <InitialSettings+0xd04>)
 800784e:	f00a f89d 	bl	801198c <MBMQ_clear>



	/*Modbus gateway---------------*/
	MBG_Init(&gVar.mbGateway);
 8007852:	48a1      	ldr	r0, [pc, #644]	; (8007ad8 <InitialSettings+0xd08>)
 8007854:	f008 f9c8 	bl	800fbe8 <MBG_Init>
	gVar.mbGateway.rplyTimer.timeout 						= CONF_DEF_MBGW_TIMEOUT;//;
 8007858:	4a9a      	ldr	r2, [pc, #616]	; (8007ac4 <InitialSettings+0xcf4>)
 800785a:	f641 1368 	movw	r3, #6504	; 0x1968
 800785e:	4413      	add	r3, r2
 8007860:	f247 5230 	movw	r2, #30000	; 0x7530
 8007864:	601a      	str	r2, [r3, #0]
	gVar.mbGateway.rplyTimer.timer							= 0;
 8007866:	4b97      	ldr	r3, [pc, #604]	; (8007ac4 <InitialSettings+0xcf4>)
 8007868:	f503 51cb 	add.w	r1, r3, #6496	; 0x1960
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9c1 2300 	strd	r2, r3, [r1]
	gVar.mbGateway.rplyTimer.enable							= 0;
 8007878:	4a92      	ldr	r2, [pc, #584]	; (8007ac4 <InitialSettings+0xcf4>)
 800787a:	f641 1358 	movw	r3, #6488	; 0x1958
 800787e:	4413      	add	r3, r2
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
	gVar.mbGateway.rplyTimRglrFC.timeout 					= CONF_DEF_MBGW_TIMEOUT;//;
 8007884:	4a8f      	ldr	r2, [pc, #572]	; (8007ac4 <InitialSettings+0xcf4>)
 8007886:	f641 1388 	movw	r3, #6536	; 0x1988
 800788a:	4413      	add	r3, r2
 800788c:	f247 5230 	movw	r2, #30000	; 0x7530
 8007890:	601a      	str	r2, [r3, #0]
	gVar.mbGateway.rplyTimRglrFC.timer						= 0;
 8007892:	4b8c      	ldr	r3, [pc, #560]	; (8007ac4 <InitialSettings+0xcf4>)
 8007894:	f503 51cc 	add.w	r1, r3, #6528	; 0x1980
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	e9c1 2300 	strd	r2, r3, [r1]
	gVar.mbGateway.rplyTimRglrFC.enable						= 0;
 80078a4:	4a87      	ldr	r2, [pc, #540]	; (8007ac4 <InitialSettings+0xcf4>)
 80078a6:	f641 1378 	movw	r3, #6520	; 0x1978
 80078aa:	4413      	add	r3, r2
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
	MB_CUST_Init(&gVar.mbGateway.custom);
 80078b0:	488a      	ldr	r0, [pc, #552]	; (8007adc <InitialSettings+0xd0c>)
 80078b2:	f007 fc31 	bl	800f118 <MB_CUST_Init>

	/*Modbus custom -----------------*/
	MB_CUST_Init(&gVar.mbRTUMaster.custom);
 80078b6:	488a      	ldr	r0, [pc, #552]	; (8007ae0 <InitialSettings+0xd10>)
 80078b8:	f007 fc2e 	bl	800f118 <MB_CUST_Init>


	/*Server settings----------------------*/
	gVar.server.sockIndex 		= 0;											// sets the first socket id
 80078bc:	4b81      	ldr	r3, [pc, #516]	; (8007ac4 <InitialSettings+0xcf4>)
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	for(uint8_t i = 0; i < SERVER_SOCK_MAX; i++){								// sets the socket id
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80078ca:	e0ee      	b.n	8007aaa <InitialSettings+0xcda>
		Sock_ClearAll(&gVar.server.sock[i]);									// set the protocol as tcp
 80078cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078d0:	4613      	mov	r3, r2
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	4413      	add	r3, r2
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	1a9b      	subs	r3, r3, r2
 80078da:	3380      	adds	r3, #128	; 0x80
 80078dc:	4a79      	ldr	r2, [pc, #484]	; (8007ac4 <InitialSettings+0xcf4>)
 80078de:	4413      	add	r3, r2
 80078e0:	3305      	adds	r3, #5
 80078e2:	4618      	mov	r0, r3
 80078e4:	f00e fc46 	bl	8016174 <Sock_ClearAll>
		gVar.server.sock[i].id 			= i;										//assign a socket id
 80078e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078ec:	4975      	ldr	r1, [pc, #468]	; (8007ac4 <InitialSettings+0xcf4>)
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	1a9b      	subs	r3, r3, r2
 80078f8:	440b      	add	r3, r1
 80078fa:	3388      	adds	r3, #136	; 0x88
 80078fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007900:	701a      	strb	r2, [r3, #0]
		gVar.server.sock[i].connectMode	= SOCK_CONN_MODE_AUTO;
 8007902:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007906:	496f      	ldr	r1, [pc, #444]	; (8007ac4 <InitialSettings+0xcf4>)
 8007908:	4613      	mov	r3, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	440b      	add	r3, r1
 8007914:	3386      	adds	r3, #134	; 0x86
 8007916:	2200      	movs	r2, #0
 8007918:	701a      	strb	r2, [r3, #0]
		gVar.server.sock[i].isConnected	= 0;
 800791a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800791e:	4969      	ldr	r1, [pc, #420]	; (8007ac4 <InitialSettings+0xcf4>)
 8007920:	4613      	mov	r3, r2
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	4413      	add	r3, r2
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	440b      	add	r3, r1
 800792c:	3389      	adds	r3, #137	; 0x89
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
		gVar.server.sock[i].status		= 0;
 8007932:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007936:	4963      	ldr	r1, [pc, #396]	; (8007ac4 <InitialSettings+0xcf4>)
 8007938:	4613      	mov	r3, r2
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	440b      	add	r3, r1
 8007944:	3385      	adds	r3, #133	; 0x85
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
		gVar.server.sock[i].mode	 	= SOCK_MODE_TCP_SERVER;					// socket mode
 800794a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800794e:	495d      	ldr	r1, [pc, #372]	; (8007ac4 <InitialSettings+0xcf4>)
 8007950:	4613      	mov	r3, r2
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	4413      	add	r3, r2
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	440b      	add	r3, r1
 800795c:	f203 3382 	addw	r3, r3, #898	; 0x382
 8007960:	2200      	movs	r2, #0
 8007962:	701a      	strb	r2, [r3, #0]
		gVar.server.sock[i].protocol 	= Sn_MR_TCP;
 8007964:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007968:	4956      	ldr	r1, [pc, #344]	; (8007ac4 <InitialSettings+0xcf4>)
 800796a:	4613      	mov	r3, r2
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	4413      	add	r3, r2
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	1a9b      	subs	r3, r3, r2
 8007974:	440b      	add	r3, r1
 8007976:	3395      	adds	r3, #149	; 0x95
 8007978:	2201      	movs	r2, #1
 800797a:	701a      	strb	r2, [r3, #0]
		gVar.server.sock[i].srcPort		= CONF_DEF_MB_TCPS_SRC_PORT;					// default modbus tcp server port
 800797c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007980:	4950      	ldr	r1, [pc, #320]	; (8007ac4 <InitialSettings+0xcf4>)
 8007982:	4613      	mov	r3, r2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	4413      	add	r3, r2
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	440b      	add	r3, r1
 800798e:	f203 336e 	addw	r3, r3, #878	; 0x36e
 8007992:	2200      	movs	r2, #0
 8007994:	f062 0209 	orn	r2, r2, #9
 8007998:	701a      	strb	r2, [r3, #0]
 800799a:	2200      	movs	r2, #0
 800799c:	f042 0201 	orr.w	r2, r2, #1
 80079a0:	705a      	strb	r2, [r3, #1]
		gVar.server.sock[i].flag 		= Sn_MR_ND;								// set the socket no delay socket mode
 80079a2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079a6:	4947      	ldr	r1, [pc, #284]	; (8007ac4 <InitialSettings+0xcf4>)
 80079a8:	4613      	mov	r3, r2
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	440b      	add	r3, r1
 80079b4:	3396      	adds	r3, #150	; 0x96
 80079b6:	2220      	movs	r2, #32
 80079b8:	701a      	strb	r2, [r3, #0]
		gVar.server.sock[i].kpAlvTime 	= CONF_DEF_MB_TCP_KPALVTR;
 80079ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079be:	4941      	ldr	r1, [pc, #260]	; (8007ac4 <InitialSettings+0xcf4>)
 80079c0:	4613      	mov	r3, r2
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	4413      	add	r3, r2
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	440b      	add	r3, r1
 80079cc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80079d0:	2200      	movs	r2, #0
 80079d2:	f042 020f 	orr.w	r2, r2, #15
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	2200      	movs	r2, #0
 80079da:	705a      	strb	r2, [r3, #1]
		gVar.server.sock[i].retryTick 	= 0;
 80079dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079e0:	4938      	ldr	r1, [pc, #224]	; (8007ac4 <InitialSettings+0xcf4>)
 80079e2:	4613      	mov	r3, r2
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	4413      	add	r3, r2
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	440b      	add	r3, r1
 80079ee:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80079f2:	2200      	movs	r2, #0
 80079f4:	729a      	strb	r2, [r3, #10]
 80079f6:	2200      	movs	r2, #0
 80079f8:	72da      	strb	r2, [r3, #11]
 80079fa:	2200      	movs	r2, #0
 80079fc:	731a      	strb	r2, [r3, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	735a      	strb	r2, [r3, #13]
		gVar.server.sock[i].retryDelay 	= CONF_DEF_SERVER_SOCK_RETRY_DELAY;
 8007a02:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007a06:	492f      	ldr	r1, [pc, #188]	; (8007ac4 <InitialSettings+0xcf4>)
 8007a08:	4613      	mov	r3, r2
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	4413      	add	r3, r2
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	440b      	add	r3, r1
 8007a14:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f062 0247 	orn	r2, r2, #71	; 0x47
 8007a1e:	719a      	strb	r2, [r3, #6]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f042 020b 	orr.w	r2, r2, #11
 8007a26:	71da      	strb	r2, [r3, #7]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	721a      	strb	r2, [r3, #8]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	725a      	strb	r2, [r3, #9]
		gVar.server.sock[i].retryCounter 	= 0;
 8007a30:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007a34:	4923      	ldr	r1, [pc, #140]	; (8007ac4 <InitialSettings+0xcf4>)
 8007a36:	4613      	mov	r3, r2
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	4413      	add	r3, r2
 8007a3c:	021b      	lsls	r3, r3, #8
 8007a3e:	1a9b      	subs	r3, r3, r2
 8007a40:	440b      	add	r3, r1
 8007a42:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8007a46:	2200      	movs	r2, #0
 8007a48:	729a      	strb	r2, [r3, #10]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	72da      	strb	r2, [r3, #11]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	731a      	strb	r2, [r3, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	735a      	strb	r2, [r3, #13]
		gVar.server.sock[i].retryCountMax 	= SOCK_RETRY_COUNT_MAX;
 8007a56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007a5a:	491a      	ldr	r1, [pc, #104]	; (8007ac4 <InitialSettings+0xcf4>)
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	4413      	add	r3, r2
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	440b      	add	r3, r1
 8007a68:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f042 0205 	orr.w	r2, r2, #5
 8007a72:	719a      	strb	r2, [r3, #6]
 8007a74:	2200      	movs	r2, #0
 8007a76:	71da      	strb	r2, [r3, #7]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	721a      	strb	r2, [r3, #8]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	725a      	strb	r2, [r3, #9]
		W5500_SetMaxSegmentSize(gVar.server.sock[i].id, CONF_DEF_MB_TCP_MSS);	// set the maximum segment size for a socket
 8007a80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007a84:	490f      	ldr	r1, [pc, #60]	; (8007ac4 <InitialSettings+0xcf4>)
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	1a9b      	subs	r3, r3, r2
 8007a90:	440b      	add	r3, r1
 8007a92:	3388      	adds	r3, #136	; 0x88
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f00e fbca 	bl	8016234 <W5500_SetMaxSegmentSize>
	for(uint8_t i = 0; i < SERVER_SOCK_MAX; i++){								// sets the socket id
 8007aa0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007aaa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f43f af0c 	beq.w	80078cc <InitialSettings+0xafc>
	}


	/*Client settings----------------------*/
	gVar.client.sockIndex = 0;
 8007ab4:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <InitialSettings+0xcf4>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
	for(uint8_t i = 0; i < CLIENT_SOCK_MAX; i++){								// sets the socket id
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8007ac2:	e139      	b.n	8007d38 <InitialSettings+0xf68>
 8007ac4:	24002050 	.word	0x24002050
 8007ac8:	24002f44 	.word	0x24002f44
 8007acc:	0b00c80b 	.word	0x0b00c80b
 8007ad0:	240030d2 	.word	0x240030d2
 8007ad4:	240033c0 	.word	0x240033c0
 8007ad8:	24003990 	.word	0x24003990
 8007adc:	240039e8 	.word	0x240039e8
 8007ae0:	240029c0 	.word	0x240029c0
		Sock_ClearAll(&gVar.client.sock[i]);
 8007ae4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007ae8:	4613      	mov	r3, r2
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8007af6:	4ad3      	ldr	r2, [pc, #844]	; (8007e44 <InitialSettings+0x1074>)
 8007af8:	4413      	add	r3, r2
 8007afa:	3305      	adds	r3, #5
 8007afc:	4618      	mov	r0, r3
 8007afe:	f00e fb39 	bl	8016174 <Sock_ClearAll>
		gVar.client.sock[i].id 			= SERVER_SOCK_MAX + i;					// assign a socket after the server
 8007b02:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007b06:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	b2d8      	uxtb	r0, r3
 8007b0e:	49cd      	ldr	r1, [pc, #820]	; (8007e44 <InitialSettings+0x1074>)
 8007b10:	4613      	mov	r3, r2
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	4413      	add	r3, r2
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	1a9b      	subs	r3, r3, r2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007b20:	4602      	mov	r2, r0
 8007b22:	701a      	strb	r2, [r3, #0]
		gVar.client.sock[i].connectMode	= CONF_DEF_MB_TCPC_CONN_MODE;
 8007b24:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007b28:	49c6      	ldr	r1, [pc, #792]	; (8007e44 <InitialSettings+0x1074>)
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	4413      	add	r3, r2
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	440b      	add	r3, r1
 8007b36:	f203 3386 	addw	r3, r3, #902	; 0x386
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	701a      	strb	r2, [r3, #0]
		gVar.client.sock[i].isConnected	= 0;
 8007b3e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007b42:	49c0      	ldr	r1, [pc, #768]	; (8007e44 <InitialSettings+0x1074>)
 8007b44:	4613      	mov	r3, r2
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	4413      	add	r3, r2
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	440b      	add	r3, r1
 8007b50:	f203 3389 	addw	r3, r3, #905	; 0x389
 8007b54:	2200      	movs	r2, #0
 8007b56:	701a      	strb	r2, [r3, #0]
		gVar.client.sock[i].connect		= 0;
 8007b58:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007b5c:	49b9      	ldr	r1, [pc, #740]	; (8007e44 <InitialSettings+0x1074>)
 8007b5e:	4613      	mov	r3, r2
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	4413      	add	r3, r2
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	1a9b      	subs	r3, r3, r2
 8007b68:	440b      	add	r3, r1
 8007b6a:	f203 3387 	addw	r3, r3, #903	; 0x387
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]
		gVar.client.sock[i].status		= 0;
 8007b72:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007b76:	49b3      	ldr	r1, [pc, #716]	; (8007e44 <InitialSettings+0x1074>)
 8007b78:	4613      	mov	r3, r2
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	4413      	add	r3, r2
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	440b      	add	r3, r1
 8007b84:	f203 3385 	addw	r3, r3, #901	; 0x385
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
		gVar.client.sock[i].mode	 	= SOCK_MODE_TCP_CLIENT;					// socket mode
 8007b8c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007b90:	49ac      	ldr	r1, [pc, #688]	; (8007e44 <InitialSettings+0x1074>)
 8007b92:	4613      	mov	r3, r2
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	4413      	add	r3, r2
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
		gVar.client.sock[i].protocol 	= Sn_MR_TCP;							// set the protocol as tcp
 8007ba6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007baa:	49a6      	ldr	r1, [pc, #664]	; (8007e44 <InitialSettings+0x1074>)
 8007bac:	4613      	mov	r3, r2
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	4413      	add	r3, r2
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f203 3395 	addw	r3, r3, #917	; 0x395
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	701a      	strb	r2, [r3, #0]
		gVar.client.sock[i].srcPort		= CONF_DEF_MB_TCPC_SRC_PORT+i;			// client source port
 8007bc0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007bca:	f203 4301 	addw	r3, r3, #1025	; 0x401
 8007bce:	b298      	uxth	r0, r3
 8007bd0:	499c      	ldr	r1, [pc, #624]	; (8007e44 <InitialSettings+0x1074>)
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	4413      	add	r3, r2
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	440b      	add	r3, r1
 8007bde:	f203 636e 	addw	r3, r3, #1646	; 0x66e
 8007be2:	4602      	mov	r2, r0
 8007be4:	801a      	strh	r2, [r3, #0]
		gVar.client.sock[i].destPort	= CONF_DEF_MB_TCPC_DEST_PORT;			// client source port
 8007be6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007bea:	4996      	ldr	r1, [pc, #600]	; (8007e44 <InitialSettings+0x1074>)
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f062 0209 	orn	r2, r2, #9
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f042 0201 	orr.w	r2, r2, #1
 8007c0a:	705a      	strb	r2, [r3, #1]
		gVar.client.sock[i].flag 		= Sn_MR_ND;								// set the socket no delay socket mode
 8007c0c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007c10:	498c      	ldr	r1, [pc, #560]	; (8007e44 <InitialSettings+0x1074>)
 8007c12:	4613      	mov	r3, r2
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	4413      	add	r3, r2
 8007c18:	021b      	lsls	r3, r3, #8
 8007c1a:	1a9b      	subs	r3, r3, r2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	f203 3396 	addw	r3, r3, #918	; 0x396
 8007c22:	2220      	movs	r2, #32
 8007c24:	701a      	strb	r2, [r3, #0]
		gVar.client.sock[i].kpAlvTime 	= CONF_DEF_MB_TCP_KPALVTR;
 8007c26:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007c2a:	4986      	ldr	r1, [pc, #536]	; (8007e44 <InitialSettings+0x1074>)
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	4413      	add	r3, r2
 8007c32:	021b      	lsls	r3, r3, #8
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	440b      	add	r3, r1
 8007c38:	f203 636c 	addw	r3, r3, #1644	; 0x66c
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f042 020f 	orr.w	r2, r2, #15
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	2200      	movs	r2, #0
 8007c46:	705a      	strb	r2, [r3, #1]
		gVar.client.sock[i].retryTick 	= 0;
 8007c48:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007c4c:	497d      	ldr	r1, [pc, #500]	; (8007e44 <InitialSettings+0x1074>)
 8007c4e:	4613      	mov	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4413      	add	r3, r2
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	440b      	add	r3, r1
 8007c5a:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8007c5e:	2200      	movs	r2, #0
 8007c60:	729a      	strb	r2, [r3, #10]
 8007c62:	2200      	movs	r2, #0
 8007c64:	72da      	strb	r2, [r3, #11]
 8007c66:	2200      	movs	r2, #0
 8007c68:	731a      	strb	r2, [r3, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	735a      	strb	r2, [r3, #13]
		gVar.client.sock[i].retryDelay 	= CONF_DEF_CLIENT_SOCK_RETRY_DELAY;
 8007c6e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007c72:	4974      	ldr	r1, [pc, #464]	; (8007e44 <InitialSettings+0x1074>)
 8007c74:	4613      	mov	r3, r2
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	4413      	add	r3, r2
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	440b      	add	r3, r1
 8007c80:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8007c84:	2200      	movs	r2, #0
 8007c86:	f062 0247 	orn	r2, r2, #71	; 0x47
 8007c8a:	719a      	strb	r2, [r3, #6]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f042 020b 	orr.w	r2, r2, #11
 8007c92:	71da      	strb	r2, [r3, #7]
 8007c94:	2200      	movs	r2, #0
 8007c96:	721a      	strb	r2, [r3, #8]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	725a      	strb	r2, [r3, #9]
		gVar.client.sock[i].retryCounter 	= 0;
 8007c9c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007ca0:	4968      	ldr	r1, [pc, #416]	; (8007e44 <InitialSettings+0x1074>)
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	1a9b      	subs	r3, r3, r2
 8007cac:	440b      	add	r3, r1
 8007cae:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	729a      	strb	r2, [r3, #10]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	72da      	strb	r2, [r3, #11]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	731a      	strb	r2, [r3, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	735a      	strb	r2, [r3, #13]
		gVar.client.sock[i].retryCountMax 	= SOCK_RETRY_COUNT_MAX;
 8007cc2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007cc6:	495f      	ldr	r1, [pc, #380]	; (8007e44 <InitialSettings+0x1074>)
 8007cc8:	4613      	mov	r3, r2
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	4413      	add	r3, r2
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f042 0205 	orr.w	r2, r2, #5
 8007cde:	719a      	strb	r2, [r3, #6]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	71da      	strb	r2, [r3, #7]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	721a      	strb	r2, [r3, #8]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	725a      	strb	r2, [r3, #9]
		uint8_t ip[4] = CONF_DEF_MB_TCPC_DEST_IP;
 8007cec:	4b56      	ldr	r3, [pc, #344]	; (8007e48 <InitialSettings+0x1078>)
 8007cee:	603b      	str	r3, [r7, #0]
		memcpy(gVar.client.sock[i].destIP, ip, 4);
 8007cf0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	4413      	add	r3, r2
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8007d02:	4a50      	ldr	r2, [pc, #320]	; (8007e44 <InitialSettings+0x1074>)
 8007d04:	4413      	add	r3, r2
 8007d06:	330b      	adds	r3, #11
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	601a      	str	r2, [r3, #0]
		W5500_SetMaxSegmentSize(gVar.client.sock[i].id, CONF_DEF_MB_TCP_MSS);	// set the maximum segment size for a socket
 8007d0c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007d10:	494c      	ldr	r1, [pc, #304]	; (8007e44 <InitialSettings+0x1074>)
 8007d12:	4613      	mov	r3, r2
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4413      	add	r3, r2
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f00e fa83 	bl	8016234 <W5500_SetMaxSegmentSize>
	for(uint8_t i = 0; i < CLIENT_SOCK_MAX; i++){								// sets the socket id
 8007d2e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007d32:	3301      	adds	r3, #1
 8007d34:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8007d38:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f43f aed1 	beq.w	8007ae4 <InitialSettings+0xd14>
	}


	/*Encoder Inputs------------------*/
		gVar.dio.enc.enable = CONF_DEF_ENC_DISABLE;
 8007d42:	4a40      	ldr	r2, [pc, #256]	; (8007e44 <InitialSettings+0x1074>)
 8007d44:	f242 4344 	movw	r3, #9284	; 0x2444
 8007d48:	4413      	add	r3, r2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]
		gVar.dio.enc.configs.mode = CONF_DEF_ENC_MODE;
 8007d4e:	4a3d      	ldr	r2, [pc, #244]	; (8007e44 <InitialSettings+0x1074>)
 8007d50:	f242 4348 	movw	r3, #9288	; 0x2448
 8007d54:	4413      	add	r3, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
		gVar.dio.enc.isChanged = 1;
 8007d5a:	4a3a      	ldr	r2, [pc, #232]	; (8007e44 <InitialSettings+0x1074>)
 8007d5c:	f242 439c 	movw	r3, #9372	; 0x249c
 8007d60:	4413      	add	r3, r2
 8007d62:	2201      	movs	r2, #1
 8007d64:	701a      	strb	r2, [r3, #0]
		//Quadrature encoder
		gVar.dio.enc.configs.quadrature.timer = &htim3;
 8007d66:	4a37      	ldr	r2, [pc, #220]	; (8007e44 <InitialSettings+0x1074>)
 8007d68:	f242 434c 	movw	r3, #9292	; 0x244c
 8007d6c:	4413      	add	r3, r2
 8007d6e:	4a37      	ldr	r2, [pc, #220]	; (8007e4c <InitialSettings+0x107c>)
 8007d70:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.configs.quadrature.trigMode = CONF_DEF_ENC_QUAD_TRIG_MODE;
 8007d72:	4a34      	ldr	r2, [pc, #208]	; (8007e44 <InitialSettings+0x1074>)
 8007d74:	f242 4374 	movw	r3, #9332	; 0x2474
 8007d78:	4413      	add	r3, r2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]

		//Incremental encoder  Channel A
		gVar.dio.enc.configs.channelA.port = DI_1_ENC_A_GPIO_Port;
 8007d7e:	4a31      	ldr	r2, [pc, #196]	; (8007e44 <InitialSettings+0x1074>)
 8007d80:	f242 4384 	movw	r3, #9348	; 0x2484
 8007d84:	4413      	add	r3, r2
 8007d86:	4a32      	ldr	r2, [pc, #200]	; (8007e50 <InitialSettings+0x1080>)
 8007d88:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.configs.channelA.pin = DI_1_ENC_A_Pin;
 8007d8a:	4a2e      	ldr	r2, [pc, #184]	; (8007e44 <InitialSettings+0x1074>)
 8007d8c:	f242 4388 	movw	r3, #9352	; 0x2488
 8007d90:	4413      	add	r3, r2
 8007d92:	2240      	movs	r2, #64	; 0x40
 8007d94:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.configs.channelA.intrpt = EXTI0_IRQn;
 8007d96:	4a2b      	ldr	r2, [pc, #172]	; (8007e44 <InitialSettings+0x1074>)
 8007d98:	f242 438c 	movw	r3, #9356	; 0x248c
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2206      	movs	r2, #6
 8007da0:	801a      	strh	r2, [r3, #0]
		gVar.dio.enc.configs.channelA.trigMode = CONF_DEF_ENC_CHA_TRIG_MODE;
 8007da2:	4a28      	ldr	r2, [pc, #160]	; (8007e44 <InitialSettings+0x1074>)
 8007da4:	f242 438e 	movw	r3, #9358	; 0x248e
 8007da8:	4413      	add	r3, r2
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
		gVar.dio.enc.configs.channelA.countMode = ENC_COUNT_MODE_UP;
 8007dae:	4a25      	ldr	r2, [pc, #148]	; (8007e44 <InitialSettings+0x1074>)
 8007db0:	f242 438f 	movw	r3, #9359	; 0x248f
 8007db4:	4413      	add	r3, r2
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
		//Incremental encoder  Channel B
		gVar.dio.enc.configs.channelB.port = DI_2_ENC_B_GPIO_Port;
 8007dba:	4a22      	ldr	r2, [pc, #136]	; (8007e44 <InitialSettings+0x1074>)
 8007dbc:	f242 4390 	movw	r3, #9360	; 0x2490
 8007dc0:	4413      	add	r3, r2
 8007dc2:	4a23      	ldr	r2, [pc, #140]	; (8007e50 <InitialSettings+0x1080>)
 8007dc4:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.configs.channelB.pin = DI_2_ENC_B_Pin;
 8007dc6:	4a1f      	ldr	r2, [pc, #124]	; (8007e44 <InitialSettings+0x1074>)
 8007dc8:	f242 4394 	movw	r3, #9364	; 0x2494
 8007dcc:	4413      	add	r3, r2
 8007dce:	2280      	movs	r2, #128	; 0x80
 8007dd0:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.configs.channelB.intrpt = EXTI1_IRQn;
 8007dd2:	4a1c      	ldr	r2, [pc, #112]	; (8007e44 <InitialSettings+0x1074>)
 8007dd4:	f242 4398 	movw	r3, #9368	; 0x2498
 8007dd8:	4413      	add	r3, r2
 8007dda:	2207      	movs	r2, #7
 8007ddc:	801a      	strh	r2, [r3, #0]
		gVar.dio.enc.configs.channelB.trigMode = CONF_DEF_ENC_CHA_TRIG_MODE;
 8007dde:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <InitialSettings+0x1074>)
 8007de0:	f242 439a 	movw	r3, #9370	; 0x249a
 8007de4:	4413      	add	r3, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
		gVar.dio.enc.configs.channelB.countMode = ENC_COUNT_MODE_UP;
 8007dea:	4a16      	ldr	r2, [pc, #88]	; (8007e44 <InitialSettings+0x1074>)
 8007dec:	f242 439b 	movw	r3, #9371	; 0x249b
 8007df0:	4413      	add	r3, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
		//Incremental encoder  Channel C
		gVar.dio.enc.configs.channelZ.port = DI_3_ENC_Z_GPIO_Port;
 8007df6:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <InitialSettings+0x1074>)
 8007df8:	f242 4378 	movw	r3, #9336	; 0x2478
 8007dfc:	4413      	add	r3, r2
 8007dfe:	4a15      	ldr	r2, [pc, #84]	; (8007e54 <InitialSettings+0x1084>)
 8007e00:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.configs.channelZ.pin = DI_3_ENC_Z_Pin;
 8007e02:	4a10      	ldr	r2, [pc, #64]	; (8007e44 <InitialSettings+0x1074>)
 8007e04:	f242 437c 	movw	r3, #9340	; 0x247c
 8007e08:	4413      	add	r3, r2
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	601a      	str	r2, [r3, #0]
		gVar.dio.enc.configs.channelZ.intrpt = EXTI4_IRQn;
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <InitialSettings+0x1074>)
 8007e10:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 8007e14:	220a      	movs	r2, #10
 8007e16:	801a      	strh	r2, [r3, #0]
		gVar.dio.enc.configs.channelZ.trigMode = CONF_DEF_ENC_CHC_TRIG_MODE;
 8007e18:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <InitialSettings+0x1074>)
 8007e1a:	f242 4382 	movw	r3, #9346	; 0x2482
 8007e1e:	4413      	add	r3, r2
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
		gVar.dio.enc.configs.channelZ.countMode = ENC_COUNT_MODE_UP;
 8007e24:	4a07      	ldr	r2, [pc, #28]	; (8007e44 <InitialSettings+0x1074>)
 8007e26:	f242 4383 	movw	r3, #9347	; 0x2483
 8007e2a:	4413      	add	r3, r2
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
		gVar.dio.enc.interval = ENC_SPEED_TIM_INTRVAL;
 8007e30:	4a04      	ldr	r2, [pc, #16]	; (8007e44 <InitialSettings+0x1074>)
 8007e32:	f242 43d8 	movw	r3, #9432	; 0x24d8
 8007e36:	4413      	add	r3, r2
 8007e38:	2264      	movs	r2, #100	; 0x64
 8007e3a:	601a      	str	r2, [r3, #0]


	/*Digital Inputs------------------*/
	for (uint8_t i = DI_1; i < DI_MAX; ++i) {
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e0c8      	b.n	8007fd6 <InitialSettings+0x1206>
 8007e44:	24002050 	.word	0x24002050
 8007e48:	0b00c80b 	.word	0x0b00c80b
 8007e4c:	240055e4 	.word	0x240055e4
 8007e50:	58020800 	.word	0x58020800
 8007e54:	58020400 	.word	0x58020400
		FLTR_ClearDebounce(&gVar.dio.di[i].dbunce);
 8007e58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e5c:	019a      	lsls	r2, r3, #6
 8007e5e:	f242 2358 	movw	r3, #8792	; 0x2258
 8007e62:	4413      	add	r3, r2
 8007e64:	4a69      	ldr	r2, [pc, #420]	; (800800c <InitialSettings+0x123c>)
 8007e66:	4413      	add	r3, r2
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f006 ff1d 	bl	800ecaa <FLTR_ClearDebounce>
		gVar.dio.di[i].index = i;
 8007e70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e74:	4a65      	ldr	r2, [pc, #404]	; (800800c <InitialSettings+0x123c>)
 8007e76:	3389      	adds	r3, #137	; 0x89
 8007e78:	019b      	lsls	r3, r3, #6
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007e82:	701a      	strb	r2, [r3, #0]
		gVar.dio.di[i].isChanged = 1;
 8007e84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e88:	4a60      	ldr	r2, [pc, #384]	; (800800c <InitialSettings+0x123c>)
 8007e8a:	3389      	adds	r3, #137	; 0x89
 8007e8c:	019b      	lsls	r3, r3, #6
 8007e8e:	4413      	add	r3, r2
 8007e90:	3305      	adds	r3, #5
 8007e92:	2201      	movs	r2, #1
 8007e94:	701a      	strb	r2, [r3, #0]
		gVar.dio.di[i].dbunce.countMax = DEF_DI_BOUNCE_COUNT_MAX;
 8007e96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e9a:	4a5c      	ldr	r2, [pc, #368]	; (800800c <InitialSettings+0x123c>)
 8007e9c:	019b      	lsls	r3, r3, #6
 8007e9e:	441a      	add	r2, r3
 8007ea0:	f242 235e 	movw	r3, #8798	; 0x225e
 8007ea4:	4413      	add	r3, r2
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	801a      	strh	r2, [r3, #0]
		gVar.dio.di[i].config.mode = DI_MODE_NORMAL;
 8007eaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007eae:	4a57      	ldr	r2, [pc, #348]	; (800800c <InitialSettings+0x123c>)
 8007eb0:	3389      	adds	r3, #137	; 0x89
 8007eb2:	019b      	lsls	r3, r3, #6
 8007eb4:	4413      	add	r3, r2
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	2200      	movs	r2, #0
 8007eba:	701a      	strb	r2, [r3, #0]
		gVar.dio.di[i].config.countMode = DI_COUNT_MODE_UP;
 8007ebc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ec0:	4a52      	ldr	r2, [pc, #328]	; (800800c <InitialSettings+0x123c>)
 8007ec2:	3389      	adds	r3, #137	; 0x89
 8007ec4:	019b      	lsls	r3, r3, #6
 8007ec6:	4413      	add	r3, r2
 8007ec8:	330a      	adds	r3, #10
 8007eca:	2200      	movs	r2, #0
 8007ecc:	701a      	strb	r2, [r3, #0]
		gVar.dio.di[i].config.counterType = DI_COUNT_TYPE_TIMER;
 8007ece:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ed2:	4a4e      	ldr	r2, [pc, #312]	; (800800c <InitialSettings+0x123c>)
 8007ed4:	3389      	adds	r3, #137	; 0x89
 8007ed6:	019b      	lsls	r3, r3, #6
 8007ed8:	4413      	add	r3, r2
 8007eda:	3309      	adds	r3, #9
 8007edc:	2201      	movs	r2, #1
 8007ede:	701a      	strb	r2, [r3, #0]
		gVar.dio.di[i].config.trigMode = DI_TRIG_MODE_RISING;
 8007ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ee4:	4a49      	ldr	r2, [pc, #292]	; (800800c <InitialSettings+0x123c>)
 8007ee6:	3389      	adds	r3, #137	; 0x89
 8007ee8:	019b      	lsls	r3, r3, #6
 8007eea:	4413      	add	r3, r2
 8007eec:	330b      	adds	r3, #11
 8007eee:	2201      	movs	r2, #1
 8007ef0:	701a      	strb	r2, [r3, #0]
		gVar.dio.di[i].state = GPIO_PIN_RESET;
 8007ef2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ef6:	4a45      	ldr	r2, [pc, #276]	; (800800c <InitialSettings+0x123c>)
 8007ef8:	019b      	lsls	r3, r3, #6
 8007efa:	441a      	add	r2, r3
 8007efc:	f242 2368 	movw	r3, #8808	; 0x2268
 8007f00:	4413      	add	r3, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]

		gVar.dio.di[i].pulseInf.countOVF = 0;
 8007f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f0a:	4a40      	ldr	r2, [pc, #256]	; (800800c <InitialSettings+0x123c>)
 8007f0c:	019b      	lsls	r3, r3, #6
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
 8007f14:	2200      	movs	r2, #0
 8007f16:	801a      	strh	r2, [r3, #0]
		gVar.dio.di[i].pulseInf.edgeTime = 0;
 8007f18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f1c:	4a3b      	ldr	r2, [pc, #236]	; (800800c <InitialSettings+0x123c>)
 8007f1e:	330a      	adds	r3, #10
 8007f20:	019b      	lsls	r3, r3, #6
 8007f22:	441a      	add	r2, r3
 8007f24:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 8007f28:	4413      	add	r3, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
		gVar.dio.di[i].pulseInf.isEdgeDtctd = 0;
 8007f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f32:	4a36      	ldr	r2, [pc, #216]	; (800800c <InitialSettings+0x123c>)
 8007f34:	019b      	lsls	r3, r3, #6
 8007f36:	441a      	add	r2, r3
 8007f38:	f242 2382 	movw	r3, #8834	; 0x2282
 8007f3c:	4413      	add	r3, r2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	701a      	strb	r2, [r3, #0]
		gVar.dio.di[i].pulseInf.lastEdgeTime = 0;
 8007f42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f46:	4a31      	ldr	r2, [pc, #196]	; (800800c <InitialSettings+0x123c>)
 8007f48:	330a      	adds	r3, #10
 8007f4a:	019b      	lsls	r3, r3, #6
 8007f4c:	441a      	add	r2, r3
 8007f4e:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 8007f52:	4413      	add	r3, r2
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
		gVar.dio.di[i].pulseInf.period = 0;
 8007f58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f5c:	4a2b      	ldr	r2, [pc, #172]	; (800800c <InitialSettings+0x123c>)
 8007f5e:	019b      	lsls	r3, r3, #6
 8007f60:	441a      	add	r2, r3
 8007f62:	f242 2378 	movw	r3, #8824	; 0x2278
 8007f66:	4413      	add	r3, r2
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
		gVar.dio.di[i].pulseInf.periodMin = 0;
 8007f6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f70:	4a26      	ldr	r2, [pc, #152]	; (800800c <InitialSettings+0x123c>)
 8007f72:	019b      	lsls	r3, r3, #6
 8007f74:	441a      	add	r2, r3
 8007f76:	f242 237c 	movw	r3, #8828	; 0x227c
 8007f7a:	4413      	add	r3, r2
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
		gVar.dio.di[i].pulseInf.isPulseDtctd = 0;
 8007f80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f84:	4a21      	ldr	r2, [pc, #132]	; (800800c <InitialSettings+0x123c>)
 8007f86:	019b      	lsls	r3, r3, #6
 8007f88:	441a      	add	r2, r3
 8007f8a:	f242 2383 	movw	r3, #8835	; 0x2283
 8007f8e:	4413      	add	r3, r2
 8007f90:	2200      	movs	r2, #0
 8007f92:	701a      	strb	r2, [r3, #0]
		gVar.dio.di[i].config.port = DI_PORTS[i];
 8007f94:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007f98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f9c:	491c      	ldr	r1, [pc, #112]	; (8008010 <InitialSettings+0x1240>)
 8007f9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007fa2:	491a      	ldr	r1, [pc, #104]	; (800800c <InitialSettings+0x123c>)
 8007fa4:	3389      	adds	r3, #137	; 0x89
 8007fa6:	019b      	lsls	r3, r3, #6
 8007fa8:	440b      	add	r3, r1
 8007faa:	330c      	adds	r3, #12
 8007fac:	601a      	str	r2, [r3, #0]
		gVar.dio.di[i].config.pin  = DI_PINS[i];
 8007fae:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007fb6:	4917      	ldr	r1, [pc, #92]	; (8008014 <InitialSettings+0x1244>)
 8007fb8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8007fbc:	4a13      	ldr	r2, [pc, #76]	; (800800c <InitialSettings+0x123c>)
 8007fbe:	019b      	lsls	r3, r3, #6
 8007fc0:	441a      	add	r2, r3
 8007fc2:	f242 2350 	movw	r3, #8784	; 0x2250
 8007fc6:	4413      	add	r3, r2
 8007fc8:	460a      	mov	r2, r1
 8007fca:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = DI_1; i < DI_MAX; ++i) {
 8007fcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007fda:	2b07      	cmp	r3, #7
 8007fdc:	f67f af3c 	bls.w	8007e58 <InitialSettings+0x1088>

	}
	gVar.dio.di[DI_1].config.channel  = TIM_CHANNEL_1;
 8007fe0:	4a0a      	ldr	r2, [pc, #40]	; (800800c <InitialSettings+0x123c>)
 8007fe2:	f242 2354 	movw	r3, #8788	; 0x2254
 8007fe6:	4413      	add	r3, r2
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
//	gVar.dio.di[DI_1].config.inturrptId  = EXTI0_IRQn;
	gVar.dio.di[DI_2].config.channel  = TIM_CHANNEL_2;
 8007fec:	4a07      	ldr	r2, [pc, #28]	; (800800c <InitialSettings+0x123c>)
 8007fee:	f242 2394 	movw	r3, #8852	; 0x2294
 8007ff2:	4413      	add	r3, r2
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	601a      	str	r2, [r3, #0]
//	gVar.dio.di[DI_2].config.inturrptId  = EXTI1_IRQn;
	gVar.dio.di[DI_3].config.channel  = TIM_CHANNEL_3;
 8007ff8:	4a04      	ldr	r2, [pc, #16]	; (800800c <InitialSettings+0x123c>)
 8007ffa:	f242 23d4 	movw	r3, #8916	; 0x22d4
 8007ffe:	4413      	add	r3, r2
 8008000:	2208      	movs	r2, #8
 8008002:	601a      	str	r2, [r3, #0]
//	gVar.dio.di[DI_8].config.inturrptId  = EXTI0_IRQn;


	/*Digital Outputs------------------*/
//	gVar.dio.pwmFreq = DEF_DO_PWM_FREQ;
	for (uint8_t i = DO_1; i < DO_MAX; ++i) {
 8008004:	2300      	movs	r3, #0
 8008006:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800800a:	e090      	b.n	800812e <InitialSettings+0x135e>
 800800c:	24002050 	.word	0x24002050
 8008010:	24000004 	.word	0x24000004
 8008014:	0802b4c4 	.word	0x0802b4c4
		gVar.dio.dout[i].index = i;
 8008018:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800801c:	4a8e      	ldr	r2, [pc, #568]	; (8008258 <InitialSettings+0x1488>)
 800801e:	2164      	movs	r1, #100	; 0x64
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	441a      	add	r2, r3
 8008026:	f641 73ec 	movw	r3, #8172	; 0x1fec
 800802a:	4413      	add	r3, r2
 800802c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8008030:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].state = 0;
 8008032:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008036:	4a88      	ldr	r2, [pc, #544]	; (8008258 <InitialSettings+0x1488>)
 8008038:	2164      	movs	r1, #100	; 0x64
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	441a      	add	r2, r3
 8008040:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 8008044:	4413      	add	r3, r2
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].lastState = 0;
 800804a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800804e:	4a82      	ldr	r2, [pc, #520]	; (8008258 <InitialSettings+0x1488>)
 8008050:	2164      	movs	r1, #100	; 0x64
 8008052:	fb01 f303 	mul.w	r3, r1, r3
 8008056:	441a      	add	r2, r3
 8008058:	f641 73f5 	movw	r3, #8181	; 0x1ff5
 800805c:	4413      	add	r3, r2
 800805e:	2200      	movs	r2, #0
 8008060:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].index = i;
 8008062:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008066:	4a7c      	ldr	r2, [pc, #496]	; (8008258 <InitialSettings+0x1488>)
 8008068:	2164      	movs	r1, #100	; 0x64
 800806a:	fb01 f303 	mul.w	r3, r1, r3
 800806e:	441a      	add	r2, r3
 8008070:	f641 73ec 	movw	r3, #8172	; 0x1fec
 8008074:	4413      	add	r3, r2
 8008076:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800807a:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].source = DO_SRC_MODBUS;
 800807c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008080:	4a75      	ldr	r2, [pc, #468]	; (8008258 <InitialSettings+0x1488>)
 8008082:	2164      	movs	r1, #100	; 0x64
 8008084:	fb01 f303 	mul.w	r3, r1, r3
 8008088:	441a      	add	r2, r3
 800808a:	f641 73ed 	movw	r3, #8173	; 0x1fed
 800808e:	4413      	add	r3, r2
 8008090:	2208      	movs	r2, #8
 8008092:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].mode = DO_MODE_FOLLOW;
 8008094:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008098:	4a6f      	ldr	r2, [pc, #444]	; (8008258 <InitialSettings+0x1488>)
 800809a:	2164      	movs	r1, #100	; 0x64
 800809c:	fb01 f303 	mul.w	r3, r1, r3
 80080a0:	441a      	add	r2, r3
 80080a2:	f641 73ee 	movw	r3, #8174	; 0x1fee
 80080a6:	4413      	add	r3, r2
 80080a8:	2201      	movs	r2, #1
 80080aa:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].isToggle = 0U;
 80080ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80080b0:	4a69      	ldr	r2, [pc, #420]	; (8008258 <InitialSettings+0x1488>)
 80080b2:	2164      	movs	r1, #100	; 0x64
 80080b4:	fb01 f303 	mul.w	r3, r1, r3
 80080b8:	441a      	add	r2, r3
 80080ba:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80080be:	4413      	add	r3, r2
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].state = GPIO_PIN_RESET;
 80080c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80080c8:	4a63      	ldr	r2, [pc, #396]	; (8008258 <InitialSettings+0x1488>)
 80080ca:	2164      	movs	r1, #100	; 0x64
 80080cc:	fb01 f303 	mul.w	r3, r1, r3
 80080d0:	441a      	add	r2, r3
 80080d2:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 80080d6:	4413      	add	r3, r2
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].pwm.enabled = 0U;
 80080dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80080e0:	4a5d      	ldr	r2, [pc, #372]	; (8008258 <InitialSettings+0x1488>)
 80080e2:	2164      	movs	r1, #100	; 0x64
 80080e4:	fb01 f303 	mul.w	r3, r1, r3
 80080e8:	441a      	add	r2, r3
 80080ea:	f242 0314 	movw	r3, #8212	; 0x2014
 80080ee:	4413      	add	r3, r2
 80080f0:	2200      	movs	r2, #0
 80080f2:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].pwm.dutyCycle = 0U;
 80080f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80080f8:	4a57      	ldr	r2, [pc, #348]	; (8008258 <InitialSettings+0x1488>)
 80080fa:	2164      	movs	r1, #100	; 0x64
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	441a      	add	r2, r3
 8008102:	f242 031c 	movw	r3, #8220	; 0x201c
 8008106:	4413      	add	r3, r2
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
		gVar.dio.dout[i].pwm.duty12Bits = 0U;
 800810c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008110:	4a51      	ldr	r2, [pc, #324]	; (8008258 <InitialSettings+0x1488>)
 8008112:	2164      	movs	r1, #100	; 0x64
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	441a      	add	r2, r3
 800811a:	f242 031e 	movw	r3, #8222	; 0x201e
 800811e:	4413      	add	r3, r2
 8008120:	2200      	movs	r2, #0
 8008122:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = DO_1; i < DO_MAX; ++i) {
 8008124:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008128:	3301      	adds	r3, #1
 800812a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800812e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008132:	2b05      	cmp	r3, #5
 8008134:	f67f af70 	bls.w	8008018 <InitialSettings+0x1248>





	gVar.dio.dout[DO_1].port = DO_1_PWM_GPIO_Port;
 8008138:	4a47      	ldr	r2, [pc, #284]	; (8008258 <InitialSettings+0x1488>)
 800813a:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 800813e:	4413      	add	r3, r2
 8008140:	4a46      	ldr	r2, [pc, #280]	; (800825c <InitialSettings+0x148c>)
 8008142:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_1].pin  = DO_1_PWM_Pin;
 8008144:	4a44      	ldr	r2, [pc, #272]	; (8008258 <InitialSettings+0x1488>)
 8008146:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 800814a:	4413      	add	r3, r2
 800814c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008150:	801a      	strh	r2, [r3, #0]
	gVar.dio.dout[DO_1].pwm.channel  = TIM_CHANNEL_1;
 8008152:	4a41      	ldr	r2, [pc, #260]	; (8008258 <InitialSettings+0x1488>)
 8008154:	f242 032c 	movw	r3, #8236	; 0x202c
 8008158:	4413      	add	r3, r2
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_2].port = DO_2_PWM_GPIO_Port;
 800815e:	4a3e      	ldr	r2, [pc, #248]	; (8008258 <InitialSettings+0x1488>)
 8008160:	f242 035c 	movw	r3, #8284	; 0x205c
 8008164:	4413      	add	r3, r2
 8008166:	4a3d      	ldr	r2, [pc, #244]	; (800825c <InitialSettings+0x148c>)
 8008168:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_2].pin  = DO_2_PWM_Pin;
 800816a:	4a3b      	ldr	r2, [pc, #236]	; (8008258 <InitialSettings+0x1488>)
 800816c:	f242 0360 	movw	r3, #8288	; 0x2060
 8008170:	4413      	add	r3, r2
 8008172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008176:	801a      	strh	r2, [r3, #0]
	gVar.dio.dout[DO_2].pwm.channel  = TIM_CHANNEL_2;
 8008178:	4a37      	ldr	r2, [pc, #220]	; (8008258 <InitialSettings+0x1488>)
 800817a:	f242 0390 	movw	r3, #8336	; 0x2090
 800817e:	4413      	add	r3, r2
 8008180:	2204      	movs	r2, #4
 8008182:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_3].port = DO_3_PWM_GPIO_Port;
 8008184:	4b34      	ldr	r3, [pc, #208]	; (8008258 <InitialSettings+0x1488>)
 8008186:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800818a:	4a35      	ldr	r2, [pc, #212]	; (8008260 <InitialSettings+0x1490>)
 800818c:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_3].pin  = DO_3_PWM_Pin;
 800818e:	4a32      	ldr	r2, [pc, #200]	; (8008258 <InitialSettings+0x1488>)
 8008190:	f242 03c4 	movw	r3, #8388	; 0x20c4
 8008194:	4413      	add	r3, r2
 8008196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800819a:	801a      	strh	r2, [r3, #0]
	gVar.dio.dout[DO_3].pwm.channel  = TIM_CHANNEL_3;
 800819c:	4a2e      	ldr	r2, [pc, #184]	; (8008258 <InitialSettings+0x1488>)
 800819e:	f242 03f4 	movw	r3, #8436	; 0x20f4
 80081a2:	4413      	add	r3, r2
 80081a4:	2208      	movs	r2, #8
 80081a6:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_4].port = DO_4_PWM_GPIO_Port;
 80081a8:	4a2b      	ldr	r2, [pc, #172]	; (8008258 <InitialSettings+0x1488>)
 80081aa:	f242 1324 	movw	r3, #8484	; 0x2124
 80081ae:	4413      	add	r3, r2
 80081b0:	4a2b      	ldr	r2, [pc, #172]	; (8008260 <InitialSettings+0x1490>)
 80081b2:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_4].pin  = DO_4_PWM_Pin;
 80081b4:	4a28      	ldr	r2, [pc, #160]	; (8008258 <InitialSettings+0x1488>)
 80081b6:	f242 1328 	movw	r3, #8488	; 0x2128
 80081ba:	4413      	add	r3, r2
 80081bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081c0:	801a      	strh	r2, [r3, #0]
	gVar.dio.dout[DO_4].pwm.channel  = TIM_CHANNEL_4;
 80081c2:	4a25      	ldr	r2, [pc, #148]	; (8008258 <InitialSettings+0x1488>)
 80081c4:	f242 1358 	movw	r3, #8536	; 0x2158
 80081c8:	4413      	add	r3, r2
 80081ca:	220c      	movs	r2, #12
 80081cc:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_5].port = DO_5_GPIO_Port;
 80081ce:	4a22      	ldr	r2, [pc, #136]	; (8008258 <InitialSettings+0x1488>)
 80081d0:	f242 1388 	movw	r3, #8584	; 0x2188
 80081d4:	4413      	add	r3, r2
 80081d6:	4a23      	ldr	r2, [pc, #140]	; (8008264 <InitialSettings+0x1494>)
 80081d8:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_5].pin  = DO_5_Pin;
 80081da:	4a1f      	ldr	r2, [pc, #124]	; (8008258 <InitialSettings+0x1488>)
 80081dc:	f242 138c 	movw	r3, #8588	; 0x218c
 80081e0:	4413      	add	r3, r2
 80081e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081e6:	801a      	strh	r2, [r3, #0]
	gVar.dio.dout[DO_6].port = DO_6_GPIO_Port;
 80081e8:	4a1b      	ldr	r2, [pc, #108]	; (8008258 <InitialSettings+0x1488>)
 80081ea:	f242 13ec 	movw	r3, #8684	; 0x21ec
 80081ee:	4413      	add	r3, r2
 80081f0:	4a1c      	ldr	r2, [pc, #112]	; (8008264 <InitialSettings+0x1494>)
 80081f2:	601a      	str	r2, [r3, #0]
	gVar.dio.dout[DO_6].pin  = DO_6_Pin;
 80081f4:	4a18      	ldr	r2, [pc, #96]	; (8008258 <InitialSettings+0x1488>)
 80081f6:	f242 13f0 	movw	r3, #8688	; 0x21f0
 80081fa:	4413      	add	r3, r2
 80081fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008200:	801a      	strh	r2, [r3, #0]

	/*Analog inputs 1 to 4 -----------------*/
	gVar.aiId = AI_1;
 8008202:	4a15      	ldr	r2, [pc, #84]	; (8008258 <InitialSettings+0x1488>)
 8008204:	f641 7304 	movw	r3, #7940	; 0x1f04
 8008208:	4413      	add	r3, r2
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = AI_1;  i < AI_MAX; i++) {
 800820e:	2300      	movs	r3, #0
 8008210:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008214:	e012      	b.n	800823c <InitialSettings+0x146c>
#ifdef USE_AI_ADC_DMA
		gVar.aiBuffDMA[i] = 0;
#endif
		gVar.ai[i].id = i;			// Assign the id to each analog input
 8008216:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800821a:	490f      	ldr	r1, [pc, #60]	; (8008258 <InitialSettings+0x1488>)
 800821c:	4613      	mov	r3, r2
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	18ca      	adds	r2, r1, r3
 8008226:	f641 7308 	movw	r3, #7944	; 0x1f08
 800822a:	4413      	add	r3, r2
 800822c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8008230:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = AI_1;  i < AI_MAX; i++) {
 8008232:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008236:	3301      	adds	r3, #1
 8008238:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800823c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008240:	2b01      	cmp	r3, #1
 8008242:	d9e8      	bls.n	8008216 <InitialSettings+0x1446>
	}

	/*Analog output 1 to 4 -----------------*/
	gVar.aoId = AO_1;
 8008244:	4a04      	ldr	r2, [pc, #16]	; (8008258 <InitialSettings+0x1488>)
 8008246:	f641 6350 	movw	r3, #7760	; 0x1e50
 800824a:	4413      	add	r3, r2
 800824c:	2200      	movs	r2, #0
 800824e:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = AO_1;  i < AO_MAX; i++) {
 8008250:	2300      	movs	r3, #0
 8008252:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008256:	e0b6      	b.n	80083c6 <InitialSettings+0x15f6>
 8008258:	24002050 	.word	0x24002050
 800825c:	58021000 	.word	0x58021000
 8008260:	58020000 	.word	0x58020000
 8008264:	58020800 	.word	0x58020800
		gVar.ao[i].id = i;
 8008268:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800826c:	4ad1      	ldr	r2, [pc, #836]	; (80085b4 <InitialSettings+0x17e4>)
 800826e:	212c      	movs	r1, #44	; 0x2c
 8008270:	fb01 f303 	mul.w	r3, r1, r3
 8008274:	441a      	add	r2, r3
 8008276:	f641 6354 	movw	r3, #7764	; 0x1e54
 800827a:	4413      	add	r3, r2
 800827c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008280:	701a      	strb	r2, [r3, #0]
		gVar.ao[i].enabled = 0;
 8008282:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008286:	4acb      	ldr	r2, [pc, #812]	; (80085b4 <InitialSettings+0x17e4>)
 8008288:	212c      	movs	r1, #44	; 0x2c
 800828a:	fb01 f303 	mul.w	r3, r1, r3
 800828e:	441a      	add	r2, r3
 8008290:	f641 6355 	movw	r3, #7765	; 0x1e55
 8008294:	4413      	add	r3, r2
 8008296:	2200      	movs	r2, #0
 8008298:	701a      	strb	r2, [r3, #0]
		gVar.ao[i].mbValue = 0;
 800829a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800829e:	4ac5      	ldr	r2, [pc, #788]	; (80085b4 <InitialSettings+0x17e4>)
 80082a0:	212c      	movs	r1, #44	; 0x2c
 80082a2:	fb01 f303 	mul.w	r3, r1, r3
 80082a6:	441a      	add	r2, r3
 80082a8:	f641 635a 	movw	r3, #7770	; 0x1e5a
 80082ac:	4413      	add	r3, r2
 80082ae:	2200      	movs	r2, #0
 80082b0:	801a      	strh	r2, [r3, #0]
		gVar.ao[i].value = 0;
 80082b2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80082b6:	4abf      	ldr	r2, [pc, #764]	; (80085b4 <InitialSettings+0x17e4>)
 80082b8:	212c      	movs	r1, #44	; 0x2c
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	441a      	add	r2, r3
 80082c0:	f641 635c 	movw	r3, #7772	; 0x1e5c
 80082c4:	4413      	add	r3, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	801a      	strh	r2, [r3, #0]
		gVar.ao[i].lastValue = 0;
 80082ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80082ce:	4ab9      	ldr	r2, [pc, #740]	; (80085b4 <InitialSettings+0x17e4>)
 80082d0:	212c      	movs	r1, #44	; 0x2c
 80082d2:	fb01 f303 	mul.w	r3, r1, r3
 80082d6:	441a      	add	r2, r3
 80082d8:	f641 635e 	movw	r3, #7774	; 0x1e5e
 80082dc:	4413      	add	r3, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	801a      	strh	r2, [r3, #0]
		gVar.ao[i].source = CONF_DEF_AO1_SRC;
 80082e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80082e6:	4ab3      	ldr	r2, [pc, #716]	; (80085b4 <InitialSettings+0x17e4>)
 80082e8:	212c      	movs	r1, #44	; 0x2c
 80082ea:	fb01 f303 	mul.w	r3, r1, r3
 80082ee:	441a      	add	r2, r3
 80082f0:	f641 6356 	movw	r3, #7766	; 0x1e56
 80082f4:	4413      	add	r3, r2
 80082f6:	2201      	movs	r2, #1
 80082f8:	701a      	strb	r2, [r3, #0]
		gVar.ao[i].mode = CONF_DEF_AO1_MODE;
 80082fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80082fe:	4aad      	ldr	r2, [pc, #692]	; (80085b4 <InitialSettings+0x17e4>)
 8008300:	212c      	movs	r1, #44	; 0x2c
 8008302:	fb01 f303 	mul.w	r3, r1, r3
 8008306:	441a      	add	r2, r3
 8008308:	f641 6357 	movw	r3, #7767	; 0x1e57
 800830c:	4413      	add	r3, r2
 800830e:	2201      	movs	r2, #1
 8008310:	701a      	strb	r2, [r3, #0]
		gVar.ao[i].lastMode = 0;
 8008312:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008316:	4aa7      	ldr	r2, [pc, #668]	; (80085b4 <InitialSettings+0x17e4>)
 8008318:	212c      	movs	r1, #44	; 0x2c
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	441a      	add	r2, r3
 8008320:	f641 6358 	movw	r3, #7768	; 0x1e58
 8008324:	4413      	add	r3, r2
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
		gVar.ao[i].pwm.dutyCycle = 0;
 800832a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800832e:	4aa1      	ldr	r2, [pc, #644]	; (80085b4 <InitialSettings+0x17e4>)
 8008330:	212c      	movs	r1, #44	; 0x2c
 8008332:	fb01 f303 	mul.w	r3, r1, r3
 8008336:	441a      	add	r2, r3
 8008338:	f641 6374 	movw	r3, #7796	; 0x1e74
 800833c:	4413      	add	r3, r2
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
		gVar.ao[i].pwm.lastDutyCycle = 0;
 8008342:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008346:	4a9b      	ldr	r2, [pc, #620]	; (80085b4 <InitialSettings+0x17e4>)
 8008348:	212c      	movs	r1, #44	; 0x2c
 800834a:	fb01 f303 	mul.w	r3, r1, r3
 800834e:	441a      	add	r2, r3
 8008350:	f641 6375 	movw	r3, #7797	; 0x1e75
 8008354:	4413      	add	r3, r2
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
		gVar.ao[i].pwm.offDuration = 0;
 800835a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800835e:	4a95      	ldr	r2, [pc, #596]	; (80085b4 <InitialSettings+0x17e4>)
 8008360:	212c      	movs	r1, #44	; 0x2c
 8008362:	fb01 f303 	mul.w	r3, r1, r3
 8008366:	441a      	add	r2, r3
 8008368:	f641 636c 	movw	r3, #7788	; 0x1e6c
 800836c:	4413      	add	r3, r2
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]
		gVar.ao[i].pwm.frequency = 0;
 8008372:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008376:	4a8f      	ldr	r2, [pc, #572]	; (80085b4 <InitialSettings+0x17e4>)
 8008378:	212c      	movs	r1, #44	; 0x2c
 800837a:	fb01 f303 	mul.w	r3, r1, r3
 800837e:	441a      	add	r2, r3
 8008380:	f641 6364 	movw	r3, #7780	; 0x1e64
 8008384:	4413      	add	r3, r2
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
		gVar.ao[i].pwm.onDuration = 0;
 800838c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008390:	4a88      	ldr	r2, [pc, #544]	; (80085b4 <InitialSettings+0x17e4>)
 8008392:	212c      	movs	r1, #44	; 0x2c
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	441a      	add	r2, r3
 800839a:	f641 6368 	movw	r3, #7784	; 0x1e68
 800839e:	4413      	add	r3, r2
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
		gVar.ao[i].pwm.period = 0;
 80083a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80083a8:	4a82      	ldr	r2, [pc, #520]	; (80085b4 <InitialSettings+0x17e4>)
 80083aa:	212c      	movs	r1, #44	; 0x2c
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	441a      	add	r2, r3
 80083b2:	f641 6370 	movw	r3, #7792	; 0x1e70
 80083b6:	4413      	add	r3, r2
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = AO_1;  i < AO_MAX; i++) {
 80083bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80083c0:	3301      	adds	r3, #1
 80083c2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80083c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	f67f af4c 	bls.w	8008268 <InitialSettings+0x1498>

	}
	gVar.ao[AO_1].pwm.channel = TIM_CHANNEL_1;
 80083d0:	4a78      	ldr	r2, [pc, #480]	; (80085b4 <InitialSettings+0x17e4>)
 80083d2:	f641 6378 	movw	r3, #7800	; 0x1e78
 80083d6:	4413      	add	r3, r2
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
	gVar.ao[AO_2].pwm.channel = TIM_CHANNEL_2;
 80083dc:	4a75      	ldr	r2, [pc, #468]	; (80085b4 <InitialSettings+0x17e4>)
 80083de:	f641 63a4 	movw	r3, #7844	; 0x1ea4
 80083e2:	4413      	add	r3, r2
 80083e4:	2204      	movs	r2, #4
 80083e6:	601a      	str	r2, [r3, #0]
	gVar.ao[AO_3].pwm.channel = TIM_CHANNEL_3;
 80083e8:	4a72      	ldr	r2, [pc, #456]	; (80085b4 <InitialSettings+0x17e4>)
 80083ea:	f641 63d0 	movw	r3, #7888	; 0x1ed0
 80083ee:	4413      	add	r3, r2
 80083f0:	2208      	movs	r2, #8
 80083f2:	601a      	str	r2, [r3, #0]
	gVar.ao[AO_4].pwm.channel = TIM_CHANNEL_4;
 80083f4:	4a6f      	ldr	r2, [pc, #444]	; (80085b4 <InitialSettings+0x17e4>)
 80083f6:	f641 63fc 	movw	r3, #7932	; 0x1efc
 80083fa:	4413      	add	r3, r2
 80083fc:	220c      	movs	r2, #12
 80083fe:	601a      	str	r2, [r3, #0]

	/*PID 1 & 2 -----------------*/
	gVar.pid1.enable = 0;
 8008400:	4a6c      	ldr	r2, [pc, #432]	; (80085b4 <InitialSettings+0x17e4>)
 8008402:	f242 5308 	movw	r3, #9480	; 0x2508
 8008406:	4413      	add	r3, r2
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
	gVar.pid1.setpoint = 0;
 800840c:	4a69      	ldr	r2, [pc, #420]	; (80085b4 <InitialSettings+0x17e4>)
 800840e:	f242 530e 	movw	r3, #9486	; 0x250e
 8008412:	4413      	add	r3, r2
 8008414:	2200      	movs	r2, #0
 8008416:	801a      	strh	r2, [r3, #0]
	gVar.pid1.maxSetpoint = 0;
 8008418:	4a66      	ldr	r2, [pc, #408]	; (80085b4 <InitialSettings+0x17e4>)
 800841a:	f242 5310 	movw	r3, #9488	; 0x2510
 800841e:	4413      	add	r3, r2
 8008420:	2200      	movs	r2, #0
 8008422:	801a      	strh	r2, [r3, #0]
	gVar.pid1.measurement = 0;
 8008424:	4a63      	ldr	r2, [pc, #396]	; (80085b4 <InitialSettings+0x17e4>)
 8008426:	f242 5314 	movw	r3, #9492	; 0x2514
 800842a:	4413      	add	r3, r2
 800842c:	f04f 0200 	mov.w	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
	gVar.pid1.fbSource = 0;
 8008432:	4a60      	ldr	r2, [pc, #384]	; (80085b4 <InitialSettings+0x17e4>)
 8008434:	f242 5309 	movw	r3, #9481	; 0x2509
 8008438:	4413      	add	r3, r2
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]
	gVar.pid1.hystValue = 0;
 800843e:	4a5d      	ldr	r2, [pc, #372]	; (80085b4 <InitialSettings+0x17e4>)
 8008440:	f242 530c 	movw	r3, #9484	; 0x250c
 8008444:	4413      	add	r3, r2
 8008446:	2200      	movs	r2, #0
 8008448:	801a      	strh	r2, [r3, #0]
	gVar.pid1.kp = 0;
 800844a:	4a5a      	ldr	r2, [pc, #360]	; (80085b4 <InitialSettings+0x17e4>)
 800844c:	f242 5318 	movw	r3, #9496	; 0x2518
 8008450:	4413      	add	r3, r2
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
	gVar.pid1.ki = 0;
 8008458:	4a56      	ldr	r2, [pc, #344]	; (80085b4 <InitialSettings+0x17e4>)
 800845a:	f242 531c 	movw	r3, #9500	; 0x251c
 800845e:	4413      	add	r3, r2
 8008460:	f04f 0200 	mov.w	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
	gVar.pid1.kd = 0;
 8008466:	4a53      	ldr	r2, [pc, #332]	; (80085b4 <InitialSettings+0x17e4>)
 8008468:	f242 5320 	movw	r3, #9504	; 0x2520
 800846c:	4413      	add	r3, r2
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	601a      	str	r2, [r3, #0]
	gVar.pid1.error = 0;
 8008474:	4a4f      	ldr	r2, [pc, #316]	; (80085b4 <InitialSettings+0x17e4>)
 8008476:	f242 5324 	movw	r3, #9508	; 0x2524
 800847a:	4413      	add	r3, r2
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
	gVar.pid1.last_error = 0;
 8008482:	4a4c      	ldr	r2, [pc, #304]	; (80085b4 <InitialSettings+0x17e4>)
 8008484:	f242 5328 	movw	r3, #9512	; 0x2528
 8008488:	4413      	add	r3, r2
 800848a:	f04f 0200 	mov.w	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
	gVar.pid1.last_error_time = 0;
 8008490:	4a48      	ldr	r2, [pc, #288]	; (80085b4 <InitialSettings+0x17e4>)
 8008492:	f242 5344 	movw	r3, #9540	; 0x2544
 8008496:	4413      	add	r3, r2
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
	gVar.pid1.outputMode = CONF_DEF_PID1_OUT_MODE;
 800849e:	4a45      	ldr	r2, [pc, #276]	; (80085b4 <InitialSettings+0x17e4>)
 80084a0:	f242 530a 	movw	r3, #9482	; 0x250a
 80084a4:	4413      	add	r3, r2
 80084a6:	2201      	movs	r2, #1
 80084a8:	701a      	strb	r2, [r3, #0]
	gVar.pid1.output_d = 0;
 80084aa:	4a42      	ldr	r2, [pc, #264]	; (80085b4 <InitialSettings+0x17e4>)
 80084ac:	f242 5334 	movw	r3, #9524	; 0x2534
 80084b0:	4413      	add	r3, r2
 80084b2:	f04f 0200 	mov.w	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
	gVar.pid1.output_i = 0;
 80084b8:	4a3e      	ldr	r2, [pc, #248]	; (80085b4 <InitialSettings+0x17e4>)
 80084ba:	f242 5330 	movw	r3, #9520	; 0x2530
 80084be:	4413      	add	r3, r2
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
	gVar.pid1.output_p = 0;
 80084c6:	4a3b      	ldr	r2, [pc, #236]	; (80085b4 <InitialSettings+0x17e4>)
 80084c8:	f242 532c 	movw	r3, #9516	; 0x252c
 80084cc:	4413      	add	r3, r2
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	601a      	str	r2, [r3, #0]
	gVar.pid1.output_i_max = 0;
 80084d4:	4a37      	ldr	r2, [pc, #220]	; (80085b4 <InitialSettings+0x17e4>)
 80084d6:	f242 533c 	movw	r3, #9532	; 0x253c
 80084da:	4413      	add	r3, r2
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
	gVar.pid1.output_pid = 0;
 80084e2:	4a34      	ldr	r2, [pc, #208]	; (80085b4 <InitialSettings+0x17e4>)
 80084e4:	f242 5338 	movw	r3, #9528	; 0x2538
 80084e8:	4413      	add	r3, r2
 80084ea:	2200      	movs	r2, #0
 80084ec:	801a      	strh	r2, [r3, #0]

	gVar.pid2.enable = 0;
 80084ee:	4a31      	ldr	r2, [pc, #196]	; (80085b4 <InitialSettings+0x17e4>)
 80084f0:	f242 5348 	movw	r3, #9544	; 0x2548
 80084f4:	4413      	add	r3, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
	gVar.pid2.setpoint = 0;
 80084fa:	4a2e      	ldr	r2, [pc, #184]	; (80085b4 <InitialSettings+0x17e4>)
 80084fc:	f242 534e 	movw	r3, #9550	; 0x254e
 8008500:	4413      	add	r3, r2
 8008502:	2200      	movs	r2, #0
 8008504:	801a      	strh	r2, [r3, #0]
	gVar.pid2.maxSetpoint = 0;
 8008506:	4a2b      	ldr	r2, [pc, #172]	; (80085b4 <InitialSettings+0x17e4>)
 8008508:	f242 5350 	movw	r3, #9552	; 0x2550
 800850c:	4413      	add	r3, r2
 800850e:	2200      	movs	r2, #0
 8008510:	801a      	strh	r2, [r3, #0]
	gVar.pid2.measurement = 0;
 8008512:	4a28      	ldr	r2, [pc, #160]	; (80085b4 <InitialSettings+0x17e4>)
 8008514:	f242 5354 	movw	r3, #9556	; 0x2554
 8008518:	4413      	add	r3, r2
 800851a:	f04f 0200 	mov.w	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
	gVar.pid2.fbSource = 0;
 8008520:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <InitialSettings+0x17e4>)
 8008522:	f242 5349 	movw	r3, #9545	; 0x2549
 8008526:	4413      	add	r3, r2
 8008528:	2200      	movs	r2, #0
 800852a:	701a      	strb	r2, [r3, #0]
	gVar.pid2.hystValue = 0;
 800852c:	4a21      	ldr	r2, [pc, #132]	; (80085b4 <InitialSettings+0x17e4>)
 800852e:	f242 534c 	movw	r3, #9548	; 0x254c
 8008532:	4413      	add	r3, r2
 8008534:	2200      	movs	r2, #0
 8008536:	801a      	strh	r2, [r3, #0]
	gVar.pid2.kp = 0;
 8008538:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <InitialSettings+0x17e4>)
 800853a:	f242 5358 	movw	r3, #9560	; 0x2558
 800853e:	4413      	add	r3, r2
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	601a      	str	r2, [r3, #0]
	gVar.pid2.ki = 0;
 8008546:	4a1b      	ldr	r2, [pc, #108]	; (80085b4 <InitialSettings+0x17e4>)
 8008548:	f242 535c 	movw	r3, #9564	; 0x255c
 800854c:	4413      	add	r3, r2
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
	gVar.pid2.kd = 0;
 8008554:	4a17      	ldr	r2, [pc, #92]	; (80085b4 <InitialSettings+0x17e4>)
 8008556:	f242 5360 	movw	r3, #9568	; 0x2560
 800855a:	4413      	add	r3, r2
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
	gVar.pid2.error = 0;
 8008562:	4a14      	ldr	r2, [pc, #80]	; (80085b4 <InitialSettings+0x17e4>)
 8008564:	f242 5364 	movw	r3, #9572	; 0x2564
 8008568:	4413      	add	r3, r2
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
	gVar.pid2.last_error = 0;
 8008570:	4a10      	ldr	r2, [pc, #64]	; (80085b4 <InitialSettings+0x17e4>)
 8008572:	f242 5368 	movw	r3, #9576	; 0x2568
 8008576:	4413      	add	r3, r2
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	601a      	str	r2, [r3, #0]
	gVar.pid2.last_error_time = 0;
 800857e:	4a0d      	ldr	r2, [pc, #52]	; (80085b4 <InitialSettings+0x17e4>)
 8008580:	f242 5384 	movw	r3, #9604	; 0x2584
 8008584:	4413      	add	r3, r2
 8008586:	f04f 0200 	mov.w	r2, #0
 800858a:	601a      	str	r2, [r3, #0]
	gVar.pid2.outputMode = CONF_DEF_PID2_OUT_MODE;
 800858c:	4a09      	ldr	r2, [pc, #36]	; (80085b4 <InitialSettings+0x17e4>)
 800858e:	f242 534a 	movw	r3, #9546	; 0x254a
 8008592:	4413      	add	r3, r2
 8008594:	2201      	movs	r2, #1
 8008596:	701a      	strb	r2, [r3, #0]
	gVar.pid2.output_d = 0;
 8008598:	4a06      	ldr	r2, [pc, #24]	; (80085b4 <InitialSettings+0x17e4>)
 800859a:	f242 5374 	movw	r3, #9588	; 0x2574
 800859e:	4413      	add	r3, r2
 80085a0:	f04f 0200 	mov.w	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
	gVar.pid2.output_i = 0;
 80085a6:	4a03      	ldr	r2, [pc, #12]	; (80085b4 <InitialSettings+0x17e4>)
 80085a8:	f242 5370 	movw	r3, #9584	; 0x2570
 80085ac:	4413      	add	r3, r2
 80085ae:	f04f 0200 	mov.w	r2, #0
 80085b2:	e001      	b.n	80085b8 <InitialSettings+0x17e8>
 80085b4:	24002050 	.word	0x24002050
 80085b8:	601a      	str	r2, [r3, #0]
	gVar.pid2.output_p = 0;
 80085ba:	4a3b      	ldr	r2, [pc, #236]	; (80086a8 <InitialSettings+0x18d8>)
 80085bc:	f242 536c 	movw	r3, #9580	; 0x256c
 80085c0:	4413      	add	r3, r2
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]
	gVar.pid2.output_i_max = 0;
 80085c8:	4a37      	ldr	r2, [pc, #220]	; (80086a8 <InitialSettings+0x18d8>)
 80085ca:	f242 537c 	movw	r3, #9596	; 0x257c
 80085ce:	4413      	add	r3, r2
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]
	gVar.pid2.output_pid = 0;
 80085d6:	4a34      	ldr	r2, [pc, #208]	; (80086a8 <InitialSettings+0x18d8>)
 80085d8:	f242 5378 	movw	r3, #9592	; 0x2578
 80085dc:	4413      	add	r3, r2
 80085de:	2200      	movs	r2, #0
 80085e0:	801a      	strh	r2, [r3, #0]


	timStamp.currentTime 	= 0;
 80085e2:	4932      	ldr	r1, [pc, #200]	; (80086ac <InitialSettings+0x18dc>)
 80085e4:	f04f 0200 	mov.w	r2, #0
 80085e8:	f04f 0300 	mov.w	r3, #0
 80085ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	timStamp.ovfCount 		= 0;
 80085f0:	4b2e      	ldr	r3, [pc, #184]	; (80086ac <InitialSettings+0x18dc>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	611a      	str	r2, [r3, #16]
	timStamp.timerType 		= TS_TIM_TYP_SYSTICK;
 80085f6:	4b2d      	ldr	r3, [pc, #180]	; (80086ac <InitialSettings+0x18dc>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	701a      	strb	r2, [r3, #0]
	timStamp.sec 			= 0;
 80085fc:	4b2b      	ldr	r3, [pc, #172]	; (80086ac <InitialSettings+0x18dc>)
 80085fe:	2200      	movs	r2, #0
 8008600:	61da      	str	r2, [r3, #28]
	timStamp.us 			= 0;
 8008602:	4b2a      	ldr	r3, [pc, #168]	; (80086ac <InitialSettings+0x18dc>)
 8008604:	2200      	movs	r2, #0
 8008606:	625a      	str	r2, [r3, #36]	; 0x24
	timStamp.ms 			= 0;
 8008608:	4b28      	ldr	r3, [pc, #160]	; (80086ac <InitialSettings+0x18dc>)
 800860a:	2200      	movs	r2, #0
 800860c:	621a      	str	r2, [r3, #32]


	/*LEDs-----------------*/
	for(uint8_t i = 0; i < LED_MAX; i++){
 800860e:	2300      	movs	r3, #0
 8008610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008614:	e016      	b.n	8008644 <InitialSettings+0x1874>
		gVar.led[i].id = i;
 8008616:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800861a:	4923      	ldr	r1, [pc, #140]	; (80086a8 <InitialSettings+0x18d8>)
 800861c:	f603 133e 	addw	r3, r3, #2366	; 0x93e
 8008620:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008624:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		gVar.led[i].state = 0;
 8008628:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800862c:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <InitialSettings+0x18d8>)
 800862e:	f603 133e 	addw	r3, r3, #2366	; 0x93e
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	2200      	movs	r2, #0
 8008638:	709a      	strb	r2, [r3, #2]
	for(uint8_t i = 0; i < LED_MAX; i++){
 800863a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800863e:	3301      	adds	r3, #1
 8008640:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008644:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008648:	2b03      	cmp	r3, #3
 800864a:	d9e4      	bls.n	8008616 <InitialSettings+0x1846>
	}
	gVar.led[LED_RS485_RX].pin = RS485_RX_LED_PIN;
 800864c:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <InitialSettings+0x18d8>)
 800864e:	f242 43f9 	movw	r3, #9465	; 0x24f9
 8008652:	4413      	add	r3, r2
 8008654:	2210      	movs	r2, #16
 8008656:	701a      	strb	r2, [r3, #0]
	gVar.led[LED_RS485_TX].pin = RS485_TX_LED_PIN;
 8008658:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <InitialSettings+0x18d8>)
 800865a:	f242 43fd 	movw	r3, #9469	; 0x24fd
 800865e:	4413      	add	r3, r2
 8008660:	2220      	movs	r2, #32
 8008662:	701a      	strb	r2, [r3, #0]
	gVar.led[LED_1].pin = LED_1_PIN;
 8008664:	4a10      	ldr	r2, [pc, #64]	; (80086a8 <InitialSettings+0x18d8>)
 8008666:	f242 5301 	movw	r3, #9473	; 0x2501
 800866a:	4413      	add	r3, r2
 800866c:	2240      	movs	r2, #64	; 0x40
 800866e:	701a      	strb	r2, [r3, #0]
	gVar.led[LED_1].pin = LED_2_PIN;
 8008670:	4a0d      	ldr	r2, [pc, #52]	; (80086a8 <InitialSettings+0x18d8>)
 8008672:	f242 5301 	movw	r3, #9473	; 0x2501
 8008676:	4413      	add	r3, r2
 8008678:	2280      	movs	r2, #128	; 0x80
 800867a:	701a      	strb	r2, [r3, #0]

	/*IOExtender-----------------*/
	gVar.ioExt.SR.value  = 0;
 800867c:	4a0a      	ldr	r2, [pc, #40]	; (80086a8 <InitialSettings+0x18d8>)
 800867e:	f242 43ef 	movw	r3, #9455	; 0x24ef
 8008682:	4413      	add	r3, r2
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
	gVar.ioExt.CR.value  = 0;
 8008688:	4a07      	ldr	r2, [pc, #28]	; (80086a8 <InitialSettings+0x18d8>)
 800868a:	f242 43f0 	movw	r3, #9456	; 0x24f0
 800868e:	4413      	add	r3, r2
 8008690:	2200      	movs	r2, #0
 8008692:	701a      	strb	r2, [r3, #0]
	gVar.ioExt.PR.value  = 0;
 8008694:	4a04      	ldr	r2, [pc, #16]	; (80086a8 <InitialSettings+0x18d8>)
 8008696:	f242 43f1 	movw	r3, #9457	; 0x24f1
 800869a:	4413      	add	r3, r2
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]

}
 80086a0:	bf00      	nop
 80086a2:	3748      	adds	r7, #72	; 0x48
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bdb0      	pop	{r4, r5, r7, pc}
 80086a8:	24002050 	.word	0x24002050
 80086ac:	24005168 	.word	0x24005168

080086b0 <UpdateSettings>:
/*Old------------*/

/*
 * updates the settings to the last stored value
 * */
void UpdateSettings(void){
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	; 0x28
 80086b4:	af00      	add	r7, sp, #0


	if(FSExt_Download() == 0){
 80086b6:	f7fc f971 	bl	800499c <FSExt_Download>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d102      	bne.n	80086c6 <UpdateSettings+0x16>
		DBG_SPRINT_NL("Error: Flash read failed!");
 80086c0:	48dd      	ldr	r0, [pc, #884]	; (8008a38 <UpdateSettings+0x388>)
 80086c2:	f005 fabf 	bl	800dc44 <DBG_SPRINT_NL>
	}

	for(uint16_t address = 0 ; address < SA_MAX; address++){
 80086c6:	2300      	movs	r3, #0
 80086c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80086ca:	f000 bf2b 	b.w	8009524 <UpdateSettings+0xe74>
		uint32_t value = FSExt_ReadIntNum(address);
 80086ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fc f993 	bl	80049fc <FSExt_ReadIntNum>
 80086d6:	61f8      	str	r0, [r7, #28]
		switch (address) {
 80086d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086da:	2b90      	cmp	r3, #144	; 0x90
 80086dc:	f200 871a 	bhi.w	8009514 <UpdateSettings+0xe64>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <UpdateSettings+0x38>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	0800892d 	.word	0x0800892d
 80086ec:	08008a73 	.word	0x08008a73
 80086f0:	08008aa7 	.word	0x08008aa7
 80086f4:	08009515 	.word	0x08009515
 80086f8:	08009515 	.word	0x08009515
 80086fc:	08008b0f 	.word	0x08008b0f
 8008700:	08009515 	.word	0x08009515
 8008704:	08008bb1 	.word	0x08008bb1
 8008708:	08009515 	.word	0x08009515
 800870c:	08008c53 	.word	0x08008c53
 8008710:	08009515 	.word	0x08009515
 8008714:	08008cc1 	.word	0x08008cc1
 8008718:	08009515 	.word	0x08009515
 800871c:	08008cf5 	.word	0x08008cf5
 8008720:	08009515 	.word	0x08009515
 8008724:	08009515 	.word	0x08009515
 8008728:	08009515 	.word	0x08009515
 800872c:	08009515 	.word	0x08009515
 8008730:	08009515 	.word	0x08009515
 8008734:	08008d77 	.word	0x08008d77
 8008738:	08009515 	.word	0x08009515
 800873c:	08009515 	.word	0x08009515
 8008740:	08009515 	.word	0x08009515
 8008744:	08008de5 	.word	0x08008de5
 8008748:	08009515 	.word	0x08009515
 800874c:	08009515 	.word	0x08009515
 8008750:	08009515 	.word	0x08009515
 8008754:	08008e55 	.word	0x08008e55
 8008758:	08009515 	.word	0x08009515
 800875c:	08009515 	.word	0x08009515
 8008760:	08009515 	.word	0x08009515
 8008764:	08008ec3 	.word	0x08008ec3
 8008768:	08009515 	.word	0x08009515
 800876c:	08009515 	.word	0x08009515
 8008770:	08009515 	.word	0x08009515
 8008774:	08008f33 	.word	0x08008f33
 8008778:	08008f53 	.word	0x08008f53
 800877c:	08009515 	.word	0x08009515
 8008780:	08009515 	.word	0x08009515
 8008784:	08008f6f 	.word	0x08008f6f
 8008788:	08009515 	.word	0x08009515
 800878c:	08009515 	.word	0x08009515
 8008790:	08009515 	.word	0x08009515
 8008794:	08008fdd 	.word	0x08008fdd
 8008798:	08008ffd 	.word	0x08008ffd
 800879c:	08009019 	.word	0x08009019
 80087a0:	08009049 	.word	0x08009049
 80087a4:	08009075 	.word	0x08009075
 80087a8:	08009099 	.word	0x08009099
 80087ac:	080090b9 	.word	0x080090b9
 80087b0:	080090e1 	.word	0x080090e1
 80087b4:	08009103 	.word	0x08009103
 80087b8:	0800912d 	.word	0x0800912d
 80087bc:	08009151 	.word	0x08009151
 80087c0:	0800917d 	.word	0x0800917d
 80087c4:	080091a9 	.word	0x080091a9
 80087c8:	080091f9 	.word	0x080091f9
 80087cc:	0800923f 	.word	0x0800923f
 80087d0:	08008ad5 	.word	0x08008ad5
 80087d4:	08008b77 	.word	0x08008b77
 80087d8:	08008c19 	.word	0x08008c19
 80087dc:	08008c87 	.word	0x08008c87
 80087e0:	080091d5 	.word	0x080091d5
 80087e4:	08008b43 	.word	0x08008b43
 80087e8:	08008be5 	.word	0x08008be5
 80087ec:	08009515 	.word	0x08009515
 80087f0:	08009515 	.word	0x08009515
 80087f4:	0800894b 	.word	0x0800894b
 80087f8:	08009515 	.word	0x08009515
 80087fc:	08009515 	.word	0x08009515
 8008800:	0800897b 	.word	0x0800897b
 8008804:	08009515 	.word	0x08009515
 8008808:	080089ab 	.word	0x080089ab
 800880c:	080089d9 	.word	0x080089d9
 8008810:	08009515 	.word	0x08009515
 8008814:	08009515 	.word	0x08009515
 8008818:	08008a09 	.word	0x08008a09
 800881c:	08009515 	.word	0x08009515
 8008820:	08008a45 	.word	0x08008a45
 8008824:	08009515 	.word	0x08009515
 8008828:	08009515 	.word	0x08009515
 800882c:	08009515 	.word	0x08009515
 8008830:	08009515 	.word	0x08009515
 8008834:	08009515 	.word	0x08009515
 8008838:	08009515 	.word	0x08009515
 800883c:	08009515 	.word	0x08009515
 8008840:	08009515 	.word	0x08009515
 8008844:	08009515 	.word	0x08009515
 8008848:	08009515 	.word	0x08009515
 800884c:	08009515 	.word	0x08009515
 8008850:	08009515 	.word	0x08009515
 8008854:	08009515 	.word	0x08009515
 8008858:	08009515 	.word	0x08009515
 800885c:	08009515 	.word	0x08009515
 8008860:	08009515 	.word	0x08009515
 8008864:	08009515 	.word	0x08009515
 8008868:	08009515 	.word	0x08009515
 800886c:	08009515 	.word	0x08009515
 8008870:	08009515 	.word	0x08009515
 8008874:	08009515 	.word	0x08009515
 8008878:	08009515 	.word	0x08009515
 800887c:	08009515 	.word	0x08009515
 8008880:	08009515 	.word	0x08009515
 8008884:	08009515 	.word	0x08009515
 8008888:	08009515 	.word	0x08009515
 800888c:	08009515 	.word	0x08009515
 8008890:	08009515 	.word	0x08009515
 8008894:	08009515 	.word	0x08009515
 8008898:	08009515 	.word	0x08009515
 800889c:	08009515 	.word	0x08009515
 80088a0:	08009515 	.word	0x08009515
 80088a4:	08009515 	.word	0x08009515
 80088a8:	08009515 	.word	0x08009515
 80088ac:	08009515 	.word	0x08009515
 80088b0:	08009515 	.word	0x08009515
 80088b4:	08009515 	.word	0x08009515
 80088b8:	08009515 	.word	0x08009515
 80088bc:	08009515 	.word	0x08009515
 80088c0:	08009515 	.word	0x08009515
 80088c4:	08009515 	.word	0x08009515
 80088c8:	08009515 	.word	0x08009515
 80088cc:	08009515 	.word	0x08009515
 80088d0:	08009515 	.word	0x08009515
 80088d4:	08009515 	.word	0x08009515
 80088d8:	08009515 	.word	0x08009515
 80088dc:	08009515 	.word	0x08009515
 80088e0:	08009515 	.word	0x08009515
 80088e4:	08009515 	.word	0x08009515
 80088e8:	08009515 	.word	0x08009515
 80088ec:	08009515 	.word	0x08009515
 80088f0:	08009345 	.word	0x08009345
 80088f4:	0800937d 	.word	0x0800937d
 80088f8:	080093b5 	.word	0x080093b5
 80088fc:	080093ed 	.word	0x080093ed
 8008900:	0800941b 	.word	0x0800941b
 8008904:	08009453 	.word	0x08009453
 8008908:	0800948b 	.word	0x0800948b
 800890c:	080094c3 	.word	0x080094c3
 8008910:	0800925d 	.word	0x0800925d
 8008914:	08009283 	.word	0x08009283
 8008918:	080092a9 	.word	0x080092a9
 800891c:	080092d5 	.word	0x080092d5
 8008920:	08009313 	.word	0x08009313
 8008924:	08009515 	.word	0x08009515
 8008928:	080094f1 	.word	0x080094f1
			case SA_MEM_FIRST_RUN_CHECK:{
					if(value <= 0U){
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f040 85f2 	bne.w	8009518 <UpdateSettings+0xe68>
						if(FSExt_EraseFull()<=0){
 8008934:	f7fc f9a2 	bl	8004c7c <FSExt_EraseFull>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	f040 85ec 	bne.w	8009518 <UpdateSettings+0xe68>
							DBG_SPRINT_NL("Error: Flash erase failed!");
 8008940:	483e      	ldr	r0, [pc, #248]	; (8008a3c <UpdateSettings+0x38c>)
 8008942:	f005 f97f 	bl	800dc44 <DBG_SPRINT_NL>
						}
					}

				}
				break;
 8008946:	f000 bde7 	b.w	8009518 <UpdateSettings+0xe68>

				/*Digital Inputs--------------*/
			case SA_DI1_MODE:
				if(!(value == DI_MODE_NORMAL || value == DI_MODE_PULSE_CAPTURE)){
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <UpdateSettings+0x2b6>
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d007      	beq.n	8008966 <UpdateSettings+0x2b6>
					gVar.dio.di[DI_1].config.mode = CONF_DEF_DI1_MODE;
 8008956:	4a3a      	ldr	r2, [pc, #232]	; (8008a40 <UpdateSettings+0x390>)
 8008958:	f242 2348 	movw	r3, #8776	; 0x2248
 800895c:	4413      	add	r3, r2
 800895e:	2200      	movs	r2, #0
 8008960:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.di[DI_1].config.mode = value;
				}
				break;
 8008962:	f000 bddc 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.dio.di[DI_1].config.mode = value;
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	b2d9      	uxtb	r1, r3
 800896a:	4a35      	ldr	r2, [pc, #212]	; (8008a40 <UpdateSettings+0x390>)
 800896c:	f242 2348 	movw	r3, #8776	; 0x2248
 8008970:	4413      	add	r3, r2
 8008972:	460a      	mov	r2, r1
 8008974:	701a      	strb	r2, [r3, #0]
				break;
 8008976:	f000 bdd2 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_DI1_TRIGGER_MODE:
				if(!(value == DI_TRIG_MODE_RISING || value == DI_TRIG_MODE_FALLING)){
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d00a      	beq.n	8008996 <UpdateSettings+0x2e6>
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d007      	beq.n	8008996 <UpdateSettings+0x2e6>
					gVar.dio.di[DI_1].config.trigMode = CONF_DEF_DI1_TRIGGER_MODE;
 8008986:	4a2e      	ldr	r2, [pc, #184]	; (8008a40 <UpdateSettings+0x390>)
 8008988:	f242 234b 	movw	r3, #8779	; 0x224b
 800898c:	4413      	add	r3, r2
 800898e:	2201      	movs	r2, #1
 8008990:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.di[DI_1].config.trigMode = value;
				}
				break;
 8008992:	f000 bdc4 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.dio.di[DI_1].config.trigMode = value;
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	b2d9      	uxtb	r1, r3
 800899a:	4a29      	ldr	r2, [pc, #164]	; (8008a40 <UpdateSettings+0x390>)
 800899c:	f242 234b 	movw	r3, #8779	; 0x224b
 80089a0:	4413      	add	r3, r2
 80089a2:	460a      	mov	r2, r1
 80089a4:	701a      	strb	r2, [r3, #0]
				break;
 80089a6:	f000 bdba 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_DI1_SIGNAL_PERIOD_MIN:
				if(!(value >= 1 && value <= DEF_U16_MAX_VALUE)){
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <UpdateSettings+0x308>
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089b6:	d307      	bcc.n	80089c8 <UpdateSettings+0x318>
					gVar.dio.di[DI_1].pulseInf.periodMin = CONF_DEF_DI1_SIG_PERIOD_MAX;
 80089b8:	4a21      	ldr	r2, [pc, #132]	; (8008a40 <UpdateSettings+0x390>)
 80089ba:	f242 237c 	movw	r3, #8828	; 0x227c
 80089be:	4413      	add	r3, r2
 80089c0:	22fa      	movs	r2, #250	; 0xfa
 80089c2:	601a      	str	r2, [r3, #0]
				}else{
					gVar.dio.di[DI_1].pulseInf.periodMin  = value;
				}
				break;
 80089c4:	f000 bdab 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.dio.di[DI_1].pulseInf.periodMin  = value;
 80089c8:	4a1d      	ldr	r2, [pc, #116]	; (8008a40 <UpdateSettings+0x390>)
 80089ca:	f242 237c 	movw	r3, #8828	; 0x227c
 80089ce:	4413      	add	r3, r2
 80089d0:	69fa      	ldr	r2, [r7, #28]
 80089d2:	601a      	str	r2, [r3, #0]
				break;
 80089d4:	f000 bda3 	b.w	800951e <UpdateSettings+0xe6e>


			case SA_DI2_MODE:
				if(!(value == DI_MODE_NORMAL || value == DI_MODE_PULSE_CAPTURE)){
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <UpdateSettings+0x344>
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d007      	beq.n	80089f4 <UpdateSettings+0x344>
					gVar.dio.di[DI_2].config.mode = CONF_DEF_DI2_MODE;
 80089e4:	4a16      	ldr	r2, [pc, #88]	; (8008a40 <UpdateSettings+0x390>)
 80089e6:	f242 2388 	movw	r3, #8840	; 0x2288
 80089ea:	4413      	add	r3, r2
 80089ec:	2200      	movs	r2, #0
 80089ee:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.di[DI_2].config.mode = value;
				}
				break;
 80089f0:	f000 bd95 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.dio.di[DI_2].config.mode = value;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	b2d9      	uxtb	r1, r3
 80089f8:	4a11      	ldr	r2, [pc, #68]	; (8008a40 <UpdateSettings+0x390>)
 80089fa:	f242 2388 	movw	r3, #8840	; 0x2288
 80089fe:	4413      	add	r3, r2
 8008a00:	460a      	mov	r2, r1
 8008a02:	701a      	strb	r2, [r3, #0]
				break;
 8008a04:	f000 bd8b 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_DI2_TRIGGER_MODE:
				if(!(value == DI_TRIG_MODE_RISING || value == DI_TRIG_MODE_FALLING)){
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d00a      	beq.n	8008a24 <UpdateSettings+0x374>
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d007      	beq.n	8008a24 <UpdateSettings+0x374>
					gVar.dio.di[DI_2].config.trigMode = CONF_DEF_DI2_TRIGGER_MODE;
 8008a14:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <UpdateSettings+0x390>)
 8008a16:	f242 238b 	movw	r3, #8843	; 0x228b
 8008a1a:	4413      	add	r3, r2
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.di[DI_2].config.trigMode = value;
				}
				break;
 8008a20:	f000 bd7d 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.dio.di[DI_2].config.trigMode = value;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	b2d9      	uxtb	r1, r3
 8008a28:	4a05      	ldr	r2, [pc, #20]	; (8008a40 <UpdateSettings+0x390>)
 8008a2a:	f242 238b 	movw	r3, #8843	; 0x228b
 8008a2e:	4413      	add	r3, r2
 8008a30:	460a      	mov	r2, r1
 8008a32:	701a      	strb	r2, [r3, #0]
				break;
 8008a34:	f000 bd73 	b.w	800951e <UpdateSettings+0xe6e>
 8008a38:	0802a618 	.word	0x0802a618
 8008a3c:	0802a634 	.word	0x0802a634
 8008a40:	24002050 	.word	0x24002050
			case SA_DI2_SIGNAL_PERIOD_MIN:
				if(!(value >= 1 && value <= DEF_U16_MAX_VALUE)){
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <UpdateSettings+0x3a2>
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a50:	d307      	bcc.n	8008a62 <UpdateSettings+0x3b2>
					gVar.dio.di[DI_2].pulseInf.periodMin = CONF_DEF_DI2_SIG_PERIOD_MAX;
 8008a52:	4abc      	ldr	r2, [pc, #752]	; (8008d44 <UpdateSettings+0x694>)
 8008a54:	f242 23bc 	movw	r3, #8892	; 0x22bc
 8008a58:	4413      	add	r3, r2
 8008a5a:	22fa      	movs	r2, #250	; 0xfa
 8008a5c:	601a      	str	r2, [r3, #0]
				}else{
					gVar.dio.di[DI_2].pulseInf.periodMin  = value;
				}
				break;
 8008a5e:	f000 bd5e 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.dio.di[DI_2].pulseInf.periodMin  = value;
 8008a62:	4ab8      	ldr	r2, [pc, #736]	; (8008d44 <UpdateSettings+0x694>)
 8008a64:	f242 23bc 	movw	r3, #8892	; 0x22bc
 8008a68:	4413      	add	r3, r2
 8008a6a:	69fa      	ldr	r2, [r7, #28]
 8008a6c:	601a      	str	r2, [r3, #0]
				break;
 8008a6e:	f000 bd56 	b.w	800951e <UpdateSettings+0xe6e>


				/*Analog Inputs-----------*/
			case SA_AI1_MODE:
				if(!AIO_IsValidMode(value)){
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7f8 fb66 	bl	8001148 <AIO_IsValidMode>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d107      	bne.n	8008a92 <UpdateSettings+0x3e2>
					gVar.ai[AI_1].mode = CONF_DEF_AI1_MODE;
 8008a82:	4ab0      	ldr	r2, [pc, #704]	; (8008d44 <UpdateSettings+0x694>)
 8008a84:	f641 7310 	movw	r3, #7952	; 0x1f10
 8008a88:	4413      	add	r3, r2
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ai[AI_1].mode = value;
				}
				break;
 8008a8e:	f000 bd46 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ai[AI_1].mode = value;
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	b2d9      	uxtb	r1, r3
 8008a96:	4aab      	ldr	r2, [pc, #684]	; (8008d44 <UpdateSettings+0x694>)
 8008a98:	f641 7310 	movw	r3, #7952	; 0x1f10
 8008a9c:	4413      	add	r3, r2
 8008a9e:	460a      	mov	r2, r1
 8008aa0:	701a      	strb	r2, [r3, #0]
				break;
 8008aa2:	f000 bd3c 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_AI2_MODE:
				if(!AIO_IsValidMode(value)){
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f8 fb4c 	bl	8001148 <AIO_IsValidMode>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <UpdateSettings+0x414>
					gVar.ai[AI_2].mode = CONF_DEF_AI2_MODE;
 8008ab6:	4ba3      	ldr	r3, [pc, #652]	; (8008d44 <UpdateSettings+0x694>)
 8008ab8:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8008abc:	2201      	movs	r2, #1
 8008abe:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ai[AI_2].mode = value;
				}
				break;
 8008ac0:	f000 bd2d 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ai[AI_2].mode = value;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	4b9e      	ldr	r3, [pc, #632]	; (8008d44 <UpdateSettings+0x694>)
 8008aca:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8008ace:	701a      	strb	r2, [r3, #0]
				break;
 8008ad0:	f000 bd25 	b.w	800951e <UpdateSettings+0xe6e>


				/*Analog outputs 1 to 4----------*/
				//Analog outputs 1
			case SA_AO1_ENABLE:
				if(!(value == 0 || value == 1)){
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <UpdateSettings+0x440>
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d007      	beq.n	8008af0 <UpdateSettings+0x440>
					gVar.ao[AO_1].enabled = CONF_DEF_AO1_ENABLE;
 8008ae0:	4a98      	ldr	r2, [pc, #608]	; (8008d44 <UpdateSettings+0x694>)
 8008ae2:	f641 6355 	movw	r3, #7765	; 0x1e55
 8008ae6:	4413      	add	r3, r2
 8008ae8:	2201      	movs	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_1].enabled = value>0;
				}
				break;
 8008aec:	f000 bd17 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_1].enabled = value>0;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bf14      	ite	ne
 8008af6:	2301      	movne	r3, #1
 8008af8:	2300      	moveq	r3, #0
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	4619      	mov	r1, r3
 8008afe:	4a91      	ldr	r2, [pc, #580]	; (8008d44 <UpdateSettings+0x694>)
 8008b00:	f641 6355 	movw	r3, #7765	; 0x1e55
 8008b04:	4413      	add	r3, r2
 8008b06:	460a      	mov	r2, r1
 8008b08:	701a      	strb	r2, [r3, #0]
				break;
 8008b0a:	f000 bd08 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_AO1_MODE:
//				gVar.ao[AO_1].mode = (AIO_Mode)FSExt_ReadIntNum(address);
				if(!AIO_IsValidMode(value)){
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7f8 fb18 	bl	8001148 <AIO_IsValidMode>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d107      	bne.n	8008b2e <UpdateSettings+0x47e>
					gVar.ao[AO_1].mode = CONF_DEF_AO1_MODE;
 8008b1e:	4a89      	ldr	r2, [pc, #548]	; (8008d44 <UpdateSettings+0x694>)
 8008b20:	f641 6357 	movw	r3, #7767	; 0x1e57
 8008b24:	4413      	add	r3, r2
 8008b26:	2201      	movs	r2, #1
 8008b28:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_1].mode = value;
				}
				break;
 8008b2a:	f000 bcf8 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_1].mode = value;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	b2d9      	uxtb	r1, r3
 8008b32:	4a84      	ldr	r2, [pc, #528]	; (8008d44 <UpdateSettings+0x694>)
 8008b34:	f641 6357 	movw	r3, #7767	; 0x1e57
 8008b38:	4413      	add	r3, r2
 8008b3a:	460a      	mov	r2, r1
 8008b3c:	701a      	strb	r2, [r3, #0]
				break;
 8008b3e:	f000 bcee 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_AO1_SRC:
//				gVar.ao[AO_1].source = (AO_InpSrc)FSExt_ReadIntNum(address);
				if(!AO_IsValidInpSrc(value)){
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7f8 f9d4 	bl	8000ef4 <AO_IsValidInpSrc>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d107      	bne.n	8008b62 <UpdateSettings+0x4b2>
					gVar.ao[AO_1].source = CONF_DEF_AO1_SRC;
 8008b52:	4a7c      	ldr	r2, [pc, #496]	; (8008d44 <UpdateSettings+0x694>)
 8008b54:	f641 6356 	movw	r3, #7766	; 0x1e56
 8008b58:	4413      	add	r3, r2
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_1].source = value;
				}
				break;
 8008b5e:	f000 bcde 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_1].source = value;
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	b2d9      	uxtb	r1, r3
 8008b66:	4a77      	ldr	r2, [pc, #476]	; (8008d44 <UpdateSettings+0x694>)
 8008b68:	f641 6356 	movw	r3, #7766	; 0x1e56
 8008b6c:	4413      	add	r3, r2
 8008b6e:	460a      	mov	r2, r1
 8008b70:	701a      	strb	r2, [r3, #0]
				break;
 8008b72:	f000 bcd4 	b.w	800951e <UpdateSettings+0xe6e>
//				}
//				break;

				//Analog outputs 2
			case SA_AO2_ENABLE:
				if(!(value == 0 || value == 1)){
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <UpdateSettings+0x4e2>
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d007      	beq.n	8008b92 <UpdateSettings+0x4e2>
					gVar.ao[AO_2].enabled = CONF_DEF_AO2_ENABLE;
 8008b82:	4a70      	ldr	r2, [pc, #448]	; (8008d44 <UpdateSettings+0x694>)
 8008b84:	f641 6381 	movw	r3, #7809	; 0x1e81
 8008b88:	4413      	add	r3, r2
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_2].enabled = value>0;
				}
				break;
 8008b8e:	f000 bcc6 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_2].enabled = value>0;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bf14      	ite	ne
 8008b98:	2301      	movne	r3, #1
 8008b9a:	2300      	moveq	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4a68      	ldr	r2, [pc, #416]	; (8008d44 <UpdateSettings+0x694>)
 8008ba2:	f641 6381 	movw	r3, #7809	; 0x1e81
 8008ba6:	4413      	add	r3, r2
 8008ba8:	460a      	mov	r2, r1
 8008baa:	701a      	strb	r2, [r3, #0]
				break;
 8008bac:	f000 bcb7 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_AO2_MODE:
//				gVar.ao[AO_2].mode = (AIO_Mode)FSExt_ReadIntNum(address);
				if(!AIO_IsValidMode(value)){
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7f8 fac7 	bl	8001148 <AIO_IsValidMode>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d107      	bne.n	8008bd0 <UpdateSettings+0x520>
					gVar.ao[AO_2].mode = CONF_DEF_AO2_MODE;
 8008bc0:	4a60      	ldr	r2, [pc, #384]	; (8008d44 <UpdateSettings+0x694>)
 8008bc2:	f641 6383 	movw	r3, #7811	; 0x1e83
 8008bc6:	4413      	add	r3, r2
 8008bc8:	2201      	movs	r2, #1
 8008bca:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_2].mode = value;
				}
				break;
 8008bcc:	f000 bca7 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_2].mode = value;
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	b2d9      	uxtb	r1, r3
 8008bd4:	4a5b      	ldr	r2, [pc, #364]	; (8008d44 <UpdateSettings+0x694>)
 8008bd6:	f641 6383 	movw	r3, #7811	; 0x1e83
 8008bda:	4413      	add	r3, r2
 8008bdc:	460a      	mov	r2, r1
 8008bde:	701a      	strb	r2, [r3, #0]
				break;
 8008be0:	f000 bc9d 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_AO2_SRC:
				if(!AO_IsValidInpSrc(value)){
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f8 f983 	bl	8000ef4 <AO_IsValidInpSrc>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d107      	bne.n	8008c04 <UpdateSettings+0x554>
					gVar.ao[AO_2].source = CONF_DEF_AO1_SRC;
 8008bf4:	4a53      	ldr	r2, [pc, #332]	; (8008d44 <UpdateSettings+0x694>)
 8008bf6:	f641 6382 	movw	r3, #7810	; 0x1e82
 8008bfa:	4413      	add	r3, r2
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_2].source = value;
				}
				break;
 8008c00:	f000 bc8d 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_2].source = value;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	b2d9      	uxtb	r1, r3
 8008c08:	4a4e      	ldr	r2, [pc, #312]	; (8008d44 <UpdateSettings+0x694>)
 8008c0a:	f641 6382 	movw	r3, #7810	; 0x1e82
 8008c0e:	4413      	add	r3, r2
 8008c10:	460a      	mov	r2, r1
 8008c12:	701a      	strb	r2, [r3, #0]
				break;
 8008c14:	f000 bc83 	b.w	800951e <UpdateSettings+0xe6e>
//				}
//				break;

				//Analog outputs 3
			case SA_AO3_ENABLE:
				if(!(value == 0 || value == 1)){
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <UpdateSettings+0x584>
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d007      	beq.n	8008c34 <UpdateSettings+0x584>
					gVar.ao[AO_3].enabled = CONF_DEF_AO3_ENABLE;
 8008c24:	4a47      	ldr	r2, [pc, #284]	; (8008d44 <UpdateSettings+0x694>)
 8008c26:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8008c2a:	4413      	add	r3, r2
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_3].enabled = value>0;
				}
				break;
 8008c30:	f000 bc75 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_3].enabled = value>0;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bf14      	ite	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	2300      	moveq	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	4619      	mov	r1, r3
 8008c42:	4a40      	ldr	r2, [pc, #256]	; (8008d44 <UpdateSettings+0x694>)
 8008c44:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8008c48:	4413      	add	r3, r2
 8008c4a:	460a      	mov	r2, r1
 8008c4c:	701a      	strb	r2, [r3, #0]
				break;
 8008c4e:	f000 bc66 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_AO3_MODE:
//				gVar.ao[AO_3].mode = (AIO_Mode)FSExt_ReadIntNum(address);
				if(!AIO_IsValidMode(value)){
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7f8 fa76 	bl	8001148 <AIO_IsValidMode>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d107      	bne.n	8008c72 <UpdateSettings+0x5c2>
					gVar.ao[AO_3].mode = CONF_DEF_AO3_MODE;
 8008c62:	4a38      	ldr	r2, [pc, #224]	; (8008d44 <UpdateSettings+0x694>)
 8008c64:	f641 63af 	movw	r3, #7855	; 0x1eaf
 8008c68:	4413      	add	r3, r2
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_3].mode = value;
				}
				break;
 8008c6e:	f000 bc56 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_3].mode = value;
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	b2d9      	uxtb	r1, r3
 8008c76:	4a33      	ldr	r2, [pc, #204]	; (8008d44 <UpdateSettings+0x694>)
 8008c78:	f641 63af 	movw	r3, #7855	; 0x1eaf
 8008c7c:	4413      	add	r3, r2
 8008c7e:	460a      	mov	r2, r1
 8008c80:	701a      	strb	r2, [r3, #0]
				break;
 8008c82:	f000 bc4c 	b.w	800951e <UpdateSettings+0xe6e>
//				}
//				break;

				//Analog outputs 4
			case SA_AO4_ENABLE:
				if(!(value == 0 || value == 1)){
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00a      	beq.n	8008ca2 <UpdateSettings+0x5f2>
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d007      	beq.n	8008ca2 <UpdateSettings+0x5f2>
					gVar.ao[AO_4].enabled = CONF_DEF_AO4_ENABLE;
 8008c92:	4a2c      	ldr	r2, [pc, #176]	; (8008d44 <UpdateSettings+0x694>)
 8008c94:	f641 63d9 	movw	r3, #7897	; 0x1ed9
 8008c98:	4413      	add	r3, r2
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_4].enabled = value>0;
				}
				break;
 8008c9e:	f000 bc3e 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_4].enabled = value>0;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bf14      	ite	ne
 8008ca8:	2301      	movne	r3, #1
 8008caa:	2300      	moveq	r3, #0
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4a24      	ldr	r2, [pc, #144]	; (8008d44 <UpdateSettings+0x694>)
 8008cb2:	f641 63d9 	movw	r3, #7897	; 0x1ed9
 8008cb6:	4413      	add	r3, r2
 8008cb8:	460a      	mov	r2, r1
 8008cba:	701a      	strb	r2, [r3, #0]
				break;
 8008cbc:	f000 bc2f 	b.w	800951e <UpdateSettings+0xe6e>
			case SA_AO4_MODE:
//				gVar.ao[AO_4].mode = (AIO_Mode)FSExt_ReadIntNum(address);
				if(!AIO_IsValidMode(value)){
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7f8 fa3f 	bl	8001148 <AIO_IsValidMode>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d107      	bne.n	8008ce0 <UpdateSettings+0x630>
					gVar.ao[AO_4].mode = CONF_DEF_AO4_MODE;
 8008cd0:	4a1c      	ldr	r2, [pc, #112]	; (8008d44 <UpdateSettings+0x694>)
 8008cd2:	f641 63db 	movw	r3, #7899	; 0x1edb
 8008cd6:	4413      	add	r3, r2
 8008cd8:	2201      	movs	r2, #1
 8008cda:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.ao[AO_4].mode = value;
				}
				break;
 8008cdc:	f000 bc1f 	b.w	800951e <UpdateSettings+0xe6e>
					gVar.ao[AO_4].mode = value;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	b2d9      	uxtb	r1, r3
 8008ce4:	4a17      	ldr	r2, [pc, #92]	; (8008d44 <UpdateSettings+0x694>)
 8008ce6:	f641 63db 	movw	r3, #7899	; 0x1edb
 8008cea:	4413      	add	r3, r2
 8008cec:	460a      	mov	r2, r1
 8008cee:	701a      	strb	r2, [r3, #0]
				break;
 8008cf0:	f000 bc15 	b.w	800951e <UpdateSettings+0xe6e>
//				break;

				/*Net Information------------*/
				//Device MAC
			case SA_DEV_MAC_1:		// read all mac byte from the memory
				for( uint8_t i = 0;i < 6;i++){
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008cfa:	e035      	b.n	8008d68 <UpdateSettings+0x6b8>

					 value = FSExt_ReadIntNum(address+i);
 8008cfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d04:	4413      	add	r3, r2
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fb fe77 	bl	80049fc <FSExt_ReadIntNum>
 8008d0e:	61f8      	str	r0, [r7, #28]

					if(!(value >= 0 && value <= DEF_U8_MAX_VALUE)){
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	2bff      	cmp	r3, #255	; 0xff
 8008d14:	d91a      	bls.n	8008d4c <UpdateSettings+0x69c>
						uint8_t data[6] = CONF_DEF_NETINFO_MAC;
 8008d16:	4a0c      	ldr	r2, [pc, #48]	; (8008d48 <UpdateSettings+0x698>)
 8008d18:	f107 0314 	add.w	r3, r7, #20
 8008d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d20:	6018      	str	r0, [r3, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	8019      	strh	r1, [r3, #0]
						gVar.w5500Chip.netInfo.mac[i] = data[i];
 8008d26:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008d2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008d2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008d32:	440a      	add	r2, r1
 8008d34:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8008d38:	4a02      	ldr	r2, [pc, #8]	; (8008d44 <UpdateSettings+0x694>)
 8008d3a:	4413      	add	r3, r2
 8008d3c:	460a      	mov	r2, r1
 8008d3e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8008d42:	e00c      	b.n	8008d5e <UpdateSettings+0x6ae>
 8008d44:	24002050 	.word	0x24002050
 8008d48:	0802a650 	.word	0x0802a650
					}else{
						gVar.w5500Chip.netInfo.mac[i] = (uint8_t)value;// (uint8_t)FSExt_ReadIntNum(address+i);
 8008d4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008d50:	69fa      	ldr	r2, [r7, #28]
 8008d52:	b2d1      	uxtb	r1, r2
 8008d54:	4ab9      	ldr	r2, [pc, #740]	; (800903c <UpdateSettings+0x98c>)
 8008d56:	4413      	add	r3, r2
 8008d58:	460a      	mov	r2, r1
 8008d5a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				for( uint8_t i = 0;i < 6;i++){
 8008d5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008d62:	3301      	adds	r3, #1
 8008d64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008d68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008d6c:	2b05      	cmp	r3, #5
 8008d6e:	d9c5      	bls.n	8008cfc <UpdateSettings+0x64c>
					}
				}
				address = SA_DEV_MAC_6;
 8008d70:	2312      	movs	r3, #18
 8008d72:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 8008d74:	e3d3      	b.n	800951e <UpdateSettings+0xe6e>
				//Device IP address
			case SA_DEV_IP_1:		// read all mac byte from the memory
				for( uint8_t i = 0;i < 4;i++){
 8008d76:	2300      	movs	r3, #0
 8008d78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008d7c:	e02b      	b.n	8008dd6 <UpdateSettings+0x726>
					value = FSExt_ReadIntNum(address+i);
 8008d7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d86:	4413      	add	r3, r2
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fb fe36 	bl	80049fc <FSExt_ReadIntNum>
 8008d90:	61f8      	str	r0, [r7, #28]
					if(!(value >= 0 && value <= DEF_U8_MAX_VALUE)){
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	2bff      	cmp	r3, #255	; 0xff
 8008d96:	d910      	bls.n	8008dba <UpdateSettings+0x70a>
						uint8_t data[4] = CONF_DEF_NETINFO_IP;
 8008d98:	4ba9      	ldr	r3, [pc, #676]	; (8009040 <UpdateSettings+0x990>)
 8008d9a:	613b      	str	r3, [r7, #16]
						gVar.w5500Chip.netInfo.ip[i] = data[i];
 8008d9c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008da0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008da4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008da8:	440a      	add	r2, r1
 8008daa:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8008dae:	4aa3      	ldr	r2, [pc, #652]	; (800903c <UpdateSettings+0x98c>)
 8008db0:	4413      	add	r3, r2
 8008db2:	460a      	mov	r2, r1
 8008db4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8008db8:	e008      	b.n	8008dcc <UpdateSettings+0x71c>
					}else{
						gVar.w5500Chip.netInfo.ip[i] = (uint8_t)value;
 8008dba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	b2d1      	uxtb	r1, r2
 8008dc2:	4a9e      	ldr	r2, [pc, #632]	; (800903c <UpdateSettings+0x98c>)
 8008dc4:	4413      	add	r3, r2
 8008dc6:	460a      	mov	r2, r1
 8008dc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				for( uint8_t i = 0;i < 4;i++){
 8008dcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008dd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d9cf      	bls.n	8008d7e <UpdateSettings+0x6ce>
					}
				}
				address = SA_DEV_IP_4;
 8008dde:	2316      	movs	r3, #22
 8008de0:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 8008de2:	e39c      	b.n	800951e <UpdateSettings+0xe6e>
				//Device subnet mask
			case SA_DEV_SN_1:		// read all mac byte from the memory
				for( uint8_t i = 0;i < 4;i++){
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dea:	e02c      	b.n	8008e46 <UpdateSettings+0x796>
					value = FSExt_ReadIntNum(address+i);
 8008dec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008df4:	4413      	add	r3, r2
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fb fdff 	bl	80049fc <FSExt_ReadIntNum>
 8008dfe:	61f8      	str	r0, [r7, #28]
					if(!(value >= 0 &&value <= DEF_U8_MAX_VALUE)){
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	2bff      	cmp	r3, #255	; 0xff
 8008e04:	d911      	bls.n	8008e2a <UpdateSettings+0x77a>
						uint8_t data[4] = CONF_DEF_NETINFO_SN;
 8008e06:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008e0a:	60fb      	str	r3, [r7, #12]
						gVar.w5500Chip.netInfo.sn[i] = data[i];
 8008e0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e14:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008e18:	440a      	add	r2, r1
 8008e1a:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8008e1e:	4a87      	ldr	r2, [pc, #540]	; (800903c <UpdateSettings+0x98c>)
 8008e20:	4413      	add	r3, r2
 8008e22:	460a      	mov	r2, r1
 8008e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8008e28:	e008      	b.n	8008e3c <UpdateSettings+0x78c>
					}else{
						gVar.w5500Chip.netInfo.sn[i] = (uint8_t)value;
 8008e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e2e:	69fa      	ldr	r2, [r7, #28]
 8008e30:	b2d1      	uxtb	r1, r2
 8008e32:	4a82      	ldr	r2, [pc, #520]	; (800903c <UpdateSettings+0x98c>)
 8008e34:	4413      	add	r3, r2
 8008e36:	460a      	mov	r2, r1
 8008e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				for( uint8_t i = 0;i < 4;i++){
 8008e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e40:	3301      	adds	r3, #1
 8008e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d9ce      	bls.n	8008dec <UpdateSettings+0x73c>
					}
				}
				address = SA_DEV_SN_4;
 8008e4e:	231a      	movs	r3, #26
 8008e50:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 8008e52:	e364      	b.n	800951e <UpdateSettings+0xe6e>
				//Device gateway
			case SA_DEV_GW_1:		// read all mac byte from the memory
				for( uint8_t i = 0;i < 4;i++){
 8008e54:	2300      	movs	r3, #0
 8008e56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008e5a:	e02b      	b.n	8008eb4 <UpdateSettings+0x804>
					value = FSExt_ReadIntNum(address+i);
 8008e5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e64:	4413      	add	r3, r2
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fb fdc7 	bl	80049fc <FSExt_ReadIntNum>
 8008e6e:	61f8      	str	r0, [r7, #28]
					if(!(value >= 0 && value <= DEF_U8_MAX_VALUE)){
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	2bff      	cmp	r3, #255	; 0xff
 8008e74:	d910      	bls.n	8008e98 <UpdateSettings+0x7e8>
						uint8_t data[4] = CONF_DEF_NETINFO_GW;
 8008e76:	4b73      	ldr	r3, [pc, #460]	; (8009044 <UpdateSettings+0x994>)
 8008e78:	60bb      	str	r3, [r7, #8]
						gVar.w5500Chip.netInfo.gw[i] = data[i];
 8008e7a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008e7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008e82:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008e86:	440a      	add	r2, r1
 8008e88:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8008e8c:	4a6b      	ldr	r2, [pc, #428]	; (800903c <UpdateSettings+0x98c>)
 8008e8e:	4413      	add	r3, r2
 8008e90:	460a      	mov	r2, r1
 8008e92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8008e96:	e008      	b.n	8008eaa <UpdateSettings+0x7fa>
					}else{
						gVar.w5500Chip.netInfo.gw[i] = (uint8_t)value;
 8008e98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	b2d1      	uxtb	r1, r2
 8008ea0:	4a66      	ldr	r2, [pc, #408]	; (800903c <UpdateSettings+0x98c>)
 8008ea2:	4413      	add	r3, r2
 8008ea4:	460a      	mov	r2, r1
 8008ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
				for( uint8_t i = 0;i < 4;i++){
 8008eaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008eae:	3301      	adds	r3, #1
 8008eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008eb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d9cf      	bls.n	8008e5c <UpdateSettings+0x7ac>
					}
				}
				address = SA_DEV_GW_4;
 8008ebc:	231e      	movs	r3, #30
 8008ebe:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 8008ec0:	e32d      	b.n	800951e <UpdateSettings+0xe6e>
//
			case SA_DEV_DNS_1:		// read all mac byte from the memory
				for( uint8_t i = 0;i < 4;i++){
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008ec8:	e02c      	b.n	8008f24 <UpdateSettings+0x874>
					value = FSExt_ReadIntNum(address+i);
 8008eca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ed2:	4413      	add	r3, r2
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fb fd90 	bl	80049fc <FSExt_ReadIntNum>
 8008edc:	61f8      	str	r0, [r7, #28]
					if(!(value >= 0 && value <= DEF_U8_MAX_VALUE)){
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	2bff      	cmp	r3, #255	; 0xff
 8008ee2:	d911      	bls.n	8008f08 <UpdateSettings+0x858>
						uint8_t data[4] = CONF_DEF_NETINFO_DNS;
 8008ee4:	f04f 3308 	mov.w	r3, #134744072	; 0x8080808
 8008ee8:	607b      	str	r3, [r7, #4]
						gVar.w5500Chip.netInfo.dns[i] = data[i];
 8008eea:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008eee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008ef2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008ef6:	440a      	add	r2, r1
 8008ef8:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 8008efc:	4a4f      	ldr	r2, [pc, #316]	; (800903c <UpdateSettings+0x98c>)
 8008efe:	4413      	add	r3, r2
 8008f00:	460a      	mov	r2, r1
 8008f02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8008f06:	e008      	b.n	8008f1a <UpdateSettings+0x86a>
					}else{
						gVar.w5500Chip.netInfo.dns[i] = (uint8_t)value;
 8008f08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008f0c:	69fa      	ldr	r2, [r7, #28]
 8008f0e:	b2d1      	uxtb	r1, r2
 8008f10:	4a4a      	ldr	r2, [pc, #296]	; (800903c <UpdateSettings+0x98c>)
 8008f12:	4413      	add	r3, r2
 8008f14:	460a      	mov	r2, r1
 8008f16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				for( uint8_t i = 0;i < 4;i++){
 8008f1a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008f1e:	3301      	adds	r3, #1
 8008f20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008f24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d9ce      	bls.n	8008eca <UpdateSettings+0x81a>
					}
				}
				address = SA_DEV_DNS_4;
 8008f2c:	2322      	movs	r3, #34	; 0x22
 8008f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 8008f30:	e2f5      	b.n	800951e <UpdateSettings+0xe6e>

				/*NModbus TCP Server------------*/
				//socket - 1 & 2
			case SA_MB_TCPS_SOCK0_SRC_PORT:
//				gVar.server.sock[SOCKET_0].kpAlvTime = (uint8_t)FSExt_ReadIntNum(address);
				if(!(value >= 0 && value <= DEF_U16_MAX_VALUE)){
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f38:	d305      	bcc.n	8008f46 <UpdateSettings+0x896>
					gVar.server.sock[0].srcPort = CONF_DEF_MB_TCPS_SRC_PORT;
 8008f3a:	4b40      	ldr	r3, [pc, #256]	; (800903c <UpdateSettings+0x98c>)
 8008f3c:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8008f40:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
				}else{
					gVar.server.sock[0].srcPort = (uint16_t)value;
				}
				break;
 8008f44:	e2eb      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.server.sock[0].srcPort = (uint16_t)value;
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	4b3c      	ldr	r3, [pc, #240]	; (800903c <UpdateSettings+0x98c>)
 8008f4c:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
				break;
 8008f50:	e2e5      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_TCPS_SOCK0_KPALV_TIM:
//				gVar.server.sock[SOCKET_0].kpAlvTime = (uint8_t)FSExt_ReadIntNum(address);
				if(!(value >= 0 && value <= DEF_U8_MAX_VALUE)){
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2bff      	cmp	r3, #255	; 0xff
 8008f56:	d904      	bls.n	8008f62 <UpdateSettings+0x8b2>
					gVar.server.sock[0].kpAlvTime = CONF_DEF_MB_TCP_KPALVTR;
 8008f58:	4b38      	ldr	r3, [pc, #224]	; (800903c <UpdateSettings+0x98c>)
 8008f5a:	220f      	movs	r2, #15
 8008f5c:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
				}else{
					gVar.server.sock[0].kpAlvTime = (uint16_t)value;
				}
				break;
 8008f60:	e2dd      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.server.sock[0].kpAlvTime = (uint16_t)value;
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	4b35      	ldr	r3, [pc, #212]	; (800903c <UpdateSettings+0x98c>)
 8008f68:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
				break;
 8008f6c:	e2d7      	b.n	800951e <UpdateSettings+0xe6e>
//				}
//				break;

				/*NModbus TCP Client------------*/
			case SA_MB_TCPC_DEST_IP_1:		// read all mac byte from the memory
				for( uint8_t i = 0;i < 4;i++){
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f887 3020 	strb.w	r3, [r7, #32]
 8008f74:	e02b      	b.n	8008fce <UpdateSettings+0x91e>
					value = FSExt_ReadIntNum(address+i);
 8008f76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f7e:	4413      	add	r3, r2
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fb fd3a 	bl	80049fc <FSExt_ReadIntNum>
 8008f88:	61f8      	str	r0, [r7, #28]
					if(!(value >= 0 && value <= DEF_U8_MAX_VALUE)){
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	2bff      	cmp	r3, #255	; 0xff
 8008f8e:	d910      	bls.n	8008fb2 <UpdateSettings+0x902>
						uint8_t data[4] = CONF_DEF_MB_TCPC_DEST_IP;
 8008f90:	4b2c      	ldr	r3, [pc, #176]	; (8009044 <UpdateSettings+0x994>)
 8008f92:	603b      	str	r3, [r7, #0]
						gVar.client.sock[0].destIP[i] = data[i];
 8008f94:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008f98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008fa0:	440a      	add	r2, r1
 8008fa2:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8008fa6:	4a25      	ldr	r2, [pc, #148]	; (800903c <UpdateSettings+0x98c>)
 8008fa8:	4413      	add	r3, r2
 8008faa:	460a      	mov	r2, r1
 8008fac:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8008fb0:	e008      	b.n	8008fc4 <UpdateSettings+0x914>
					}else{
						gVar.client.sock[0].destIP[i] = (uint8_t)value;
 8008fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	b2d1      	uxtb	r1, r2
 8008fba:	4a20      	ldr	r2, [pc, #128]	; (800903c <UpdateSettings+0x98c>)
 8008fbc:	4413      	add	r3, r2
 8008fbe:	460a      	mov	r2, r1
 8008fc0:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
				for( uint8_t i = 0;i < 4;i++){
 8008fc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	f887 3020 	strb.w	r3, [r7, #32]
 8008fce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d9cf      	bls.n	8008f76 <UpdateSettings+0x8c6>
					}
				}
				address = SA_MB_TCPC_DEST_IP_4;
 8008fd6:	232a      	movs	r3, #42	; 0x2a
 8008fd8:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 8008fda:	e2a0      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_TCPC_DEST_PORT:
//				gVar.server.sock[SOCKET_0].kpAlvTime = (uint8_t)FSExt_ReadIntNum(address);
				if(!(value >= 0 && value <= DEF_U16_MAX_VALUE)){
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fe2:	d305      	bcc.n	8008ff0 <UpdateSettings+0x940>
					gVar.client.sock[0].destPort = CONF_DEF_MB_TCPC_DEST_PORT;
 8008fe4:	4b15      	ldr	r3, [pc, #84]	; (800903c <UpdateSettings+0x98c>)
 8008fe6:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8008fea:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670
				}else{
					gVar.client.sock[0].destPort = (uint16_t)value;
				}
				break;
 8008fee:	e296      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.client.sock[0].destPort = (uint16_t)value;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <UpdateSettings+0x98c>)
 8008ff6:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670
				break;
 8008ffa:	e290      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_TCPC_SOCK_KPALV_TIM:
//				gVar.server.sock[SOCKET_0].kpAlvTime = (uint8_t)FSExt_ReadIntNum(address);
				if(!(value >= 0 && value <= DEF_U8_MAX_VALUE)){
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	2bff      	cmp	r3, #255	; 0xff
 8009000:	d904      	bls.n	800900c <UpdateSettings+0x95c>
					gVar.client.sock[0].kpAlvTime = CONF_DEF_MB_TCP_KPALVTR;
 8009002:	4b0e      	ldr	r3, [pc, #56]	; (800903c <UpdateSettings+0x98c>)
 8009004:	220f      	movs	r2, #15
 8009006:	f8a3 266c 	strh.w	r2, [r3, #1644]	; 0x66c
				}else{
					gVar.client.sock[0].kpAlvTime = (uint16_t)value;
				}
				break;
 800900a:	e288      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.client.sock[0].kpAlvTime = (uint16_t)value;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	b29a      	uxth	r2, r3
 8009010:	4b0a      	ldr	r3, [pc, #40]	; (800903c <UpdateSettings+0x98c>)
 8009012:	f8a3 266c 	strh.w	r2, [r3, #1644]	; 0x66c
				break;
 8009016:	e282      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_TCPC_SOCK_CONN_MODE:
				if(!(value == SOCK_CONN_MODE_AUTO || value == SOCK_CONN_MODE_MANUAL)){
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <UpdateSettings+0x97e>
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d004      	beq.n	800902e <UpdateSettings+0x97e>
					gVar.client.sock[0].connectMode = CONF_DEF_MB_TCPC_CONN_MODE;
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <UpdateSettings+0x98c>)
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386

				}else{
					gVar.client.sock[0].connectMode = value;
				}
				break;
 800902c:	e277      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.client.sock[0].connectMode = value;
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	b2da      	uxtb	r2, r3
 8009032:	4b02      	ldr	r3, [pc, #8]	; (800903c <UpdateSettings+0x98c>)
 8009034:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
				break;
 8009038:	e271      	b.n	800951e <UpdateSettings+0xe6e>
 800903a:	bf00      	nop
 800903c:	24002050 	.word	0x24002050
 8009040:	6400c80b 	.word	0x6400c80b
 8009044:	0b00c80b 	.word	0x0b00c80b

			case SA_MB_TCPC_TX_TIM_INTRVAL:
				if(!(value > 0 && value <= CONF_DEF_MB_TCPC_TX_TIM_INTERVAL_MAX)){
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d004      	beq.n	8009058 <UpdateSettings+0x9a8>
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009054:	4293      	cmp	r3, r2
 8009056:	d906      	bls.n	8009066 <UpdateSettings+0x9b6>
					gVar.mbTCPClient.txTimIntrvl = CONF_DEF_MB_TCPC_TX_TIM_INTRVL;
 8009058:	4aa6      	ldr	r2, [pc, #664]	; (80092f4 <UpdateSettings+0xc44>)
 800905a:	f641 1338 	movw	r3, #6456	; 0x1938
 800905e:	4413      	add	r3, r2
 8009060:	2205      	movs	r2, #5
 8009062:	601a      	str	r2, [r3, #0]

				}else{
					gVar.mbTCPClient.txTimIntrvl = value;
				}
				break;
 8009064:	e25b      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.mbTCPClient.txTimIntrvl = value;
 8009066:	4aa3      	ldr	r2, [pc, #652]	; (80092f4 <UpdateSettings+0xc44>)
 8009068:	f641 1338 	movw	r3, #6456	; 0x1938
 800906c:	4413      	add	r3, r2
 800906e:	69fa      	ldr	r2, [r7, #28]
 8009070:	601a      	str	r2, [r3, #0]
				break;
 8009072:	e254      	b.n	800951e <UpdateSettings+0xe6e>

				/*NModbus RTU Serial------------*/
			case SA_MB_SERIAL_CONFIG:
				gVar.mbSerial.serialConfigValue = value;											// it will decode the encoded serial config value
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	b29a      	uxth	r2, r3
 8009078:	4b9e      	ldr	r3, [pc, #632]	; (80092f4 <UpdateSettings+0xc44>)
 800907a:	f8a3 268e 	strh.w	r2, [r3, #1678]	; 0x68e
				// if the any parameter is not valid, it will reset to default serial config value 0x1821 (ref: OD_Config.h)
				if(MBS_CheckSerialConfigValidity(&gVar.mbSerial) == MB_ERROR){
 800907e:	489e      	ldr	r0, [pc, #632]	; (80092f8 <UpdateSettings+0xc48>)
 8009080:	f009 fa9c 	bl	80125bc <MBS_CheckSerialConfigValidity>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	f040 8248 	bne.w	800951c <UpdateSettings+0xe6c>
					gVar.mbSerial.serialConfigValue = CONF_DEF_MB_SERIAL_CONFIG;
 800908c:	4b99      	ldr	r3, [pc, #612]	; (80092f4 <UpdateSettings+0xc44>)
 800908e:	f64c 0221 	movw	r2, #51233	; 0xc821
 8009092:	f8a3 268e 	strh.w	r2, [r3, #1678]	; 0x68e
				}
				break;
 8009096:	e241      	b.n	800951c <UpdateSettings+0xe6c>
			case SA_MB_SERIAl_BAUD_RATE_USER_DEF:
				if(!(value > 0 && value < DEF_U32_MAX_VALUE)){
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <UpdateSettings+0x9f6>
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a4:	d104      	bne.n	80090b0 <UpdateSettings+0xa00>
					MBS_SetBaudRateUserDef(CONF_DEF_MB_SERIAL_BR_USER);
 80090a6:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80090aa:	f009 fab5 	bl	8012618 <MBS_SetBaudRateUserDef>
				}else{
					MBS_SetBaudRateUserDef(value);
				}
				break;
 80090ae:	e236      	b.n	800951e <UpdateSettings+0xe6e>
					MBS_SetBaudRateUserDef(value);
 80090b0:	69f8      	ldr	r0, [r7, #28]
 80090b2:	f009 fab1 	bl	8012618 <MBS_SetBaudRateUserDef>
				break;
 80090b6:	e232      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_SERIAl_PROTOCOL:
				if(!MBS_CheckProtocol(value)){
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d904      	bls.n	80090c8 <UpdateSettings+0xa18>
					gVar.mbSerial.protocol = CONF_DEF_MB_SERIAL_PROTOCOL;
 80090be:	4b8d      	ldr	r3, [pc, #564]	; (80092f4 <UpdateSettings+0xc44>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 80090c6:	e004      	b.n	80090d2 <UpdateSettings+0xa22>
				}else{
					gVar.mbSerial.protocol = value;
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	4b89      	ldr	r3, [pc, #548]	; (80092f4 <UpdateSettings+0xc44>)
 80090ce:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
				}
				gVar.mbSerial.protocolTemp = gVar.mbSerial.protocol;
 80090d2:	4b88      	ldr	r3, [pc, #544]	; (80092f4 <UpdateSettings+0xc44>)
 80090d4:	f893 2689 	ldrb.w	r2, [r3, #1673]	; 0x689
 80090d8:	4b86      	ldr	r3, [pc, #536]	; (80092f4 <UpdateSettings+0xc44>)
 80090da:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
				break;
 80090de:	e21e      	b.n	800951e <UpdateSettings+0xe6e>

				/*Modbus Master---------------*/
			case SA_MB_MSTR_ENABLE:
				if(!(value == 0 || value ==1 )){
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <UpdateSettings+0xa46>
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d004      	beq.n	80090f6 <UpdateSettings+0xa46>
					gVar.mbRTUMaster.enable = CONF_DEF_MBRTUM_ENABLE;
 80090ec:	4b81      	ldr	r3, [pc, #516]	; (80092f4 <UpdateSettings+0xc44>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
				}else{
					gVar.mbRTUMaster.enable = value;
				}
				break;
 80090f4:	e213      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.mbRTUMaster.enable = value;
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	4b7e      	ldr	r3, [pc, #504]	; (80092f4 <UpdateSettings+0xc44>)
 80090fc:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
				break;
 8009100:	e20d      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_MSTR_SLV_START_ADDR:
//				DBG_SPRINT_NL("SLSA: %d", value);
				if(!(value > 0 && value <= MB_SLAVE_ADDR_MAX )){
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <UpdateSettings+0xa5e>
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	2bf7      	cmp	r3, #247	; 0xf7
 800910c:	d908      	bls.n	8009120 <UpdateSettings+0xa70>
					gVar.mbRTUMaster.custom.slvStartAddr = CONF_DEF_MBRTUM_CUST_SLV_START_ADDR;
 800910e:	4b79      	ldr	r3, [pc, #484]	; (80092f4 <UpdateSettings+0xc44>)
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
					FSExt_WriteIntNum(SA_MB_MSTR_SLV_START_ADDR, value);
 8009116:	69f9      	ldr	r1, [r7, #28]
 8009118:	2033      	movs	r0, #51	; 0x33
 800911a:	f7fb fc59 	bl	80049d0 <FSExt_WriteIntNum>
				}else{
					gVar.mbRTUMaster.custom.slvStartAddr = value;
				}


				break;
 800911e:	e1fe      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.mbRTUMaster.custom.slvStartAddr = value;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	b2da      	uxtb	r2, r3
 8009124:	4b73      	ldr	r3, [pc, #460]	; (80092f4 <UpdateSettings+0xc44>)
 8009126:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
				break;
 800912a:	e1f8      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_MSTR_NUM_OF_SLAVE:
//				DBG_SPRINT_NL("NSA: %d", value);
				if(!(value >= 0 && value <= MB_CUST_NUM_OF_SLAVE_MAX )){
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	2b18      	cmp	r3, #24
 8009130:	d908      	bls.n	8009144 <UpdateSettings+0xa94>
					gVar.mbRTUMaster.custom.numOfSlv = CONF_DEF_MBRTUM_CUST_NUM_OF_SLV;
 8009132:	4b70      	ldr	r3, [pc, #448]	; (80092f4 <UpdateSettings+0xc44>)
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
					FSExt_WriteIntNum(SA_MB_MSTR_NUM_OF_SLAVE, value);
 800913a:	69f9      	ldr	r1, [r7, #28]
 800913c:	2034      	movs	r0, #52	; 0x34
 800913e:	f7fb fc47 	bl	80049d0 <FSExt_WriteIntNum>
				}else{
					gVar.mbRTUMaster.custom.numOfSlv = value;
				}
				break;
 8009142:	e1ec      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.mbRTUMaster.custom.numOfSlv = value;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	b2da      	uxtb	r2, r3
 8009148:	4b6a      	ldr	r3, [pc, #424]	; (80092f4 <UpdateSettings+0xc44>)
 800914a:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
				break;
 800914e:	e1e6      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_MSTR_REPLY_TIMEOUT:
//				DBG_SPRINT_NL("RT: %d", value);
				if(!(value > 0  && value <= CONF_DEF_MBGW_TIMEOUT_MAX )){
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <UpdateSettings+0xaae>
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4a68      	ldr	r2, [pc, #416]	; (80092fc <UpdateSettings+0xc4c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d909      	bls.n	8009172 <UpdateSettings+0xac2>
					gVar.mbRTUMaster.replyTimer.timeout = CONF_DEF_MBRTUM_CUST_REPLAY_TIMEOUT;
 800915e:	4b65      	ldr	r3, [pc, #404]	; (80092f4 <UpdateSettings+0xc44>)
 8009160:	f241 7270 	movw	r2, #6000	; 0x1770
 8009164:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
					FSExt_WriteIntNum(SA_MB_MSTR_REPLY_TIMEOUT, value);
 8009168:	69f9      	ldr	r1, [r7, #28]
 800916a:	2035      	movs	r0, #53	; 0x35
 800916c:	f7fb fc30 	bl	80049d0 <FSExt_WriteIntNum>
				}else{
					gVar.mbRTUMaster.replyTimer.timeout = value;
				}
				break;
 8009170:	e1d5      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.mbRTUMaster.replyTimer.timeout = value;
 8009172:	4a60      	ldr	r2, [pc, #384]	; (80092f4 <UpdateSettings+0xc44>)
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f8c2 3960 	str.w	r3, [r2, #2400]	; 0x960
				break;
 800917a:	e1d0      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_MSTR_PERIODIC_REQ_INTERVAL:
//				DBG_SPRINT_NL("PI: %d", value);
//				gVar.mbRTUSlave.slave_address = (uint8_t)FSExt_ReadIntNum(address);
				if(!(value > 0  && value <= CONF_DEF_MBRTUM_PREIODIC_REQ_TIMEOUT_MAX )){
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <UpdateSettings+0xada>
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4a5d      	ldr	r2, [pc, #372]	; (80092fc <UpdateSettings+0xc4c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d909      	bls.n	800919e <UpdateSettings+0xaee>
					gVar.mbRTUMaster.custom.reTransTimer.timeout = CONF_DEF_MBRTUM_CUST_PREIODIC_REQ_INTERVAL;
 800918a:	4b5a      	ldr	r3, [pc, #360]	; (80092f4 <UpdateSettings+0xc44>)
 800918c:	f244 2268 	movw	r2, #17000	; 0x4268
 8009190:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
					FSExt_WriteIntNum(SA_MB_MSTR_PERIODIC_REQ_INTERVAL, value);
 8009194:	69f9      	ldr	r1, [r7, #28]
 8009196:	2036      	movs	r0, #54	; 0x36
 8009198:	f7fb fc1a 	bl	80049d0 <FSExt_WriteIntNum>
				}else{
					gVar.mbRTUMaster.custom.reTransTimer.timeout = value;
				}
				break;
 800919c:	e1bf      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.mbRTUMaster.custom.reTransTimer.timeout = value;
 800919e:	4a55      	ldr	r2, [pc, #340]	; (80092f4 <UpdateSettings+0xc44>)
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	f8c2 3988 	str.w	r3, [r2, #2440]	; 0x988
				break;
 80091a6:	e1ba      	b.n	800951e <UpdateSettings+0xe6e>
				/*NModbus RTU Slave------------*/
			case SA_SLAVE_ADDRESS:
//				gVar.mbRTUSlave.slave_address = (uint8_t)FSExt_ReadIntNum(address);
				if(!(value > MB_BROADCAST_ADDR && value <= MB_SLAVE_ADDR_MAX)){
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <UpdateSettings+0xb04>
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	2bf7      	cmp	r3, #247	; 0xf7
 80091b2:	d904      	bls.n	80091be <UpdateSettings+0xb0e>
					gVar.mbRTUSlave.slave_address = CONF_DEF_MBRTUS_SLAVE_ADDRESS;
 80091b4:	4b4f      	ldr	r3, [pc, #316]	; (80092f4 <UpdateSettings+0xc44>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 80091bc:	e004      	b.n	80091c8 <UpdateSettings+0xb18>
				}else{
					gVar.mbRTUSlave.slave_address = value;
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	4b4c      	ldr	r3, [pc, #304]	; (80092f4 <UpdateSettings+0xc44>)
 80091c4:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
				}
				gVar.slvAddrTemp = gVar.mbRTUSlave.slave_address;
 80091c8:	4b4a      	ldr	r3, [pc, #296]	; (80092f4 <UpdateSettings+0xc44>)
 80091ca:	f893 28c8 	ldrb.w	r2, [r3, #2248]	; 0x8c8
 80091ce:	4b49      	ldr	r3, [pc, #292]	; (80092f4 <UpdateSettings+0xc44>)
 80091d0:	729a      	strb	r2, [r3, #10]
				break;
 80091d2:	e1a4      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_MB_SLAVE_CUST_RESP_TIMEOUT:
//				gVar.mbRTUSlave.slave_address = (uint8_t)FSExt_ReadIntNum(address);
				if(!(value > 0 && value <= CONF_DEF_MBRTUS_CUST_RESP_TIMEOUT_MAX)){
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <UpdateSettings+0xb32>
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4a47      	ldr	r2, [pc, #284]	; (80092fc <UpdateSettings+0xc4c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d905      	bls.n	80091ee <UpdateSettings+0xb3e>
					gVar.mbRTUSlave.custom.waitingTimer.timeout = CONF_DEF_MBRTUS_CUST_WAITING_TIMEOUT;
 80091e2:	4b44      	ldr	r3, [pc, #272]	; (80092f4 <UpdateSettings+0xc44>)
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
				}else{
					gVar.mbRTUSlave.custom.waitingTimer.timeout = value;
				}

				break;
 80091ec:	e197      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.mbRTUSlave.custom.waitingTimer.timeout = value;
 80091ee:	4a41      	ldr	r2, [pc, #260]	; (80092f4 <UpdateSettings+0xc44>)
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
				break;
 80091f6:	e192      	b.n	800951e <UpdateSettings+0xe6e>
				/*NModbus Gateway------------*/
			case SA_MB_GW_TIMEOUT:

				if(!(value > 0  && value <= CONF_DEF_MBGW_TIMEOUT_MAX )){
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <UpdateSettings+0xb56>
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4a3e      	ldr	r2, [pc, #248]	; (80092fc <UpdateSettings+0xc4c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d90e      	bls.n	8009224 <UpdateSettings+0xb74>
					gVar.mbGateway.rplyTimer.timeout = CONF_DEF_MBGW_TIMEOUT;
 8009206:	4a3b      	ldr	r2, [pc, #236]	; (80092f4 <UpdateSettings+0xc44>)
 8009208:	f641 1368 	movw	r3, #6504	; 0x1968
 800920c:	4413      	add	r3, r2
 800920e:	f247 5230 	movw	r2, #30000	; 0x7530
 8009212:	601a      	str	r2, [r3, #0]

					gVar.mbGateway.rplyTimRglrFC.timeout = CONF_DEF_MBGW_TIMEOUT;
 8009214:	4a37      	ldr	r2, [pc, #220]	; (80092f4 <UpdateSettings+0xc44>)
 8009216:	f641 1388 	movw	r3, #6536	; 0x1988
 800921a:	4413      	add	r3, r2
 800921c:	f247 5230 	movw	r2, #30000	; 0x7530
 8009220:	601a      	str	r2, [r3, #0]
				}else{
					gVar.mbGateway.rplyTimer.timeout = value;
					gVar.mbGateway.rplyTimRglrFC.timeout = value;
				}
				break;
 8009222:	e17c      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.mbGateway.rplyTimer.timeout = value;
 8009224:	4a33      	ldr	r2, [pc, #204]	; (80092f4 <UpdateSettings+0xc44>)
 8009226:	f641 1368 	movw	r3, #6504	; 0x1968
 800922a:	4413      	add	r3, r2
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	601a      	str	r2, [r3, #0]
					gVar.mbGateway.rplyTimRglrFC.timeout = value;
 8009230:	4a30      	ldr	r2, [pc, #192]	; (80092f4 <UpdateSettings+0xc44>)
 8009232:	f641 1388 	movw	r3, #6536	; 0x1988
 8009236:	4413      	add	r3, r2
 8009238:	69fa      	ldr	r2, [r7, #28]
 800923a:	601a      	str	r2, [r3, #0]
				break;
 800923c:	e16f      	b.n	800951e <UpdateSettings+0xe6e>

				/*Utilities----------------*/
			case SA_DEV_MODE:
				if(!(value == DEV_MODE_SLAVE || value == DEV_MODE_MASTER)){
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d006      	beq.n	8009252 <UpdateSettings+0xba2>
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d003      	beq.n	8009252 <UpdateSettings+0xba2>
					gVar.devMode = CONF_DEF_DEV_MODE;
 800924a:	4b2a      	ldr	r3, [pc, #168]	; (80092f4 <UpdateSettings+0xc44>)
 800924c:	2201      	movs	r2, #1
 800924e:	721a      	strb	r2, [r3, #8]
				}else{
					gVar.devMode = value;
				}
				break;
 8009250:	e165      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.devMode = value;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <UpdateSettings+0xc44>)
 8009258:	721a      	strb	r2, [r3, #8]
				break;
 800925a:	e160      	b.n	800951e <UpdateSettings+0xe6e>

				/*Encoder------------*/
			case SA_ENC_ENABLE:
				if(!(value >=0 && value <= 1)){
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d906      	bls.n	8009270 <UpdateSettings+0xbc0>
					gVar.dio.enc.enable = CONF_DEF_ENC_DISABLE;
 8009262:	4a24      	ldr	r2, [pc, #144]	; (80092f4 <UpdateSettings+0xc44>)
 8009264:	f242 4344 	movw	r3, #9284	; 0x2444
 8009268:	4413      	add	r3, r2
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.enc.enable = value;
				}
				break;
 800926e:	e156      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.dio.enc.enable = value;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	b2d9      	uxtb	r1, r3
 8009274:	4a1f      	ldr	r2, [pc, #124]	; (80092f4 <UpdateSettings+0xc44>)
 8009276:	f242 4344 	movw	r3, #9284	; 0x2444
 800927a:	4413      	add	r3, r2
 800927c:	460a      	mov	r2, r1
 800927e:	701a      	strb	r2, [r3, #0]
				break;
 8009280:	e14d      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_ENC_MODE:
				if(!(value >=0 && value < ENC_MODE_MAX)){
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	2b03      	cmp	r3, #3
 8009286:	d906      	bls.n	8009296 <UpdateSettings+0xbe6>
					gVar.dio.enc.configs.mode = CONF_DEF_ENC_MODE;
 8009288:	4a1a      	ldr	r2, [pc, #104]	; (80092f4 <UpdateSettings+0xc44>)
 800928a:	f242 4348 	movw	r3, #9288	; 0x2448
 800928e:	4413      	add	r3, r2
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.enc.configs.mode = value;
				}
				break;
 8009294:	e143      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.dio.enc.configs.mode = value;
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	b2d9      	uxtb	r1, r3
 800929a:	4a16      	ldr	r2, [pc, #88]	; (80092f4 <UpdateSettings+0xc44>)
 800929c:	f242 4348 	movw	r3, #9288	; 0x2448
 80092a0:	4413      	add	r3, r2
 80092a2:	460a      	mov	r2, r1
 80092a4:	701a      	strb	r2, [r3, #0]
				break;
 80092a6:	e13a      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_ENC_QUAD_TRIG_MODE:
				if(!(value == ENC_TRIG_MODE_RISING || value == ENC_TRIG_MODE_FALLING)){
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d009      	beq.n	80092c2 <UpdateSettings+0xc12>
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d006      	beq.n	80092c2 <UpdateSettings+0xc12>
					gVar.dio.enc.configs.quadrature.trigMode = CONF_DEF_ENC_QUAD_TRIG_MODE;
 80092b4:	4a0f      	ldr	r2, [pc, #60]	; (80092f4 <UpdateSettings+0xc44>)
 80092b6:	f242 4374 	movw	r3, #9332	; 0x2474
 80092ba:	4413      	add	r3, r2
 80092bc:	2200      	movs	r2, #0
 80092be:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.enc.configs.quadrature.trigMode  = value;
				}
				break;
 80092c0:	e12d      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.dio.enc.configs.quadrature.trigMode  = value;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	b2d9      	uxtb	r1, r3
 80092c6:	4a0b      	ldr	r2, [pc, #44]	; (80092f4 <UpdateSettings+0xc44>)
 80092c8:	f242 4374 	movw	r3, #9332	; 0x2474
 80092cc:	4413      	add	r3, r2
 80092ce:	460a      	mov	r2, r1
 80092d0:	701a      	strb	r2, [r3, #0]
				break;
 80092d2:	e124      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_ENC_CHA_TRIG_MODE:
				if(!(value == ENC_TRIG_MODE_RISING || value == ENC_TRIG_MODE_FALLING || value == ENC_TRIG_MODE_RISING_FALLING)){
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d012      	beq.n	8009300 <UpdateSettings+0xc50>
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d00f      	beq.n	8009300 <UpdateSettings+0xc50>
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d00c      	beq.n	8009300 <UpdateSettings+0xc50>
					gVar.dio.enc.configs.channelA.trigMode = CONF_DEF_ENC_CHA_TRIG_MODE;
 80092e6:	4a03      	ldr	r2, [pc, #12]	; (80092f4 <UpdateSettings+0xc44>)
 80092e8:	f242 438e 	movw	r3, #9358	; 0x248e
 80092ec:	4413      	add	r3, r2
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.enc.configs.channelA.trigMode  = value;
				}
				break;
 80092f2:	e114      	b.n	800951e <UpdateSettings+0xe6e>
 80092f4:	24002050 	.word	0x24002050
 80092f8:	240026d8 	.word	0x240026d8
 80092fc:	0009fff6 	.word	0x0009fff6
					gVar.dio.enc.configs.channelA.trigMode  = value;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	b2d9      	uxtb	r1, r3
 8009304:	4a8c      	ldr	r2, [pc, #560]	; (8009538 <UpdateSettings+0xe88>)
 8009306:	f242 438e 	movw	r3, #9358	; 0x248e
 800930a:	4413      	add	r3, r2
 800930c:	460a      	mov	r2, r1
 800930e:	701a      	strb	r2, [r3, #0]
				break;
 8009310:	e105      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_ENC_CHB_TRIG_MODE:
				if(!(value == ENC_TRIG_MODE_RISING || value == ENC_TRIG_MODE_FALLING || value == ENC_TRIG_MODE_RISING_FALLING)){
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00c      	beq.n	8009332 <UpdateSettings+0xc82>
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d009      	beq.n	8009332 <UpdateSettings+0xc82>
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d006      	beq.n	8009332 <UpdateSettings+0xc82>
					gVar.dio.enc.configs.channelB.trigMode = CONF_DEF_ENC_CHB_TRIG_MODE;
 8009324:	4a84      	ldr	r2, [pc, #528]	; (8009538 <UpdateSettings+0xe88>)
 8009326:	f242 439a 	movw	r3, #9370	; 0x249a
 800932a:	4413      	add	r3, r2
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
				}else{
					gVar.dio.enc.configs.channelB.trigMode  = value;
				}
				break;
 8009330:	e0f5      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.dio.enc.configs.channelB.trigMode  = value;
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	b2d9      	uxtb	r1, r3
 8009336:	4a80      	ldr	r2, [pc, #512]	; (8009538 <UpdateSettings+0xe88>)
 8009338:	f242 439a 	movw	r3, #9370	; 0x249a
 800933c:	4413      	add	r3, r2
 800933e:	460a      	mov	r2, r1
 8009340:	701a      	strb	r2, [r3, #0]
				break;
 8009342:	e0ec      	b.n	800951e <UpdateSettings+0xe6e>
//			case SA_ENC_CHZ_TRIG_MODE:
//				break;
				/*PID-------------*/
			case SA_PID1_KP:
				if(!(value >=0  && value <= DEF_U16_MAX_VALUE)){
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800934a:	d307      	bcc.n	800935c <UpdateSettings+0xcac>
					gVar.pid1.kp = CONF_DEF_PID1_KP;
 800934c:	4a7a      	ldr	r2, [pc, #488]	; (8009538 <UpdateSettings+0xe88>)
 800934e:	f242 5318 	movw	r3, #9496	; 0x2518
 8009352:	4413      	add	r3, r2
 8009354:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8009358:	601a      	str	r2, [r3, #0]
				}else{
					gVar.pid1.kp = (float)(value/MB_VALUE_MULTIPLIER_100);
				}
				break;
 800935a:	e0e0      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.pid1.kp = (float)(value/MB_VALUE_MULTIPLIER_100);
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009366:	eddf 6a75 	vldr	s13, [pc, #468]	; 800953c <UpdateSettings+0xe8c>
 800936a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800936e:	4a72      	ldr	r2, [pc, #456]	; (8009538 <UpdateSettings+0xe88>)
 8009370:	f242 5318 	movw	r3, #9496	; 0x2518
 8009374:	4413      	add	r3, r2
 8009376:	edc3 7a00 	vstr	s15, [r3]
				break;
 800937a:	e0d0      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_PID1_KI:
				if(!(value >=0  && value <= DEF_U16_MAX_VALUE)){
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009382:	d307      	bcc.n	8009394 <UpdateSettings+0xce4>
					gVar.pid1.ki = CONF_DEF_PID1_KI;
 8009384:	4a6c      	ldr	r2, [pc, #432]	; (8009538 <UpdateSettings+0xe88>)
 8009386:	f242 531c 	movw	r3, #9500	; 0x251c
 800938a:	4413      	add	r3, r2
 800938c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009390:	601a      	str	r2, [r3, #0]
				}else{
					gVar.pid1.ki = (float)(value/MB_VALUE_MULTIPLIER_100);
				}
				break;
 8009392:	e0c4      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.pid1.ki = (float)(value/MB_VALUE_MULTIPLIER_100);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800939e:	eddf 6a67 	vldr	s13, [pc, #412]	; 800953c <UpdateSettings+0xe8c>
 80093a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80093a6:	4a64      	ldr	r2, [pc, #400]	; (8009538 <UpdateSettings+0xe88>)
 80093a8:	f242 531c 	movw	r3, #9500	; 0x251c
 80093ac:	4413      	add	r3, r2
 80093ae:	edc3 7a00 	vstr	s15, [r3]
				break;
 80093b2:	e0b4      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_PID1_KD:
				if(!(value >=0  && value <= DEF_U16_MAX_VALUE)){
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093ba:	d307      	bcc.n	80093cc <UpdateSettings+0xd1c>
					gVar.pid1.kd = CONF_DEF_PID1_KD;
 80093bc:	4a5e      	ldr	r2, [pc, #376]	; (8009538 <UpdateSettings+0xe88>)
 80093be:	f242 5320 	movw	r3, #9504	; 0x2520
 80093c2:	4413      	add	r3, r2
 80093c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093c8:	601a      	str	r2, [r3, #0]
				}else{
					gVar.pid1.kd = (float)(value/MB_VALUE_MULTIPLIER_100);
				}
				break;
 80093ca:	e0a8      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.pid1.kd = (float)(value/MB_VALUE_MULTIPLIER_100);
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093d6:	eddf 6a59 	vldr	s13, [pc, #356]	; 800953c <UpdateSettings+0xe8c>
 80093da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80093de:	4a56      	ldr	r2, [pc, #344]	; (8009538 <UpdateSettings+0xe88>)
 80093e0:	f242 5320 	movw	r3, #9504	; 0x2520
 80093e4:	4413      	add	r3, r2
 80093e6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80093ea:	e098      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_PID1_I_OUT_LIMIT:
				if(!(value >=0  && value <= DEF_U16_MAX_VALUE)){
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f2:	d306      	bcc.n	8009402 <UpdateSettings+0xd52>
					gVar.pid1.output_i_max = CONF_DEF_PID1_I_OUT_MAX;
 80093f4:	4a50      	ldr	r2, [pc, #320]	; (8009538 <UpdateSettings+0xe88>)
 80093f6:	f242 533c 	movw	r3, #9532	; 0x253c
 80093fa:	4413      	add	r3, r2
 80093fc:	4a50      	ldr	r2, [pc, #320]	; (8009540 <UpdateSettings+0xe90>)
 80093fe:	601a      	str	r2, [r3, #0]
				}else{
					gVar.pid1.output_i_max = value;
				}
				break;
 8009400:	e08d      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.pid1.output_i_max = value;
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940c:	4a4a      	ldr	r2, [pc, #296]	; (8009538 <UpdateSettings+0xe88>)
 800940e:	f242 533c 	movw	r3, #9532	; 0x253c
 8009412:	4413      	add	r3, r2
 8009414:	edc3 7a00 	vstr	s15, [r3]
				break;
 8009418:	e081      	b.n	800951e <UpdateSettings+0xe6e>

			case SA_PID2_KP:
				if(!(value >=0  && value <= DEF_U16_MAX_VALUE)){
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009420:	d307      	bcc.n	8009432 <UpdateSettings+0xd82>
					gVar.pid2.kp = CONF_DEF_PID2_KP;
 8009422:	4a45      	ldr	r2, [pc, #276]	; (8009538 <UpdateSettings+0xe88>)
 8009424:	f242 5358 	movw	r3, #9560	; 0x2558
 8009428:	4413      	add	r3, r2
 800942a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800942e:	601a      	str	r2, [r3, #0]
				}else{
					gVar.pid2.kp = (float)(value/MB_VALUE_MULTIPLIER_100);
				}
				break;
 8009430:	e075      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.pid2.kp = (float)(value/MB_VALUE_MULTIPLIER_100);
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	ee07 3a90 	vmov	s15, r3
 8009438:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800943c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800953c <UpdateSettings+0xe8c>
 8009440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009444:	4a3c      	ldr	r2, [pc, #240]	; (8009538 <UpdateSettings+0xe88>)
 8009446:	f242 5358 	movw	r3, #9560	; 0x2558
 800944a:	4413      	add	r3, r2
 800944c:	edc3 7a00 	vstr	s15, [r3]
				break;
 8009450:	e065      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_PID2_KI:
				if(!(value >=0  && value <= DEF_U16_MAX_VALUE)){
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009458:	d307      	bcc.n	800946a <UpdateSettings+0xdba>
					gVar.pid2.ki = CONF_DEF_PID2_KI;
 800945a:	4a37      	ldr	r2, [pc, #220]	; (8009538 <UpdateSettings+0xe88>)
 800945c:	f242 535c 	movw	r3, #9564	; 0x255c
 8009460:	4413      	add	r3, r2
 8009462:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009466:	601a      	str	r2, [r3, #0]
				}else{
					gVar.pid2.ki = (float)(value/MB_VALUE_MULTIPLIER_100);
				}
				break;
 8009468:	e059      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.pid2.ki = (float)(value/MB_VALUE_MULTIPLIER_100);
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	ee07 3a90 	vmov	s15, r3
 8009470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009474:	eddf 6a31 	vldr	s13, [pc, #196]	; 800953c <UpdateSettings+0xe8c>
 8009478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800947c:	4a2e      	ldr	r2, [pc, #184]	; (8009538 <UpdateSettings+0xe88>)
 800947e:	f242 535c 	movw	r3, #9564	; 0x255c
 8009482:	4413      	add	r3, r2
 8009484:	edc3 7a00 	vstr	s15, [r3]
				break;
 8009488:	e049      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_PID2_KD:
				if(!(value >=0  && value <= DEF_U16_MAX_VALUE)){
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009490:	d307      	bcc.n	80094a2 <UpdateSettings+0xdf2>
					gVar.pid2.kd = CONF_DEF_PID2_KD;
 8009492:	4a29      	ldr	r2, [pc, #164]	; (8009538 <UpdateSettings+0xe88>)
 8009494:	f242 5360 	movw	r3, #9568	; 0x2560
 8009498:	4413      	add	r3, r2
 800949a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800949e:	601a      	str	r2, [r3, #0]
				}else{
					gVar.pid2.kd = (float)(value/MB_VALUE_MULTIPLIER_100);
				}
				break;
 80094a0:	e03d      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.pid2.kd = (float)(value/MB_VALUE_MULTIPLIER_100);
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094ac:	eddf 6a23 	vldr	s13, [pc, #140]	; 800953c <UpdateSettings+0xe8c>
 80094b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094b4:	4a20      	ldr	r2, [pc, #128]	; (8009538 <UpdateSettings+0xe88>)
 80094b6:	f242 5360 	movw	r3, #9568	; 0x2560
 80094ba:	4413      	add	r3, r2
 80094bc:	edc3 7a00 	vstr	s15, [r3]
				break;
 80094c0:	e02d      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_PID2_I_OUT_LIMIT:
				if(!(value >=0  && value <= DEF_U16_MAX_VALUE)){
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c8:	d306      	bcc.n	80094d8 <UpdateSettings+0xe28>
					gVar.pid2.output_i_max = CONF_DEF_PID2_I_OUT_MAX;
 80094ca:	4a1b      	ldr	r2, [pc, #108]	; (8009538 <UpdateSettings+0xe88>)
 80094cc:	f242 537c 	movw	r3, #9596	; 0x257c
 80094d0:	4413      	add	r3, r2
 80094d2:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <UpdateSettings+0xe90>)
 80094d4:	601a      	str	r2, [r3, #0]
				}else{
					gVar.pid2.output_i_max = value;
				}
				break;
 80094d6:	e022      	b.n	800951e <UpdateSettings+0xe6e>
					gVar.pid2.output_i_max = value;
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e2:	4a15      	ldr	r2, [pc, #84]	; (8009538 <UpdateSettings+0xe88>)
 80094e4:	f242 537c 	movw	r3, #9596	; 0x257c
 80094e8:	4413      	add	r3, r2
 80094ea:	edc3 7a00 	vstr	s15, [r3]
				break;
 80094ee:	e016      	b.n	800951e <UpdateSettings+0xe6e>
			case SA_DBUG_ENABLE:
				if(!(value ==0  || value == 1)){
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <UpdateSettings+0xe52>
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d002      	beq.n	8009502 <UpdateSettings+0xe52>
					DBG_DISABLE();
 80094fc:	f004 fc36 	bl	800dd6c <DBG_DISABLE>
				}else{
					value==1 ? DBG_ENABLE() : DBG_DISABLE();
				}

				break;
 8009500:	e00d      	b.n	800951e <UpdateSettings+0xe6e>
					value==1 ? DBG_ENABLE() : DBG_DISABLE();
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d102      	bne.n	800950e <UpdateSettings+0xe5e>
 8009508:	f004 fc24 	bl	800dd54 <DBG_ENABLE>
				break;
 800950c:	e007      	b.n	800951e <UpdateSettings+0xe6e>
					value==1 ? DBG_ENABLE() : DBG_DISABLE();
 800950e:	f004 fc2d 	bl	800dd6c <DBG_DISABLE>
				break;
 8009512:	e004      	b.n	800951e <UpdateSettings+0xe6e>

			default:
				break;
 8009514:	bf00      	nop
 8009516:	e002      	b.n	800951e <UpdateSettings+0xe6e>
				break;
 8009518:	bf00      	nop
 800951a:	e000      	b.n	800951e <UpdateSettings+0xe6e>
				break;
 800951c:	bf00      	nop
	for(uint16_t address = 0 ; address < SA_MAX; address++){
 800951e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009520:	3301      	adds	r3, #1
 8009522:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009526:	2b91      	cmp	r3, #145	; 0x91
 8009528:	f67f a8d1 	bls.w	80086ce <UpdateSettings+0x1e>
		}
	}
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	3728      	adds	r7, #40	; 0x28
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	24002050 	.word	0x24002050
 800953c:	42c80000 	.word	0x42c80000
 8009540:	41200000 	.word	0x41200000

08009544 <FactorySettings>:

/*
 * Factory settings for required variables
 * */

void FactorySettings(void){
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0

		/*Analog outputs 1 to 4----------*/
		FSExt_EraseFull();
 8009548:	f7fb fb98 	bl	8004c7c <FSExt_EraseFull>
}
 800954c:	bf00      	nop
 800954e:	bd80      	pop	{r7, pc}

08009550 <TH_PrintDevInfo>:


}

/*Print Device Information-------------------------*/
void TH_PrintDevInfo(void){
 8009550:	b580      	push	{r7, lr}
 8009552:	b094      	sub	sp, #80	; 0x50
 8009554:	af04      	add	r7, sp, #16
	char str[64];
	DBG_SPRINT_NL("\r\nCluster Fieldbus IO Board");
 8009556:	4809      	ldr	r0, [pc, #36]	; (800957c <TH_PrintDevInfo+0x2c>)
 8009558:	f004 fb74 	bl	800dc44 <DBG_SPRINT_NL>
	DBG_SPRINT_NL("Hardware Version: %02X.%X.%X\r\nFirmware Version: %02X.%X.%X\r\n",
 800955c:	2300      	movs	r3, #0
 800955e:	9302      	str	r3, [sp, #8]
 8009560:	2300      	movs	r3, #0
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	2301      	movs	r3, #1
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	2300      	movs	r3, #0
 800956a:	2200      	movs	r2, #0
 800956c:	2101      	movs	r1, #1
 800956e:	4804      	ldr	r0, [pc, #16]	; (8009580 <TH_PrintDevInfo+0x30>)
 8009570:	f004 fb68 	bl	800dc44 <DBG_SPRINT_NL>
			HW_VIRSION>>8, (uint8_t)(HW_VIRSION&0xFF)>>4, (uint8_t)(HW_VIRSION&0x0F),			// Hardware version
			FW_VIRSION>>8, (uint8_t)(FW_VIRSION&0xFF)>>4,(uint8_t)(FW_VIRSION&0x0F));			// Firmware version
}
 8009574:	bf00      	nop
 8009576:	3740      	adds	r7, #64	; 0x40
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	0802a688 	.word	0x0802a688
 8009580:	0802a6a4 	.word	0x0802a6a4

08009584 <TH_DigitalOut>:

/* Digital Output --------------------------------*/
/**
  * @brief 	Digital output handler
  */
void TH_DigitalOut(void){
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
	DigitalOut_t *dout;
	for(uint8_t i = DO_1; i < DO_MAX; i ++){
 800958a:	2300      	movs	r3, #0
 800958c:	71fb      	strb	r3, [r7, #7]
 800958e:	e05e      	b.n	800964e <TH_DigitalOut+0xca>
		dout =  &gVar.dio.dout[i];
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2264      	movs	r2, #100	; 0x64
 8009594:	fb02 f203 	mul.w	r2, r2, r3
 8009598:	f641 73e8 	movw	r3, #8168	; 0x1fe8
 800959c:	4413      	add	r3, r2
 800959e:	4a62      	ldr	r2, [pc, #392]	; (8009728 <TH_DigitalOut+0x1a4>)
 80095a0:	4413      	add	r3, r2
 80095a2:	3304      	adds	r3, #4
 80095a4:	603b      	str	r3, [r7, #0]
		switch (dout->source) {
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	d103      	bne.n	80095b6 <TH_DigitalOut+0x32>
			case DO_SRC_MODBUS:
				dout->mode = DO_MODE_FOLLOW;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	709a      	strb	r2, [r3, #2]
				break;
 80095b4:	e048      	b.n	8009648 <TH_DigitalOut+0xc4>
			default:
				// for digital input 1 to 8
				if(dout->source >= DO_SRC_DI_0 && dout->source <= DO_SRC_DI_7 ){
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	2b07      	cmp	r3, #7
 80095bc:	d83e      	bhi.n	800963c <TH_DigitalOut+0xb8>
					switch (dout->mode) {
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	789b      	ldrb	r3, [r3, #2]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d002      	beq.n	80095cc <TH_DigitalOut+0x48>
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d00c      	beq.n	80095e4 <TH_DigitalOut+0x60>
							}else if(!gVar.dio.di[dout->source].state){
								dout->isToggle = 0U;
							}
							break;
						default:
							break;
 80095ca:	e03c      	b.n	8009646 <TH_DigitalOut+0xc2>
							dout->state = gVar.dio.di[dout->source].state;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	785b      	ldrb	r3, [r3, #1]
 80095d0:	4a55      	ldr	r2, [pc, #340]	; (8009728 <TH_DigitalOut+0x1a4>)
 80095d2:	019b      	lsls	r3, r3, #6
 80095d4:	441a      	add	r2, r3
 80095d6:	f242 2368 	movw	r3, #8808	; 0x2268
 80095da:	4413      	add	r3, r2
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	721a      	strb	r2, [r3, #8]
							break;
 80095e2:	e030      	b.n	8009646 <TH_DigitalOut+0xc2>
							if(gVar.dio.di[dout->source].state && dout->isToggle == 0U){
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	4a4f      	ldr	r2, [pc, #316]	; (8009728 <TH_DigitalOut+0x1a4>)
 80095ea:	019b      	lsls	r3, r3, #6
 80095ec:	441a      	add	r2, r3
 80095ee:	f242 2368 	movw	r3, #8808	; 0x2268
 80095f2:	4413      	add	r3, r2
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d011      	beq.n	800961e <TH_DigitalOut+0x9a>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	78db      	ldrb	r3, [r3, #3]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10d      	bne.n	800961e <TH_DigitalOut+0x9a>
								dout->isToggle = 1U;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2201      	movs	r2, #1
 8009606:	70da      	strb	r2, [r3, #3]
								dout->state = (dout->state == GPIO_PIN_RESET ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	7a1b      	ldrb	r3, [r3, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bf0c      	ite	eq
 8009610:	2301      	moveq	r3, #1
 8009612:	2300      	movne	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	461a      	mov	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	721a      	strb	r2, [r3, #8]
							break;
 800961c:	e012      	b.n	8009644 <TH_DigitalOut+0xc0>
							}else if(!gVar.dio.di[dout->source].state){
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	785b      	ldrb	r3, [r3, #1]
 8009622:	4a41      	ldr	r2, [pc, #260]	; (8009728 <TH_DigitalOut+0x1a4>)
 8009624:	019b      	lsls	r3, r3, #6
 8009626:	441a      	add	r2, r3
 8009628:	f242 2368 	movw	r3, #8808	; 0x2268
 800962c:	4413      	add	r3, r2
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d107      	bne.n	8009644 <TH_DigitalOut+0xc0>
								dout->isToggle = 0U;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2200      	movs	r2, #0
 8009638:	70da      	strb	r2, [r3, #3]
							break;
 800963a:	e003      	b.n	8009644 <TH_DigitalOut+0xc0>
					}
				}else{ // if invalid source
					dout->state = GPIO_PIN_RESET;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2200      	movs	r2, #0
 8009640:	721a      	strb	r2, [r3, #8]
				}
			break;
 8009642:	e000      	b.n	8009646 <TH_DigitalOut+0xc2>
							break;
 8009644:	bf00      	nop
			break;
 8009646:	bf00      	nop
	for(uint8_t i = DO_1; i < DO_MAX; i ++){
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	3301      	adds	r3, #1
 800964c:	71fb      	strb	r3, [r7, #7]
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	2b05      	cmp	r3, #5
 8009652:	d99d      	bls.n	8009590 <TH_DigitalOut+0xc>
		}
	}
	/*Update Output status to the output pins*/
	for(uint8_t i = DO_1; i < DO_MAX; i ++){
 8009654:	2300      	movs	r3, #0
 8009656:	71bb      	strb	r3, [r7, #6]
 8009658:	e05b      	b.n	8009712 <TH_DigitalOut+0x18e>
		if(gVar.dio.dout[i].lastState != gVar.dio.dout[i].state){
 800965a:	79bb      	ldrb	r3, [r7, #6]
 800965c:	4a32      	ldr	r2, [pc, #200]	; (8009728 <TH_DigitalOut+0x1a4>)
 800965e:	2164      	movs	r1, #100	; 0x64
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	441a      	add	r2, r3
 8009666:	f641 73f5 	movw	r3, #8181	; 0x1ff5
 800966a:	4413      	add	r3, r2
 800966c:	781a      	ldrb	r2, [r3, #0]
 800966e:	79bb      	ldrb	r3, [r7, #6]
 8009670:	492d      	ldr	r1, [pc, #180]	; (8009728 <TH_DigitalOut+0x1a4>)
 8009672:	2064      	movs	r0, #100	; 0x64
 8009674:	fb00 f303 	mul.w	r3, r0, r3
 8009678:	4419      	add	r1, r3
 800967a:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 800967e:	440b      	add	r3, r1
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d042      	beq.n	800970c <TH_DigitalOut+0x188>
			DO_WRITE(&gVar.dio.dout[i], gVar.dio.dout[i].state);			//REPLACED
 8009686:	79bb      	ldrb	r3, [r7, #6]
 8009688:	4a27      	ldr	r2, [pc, #156]	; (8009728 <TH_DigitalOut+0x1a4>)
 800968a:	2164      	movs	r1, #100	; 0x64
 800968c:	fb01 f303 	mul.w	r3, r1, r3
 8009690:	441a      	add	r2, r3
 8009692:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 8009696:	4413      	add	r3, r2
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00b      	beq.n	80096b6 <TH_DigitalOut+0x132>
 800969e:	79bb      	ldrb	r3, [r7, #6]
 80096a0:	4a21      	ldr	r2, [pc, #132]	; (8009728 <TH_DigitalOut+0x1a4>)
 80096a2:	2164      	movs	r1, #100	; 0x64
 80096a4:	fb01 f303 	mul.w	r3, r1, r3
 80096a8:	441a      	add	r2, r3
 80096aa:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	e00a      	b.n	80096cc <TH_DigitalOut+0x148>
 80096b6:	79bb      	ldrb	r3, [r7, #6]
 80096b8:	4a1b      	ldr	r2, [pc, #108]	; (8009728 <TH_DigitalOut+0x1a4>)
 80096ba:	2164      	movs	r1, #100	; 0x64
 80096bc:	fb01 f303 	mul.w	r3, r1, r3
 80096c0:	441a      	add	r2, r3
 80096c2:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 80096c6:	4413      	add	r3, r2
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	041a      	lsls	r2, r3, #16
 80096cc:	79bb      	ldrb	r3, [r7, #6]
 80096ce:	4916      	ldr	r1, [pc, #88]	; (8009728 <TH_DigitalOut+0x1a4>)
 80096d0:	2064      	movs	r0, #100	; 0x64
 80096d2:	fb00 f303 	mul.w	r3, r0, r3
 80096d6:	4419      	add	r1, r3
 80096d8:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80096dc:	440b      	add	r3, r1
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	619a      	str	r2, [r3, #24]
//			HAL_GPIO_WritePin(gVar.dio.dout[i].port, gVar.dio.dout[i].pin, gVar.dio.dout[i].state);
//			DBG_SPRINT_NL("DO-%d",i);
			gVar.dio.dout[i].lastState = gVar.dio.dout[i].state;
 80096e2:	79bb      	ldrb	r3, [r7, #6]
 80096e4:	79ba      	ldrb	r2, [r7, #6]
 80096e6:	4910      	ldr	r1, [pc, #64]	; (8009728 <TH_DigitalOut+0x1a4>)
 80096e8:	2064      	movs	r0, #100	; 0x64
 80096ea:	fb00 f303 	mul.w	r3, r0, r3
 80096ee:	4419      	add	r1, r3
 80096f0:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 80096f4:	440b      	add	r3, r1
 80096f6:	7818      	ldrb	r0, [r3, #0]
 80096f8:	490b      	ldr	r1, [pc, #44]	; (8009728 <TH_DigitalOut+0x1a4>)
 80096fa:	2364      	movs	r3, #100	; 0x64
 80096fc:	fb03 f302 	mul.w	r3, r3, r2
 8009700:	18ca      	adds	r2, r1, r3
 8009702:	f641 73f5 	movw	r3, #8181	; 0x1ff5
 8009706:	4413      	add	r3, r2
 8009708:	4602      	mov	r2, r0
 800970a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = DO_1; i < DO_MAX; i ++){
 800970c:	79bb      	ldrb	r3, [r7, #6]
 800970e:	3301      	adds	r3, #1
 8009710:	71bb      	strb	r3, [r7, #6]
 8009712:	79bb      	ldrb	r3, [r7, #6]
 8009714:	2b05      	cmp	r3, #5
 8009716:	d9a0      	bls.n	800965a <TH_DigitalOut+0xd6>
		}
	}
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	24002050 	.word	0x24002050

0800972c <TH_DigitalIn>:

/* Digital Input --------------------------------*/
/**
  * @brief  Digital Input handler function
  */
void TH_DigitalIn(void){
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
	for(uint8_t i = DI_1; i < DI_MAX; i ++){
 8009732:	2300      	movs	r3, #0
 8009734:	71fb      	strb	r3, [r7, #7]
 8009736:	e04e      	b.n	80097d6 <TH_DigitalIn+0xaa>
		if((gVar.dio.enc.enable > 0U) && (i <= DI_3)){
 8009738:	4a2b      	ldr	r2, [pc, #172]	; (80097e8 <TH_DigitalIn+0xbc>)
 800973a:	f242 4344 	movw	r3, #9284	; 0x2444
 800973e:	4413      	add	r3, r2
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d026      	beq.n	8009794 <TH_DigitalIn+0x68>
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d823      	bhi.n	8009794 <TH_DigitalIn+0x68>

			switch (gVar.dio.enc.configs.mode) {
 800974c:	4a26      	ldr	r2, [pc, #152]	; (80097e8 <TH_DigitalIn+0xbc>)
 800974e:	f242 4348 	movw	r3, #9288	; 0x2448
 8009752:	4413      	add	r3, r2
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b03      	cmp	r3, #3
 8009758:	d81e      	bhi.n	8009798 <TH_DigitalIn+0x6c>
 800975a:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <TH_DigitalIn+0x34>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	08009771 	.word	0x08009771
 8009764:	0800977d 	.word	0x0800977d
 8009768:	08009785 	.word	0x08009785
 800976c:	0800978d 	.word	0x0800978d
				case ENC_MODE_QUAD:
					ENC_ReadQuad(&gVar.dio.enc);
 8009770:	481e      	ldr	r0, [pc, #120]	; (80097ec <TH_DigitalIn+0xc0>)
 8009772:	f005 f895 	bl	800e8a0 <ENC_ReadQuad>
					i =  DI_3;		// skips for di channels 1,2&3
 8009776:	2302      	movs	r3, #2
 8009778:	71fb      	strb	r3, [r7, #7]
					continue;
 800977a:	e029      	b.n	80097d0 <TH_DigitalIn+0xa4>
				case ENC_MODE_INCRE_CHA:
//					ENC_ReadChA(&gVar.dio.enc);
					if(i ==  DI_1) continue;	// skips for  di channels 1, input is captured by external interrupt
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10c      	bne.n	800979c <TH_DigitalIn+0x70>
 8009782:	e025      	b.n	80097d0 <TH_DigitalIn+0xa4>
					break;
				case ENC_MODE_INCRE_CHB:
//					ENC_ReadChB(&gVar.dio.enc);
					if(i ==  DI_2) continue; // skips for  di channels 2
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d10a      	bne.n	80097a0 <TH_DigitalIn+0x74>
 800978a:	e021      	b.n	80097d0 <TH_DigitalIn+0xa4>
					break;
				case ENC_MODE_INCRE_CHAB:
//					ENC_ReadChZ(&gVar.dio.enc);
					if(i <=  DI_2) continue; // skips for  di channels 1 &2
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d91d      	bls.n	80097ce <TH_DigitalIn+0xa2>
					break;
 8009792:	e006      	b.n	80097a2 <TH_DigitalIn+0x76>
				default:
					break;
			}

		}
 8009794:	bf00      	nop
 8009796:	e004      	b.n	80097a2 <TH_DigitalIn+0x76>
					break;
 8009798:	bf00      	nop
 800979a:	e002      	b.n	80097a2 <TH_DigitalIn+0x76>
					break;
 800979c:	bf00      	nop
 800979e:	e000      	b.n	80097a2 <TH_DigitalIn+0x76>
					break;
 80097a0:	bf00      	nop

		DigitalIn_t *di;
		di = &gVar.dio.di[i];
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	3389      	adds	r3, #137	; 0x89
 80097a6:	019b      	lsls	r3, r3, #6
 80097a8:	4a0f      	ldr	r2, [pc, #60]	; (80097e8 <TH_DigitalIn+0xbc>)
 80097aa:	4413      	add	r3, r2
 80097ac:	3304      	adds	r3, #4
 80097ae:	603b      	str	r3, [r7, #0]
		switch (di->config.mode) {
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	791b      	ldrb	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <TH_DigitalIn+0x92>
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d004      	beq.n	80097c6 <TH_DigitalIn+0x9a>
				break;
			case DI_MODE_PULSE_CAPTURE:
				DI_Counter(di);
				break;
			default:
				break;
 80097bc:	e008      	b.n	80097d0 <TH_DigitalIn+0xa4>
				DI_Read(di);
 80097be:	6838      	ldr	r0, [r7, #0]
 80097c0:	f004 fd9b 	bl	800e2fa <DI_Read>
				break;
 80097c4:	e004      	b.n	80097d0 <TH_DigitalIn+0xa4>
				DI_Counter(di);
 80097c6:	6838      	ldr	r0, [r7, #0]
 80097c8:	f004 fddc 	bl	800e384 <DI_Counter>
				break;
 80097cc:	e000      	b.n	80097d0 <TH_DigitalIn+0xa4>
					if(i <=  DI_2) continue; // skips for  di channels 1 &2
 80097ce:	bf00      	nop
	for(uint8_t i = DI_1; i < DI_MAX; i ++){
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	3301      	adds	r3, #1
 80097d4:	71fb      	strb	r3, [r7, #7]
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	2b07      	cmp	r3, #7
 80097da:	d9ad      	bls.n	8009738 <TH_DigitalIn+0xc>
		}
	}
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	24002050 	.word	0x24002050
 80097ec:	24004494 	.word	0x24004494

080097f0 <TH_DigitalInConfig>:


/**
  * @brief  Digital Input Configuration
  */
void TH_DigitalInConfig(void){
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0

	for(uint8_t i = DI_1; i < DI_MAX; i ++){
 80097f6:	2300      	movs	r3, #0
 80097f8:	71fb      	strb	r3, [r7, #7]
 80097fa:	e064      	b.n	80098c6 <TH_DigitalInConfig+0xd6>
		if((gVar.dio.enc.enable > 0U) && (i <= DI_3)){
 80097fc:	4a36      	ldr	r2, [pc, #216]	; (80098d8 <TH_DigitalInConfig+0xe8>)
 80097fe:	f242 4344 	movw	r3, #9284	; 0x2444
 8009802:	4413      	add	r3, r2
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d033      	beq.n	8009872 <TH_DigitalInConfig+0x82>
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d830      	bhi.n	8009872 <TH_DigitalInConfig+0x82>
			if(gVar.dio.enc.isChanged <= 0) continue;
 8009810:	4a31      	ldr	r2, [pc, #196]	; (80098d8 <TH_DigitalInConfig+0xe8>)
 8009812:	f242 439c 	movw	r3, #9372	; 0x249c
 8009816:	4413      	add	r3, r2
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d04b      	beq.n	80098b6 <TH_DigitalInConfig+0xc6>
			gVar.dio.enc.isChanged = 0;
 800981e:	4a2e      	ldr	r2, [pc, #184]	; (80098d8 <TH_DigitalInConfig+0xe8>)
 8009820:	f242 439c 	movw	r3, #9372	; 0x249c
 8009824:	4413      	add	r3, r2
 8009826:	2200      	movs	r2, #0
 8009828:	701a      	strb	r2, [r3, #0]
			ENC_Config(&gVar.dio.enc);
 800982a:	482c      	ldr	r0, [pc, #176]	; (80098dc <TH_DigitalInConfig+0xec>)
 800982c:	f004 fef6 	bl	800e61c <ENC_Config>
			switch (gVar.dio.enc.configs.mode) {
 8009830:	4a29      	ldr	r2, [pc, #164]	; (80098d8 <TH_DigitalInConfig+0xe8>)
 8009832:	f242 4348 	movw	r3, #9288	; 0x2448
 8009836:	4413      	add	r3, r2
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	2b03      	cmp	r3, #3
 800983c:	d81b      	bhi.n	8009876 <TH_DigitalInConfig+0x86>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <TH_DigitalInConfig+0x54>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009855 	.word	0x08009855
 8009848:	0800985b 	.word	0x0800985b
 800984c:	08009863 	.word	0x08009863
 8009850:	0800986b 	.word	0x0800986b
				case ENC_MODE_QUAD:
					i =  DI_3;		// skips for di channels 1,2&3
 8009854:	2302      	movs	r3, #2
 8009856:	71fb      	strb	r3, [r7, #7]
					continue;
 8009858:	e032      	b.n	80098c0 <TH_DigitalInConfig+0xd0>
				case ENC_MODE_INCRE_CHA:
					if(i ==  DI_1) continue;	// skips for  di channels 1
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10c      	bne.n	800987a <TH_DigitalInConfig+0x8a>
 8009860:	e02e      	b.n	80098c0 <TH_DigitalInConfig+0xd0>
					break;
				case ENC_MODE_INCRE_CHB:
					if(i ==  DI_2) continue; // skips for  di channels 2
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d10a      	bne.n	800987e <TH_DigitalInConfig+0x8e>
 8009868:	e02a      	b.n	80098c0 <TH_DigitalInConfig+0xd0>
					break;
				case ENC_MODE_INCRE_CHAB:
					if(i <=  DI_2) continue; // skips for  di channels 1 &2
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d924      	bls.n	80098ba <TH_DigitalInConfig+0xca>
					break;
 8009870:	e006      	b.n	8009880 <TH_DigitalInConfig+0x90>
				default:
					break;
			}

		}
 8009872:	bf00      	nop
 8009874:	e004      	b.n	8009880 <TH_DigitalInConfig+0x90>
					break;
 8009876:	bf00      	nop
 8009878:	e002      	b.n	8009880 <TH_DigitalInConfig+0x90>
					break;
 800987a:	bf00      	nop
 800987c:	e000      	b.n	8009880 <TH_DigitalInConfig+0x90>
					break;
 800987e:	bf00      	nop
		if(gVar.dio.di[i].isChanged <= 0) continue;
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	4a15      	ldr	r2, [pc, #84]	; (80098d8 <TH_DigitalInConfig+0xe8>)
 8009884:	3389      	adds	r3, #137	; 0x89
 8009886:	019b      	lsls	r3, r3, #6
 8009888:	4413      	add	r3, r2
 800988a:	3305      	adds	r3, #5
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d015      	beq.n	80098be <TH_DigitalInConfig+0xce>
		gVar.dio.di[i].isChanged = 0;
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	4a10      	ldr	r2, [pc, #64]	; (80098d8 <TH_DigitalInConfig+0xe8>)
 8009896:	3389      	adds	r3, #137	; 0x89
 8009898:	019b      	lsls	r3, r3, #6
 800989a:	4413      	add	r3, r2
 800989c:	3305      	adds	r3, #5
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
		DI_Config(&gVar.dio.di[i]);
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	3389      	adds	r3, #137	; 0x89
 80098a6:	019b      	lsls	r3, r3, #6
 80098a8:	4a0b      	ldr	r2, [pc, #44]	; (80098d8 <TH_DigitalInConfig+0xe8>)
 80098aa:	4413      	add	r3, r2
 80098ac:	3304      	adds	r3, #4
 80098ae:	4618      	mov	r0, r3
 80098b0:	f004 fb53 	bl	800df5a <DI_Config>
 80098b4:	e004      	b.n	80098c0 <TH_DigitalInConfig+0xd0>
			if(gVar.dio.enc.isChanged <= 0) continue;
 80098b6:	bf00      	nop
 80098b8:	e002      	b.n	80098c0 <TH_DigitalInConfig+0xd0>
					if(i <=  DI_2) continue; // skips for  di channels 1 &2
 80098ba:	bf00      	nop
 80098bc:	e000      	b.n	80098c0 <TH_DigitalInConfig+0xd0>
		if(gVar.dio.di[i].isChanged <= 0) continue;
 80098be:	bf00      	nop
	for(uint8_t i = DI_1; i < DI_MAX; i ++){
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	3301      	adds	r3, #1
 80098c4:	71fb      	strb	r3, [r7, #7]
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	2b07      	cmp	r3, #7
 80098ca:	d997      	bls.n	80097fc <TH_DigitalInConfig+0xc>

	}
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	24002050 	.word	0x24002050
 80098dc:	24004494 	.word	0x24004494

080098e0 <TH_DIClearOnNoPulse>:
 * @brief If there is no pulse detected by the digital inputs
 * this function will clear the related parameters
 * it is necessary to avoid unexpected behavior when next pulse is being
 * detected
 * */
void TH_DIClearOnNoPulse(void){
 80098e0:	b590      	push	{r4, r7, lr}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0

	static uint32_t tick[2] = {0};
	static uint8_t runOnce[2] = {0};
	for(uint8_t i = DI_1; i<=DI_2; i++){
 80098e6:	2300      	movs	r3, #0
 80098e8:	71fb      	strb	r3, [r7, #7]
 80098ea:	e064      	b.n	80099b6 <TH_DIClearOnNoPulse+0xd6>
		if(gVar.dio.di[i].config.mode == DI_MODE_PULSE_CAPTURE){
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	4a36      	ldr	r2, [pc, #216]	; (80099c8 <TH_DIClearOnNoPulse+0xe8>)
 80098f0:	3389      	adds	r3, #137	; 0x89
 80098f2:	019b      	lsls	r3, r3, #6
 80098f4:	4413      	add	r3, r2
 80098f6:	3308      	adds	r3, #8
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d158      	bne.n	80099b0 <TH_DIClearOnNoPulse+0xd0>
			if(gVar.dio.di[i].pulseInf.isPulseDtctd>0){
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	4a31      	ldr	r2, [pc, #196]	; (80099c8 <TH_DIClearOnNoPulse+0xe8>)
 8009902:	019b      	lsls	r3, r3, #6
 8009904:	441a      	add	r2, r3
 8009906:	f242 2383 	movw	r3, #8835	; 0x2283
 800990a:	4413      	add	r3, r2
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d014      	beq.n	800993c <TH_DIClearOnNoPulse+0x5c>
				gVar.dio.di[i].pulseInf.isPulseDtctd = 0;
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	4a2c      	ldr	r2, [pc, #176]	; (80099c8 <TH_DIClearOnNoPulse+0xe8>)
 8009916:	019b      	lsls	r3, r3, #6
 8009918:	441a      	add	r2, r3
 800991a:	f242 2383 	movw	r3, #8835	; 0x2283
 800991e:	4413      	add	r3, r2
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]
				tick[i] = HAL_GetTick();
 8009924:	79fc      	ldrb	r4, [r7, #7]
 8009926:	f00c fde3 	bl	80164f0 <HAL_GetTick>
 800992a:	4603      	mov	r3, r0
 800992c:	4a27      	ldr	r2, [pc, #156]	; (80099cc <TH_DIClearOnNoPulse+0xec>)
 800992e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				runOnce[i] = 1;
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	4a26      	ldr	r2, [pc, #152]	; (80099d0 <TH_DIClearOnNoPulse+0xf0>)
 8009936:	2101      	movs	r1, #1
 8009938:	54d1      	strb	r1, [r2, r3]
 800993a:	e039      	b.n	80099b0 <TH_DIClearOnNoPulse+0xd0>
			}else{
				if(runOnce[i] > 0){
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	4a24      	ldr	r2, [pc, #144]	; (80099d0 <TH_DIClearOnNoPulse+0xf0>)
 8009940:	5cd3      	ldrb	r3, [r2, r3]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d034      	beq.n	80099b0 <TH_DIClearOnNoPulse+0xd0>
					if((uint32_t)fabs(HAL_GetTick() - tick[i]) >= DEF_DI_CNTR_PULSE_DETECT_TIMEOUT){
 8009946:	f00c fdd3 	bl	80164f0 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	491f      	ldr	r1, [pc, #124]	; (80099cc <TH_DIClearOnNoPulse+0xec>)
 8009950:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800995e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8009962:	ee17 2a90 	vmov	r2, s15
 8009966:	f242 730f 	movw	r3, #9999	; 0x270f
 800996a:	429a      	cmp	r2, r3
 800996c:	d920      	bls.n	80099b0 <TH_DIClearOnNoPulse+0xd0>
						gVar.dio.di[i].pulseInf.period = 0;
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <TH_DIClearOnNoPulse+0xe8>)
 8009972:	019b      	lsls	r3, r3, #6
 8009974:	441a      	add	r2, r3
 8009976:	f242 2378 	movw	r3, #8824	; 0x2278
 800997a:	4413      	add	r3, r2
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
						gVar.dio.di[i].pulseInf.edgeTime = 0;
 8009980:	79fb      	ldrb	r3, [r7, #7]
 8009982:	4a11      	ldr	r2, [pc, #68]	; (80099c8 <TH_DIClearOnNoPulse+0xe8>)
 8009984:	330a      	adds	r3, #10
 8009986:	019b      	lsls	r3, r3, #6
 8009988:	441a      	add	r2, r3
 800998a:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 800998e:	4413      	add	r3, r2
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
						gVar.dio.di[i].pulseInf.lastEdgeTime = 0;
 8009994:	79fb      	ldrb	r3, [r7, #7]
 8009996:	4a0c      	ldr	r2, [pc, #48]	; (80099c8 <TH_DIClearOnNoPulse+0xe8>)
 8009998:	330a      	adds	r3, #10
 800999a:	019b      	lsls	r3, r3, #6
 800999c:	441a      	add	r2, r3
 800999e:	f641 73f4 	movw	r3, #8180	; 0x1ff4
 80099a2:	4413      	add	r3, r2
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
						runOnce[i] = 0;
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	4a09      	ldr	r2, [pc, #36]	; (80099d0 <TH_DIClearOnNoPulse+0xf0>)
 80099ac:	2100      	movs	r1, #0
 80099ae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = DI_1; i<=DI_2; i++){
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	3301      	adds	r3, #1
 80099b4:	71fb      	strb	r3, [r7, #7]
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d997      	bls.n	80098ec <TH_DIClearOnNoPulse+0xc>
			}

		}

	}
}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd90      	pop	{r4, r7, pc}
 80099c6:	bf00      	nop
 80099c8:	24002050 	.word	0x24002050
 80099cc:	24000884 	.word	0x24000884
 80099d0:	2400088c 	.word	0x2400088c

080099d4 <TH_MBRTUMaster>:


/*Old-------------*/

/*Modbus TCP master  handler ------------ */
void TH_MBRTUMaster(void){
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
	 * To read from slave & send to the TCP client
	 * 1. Build a request buffer for reading input register & discrete input
	 * 2. send the request to the rtu master layer
	 * */
//	DEBUG_SPRINT_NL("sockConnct: %d, mstEn: %d",gVar.server.sock[0].isConnected,  gVar.mbRTUMaster.enable);
	gVar.server.sockIndex = 0;
 80099d8:	4b2a      	ldr	r3, [pc, #168]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	if(!gVar.server.sock[0].isConnected || !gVar.mbRTUMaster.enable){
 80099e0:	4b28      	ldr	r3, [pc, #160]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 80099e2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <TH_MBRTUMaster+0x20>
 80099ea:	4b26      	ldr	r3, [pc, #152]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 80099ec:	f893 3948 	ldrb.w	r3, [r3, #2376]	; 0x948
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <TH_MBRTUMaster+0x2a>

		gVar.mbRTUMaster.isBusy = 0;
 80099f4:	4b23      	ldr	r3, [pc, #140]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
		return;
 80099fc:	e041      	b.n	8009a82 <TH_MBRTUMaster+0xae>
	}

//	MB_CUST_SetTimeout(&gVar.mbRTUMaster.custom.reTransTimer, (gVar.mbRTUMaster.replyTimer.timeout*gVar.mbRTUMaster.custom.numOfSlv));
//	DEBUG_SPRINT_NL("Muster reTransTimer: %d, socCOn: %d", gVar.mbRTUMaster.custom.reTransTimer.timeout, gVar.server.sock[0].isConnected );
	if(gVar.mbRTUMaster.custom.reTransTimer.timeout<=0
 80099fe:	4b21      	ldr	r3, [pc, #132]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a00:	f8d3 3988 	ldr.w	r3, [r3, #2440]	; 0x988
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d03b      	beq.n	8009a80 <TH_MBRTUMaster+0xac>
			||	(gVar.mbRTUMaster.custom.numOfSlv <= 0 || gVar.mbRTUMaster.custom.numOfSlv > MB_CUST_NUM_OF_SLAVE_MAX)
 8009a08:	4b1e      	ldr	r3, [pc, #120]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a0a:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d036      	beq.n	8009a80 <TH_MBRTUMaster+0xac>
 8009a12:	4b1c      	ldr	r3, [pc, #112]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a14:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 8009a18:	2b18      	cmp	r3, #24
 8009a1a:	d831      	bhi.n	8009a80 <TH_MBRTUMaster+0xac>
			|| (gVar.mbRTUMaster.custom.slvStartAddr <= 0 || gVar.mbRTUMaster.custom.numOfSlv > MB_SLAVE_ADDR_MAX)) return;
 8009a1c:	4b19      	ldr	r3, [pc, #100]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a1e:	f893 3971 	ldrb.w	r3, [r3, #2417]	; 0x971
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d02c      	beq.n	8009a80 <TH_MBRTUMaster+0xac>
 8009a26:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a28:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 8009a2c:	2bf7      	cmp	r3, #247	; 0xf7
 8009a2e:	d827      	bhi.n	8009a80 <TH_MBRTUMaster+0xac>

	if(MB_CUST_IsTimeout(&gVar.mbRTUMaster.custom.reTransTimer ) && gVar.mbRTUMaster.isPendingRqst == 0){
 8009a30:	4815      	ldr	r0, [pc, #84]	; (8009a88 <TH_MBRTUMaster+0xb4>)
 8009a32:	f005 fc4f 	bl	800f2d4 <MB_CUST_IsTimeout>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d01d      	beq.n	8009a78 <TH_MBRTUMaster+0xa4>
 8009a3c:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a3e:	f893 396a 	ldrb.w	r3, [r3, #2410]	; 0x96a
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d118      	bne.n	8009a78 <TH_MBRTUMaster+0xa4>
//		DEBUG_SPRINT_NL("Muster reTransTimer: %d", gVar.mbRTUMaster.custom.reTransTimer.timeout);
		gVar.mbRTUMaster.custom.funCode = MB_CFC_RIRDI_107;
 8009a46:	4b0f      	ldr	r3, [pc, #60]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a48:	226b      	movs	r2, #107	; 0x6b
 8009a4a:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
		gVar.mbRTUMaster.txBuffSize = MB_CUST_BuildRTUReqRIRDI(&gVar.mbRTUMaster.custom, gVar.mbRTUMaster.txBuff);
 8009a4e:	490f      	ldr	r1, [pc, #60]	; (8009a8c <TH_MBRTUMaster+0xb8>)
 8009a50:	480f      	ldr	r0, [pc, #60]	; (8009a90 <TH_MBRTUMaster+0xbc>)
 8009a52:	f005 fb83 	bl	800f15c <MB_CUST_BuildRTUReqRIRDI>
 8009a56:	4603      	mov	r3, r0
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a5c:	f8a3 2be2 	strh.w	r2, [r3, #3042]	; 0xbe2
//		DEBUG_SPRINT_NL("cust: ");
//		for(uint8_t i = 0; i < gVar.mbRTUMaster.txBuffSize;  i++){
//			DEBUG_SPRINT("%02X ",gVar.mbRTUMaster.txBuff[i] );
//		}
		gVar.mbRTUMaster.isPendingRqst = 1;	// TODO: to uncomment
 8009a60:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 296a 	strb.w	r2, [r3, #2410]	; 0x96a
		gVar.mbRTUMaster.state = MBRM_STATE_IDLE;
 8009a68:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
		gVar.mbRTUMaster.isBusy = 1;
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <TH_MBRTUMaster+0xb0>)
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
//		DEBUG_SPRINT_NL("MBM Bs: 1");
		//TODO: TEST-20230901:
//		MB_CUST_ResetTimer(&gVar.mbRTUMaster.custom.reTransTimer);
	}
	MBRM_Execute(&gVar.mbRTUMaster);
 8009a78:	4806      	ldr	r0, [pc, #24]	; (8009a94 <TH_MBRTUMaster+0xc0>)
 8009a7a:	f008 f855 	bl	8011b28 <MBRM_Execute>
 8009a7e:	e000      	b.n	8009a82 <TH_MBRTUMaster+0xae>
			|| (gVar.mbRTUMaster.custom.slvStartAddr <= 0 || gVar.mbRTUMaster.custom.numOfSlv > MB_SLAVE_ADDR_MAX)) return;
 8009a80:	bf00      	nop

}
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	24002050 	.word	0x24002050
 8009a88:	240029c8 	.word	0x240029c8
 8009a8c:	24002b30 	.word	0x24002b30
 8009a90:	240029c0 	.word	0x240029c0
 8009a94:	24002998 	.word	0x24002998

08009a98 <TH_MBRTUMasterTimoutHandler>:
}


/*	This function check the reply timeout for the slaves
 * */
void TH_MBRTUMasterTimoutHandler(void){
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
	const uint8_t dataStart = 4; // Data start index of the received packet from RTU serial for custom function code(107)
 8009a9e:	2304      	movs	r3, #4
 8009aa0:	71fb      	strb	r3, [r7, #7]
	if (!gVar.mbRTUMaster.enable || gVar.devMode != DEV_MODE_MASTER) {
 8009aa2:	4b70      	ldr	r3, [pc, #448]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009aa4:	f893 3948 	ldrb.w	r3, [r3, #2376]	; 0x948
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 80d7 	beq.w	8009c5c <TH_MBRTUMasterTimoutHandler+0x1c4>
 8009aae:	4b6d      	ldr	r3, [pc, #436]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009ab0:	7a1b      	ldrb	r3, [r3, #8]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	f040 80d2 	bne.w	8009c5c <TH_MBRTUMasterTimoutHandler+0x1c4>
		return;
	}
	if(MBRM_IsReplyTimeout(&gVar.mbRTUMaster.replyTimer)){									// check the reply timer is time out or not
 8009ab8:	486b      	ldr	r0, [pc, #428]	; (8009c68 <TH_MBRTUMasterTimoutHandler+0x1d0>)
 8009aba:	f008 f9c5 	bl	8011e48 <MBRM_IsReplyTimeout>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d064      	beq.n	8009b8e <TH_MBRTUMasterTimoutHandler+0xf6>
		gVar.mbRTUMaster.custom.timeoutCount++;
 8009ac4:	4b67      	ldr	r3, [pc, #412]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009ac6:	f893 39a8 	ldrb.w	r3, [r3, #2472]	; 0x9a8
 8009aca:	3301      	adds	r3, #1
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	4b65      	ldr	r3, [pc, #404]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009ad0:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8


		gVar.mbRTUMaster.custom.rcvFailedCount[gVar.mbRTUMaster.custom.rcvdCount]++;
 8009ad4:	4b63      	ldr	r3, [pc, #396]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009ad6:	f893 39a9 	ldrb.w	r3, [r3, #2473]	; 0x9a9
 8009ada:	4a62      	ldr	r2, [pc, #392]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009adc:	441a      	add	r2, r3
 8009ade:	f892 29ac 	ldrb.w	r2, [r2, #2476]	; 0x9ac
 8009ae2:	3201      	adds	r2, #1
 8009ae4:	b2d1      	uxtb	r1, r2
 8009ae6:	4a5f      	ldr	r2, [pc, #380]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009ae8:	4413      	add	r3, r2
 8009aea:	460a      	mov	r2, r1
 8009aec:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac

		if(gVar.mbRTUMaster.custom.rcvdCount < gVar.mbRTUMaster.custom.numOfSlv){			// check all the slave is responded or not
 8009af0:	4b5c      	ldr	r3, [pc, #368]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009af2:	f893 29a9 	ldrb.w	r2, [r3, #2473]	; 0x9a9
 8009af6:	4b5b      	ldr	r3, [pc, #364]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009af8:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d243      	bcs.n	8009b88 <TH_MBRTUMasterTimoutHandler+0xf0>
//			if(gVar.mbRTUMaster.custom.timeoutCount > gVar.mbRTUMaster.custom.numOfSlv *2){	// wait for the loss of several packets
			if(gVar.mbRTUMaster.custom.rcvFailedCount[gVar.mbRTUMaster.custom.rcvdCount]>=3){		// check for no response count of the slaves
 8009b00:	4b58      	ldr	r3, [pc, #352]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b02:	f893 39a9 	ldrb.w	r3, [r3, #2473]	; 0x9a9
 8009b06:	461a      	mov	r2, r3
 8009b08:	4b56      	ldr	r3, [pc, #344]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f893 39ac 	ldrb.w	r3, [r3, #2476]	; 0x9ac
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d92d      	bls.n	8009b70 <TH_MBRTUMasterTimoutHandler+0xd8>
				gVar.mbRTUMaster.custom.rcvFailedCount[gVar.mbRTUMaster.custom.rcvdCount] = 0;
 8009b14:	4b53      	ldr	r3, [pc, #332]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b16:	f893 39a9 	ldrb.w	r3, [r3, #2473]	; 0x9a9
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4b51      	ldr	r3, [pc, #324]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b1e:	4413      	add	r3, r2
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
				gVar.mbRTUMaster.custom.timeoutCount = 0;
 8009b26:	4b4f      	ldr	r3, [pc, #316]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
				uint16_t byteIndex =  dataStart + MB_CUST_DATA_BLOCK_SIZE* (gVar.mbRTUMaster.custom.rcvdCount+1); 						// 1 is added because of there is master data also in the packet, but master is not counted to the number of slave
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	4b4c      	ldr	r3, [pc, #304]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b34:	f893 39a9 	ldrb.w	r3, [r3, #2473]	; 0x9a9
 8009b38:	3301      	adds	r3, #1
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	0089      	lsls	r1, r1, #2
 8009b40:	440b      	add	r3, r1
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	4413      	add	r3, r2
 8009b48:	80bb      	strh	r3, [r7, #4]
				gVar.mbRTUMaster.rxBuffSize += MB_CUST_BuildEmptySubPacket(&gVar.mbRTUMaster.rxBuff[byteIndex],(MB_CUST_OFFLINE));		// built an empty packet
 8009b4a:	88bb      	ldrh	r3, [r7, #4]
 8009b4c:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8009b50:	4a44      	ldr	r2, [pc, #272]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b52:	4413      	add	r3, r2
 8009b54:	2100      	movs	r1, #0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f005 fb42 	bl	800f1e0 <MB_CUST_BuildEmptySubPacket>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	461a      	mov	r2, r3
 8009b60:	4b40      	ldr	r3, [pc, #256]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b62:	f8b3 3be0 	ldrh.w	r3, [r3, #3040]	; 0xbe0
 8009b66:	4413      	add	r3, r2
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	4b3e      	ldr	r3, [pc, #248]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b6c:	f8a3 2be0 	strh.w	r2, [r3, #3040]	; 0xbe0
			}
			MBRM_RestReplyTimer(&gVar.mbRTUMaster.replyTimer);
 8009b70:	483d      	ldr	r0, [pc, #244]	; (8009c68 <TH_MBRTUMasterTimoutHandler+0x1d0>)
 8009b72:	f008 f957 	bl	8011e24 <MBRM_RestReplyTimer>
			gVar.mbRTUMaster.custom.rcvdCount++;
 8009b76:	4b3b      	ldr	r3, [pc, #236]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b78:	f893 39a9 	ldrb.w	r3, [r3, #2473]	; 0x9a9
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	4b38      	ldr	r3, [pc, #224]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b82:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 8009b86:	e002      	b.n	8009b8e <TH_MBRTUMasterTimoutHandler+0xf6>


		}else{
			MBRM_StopReplyTimer(&gVar.mbRTUMaster.replyTimer);
 8009b88:	4837      	ldr	r0, [pc, #220]	; (8009c68 <TH_MBRTUMasterTimoutHandler+0x1d0>)
 8009b8a:	f008 f93d 	bl	8011e08 <MBRM_StopReplyTimer>



	/*Reset the parameters if the data packet is received from slaves or timeout is occurred
	 * */
	if(gVar.mbRTUMaster.custom.rcvdCount >=  gVar.mbRTUMaster.custom.numOfSlv
 8009b8e:	4b35      	ldr	r3, [pc, #212]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b90:	f893 29a9 	ldrb.w	r2, [r3, #2473]	; 0x9a9
 8009b94:	4b33      	ldr	r3, [pc, #204]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009b96:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d321      	bcc.n	8009be2 <TH_MBRTUMasterTimoutHandler+0x14a>
			&& gVar.mbRTUMaster.custom.numOfSlv != 0){
 8009b9e:	4b31      	ldr	r3, [pc, #196]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009ba0:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01c      	beq.n	8009be2 <TH_MBRTUMasterTimoutHandler+0x14a>
		MBRM_StopReplyTimer(&gVar.mbRTUMaster.replyTimer);
 8009ba8:	482f      	ldr	r0, [pc, #188]	; (8009c68 <TH_MBRTUMasterTimoutHandler+0x1d0>)
 8009baa:	f008 f92d 	bl	8011e08 <MBRM_StopReplyTimer>
//		if(gVar.mbRTUMaster.custom.timeoutCount>0){
//			gVar.mbRTUMaster.custom.timeoutCount--;
//		}

		gVar.mbRTUMaster.custom.rcvdCount = 0;
 8009bae:	4b2d      	ldr	r3, [pc, #180]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
		gVar.mbSerial.rxBuffSize = 0;
 8009bb6:	4b2b      	ldr	r3, [pc, #172]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
		gVar.mbSerial.txBuffSize = 0;
 8009bbe:	4b29      	ldr	r3, [pc, #164]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac

		gVar.mbSerial.isBusy = 0;
 8009bc6:	4b27      	ldr	r3, [pc, #156]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
		gVar.mbRTUMaster.isBusy = 0;
 8009bce:	4b25      	ldr	r3, [pc, #148]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
		MBS_ClearRXBuffer(&gVar.mbSerial);
 8009bd6:	4825      	ldr	r0, [pc, #148]	; (8009c6c <TH_MBRTUMasterTimoutHandler+0x1d4>)
 8009bd8:	f008 ff94 	bl	8012b04 <MBS_ClearRXBuffer>
		MBS_ClearTXBuffer(&gVar.mbSerial);
 8009bdc:	4823      	ldr	r0, [pc, #140]	; (8009c6c <TH_MBRTUMasterTimoutHandler+0x1d4>)
 8009bde:	f008 ff83 	bl	8012ae8 <MBS_ClearTXBuffer>
	}

	if(gVar.mbRTUMaster.replyTimer.enableTimer <=0 ){
 8009be2:	4b20      	ldr	r3, [pc, #128]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009be4:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d119      	bne.n	8009c20 <TH_MBRTUMasterTimoutHandler+0x188>
		gVar.mbRTUMaster.custom.rcvdCount = 0;
 8009bec:	4b1d      	ldr	r3, [pc, #116]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
		gVar.mbSerial.rxBuffSize = 0;
 8009bf4:	4b1b      	ldr	r3, [pc, #108]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
		gVar.mbSerial.txBuffSize = 0;
 8009bfc:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac
		gVar.mbSerial.isBusy = 0;
 8009c04:	4b17      	ldr	r3, [pc, #92]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
		gVar.mbRTUMaster.isBusy = 0;
 8009c0c:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
		MBS_ClearRXBuffer(&gVar.mbSerial);
 8009c14:	4815      	ldr	r0, [pc, #84]	; (8009c6c <TH_MBRTUMasterTimoutHandler+0x1d4>)
 8009c16:	f008 ff75 	bl	8012b04 <MBS_ClearRXBuffer>
		MBS_ClearTXBuffer(&gVar.mbSerial);
 8009c1a:	4814      	ldr	r0, [pc, #80]	; (8009c6c <TH_MBRTUMasterTimoutHandler+0x1d4>)
 8009c1c:	f008 ff64 	bl	8012ae8 <MBS_ClearTXBuffer>
	}


	static uint32_t tick = 0;
	if((uint32_t)fabsf(HAL_GetTick() - tick) == (uint32_t)250U){
 8009c20:	f00c fc66 	bl	80164f0 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	4b12      	ldr	r3, [pc, #72]	; (8009c70 <TH_MBRTUMasterTimoutHandler+0x1d8>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	ee07 3a90 	vmov	s15, r3
 8009c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c38:	ee17 3a90 	vmov	r3, s15
 8009c3c:	2bfa      	cmp	r3, #250	; 0xfa
 8009c3e:	d10e      	bne.n	8009c5e <TH_MBRTUMasterTimoutHandler+0x1c6>
		if(gVar.mbRTUMaster.custom.timeoutCount > 0){
 8009c40:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009c42:	f893 39a8 	ldrb.w	r3, [r3, #2472]	; 0x9a8
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <TH_MBRTUMasterTimoutHandler+0x1c6>
			gVar.mbRTUMaster.custom.timeoutCount--;
 8009c4a:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009c4c:	f893 39a8 	ldrb.w	r3, [r3, #2472]	; 0x9a8
 8009c50:	3b01      	subs	r3, #1
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <TH_MBRTUMasterTimoutHandler+0x1cc>)
 8009c56:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 8009c5a:	e000      	b.n	8009c5e <TH_MBRTUMasterTimoutHandler+0x1c6>
		return;
 8009c5c:	bf00      	nop
		}
	}
}
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	24002050 	.word	0x24002050
 8009c68:	240029a0 	.word	0x240029a0
 8009c6c:	240026d8 	.word	0x240026d8
 8009c70:	24000890 	.word	0x24000890

08009c74 <TH_MBRTUSlaveTimoutHandler>:



/*Modbus RTU slave  handler ------------ */
void TH_MBRTUSlaveTimoutHandler(void){
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
	/* check timeout timer. this timer will keep this slave in wait to send the other slaves which address less than this slave.
	 * if timeout is happened and the last slave is immediate first slave of this salve, then it will send its response
	 * */
			if(MB_CUST_IsTimeout(&gVar.mbRTUSlave.custom.waitingTimer)){
 8009c78:	4822      	ldr	r0, [pc, #136]	; (8009d04 <TH_MBRTUSlaveTimoutHandler+0x90>)
 8009c7a:	f005 fb2b 	bl	800f2d4 <MB_CUST_IsTimeout>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d03d      	beq.n	8009d00 <TH_MBRTUSlaveTimoutHandler+0x8c>
				MB_CUST_ResetTimer(&gVar.mbRTUSlave.custom.waitingTimer);
 8009c84:	481f      	ldr	r0, [pc, #124]	; (8009d04 <TH_MBRTUSlaveTimoutHandler+0x90>)
 8009c86:	f005 fb03 	bl	800f290 <MB_CUST_ResetTimer>
				gVar.mbRTUSlave.custom.respondingSlave++;
 8009c8a:	4b1f      	ldr	r3, [pc, #124]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009c8c:	f893 38db 	ldrb.w	r3, [r3, #2267]	; 0x8db
 8009c90:	3301      	adds	r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	4b1c      	ldr	r3, [pc, #112]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009c96:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
//				DEBUG_SPRINT(" %d", gVar.mbRTUSlave.custom.respondingSlave);
				if(gVar.mbRTUSlave.custom.respondingSlave == gVar.mbRTUSlave.slave_address){
 8009c9a:	4b1b      	ldr	r3, [pc, #108]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009c9c:	f893 28db 	ldrb.w	r2, [r3, #2267]	; 0x8db
 8009ca0:	4b19      	ldr	r3, [pc, #100]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009ca2:	f893 38c8 	ldrb.w	r3, [r3, #2248]	; 0x8c8
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d10b      	bne.n	8009cc2 <TH_MBRTUSlaveTimoutHandler+0x4e>

					gVar.mbSerial.isDataReceived = 1;
 8009caa:	4b17      	ldr	r3, [pc, #92]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
////						}
//						MBRS_PostProcess(&gVar.mbRTUSlave, errorStatus); // to process some modbus related task after sending the response
//					}else{
//						 gVar.mbSerial.frameOkFlag = 1;
//						MBS_ProcessRcvdFrame(&gVar.mbSerial, &gVar.mbRTUSlave);
					gVar.mbRTUSlave.custom.eventType = MB_CUST_EVENT_107_TIMEOUT;
 8009cb2:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
						MBS_ProcessFrame(&gVar.mbSerial, &gVar.mbRTUSlave);
 8009cba:	4914      	ldr	r1, [pc, #80]	; (8009d0c <TH_MBRTUSlaveTimoutHandler+0x98>)
 8009cbc:	4814      	ldr	r0, [pc, #80]	; (8009d10 <TH_MBRTUSlaveTimoutHandler+0x9c>)
 8009cbe:	f008 fec1 	bl	8012a44 <MBS_ProcessFrame>



				}

				if(gVar.mbRTUSlave.custom.respondingSlave>=gVar.mbRTUSlave.slave_address){
 8009cc2:	4b11      	ldr	r3, [pc, #68]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009cc4:	f893 28db 	ldrb.w	r2, [r3, #2267]	; 0x8db
 8009cc8:	4b0f      	ldr	r3, [pc, #60]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009cca:	f893 38c8 	ldrb.w	r3, [r3, #2248]	; 0x8c8
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d316      	bcc.n	8009d00 <TH_MBRTUSlaveTimoutHandler+0x8c>
					gVar.mbRTUSlave.custom.respondingSlave = 0;
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
					gVar.mbSerial.rxBuffSize = gVar.mbRTUSlave.rxBufferSize;
 8009cda:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009cdc:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009ce4:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
					gVar.mbSerial.txBuffSize = gVar.mbRTUSlave.txBufferSize;
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009cea:	f893 38d5 	ldrb.w	r3, [r3, #2261]	; 0x8d5
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <TH_MBRTUSlaveTimoutHandler+0x94>)
 8009cf2:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac
					MB_CUST_StopTimer(&gVar.mbRTUSlave.custom.waitingTimer);
 8009cf6:	4803      	ldr	r0, [pc, #12]	; (8009d04 <TH_MBRTUSlaveTimoutHandler+0x90>)
 8009cf8:	f005 fab2 	bl	800f260 <MB_CUST_StopTimer>
					MB_ClearBuffer();
 8009cfc:	f006 fa40 	bl	8010180 <MB_ClearBuffer>
				}

			}

}
 8009d00:	bf00      	nop
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	24002948 	.word	0x24002948
 8009d08:	24002050 	.word	0x24002050
 8009d0c:	24002918 	.word	0x24002918
 8009d10:	240026d8 	.word	0x240026d8

08009d14 <TH_MBTCPSRecvRespGW>:

/*
*	received response from the remote device when the device is using as modbus gateway
* */

void TH_MBTCPSRecvRespGW(MB_TCPServer *mbtcps){
 8009d14:	b590      	push	{r4, r7, lr}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
	 * 2. find the client who actually own the response
	 * 3. convert the packet RTU to TCP
	 * 4. send the TCP packet as a response to the client
	 * */
	/*1. check if data is received*/
	MBS_Serial *serial = {0};
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]
	serial = &gVar.mbSerial;
 8009d20:	4b69      	ldr	r3, [pc, #420]	; (8009ec8 <TH_MBTCPSRecvRespGW+0x1b4>)
 8009d22:	617b      	str	r3, [r7, #20]

	if(serial->isDataReceived){
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	7cdb      	ldrb	r3, [r3, #19]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 80c9 	beq.w	8009ec0 <TH_MBTCPSRecvRespGW+0x1ac>
		serial->isDataReceived = 0;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2200      	movs	r2, #0
 8009d32:	74da      	strb	r2, [r3, #19]
//		DEBUG_SPRINT_NL("isData: %d, gid: %ld, gkey: %d ",serial->isDataReceived,  MBG_GetTCPClientId(), MBG_GetTCPClientKey());
		gVar.mbGateway.isRegularFC = 0;			// unlock the receive event for the server which is locked by the regular function code
 8009d34:	4a65      	ldr	r2, [pc, #404]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009d36:	f641 1390 	movw	r3, #6544	; 0x1990
 8009d3a:	4413      	add	r3, r2
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	701a      	strb	r2, [r3, #0]

		uint8_t slvAddr = serial->rxBuff[MB_SA_INDEX];
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009d46:	74fb      	strb	r3, [r7, #19]
		uint8_t funCode = serial->rxBuff[MB_FC_INDEX];
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009d4e:	74bb      	strb	r3, [r7, #18]


		if(MB_checkSlaveAddress(slvAddr) && !MB_CUST_CheckCFunCode(funCode)){//funCode != MB_CFC_WMHRCO_109){// for the regular function code
 8009d50:	7cfb      	ldrb	r3, [r7, #19]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	4618      	mov	r0, r3
 8009d56:	f006 facf 	bl	80102f8 <MB_checkSlaveAddress>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d065      	beq.n	8009e2c <TH_MBTCPSRecvRespGW+0x118>
 8009d60:	7cbb      	ldrb	r3, [r7, #18]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f005 fa50 	bl	800f208 <MB_CUST_CheckCFunCode>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d15e      	bne.n	8009e2c <TH_MBTCPSRecvRespGW+0x118>
			MBTCPS_ClientParams *client;
			uint8_t clientIndex = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	747b      	strb	r3, [r7, #17]
			/* 2. find the client who actually own the response*/
			if(MBTCPS_FindClientByIdAndPort(mbtcps, MBG_GetTCPClientId(), MBG_GetTCPClientKey()) != MB_OK){ return;}
 8009d72:	f005 ff83 	bl	800fc7c <MBG_GetTCPClientId>
 8009d76:	4604      	mov	r4, r0
 8009d78:	f005 ff8c 	bl	800fc94 <MBG_GetTCPClientKey>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	461a      	mov	r2, r3
 8009d80:	4621      	mov	r1, r4
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f009 f8aa 	bl	8012edc <MBTCPS_FindClientByIdAndPort>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	f040 8097 	bne.w	8009ebe <TH_MBTCPSRecvRespGW+0x1aa>
			clientIndex = mbtcps->clientIndex;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	789b      	ldrb	r3, [r3, #2]
 8009d94:	747b      	strb	r3, [r7, #17]
			client = &mbtcps->clients[clientIndex];
 8009d96:	7c7b      	ldrb	r3, [r7, #17]
 8009d98:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8009d9c:	fb02 f303 	mul.w	r3, r2, r3
 8009da0:	3318      	adds	r3, #24
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	4413      	add	r3, r2
 8009da6:	3304      	adds	r3, #4
 8009da8:	60fb      	str	r3, [r7, #12]
	//		DEBUG_SPRINT_NL(" RTU Rcv %d: ", serial->rxBuffSize);
	//		for(uint8_t i = 0; i < serial->rxBuffSize; i++){
	//			DEBUG_SPRINT("%02X ",serial->rxBuffer[i]);
	//		}
			/*convert the packet RTU to TCP*/
			client->txBuffSize = MBG_ConvertRTU2TCP(client->txBuff, serial->rxBuff,  serial->rxBuffSize);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f203 1083 	addw	r0, r3, #387	; 0x183
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f005 ff75 	bl	800fcac <MBG_ConvertRTU2TCP>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee

			MBG_GetTCPHeader()->length = client->txBuffSize;
 8009dcc:	f005 ff4a 	bl	800fc64 <MBG_GetTCPHeader>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
 8009dd8:	8093      	strh	r3, [r2, #4]
			MBTCP_SetHeader(client->txBuff, MBG_GetTCPHeader());		// set the tcp header to te tx buffer
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f203 1483 	addw	r4, r3, #387	; 0x183
 8009de0:	f005 ff40 	bl	800fc64 <MBG_GetTCPHeader>
 8009de4:	4603      	mov	r3, r0
 8009de6:	4619      	mov	r1, r3
 8009de8:	4620      	mov	r0, r4
 8009dea:	f008 ff89 	bl	8012d00 <MBTCP_SetHeader>
			client->txBuffSize = client->txBuffSize + MBTCP_INDX_HEADER_MAX-1;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
 8009df4:	3306      	adds	r3, #6
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee

	//		DEBUG_SPRINT_NL(" clnt %d: ", client->txBuffSize);
	//		for(uint8_t i = 0; i < client->txBuffSize; i++){
	//			DEBUG_SPRINT("%02X ",client->txBuff[i]);
	//		}
			MBG_StopTimeout(&gVar.mbGateway.rplyTimer);
 8009dfe:	4834      	ldr	r0, [pc, #208]	; (8009ed0 <TH_MBTCPSRecvRespGW+0x1bc>)
 8009e00:	f005 ff8c 	bl	800fd1c <MBG_StopTimeout>
			MBTCPS_Send(client);
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f009 f89d 	bl	8012f44 <MBTCPS_Send>
			gVar.mbSerial.isBusy = 0;
 8009e0a:	4b30      	ldr	r3, [pc, #192]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
			gVar.mbGateway.isBusy = 0;
 8009e12:	4a2e      	ldr	r2, [pc, #184]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e14:	f641 1370 	movw	r3, #6512	; 0x1970
 8009e18:	4413      	add	r3, r2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	701a      	strb	r2, [r3, #0]
			MBS_ClearRXBuffer(serial);
 8009e1e:	6978      	ldr	r0, [r7, #20]
 8009e20:	f008 fe70 	bl	8012b04 <MBS_ClearRXBuffer>
			MBS_ClearTXBuffer(serial);
 8009e24:	6978      	ldr	r0, [r7, #20]
 8009e26:	f008 fe5f 	bl	8012ae8 <MBS_ClearTXBuffer>
		if(MB_checkSlaveAddress(slvAddr) && !MB_CUST_CheckCFunCode(funCode)){//funCode != MB_CFC_WMHRCO_109){// for the regular function code
 8009e2a:	e049      	b.n	8009ec0 <TH_MBTCPSRecvRespGW+0x1ac>
//			gVar.mbSerial.mode = MBS_MODE_NONE;
	//		if(MBMQ_DeleteQueMsg(&mbtcps->msgQ)>0){
	//			mbtcps->curntTrnsNo--;
	//		}
	//		DEBUG_SPRINT_NL("noOfMsg: %d ",mbtcps->msgQ.noOfMsg);
		}else if(MB_CUST_CheckCFunCode(funCode)){//gVar.mbGateway.custom.funCode == MB_CFC_WMHRCO_109){
 8009e2c:	7cbb      	ldrb	r3, [r7, #18]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f005 f9ea 	bl	800f208 <MB_CUST_CheckCFunCode>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d042      	beq.n	8009ec0 <TH_MBTCPSRecvRespGW+0x1ac>
			gVar.mbGateway.isBusy = 0;
 8009e3a:	4a24      	ldr	r2, [pc, #144]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e3c:	f641 1370 	movw	r3, #6512	; 0x1970
 8009e40:	4413      	add	r3, r2
 8009e42:	2200      	movs	r2, #0
 8009e44:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.isReqSent = 0;
 8009e46:	4a21      	ldr	r2, [pc, #132]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e48:	f641 1371 	movw	r3, #6513	; 0x1971
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.txBuffSize = 0;
 8009e52:	4a1e      	ldr	r2, [pc, #120]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e54:	f641 634c 	movw	r3, #7756	; 0x1e4c
 8009e58:	4413      	add	r3, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	801a      	strh	r2, [r3, #0]
			gVar.mbGateway.rxBuffSize = 0;
 8009e5e:	4a1b      	ldr	r2, [pc, #108]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e60:	f641 634e 	movw	r3, #7758	; 0x1e4e
 8009e64:	4413      	add	r3, r2
 8009e66:	2200      	movs	r2, #0
 8009e68:	801a      	strh	r2, [r3, #0]
			gVar.mbSerial.txBuffSize = 0;
 8009e6a:	4b18      	ldr	r3, [pc, #96]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac
			gVar.mbSerial.rxBuffSize = 0;
 8009e72:	4b16      	ldr	r3, [pc, #88]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
//			gVar.mbSerial.mode = MBS_MODE_NONE;
			gVar.mbGateway.custom.funCode = 0;
 8009e7a:	4a14      	ldr	r2, [pc, #80]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e7c:	f641 1398 	movw	r3, #6552	; 0x1998
 8009e80:	4413      	add	r3, r2
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.rcvdCount = 0;
 8009e86:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e88:	f641 13d1 	movw	r3, #6609	; 0x19d1
 8009e8c:	4413      	add	r3, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.slvStartAddr = 0;
 8009e92:	4a0e      	ldr	r2, [pc, #56]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009e94:	f641 1399 	movw	r3, #6553	; 0x1999
 8009e98:	4413      	add	r3, r2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.numOfSlv = 0;
 8009e9e:	4a0b      	ldr	r2, [pc, #44]	; (8009ecc <TH_MBTCPSRecvRespGW+0x1b8>)
 8009ea0:	f641 139a 	movw	r3, #6554	; 0x199a
 8009ea4:	4413      	add	r3, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
			MBG_StopTimeout(&gVar.mbGateway.rplyTimer);
 8009eaa:	4809      	ldr	r0, [pc, #36]	; (8009ed0 <TH_MBTCPSRecvRespGW+0x1bc>)
 8009eac:	f005 ff36 	bl	800fd1c <MBG_StopTimeout>
			MBS_ClearRXBuffer(&gVar.mbSerial);
 8009eb0:	4805      	ldr	r0, [pc, #20]	; (8009ec8 <TH_MBTCPSRecvRespGW+0x1b4>)
 8009eb2:	f008 fe27 	bl	8012b04 <MBS_ClearRXBuffer>
			MBS_ClearTXBuffer(&gVar.mbSerial);
 8009eb6:	4804      	ldr	r0, [pc, #16]	; (8009ec8 <TH_MBTCPSRecvRespGW+0x1b4>)
 8009eb8:	f008 fe16 	bl	8012ae8 <MBS_ClearTXBuffer>
 8009ebc:	e000      	b.n	8009ec0 <TH_MBTCPSRecvRespGW+0x1ac>
			if(MBTCPS_FindClientByIdAndPort(mbtcps, MBG_GetTCPClientId(), MBG_GetTCPClientKey()) != MB_OK){ return;}
 8009ebe:	bf00      	nop
		}
	}
}
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd90      	pop	{r4, r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	240026d8 	.word	0x240026d8
 8009ecc:	24002050 	.word	0x24002050
 8009ed0:	240039a8 	.word	0x240039a8

08009ed4 <TH_MBGateway>:
	msg->size = size;
}


/*Task handler for Modbus gateway ------------ */
void TH_MBGateway(void){
 8009ed4:	b5b0      	push	{r4, r5, r7, lr}
 8009ed6:	b088      	sub	sp, #32
 8009ed8:	af00      	add	r7, sp, #0

	if(gVar.mbGateway.txBuffSize > 0 && !gVar.mbGateway.isReqSent){// && !gVar.mbSerial.isBusy
 8009eda:	4abf      	ldr	r2, [pc, #764]	; (800a1d8 <TH_MBGateway+0x304>)
 8009edc:	f641 634c 	movw	r3, #7756	; 0x1e4c
 8009ee0:	4413      	add	r3, r2
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 81f2 	beq.w	800a2ce <TH_MBGateway+0x3fa>
 8009eea:	4abb      	ldr	r2, [pc, #748]	; (800a1d8 <TH_MBGateway+0x304>)
 8009eec:	f641 1371 	movw	r3, #6513	; 0x1971
 8009ef0:	4413      	add	r3, r2
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f040 81ea 	bne.w	800a2ce <TH_MBGateway+0x3fa>
		gVar.mbGateway.custom.funCode = gVar.mbGateway.txBuff[MB_FC_INDEX];
 8009efa:	4ab7      	ldr	r2, [pc, #732]	; (800a1d8 <TH_MBGateway+0x304>)
 8009efc:	f641 434d 	movw	r3, #7245	; 0x1c4d
 8009f00:	4413      	add	r3, r2
 8009f02:	7819      	ldrb	r1, [r3, #0]
 8009f04:	4ab4      	ldr	r2, [pc, #720]	; (800a1d8 <TH_MBGateway+0x304>)
 8009f06:	f641 1398 	movw	r3, #6552	; 0x1998
 8009f0a:	4413      	add	r3, r2
 8009f0c:	460a      	mov	r2, r1
 8009f0e:	701a      	strb	r2, [r3, #0]

		/*0. CHeck the function code*/
		if(MB_CUST_CheckCFunCode(gVar.mbGateway.custom.funCode)>0 ){		// for custom function code
 8009f10:	4ab1      	ldr	r2, [pc, #708]	; (800a1d8 <TH_MBGateway+0x304>)
 8009f12:	f641 1398 	movw	r3, #6552	; 0x1998
 8009f16:	4413      	add	r3, r2
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f005 f974 	bl	800f208 <MB_CUST_CheckCFunCode>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 8160 	beq.w	800a1e8 <TH_MBGateway+0x314>

			switch (gVar.mbGateway.custom.funCode) {
 8009f28:	4aab      	ldr	r2, [pc, #684]	; (800a1d8 <TH_MBGateway+0x304>)
 8009f2a:	f641 1398 	movw	r3, #6552	; 0x1998
 8009f2e:	4413      	add	r3, r2
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b6b      	cmp	r3, #107	; 0x6b
 8009f34:	f000 81c6 	beq.w	800a2c4 <TH_MBGateway+0x3f0>
 8009f38:	2b6d      	cmp	r3, #109	; 0x6d
 8009f3a:	d000      	beq.n	8009f3e <TH_MBGateway+0x6a>
						}

					}
					break;
				default:
					break;
 8009f3c:	e1c7      	b.n	800a2ce <TH_MBGateway+0x3fa>
						uint8_t byteAddrMaster = 4;		// data start address for the master
 8009f3e:	2304      	movs	r3, #4
 8009f40:	76fb      	strb	r3, [r7, #27]
						MB_setReqBuff(&gVar.mbGateway.txBuff[byteAddrMaster], MB_CUST_DATA_BLOCK_SIZE);
 8009f42:	7efa      	ldrb	r2, [r7, #27]
 8009f44:	f641 4348 	movw	r3, #7240	; 0x1c48
 8009f48:	4413      	add	r3, r2
 8009f4a:	4aa3      	ldr	r2, [pc, #652]	; (800a1d8 <TH_MBGateway+0x304>)
 8009f4c:	4413      	add	r3, r2
 8009f4e:	3304      	adds	r3, #4
 8009f50:	210a      	movs	r1, #10
 8009f52:	4618      	mov	r0, r3
 8009f54:	f005 ffa2 	bl	800fe9c <MB_setReqBuff>
						MB_setRespBuff(msg.buff);
 8009f58:	463b      	mov	r3, r7
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f005 ffb2 	bl	800fec4 <MB_setRespBuff>
						processStatus = MB_executeRequest(gVar.mbGateway.custom.funCode);						//  MB_executeRequest() will return 0x04 and 0xFF, 0x04 = exception occured and 0xFF = no exception
 8009f60:	4a9d      	ldr	r2, [pc, #628]	; (800a1d8 <TH_MBGateway+0x304>)
 8009f62:	f641 1398 	movw	r3, #6552	; 0x1998
 8009f66:	4413      	add	r3, r2
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f005 ffc6 	bl	800fefc <MB_executeRequest>
 8009f70:	4603      	mov	r3, r0
 8009f72:	76bb      	strb	r3, [r7, #26]
						if (processStatus != 0u){
 8009f74:	7ebb      	ldrb	r3, [r7, #26]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d01a      	beq.n	8009fb0 <TH_MBGateway+0xdc>
							if(processStatus != MB_RS_255 && processStatus != MB_NRS_254){							// for exception response
 8009f7a:	7ebb      	ldrb	r3, [r7, #26]
 8009f7c:	2bff      	cmp	r3, #255	; 0xff
 8009f7e:	d00f      	beq.n	8009fa0 <TH_MBGateway+0xcc>
 8009f80:	7ebb      	ldrb	r3, [r7, #26]
 8009f82:	2bfe      	cmp	r3, #254	; 0xfe
 8009f84:	d00c      	beq.n	8009fa0 <TH_MBGateway+0xcc>
								gVar.mbGateway.rxBuff[byteAddrMaster] = MB_CUST_ONLINE | MB_CUST_ERROR|processStatus;	// set exception status for the master
 8009f86:	7efb      	ldrb	r3, [r7, #27]
 8009f88:	7eba      	ldrb	r2, [r7, #26]
 8009f8a:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8009f8e:	b2d1      	uxtb	r1, r2
 8009f90:	4a91      	ldr	r2, [pc, #580]	; (800a1d8 <TH_MBGateway+0x304>)
 8009f92:	441a      	add	r2, r3
 8009f94:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8009f98:	4413      	add	r3, r2
 8009f9a:	460a      	mov	r2, r1
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	e007      	b.n	8009fb0 <TH_MBGateway+0xdc>
								gVar.mbGateway.rxBuff[byteAddrMaster] = MB_CUST_ONLINE;			// set 0 for no exception
 8009fa0:	7efb      	ldrb	r3, [r7, #27]
 8009fa2:	4a8d      	ldr	r2, [pc, #564]	; (800a1d8 <TH_MBGateway+0x304>)
 8009fa4:	441a      	add	r2, r3
 8009fa6:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8009faa:	4413      	add	r3, r2
 8009fac:	2280      	movs	r2, #128	; 0x80
 8009fae:	701a      	strb	r2, [r3, #0]
						uint8_t numOfSlave = gVar.mbGateway.txBuff[byteAddrMaster-1];
 8009fb0:	7efb      	ldrb	r3, [r7, #27]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	4a88      	ldr	r2, [pc, #544]	; (800a1d8 <TH_MBGateway+0x304>)
 8009fb6:	441a      	add	r2, r3
 8009fb8:	f641 434c 	movw	r3, #7244	; 0x1c4c
 8009fbc:	4413      	add	r3, r2
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	767b      	strb	r3, [r7, #25]
						if(numOfSlave<=0){
 8009fc2:	7e7b      	ldrb	r3, [r7, #25]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d118      	bne.n	8009ffa <TH_MBGateway+0x126>
							gVar.mbGateway.isBusy = 0;
 8009fc8:	4a83      	ldr	r2, [pc, #524]	; (800a1d8 <TH_MBGateway+0x304>)
 8009fca:	f641 1370 	movw	r3, #6512	; 0x1970
 8009fce:	4413      	add	r3, r2
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	701a      	strb	r2, [r3, #0]
							gVar.mbGateway.isReqSent = 0;
 8009fd4:	4a80      	ldr	r2, [pc, #512]	; (800a1d8 <TH_MBGateway+0x304>)
 8009fd6:	f641 1371 	movw	r3, #6513	; 0x1971
 8009fda:	4413      	add	r3, r2
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]
							gVar.mbGateway.txBuffSize = 0;
 8009fe0:	4a7d      	ldr	r2, [pc, #500]	; (800a1d8 <TH_MBGateway+0x304>)
 8009fe2:	f641 634c 	movw	r3, #7756	; 0x1e4c
 8009fe6:	4413      	add	r3, r2
 8009fe8:	2200      	movs	r2, #0
 8009fea:	801a      	strh	r2, [r3, #0]
							gVar.mbGateway.rxBuffSize = 0;
 8009fec:	4a7a      	ldr	r2, [pc, #488]	; (800a1d8 <TH_MBGateway+0x304>)
 8009fee:	f641 634e 	movw	r3, #7758	; 0x1e4e
 8009ff2:	4413      	add	r3, r2
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	801a      	strh	r2, [r3, #0]
							break;
 8009ff8:	e166      	b.n	800a2c8 <TH_MBGateway+0x3f4>
						serial = &gVar.mbSerial;
 8009ffa:	4b78      	ldr	r3, [pc, #480]	; (800a1dc <TH_MBGateway+0x308>)
 8009ffc:	617b      	str	r3, [r7, #20]
						if((serial->protocol == MBS_PROTO_RTU_STD || serial->protocol == MBS_PROTO_RTU_CLUSTER) && (serial->isSending || serial->isReceiving)) break;		// if serial line is busy to send or receive with another request
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	785b      	ldrb	r3, [r3, #1]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <TH_MBGateway+0x13a>
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	785b      	ldrb	r3, [r3, #1]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d109      	bne.n	800a022 <TH_MBGateway+0x14e>
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	7d9b      	ldrb	r3, [r3, #22]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f040 8158 	bne.w	800a2c8 <TH_MBGateway+0x3f4>
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	7d5b      	ldrb	r3, [r3, #21]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f040 8153 	bne.w	800a2c8 <TH_MBGateway+0x3f4>
						if(!serial->isBusy){
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	7d1b      	ldrb	r3, [r3, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	f040 8150 	bne.w	800a2cc <TH_MBGateway+0x3f8>
							uint16_t startIndexForSlv = byteAddrMaster+MB_CUST_DATA_BLOCK_SIZE;		// start b byte index for
 800a02c:	7efb      	ldrb	r3, [r7, #27]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	330a      	adds	r3, #10
 800a032:	827b      	strh	r3, [r7, #18]
							gVar.mbGateway.txBuffSize = gVar.mbGateway.txBuffSize- MB_CUST_DATA_BLOCK_SIZE;					// no calculate the size of the buffer after removing data of the master
 800a034:	4a68      	ldr	r2, [pc, #416]	; (800a1d8 <TH_MBGateway+0x304>)
 800a036:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a03a:	4413      	add	r3, r2
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	3b0a      	subs	r3, #10
 800a040:	b299      	uxth	r1, r3
 800a042:	4a65      	ldr	r2, [pc, #404]	; (800a1d8 <TH_MBGateway+0x304>)
 800a044:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a048:	4413      	add	r3, r2
 800a04a:	460a      	mov	r2, r1
 800a04c:	801a      	strh	r2, [r3, #0]
							memcpy(&gVar.mbGateway.txBuff[byteAddrMaster], &gVar.mbGateway.txBuff[startIndexForSlv], gVar.mbGateway.txBuffSize);	// remove the data of the master device and shift forward other packet of the slaves
 800a04e:	7efa      	ldrb	r2, [r7, #27]
 800a050:	f641 4348 	movw	r3, #7240	; 0x1c48
 800a054:	4413      	add	r3, r2
 800a056:	4a60      	ldr	r2, [pc, #384]	; (800a1d8 <TH_MBGateway+0x304>)
 800a058:	4413      	add	r3, r2
 800a05a:	1d18      	adds	r0, r3, #4
 800a05c:	8a7a      	ldrh	r2, [r7, #18]
 800a05e:	f641 4348 	movw	r3, #7240	; 0x1c48
 800a062:	4413      	add	r3, r2
 800a064:	4a5c      	ldr	r2, [pc, #368]	; (800a1d8 <TH_MBGateway+0x304>)
 800a066:	4413      	add	r3, r2
 800a068:	1d19      	adds	r1, r3, #4
 800a06a:	4a5b      	ldr	r2, [pc, #364]	; (800a1d8 <TH_MBGateway+0x304>)
 800a06c:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a070:	4413      	add	r3, r2
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	f01c fb4f 	bl	8026718 <memcpy>
							memcpy(serial->txBuff,gVar.mbGateway.txBuff, gVar.mbGateway.txBuffSize );
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f503 7091 	add.w	r0, r3, #290	; 0x122
 800a080:	4a55      	ldr	r2, [pc, #340]	; (800a1d8 <TH_MBGateway+0x304>)
 800a082:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a086:	4413      	add	r3, r2
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	4954      	ldr	r1, [pc, #336]	; (800a1e0 <TH_MBGateway+0x30c>)
 800a08e:	f01c fb43 	bl	8026718 <memcpy>
							serial->txBuffSize = gVar.mbGateway.txBuffSize;
 800a092:	4a51      	ldr	r2, [pc, #324]	; (800a1d8 <TH_MBGateway+0x304>)
 800a094:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a098:	4413      	add	r3, r2
 800a09a:	881a      	ldrh	r2, [r3, #0]
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
									&serial->txBuff[serial->txBuffSize +1],
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800a0a8:	3301      	adds	r3, #1
							MBTOOL_SplitU16ToBytes(
 800a0aa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	1c9c      	adds	r4, r3, #2
									&serial->txBuff[serial->txBuffSize],
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
							MBTOOL_SplitU16ToBytes(
 800a0ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	1c9d      	adds	r5, r3, #2
 800a0c4:	4a44      	ldr	r2, [pc, #272]	; (800a1d8 <TH_MBGateway+0x304>)
 800a0c6:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a0ca:	4413      	add	r3, r2
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4843      	ldr	r0, [pc, #268]	; (800a1e0 <TH_MBGateway+0x30c>)
 800a0d2:	f004 ff91 	bl	800eff8 <MB_CalcCRC16>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f008 ff3f 	bl	8012f60 <MBTOOL_SplitU16ToBytes>
							serial->txBuffSize += 2;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800a0e8:	3302      	adds	r3, #2
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
							if(serial->txBuffSize>0){
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 80e7 	beq.w	800a2cc <TH_MBGateway+0x3f8>
								serial->mode = MBS_MODE_GATEWAY;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2203      	movs	r2, #3
 800a102:	701a      	strb	r2, [r3, #0]
								if(MBG_SendToSerial(serial->txBuff, serial->txBuffSize)== MB_OK){
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f503 7291 	add.w	r2, r3, #290	; 0x122
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f005 fe58 	bl	800fdc8 <MBG_SendToSerial>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d142      	bne.n	800a1a4 <TH_MBGateway+0x2d0>
									gVar.mbGateway.custom.slvStartAddr = serial->txBuff[MB_FC_INDEX+1];
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f893 1124 	ldrb.w	r1, [r3, #292]	; 0x124
 800a124:	4a2c      	ldr	r2, [pc, #176]	; (800a1d8 <TH_MBGateway+0x304>)
 800a126:	f641 1399 	movw	r3, #6553	; 0x1999
 800a12a:	4413      	add	r3, r2
 800a12c:	460a      	mov	r2, r1
 800a12e:	701a      	strb	r2, [r3, #0]
									gVar.mbGateway.custom.numOfSlv = serial->txBuff[MB_FC_INDEX+2];
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f893 1125 	ldrb.w	r1, [r3, #293]	; 0x125
 800a136:	4a28      	ldr	r2, [pc, #160]	; (800a1d8 <TH_MBGateway+0x304>)
 800a138:	f641 139a 	movw	r3, #6554	; 0x199a
 800a13c:	4413      	add	r3, r2
 800a13e:	460a      	mov	r2, r1
 800a140:	701a      	strb	r2, [r3, #0]
									if(serial->protocol == MBS_PROTO_RTU_CLUSTER_DMA){
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	785b      	ldrb	r3, [r3, #1]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d112      	bne.n	800a170 <TH_MBGateway+0x29c>
										gVar.mbGateway.isReqSent = 0;
 800a14a:	4a23      	ldr	r2, [pc, #140]	; (800a1d8 <TH_MBGateway+0x304>)
 800a14c:	f641 1371 	movw	r3, #6513	; 0x1971
 800a150:	4413      	add	r3, r2
 800a152:	2200      	movs	r2, #0
 800a154:	701a      	strb	r2, [r3, #0]
										gVar.mbGateway.isBusy = 1;
 800a156:	4a20      	ldr	r2, [pc, #128]	; (800a1d8 <TH_MBGateway+0x304>)
 800a158:	f641 1370 	movw	r3, #6512	; 0x1970
 800a15c:	4413      	add	r3, r2
 800a15e:	2201      	movs	r2, #1
 800a160:	701a      	strb	r2, [r3, #0]
										serial->isBusy = 1;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2201      	movs	r2, #1
 800a166:	751a      	strb	r2, [r3, #20]
										MBG_StartTimeout(&gVar.mbGateway.rplyTimer);
 800a168:	481e      	ldr	r0, [pc, #120]	; (800a1e4 <TH_MBGateway+0x310>)
 800a16a:	f005 fdc1 	bl	800fcf0 <MBG_StartTimeout>
					break;
 800a16e:	e0ad      	b.n	800a2cc <TH_MBGateway+0x3f8>
										gVar.mbGateway.txBuffSize = 0;
 800a170:	4a19      	ldr	r2, [pc, #100]	; (800a1d8 <TH_MBGateway+0x304>)
 800a172:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a176:	4413      	add	r3, r2
 800a178:	2200      	movs	r2, #0
 800a17a:	801a      	strh	r2, [r3, #0]
										gVar.mbGateway.isReqSent = 1;
 800a17c:	4a16      	ldr	r2, [pc, #88]	; (800a1d8 <TH_MBGateway+0x304>)
 800a17e:	f641 1371 	movw	r3, #6513	; 0x1971
 800a182:	4413      	add	r3, r2
 800a184:	2201      	movs	r2, #1
 800a186:	701a      	strb	r2, [r3, #0]
										gVar.mbGateway.isBusy = 0;
 800a188:	4a13      	ldr	r2, [pc, #76]	; (800a1d8 <TH_MBGateway+0x304>)
 800a18a:	f641 1370 	movw	r3, #6512	; 0x1970
 800a18e:	4413      	add	r3, r2
 800a190:	2200      	movs	r2, #0
 800a192:	701a      	strb	r2, [r3, #0]
										serial->txBuffSize = 0;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	2200      	movs	r2, #0
 800a198:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
										serial->isBusy = 0;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	751a      	strb	r2, [r3, #20]
					break;
 800a1a2:	e093      	b.n	800a2cc <TH_MBGateway+0x3f8>
									gVar.mbGateway.txBuffSize = 0;
 800a1a4:	4a0c      	ldr	r2, [pc, #48]	; (800a1d8 <TH_MBGateway+0x304>)
 800a1a6:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a1aa:	4413      	add	r3, r2
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	801a      	strh	r2, [r3, #0]
									gVar.mbGateway.isReqSent = 1;
 800a1b0:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <TH_MBGateway+0x304>)
 800a1b2:	f641 1371 	movw	r3, #6513	; 0x1971
 800a1b6:	4413      	add	r3, r2
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	701a      	strb	r2, [r3, #0]
									gVar.mbGateway.isBusy = 0;
 800a1bc:	4a06      	ldr	r2, [pc, #24]	; (800a1d8 <TH_MBGateway+0x304>)
 800a1be:	f641 1370 	movw	r3, #6512	; 0x1970
 800a1c2:	4413      	add	r3, r2
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
									serial->txBuffSize = 0;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
									serial->isBusy = 0;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	751a      	strb	r2, [r3, #20]
					break;
 800a1d6:	e079      	b.n	800a2cc <TH_MBGateway+0x3f8>
 800a1d8:	24002050 	.word	0x24002050
 800a1dc:	240026d8 	.word	0x240026d8
 800a1e0:	24003c9c 	.word	0x24003c9c
 800a1e4:	240039a8 	.word	0x240039a8
			}
		}else if(MBTCP_isFunCodeValid(gVar.mbGateway.custom.funCode)>0U){		// for standard function code
 800a1e8:	4a3b      	ldr	r2, [pc, #236]	; (800a2d8 <TH_MBGateway+0x404>)
 800a1ea:	f641 1398 	movw	r3, #6552	; 0x1998
 800a1ee:	4413      	add	r3, r2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f008 fdac 	bl	8012d50 <MBTCP_isFunCodeValid>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d067      	beq.n	800a2ce <TH_MBGateway+0x3fa>

			MBS_Serial *serial;
			serial = &gVar.mbSerial;
 800a1fe:	4b37      	ldr	r3, [pc, #220]	; (800a2dc <TH_MBGateway+0x408>)
 800a200:	61fb      	str	r3, [r7, #28]
			/*1. Check the serial port is not busy-----* */

				/*2. convert TCP to RTU format-----* */
//				serial->txBuffSize = MBG_ConvertTCP2RTU(serial->txBuff,gVar.mbGateway.txBuff, gVar.mbGateway.txBuffSize);

				memcpy(serial->txBuff,gVar.mbGateway.txBuff, gVar.mbGateway.txBuffSize );
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	f503 7091 	add.w	r0, r3, #290	; 0x122
 800a208:	4a33      	ldr	r2, [pc, #204]	; (800a2d8 <TH_MBGateway+0x404>)
 800a20a:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a20e:	4413      	add	r3, r2
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	4932      	ldr	r1, [pc, #200]	; (800a2e0 <TH_MBGateway+0x40c>)
 800a216:	f01c fa7f 	bl	8026718 <memcpy>
				serial->txBuffSize = gVar.mbGateway.txBuffSize;
 800a21a:	4a2f      	ldr	r2, [pc, #188]	; (800a2d8 <TH_MBGateway+0x404>)
 800a21c:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a220:	4413      	add	r3, r2
 800a222:	881a      	ldrh	r2, [r3, #0]
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
				MBTOOL_SplitU16ToBytes(&serial->txBuff[serial->txBuffSize +1],
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800a230:	3301      	adds	r3, #1
 800a232:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	4413      	add	r3, r2
 800a23a:	1c9c      	adds	r4, r3, #2
						&serial->txBuff[serial->txBuffSize],
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
				MBTOOL_SplitU16ToBytes(&serial->txBuff[serial->txBuffSize +1],
 800a242:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	4413      	add	r3, r2
 800a24a:	1c9d      	adds	r5, r3, #2
 800a24c:	4a22      	ldr	r2, [pc, #136]	; (800a2d8 <TH_MBGateway+0x404>)
 800a24e:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a252:	4413      	add	r3, r2
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	4619      	mov	r1, r3
 800a258:	4821      	ldr	r0, [pc, #132]	; (800a2e0 <TH_MBGateway+0x40c>)
 800a25a:	f004 fecd 	bl	800eff8 <MB_CalcCRC16>
 800a25e:	4603      	mov	r3, r0
 800a260:	461a      	mov	r2, r3
 800a262:	4629      	mov	r1, r5
 800a264:	4620      	mov	r0, r4
 800a266:	f008 fe7b 	bl	8012f60 <MBTOOL_SplitU16ToBytes>
						MB_CalcCRC16(gVar.mbGateway.txBuff,
								gVar.mbGateway.txBuffSize));
				serial->txBuffSize += 2;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800a270:	3302      	adds	r3, #2
 800a272:	b29a      	uxth	r2, r3
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224

//				DEBUG_SPRINT_NL(" RTU %d: ", serial->txBuffSize);
//				for(uint8_t i = 0; i < serial->txBuffSize; i++){
//					DEBUG_SPRINT("%02X ",serial->txBuff[i]);
//				}
				if(serial->txBuffSize>0){
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800a280:	2b00      	cmp	r3, #0
 800a282:	d024      	beq.n	800a2ce <TH_MBGateway+0x3fa>

					serial->mode = MBS_MODE_GATEWAY;
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	2203      	movs	r2, #3
 800a288:	701a      	strb	r2, [r3, #0]
//					MBG_SetTCPClientId(msg.id);
//					MBG_SetTCPClientKey(msg.key);
//					MBG_SetTCPHeader(&header);	// set the transaction id to track the msg later
	//					DEBUG_SPRINT_NL("dend:refId: %ld  gid: %ld, gkey: %d ",msg.id,  MBG_GetTCPClientId(), MBG_GetTCPClientKey());
//					DEBUG_SPRINT_NL("MBG Send ---- ");
					if(MBG_SendToSerial(serial->txBuff, serial->txBuffSize)== MB_OK){
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	f503 7291 	add.w	r2, r3, #290	; 0x122
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800a296:	4619      	mov	r1, r3
 800a298:	4610      	mov	r0, r2
 800a29a:	f005 fd95 	bl	800fdc8 <MBG_SendToSerial>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d10b      	bne.n	800a2bc <TH_MBGateway+0x3e8>
						gVar.mbGateway.isReqSent = 1;
 800a2a4:	4a0c      	ldr	r2, [pc, #48]	; (800a2d8 <TH_MBGateway+0x404>)
 800a2a6:	f641 1371 	movw	r3, #6513	; 0x1971
 800a2aa:	4413      	add	r3, r2
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	701a      	strb	r2, [r3, #0]
						gVar.mbGateway.isBusy = 1;
 800a2b0:	4a09      	ldr	r2, [pc, #36]	; (800a2d8 <TH_MBGateway+0x404>)
 800a2b2:	f641 1370 	movw	r3, #6512	; 0x1970
 800a2b6:	4413      	add	r3, r2
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	701a      	strb	r2, [r3, #0]

					}

						MBG_StartTimeout(&gVar.mbGateway.rplyTimer);
 800a2bc:	4809      	ldr	r0, [pc, #36]	; (800a2e4 <TH_MBGateway+0x410>)
 800a2be:	f005 fd17 	bl	800fcf0 <MBG_StartTimeout>
	}




}
 800a2c2:	e004      	b.n	800a2ce <TH_MBGateway+0x3fa>
					break;
 800a2c4:	bf00      	nop
 800a2c6:	e002      	b.n	800a2ce <TH_MBGateway+0x3fa>
							break;
 800a2c8:	bf00      	nop
 800a2ca:	e000      	b.n	800a2ce <TH_MBGateway+0x3fa>
					break;
 800a2cc:	bf00      	nop
}
 800a2ce:	bf00      	nop
 800a2d0:	3720      	adds	r7, #32
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	24002050 	.word	0x24002050
 800a2dc:	240026d8 	.word	0x240026d8
 800a2e0:	24003c9c 	.word	0x24003c9c
 800a2e4:	240039a8 	.word	0x240039a8

0800a2e8 <TH_MBGWCheckTimeOut>:

void TH_MBGWCheckTimeOut(void){
 800a2e8:	b590      	push	{r4, r7, lr}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0

	// timeout function-------------------------------------------------------
	if(MBG_CheckTimeout(&gVar.mbGateway.rplyTimer) == MB_OK){
 800a2ee:	48a5      	ldr	r0, [pc, #660]	; (800a584 <TH_MBGWCheckTimeOut+0x29c>)
 800a2f0:	f005 fd3a 	bl	800fd68 <MBG_CheckTimeout>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	f040 8198 	bne.w	800a62c <TH_MBGWCheckTimeOut+0x344>
		 * 1. reset timer
		 * 2. set false sub packet for the slave which is not responded to gateway msg que
		 * 3. go for waiting for next slave
		 * */
		//	1. reset timer
		MBG_ResetTimeout(&gVar.mbGateway.rplyTimer);
 800a2fc:	48a1      	ldr	r0, [pc, #644]	; (800a584 <TH_MBGWCheckTimeOut+0x29c>)
 800a2fe:	f005 fd21 	bl	800fd44 <MBG_ResetTimeout>
		gVar.mbGateway.isRegularFC = 0;			// unlock the receive event for the server which is locked by the regular function code
 800a302:	4aa1      	ldr	r2, [pc, #644]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a304:	f641 1390 	movw	r3, #6544	; 0x1990
 800a308:	4413      	add	r3, r2
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]

		//2. set false sub packet for the slave which is not responded to gateway msg que
		/* for regular function code------*/
		if(MBTCP_isFunCodeValid(gVar.mbGateway.custom.funCode)>0U) {
 800a30e:	4a9e      	ldr	r2, [pc, #632]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a310:	f641 1398 	movw	r3, #6552	; 0x1998
 800a314:	4413      	add	r3, r2
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	4618      	mov	r0, r3
 800a31a:	f008 fd19 	bl	8012d50 <MBTCP_isFunCodeValid>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 813b 	beq.w	800a59c <TH_MBGWCheckTimeOut+0x2b4>
//			MBG_StopTimeout(&gVar.mbGateway.rplyTimer);

			gVar.mbGateway.rxBuffSize = 0;
 800a326:	4a98      	ldr	r2, [pc, #608]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a328:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a32c:	4413      	add	r3, r2
 800a32e:	2200      	movs	r2, #0
 800a330:	801a      	strh	r2, [r3, #0]
			gVar.mbGateway.rxBuff[gVar.mbGateway.rxBuffSize++] = gVar.mbGateway.txBuff[MB_SA_INDEX];
 800a332:	4a95      	ldr	r2, [pc, #596]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a334:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a338:	4413      	add	r3, r2
 800a33a:	881a      	ldrh	r2, [r3, #0]
 800a33c:	1c53      	adds	r3, r2, #1
 800a33e:	b298      	uxth	r0, r3
 800a340:	4991      	ldr	r1, [pc, #580]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a342:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a346:	440b      	add	r3, r1
 800a348:	4601      	mov	r1, r0
 800a34a:	8019      	strh	r1, [r3, #0]
 800a34c:	4610      	mov	r0, r2
 800a34e:	4a8e      	ldr	r2, [pc, #568]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a350:	f641 434c 	movw	r3, #7244	; 0x1c4c
 800a354:	4413      	add	r3, r2
 800a356:	7819      	ldrb	r1, [r3, #0]
 800a358:	4b8b      	ldr	r3, [pc, #556]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a35a:	181a      	adds	r2, r3, r0
 800a35c:	f641 534c 	movw	r3, #7500	; 0x1d4c
 800a360:	4413      	add	r3, r2
 800a362:	460a      	mov	r2, r1
 800a364:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.rxBuff[gVar.mbGateway.rxBuffSize++] = gVar.mbGateway.txBuff[MB_FC_INDEX]+MB_EFC_OFFSET;
 800a366:	4a88      	ldr	r2, [pc, #544]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a368:	f641 434d 	movw	r3, #7245	; 0x1c4d
 800a36c:	4413      	add	r3, r2
 800a36e:	7819      	ldrb	r1, [r3, #0]
 800a370:	4a85      	ldr	r2, [pc, #532]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a372:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a376:	4413      	add	r3, r2
 800a378:	881a      	ldrh	r2, [r3, #0]
 800a37a:	1c53      	adds	r3, r2, #1
 800a37c:	b29c      	uxth	r4, r3
 800a37e:	4882      	ldr	r0, [pc, #520]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a380:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a384:	4403      	add	r3, r0
 800a386:	4620      	mov	r0, r4
 800a388:	8018      	strh	r0, [r3, #0]
 800a38a:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
 800a38e:	b2d9      	uxtb	r1, r3
 800a390:	4b7d      	ldr	r3, [pc, #500]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a392:	441a      	add	r2, r3
 800a394:	f641 534c 	movw	r3, #7500	; 0x1d4c
 800a398:	4413      	add	r3, r2
 800a39a:	460a      	mov	r2, r1
 800a39c:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.rxBuff[gVar.mbGateway.rxBuffSize++] = MB_EC_GTDFR_11;
 800a39e:	4a7a      	ldr	r2, [pc, #488]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a3a0:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a3a4:	4413      	add	r3, r2
 800a3a6:	881a      	ldrh	r2, [r3, #0]
 800a3a8:	1c53      	adds	r3, r2, #1
 800a3aa:	b298      	uxth	r0, r3
 800a3ac:	4976      	ldr	r1, [pc, #472]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a3ae:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a3b2:	440b      	add	r3, r1
 800a3b4:	4601      	mov	r1, r0
 800a3b6:	8019      	strh	r1, [r3, #0]
 800a3b8:	4b73      	ldr	r3, [pc, #460]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a3ba:	441a      	add	r2, r3
 800a3bc:	f641 534c 	movw	r3, #7500	; 0x1d4c
 800a3c0:	4413      	add	r3, r2
 800a3c2:	220b      	movs	r2, #11
 800a3c4:	701a      	strb	r2, [r3, #0]

			MBTCPS_ClientParams *client;
			uint8_t clientIndex = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	71fb      	strb	r3, [r7, #7]
			/* 2. find the client who actually own the response*/
			if(MBTCPS_FindClientByIdAndPort(&gVar.mbTCPServer,
 800a3ca:	4b6f      	ldr	r3, [pc, #444]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a3cc:	f503 53ca 	add.w	r3, r3, #6464	; 0x1940
 800a3d0:	6819      	ldr	r1, [r3, #0]
					gVar.mbGateway.clientId, gVar.mbGateway.clientKey) != MB_OK){
 800a3d2:	4a6d      	ldr	r2, [pc, #436]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a3d4:	f641 1344 	movw	r3, #6468	; 0x1944
 800a3d8:	4413      	add	r3, r2
 800a3da:	881b      	ldrh	r3, [r3, #0]
			if(MBTCPS_FindClientByIdAndPort(&gVar.mbTCPServer,
 800a3dc:	461a      	mov	r2, r3
 800a3de:	486b      	ldr	r0, [pc, #428]	; (800a58c <TH_MBGWCheckTimeOut+0x2a4>)
 800a3e0:	f008 fd7c 	bl	8012edc <MBTCPS_FindClientByIdAndPort>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d045      	beq.n	800a476 <TH_MBGWCheckTimeOut+0x18e>
				gVar.mbSerial.isBusy = 0;
 800a3ea:	4b67      	ldr	r3, [pc, #412]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
				gVar.mbGateway.isBusy = 0;
 800a3f2:	4a65      	ldr	r2, [pc, #404]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a3f4:	f641 1370 	movw	r3, #6512	; 0x1970
 800a3f8:	4413      	add	r3, r2
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
				gVar.mbGateway.isReqSent = 0;
 800a3fe:	4a62      	ldr	r2, [pc, #392]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a400:	f641 1371 	movw	r3, #6513	; 0x1971
 800a404:	4413      	add	r3, r2
 800a406:	2200      	movs	r2, #0
 800a408:	701a      	strb	r2, [r3, #0]
				gVar.mbGateway.txBuffSize = 0;
 800a40a:	4a5f      	ldr	r2, [pc, #380]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a40c:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a410:	4413      	add	r3, r2
 800a412:	2200      	movs	r2, #0
 800a414:	801a      	strh	r2, [r3, #0]
				gVar.mbGateway.rxBuffSize = 0;
 800a416:	4a5c      	ldr	r2, [pc, #368]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a418:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a41c:	4413      	add	r3, r2
 800a41e:	2200      	movs	r2, #0
 800a420:	801a      	strh	r2, [r3, #0]
				gVar.mbSerial.txBuffSize = 0;
 800a422:	4b59      	ldr	r3, [pc, #356]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a424:	2200      	movs	r2, #0
 800a426:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac
				gVar.mbSerial.rxBuffSize = 0;
 800a42a:	4b57      	ldr	r3, [pc, #348]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
				gVar.mbGateway.custom.funCode = 0;
 800a432:	4a55      	ldr	r2, [pc, #340]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a434:	f641 1398 	movw	r3, #6552	; 0x1998
 800a438:	4413      	add	r3, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	701a      	strb	r2, [r3, #0]
				gVar.mbGateway.custom.rcvdCount = 0;
 800a43e:	4a52      	ldr	r2, [pc, #328]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a440:	f641 13d1 	movw	r3, #6609	; 0x19d1
 800a444:	4413      	add	r3, r2
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
				gVar.mbGateway.custom.slvStartAddr = 0;
 800a44a:	4a4f      	ldr	r2, [pc, #316]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a44c:	f641 1399 	movw	r3, #6553	; 0x1999
 800a450:	4413      	add	r3, r2
 800a452:	2200      	movs	r2, #0
 800a454:	701a      	strb	r2, [r3, #0]
				gVar.mbGateway.custom.numOfSlv = 0;
 800a456:	4a4c      	ldr	r2, [pc, #304]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a458:	f641 139a 	movw	r3, #6554	; 0x199a
 800a45c:	4413      	add	r3, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	701a      	strb	r2, [r3, #0]
				MBS_ClearRXBuffer(&gVar.mbSerial);
 800a462:	484b      	ldr	r0, [pc, #300]	; (800a590 <TH_MBGWCheckTimeOut+0x2a8>)
 800a464:	f008 fb4e 	bl	8012b04 <MBS_ClearRXBuffer>
				MBS_ClearTXBuffer(&gVar.mbSerial);
 800a468:	4849      	ldr	r0, [pc, #292]	; (800a590 <TH_MBGWCheckTimeOut+0x2a8>)
 800a46a:	f008 fb3d 	bl	8012ae8 <MBS_ClearTXBuffer>
				MBG_StopTimeout(&gVar.mbGateway.rplyTimer);
 800a46e:	4845      	ldr	r0, [pc, #276]	; (800a584 <TH_MBGWCheckTimeOut+0x29c>)
 800a470:	f005 fc54 	bl	800fd1c <MBG_StopTimeout>
				return;
 800a474:	e0e9      	b.n	800a64a <TH_MBGWCheckTimeOut+0x362>
			}
			clientIndex = gVar.mbTCPServer.clientIndex;
 800a476:	4b44      	ldr	r3, [pc, #272]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a478:	f893 3bea 	ldrb.w	r3, [r3, #3050]	; 0xbea
 800a47c:	71fb      	strb	r3, [r7, #7]
			client = &gVar.mbTCPServer.clients[clientIndex];
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800a484:	fb02 f303 	mul.w	r3, r2, r3
 800a488:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800a48c:	4a3e      	ldr	r2, [pc, #248]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a48e:	4413      	add	r3, r2
 800a490:	3304      	adds	r3, #4
 800a492:	603b      	str	r3, [r7, #0]


			/*convert the packet RTU to TCP*/
			// 2 is added here because inside this function 2 is subtracted for 2 byte crc but we have no crc
			MBG_ConvertRTU2TCP(client->txBuff, gVar.mbGateway.rxBuff, gVar.mbGateway.rxBuffSize+2);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	f203 1083 	addw	r0, r3, #387	; 0x183
 800a49a:	4a3b      	ldr	r2, [pc, #236]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a49c:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a4a0:	4413      	add	r3, r2
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	3302      	adds	r3, #2
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	493a      	ldr	r1, [pc, #232]	; (800a594 <TH_MBGWCheckTimeOut+0x2ac>)
 800a4ac:	f005 fbfe 	bl	800fcac <MBG_ConvertRTU2TCP>

			client->txBuffSize = gVar.mbGateway.rxBuffSize;
 800a4b0:	4a35      	ldr	r2, [pc, #212]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a4b2:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a4b6:	4413      	add	r3, r2
 800a4b8:	881a      	ldrh	r2, [r3, #0]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee

			gVar.mbGateway.tcpHeader.length = client->txBuffSize;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	f8b3 12ee 	ldrh.w	r1, [r3, #750]	; 0x2ee
 800a4c6:	4a30      	ldr	r2, [pc, #192]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a4c8:	f641 134a 	movw	r3, #6474	; 0x194a
 800a4cc:	4413      	add	r3, r2
 800a4ce:	460a      	mov	r2, r1
 800a4d0:	801a      	strh	r2, [r3, #0]
			MBTCP_SetHeader(client->txBuff, &gVar.mbGateway.tcpHeader);		// set the tcp header to te tx buffer
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	f203 1383 	addw	r3, r3, #387	; 0x183
 800a4d8:	492f      	ldr	r1, [pc, #188]	; (800a598 <TH_MBGWCheckTimeOut+0x2b0>)
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f008 fc10 	bl	8012d00 <MBTCP_SetHeader>
			client->txBuffSize = client->txBuffSize + MBTCP_INDX_HEADER_MAX-1;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
 800a4e6:	3306      	adds	r3, #6
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee
			gVar.mbSerial.isBusy = 0;
 800a4f0:	4b25      	ldr	r3, [pc, #148]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
			MBTCPS_Send(client);
 800a4f8:	6838      	ldr	r0, [r7, #0]
 800a4fa:	f008 fd23 	bl	8012f44 <MBTCPS_Send>
			gVar.mbGateway.isBusy = 0;
 800a4fe:	4a22      	ldr	r2, [pc, #136]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a500:	f641 1370 	movw	r3, #6512	; 0x1970
 800a504:	4413      	add	r3, r2
 800a506:	2200      	movs	r2, #0
 800a508:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.isReqSent = 0;
 800a50a:	4a1f      	ldr	r2, [pc, #124]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a50c:	f641 1371 	movw	r3, #6513	; 0x1971
 800a510:	4413      	add	r3, r2
 800a512:	2200      	movs	r2, #0
 800a514:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.txBuffSize = 0;
 800a516:	4a1c      	ldr	r2, [pc, #112]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a518:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a51c:	4413      	add	r3, r2
 800a51e:	2200      	movs	r2, #0
 800a520:	801a      	strh	r2, [r3, #0]
			gVar.mbGateway.rxBuffSize = 0;
 800a522:	4a19      	ldr	r2, [pc, #100]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a524:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a528:	4413      	add	r3, r2
 800a52a:	2200      	movs	r2, #0
 800a52c:	801a      	strh	r2, [r3, #0]
			gVar.mbSerial.txBuffSize = 0;
 800a52e:	4b16      	ldr	r3, [pc, #88]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a530:	2200      	movs	r2, #0
 800a532:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac
			gVar.mbSerial.rxBuffSize = 0;
 800a536:	4b14      	ldr	r3, [pc, #80]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a538:	2200      	movs	r2, #0
 800a53a:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
			gVar.mbGateway.custom.funCode = 0;
 800a53e:	4a12      	ldr	r2, [pc, #72]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a540:	f641 1398 	movw	r3, #6552	; 0x1998
 800a544:	4413      	add	r3, r2
 800a546:	2200      	movs	r2, #0
 800a548:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.rcvdCount = 0;
 800a54a:	4a0f      	ldr	r2, [pc, #60]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a54c:	f641 13d1 	movw	r3, #6609	; 0x19d1
 800a550:	4413      	add	r3, r2
 800a552:	2200      	movs	r2, #0
 800a554:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.slvStartAddr = 0;
 800a556:	4a0c      	ldr	r2, [pc, #48]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a558:	f641 1399 	movw	r3, #6553	; 0x1999
 800a55c:	4413      	add	r3, r2
 800a55e:	2200      	movs	r2, #0
 800a560:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.numOfSlv = 0;
 800a562:	4a09      	ldr	r2, [pc, #36]	; (800a588 <TH_MBGWCheckTimeOut+0x2a0>)
 800a564:	f641 139a 	movw	r3, #6554	; 0x199a
 800a568:	4413      	add	r3, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
			MBS_ClearRXBuffer(&gVar.mbSerial);
 800a56e:	4808      	ldr	r0, [pc, #32]	; (800a590 <TH_MBGWCheckTimeOut+0x2a8>)
 800a570:	f008 fac8 	bl	8012b04 <MBS_ClearRXBuffer>
			MBS_ClearTXBuffer(&gVar.mbSerial);
 800a574:	4806      	ldr	r0, [pc, #24]	; (800a590 <TH_MBGWCheckTimeOut+0x2a8>)
 800a576:	f008 fab7 	bl	8012ae8 <MBS_ClearTXBuffer>
			MBG_StopTimeout(&gVar.mbGateway.rplyTimer);
 800a57a:	4802      	ldr	r0, [pc, #8]	; (800a584 <TH_MBGWCheckTimeOut+0x29c>)
 800a57c:	f005 fbce 	bl	800fd1c <MBG_StopTimeout>
 800a580:	e054      	b.n	800a62c <TH_MBGWCheckTimeOut+0x344>
 800a582:	bf00      	nop
 800a584:	240039a8 	.word	0x240039a8
 800a588:	24002050 	.word	0x24002050
 800a58c:	24002c38 	.word	0x24002c38
 800a590:	240026d8 	.word	0x240026d8
 800a594:	24003d9c 	.word	0x24003d9c
 800a598:	24003996 	.word	0x24003996
		}else if(gVar.mbGateway.custom.funCode == MB_CFC_WMHRCO_109){
 800a59c:	4a2c      	ldr	r2, [pc, #176]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a59e:	f641 1398 	movw	r3, #6552	; 0x1998
 800a5a2:	4413      	add	r3, r2
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b6d      	cmp	r3, #109	; 0x6d
 800a5a8:	d140      	bne.n	800a62c <TH_MBGWCheckTimeOut+0x344>
			gVar.mbGateway.isBusy = 0;
 800a5aa:	4a29      	ldr	r2, [pc, #164]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a5ac:	f641 1370 	movw	r3, #6512	; 0x1970
 800a5b0:	4413      	add	r3, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.isReqSent = 0;
 800a5b6:	4a26      	ldr	r2, [pc, #152]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a5b8:	f641 1371 	movw	r3, #6513	; 0x1971
 800a5bc:	4413      	add	r3, r2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.txBuffSize = 0;
 800a5c2:	4a23      	ldr	r2, [pc, #140]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a5c4:	f641 634c 	movw	r3, #7756	; 0x1e4c
 800a5c8:	4413      	add	r3, r2
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	801a      	strh	r2, [r3, #0]
			gVar.mbGateway.rxBuffSize = 0;
 800a5ce:	4a20      	ldr	r2, [pc, #128]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a5d0:	f641 634e 	movw	r3, #7758	; 0x1e4e
 800a5d4:	4413      	add	r3, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	801a      	strh	r2, [r3, #0]
			gVar.mbSerial.txBuffSize = 0;
 800a5da:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac
			gVar.mbSerial.rxBuffSize = 0;
 800a5e2:	4b1b      	ldr	r3, [pc, #108]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
//			gVar.mbSerial.mode = MBS_MODE_NONE;
			gVar.mbGateway.custom.funCode = 0;
 800a5ea:	4a19      	ldr	r2, [pc, #100]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a5ec:	f641 1398 	movw	r3, #6552	; 0x1998
 800a5f0:	4413      	add	r3, r2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.rcvdCount = 0;
 800a5f6:	4a16      	ldr	r2, [pc, #88]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a5f8:	f641 13d1 	movw	r3, #6609	; 0x19d1
 800a5fc:	4413      	add	r3, r2
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.slvStartAddr = 0;
 800a602:	4a13      	ldr	r2, [pc, #76]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a604:	f641 1399 	movw	r3, #6553	; 0x1999
 800a608:	4413      	add	r3, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
			gVar.mbGateway.custom.numOfSlv = 0;
 800a60e:	4a10      	ldr	r2, [pc, #64]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a610:	f641 139a 	movw	r3, #6554	; 0x199a
 800a614:	4413      	add	r3, r2
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
			MBG_StopTimeout(&gVar.mbGateway.rplyTimer);
 800a61a:	480e      	ldr	r0, [pc, #56]	; (800a654 <TH_MBGWCheckTimeOut+0x36c>)
 800a61c:	f005 fb7e 	bl	800fd1c <MBG_StopTimeout>
			MBS_ClearRXBuffer(&gVar.mbSerial);
 800a620:	480d      	ldr	r0, [pc, #52]	; (800a658 <TH_MBGWCheckTimeOut+0x370>)
 800a622:	f008 fa6f 	bl	8012b04 <MBS_ClearRXBuffer>
			MBS_ClearTXBuffer(&gVar.mbSerial);
 800a626:	480c      	ldr	r0, [pc, #48]	; (800a658 <TH_MBGWCheckTimeOut+0x370>)
 800a628:	f008 fa5e 	bl	8012ae8 <MBS_ClearTXBuffer>
		}
	}

	// time out function for regular function code
	if(MBG_CheckTimeout(&gVar.mbGateway.rplyTimRglrFC)==MB_OK){
 800a62c:	480b      	ldr	r0, [pc, #44]	; (800a65c <TH_MBGWCheckTimeOut+0x374>)
 800a62e:	f005 fb9b 	bl	800fd68 <MBG_CheckTimeout>
 800a632:	4603      	mov	r3, r0
 800a634:	2b01      	cmp	r3, #1
 800a636:	d108      	bne.n	800a64a <TH_MBGWCheckTimeOut+0x362>
		MBG_StopTimeout(&gVar.mbGateway.rplyTimRglrFC);
 800a638:	4808      	ldr	r0, [pc, #32]	; (800a65c <TH_MBGWCheckTimeOut+0x374>)
 800a63a:	f005 fb6f 	bl	800fd1c <MBG_StopTimeout>
		gVar.mbGateway.isRegularFC = 0;
 800a63e:	4a04      	ldr	r2, [pc, #16]	; (800a650 <TH_MBGWCheckTimeOut+0x368>)
 800a640:	f641 1390 	movw	r3, #6544	; 0x1990
 800a644:	4413      	add	r3, r2
 800a646:	2200      	movs	r2, #0
 800a648:	701a      	strb	r2, [r3, #0]
	}
}
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd90      	pop	{r4, r7, pc}
 800a650:	24002050 	.word	0x24002050
 800a654:	240039a8 	.word	0x240039a8
 800a658:	240026d8 	.word	0x240026d8
 800a65c:	240039c8 	.word	0x240039c8

0800a660 <TH_MBSerial>:
  * @brief  Modbus gatewayhandler function
  * @param  none
  * @retval none
  */

void TH_MBSerial(void){
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0

	switch (gVar.mbSerial.mode) {
 800a666:	4b6f      	ldr	r3, [pc, #444]	; (800a824 <TH_MBSerial+0x1c4>)
 800a668:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	f000 80cd 	beq.w	800a80c <TH_MBSerial+0x1ac>
 800a672:	2b03      	cmp	r3, #3
 800a674:	f300 80ce 	bgt.w	800a814 <TH_MBSerial+0x1b4>
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d003      	beq.n	800a684 <TH_MBSerial+0x24>
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	f000 80c0 	beq.w	800a802 <TH_MBSerial+0x1a2>
			break;
		case MBS_MODE_GATEWAY:
			TH_MBTCPSRecvRespGW(&gVar.mbTCPServer);
			break;
		default:
			break;
 800a682:	e0c7      	b.n	800a814 <TH_MBSerial+0x1b4>
			const uint8_t dataStart = 4; // for the received data from serial for custom function code
 800a684:	2304      	movs	r3, #4
 800a686:	71fb      	strb	r3, [r7, #7]
			if(gVar.mbSerial.isDataReceived && gVar.mbSerial.rxBuffSize > 0){
 800a688:	4b66      	ldr	r3, [pc, #408]	; (800a824 <TH_MBSerial+0x1c4>)
 800a68a:	f893 369b 	ldrb.w	r3, [r3, #1691]	; 0x69b
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 80c2 	beq.w	800a818 <TH_MBSerial+0x1b8>
 800a694:	4b63      	ldr	r3, [pc, #396]	; (800a824 <TH_MBSerial+0x1c4>)
 800a696:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 80bc 	beq.w	800a818 <TH_MBSerial+0x1b8>
				gVar.mbSerial.isDataReceived = 0;
 800a6a0:	4b60      	ldr	r3, [pc, #384]	; (800a824 <TH_MBSerial+0x1c4>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
				uint8_t brCastAddr = gVar.mbSerial.rxBuff[MB_SA_INDEX];
 800a6a8:	4b5e      	ldr	r3, [pc, #376]	; (800a824 <TH_MBSerial+0x1c4>)
 800a6aa:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 800a6ae:	71bb      	strb	r3, [r7, #6]
				uint8_t funCode = gVar.mbSerial.rxBuff[MB_FC_INDEX];
 800a6b0:	4b5c      	ldr	r3, [pc, #368]	; (800a824 <TH_MBSerial+0x1c4>)
 800a6b2:	f893 36ab 	ldrb.w	r3, [r3, #1707]	; 0x6ab
 800a6b6:	717b      	strb	r3, [r7, #5]
				uint8_t slvAddr = gVar.mbSerial.rxBuff[MB_FC_INDEX+1];
 800a6b8:	4b5a      	ldr	r3, [pc, #360]	; (800a824 <TH_MBSerial+0x1c4>)
 800a6ba:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 800a6be:	713b      	strb	r3, [r7, #4]
				if(brCastAddr == MB_BROADCAST_ADDR && (funCode == MB_CFC_RIRDI_107 || funCode == (MB_CFC_RIRDI_107+MB_EFC_OFFSET)) &&
 800a6c0:	79bb      	ldrb	r3, [r7, #6]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d177      	bne.n	800a7b6 <TH_MBSerial+0x156>
 800a6c6:	797b      	ldrb	r3, [r7, #5]
 800a6c8:	2b6b      	cmp	r3, #107	; 0x6b
 800a6ca:	d002      	beq.n	800a6d2 <TH_MBSerial+0x72>
 800a6cc:	797b      	ldrb	r3, [r7, #5]
 800a6ce:	2beb      	cmp	r3, #235	; 0xeb
 800a6d0:	d171      	bne.n	800a7b6 <TH_MBSerial+0x156>
						slvAddr >= gVar.mbRTUMaster.custom.slvStartAddr &&
 800a6d2:	4b54      	ldr	r3, [pc, #336]	; (800a824 <TH_MBSerial+0x1c4>)
 800a6d4:	f893 3971 	ldrb.w	r3, [r3, #2417]	; 0x971
				if(brCastAddr == MB_BROADCAST_ADDR && (funCode == MB_CFC_RIRDI_107 || funCode == (MB_CFC_RIRDI_107+MB_EFC_OFFSET)) &&
 800a6d8:	793a      	ldrb	r2, [r7, #4]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d36b      	bcc.n	800a7b6 <TH_MBSerial+0x156>
						slvAddr <  (gVar.mbRTUMaster.custom.slvStartAddr+gVar.mbRTUMaster.custom.numOfSlv)){
 800a6de:	793a      	ldrb	r2, [r7, #4]
 800a6e0:	4b50      	ldr	r3, [pc, #320]	; (800a824 <TH_MBSerial+0x1c4>)
 800a6e2:	f893 3971 	ldrb.w	r3, [r3, #2417]	; 0x971
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4b4e      	ldr	r3, [pc, #312]	; (800a824 <TH_MBSerial+0x1c4>)
 800a6ea:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 800a6ee:	440b      	add	r3, r1
						slvAddr >= gVar.mbRTUMaster.custom.slvStartAddr &&
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	da60      	bge.n	800a7b6 <TH_MBSerial+0x156>
					uint8_t slvPackStart = dataStart+MB_CUST_DATA_BLOCK_SIZE + (MB_CUST_DATA_BLOCK_SIZE*(slvAddr-gVar.mbRTUMaster.custom.slvStartAddr));//gVar.mbRTUMaster.custom.rcvdCount);
 800a6f4:	4b4b      	ldr	r3, [pc, #300]	; (800a824 <TH_MBSerial+0x1c4>)
 800a6f6:	f893 3971 	ldrb.w	r3, [r3, #2417]	; 0x971
 800a6fa:	793a      	ldrb	r2, [r7, #4]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	0092      	lsls	r2, r2, #2
 800a704:	4413      	add	r3, r2
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	4413      	add	r3, r2
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	330a      	adds	r3, #10
 800a712:	70fb      	strb	r3, [r7, #3]
					const uint8_t startByte = 3; // start byte index in slave response
 800a714:	2303      	movs	r3, #3
 800a716:	70bb      	strb	r3, [r7, #2]
					if(funCode == MB_CFC_RIRDI_107){
 800a718:	797b      	ldrb	r3, [r7, #5]
 800a71a:	2b6b      	cmp	r3, #107	; 0x6b
 800a71c:	d116      	bne.n	800a74c <TH_MBSerial+0xec>
						memcpy(&gVar.mbRTUMaster.rxBuff[slvPackStart], &gVar.mbSerial.rxBuff[startByte],MB_CUST_DATA_BLOCK_SIZE);
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800a724:	4a3f      	ldr	r2, [pc, #252]	; (800a824 <TH_MBSerial+0x1c4>)
 800a726:	1898      	adds	r0, r3, r2
 800a728:	78bb      	ldrb	r3, [r7, #2]
 800a72a:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 800a72e:	4a3d      	ldr	r2, [pc, #244]	; (800a824 <TH_MBSerial+0x1c4>)
 800a730:	4413      	add	r3, r2
 800a732:	3302      	adds	r3, #2
 800a734:	220a      	movs	r2, #10
 800a736:	4619      	mov	r1, r3
 800a738:	f01b ffee 	bl	8026718 <memcpy>
						gVar.mbRTUMaster.rxBuff[slvPackStart+MB_CUST_DATA_BLOCK_SIZE-2] = MB_CUST_ONLINE;
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	3308      	adds	r3, #8
 800a740:	4a38      	ldr	r2, [pc, #224]	; (800a824 <TH_MBSerial+0x1c4>)
 800a742:	4413      	add	r3, r2
 800a744:	2280      	movs	r2, #128	; 0x80
 800a746:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 800a74a:	e019      	b.n	800a780 <TH_MBSerial+0x120>
					}else if(funCode == (MB_CFC_RIRDI_107+MB_EFC_OFFSET)){ // for the error function code
 800a74c:	797b      	ldrb	r3, [r7, #5]
 800a74e:	2beb      	cmp	r3, #235	; 0xeb
 800a750:	d116      	bne.n	800a780 <TH_MBSerial+0x120>
						memset(&gVar.mbRTUMaster.rxBuff[slvPackStart], 0xFF,MB_CUST_DATA_BLOCK_SIZE);		// set 0xFF as there is no valid value
 800a752:	78fb      	ldrb	r3, [r7, #3]
 800a754:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800a758:	4a32      	ldr	r2, [pc, #200]	; (800a824 <TH_MBSerial+0x1c4>)
 800a75a:	4413      	add	r3, r2
 800a75c:	220a      	movs	r2, #10
 800a75e:	21ff      	movs	r1, #255	; 0xff
 800a760:	4618      	mov	r0, r3
 800a762:	f01b ffe7 	bl	8026734 <memset>
						gVar.mbRTUMaster.rxBuff[slvPackStart+MB_CUST_DATA_BLOCK_SIZE-2] = MB_CUST_ONLINE|MB_CUST_ERROR|gVar.mbSerial.rxBuff[MB_CUST_ERROR_BYTE_INDEX];
 800a766:	4b2f      	ldr	r3, [pc, #188]	; (800a824 <TH_MBSerial+0x1c4>)
 800a768:	f893 26ad 	ldrb.w	r2, [r3, #1709]	; 0x6ad
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	3308      	adds	r3, #8
 800a770:	f062 023f 	orn	r2, r2, #63	; 0x3f
 800a774:	b2d1      	uxtb	r1, r2
 800a776:	4a2b      	ldr	r2, [pc, #172]	; (800a824 <TH_MBSerial+0x1c4>)
 800a778:	4413      	add	r3, r2
 800a77a:	460a      	mov	r2, r1
 800a77c:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
					gVar.mbRTUMaster.rxBuffSize = slvPackStart+MB_CUST_DATA_BLOCK_SIZE;
 800a780:	78fb      	ldrb	r3, [r7, #3]
 800a782:	b29b      	uxth	r3, r3
 800a784:	330a      	adds	r3, #10
 800a786:	b29a      	uxth	r2, r3
 800a788:	4b26      	ldr	r3, [pc, #152]	; (800a824 <TH_MBSerial+0x1c4>)
 800a78a:	f8a3 2be0 	strh.w	r2, [r3, #3040]	; 0xbe0
					gVar.mbRTUMaster.custom.rcvFailedCount[gVar.mbRTUMaster.custom.rcvdCount] = 0;
 800a78e:	4b25      	ldr	r3, [pc, #148]	; (800a824 <TH_MBSerial+0x1c4>)
 800a790:	f893 39a9 	ldrb.w	r3, [r3, #2473]	; 0x9a9
 800a794:	461a      	mov	r2, r3
 800a796:	4b23      	ldr	r3, [pc, #140]	; (800a824 <TH_MBSerial+0x1c4>)
 800a798:	4413      	add	r3, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
					gVar.mbRTUMaster.custom.rcvdCount++;
 800a7a0:	4b20      	ldr	r3, [pc, #128]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7a2:	f893 39a9 	ldrb.w	r3, [r3, #2473]	; 0x9a9
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	4b1e      	ldr	r3, [pc, #120]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7ac:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
					MBRM_RestReplyTimer(&gVar.mbRTUMaster.replyTimer);
 800a7b0:	481d      	ldr	r0, [pc, #116]	; (800a828 <TH_MBSerial+0x1c8>)
 800a7b2:	f007 fb37 	bl	8011e24 <MBRM_RestReplyTimer>
				if(gVar.mbRTUMaster.custom.rcvdCount >= gVar.mbRTUMaster.custom.numOfSlv){
 800a7b6:	4b1b      	ldr	r3, [pc, #108]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7b8:	f893 29a9 	ldrb.w	r2, [r3, #2473]	; 0x9a9
 800a7bc:	4b19      	ldr	r3, [pc, #100]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7be:	f893 3972 	ldrb.w	r3, [r3, #2418]	; 0x972
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d30e      	bcc.n	800a7e4 <TH_MBSerial+0x184>
					MBRM_StopReplyTimer(&gVar.mbRTUMaster.replyTimer);
 800a7c6:	4818      	ldr	r0, [pc, #96]	; (800a828 <TH_MBSerial+0x1c8>)
 800a7c8:	f007 fb1e 	bl	8011e08 <MBRM_StopReplyTimer>
					gVar.mbRTUMaster.custom.rcvdCount = 0;
 800a7cc:	4b15      	ldr	r3, [pc, #84]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
					gVar.mbSerial.isBusy = 0;
 800a7d4:	4b13      	ldr	r3, [pc, #76]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
					gVar.mbRTUMaster.isBusy = 0;
 800a7dc:	4b11      	ldr	r3, [pc, #68]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
				MBS_ClearRXBuffer(&gVar.mbSerial);
 800a7e4:	4811      	ldr	r0, [pc, #68]	; (800a82c <TH_MBSerial+0x1cc>)
 800a7e6:	f008 f98d 	bl	8012b04 <MBS_ClearRXBuffer>
				MBS_ClearTXBuffer(&gVar.mbSerial);
 800a7ea:	4810      	ldr	r0, [pc, #64]	; (800a82c <TH_MBSerial+0x1cc>)
 800a7ec:	f008 f97c 	bl	8012ae8 <MBS_ClearTXBuffer>
				gVar.mbSerial.rxBuffSize = 0;
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8a3 28aa 	strh.w	r2, [r3, #2218]	; 0x8aa
				gVar.mbSerial.txBuffSize = 0;
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <TH_MBSerial+0x1c4>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8a3 28ac 	strh.w	r2, [r3, #2220]	; 0x8ac
			}break;
 800a800:	e00a      	b.n	800a818 <TH_MBSerial+0x1b8>
			MBS_ProcessRcvdFrame(&gVar.mbSerial, &gVar.mbRTUSlave);
 800a802:	490b      	ldr	r1, [pc, #44]	; (800a830 <TH_MBSerial+0x1d0>)
 800a804:	4809      	ldr	r0, [pc, #36]	; (800a82c <TH_MBSerial+0x1cc>)
 800a806:	f008 f8f5 	bl	80129f4 <MBS_ProcessRcvdFrame>
			break;
 800a80a:	e006      	b.n	800a81a <TH_MBSerial+0x1ba>
			TH_MBTCPSRecvRespGW(&gVar.mbTCPServer);
 800a80c:	4809      	ldr	r0, [pc, #36]	; (800a834 <TH_MBSerial+0x1d4>)
 800a80e:	f7ff fa81 	bl	8009d14 <TH_MBTCPSRecvRespGW>
			break;
 800a812:	e002      	b.n	800a81a <TH_MBSerial+0x1ba>
			break;
 800a814:	bf00      	nop
 800a816:	e000      	b.n	800a81a <TH_MBSerial+0x1ba>
			}break;
 800a818:	bf00      	nop
	}
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	24002050 	.word	0x24002050
 800a828:	240029a0 	.word	0x240029a0
 800a82c:	240026d8 	.word	0x240026d8
 800a830:	24002918 	.word	0x24002918
 800a834:	24002c38 	.word	0x24002c38

0800a838 <TH_AnalogOutput>:
//



/*Analog Putputs---------------------*/
void TH_AnalogOutput(void){
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0

	for(gVar.aoId = AO_1; gVar.aoId < AO_MAX; gVar.aoId++) {
 800a83c:	4a20      	ldr	r2, [pc, #128]	; (800a8c0 <TH_AnalogOutput+0x88>)
 800a83e:	f641 6350 	movw	r3, #7760	; 0x1e50
 800a842:	4413      	add	r3, r2
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	e030      	b.n	800a8ac <TH_AnalogOutput+0x74>
		AO_CalculatePWM(&gVar.ao[gVar.aoId]);
 800a84a:	4a1d      	ldr	r2, [pc, #116]	; (800a8c0 <TH_AnalogOutput+0x88>)
 800a84c:	f641 6350 	movw	r3, #7760	; 0x1e50
 800a850:	4413      	add	r3, r2
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
 800a856:	232c      	movs	r3, #44	; 0x2c
 800a858:	fb03 f202 	mul.w	r2, r3, r2
 800a85c:	f641 6350 	movw	r3, #7760	; 0x1e50
 800a860:	4413      	add	r3, r2
 800a862:	4a17      	ldr	r2, [pc, #92]	; (800a8c0 <TH_AnalogOutput+0x88>)
 800a864:	4413      	add	r3, r2
 800a866:	3304      	adds	r3, #4
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f6 fa21 	bl	8000cb0 <AO_CalculatePWM>
		AO_UpdatePWM(&gVar.ao[gVar.aoId]);
 800a86e:	4a14      	ldr	r2, [pc, #80]	; (800a8c0 <TH_AnalogOutput+0x88>)
 800a870:	f641 6350 	movw	r3, #7760	; 0x1e50
 800a874:	4413      	add	r3, r2
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	461a      	mov	r2, r3
 800a87a:	232c      	movs	r3, #44	; 0x2c
 800a87c:	fb03 f202 	mul.w	r2, r3, r2
 800a880:	f641 6350 	movw	r3, #7760	; 0x1e50
 800a884:	4413      	add	r3, r2
 800a886:	4a0e      	ldr	r2, [pc, #56]	; (800a8c0 <TH_AnalogOutput+0x88>)
 800a888:	4413      	add	r3, r2
 800a88a:	3304      	adds	r3, #4
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7f6 fadd 	bl	8000e4c <AO_UpdatePWM>
	for(gVar.aoId = AO_1; gVar.aoId < AO_MAX; gVar.aoId++) {
 800a892:	4a0b      	ldr	r2, [pc, #44]	; (800a8c0 <TH_AnalogOutput+0x88>)
 800a894:	f641 6350 	movw	r3, #7760	; 0x1e50
 800a898:	4413      	add	r3, r2
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	3301      	adds	r3, #1
 800a89e:	b2d9      	uxtb	r1, r3
 800a8a0:	4a07      	ldr	r2, [pc, #28]	; (800a8c0 <TH_AnalogOutput+0x88>)
 800a8a2:	f641 6350 	movw	r3, #7760	; 0x1e50
 800a8a6:	4413      	add	r3, r2
 800a8a8:	460a      	mov	r2, r1
 800a8aa:	701a      	strb	r2, [r3, #0]
 800a8ac:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <TH_AnalogOutput+0x88>)
 800a8ae:	f641 6350 	movw	r3, #7760	; 0x1e50
 800a8b2:	4413      	add	r3, r2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d9c7      	bls.n	800a84a <TH_AnalogOutput+0x12>
	}
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	24002050 	.word	0x24002050

0800a8c4 <TH_AOMap2DIandPID>:




/*Analog Inputs---------------------*/
void TH_AOMap2DIandPID(AnalogOut *ao, DigitalIn_t *di, PID *pid){
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]

	switch (ao->source) {
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	789b      	ldrb	r3, [r3, #2]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d002      	beq.n	800a8de <TH_AOMap2DIandPID+0x1a>
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d005      	beq.n	800a8e8 <TH_AOMap2DIandPID+0x24>
 800a8dc:	e0e3      	b.n	800aaa6 <TH_AOMap2DIandPID+0x1e2>
		case AO_PWM_SRC_MODBUS:
			ao->value = ao->mbValue;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	88da      	ldrh	r2, [r3, #6]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	811a      	strh	r2, [r3, #8]
			break;
 800a8e6:	e0e3      	b.n	800aab0 <TH_AOMap2DIandPID+0x1ec>
		case AO_PWM_SRC_PID:
			pid->setpoint =  ao->mbValue;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	88da      	ldrh	r2, [r3, #6]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	80da      	strh	r2, [r3, #6]
			if(di->pulseInf.period>0){
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d02a      	beq.n	800a94e <TH_AOMap2DIandPID+0x8a>
				pid->measurement = (float)(di->pulseInf.periodMin*AO_PWM_RESOLUTION/di->pulseInf.period);//(float)ConvPercentToValue(ConvToPercent((double)di->pulseInf.period, (double)di->pulseInf.periodMax), (double)AO_PWM_RESOLUTION);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	031b      	lsls	r3, r3, #12
 800a900:	1a9a      	subs	r2, r3, r2
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a906:	fbb2 f3f3 	udiv	r3, r2, r3
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	edc3 7a03 	vstr	s15, [r3, #12]
				pid->measurement = (float)TH_ScalePriedTo12Bits(di->pulseInf.period, di->pulseInf.periodMin);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	4619      	mov	r1, r3
 800a922:	4610      	mov	r0, r2
 800a924:	f000 fa08 	bl	800ad38 <TH_ScalePriedTo12Bits>
 800a928:	eef0 7a40 	vmov.f32	s15, s0
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	edc3 7a03 	vstr	s15, [r3, #12]
				if(pid->measurement > AO_PWM_RESOLUTION) pid->measurement = AO_PWM_RESOLUTION;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	edd3 7a03 	vldr	s15, [r3, #12]
 800a938:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800aab8 <TH_AOMap2DIandPID+0x1f4>
 800a93c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a944:	dd07      	ble.n	800a956 <TH_AOMap2DIandPID+0x92>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a5c      	ldr	r2, [pc, #368]	; (800aabc <TH_AOMap2DIandPID+0x1f8>)
 800a94a:	60da      	str	r2, [r3, #12]
 800a94c:	e003      	b.n	800a956 <TH_AOMap2DIandPID+0x92>
			}else{
				pid->measurement = 0.0f;		// when the motor is not running period shod by infinity, but here it will be max value instead of infinity
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f04f 0200 	mov.w	r2, #0
 800a954:	60da      	str	r2, [r3, #12]

			/*
			 * if measurement value <= 50% of setpoint -> maintain the output at 50% of setpoint
			 * else, measurement value > 50% 0f setpoint -> maintain the output at setpoint
			 * */
			if(pid->measurement <= pid->setpoint && pid->measurement > pid->setpoint*0.5){
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	ed93 7a03 	vldr	s14, [r3, #12]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	88db      	ldrh	r3, [r3, #6]
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a970:	d818      	bhi.n	800a9a4 <TH_AOMap2DIandPID+0xe0>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	edd3 7a03 	vldr	s15, [r3, #12]
 800a978:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	88db      	ldrh	r3, [r3, #6]
 800a980:	ee07 3a90 	vmov	s15, r3
 800a984:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a988:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a98c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a990:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a998:	dd04      	ble.n	800a9a4 <TH_AOMap2DIandPID+0xe0>
//				DEBUG_SPRINT_NL("PID: 1");
				ao->value = pid->setpoint;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	88da      	ldrh	r2, [r3, #6]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	811a      	strh	r2, [r3, #8]
					ao->value = pid->setpoint;
				}

			}

			break;
 800a9a2:	e084      	b.n	800aaae <TH_AOMap2DIandPID+0x1ea>
			}else if(pid->measurement <= pid->setpoint*0.5){
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	edd3 7a03 	vldr	s15, [r3, #12]
 800a9aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	88db      	ldrh	r3, [r3, #6]
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a9ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a9be:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a9c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ca:	d834      	bhi.n	800aa36 <TH_AOMap2DIandPID+0x172>
				pid->error = pid->setpoint*0.5 - pid->measurement;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	88db      	ldrh	r3, [r3, #6]
 800a9d0:	ee07 3a90 	vmov	s15, r3
 800a9d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a9d8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a9dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	edd3 7a03 	vldr	s15, [r3, #12]
 800a9e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a9ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a9ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	edc3 7a07 	vstr	s15, [r3, #28]
				PID_Proportional(pid);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f008 fd70 	bl	80134de <PID_Proportional>
				ao->value += pid->output_p;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	891b      	ldrh	r3, [r3, #8]
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800aa10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa18:	ee17 3a90 	vmov	r3, s15
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	811a      	strh	r2, [r3, #8]
				if(ao->value > AO_PWM_RESOLUTION){
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	891b      	ldrh	r3, [r3, #8]
 800aa26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2a:	d340      	bcc.n	800aaae <TH_AOMap2DIandPID+0x1ea>
					ao->value = AO_PWM_RESOLUTION;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800aa32:	811a      	strh	r2, [r3, #8]
			break;
 800aa34:	e03b      	b.n	800aaae <TH_AOMap2DIandPID+0x1ea>
				pid->error = pid->setpoint - pid->measurement;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	88db      	ldrh	r3, [r3, #6]
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	edd3 7a03 	vldr	s15, [r3, #12]
 800aa48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	edc3 7a07 	vstr	s15, [r3, #28]
				PID_Proportional(pid);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f008 fd43 	bl	80134de <PID_Proportional>
				ao->value += pid->output_p;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	891b      	ldrh	r3, [r3, #8]
 800aa5c:	ee07 3a90 	vmov	s15, r3
 800aa60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800aa6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa72:	ee17 3a90 	vmov	r3, s15
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	811a      	strh	r2, [r3, #8]
				if(ao->value > AO_PWM_RESOLUTION){
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	891b      	ldrh	r3, [r3, #8]
 800aa80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa84:	d304      	bcc.n	800aa90 <TH_AOMap2DIandPID+0x1cc>
					ao->value = AO_PWM_RESOLUTION;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f640 72ff 	movw	r2, #4095	; 0xfff
 800aa8c:	811a      	strh	r2, [r3, #8]
			break;
 800aa8e:	e00e      	b.n	800aaae <TH_AOMap2DIandPID+0x1ea>
				}else if(ao->value < pid->setpoint){
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	891a      	ldrh	r2, [r3, #8]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	88db      	ldrh	r3, [r3, #6]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d208      	bcs.n	800aaae <TH_AOMap2DIandPID+0x1ea>
					ao->value = pid->setpoint;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	88da      	ldrh	r2, [r3, #6]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	811a      	strh	r2, [r3, #8]
			break;
 800aaa4:	e003      	b.n	800aaae <TH_AOMap2DIandPID+0x1ea>
		default:
			ao->value  = 0;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	811a      	strh	r2, [r3, #8]
			break;
 800aaac:	e000      	b.n	800aab0 <TH_AOMap2DIandPID+0x1ec>
			break;
 800aaae:	bf00      	nop
	}
}
 800aab0:	bf00      	nop
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	457ff000 	.word	0x457ff000
 800aabc:	457ff000 	.word	0x457ff000

0800aac0 <TH_IOExtender>:




/*IOExtender implemented in non-blocking way*/
void TH_IOExtender(void){
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
	static uint32_t tick = 0;
	static IOEXState stat = {0};
	static uint8_t lastStat = 0;
	if(PCA_GetWriteCmpltFlag(&gVar.ioExt) == PCA_WRITE_COMPLETED){
 800aac6:	4895      	ldr	r0, [pc, #596]	; (800ad1c <TH_IOExtender+0x25c>)
 800aac8:	f008 fcfa 	bl	80134c0 <PCA_GetWriteCmpltFlag>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f040 8108 	bne.w	800ace4 <TH_IOExtender+0x224>
		for(uint8_t i = 0; i<IOEXT_MAX_INDEX; i++){
 800aad4:	2300      	movs	r3, #0
 800aad6:	71fb      	strb	r3, [r7, #7]
 800aad8:	e0ee      	b.n	800acb8 <TH_IOExtender+0x1f8>
			switch (i) {
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	2b07      	cmp	r3, #7
 800aade:	f200 80e7 	bhi.w	800acb0 <TH_IOExtender+0x1f0>
 800aae2:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <TH_IOExtender+0x28>)
 800aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae8:	0800ab09 	.word	0x0800ab09
 800aaec:	0800ab33 	.word	0x0800ab33
 800aaf0:	0800ab5d 	.word	0x0800ab5d
 800aaf4:	0800ab87 	.word	0x0800ab87
 800aaf8:	0800ac0b 	.word	0x0800ac0b
 800aafc:	0800abb1 	.word	0x0800abb1
 800ab00:	0800ac65 	.word	0x0800ac65
 800ab04:	0800ac8b 	.word	0x0800ac8b
				case IOEXT_AO_1_MODE_INDEX:
					stat.bit.ao1Mode = (gVar.ao[i].mode == AIO_MODE_VOLT);
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	4a85      	ldr	r2, [pc, #532]	; (800ad20 <TH_IOExtender+0x260>)
 800ab0c:	212c      	movs	r1, #44	; 0x2c
 800ab0e:	fb01 f303 	mul.w	r3, r1, r3
 800ab12:	441a      	add	r2, r3
 800ab14:	f641 6357 	movw	r3, #7767	; 0x1e57
 800ab18:	4413      	add	r3, r2
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	bf0c      	ite	eq
 800ab20:	2301      	moveq	r3, #1
 800ab22:	2300      	movne	r3, #0
 800ab24:	b2d9      	uxtb	r1, r3
 800ab26:	4a7f      	ldr	r2, [pc, #508]	; (800ad24 <TH_IOExtender+0x264>)
 800ab28:	7813      	ldrb	r3, [r2, #0]
 800ab2a:	f361 0300 	bfi	r3, r1, #0, #1
 800ab2e:	7013      	strb	r3, [r2, #0]
					break;
 800ab30:	e0bf      	b.n	800acb2 <TH_IOExtender+0x1f2>
				case IOEXT_AO_2_MODE_INDEX:
					stat.bit.ao2Mode = (gVar.ao[i].mode == AIO_MODE_VOLT);
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	4a7a      	ldr	r2, [pc, #488]	; (800ad20 <TH_IOExtender+0x260>)
 800ab36:	212c      	movs	r1, #44	; 0x2c
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	441a      	add	r2, r3
 800ab3e:	f641 6357 	movw	r3, #7767	; 0x1e57
 800ab42:	4413      	add	r3, r2
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	bf0c      	ite	eq
 800ab4a:	2301      	moveq	r3, #1
 800ab4c:	2300      	movne	r3, #0
 800ab4e:	b2d9      	uxtb	r1, r3
 800ab50:	4a74      	ldr	r2, [pc, #464]	; (800ad24 <TH_IOExtender+0x264>)
 800ab52:	7813      	ldrb	r3, [r2, #0]
 800ab54:	f361 0341 	bfi	r3, r1, #1, #1
 800ab58:	7013      	strb	r3, [r2, #0]
					break;
 800ab5a:	e0aa      	b.n	800acb2 <TH_IOExtender+0x1f2>
				case IOEXT_AO_3_MODE_INDEX:
					stat.bit.ao3Mode = (gVar.ao[i].mode == AIO_MODE_VOLT);
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	4a70      	ldr	r2, [pc, #448]	; (800ad20 <TH_IOExtender+0x260>)
 800ab60:	212c      	movs	r1, #44	; 0x2c
 800ab62:	fb01 f303 	mul.w	r3, r1, r3
 800ab66:	441a      	add	r2, r3
 800ab68:	f641 6357 	movw	r3, #7767	; 0x1e57
 800ab6c:	4413      	add	r3, r2
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	bf0c      	ite	eq
 800ab74:	2301      	moveq	r3, #1
 800ab76:	2300      	movne	r3, #0
 800ab78:	b2d9      	uxtb	r1, r3
 800ab7a:	4a6a      	ldr	r2, [pc, #424]	; (800ad24 <TH_IOExtender+0x264>)
 800ab7c:	7813      	ldrb	r3, [r2, #0]
 800ab7e:	f361 0382 	bfi	r3, r1, #2, #1
 800ab82:	7013      	strb	r3, [r2, #0]
					break;
 800ab84:	e095      	b.n	800acb2 <TH_IOExtender+0x1f2>
				case IOEXT_AO_4_MODE_INDEX:
					stat.bit.ao4Mode = (gVar.ao[i].mode == AIO_MODE_VOLT);
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	4a65      	ldr	r2, [pc, #404]	; (800ad20 <TH_IOExtender+0x260>)
 800ab8a:	212c      	movs	r1, #44	; 0x2c
 800ab8c:	fb01 f303 	mul.w	r3, r1, r3
 800ab90:	441a      	add	r2, r3
 800ab92:	f641 6357 	movw	r3, #7767	; 0x1e57
 800ab96:	4413      	add	r3, r2
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	bf0c      	ite	eq
 800ab9e:	2301      	moveq	r3, #1
 800aba0:	2300      	movne	r3, #0
 800aba2:	b2d9      	uxtb	r1, r3
 800aba4:	4a5f      	ldr	r2, [pc, #380]	; (800ad24 <TH_IOExtender+0x264>)
 800aba6:	7813      	ldrb	r3, [r2, #0]
 800aba8:	f361 03c3 	bfi	r3, r1, #3, #1
 800abac:	7013      	strb	r3, [r2, #0]
					break;
 800abae:	e080      	b.n	800acb2 <TH_IOExtender+0x1f2>
				case IOEXT_RS485_RX_LED_INDEX:{
						static uint32_t lastCount = 0;
						if((gVar.mbSerial.rxCount >= (lastCount + RS485_RX_LED_BLINK_ON_RX_COUNT)) && (gVar.mbSerial.rxCount!=0)){
 800abb0:	4b5b      	ldr	r3, [pc, #364]	; (800ad20 <TH_IOExtender+0x260>)
 800abb2:	f8d3 28bc 	ldr.w	r2, [r3, #2236]	; 0x8bc
 800abb6:	4b5c      	ldr	r3, [pc, #368]	; (800ad28 <TH_IOExtender+0x268>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3303      	adds	r3, #3
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d30f      	bcc.n	800abe0 <TH_IOExtender+0x120>
 800abc0:	4b57      	ldr	r3, [pc, #348]	; (800ad20 <TH_IOExtender+0x260>)
 800abc2:	f8d3 38bc 	ldr.w	r3, [r3, #2236]	; 0x8bc
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <TH_IOExtender+0x120>
							stat.bit.rs485RxLed = 1;
 800abca:	4a56      	ldr	r2, [pc, #344]	; (800ad24 <TH_IOExtender+0x264>)
 800abcc:	7813      	ldrb	r3, [r2, #0]
 800abce:	f043 0310 	orr.w	r3, r3, #16
 800abd2:	7013      	strb	r3, [r2, #0]
							lastCount = gVar.mbSerial.rxCount;
 800abd4:	4b52      	ldr	r3, [pc, #328]	; (800ad20 <TH_IOExtender+0x260>)
 800abd6:	f8d3 38bc 	ldr.w	r3, [r3, #2236]	; 0x8bc
 800abda:	4a53      	ldr	r2, [pc, #332]	; (800ad28 <TH_IOExtender+0x268>)
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	e004      	b.n	800abea <TH_IOExtender+0x12a>
						}else{
							stat.bit.rs485RxLed = 0;
 800abe0:	4a50      	ldr	r2, [pc, #320]	; (800ad24 <TH_IOExtender+0x264>)
 800abe2:	7813      	ldrb	r3, [r2, #0]
 800abe4:	f36f 1304 	bfc	r3, #4, #1
 800abe8:	7013      	strb	r3, [r2, #0]
						}

						gVar.led[i-AO_MAX].state = stat.bit.rs485RxLed;
 800abea:	4b4e      	ldr	r3, [pc, #312]	; (800ad24 <TH_IOExtender+0x264>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	79fb      	ldrb	r3, [r7, #7]
 800abf6:	3b04      	subs	r3, #4
 800abf8:	4611      	mov	r1, r2
 800abfa:	4a49      	ldr	r2, [pc, #292]	; (800ad20 <TH_IOExtender+0x260>)
 800abfc:	f603 133e 	addw	r3, r3, #2366	; 0x93e
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	460a      	mov	r2, r1
 800ac06:	709a      	strb	r2, [r3, #2]
					}break;
 800ac08:	e053      	b.n	800acb2 <TH_IOExtender+0x1f2>
				case IOEXT_RS485_TX_LED_INDEX:{
						static uint32_t lastCount = 0;
						if((gVar.mbSerial.txCount >= (lastCount + RS485_TX_LED_BLINK_ON_TX_COUNT))&& (gVar.mbSerial.txCount!=0)){
 800ac0a:	4b45      	ldr	r3, [pc, #276]	; (800ad20 <TH_IOExtender+0x260>)
 800ac0c:	f8d3 28c0 	ldr.w	r2, [r3, #2240]	; 0x8c0
 800ac10:	4b46      	ldr	r3, [pc, #280]	; (800ad2c <TH_IOExtender+0x26c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3303      	adds	r3, #3
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d30f      	bcc.n	800ac3a <TH_IOExtender+0x17a>
 800ac1a:	4b41      	ldr	r3, [pc, #260]	; (800ad20 <TH_IOExtender+0x260>)
 800ac1c:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <TH_IOExtender+0x17a>
							stat.bit.rs485TxLed = 1;
 800ac24:	4a3f      	ldr	r2, [pc, #252]	; (800ad24 <TH_IOExtender+0x264>)
 800ac26:	7813      	ldrb	r3, [r2, #0]
 800ac28:	f043 0320 	orr.w	r3, r3, #32
 800ac2c:	7013      	strb	r3, [r2, #0]
							lastCount = gVar.mbSerial.txCount;
 800ac2e:	4b3c      	ldr	r3, [pc, #240]	; (800ad20 <TH_IOExtender+0x260>)
 800ac30:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
 800ac34:	4a3d      	ldr	r2, [pc, #244]	; (800ad2c <TH_IOExtender+0x26c>)
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	e004      	b.n	800ac44 <TH_IOExtender+0x184>
						}else{
							stat.bit.rs485TxLed = 0;
 800ac3a:	4a3a      	ldr	r2, [pc, #232]	; (800ad24 <TH_IOExtender+0x264>)
 800ac3c:	7813      	ldrb	r3, [r2, #0]
 800ac3e:	f36f 1345 	bfc	r3, #5, #1
 800ac42:	7013      	strb	r3, [r2, #0]
						}

						gVar.led[i-AO_MAX].state = stat.bit.rs485TxLed;
 800ac44:	4b37      	ldr	r3, [pc, #220]	; (800ad24 <TH_IOExtender+0x264>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	3b04      	subs	r3, #4
 800ac52:	4611      	mov	r1, r2
 800ac54:	4a32      	ldr	r2, [pc, #200]	; (800ad20 <TH_IOExtender+0x260>)
 800ac56:	f603 133e 	addw	r3, r3, #2366	; 0x93e
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	460a      	mov	r2, r1
 800ac60:	709a      	strb	r2, [r3, #2]
					}break;
 800ac62:	e026      	b.n	800acb2 <TH_IOExtender+0x1f2>
				case IOEXT_LED_1_INDEX:
					stat.bit.led1 = gVar.led[i-AO_MAX].state > 0;
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	3b04      	subs	r3, #4
 800ac68:	4a2d      	ldr	r2, [pc, #180]	; (800ad20 <TH_IOExtender+0x260>)
 800ac6a:	f603 133e 	addw	r3, r3, #2366	; 0x93e
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	789b      	ldrb	r3, [r3, #2]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bf14      	ite	ne
 800ac78:	2301      	movne	r3, #1
 800ac7a:	2300      	moveq	r3, #0
 800ac7c:	b2d9      	uxtb	r1, r3
 800ac7e:	4a29      	ldr	r2, [pc, #164]	; (800ad24 <TH_IOExtender+0x264>)
 800ac80:	7813      	ldrb	r3, [r2, #0]
 800ac82:	f361 1386 	bfi	r3, r1, #6, #1
 800ac86:	7013      	strb	r3, [r2, #0]
					break;
 800ac88:	e013      	b.n	800acb2 <TH_IOExtender+0x1f2>
				case IOEXT_LED_2_INDEX:
					stat.bit.led2 = gVar.led[i-AO_MAX].state > 0;
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	3b04      	subs	r3, #4
 800ac8e:	4a24      	ldr	r2, [pc, #144]	; (800ad20 <TH_IOExtender+0x260>)
 800ac90:	f603 133e 	addw	r3, r3, #2366	; 0x93e
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	789b      	ldrb	r3, [r3, #2]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	bf14      	ite	ne
 800ac9e:	2301      	movne	r3, #1
 800aca0:	2300      	moveq	r3, #0
 800aca2:	b2d9      	uxtb	r1, r3
 800aca4:	4a1f      	ldr	r2, [pc, #124]	; (800ad24 <TH_IOExtender+0x264>)
 800aca6:	7813      	ldrb	r3, [r2, #0]
 800aca8:	f361 13c7 	bfi	r3, r1, #7, #1
 800acac:	7013      	strb	r3, [r2, #0]
					break;
 800acae:	e000      	b.n	800acb2 <TH_IOExtender+0x1f2>
				default:
					break;
 800acb0:	bf00      	nop
		for(uint8_t i = 0; i<IOEXT_MAX_INDEX; i++){
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	3301      	adds	r3, #1
 800acb6:	71fb      	strb	r3, [r7, #7]
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	2b07      	cmp	r3, #7
 800acbc:	f67f af0d 	bls.w	800aada <TH_IOExtender+0x1a>
			}
		}

		if(stat.value != lastStat){
 800acc0:	4b18      	ldr	r3, [pc, #96]	; (800ad24 <TH_IOExtender+0x264>)
 800acc2:	781a      	ldrb	r2, [r3, #0]
 800acc4:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <TH_IOExtender+0x270>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d005      	beq.n	800acd8 <TH_IOExtender+0x218>
			if(PCA_WritePinAllIT(&gVar.ioExt, stat.value) != PCA_ERR_NONE){
 800accc:	4b15      	ldr	r3, [pc, #84]	; (800ad24 <TH_IOExtender+0x264>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	4619      	mov	r1, r3
 800acd2:	4812      	ldr	r0, [pc, #72]	; (800ad1c <TH_IOExtender+0x25c>)
 800acd4:	f008 fb33 	bl	801333e <PCA_WritePinAllIT>

				//TODO: PCA write err: to implement later
			}
		}

		tick = HAL_GetTick();
 800acd8:	f00b fc0a 	bl	80164f0 <HAL_GetTick>
 800acdc:	4603      	mov	r3, r0
 800acde:	4a15      	ldr	r2, [pc, #84]	; (800ad34 <TH_IOExtender+0x274>)
 800ace0:	6013      	str	r3, [r2, #0]
			//TODO: PCA write timeout err: to implement later
			tick = HAL_GetTick();
		}
	}

}
 800ace2:	e017      	b.n	800ad14 <TH_IOExtender+0x254>
		uint32_t timeout = 10; //ms
 800ace4:	230a      	movs	r3, #10
 800ace6:	603b      	str	r3, [r7, #0]
		if((HAL_GetTick() - tick) >= timeout){
 800ace8:	f00b fc02 	bl	80164f0 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	4b11      	ldr	r3, [pc, #68]	; (800ad34 <TH_IOExtender+0x274>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d80c      	bhi.n	800ad14 <TH_IOExtender+0x254>
			gVar.ioExt.flag.writeCmplt = PCA_WRITE_COMPLETED;
 800acfa:	4a09      	ldr	r2, [pc, #36]	; (800ad20 <TH_IOExtender+0x260>)
 800acfc:	f242 43f3 	movw	r3, #9459	; 0x24f3
 800ad00:	4413      	add	r3, r2
 800ad02:	781a      	ldrb	r2, [r3, #0]
 800ad04:	f36f 0200 	bfc	r2, #0, #1
 800ad08:	701a      	strb	r2, [r3, #0]
			tick = HAL_GetTick();
 800ad0a:	f00b fbf1 	bl	80164f0 <HAL_GetTick>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	4a08      	ldr	r2, [pc, #32]	; (800ad34 <TH_IOExtender+0x274>)
 800ad12:	6013      	str	r3, [r2, #0]
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	2400453c 	.word	0x2400453c
 800ad20:	24002050 	.word	0x24002050
 800ad24:	24000894 	.word	0x24000894
 800ad28:	24000898 	.word	0x24000898
 800ad2c:	2400089c 	.word	0x2400089c
 800ad30:	240008a0 	.word	0x240008a0
 800ad34:	240008a4 	.word	0x240008a4

0800ad38 <TH_ScalePriedTo12Bits>:
 * else, formula: (period at 4095 x 4095) / period
 *
 * these formulas,coefficient & power are generated in excel sheet

 * */
float TH_ScalePriedTo12Bits(uint32_t period, uint32_t periodMin){
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
	if(period >= DEF_PRD2FB_FRML_A_LOWER_LIMIT){
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2bdb      	cmp	r3, #219	; 0xdb
 800ad46:	d913      	bls.n	800ad70 <TH_ScalePriedTo12Bits+0x38>
		return (DEF_PRD2FB_FRML_A_COEFF*powl(period, DEF_PRD2FB_FRML_A_POW));
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ad52:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 800adc8 <TH_ScalePriedTo12Bits+0x90>
 800ad56:	eeb0 0b47 	vmov.f64	d0, d7
 800ad5a:	f01e fc79 	bl	8029650 <powl>
 800ad5e:	eeb0 7b40 	vmov.f64	d7, d0
 800ad62:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 800add0 <TH_ScalePriedTo12Bits+0x98>
 800ad66:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ad6e:	e024      	b.n	800adba <TH_ScalePriedTo12Bits+0x82>
	}else if(period >= DEF_PRD2FB_FRML_B_LOWER_LIMIT && period <DEF_PRD2FB_FRML_B_UPPER_LIMIT){
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b8b      	cmp	r3, #139	; 0x8b
 800ad74:	d916      	bls.n	800ada4 <TH_ScalePriedTo12Bits+0x6c>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2bdb      	cmp	r3, #219	; 0xdb
 800ad7a:	d813      	bhi.n	800ada4 <TH_ScalePriedTo12Bits+0x6c>
		return (DEF_PRD2FB_FRML_B_COEFF*powl(period, DEF_PRD2FB_FRML_B_POW));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ad86:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800add8 <TH_ScalePriedTo12Bits+0xa0>
 800ad8a:	eeb0 0b47 	vmov.f64	d0, d7
 800ad8e:	f01e fc5f 	bl	8029650 <powl>
 800ad92:	eeb0 7b40 	vmov.f64	d7, d0
 800ad96:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800ade0 <TH_ScalePriedTo12Bits+0xa8>
 800ad9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ada2:	e00a      	b.n	800adba <TH_ScalePriedTo12Bits+0x82>
	}else{
		return ((periodMin * AO_PWM_RESOLUTION)/period);
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	4613      	mov	r3, r2
 800ada8:	031b      	lsls	r3, r3, #12
 800adaa:	1a9a      	subs	r2, r3, r2
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
	}
}
 800adba:	eeb0 0a67 	vmov.f32	s0, s15
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	f3af 8000 	nop.w
 800adc8:	80000000 	.word	0x80000000
 800adcc:	c0046e97 	.word	0xc0046e97
 800add0:	00000000 	.word	0x00000000
 800add4:	41cdcd65 	.word	0x41cdcd65
 800add8:	60000000 	.word	0x60000000
 800addc:	bff66666 	.word	0xbff66666
 800ade0:	00000000 	.word	0x00000000
 800ade4:	413e8480 	.word	0x413e8480

0800ade8 <TH_FactoryResetButton>:

/**
  * @brief  reset all the parameters to factory default values and restart
  * @retval none
  */
void TH_FactoryResetButton(void){
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
	static uint32_t tick = 0U;
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)){
 800adec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800adf0:	480f      	ldr	r0, [pc, #60]	; (800ae30 <TH_FactoryResetButton+0x48>)
 800adf2:	f010 ff77 	bl	801bce4 <HAL_GPIO_ReadPin>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d011      	beq.n	800ae20 <TH_FactoryResetButton+0x38>
		if((HAL_GetTick() - tick) >= DI_FCTRY_RST_DELAY){
 800adfc:	f00b fb78 	bl	80164f0 <HAL_GetTick>
 800ae00:	4602      	mov	r2, r0
 800ae02:	4b0c      	ldr	r3, [pc, #48]	; (800ae34 <TH_FactoryResetButton+0x4c>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	f242 720f 	movw	r2, #9999	; 0x270f
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d90c      	bls.n	800ae2a <TH_FactoryResetButton+0x42>
			FactorySettings();
 800ae10:	f7fe fb98 	bl	8009544 <FactorySettings>
			HAL_Delay(1);
 800ae14:	2001      	movs	r0, #1
 800ae16:	f00b fb77 	bl	8016508 <HAL_Delay>
			RestartMCU();
 800ae1a:	f000 fa15 	bl	800b248 <RestartMCU>
		}
	}else{
		tick = HAL_GetTick();
	}
}
 800ae1e:	e004      	b.n	800ae2a <TH_FactoryResetButton+0x42>
		tick = HAL_GetTick();
 800ae20:	f00b fb66 	bl	80164f0 <HAL_GetTick>
 800ae24:	4603      	mov	r3, r0
 800ae26:	4a03      	ldr	r2, [pc, #12]	; (800ae34 <TH_FactoryResetButton+0x4c>)
 800ae28:	6013      	str	r3, [r2, #0]
}
 800ae2a:	bf00      	nop
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	58021400 	.word	0x58021400
 800ae34:	240008a8 	.word	0x240008a8

0800ae38 <TH_AnalogInput>:
	gVar.w5500Chip.spi.errorCode = 0;
}


/*Analog Inputs---------------------*/
void TH_AnalogInput(void){
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	af00      	add	r7, sp, #0
#ifdef USE_AI_ADC_DMA
	gVar.aiId++;
	if(gVar.aiId >= AI_MAX) {gVar.aiId = AI_1;}
	gVar.ai[gVar.aiId].rawValue = gVar.aiBuffDMA[gVar.aiId];		// map the AI data to the buffer
#endif
	for(gVar.aiId = AI_1;  gVar.aiId < AI_MAX; gVar.aiId++){
 800ae3c:	4a17      	ldr	r2, [pc, #92]	; (800ae9c <TH_AnalogInput+0x64>)
 800ae3e:	f641 7304 	movw	r3, #7940	; 0x1f04
 800ae42:	4413      	add	r3, r2
 800ae44:	2200      	movs	r2, #0
 800ae46:	701a      	strb	r2, [r3, #0]
 800ae48:	e01e      	b.n	800ae88 <TH_AnalogInput+0x50>
		AI_Read(&gVar.ai[gVar.aiId]);
 800ae4a:	4a14      	ldr	r2, [pc, #80]	; (800ae9c <TH_AnalogInput+0x64>)
 800ae4c:	f641 7304 	movw	r3, #7940	; 0x1f04
 800ae50:	4413      	add	r3, r2
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	4613      	mov	r3, r2
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	f641 7208 	movw	r2, #7944	; 0x1f08
 800ae62:	441a      	add	r2, r3
 800ae64:	4b0d      	ldr	r3, [pc, #52]	; (800ae9c <TH_AnalogInput+0x64>)
 800ae66:	4413      	add	r3, r2
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7f6 f891 	bl	8000f90 <AI_Read>
	for(gVar.aiId = AI_1;  gVar.aiId < AI_MAX; gVar.aiId++){
 800ae6e:	4a0b      	ldr	r2, [pc, #44]	; (800ae9c <TH_AnalogInput+0x64>)
 800ae70:	f641 7304 	movw	r3, #7940	; 0x1f04
 800ae74:	4413      	add	r3, r2
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	b2d9      	uxtb	r1, r3
 800ae7c:	4a07      	ldr	r2, [pc, #28]	; (800ae9c <TH_AnalogInput+0x64>)
 800ae7e:	f641 7304 	movw	r3, #7940	; 0x1f04
 800ae82:	4413      	add	r3, r2
 800ae84:	460a      	mov	r2, r1
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	4a04      	ldr	r2, [pc, #16]	; (800ae9c <TH_AnalogInput+0x64>)
 800ae8a:	f641 7304 	movw	r3, #7940	; 0x1f04
 800ae8e:	4413      	add	r3, r2
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d9d9      	bls.n	800ae4a <TH_AnalogInput+0x12>
	}


}
 800ae96:	bf00      	nop
 800ae98:	bf00      	nop
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	24002050 	.word	0x24002050

0800aea0 <TS_Init>:
static TIM_HandleTypeDef *htim;
static double mcuSysClkFacktor;
static volatile uint64_t lastCount;		// total count from the last power up


void TS_Init(TimeStamp *ts, TS_TimerType type){
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
	ts->currentTime = 0;
 800aeac:	6879      	ldr	r1, [r7, #4]
 800aeae:	f04f 0200 	mov.w	r2, #0
 800aeb2:	f04f 0300 	mov.w	r3, #0
 800aeb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ts->ovfCount = 0;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	611a      	str	r2, [r3, #16]
	ts->timerType = type;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	701a      	strb	r2, [r3, #0]
	ts->us = 0;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	625a      	str	r2, [r3, #36]	; 0x24
	ts->ms = 0;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	621a      	str	r2, [r3, #32]
	ts->sec = 0;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	61da      	str	r2, [r3, #28]
	ts->min = 0;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	619a      	str	r2, [r3, #24]
	ts->hr = 0;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	615a      	str	r2, [r3, #20]
	lastCount = 0;
 800aee4:	4906      	ldr	r1, [pc, #24]	; (800af00 <TS_Init+0x60>)
 800aee6:	f04f 0200 	mov.w	r2, #0
 800aeea:	f04f 0300 	mov.w	r3, #0
 800aeee:	e9c1 2300 	strd	r2, r3, [r1]
}
 800aef2:	bf00      	nop
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	240008b8 	.word	0x240008b8

0800af04 <TS_AttachTimer>:


/* Attach the time source,
 * busClock is in Hz
 * */
void TS_AttachTimer(TIM_HandleTypeDef *_htim, uint32_t busClock){
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
	htim = _htim;
 800af0e:	4a13      	ldr	r2, [pc, #76]	; (800af5c <TS_AttachTimer+0x58>)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6013      	str	r3, [r2, #0]

	mcuSysClkFacktor = (((htim->Init.Prescaler+1.0f)*1000000.0f)/busClock);
 800af14:	4b11      	ldr	r3, [pc, #68]	; (800af5c <TS_AttachTimer+0x58>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af2a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800af60 <TS_AttachTimer+0x5c>
 800af2e:	ee67 6a87 	vmul.f32	s13, s15, s14
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800af44:	4b07      	ldr	r3, [pc, #28]	; (800af64 <TS_AttachTimer+0x60>)
 800af46:	ed83 7b00 	vstr	d7, [r3]
	HAL_TIM_Base_Start_IT(htim);
 800af4a:	4b04      	ldr	r3, [pc, #16]	; (800af5c <TS_AttachTimer+0x58>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4618      	mov	r0, r3
 800af50:	f017 fc14 	bl	802277c <HAL_TIM_Base_Start_IT>
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	240008ac 	.word	0x240008ac
 800af60:	49742400 	.word	0x49742400
 800af64:	240008b0 	.word	0x240008b0

0800af68 <TS_GetUS>:
//	ts->currentTime = ts->currentTime*mcuSysClkFacktor;
}

/* This function returns total microsecond
 * */
uint64_t TS_GetUS(TimeStamp *ts){
 800af68:	b5b0      	push	{r4, r5, r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]

	ts->currentTime = (uint64_t)(( ts->timerType == TS_TIM_TYP_SYSTICK) ? ((HAL_GetTick()*1000)) : (htim->Instance->CNT + lastCount)*mcuSysClkFacktor);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d111      	bne.n	800af9c <TS_GetUS+0x34>
 800af78:	f00b faba 	bl	80164f0 <HAL_GetTick>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af82:	fb02 f303 	mul.w	r3, r2, r3
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800af8e:	ec51 0b17 	vmov	r0, r1, d7
 800af92:	f7f5 fbe9 	bl	8000768 <__aeabi_d2ulz>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	e01d      	b.n	800afd8 <TS_GetUS+0x70>
 800af9c:	4b14      	ldr	r3, [pc, #80]	; (800aff0 <TS_GetUS+0x88>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	4618      	mov	r0, r3
 800afa6:	f04f 0100 	mov.w	r1, #0
 800afaa:	4b12      	ldr	r3, [pc, #72]	; (800aff4 <TS_GetUS+0x8c>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	1884      	adds	r4, r0, r2
 800afb2:	eb41 0503 	adc.w	r5, r1, r3
 800afb6:	4620      	mov	r0, r4
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 fb87 	bl	80006cc <__aeabi_ul2d>
 800afbe:	ec41 0b16 	vmov	d6, r0, r1
 800afc2:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <TS_GetUS+0x90>)
 800afc4:	ed93 7b00 	vldr	d7, [r3]
 800afc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800afcc:	ec51 0b17 	vmov	r0, r1, d7
 800afd0:	f7f5 fbca 	bl	8000768 <__aeabi_d2ulz>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return ts->currentTime;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
}
 800afe4:	4610      	mov	r0, r2
 800afe6:	4619      	mov	r1, r3
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bdb0      	pop	{r4, r5, r7, pc}
 800afee:	bf00      	nop
 800aff0:	240008ac 	.word	0x240008ac
 800aff4:	240008b8 	.word	0x240008b8
 800aff8:	240008b0 	.word	0x240008b0

0800affc <TS_GetTime>:
 * */
uint64_t TS_GetMS(TimeStamp *ts){
	return (TS_GetUS(ts)/1000);
}

void TS_GetTime(TimeStamp *ts){
 800affc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b000:	b088      	sub	sp, #32
 800b002:	af04      	add	r7, sp, #16
 800b004:	60f8      	str	r0, [r7, #12]

	ts->currentTime = (uint64_t)(( ts->timerType == TS_TIM_TYP_SYSTICK) ? ((HAL_GetTick()*1000)) : (htim->Instance->CNT + lastCount)*mcuSysClkFacktor);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d111      	bne.n	800b032 <TS_GetTime+0x36>
 800b00e:	f00b fa6f 	bl	80164f0 <HAL_GetTick>
 800b012:	4603      	mov	r3, r0
 800b014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b018:	fb02 f303 	mul.w	r3, r2, r3
 800b01c:	ee07 3a90 	vmov	s15, r3
 800b020:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b024:	ec51 0b17 	vmov	r0, r1, d7
 800b028:	f7f5 fb9e 	bl	8000768 <__aeabi_d2ulz>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	e01d      	b.n	800b06e <TS_GetTime+0x72>
 800b032:	4b5f      	ldr	r3, [pc, #380]	; (800b1b0 <TS_GetTime+0x1b4>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	4618      	mov	r0, r3
 800b03c:	f04f 0100 	mov.w	r1, #0
 800b040:	4b5c      	ldr	r3, [pc, #368]	; (800b1b4 <TS_GetTime+0x1b8>)
 800b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b046:	1884      	adds	r4, r0, r2
 800b048:	eb41 0503 	adc.w	r5, r1, r3
 800b04c:	4620      	mov	r0, r4
 800b04e:	4629      	mov	r1, r5
 800b050:	f7f5 fb3c 	bl	80006cc <__aeabi_ul2d>
 800b054:	ec41 0b16 	vmov	d6, r0, r1
 800b058:	4b57      	ldr	r3, [pc, #348]	; (800b1b8 <TS_GetTime+0x1bc>)
 800b05a:	ed93 7b00 	vldr	d7, [r3]
 800b05e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b062:	ec51 0b17 	vmov	r0, r1, d7
 800b066:	f7f5 fb7f 	bl	8000768 <__aeabi_d2ulz>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	68f9      	ldr	r1, [r7, #12]
 800b070:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DBG_SPRINT_NL("TS: Time: %0.0f, CNT %ld, sysclk: %0.4f", (double)ts->currentTime, htim->Instance->CNT, mcuSysClkFacktor);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b07a:	4610      	mov	r0, r2
 800b07c:	4619      	mov	r1, r3
 800b07e:	f7f5 fb25 	bl	80006cc <__aeabi_ul2d>
 800b082:	4b4b      	ldr	r3, [pc, #300]	; (800b1b0 <TS_GetTime+0x1b4>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b08a:	4b4b      	ldr	r3, [pc, #300]	; (800b1b8 <TS_GetTime+0x1bc>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b094:	9400      	str	r4, [sp, #0]
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4848      	ldr	r0, [pc, #288]	; (800b1bc <TS_GetTime+0x1c0>)
 800b09c:	f002 fdd2 	bl	800dc44 <DBG_SPRINT_NL>
	ts->sec = ts->currentTime/1000000;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b0a6:	4a46      	ldr	r2, [pc, #280]	; (800b1c0 <TS_GetTime+0x1c4>)
 800b0a8:	f04f 0300 	mov.w	r3, #0
 800b0ac:	f7f5 fb44 	bl	8000738 <__aeabi_uldivmod>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	61da      	str	r2, [r3, #28]
	ts->ms = (ts->currentTime - ((uint64_t)ts->sec*1000000))/1000;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	461c      	mov	r4, r3
 800b0c4:	f04f 0500 	mov.w	r5, #0
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f04f 0000 	mov.w	r0, #0
 800b0d0:	f04f 0100 	mov.w	r1, #0
 800b0d4:	0159      	lsls	r1, r3, #5
 800b0d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b0da:	0150      	lsls	r0, r2, #5
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	1b12      	subs	r2, r2, r4
 800b0e2:	eb63 0305 	sbc.w	r3, r3, r5
 800b0e6:	f04f 0000 	mov.w	r0, #0
 800b0ea:	f04f 0100 	mov.w	r1, #0
 800b0ee:	0259      	lsls	r1, r3, #9
 800b0f0:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b0f4:	0250      	lsls	r0, r2, #9
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	1912      	adds	r2, r2, r4
 800b0fc:	eb45 0303 	adc.w	r3, r5, r3
 800b100:	f04f 0000 	mov.w	r0, #0
 800b104:	f04f 0100 	mov.w	r1, #0
 800b108:	0199      	lsls	r1, r3, #6
 800b10a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800b10e:	0190      	lsls	r0, r2, #6
 800b110:	1a80      	subs	r0, r0, r2
 800b112:	eb61 0103 	sbc.w	r1, r1, r3
 800b116:	eb10 0804 	adds.w	r8, r0, r4
 800b11a:	eb41 0905 	adc.w	r9, r1, r5
 800b11e:	ebba 0308 	subs.w	r3, sl, r8
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	eb6b 0309 	sbc.w	r3, fp, r9
 800b128:	607b      	str	r3, [r7, #4]
 800b12a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b12e:	f04f 0300 	mov.w	r3, #0
 800b132:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b136:	f7f5 faff 	bl	8000738 <__aeabi_uldivmod>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	621a      	str	r2, [r3, #32]
	ts->us = (ts->currentTime)%1000;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b14c:	f04f 0300 	mov.w	r3, #0
 800b150:	f7f5 faf2 	bl	8000738 <__aeabi_uldivmod>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	625a      	str	r2, [r3, #36]	; 0x24

	ts->min = ts->sec/60;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	69db      	ldr	r3, [r3, #28]
 800b15c:	4a19      	ldr	r2, [pc, #100]	; (800b1c4 <TS_GetTime+0x1c8>)
 800b15e:	fba2 2303 	umull	r2, r3, r2, r3
 800b162:	095a      	lsrs	r2, r3, #5
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	619a      	str	r2, [r3, #24]
	ts->hr = ts->min/60;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	4a15      	ldr	r2, [pc, #84]	; (800b1c4 <TS_GetTime+0x1c8>)
 800b16e:	fba2 2303 	umull	r2, r3, r2, r3
 800b172:	095a      	lsrs	r2, r3, #5
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	615a      	str	r2, [r3, #20]
	ts->sec = ts->sec-(ts->min*60);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	69d9      	ldr	r1, [r3, #28]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	699a      	ldr	r2, [r3, #24]
 800b180:	4613      	mov	r3, r2
 800b182:	011b      	lsls	r3, r3, #4
 800b184:	1a9b      	subs	r3, r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	1aca      	subs	r2, r1, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	61da      	str	r2, [r3, #28]
	ts->min = ts->min - (ts->hr*60);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6999      	ldr	r1, [r3, #24]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	695a      	ldr	r2, [r3, #20]
 800b196:	4613      	mov	r3, r2
 800b198:	011b      	lsls	r3, r3, #4
 800b19a:	1a9b      	subs	r3, r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	1aca      	subs	r2, r1, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	619a      	str	r2, [r3, #24]

}
 800b1a4:	bf00      	nop
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1ae:	bf00      	nop
 800b1b0:	240008ac 	.word	0x240008ac
 800b1b4:	240008b8 	.word	0x240008b8
 800b1b8:	240008b0 	.word	0x240008b0
 800b1bc:	0802a6e4 	.word	0x0802a6e4
 800b1c0:	000f4240 	.word	0x000f4240
 800b1c4:	88888889 	.word	0x88888889

0800b1c8 <TS_CatchOVF>:
  * @brief  catch and count timer overflow. call this function inside the timer
  * overflow interrupt sub routine
  * @param  nts: pointer to the timeStamp struct
  * @retval none
  */
void TS_CatchOVF(TimeStamp *ts){
 800b1c8:	b4b0      	push	{r4, r5, r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
	ts->ovfCount++;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	611a      	str	r2, [r3, #16]
	lastCount =  (uint64_t)((uint64_t)htim->Init.Period * (uint64_t)ts->ovfCount);
 800b1da:	4b0e      	ldr	r3, [pc, #56]	; (800b214 <TS_CatchOVF+0x4c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f04f 0100 	mov.w	r1, #0
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f04f 0300 	mov.w	r3, #0
 800b1f0:	fb02 f501 	mul.w	r5, r2, r1
 800b1f4:	fb00 f403 	mul.w	r4, r0, r3
 800b1f8:	442c      	add	r4, r5
 800b1fa:	fba0 2302 	umull	r2, r3, r0, r2
 800b1fe:	18e1      	adds	r1, r4, r3
 800b200:	460b      	mov	r3, r1
 800b202:	4905      	ldr	r1, [pc, #20]	; (800b218 <TS_CatchOVF+0x50>)
 800b204:	e9c1 2300 	strd	r2, r3, [r1]
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bcb0      	pop	{r4, r5, r7}
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	240008ac 	.word	0x240008ac
 800b218:	240008b8 	.word	0x240008b8

0800b21c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b21c:	b480      	push	{r7}
 800b21e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b220:	f3bf 8f4f 	dsb	sy
}
 800b224:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b226:	4b06      	ldr	r3, [pc, #24]	; (800b240 <__NVIC_SystemReset+0x24>)
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b22e:	4904      	ldr	r1, [pc, #16]	; (800b240 <__NVIC_SystemReset+0x24>)
 800b230:	4b04      	ldr	r3, [pc, #16]	; (800b244 <__NVIC_SystemReset+0x28>)
 800b232:	4313      	orrs	r3, r2
 800b234:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b236:	f3bf 8f4f 	dsb	sy
}
 800b23a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b23c:	bf00      	nop
 800b23e:	e7fd      	b.n	800b23c <__NVIC_SystemReset+0x20>
 800b240:	e000ed00 	.word	0xe000ed00
 800b244:	05fa0004 	.word	0x05fa0004

0800b248 <RestartMCU>:


/*
 * @brief Restart the MCU
 * */
void RestartMCU(void){
 800b248:	b580      	push	{r7, lr}
 800b24a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();		// to reset the mcu
 800b24c:	f7ff ffe6 	bl	800b21c <__NVIC_SystemReset>

0800b250 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800b258:	1d39      	adds	r1, r7, #4
 800b25a:	f04f 33ff 	mov.w	r3, #4294967295
 800b25e:	2201      	movs	r2, #1
 800b260:	4803      	ldr	r0, [pc, #12]	; (800b270 <__io_putchar+0x20>)
 800b262:	f019 fb47 	bl	80248f4 <HAL_UART_Transmit>
  return ch;
 800b266:	687b      	ldr	r3, [r7, #4]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	240054d8 	.word	0x240054d8

0800b274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b276:	b089      	sub	sp, #36	; 0x24
 800b278:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b27a:	f00b f8b3 	bl	80163e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b27e:	f000 f8af 	bl	800b3e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
#define USE_USER_DEF_INIT
#ifdef USE_USER_DEF_INIT
  MX_DMA_Init();
 800b282:	f000 fd6b 	bl	800bd5c <MX_DMA_Init>
  MX_GPIO_Init();
 800b286:	f000 fe41 	bl	800bf0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800b28a:	f000 fd1b 	bl	800bcc4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800b28e:	f000 f921 	bl	800b4d4 <MX_ADC1_Init>
  MX_I2C4_Init();
 800b292:	f000 f9e9 	bl	800b668 <MX_I2C4_Init>
  MX_I2C1_Init();
 800b296:	f000 f9a5 	bl	800b5e4 <MX_I2C1_Init>
//  MX_UART4_Init();
//  MX_UART5_Init();
//  MX_UART7_Init();
//  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
 800b29a:	f000 fcc3 	bl	800bc24 <MX_USART2_UART_Init>
  MX_FMC_Init();
 800b29e:	f000 fde5 	bl	800be6c <MX_FMC_Init>
  MX_TIM1_Init();
 800b2a2:	f000 fa77 	bl	800b794 <MX_TIM1_Init>
  MX_TIM2_Init();
 800b2a6:	f000 fac9 	bl	800b83c <MX_TIM2_Init>
  MX_TIM3_Init();
 800b2aa:	f000 fb5f 	bl	800b96c <MX_TIM3_Init>
  MX_TIM4_Init();
 800b2ae:	f000 fbab 	bl	800ba08 <MX_TIM4_Init>
  MX_TIM6_Init();
 800b2b2:	f000 fbf9 	bl	800baa8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800b2b6:	f000 fc2f 	bl	800bb18 <MX_TIM7_Init>
  MX_TIM24_Init();
 800b2ba:	f000 fc65 	bl	800bb88 <MX_TIM24_Init>
  MX_SPI1_Init();
 800b2be:	f000 fa13 	bl	800b6e8 <MX_SPI1_Init>
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
#endif


  SchedulerInit();
 800b2c2:	f7fa ff0b 	bl	80060dc <SchedulerInit>

  uint32_t tick = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60fb      	str	r3, [r7, #12]

  __HAL_I2C_ENABLE_IT(&hi2c1, I2C_CR1_TCIE);
 800b2ca:	4b40      	ldr	r3, [pc, #256]	; (800b3cc <main+0x158>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	4b3e      	ldr	r3, [pc, #248]	; (800b3cc <main+0x158>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2d8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  Scheduler();
 800b2da:	f7fb f903 	bl	80064e4 <Scheduler>
	  HAL_Delay(1000);
 800b2de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b2e2:	f00b f911 	bl	8016508 <HAL_Delay>
	  if(HAL_GetTick() - tick >= 1000){
 800b2e6:	f00b f903 	bl	80164f0 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2f4:	d3f1      	bcc.n	800b2da <main+0x66>
//			gVar.led[LED_1].state = !gVar.led[LED_1].state ;
//			gVar.led[LED_2].state = !gVar.led[LED_1].state ;
//			gVar.ao[0].mode = AIO_MODE_CURRENT;


		  for(uint8_t i = 0; i < 4; i++){
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	72fb      	strb	r3, [r7, #11]
 800b2fa:	e05b      	b.n	800b3b4 <main+0x140>
		  if(gVar.iolm.port[i].uart.rxLen ==2){
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	4a34      	ldr	r2, [pc, #208]	; (800b3d0 <main+0x15c>)
 800b300:	f240 1177 	movw	r1, #375	; 0x177
 800b304:	fb01 f303 	mul.w	r3, r1, r3
 800b308:	441a      	add	r2, r3
 800b30a:	f242 731c 	movw	r3, #10012	; 0x271c
 800b30e:	4413      	add	r3, r2
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	2b02      	cmp	r3, #2
 800b316:	d14a      	bne.n	800b3ae <main+0x13a>
			  gVar.iolm.port[i].uart.rxLen = 0;
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	4a2d      	ldr	r2, [pc, #180]	; (800b3d0 <main+0x15c>)
 800b31c:	f240 1177 	movw	r1, #375	; 0x177
 800b320:	fb01 f303 	mul.w	r3, r1, r3
 800b324:	441a      	add	r2, r3
 800b326:	f242 731c 	movw	r3, #10012	; 0x271c
 800b32a:	4413      	add	r3, r2
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	2200      	movs	r2, #0
 800b332:	705a      	strb	r2, [r3, #1]
			  TS_GetTime(&gVar.ts);
 800b334:	4827      	ldr	r0, [pc, #156]	; (800b3d4 <main+0x160>)
 800b336:	f7ff fe61 	bl	800affc <TS_GetTime>
			  DBG_SPRINT_NL("%02d:%02d:%02d:%03d:%03d: IOL1: %02X %02X",
 800b33a:	4a25      	ldr	r2, [pc, #148]	; (800b3d0 <main+0x15c>)
 800b33c:	f642 33fc 	movw	r3, #11260	; 0x2bfc
 800b340:	4413      	add	r3, r2
 800b342:	681c      	ldr	r4, [r3, #0]
 800b344:	4b22      	ldr	r3, [pc, #136]	; (800b3d0 <main+0x15c>)
 800b346:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 800b34a:	681d      	ldr	r5, [r3, #0]
 800b34c:	4a20      	ldr	r2, [pc, #128]	; (800b3d0 <main+0x15c>)
 800b34e:	f642 4304 	movw	r3, #11268	; 0x2c04
 800b352:	4413      	add	r3, r2
 800b354:	681e      	ldr	r6, [r3, #0]
 800b356:	4a1e      	ldr	r2, [pc, #120]	; (800b3d0 <main+0x15c>)
 800b358:	f642 4308 	movw	r3, #11272	; 0x2c08
 800b35c:	4413      	add	r3, r2
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	491b      	ldr	r1, [pc, #108]	; (800b3d0 <main+0x15c>)
 800b362:	f642 430c 	movw	r3, #11276	; 0x2c0c
 800b366:	440b      	add	r3, r1
 800b368:	6819      	ldr	r1, [r3, #0]
					  gVar.ts.hr,gVar.ts.min,gVar.ts.sec, gVar.ts.ms, gVar.ts.us,
					  gVar.iolm.port[i].uart.rxBuf[0], gVar.iolm.port[i].uart.rxBuf[1]);
 800b36a:	7afb      	ldrb	r3, [r7, #11]
 800b36c:	4818      	ldr	r0, [pc, #96]	; (800b3d0 <main+0x15c>)
 800b36e:	f240 1c77 	movw	ip, #375	; 0x177
 800b372:	fb0c f303 	mul.w	r3, ip, r3
 800b376:	4418      	add	r0, r3
 800b378:	f242 631c 	movw	r3, #9756	; 0x261c
 800b37c:	4403      	add	r3, r0
 800b37e:	781b      	ldrb	r3, [r3, #0]
			  DBG_SPRINT_NL("%02d:%02d:%02d:%03d:%03d: IOL1: %02X %02X",
 800b380:	607b      	str	r3, [r7, #4]
					  gVar.iolm.port[i].uart.rxBuf[0], gVar.iolm.port[i].uart.rxBuf[1]);
 800b382:	7afb      	ldrb	r3, [r7, #11]
 800b384:	4812      	ldr	r0, [pc, #72]	; (800b3d0 <main+0x15c>)
 800b386:	f240 1c77 	movw	ip, #375	; 0x177
 800b38a:	fb0c f303 	mul.w	r3, ip, r3
 800b38e:	4418      	add	r0, r3
 800b390:	f242 631d 	movw	r3, #9757	; 0x261d
 800b394:	4403      	add	r3, r0
 800b396:	781b      	ldrb	r3, [r3, #0]
			  DBG_SPRINT_NL("%02d:%02d:%02d:%03d:%03d: IOL1: %02X %02X",
 800b398:	9303      	str	r3, [sp, #12]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	9302      	str	r3, [sp, #8]
 800b39e:	9101      	str	r1, [sp, #4]
 800b3a0:	9200      	str	r2, [sp, #0]
 800b3a2:	4633      	mov	r3, r6
 800b3a4:	462a      	mov	r2, r5
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	480b      	ldr	r0, [pc, #44]	; (800b3d8 <main+0x164>)
 800b3aa:	f002 fc4b 	bl	800dc44 <DBG_SPRINT_NL>
		  for(uint8_t i = 0; i < 4; i++){
 800b3ae:	7afb      	ldrb	r3, [r7, #11]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	72fb      	strb	r3, [r7, #11]
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	d9a0      	bls.n	800b2fc <main+0x88>
		  }
		  }
		  HAL_GPIO_TogglePin(DO_6_GPIO_Port, DO_6_Pin);
 800b3ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3be:	4807      	ldr	r0, [pc, #28]	; (800b3dc <main+0x168>)
 800b3c0:	f010 fcc1 	bl	801bd46 <HAL_GPIO_TogglePin>
		  tick = HAL_GetTick();
 800b3c4:	f00b f894 	bl	80164f0 <HAL_GetTick>
 800b3c8:	60f8      	str	r0, [r7, #12]
	  Scheduler();
 800b3ca:	e786      	b.n	800b2da <main+0x66>
 800b3cc:	24004c84 	.word	0x24004c84
 800b3d0:	24002050 	.word	0x24002050
 800b3d4:	24004c38 	.word	0x24004c38
 800b3d8:	0802a70c 	.word	0x0802a70c
 800b3dc:	58020800 	.word	0x58020800

0800b3e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b09c      	sub	sp, #112	; 0x70
 800b3e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b3e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3ea:	224c      	movs	r2, #76	; 0x4c
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f01b f9a0 	bl	8026734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b3f4:	1d3b      	adds	r3, r7, #4
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f01b f99a 	bl	8026734 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800b400:	2002      	movs	r0, #2
 800b402:	f012 ffdf 	bl	801e3c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800b406:	2300      	movs	r3, #0
 800b408:	603b      	str	r3, [r7, #0]
 800b40a:	4b30      	ldr	r3, [pc, #192]	; (800b4cc <SystemClock_Config+0xec>)
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	4a2f      	ldr	r2, [pc, #188]	; (800b4cc <SystemClock_Config+0xec>)
 800b410:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b414:	6193      	str	r3, [r2, #24]
 800b416:	4b2d      	ldr	r3, [pc, #180]	; (800b4cc <SystemClock_Config+0xec>)
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800b422:	bf00      	nop
 800b424:	4b29      	ldr	r3, [pc, #164]	; (800b4cc <SystemClock_Config+0xec>)
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b430:	d1f8      	bne.n	800b424 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800b432:	4b27      	ldr	r3, [pc, #156]	; (800b4d0 <SystemClock_Config+0xf0>)
 800b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b436:	4a26      	ldr	r2, [pc, #152]	; (800b4d0 <SystemClock_Config+0xf0>)
 800b438:	f023 0303 	bic.w	r3, r3, #3
 800b43c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800b43e:	230a      	movs	r3, #10
 800b440:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800b442:	2301      	movs	r3, #1
 800b444:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b446:	2340      	movs	r3, #64	; 0x40
 800b448:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b44a:	2301      	movs	r3, #1
 800b44c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b44e:	2302      	movs	r3, #2
 800b450:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b452:	2300      	movs	r3, #0
 800b454:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b456:	2304      	movs	r3, #4
 800b458:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800b45a:	2322      	movs	r3, #34	; 0x22
 800b45c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800b45e:	2301      	movs	r3, #1
 800b460:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b462:	2304      	movs	r3, #4
 800b464:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800b466:	2302      	movs	r3, #2
 800b468:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800b46a:	230c      	movs	r3, #12
 800b46c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800b46e:	2300      	movs	r3, #0
 800b470:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800b472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b476:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b47c:	4618      	mov	r0, r3
 800b47e:	f012 ffdb 	bl	801e438 <HAL_RCC_OscConfig>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <SystemClock_Config+0xac>
  {
    Error_Handler();
 800b488:	f000 fef6 	bl	800c278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b48c:	233f      	movs	r3, #63	; 0x3f
 800b48e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b490:	2303      	movs	r3, #3
 800b492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800b494:	2300      	movs	r3, #0
 800b496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800b498:	2308      	movs	r3, #8
 800b49a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800b49c:	2340      	movs	r3, #64	; 0x40
 800b49e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800b4a0:	2340      	movs	r3, #64	; 0x40
 800b4a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800b4a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800b4aa:	2340      	movs	r3, #64	; 0x40
 800b4ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b4ae:	1d3b      	adds	r3, r7, #4
 800b4b0:	2103      	movs	r1, #3
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f013 fb6c 	bl	801eb90 <HAL_RCC_ClockConfig>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800b4be:	f000 fedb 	bl	800c278 <Error_Handler>
  }
}
 800b4c2:	bf00      	nop
 800b4c4:	3770      	adds	r7, #112	; 0x70
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	58024800 	.word	0x58024800
 800b4d0:	58024400 	.word	0x58024400

0800b4d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08c      	sub	sp, #48	; 0x30
 800b4d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800b4da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	605a      	str	r2, [r3, #4]
 800b4e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	2224      	movs	r2, #36	; 0x24
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f01b f921 	bl	8026734 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800b4f2:	4b38      	ldr	r3, [pc, #224]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b4f4:	4a38      	ldr	r2, [pc, #224]	; (800b5d8 <MX_ADC1_Init+0x104>)
 800b4f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800b4f8:	4b36      	ldr	r3, [pc, #216]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b4fa:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 800b4fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b500:	4b34      	ldr	r3, [pc, #208]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b502:	2208      	movs	r2, #8
 800b504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800b506:	4b33      	ldr	r3, [pc, #204]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b508:	2201      	movs	r2, #1
 800b50a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b50c:	4b31      	ldr	r3, [pc, #196]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b50e:	2204      	movs	r2, #4
 800b510:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b512:	4b30      	ldr	r3, [pc, #192]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b514:	2200      	movs	r2, #0
 800b516:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b518:	4b2e      	ldr	r3, [pc, #184]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800b51e:	4b2d      	ldr	r3, [pc, #180]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b520:	2202      	movs	r2, #2
 800b522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b524:	4b2b      	ldr	r3, [pc, #172]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b52c:	4b29      	ldr	r3, [pc, #164]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b52e:	2200      	movs	r2, #0
 800b530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b532:	4b28      	ldr	r3, [pc, #160]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b534:	2200      	movs	r2, #0
 800b536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800b538:	4b26      	ldr	r3, [pc, #152]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b53e:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b540:	2200      	movs	r2, #0
 800b542:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800b544:	4b23      	ldr	r3, [pc, #140]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b546:	2200      	movs	r2, #0
 800b548:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800b54a:	4b22      	ldr	r3, [pc, #136]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b552:	4820      	ldr	r0, [pc, #128]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b554:	f00b fae8 	bl	8016b28 <HAL_ADC_Init>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800b55e:	f000 fe8b 	bl	800c278 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800b562:	2300      	movs	r3, #0
 800b564:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800b566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b56a:	4619      	mov	r1, r3
 800b56c:	4819      	ldr	r0, [pc, #100]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b56e:	f00c fec7 	bl	8018300 <HAL_ADCEx_MultiModeConfigChannel>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800b578:	f000 fe7e 	bl	800c278 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800b57c:	4b17      	ldr	r3, [pc, #92]	; (800b5dc <MX_ADC1_Init+0x108>)
 800b57e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b580:	2306      	movs	r3, #6
 800b582:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800b584:	2305      	movs	r3, #5
 800b586:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b588:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b58c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b58e:	2304      	movs	r3, #4
 800b590:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800b596:	2300      	movs	r3, #0
 800b598:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b59c:	463b      	mov	r3, r7
 800b59e:	4619      	mov	r1, r3
 800b5a0:	480c      	ldr	r0, [pc, #48]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b5a2:	f00b fec9 	bl	8017338 <HAL_ADC_ConfigChannel>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800b5ac:	f000 fe64 	bl	800c278 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800b5b0:	4b0b      	ldr	r3, [pc, #44]	; (800b5e0 <MX_ADC1_Init+0x10c>)
 800b5b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800b5b4:	230c      	movs	r3, #12
 800b5b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b5b8:	463b      	mov	r3, r7
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4805      	ldr	r0, [pc, #20]	; (800b5d4 <MX_ADC1_Init+0x100>)
 800b5be:	f00b febb 	bl	8017338 <HAL_ADC_ConfigChannel>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 800b5c8:	f000 fe56 	bl	800c278 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */


  /* USER CODE END ADC1_Init 2 */

}
 800b5cc:	bf00      	nop
 800b5ce:	3730      	adds	r7, #48	; 0x30
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	240057b0 	.word	0x240057b0
 800b5d8:	40022000 	.word	0x40022000
 800b5dc:	0c900008 	.word	0x0c900008
 800b5e0:	14f00020 	.word	0x14f00020

0800b5e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b5e8:	4b1c      	ldr	r3, [pc, #112]	; (800b65c <MX_I2C1_Init+0x78>)
 800b5ea:	4a1d      	ldr	r2, [pc, #116]	; (800b660 <MX_I2C1_Init+0x7c>)
 800b5ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00601A5C;
 800b5ee:	4b1b      	ldr	r3, [pc, #108]	; (800b65c <MX_I2C1_Init+0x78>)
 800b5f0:	4a1c      	ldr	r2, [pc, #112]	; (800b664 <MX_I2C1_Init+0x80>)
 800b5f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800b5f4:	4b19      	ldr	r3, [pc, #100]	; (800b65c <MX_I2C1_Init+0x78>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b5fa:	4b18      	ldr	r3, [pc, #96]	; (800b65c <MX_I2C1_Init+0x78>)
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b600:	4b16      	ldr	r3, [pc, #88]	; (800b65c <MX_I2C1_Init+0x78>)
 800b602:	2200      	movs	r2, #0
 800b604:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800b606:	4b15      	ldr	r3, [pc, #84]	; (800b65c <MX_I2C1_Init+0x78>)
 800b608:	2200      	movs	r2, #0
 800b60a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b60c:	4b13      	ldr	r3, [pc, #76]	; (800b65c <MX_I2C1_Init+0x78>)
 800b60e:	2200      	movs	r2, #0
 800b610:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b612:	4b12      	ldr	r3, [pc, #72]	; (800b65c <MX_I2C1_Init+0x78>)
 800b614:	2200      	movs	r2, #0
 800b616:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b618:	4b10      	ldr	r3, [pc, #64]	; (800b65c <MX_I2C1_Init+0x78>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b61e:	480f      	ldr	r0, [pc, #60]	; (800b65c <MX_I2C1_Init+0x78>)
 800b620:	f010 fbc6 	bl	801bdb0 <HAL_I2C_Init>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800b62a:	f000 fe25 	bl	800c278 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b62e:	2100      	movs	r1, #0
 800b630:	480a      	ldr	r0, [pc, #40]	; (800b65c <MX_I2C1_Init+0x78>)
 800b632:	f012 fdfb 	bl	801e22c <HAL_I2CEx_ConfigAnalogFilter>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800b63c:	f000 fe1c 	bl	800c278 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800b640:	2100      	movs	r1, #0
 800b642:	4806      	ldr	r0, [pc, #24]	; (800b65c <MX_I2C1_Init+0x78>)
 800b644:	f012 fe3d 	bl	801e2c2 <HAL_I2CEx_ConfigDigitalFilter>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800b64e:	f000 fe13 	bl	800c278 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800b652:	2001      	movs	r0, #1
 800b654:	f012 fe82 	bl	801e35c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b658:	bf00      	nop
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	24004c84 	.word	0x24004c84
 800b660:	40005400 	.word	0x40005400
 800b664:	00601a5c 	.word	0x00601a5c

0800b668 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b66e:	4a1c      	ldr	r2, [pc, #112]	; (800b6e0 <MX_I2C4_Init+0x78>)
 800b670:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00D049FB;
 800b672:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b674:	4a1b      	ldr	r2, [pc, #108]	; (800b6e4 <MX_I2C4_Init+0x7c>)
 800b676:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800b678:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b67e:	4b17      	ldr	r3, [pc, #92]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b680:	2201      	movs	r2, #1
 800b682:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b684:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b686:	2200      	movs	r2, #0
 800b688:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800b68a:	4b14      	ldr	r3, [pc, #80]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b690:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b692:	2200      	movs	r2, #0
 800b694:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b696:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b698:	2200      	movs	r2, #0
 800b69a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b69c:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800b6a2:	480e      	ldr	r0, [pc, #56]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b6a4:	f010 fb84 	bl	801bdb0 <HAL_I2C_Init>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800b6ae:	f000 fde3 	bl	800c278 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	4809      	ldr	r0, [pc, #36]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b6b6:	f012 fdb9 	bl	801e22c <HAL_I2CEx_ConfigAnalogFilter>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d001      	beq.n	800b6c4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800b6c0:	f000 fdda 	bl	800c278 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4805      	ldr	r0, [pc, #20]	; (800b6dc <MX_I2C4_Init+0x74>)
 800b6c8:	f012 fdfb 	bl	801e2c2 <HAL_I2CEx_ConfigDigitalFilter>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800b6d2:	f000 fdd1 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800b6d6:	bf00      	nop
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	240053a0 	.word	0x240053a0
 800b6e0:	58001c00 	.word	0x58001c00
 800b6e4:	00d049fb 	.word	0x00d049fb

0800b6e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800b6ec:	4b27      	ldr	r3, [pc, #156]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b6ee:	4a28      	ldr	r2, [pc, #160]	; (800b790 <MX_SPI1_Init+0xa8>)
 800b6f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b6f2:	4b26      	ldr	r3, [pc, #152]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b6f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b6f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800b6fa:	4b24      	ldr	r3, [pc, #144]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b700:	4b22      	ldr	r3, [pc, #136]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b702:	2207      	movs	r2, #7
 800b704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b706:	4b21      	ldr	r3, [pc, #132]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b708:	2200      	movs	r2, #0
 800b70a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b70c:	4b1f      	ldr	r3, [pc, #124]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b70e:	2200      	movs	r2, #0
 800b710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b712:	4b1e      	ldr	r3, [pc, #120]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b714:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800b71a:	4b1c      	ldr	r3, [pc, #112]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b71c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b722:	4b1a      	ldr	r3, [pc, #104]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b724:	2200      	movs	r2, #0
 800b726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b728:	4b18      	ldr	r3, [pc, #96]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b72e:	4b17      	ldr	r3, [pc, #92]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b730:	2200      	movs	r2, #0
 800b732:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800b734:	4b15      	ldr	r3, [pc, #84]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b736:	2200      	movs	r2, #0
 800b738:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b73a:	4b14      	ldr	r3, [pc, #80]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b73c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b740:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b742:	4b12      	ldr	r3, [pc, #72]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b744:	2200      	movs	r2, #0
 800b746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800b748:	4b10      	ldr	r3, [pc, #64]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b750:	2200      	movs	r2, #0
 800b752:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b754:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b756:	2200      	movs	r2, #0
 800b758:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b75a:	4b0c      	ldr	r3, [pc, #48]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800b760:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b762:	2200      	movs	r2, #0
 800b764:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b766:	4b09      	ldr	r3, [pc, #36]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b768:	2200      	movs	r2, #0
 800b76a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800b76c:	4b07      	ldr	r3, [pc, #28]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b76e:	2200      	movs	r2, #0
 800b770:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b772:	4b06      	ldr	r3, [pc, #24]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b774:	2200      	movs	r2, #0
 800b776:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b778:	4804      	ldr	r0, [pc, #16]	; (800b78c <MX_SPI1_Init+0xa4>)
 800b77a:	f015 fe63 	bl	8021444 <HAL_SPI_Init>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800b784:	f000 fd78 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800b788:	bf00      	nop
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	24005190 	.word	0x24005190
 800b790:	40013000 	.word	0x40013000

0800b794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b79a:	f107 0310 	add.w	r3, r7, #16
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	605a      	str	r2, [r3, #4]
 800b7a4:	609a      	str	r2, [r3, #8]
 800b7a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b7a8:	1d3b      	adds	r3, r7, #4
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]
 800b7ae:	605a      	str	r2, [r3, #4]
 800b7b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b7b2:	4b20      	ldr	r3, [pc, #128]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7b4:	4a20      	ldr	r2, [pc, #128]	; (800b838 <MX_TIM1_Init+0xa4>)
 800b7b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800b7b8:	4b1e      	ldr	r3, [pc, #120]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b7be:	4b1d      	ldr	r3, [pc, #116]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800b7c4:	4b1b      	ldr	r3, [pc, #108]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b7cc:	4b19      	ldr	r3, [pc, #100]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b7d2:	4b18      	ldr	r3, [pc, #96]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b7d8:	4b16      	ldr	r3, [pc, #88]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b7de:	4815      	ldr	r0, [pc, #84]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7e0:	f016 ff19 	bl	8022616 <HAL_TIM_Base_Init>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800b7ea:	f000 fd45 	bl	800c278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b7ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b7f4:	f107 0310 	add.w	r3, r7, #16
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	480e      	ldr	r0, [pc, #56]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b7fc:	f018 f920 	bl	8023a40 <HAL_TIM_ConfigClockSource>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800b806:	f000 fd37 	bl	800c278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b80a:	2300      	movs	r3, #0
 800b80c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b80e:	2300      	movs	r3, #0
 800b810:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b812:	2300      	movs	r3, #0
 800b814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b816:	1d3b      	adds	r3, r7, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4806      	ldr	r0, [pc, #24]	; (800b834 <MX_TIM1_Init+0xa0>)
 800b81c:	f018 ff7e 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800b826:	f000 fd27 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800b82a:	bf00      	nop
 800b82c:	3720      	adds	r7, #32
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	24005a68 	.word	0x24005a68
 800b838:	40010000 	.word	0x40010000

0800b83c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08e      	sub	sp, #56	; 0x38
 800b840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b846:	2200      	movs	r2, #0
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	605a      	str	r2, [r3, #4]
 800b84c:	609a      	str	r2, [r3, #8]
 800b84e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b850:	f107 031c 	add.w	r3, r7, #28
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]
 800b858:	605a      	str	r2, [r3, #4]
 800b85a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b85c:	463b      	mov	r3, r7
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	605a      	str	r2, [r3, #4]
 800b864:	609a      	str	r2, [r3, #8]
 800b866:	60da      	str	r2, [r3, #12]
 800b868:	611a      	str	r2, [r3, #16]
 800b86a:	615a      	str	r2, [r3, #20]
 800b86c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b86e:	4b3e      	ldr	r3, [pc, #248]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11-1;
 800b876:	4b3c      	ldr	r3, [pc, #240]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b878:	220a      	movs	r2, #10
 800b87a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b87c:	4b3a      	ldr	r3, [pc, #232]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b87e:	2200      	movs	r2, #0
 800b880:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2800-1;
 800b882:	4b39      	ldr	r3, [pc, #228]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b884:	f640 22ef 	movw	r2, #2799	; 0xaef
 800b888:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b88a:	4b37      	ldr	r3, [pc, #220]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b890:	4b35      	ldr	r3, [pc, #212]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b892:	2200      	movs	r2, #0
 800b894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b896:	4834      	ldr	r0, [pc, #208]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b898:	f016 febd 	bl	8022616 <HAL_TIM_Base_Init>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800b8a2:	f000 fce9 	bl	800c278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b8a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b8ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	482d      	ldr	r0, [pc, #180]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b8b4:	f018 f8c4 	bl	8023a40 <HAL_TIM_ConfigClockSource>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d001      	beq.n	800b8c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800b8be:	f000 fcdb 	bl	800c278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b8c2:	4829      	ldr	r0, [pc, #164]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b8c4:	f016 ffe0 	bl	8022888 <HAL_TIM_PWM_Init>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800b8ce:	f000 fcd3 	bl	800c278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800b8d2:	2310      	movs	r3, #16
 800b8d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b8da:	f107 031c 	add.w	r3, r7, #28
 800b8de:	4619      	mov	r1, r3
 800b8e0:	4821      	ldr	r0, [pc, #132]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b8e2:	f018 ff1b 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800b8ec:	f000 fcc4 	bl	800c278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b8f0:	2360      	movs	r3, #96	; 0x60
 800b8f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b900:	463b      	mov	r3, r7
 800b902:	2200      	movs	r2, #0
 800b904:	4619      	mov	r1, r3
 800b906:	4818      	ldr	r0, [pc, #96]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b908:	f017 ff86 	bl	8023818 <HAL_TIM_PWM_ConfigChannel>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800b912:	f000 fcb1 	bl	800c278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b916:	463b      	mov	r3, r7
 800b918:	2204      	movs	r2, #4
 800b91a:	4619      	mov	r1, r3
 800b91c:	4812      	ldr	r0, [pc, #72]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b91e:	f017 ff7b 	bl	8023818 <HAL_TIM_PWM_ConfigChannel>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800b928:	f000 fca6 	bl	800c278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b92c:	463b      	mov	r3, r7
 800b92e:	2208      	movs	r2, #8
 800b930:	4619      	mov	r1, r3
 800b932:	480d      	ldr	r0, [pc, #52]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b934:	f017 ff70 	bl	8023818 <HAL_TIM_PWM_ConfigChannel>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800b93e:	f000 fc9b 	bl	800c278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b942:	463b      	mov	r3, r7
 800b944:	220c      	movs	r2, #12
 800b946:	4619      	mov	r1, r3
 800b948:	4807      	ldr	r0, [pc, #28]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b94a:	f017 ff65 	bl	8023818 <HAL_TIM_PWM_ConfigChannel>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 800b954:	f000 fc90 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b958:	4803      	ldr	r0, [pc, #12]	; (800b968 <MX_TIM2_Init+0x12c>)
 800b95a:	f001 f81d 	bl	800c998 <HAL_TIM_MspPostInit>

}
 800b95e:	bf00      	nop
 800b960:	3738      	adds	r7, #56	; 0x38
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	24005218 	.word	0x24005218

0800b96c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b972:	f107 0310 	add.w	r3, r7, #16
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	605a      	str	r2, [r3, #4]
 800b97c:	609a      	str	r2, [r3, #8]
 800b97e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b980:	1d3b      	adds	r3, r7, #4
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	605a      	str	r2, [r3, #4]
 800b988:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b98a:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b98c:	4a1d      	ldr	r2, [pc, #116]	; (800ba04 <MX_TIM3_Init+0x98>)
 800b98e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b990:	4b1b      	ldr	r3, [pc, #108]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b992:	2200      	movs	r2, #0
 800b994:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b996:	4b1a      	ldr	r3, [pc, #104]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b998:	2200      	movs	r2, #0
 800b99a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800b99c:	4b18      	ldr	r3, [pc, #96]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b99e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b9a4:	4b16      	ldr	r3, [pc, #88]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b9aa:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b9b0:	4813      	ldr	r0, [pc, #76]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b9b2:	f016 fe30 	bl	8022616 <HAL_TIM_Base_Init>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b9bc:	f000 fc5c 	bl	800c278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b9c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b9c6:	f107 0310 	add.w	r3, r7, #16
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	480c      	ldr	r0, [pc, #48]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b9ce:	f018 f837 	bl	8023a40 <HAL_TIM_ConfigClockSource>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b9d8:	f000 fc4e 	bl	800c278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b9e4:	1d3b      	adds	r3, r7, #4
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4805      	ldr	r0, [pc, #20]	; (800ba00 <MX_TIM3_Init+0x94>)
 800b9ea:	f018 fe97 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d001      	beq.n	800b9f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800b9f4:	f000 fc40 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b9f8:	bf00      	nop
 800b9fa:	3720      	adds	r7, #32
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	240055e4 	.word	0x240055e4
 800ba04:	40000400 	.word	0x40000400

0800ba08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ba0e:	f107 0310 	add.w	r3, r7, #16
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	605a      	str	r2, [r3, #4]
 800ba18:	609a      	str	r2, [r3, #8]
 800ba1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ba1c:	1d3b      	adds	r3, r7, #4
 800ba1e:	2200      	movs	r2, #0
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	605a      	str	r2, [r3, #4]
 800ba24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ba26:	4b1e      	ldr	r3, [pc, #120]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba28:	4a1e      	ldr	r2, [pc, #120]	; (800baa4 <MX_TIM4_Init+0x9c>)
 800ba2a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 275-1;
 800ba2c:	4b1c      	ldr	r3, [pc, #112]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba2e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ba32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba34:	4b1a      	ldr	r3, [pc, #104]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1563;
 800ba3a:	4b19      	ldr	r3, [pc, #100]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba3c:	f240 621b 	movw	r2, #1563	; 0x61b
 800ba40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ba42:	4b17      	ldr	r3, [pc, #92]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ba48:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800ba4e:	4814      	ldr	r0, [pc, #80]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba50:	f016 fde1 	bl	8022616 <HAL_TIM_Base_Init>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800ba5a:	f000 fc0d 	bl	800c278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ba5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800ba64:	f107 0310 	add.w	r3, r7, #16
 800ba68:	4619      	mov	r1, r3
 800ba6a:	480d      	ldr	r0, [pc, #52]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba6c:	f017 ffe8 	bl	8023a40 <HAL_TIM_ConfigClockSource>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800ba76:	f000 fbff 	bl	800c278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ba82:	1d3b      	adds	r3, r7, #4
 800ba84:	4619      	mov	r1, r3
 800ba86:	4806      	ldr	r0, [pc, #24]	; (800baa0 <MX_TIM4_Init+0x98>)
 800ba88:	f018 fe48 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800ba92:	f000 fbf1 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800ba96:	bf00      	nop
 800ba98:	3720      	adds	r7, #32
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	2400548c 	.word	0x2400548c
 800baa4:	40000800 	.word	0x40000800

0800baa8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800baae:	1d3b      	adds	r3, r7, #4
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	605a      	str	r2, [r3, #4]
 800bab6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800bab8:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <MX_TIM6_Init+0x68>)
 800baba:	4a16      	ldr	r2, [pc, #88]	; (800bb14 <MX_TIM6_Init+0x6c>)
 800babc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800babe:	4b14      	ldr	r3, [pc, #80]	; (800bb10 <MX_TIM6_Init+0x68>)
 800bac0:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bac4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bac6:	4b12      	ldr	r3, [pc, #72]	; (800bb10 <MX_TIM6_Init+0x68>)
 800bac8:	2200      	movs	r2, #0
 800baca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3647;
 800bacc:	4b10      	ldr	r3, [pc, #64]	; (800bb10 <MX_TIM6_Init+0x68>)
 800bace:	f640 623f 	movw	r2, #3647	; 0xe3f
 800bad2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bad4:	4b0e      	ldr	r3, [pc, #56]	; (800bb10 <MX_TIM6_Init+0x68>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800bada:	480d      	ldr	r0, [pc, #52]	; (800bb10 <MX_TIM6_Init+0x68>)
 800badc:	f016 fd9b 	bl	8022616 <HAL_TIM_Base_Init>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800bae6:	f000 fbc7 	bl	800c278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800baea:	2300      	movs	r3, #0
 800baec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800baee:	2300      	movs	r3, #0
 800baf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800baf2:	1d3b      	adds	r3, r7, #4
 800baf4:	4619      	mov	r1, r3
 800baf6:	4806      	ldr	r0, [pc, #24]	; (800bb10 <MX_TIM6_Init+0x68>)
 800baf8:	f018 fe10 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800bb02:	f000 fbb9 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	24005a1c 	.word	0x24005a1c
 800bb14:	40001000 	.word	0x40001000

0800bb18 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bb1e:	1d3b      	adds	r3, r7, #4
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
 800bb24:	605a      	str	r2, [r3, #4]
 800bb26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800bb28:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <MX_TIM7_Init+0x68>)
 800bb2a:	4a16      	ldr	r2, [pc, #88]	; (800bb84 <MX_TIM7_Init+0x6c>)
 800bb2c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 550-1;
 800bb2e:	4b14      	ldr	r3, [pc, #80]	; (800bb80 <MX_TIM7_Init+0x68>)
 800bb30:	f240 2225 	movw	r2, #549	; 0x225
 800bb34:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bb36:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <MX_TIM7_Init+0x68>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800bb3c:	4b10      	ldr	r3, [pc, #64]	; (800bb80 <MX_TIM7_Init+0x68>)
 800bb3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800bb44:	4b0e      	ldr	r3, [pc, #56]	; (800bb80 <MX_TIM7_Init+0x68>)
 800bb46:	2280      	movs	r2, #128	; 0x80
 800bb48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800bb4a:	480d      	ldr	r0, [pc, #52]	; (800bb80 <MX_TIM7_Init+0x68>)
 800bb4c:	f016 fd63 	bl	8022616 <HAL_TIM_Base_Init>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800bb56:	f000 fb8f 	bl	800c278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800bb5a:	2310      	movs	r3, #16
 800bb5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800bb62:	1d3b      	adds	r3, r7, #4
 800bb64:	4619      	mov	r1, r3
 800bb66:	4806      	ldr	r0, [pc, #24]	; (800bb80 <MX_TIM7_Init+0x68>)
 800bb68:	f018 fdd8 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800bb72:	f000 fb81 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	24005cf8 	.word	0x24005cf8
 800bb84:	40001400 	.word	0x40001400

0800bb88 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bb8e:	f107 0310 	add.w	r3, r7, #16
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	605a      	str	r2, [r3, #4]
 800bb98:	609a      	str	r2, [r3, #8]
 800bb9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bb9c:	1d3b      	adds	r3, r7, #4
 800bb9e:	2200      	movs	r2, #0
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	605a      	str	r2, [r3, #4]
 800bba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800bba6:	4b1d      	ldr	r3, [pc, #116]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bba8:	4a1d      	ldr	r2, [pc, #116]	; (800bc20 <MX_TIM24_Init+0x98>)
 800bbaa:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 11-1;
 800bbac:	4b1b      	ldr	r3, [pc, #108]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bbae:	220a      	movs	r2, #10
 800bbb0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bbb2:	4b1a      	ldr	r3, [pc, #104]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 800bbb8:	4b18      	ldr	r3, [pc, #96]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bbba:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbe:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bbc0:	4b16      	ldr	r3, [pc, #88]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800bbc6:	4b15      	ldr	r3, [pc, #84]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bbc8:	2280      	movs	r2, #128	; 0x80
 800bbca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800bbcc:	4813      	ldr	r0, [pc, #76]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bbce:	f016 fd22 	bl	8022616 <HAL_TIM_Base_Init>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 800bbd8:	f000 fb4e 	bl	800c278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bbdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbe0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800bbe2:	f107 0310 	add.w	r3, r7, #16
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	480c      	ldr	r0, [pc, #48]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bbea:	f017 ff29 	bl	8023a40 <HAL_TIM_ConfigClockSource>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 800bbf4:	f000 fb40 	bl	800c278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800bbf8:	2310      	movs	r3, #16
 800bbfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800bc00:	1d3b      	adds	r3, r7, #4
 800bc02:	4619      	mov	r1, r3
 800bc04:	4805      	ldr	r0, [pc, #20]	; (800bc1c <MX_TIM24_Init+0x94>)
 800bc06:	f018 fd89 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 800bc10:	f000 fb32 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800bc14:	bf00      	nop
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	24005264 	.word	0x24005264
 800bc20:	4000e400 	.word	0x4000e400

0800bc24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800bc28:	4b24      	ldr	r3, [pc, #144]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc2a:	4a25      	ldr	r2, [pc, #148]	; (800bcc0 <MX_USART2_UART_Init+0x9c>)
 800bc2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800bc2e:	4b23      	ldr	r3, [pc, #140]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc30:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800bc34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800bc36:	4b21      	ldr	r3, [pc, #132]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bc3c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800bc3e:	4b1f      	ldr	r3, [pc, #124]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800bc44:	4b1d      	ldr	r3, [pc, #116]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800bc4c:	4b1b      	ldr	r3, [pc, #108]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc4e:	220c      	movs	r2, #12
 800bc50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bc52:	4b1a      	ldr	r3, [pc, #104]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800bc58:	4b18      	ldr	r3, [pc, #96]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bc5e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bc60:	4b16      	ldr	r3, [pc, #88]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800bc66:	4b15      	ldr	r3, [pc, #84]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bc6c:	4b13      	ldr	r3, [pc, #76]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bc72:	4812      	ldr	r0, [pc, #72]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc74:	f018 fdee 	bl	8024854 <HAL_UART_Init>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 800bc7e:	f000 fafb 	bl	800c278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800bc82:	2100      	movs	r1, #0
 800bc84:	480d      	ldr	r0, [pc, #52]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc86:	f01a fb28 	bl	80262da <HAL_UARTEx_SetTxFifoThreshold>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 800bc90:	f000 faf2 	bl	800c278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800bc94:	2100      	movs	r1, #0
 800bc96:	4809      	ldr	r0, [pc, #36]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bc98:	f01a fb5d 	bl	8026356 <HAL_UARTEx_SetRxFifoThreshold>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 800bca2:	f000 fae9 	bl	800c278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800bca6:	4805      	ldr	r0, [pc, #20]	; (800bcbc <MX_USART2_UART_Init+0x98>)
 800bca8:	f01a fade 	bl	8026268 <HAL_UARTEx_DisableFifoMode>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 800bcb2:	f000 fae1 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800bcb6:	bf00      	nop
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	24005bbc 	.word	0x24005bbc
 800bcc0:	40004400 	.word	0x40004400

0800bcc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800bcc8:	4b22      	ldr	r3, [pc, #136]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bcca:	4a23      	ldr	r2, [pc, #140]	; (800bd58 <MX_USART3_UART_Init+0x94>)
 800bccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800bcce:	4b21      	ldr	r3, [pc, #132]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bcd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bcd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800bcd6:	4b1f      	ldr	r3, [pc, #124]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800bcdc:	4b1d      	ldr	r3, [pc, #116]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800bce2:	4b1c      	ldr	r3, [pc, #112]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800bce8:	4b1a      	ldr	r3, [pc, #104]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bcea:	220c      	movs	r2, #12
 800bcec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bcee:	4b19      	ldr	r3, [pc, #100]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800bcf4:	4b17      	ldr	r3, [pc, #92]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bcfa:	4b16      	ldr	r3, [pc, #88]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800bd00:	4b14      	ldr	r3, [pc, #80]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bd06:	4b13      	ldr	r3, [pc, #76]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800bd0c:	4811      	ldr	r0, [pc, #68]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bd0e:	f018 fda1 	bl	8024854 <HAL_UART_Init>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d001      	beq.n	800bd1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800bd18:	f000 faae 	bl	800c278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	480d      	ldr	r0, [pc, #52]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bd20:	f01a fadb 	bl	80262da <HAL_UARTEx_SetTxFifoThreshold>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800bd2a:	f000 faa5 	bl	800c278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4808      	ldr	r0, [pc, #32]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bd32:	f01a fb10 	bl	8026356 <HAL_UARTEx_SetRxFifoThreshold>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800bd3c:	f000 fa9c 	bl	800c278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800bd40:	4804      	ldr	r0, [pc, #16]	; (800bd54 <MX_USART3_UART_Init+0x90>)
 800bd42:	f01a fa91 	bl	8026268 <HAL_UARTEx_DisableFifoMode>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800bd4c:	f000 fa94 	bl	800c278 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800bd50:	bf00      	nop
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	240054d8 	.word	0x240054d8
 800bd58:	40004800 	.word	0x40004800

0800bd5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800bd62:	4b41      	ldr	r3, [pc, #260]	; (800be68 <MX_DMA_Init+0x10c>)
 800bd64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd68:	4a3f      	ldr	r2, [pc, #252]	; (800be68 <MX_DMA_Init+0x10c>)
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bd72:	4b3d      	ldr	r3, [pc, #244]	; (800be68 <MX_DMA_Init+0x10c>)
 800bd74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	607b      	str	r3, [r7, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800bd80:	4b39      	ldr	r3, [pc, #228]	; (800be68 <MX_DMA_Init+0x10c>)
 800bd82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd86:	4a38      	ldr	r2, [pc, #224]	; (800be68 <MX_DMA_Init+0x10c>)
 800bd88:	f043 0302 	orr.w	r3, r3, #2
 800bd8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bd90:	4b35      	ldr	r3, [pc, #212]	; (800be68 <MX_DMA_Init+0x10c>)
 800bd92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2100      	movs	r1, #0
 800bda2:	200b      	movs	r0, #11
 800bda4:	f00c fc8d 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800bda8:	200b      	movs	r0, #11
 800bdaa:	f00c fca4 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800bdae:	2200      	movs	r2, #0
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	200c      	movs	r0, #12
 800bdb4:	f00c fc85 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800bdb8:	200c      	movs	r0, #12
 800bdba:	f00c fc9c 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	200d      	movs	r0, #13
 800bdc4:	f00c fc7d 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800bdc8:	200d      	movs	r0, #13
 800bdca:	f00c fc94 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800bdce:	2200      	movs	r2, #0
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	200e      	movs	r0, #14
 800bdd4:	f00c fc75 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800bdd8:	200e      	movs	r0, #14
 800bdda:	f00c fc8c 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800bdde:	2200      	movs	r2, #0
 800bde0:	2100      	movs	r1, #0
 800bde2:	200f      	movs	r0, #15
 800bde4:	f00c fc6d 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800bde8:	200f      	movs	r0, #15
 800bdea:	f00c fc84 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	2010      	movs	r0, #16
 800bdf4:	f00c fc65 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800bdf8:	2010      	movs	r0, #16
 800bdfa:	f00c fc7c 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800bdfe:	2200      	movs	r2, #0
 800be00:	2100      	movs	r1, #0
 800be02:	2011      	movs	r0, #17
 800be04:	f00c fc5d 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800be08:	2011      	movs	r0, #17
 800be0a:	f00c fc74 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800be0e:	2200      	movs	r2, #0
 800be10:	2100      	movs	r1, #0
 800be12:	202f      	movs	r0, #47	; 0x2f
 800be14:	f00c fc55 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800be18:	202f      	movs	r0, #47	; 0x2f
 800be1a:	f00c fc6c 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800be1e:	2200      	movs	r2, #0
 800be20:	2100      	movs	r1, #0
 800be22:	2038      	movs	r0, #56	; 0x38
 800be24:	f00c fc4d 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800be28:	2038      	movs	r0, #56	; 0x38
 800be2a:	f00c fc64 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800be2e:	2200      	movs	r2, #0
 800be30:	2100      	movs	r1, #0
 800be32:	2039      	movs	r0, #57	; 0x39
 800be34:	f00c fc45 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800be38:	2039      	movs	r0, #57	; 0x39
 800be3a:	f00c fc5c 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 800be3e:	2200      	movs	r2, #0
 800be40:	2101      	movs	r1, #1
 800be42:	203a      	movs	r0, #58	; 0x3a
 800be44:	f00c fc3d 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800be48:	203a      	movs	r0, #58	; 0x3a
 800be4a:	f00c fc54 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 800be4e:	2200      	movs	r2, #0
 800be50:	2101      	movs	r1, #1
 800be52:	203b      	movs	r0, #59	; 0x3b
 800be54:	f00c fc35 	bl	80186c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800be58:	203b      	movs	r0, #59	; 0x3b
 800be5a:	f00c fc4c 	bl	80186f6 <HAL_NVIC_EnableIRQ>

}
 800be5e:	bf00      	nop
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	58024400 	.word	0x58024400

0800be6c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800be72:	1d3b      	adds	r3, r7, #4
 800be74:	2200      	movs	r2, #0
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	605a      	str	r2, [r3, #4]
 800be7a:	609a      	str	r2, [r3, #8]
 800be7c:	60da      	str	r2, [r3, #12]
 800be7e:	611a      	str	r2, [r3, #16]
 800be80:	615a      	str	r2, [r3, #20]
 800be82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800be84:	4b1f      	ldr	r3, [pc, #124]	; (800bf04 <MX_FMC_Init+0x98>)
 800be86:	4a20      	ldr	r2, [pc, #128]	; (800bf08 <MX_FMC_Init+0x9c>)
 800be88:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800be8a:	4b1e      	ldr	r3, [pc, #120]	; (800bf04 <MX_FMC_Init+0x98>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800be90:	4b1c      	ldr	r3, [pc, #112]	; (800bf04 <MX_FMC_Init+0x98>)
 800be92:	2200      	movs	r2, #0
 800be94:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800be96:	4b1b      	ldr	r3, [pc, #108]	; (800bf04 <MX_FMC_Init+0x98>)
 800be98:	2204      	movs	r2, #4
 800be9a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 800be9c:	4b19      	ldr	r3, [pc, #100]	; (800bf04 <MX_FMC_Init+0x98>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800bea2:	4b18      	ldr	r3, [pc, #96]	; (800bf04 <MX_FMC_Init+0x98>)
 800bea4:	2240      	movs	r2, #64	; 0x40
 800bea6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800bea8:	4b16      	ldr	r3, [pc, #88]	; (800bf04 <MX_FMC_Init+0x98>)
 800beaa:	2280      	movs	r2, #128	; 0x80
 800beac:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800beae:	4b15      	ldr	r3, [pc, #84]	; (800bf04 <MX_FMC_Init+0x98>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800beb4:	4b13      	ldr	r3, [pc, #76]	; (800bf04 <MX_FMC_Init+0x98>)
 800beb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800beba:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800bebc:	4b11      	ldr	r3, [pc, #68]	; (800bf04 <MX_FMC_Init+0x98>)
 800bebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bec2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800bec4:	4b0f      	ldr	r3, [pc, #60]	; (800bf04 <MX_FMC_Init+0x98>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800beca:	2310      	movs	r3, #16
 800becc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800bece:	2310      	movs	r3, #16
 800bed0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800bed2:	2310      	movs	r3, #16
 800bed4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800bed6:	2310      	movs	r3, #16
 800bed8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800beda:	2310      	movs	r3, #16
 800bedc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800bede:	2310      	movs	r3, #16
 800bee0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800bee2:	2310      	movs	r3, #16
 800bee4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800bee6:	1d3b      	adds	r3, r7, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	4806      	ldr	r0, [pc, #24]	; (800bf04 <MX_FMC_Init+0x98>)
 800beec:	f015 fa6e 	bl	80213cc <HAL_SDRAM_Init>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 800bef6:	f000 f9bf 	bl	800c278 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800befa:	bf00      	nop
 800befc:	3720      	adds	r7, #32
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	24005cc4 	.word	0x24005cc4
 800bf08:	52004140 	.word	0x52004140

0800bf0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08c      	sub	sp, #48	; 0x30
 800bf10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf12:	f107 031c 	add.w	r3, r7, #28
 800bf16:	2200      	movs	r2, #0
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	605a      	str	r2, [r3, #4]
 800bf1c:	609a      	str	r2, [r3, #8]
 800bf1e:	60da      	str	r2, [r3, #12]
 800bf20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800bf22:	4bc3      	ldr	r3, [pc, #780]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf28:	4ac1      	ldr	r2, [pc, #772]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf2a:	f043 0310 	orr.w	r3, r3, #16
 800bf2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf32:	4bbf      	ldr	r3, [pc, #764]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf38:	f003 0310 	and.w	r3, r3, #16
 800bf3c:	61bb      	str	r3, [r7, #24]
 800bf3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf40:	4bbb      	ldr	r3, [pc, #748]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf46:	4aba      	ldr	r2, [pc, #744]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf48:	f043 0304 	orr.w	r3, r3, #4
 800bf4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf50:	4bb7      	ldr	r3, [pc, #732]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf56:	f003 0304 	and.w	r3, r3, #4
 800bf5a:	617b      	str	r3, [r7, #20]
 800bf5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800bf5e:	4bb4      	ldr	r3, [pc, #720]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf64:	4ab2      	ldr	r2, [pc, #712]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf66:	f043 0320 	orr.w	r3, r3, #32
 800bf6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf6e:	4bb0      	ldr	r3, [pc, #704]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf74:	f003 0320 	and.w	r3, r3, #32
 800bf78:	613b      	str	r3, [r7, #16]
 800bf7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf7c:	4bac      	ldr	r3, [pc, #688]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf82:	4aab      	ldr	r2, [pc, #684]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf84:	f043 0301 	orr.w	r3, r3, #1
 800bf88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf8c:	4ba8      	ldr	r3, [pc, #672]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf9a:	4ba5      	ldr	r3, [pc, #660]	; (800c230 <MX_GPIO_Init+0x324>)
 800bf9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfa0:	4aa3      	ldr	r2, [pc, #652]	; (800c230 <MX_GPIO_Init+0x324>)
 800bfa2:	f043 0302 	orr.w	r3, r3, #2
 800bfa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bfaa:	4ba1      	ldr	r3, [pc, #644]	; (800c230 <MX_GPIO_Init+0x324>)
 800bfac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfb0:	f003 0302 	and.w	r3, r3, #2
 800bfb4:	60bb      	str	r3, [r7, #8]
 800bfb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bfb8:	4b9d      	ldr	r3, [pc, #628]	; (800c230 <MX_GPIO_Init+0x324>)
 800bfba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfbe:	4a9c      	ldr	r2, [pc, #624]	; (800c230 <MX_GPIO_Init+0x324>)
 800bfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bfc8:	4b99      	ldr	r3, [pc, #612]	; (800c230 <MX_GPIO_Init+0x324>)
 800bfca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd2:	607b      	str	r3, [r7, #4]
 800bfd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bfd6:	4b96      	ldr	r3, [pc, #600]	; (800c230 <MX_GPIO_Init+0x324>)
 800bfd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfdc:	4a94      	ldr	r2, [pc, #592]	; (800c230 <MX_GPIO_Init+0x324>)
 800bfde:	f043 0308 	orr.w	r3, r3, #8
 800bfe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bfe6:	4b92      	ldr	r3, [pc, #584]	; (800c230 <MX_GPIO_Init+0x324>)
 800bfe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfec:	f003 0308 	and.w	r3, r3, #8
 800bff0:	603b      	str	r3, [r7, #0]
 800bff2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS485_DIR_Pin|DO_1_PWM_Pin|DO_2_PWM_Pin, GPIO_PIN_RESET);
 800bff4:	2200      	movs	r2, #0
 800bff6:	f640 2108 	movw	r1, #2568	; 0xa08
 800bffa:	488e      	ldr	r0, [pc, #568]	; (800c234 <MX_GPIO_Init+0x328>)
 800bffc:	f00f fe8a 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DO_5_Pin|DO_6_Pin|IOL3_ENCQ_Pin|IOL3_ENL_Pin, GPIO_PIN_RESET);
 800c000:	2200      	movs	r2, #0
 800c002:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 800c006:	488c      	ldr	r0, [pc, #560]	; (800c238 <MX_GPIO_Init+0x32c>)
 800c008:	f00f fe84 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IOL2_RST_GPIO_Port, IOL2_RST_Pin, GPIO_PIN_SET);
 800c00c:	2201      	movs	r2, #1
 800c00e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c012:	488a      	ldr	r0, [pc, #552]	; (800c23c <MX_GPIO_Init+0x330>)
 800c014:	f00f fe7e 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IOL4_ENL_GPIO_Port, IOL4_ENL_Pin, GPIO_PIN_RESET);
 800c018:	2200      	movs	r2, #0
 800c01a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c01e:	4887      	ldr	r0, [pc, #540]	; (800c23c <MX_GPIO_Init+0x330>)
 800c020:	f00f fe78 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25QXX_SPI1_CS_GPIO_Port, W25QXX_SPI1_CS_Pin, GPIO_PIN_SET);
 800c024:	2201      	movs	r2, #1
 800c026:	2101      	movs	r1, #1
 800c028:	4885      	ldr	r0, [pc, #532]	; (800c240 <MX_GPIO_Init+0x334>)
 800c02a:	f00f fe73 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IOL1_RST_GPIO_Port, IOL1_RST_Pin, GPIO_PIN_SET);
 800c02e:	2201      	movs	r2, #1
 800c030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c034:	4883      	ldr	r0, [pc, #524]	; (800c244 <MX_GPIO_Init+0x338>)
 800c036:	f00f fe6d 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IOL1_ENCQ_Pin|IOL1_ENL_Pin, GPIO_PIN_RESET);
 800c03a:	2200      	movs	r2, #0
 800c03c:	210c      	movs	r1, #12
 800c03e:	4882      	ldr	r0, [pc, #520]	; (800c248 <MX_GPIO_Init+0x33c>)
 800c040:	f00f fe68 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IOL3_RST_GPIO_Port, IOL3_RST_Pin, GPIO_PIN_SET);
 800c044:	2201      	movs	r2, #1
 800c046:	2180      	movs	r1, #128	; 0x80
 800c048:	487f      	ldr	r0, [pc, #508]	; (800c248 <MX_GPIO_Init+0x33c>)
 800c04a:	f00f fe63 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO_3_PWM_Pin|DO_4_PWM_Pin, GPIO_PIN_RESET);
 800c04e:	2200      	movs	r2, #0
 800c050:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800c054:	487d      	ldr	r0, [pc, #500]	; (800c24c <MX_GPIO_Init+0x340>)
 800c056:	f00f fe5d 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IOL2_ENL_Pin|IOL2_ENCQ_Pin, GPIO_PIN_RESET);
 800c05a:	2200      	movs	r2, #0
 800c05c:	2118      	movs	r1, #24
 800c05e:	4879      	ldr	r0, [pc, #484]	; (800c244 <MX_GPIO_Init+0x338>)
 800c060:	f00f fe58 	bl	801bd14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS485_DIR_Pin DO_1_PWM_Pin DO_2_PWM_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin|DO_1_PWM_Pin|DO_2_PWM_Pin;
 800c064:	f640 2308 	movw	r3, #2568	; 0xa08
 800c068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c06a:	2301      	movs	r3, #1
 800c06c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c06e:	2300      	movs	r3, #0
 800c070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c072:	2303      	movs	r3, #3
 800c074:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c076:	f107 031c 	add.w	r3, r7, #28
 800c07a:	4619      	mov	r1, r3
 800c07c:	486d      	ldr	r0, [pc, #436]	; (800c234 <MX_GPIO_Init+0x328>)
 800c07e:	f00f fb87 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_8_Pin DI_1_ENC_A_Pin DI_2_ENC_B_Pin */
  GPIO_InitStruct.Pin = DI_8_Pin|DI_1_ENC_A_Pin|DI_2_ENC_B_Pin;
 800c082:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 800c086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c088:	2300      	movs	r3, #0
 800c08a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c08c:	2300      	movs	r3, #0
 800c08e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c090:	f107 031c 	add.w	r3, r7, #28
 800c094:	4619      	mov	r1, r3
 800c096:	4868      	ldr	r0, [pc, #416]	; (800c238 <MX_GPIO_Init+0x32c>)
 800c098:	f00f fb7a 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_5_Pin DO_6_Pin */
  GPIO_InitStruct.Pin = DO_5_Pin|DO_6_Pin;
 800c09c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c0a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c0ae:	f107 031c 	add.w	r3, r7, #28
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	4860      	ldr	r0, [pc, #384]	; (800c238 <MX_GPIO_Init+0x32c>)
 800c0b6:	f00f fb6b 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL2_RST_Pin */
  GPIO_InitStruct.Pin = IOL2_RST_Pin;
 800c0ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IOL2_RST_GPIO_Port, &GPIO_InitStruct);
 800c0cc:	f107 031c 	add.w	r3, r7, #28
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	485a      	ldr	r0, [pc, #360]	; (800c23c <MX_GPIO_Init+0x330>)
 800c0d4:	f00f fb5c 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL4_ENL_Pin */
  GPIO_InitStruct.Pin = IOL4_ENL_Pin;
 800c0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IOL4_ENL_GPIO_Port, &GPIO_InitStruct);
 800c0ea:	f107 031c 	add.w	r3, r7, #28
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	4852      	ldr	r0, [pc, #328]	; (800c23c <MX_GPIO_Init+0x330>)
 800c0f2:	f00f fb4d 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800c0f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c100:	2302      	movs	r3, #2
 800c102:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800c104:	f107 031c 	add.w	r3, r7, #28
 800c108:	4619      	mov	r1, r3
 800c10a:	484c      	ldr	r0, [pc, #304]	; (800c23c <MX_GPIO_Init+0x330>)
 800c10c:	f00f fb40 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25QXX_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = W25QXX_SPI1_CS_Pin;
 800c110:	2301      	movs	r3, #1
 800c112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c114:	2301      	movs	r3, #1
 800c116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c11c:	2303      	movs	r3, #3
 800c11e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W25QXX_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800c120:	f107 031c 	add.w	r3, r7, #28
 800c124:	4619      	mov	r1, r3
 800c126:	4846      	ldr	r0, [pc, #280]	; (800c240 <MX_GPIO_Init+0x334>)
 800c128:	f00f fb32 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_3_ENC_Z_Pin DI_4_Pin DI_5_Pin DI_6_Pin
                           DI_7_Pin */
  GPIO_InitStruct.Pin = DI_3_ENC_Z_Pin|DI_4_Pin|DI_5_Pin|DI_6_Pin
 800c12c:	f44f 734d 	mov.w	r3, #820	; 0x334
 800c130:	61fb      	str	r3, [r7, #28]
                          |DI_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c132:	2300      	movs	r3, #0
 800c134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c136:	2300      	movs	r3, #0
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c13a:	f107 031c 	add.w	r3, r7, #28
 800c13e:	4619      	mov	r1, r3
 800c140:	483f      	ldr	r0, [pc, #252]	; (800c240 <MX_GPIO_Init+0x334>)
 800c142:	f00f fb25 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL1_RST_Pin */
  GPIO_InitStruct.Pin = IOL1_RST_Pin;
 800c146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c14a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c14c:	2301      	movs	r3, #1
 800c14e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c150:	2300      	movs	r3, #0
 800c152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c154:	2300      	movs	r3, #0
 800c156:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IOL1_RST_GPIO_Port, &GPIO_InitStruct);
 800c158:	f107 031c 	add.w	r3, r7, #28
 800c15c:	4619      	mov	r1, r3
 800c15e:	4839      	ldr	r0, [pc, #228]	; (800c244 <MX_GPIO_Init+0x338>)
 800c160:	f00f fb16 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL1_ENCQ_Pin IOL1_ENL_Pin */
  GPIO_InitStruct.Pin = IOL1_ENCQ_Pin|IOL1_ENL_Pin;
 800c164:	230c      	movs	r3, #12
 800c166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c168:	2301      	movs	r3, #1
 800c16a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c16c:	2300      	movs	r3, #0
 800c16e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c170:	2302      	movs	r3, #2
 800c172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c174:	f107 031c 	add.w	r3, r7, #28
 800c178:	4619      	mov	r1, r3
 800c17a:	4833      	ldr	r0, [pc, #204]	; (800c248 <MX_GPIO_Init+0x33c>)
 800c17c:	f00f fb08 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL1_IRQ_Pin IOL2_IRQ_Pin */
  GPIO_InitStruct.Pin = IOL1_IRQ_Pin|IOL2_IRQ_Pin;
 800c180:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800c184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c186:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800c18a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c18c:	2300      	movs	r3, #0
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c190:	f107 031c 	add.w	r3, r7, #28
 800c194:	4619      	mov	r1, r3
 800c196:	482c      	ldr	r0, [pc, #176]	; (800c248 <MX_GPIO_Init+0x33c>)
 800c198:	f00f fafa 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL3_RST_Pin */
  GPIO_InitStruct.Pin = IOL3_RST_Pin;
 800c19c:	2380      	movs	r3, #128	; 0x80
 800c19e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IOL3_RST_GPIO_Port, &GPIO_InitStruct);
 800c1ac:	f107 031c 	add.w	r3, r7, #28
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	4825      	ldr	r0, [pc, #148]	; (800c248 <MX_GPIO_Init+0x33c>)
 800c1b4:	f00f faec 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL3_ENCQ_Pin IOL3_ENL_Pin */
  GPIO_InitStruct.Pin = IOL3_ENCQ_Pin|IOL3_ENL_Pin;
 800c1b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c1bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c1ca:	f107 031c 	add.w	r3, r7, #28
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	4819      	ldr	r0, [pc, #100]	; (800c238 <MX_GPIO_Init+0x32c>)
 800c1d2:	f00f fadd 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL3_IRQ_Pin */
  GPIO_InitStruct.Pin = IOL3_IRQ_Pin;
 800c1d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c1dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800c1e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IOL3_IRQ_GPIO_Port, &GPIO_InitStruct);
 800c1e6:	f107 031c 	add.w	r3, r7, #28
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	4817      	ldr	r0, [pc, #92]	; (800c24c <MX_GPIO_Init+0x340>)
 800c1ee:	f00f facf 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_3_PWM_Pin DO_4_PWM_Pin */
  GPIO_InitStruct.Pin = DO_3_PWM_Pin|DO_4_PWM_Pin;
 800c1f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c1f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c200:	2303      	movs	r3, #3
 800c202:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c204:	f107 031c 	add.w	r3, r7, #28
 800c208:	4619      	mov	r1, r3
 800c20a:	4810      	ldr	r0, [pc, #64]	; (800c24c <MX_GPIO_Init+0x340>)
 800c20c:	f00f fac0 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL4_IRQ_Pin */
  GPIO_InitStruct.Pin = IOL4_IRQ_Pin;
 800c210:	2304      	movs	r3, #4
 800c212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c214:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800c218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IOL4_IRQ_GPIO_Port, &GPIO_InitStruct);
 800c21e:	f107 031c 	add.w	r3, r7, #28
 800c222:	4619      	mov	r1, r3
 800c224:	4807      	ldr	r0, [pc, #28]	; (800c244 <MX_GPIO_Init+0x338>)
 800c226:	f00f fab3 	bl	801b790 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL2_ENL_Pin IOL2_ENCQ_Pin */
  GPIO_InitStruct.Pin = IOL2_ENL_Pin|IOL2_ENCQ_Pin;
 800c22a:	2318      	movs	r3, #24
 800c22c:	e010      	b.n	800c250 <MX_GPIO_Init+0x344>
 800c22e:	bf00      	nop
 800c230:	58024400 	.word	0x58024400
 800c234:	58021000 	.word	0x58021000
 800c238:	58020800 	.word	0x58020800
 800c23c:	58021400 	.word	0x58021400
 800c240:	58020400 	.word	0x58020400
 800c244:	58020c00 	.word	0x58020c00
 800c248:	58021800 	.word	0x58021800
 800c24c:	58020000 	.word	0x58020000
 800c250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c252:	2301      	movs	r3, #1
 800c254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c256:	2300      	movs	r3, #0
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c25a:	2302      	movs	r3, #2
 800c25c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c25e:	f107 031c 	add.w	r3, r7, #28
 800c262:	4619      	mov	r1, r3
 800c264:	4803      	ldr	r0, [pc, #12]	; (800c274 <MX_GPIO_Init+0x368>)
 800c266:	f00f fa93 	bl	801b790 <HAL_GPIO_Init>

}
 800c26a:	bf00      	nop
 800c26c:	3730      	adds	r7, #48	; 0x30
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	58020c00 	.word	0x58020c00

0800c278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c278:	b480      	push	{r7}
 800c27a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c27c:	b672      	cpsid	i
}
 800c27e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c280:	e7fe      	b.n	800c280 <Error_Handler+0x8>
	...

0800c284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c28a:	4b0c      	ldr	r3, [pc, #48]	; (800c2bc <HAL_MspInit+0x38>)
 800c28c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c290:	4a0a      	ldr	r2, [pc, #40]	; (800c2bc <HAL_MspInit+0x38>)
 800c292:	f043 0302 	orr.w	r3, r3, #2
 800c296:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c29a:	4b08      	ldr	r3, [pc, #32]	; (800c2bc <HAL_MspInit+0x38>)
 800c29c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c2a0:	f003 0302 	and.w	r3, r3, #2
 800c2a4:	607b      	str	r3, [r7, #4]
 800c2a6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2105      	movs	r1, #5
 800c2ac:	f06f 0003 	mvn.w	r0, #3
 800c2b0:	f00c fa07 	bl	80186c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c2b4:	bf00      	nop
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	58024400 	.word	0x58024400

0800c2c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b0b8      	sub	sp, #224	; 0xe0
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	605a      	str	r2, [r3, #4]
 800c2d2:	609a      	str	r2, [r3, #8]
 800c2d4:	60da      	str	r2, [r3, #12]
 800c2d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c2d8:	f107 0318 	add.w	r3, r7, #24
 800c2dc:	22b4      	movs	r2, #180	; 0xb4
 800c2de:	2100      	movs	r1, #0
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f01a fa27 	bl	8026734 <memset>
  if(hadc->Instance==ADC1)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a39      	ldr	r2, [pc, #228]	; (800c3d0 <HAL_ADC_MspInit+0x110>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d16a      	bne.n	800c3c6 <HAL_ADC_MspInit+0x106>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800c2f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c2f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800c2f6:	2304      	movs	r3, #4
 800c2f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 800c2fa:	230c      	movs	r3, #12
 800c2fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800c2fe:	2302      	movs	r3, #2
 800c300:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800c302:	2302      	movs	r3, #2
 800c304:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800c306:	2302      	movs	r3, #2
 800c308:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800c30a:	23c0      	movs	r3, #192	; 0xc0
 800c30c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800c30e:	2300      	movs	r3, #0
 800c310:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800c316:	2300      	movs	r3, #0
 800c318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c31c:	f107 0318 	add.w	r3, r7, #24
 800c320:	4618      	mov	r0, r3
 800c322:	f012 ffc1 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800c32c:	f7ff ffa4 	bl	800c278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800c330:	4b28      	ldr	r3, [pc, #160]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c336:	4a27      	ldr	r2, [pc, #156]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c338:	f043 0320 	orr.w	r3, r3, #32
 800c33c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c340:	4b24      	ldr	r3, [pc, #144]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c346:	f003 0320 	and.w	r3, r3, #32
 800c34a:	617b      	str	r3, [r7, #20]
 800c34c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c34e:	4b21      	ldr	r3, [pc, #132]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c354:	4a1f      	ldr	r2, [pc, #124]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c356:	f043 0301 	orr.w	r3, r3, #1
 800c35a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c35e:	4b1d      	ldr	r3, [pc, #116]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c364:	f003 0301 	and.w	r3, r3, #1
 800c368:	613b      	str	r3, [r7, #16]
 800c36a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c36c:	4b19      	ldr	r3, [pc, #100]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c36e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c372:	4a18      	ldr	r2, [pc, #96]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c374:	f043 0302 	orr.w	r3, r3, #2
 800c378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c37c:	4b15      	ldr	r3, [pc, #84]	; (800c3d4 <HAL_ADC_MspInit+0x114>)
 800c37e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	60fb      	str	r3, [r7, #12]
 800c388:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = AI_1_Pin;
 800c38a:	2340      	movs	r3, #64	; 0x40
 800c38c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c390:	2303      	movs	r3, #3
 800c392:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c396:	2300      	movs	r3, #0
 800c398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(AI_1_GPIO_Port, &GPIO_InitStruct);
 800c39c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	480d      	ldr	r0, [pc, #52]	; (800c3d8 <HAL_ADC_MspInit+0x118>)
 800c3a4:	f00f f9f4 	bl	801b790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AI_2_Pin;
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(AI_2_GPIO_Port, &GPIO_InitStruct);
 800c3ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c3be:	4619      	mov	r1, r3
 800c3c0:	4806      	ldr	r0, [pc, #24]	; (800c3dc <HAL_ADC_MspInit+0x11c>)
 800c3c2:	f00f f9e5 	bl	801b790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c3c6:	bf00      	nop
 800c3c8:	37e0      	adds	r7, #224	; 0xe0
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	40022000 	.word	0x40022000
 800c3d4:	58024400 	.word	0x58024400
 800c3d8:	58020000 	.word	0x58020000
 800c3dc:	58020400 	.word	0x58020400

0800c3e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b0b8      	sub	sp, #224	; 0xe0
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	605a      	str	r2, [r3, #4]
 800c3f2:	609a      	str	r2, [r3, #8]
 800c3f4:	60da      	str	r2, [r3, #12]
 800c3f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c3f8:	f107 0318 	add.w	r3, r7, #24
 800c3fc:	22b4      	movs	r2, #180	; 0xb4
 800c3fe:	2100      	movs	r1, #0
 800c400:	4618      	mov	r0, r3
 800c402:	f01a f997 	bl	8026734 <memset>
  if(hi2c->Instance==I2C1)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a83      	ldr	r2, [pc, #524]	; (800c618 <HAL_I2C_MspInit+0x238>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	f040 80af 	bne.w	800c570 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800c412:	2308      	movs	r3, #8
 800c414:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800c416:	2300      	movs	r3, #0
 800c418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c41c:	f107 0318 	add.w	r3, r7, #24
 800c420:	4618      	mov	r0, r3
 800c422:	f012 ff41 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800c42c:	f7ff ff24 	bl	800c278 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c430:	4b7a      	ldr	r3, [pc, #488]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c436:	4a79      	ldr	r2, [pc, #484]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c438:	f043 0302 	orr.w	r3, r3, #2
 800c43c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c440:	4b76      	ldr	r3, [pc, #472]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c446:	f003 0302 	and.w	r3, r3, #2
 800c44a:	617b      	str	r3, [r7, #20]
 800c44c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAC_IOX_I2C_SCL_Pin|MAC_IOX_I2C1_SDA_Pin;
 800c44e:	23c0      	movs	r3, #192	; 0xc0
 800c450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c454:	2312      	movs	r3, #18
 800c456:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c45a:	2300      	movs	r3, #0
 800c45c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c460:	2300      	movs	r3, #0
 800c462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c466:	2304      	movs	r3, #4
 800c468:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c46c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c470:	4619      	mov	r1, r3
 800c472:	486b      	ldr	r0, [pc, #428]	; (800c620 <HAL_I2C_MspInit+0x240>)
 800c474:	f00f f98c 	bl	801b790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c478:	4b68      	ldr	r3, [pc, #416]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c47a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c47e:	4a67      	ldr	r2, [pc, #412]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c484:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c488:	4b64      	ldr	r3, [pc, #400]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c48a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c48e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c492:	613b      	str	r3, [r7, #16]
 800c494:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Stream2;
 800c496:	4b63      	ldr	r3, [pc, #396]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c498:	4a63      	ldr	r2, [pc, #396]	; (800c628 <HAL_I2C_MspInit+0x248>)
 800c49a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800c49c:	4b61      	ldr	r3, [pc, #388]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c49e:	2222      	movs	r2, #34	; 0x22
 800c4a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c4a2:	4b60      	ldr	r3, [pc, #384]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4a4:	2240      	movs	r2, #64	; 0x40
 800c4a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c4a8:	4b5e      	ldr	r3, [pc, #376]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c4ae:	4b5d      	ldr	r3, [pc, #372]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c4b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c4b6:	4b5b      	ldr	r3, [pc, #364]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c4bc:	4b59      	ldr	r3, [pc, #356]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c4c2:	4b58      	ldr	r3, [pc, #352]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c4c8:	4b56      	ldr	r3, [pc, #344]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c4ce:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c4d0:	4b54      	ldr	r3, [pc, #336]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c4d6:	4853      	ldr	r0, [pc, #332]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4d8:	f00c f936 	bl	8018748 <HAL_DMA_Init>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 800c4e2:	f7ff fec9 	bl	800c278 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a4e      	ldr	r2, [pc, #312]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4ea:	639a      	str	r2, [r3, #56]	; 0x38
 800c4ec:	4a4d      	ldr	r2, [pc, #308]	; (800c624 <HAL_I2C_MspInit+0x244>)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Stream3;
 800c4f2:	4b4e      	ldr	r3, [pc, #312]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c4f4:	4a4e      	ldr	r2, [pc, #312]	; (800c630 <HAL_I2C_MspInit+0x250>)
 800c4f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800c4f8:	4b4c      	ldr	r3, [pc, #304]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c4fa:	2221      	movs	r2, #33	; 0x21
 800c4fc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4fe:	4b4b      	ldr	r3, [pc, #300]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c500:	2200      	movs	r2, #0
 800c502:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c504:	4b49      	ldr	r3, [pc, #292]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c506:	2200      	movs	r2, #0
 800c508:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c50a:	4b48      	ldr	r3, [pc, #288]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c50c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c510:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c512:	4b46      	ldr	r3, [pc, #280]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c514:	2200      	movs	r2, #0
 800c516:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c518:	4b44      	ldr	r3, [pc, #272]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c51e:	4b43      	ldr	r3, [pc, #268]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c520:	2200      	movs	r2, #0
 800c522:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c524:	4b41      	ldr	r3, [pc, #260]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c526:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c52a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c52c:	4b3f      	ldr	r3, [pc, #252]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c52e:	2200      	movs	r2, #0
 800c530:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c532:	483e      	ldr	r0, [pc, #248]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c534:	f00c f908 	bl	8018748 <HAL_DMA_Init>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <HAL_I2C_MspInit+0x162>
    {
      Error_Handler();
 800c53e:	f7ff fe9b 	bl	800c278 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a39      	ldr	r2, [pc, #228]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c546:	63da      	str	r2, [r3, #60]	; 0x3c
 800c548:	4a38      	ldr	r2, [pc, #224]	; (800c62c <HAL_I2C_MspInit+0x24c>)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 800c54e:	2200      	movs	r2, #0
 800c550:	2104      	movs	r1, #4
 800c552:	201f      	movs	r0, #31
 800c554:	f00c f8b5 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800c558:	201f      	movs	r0, #31
 800c55a:	f00c f8cc 	bl	80186f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 4, 0);
 800c55e:	2200      	movs	r2, #0
 800c560:	2104      	movs	r1, #4
 800c562:	2020      	movs	r0, #32
 800c564:	f00c f8ad 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800c568:	2020      	movs	r0, #32
 800c56a:	f00c f8c4 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800c56e:	e04f      	b.n	800c610 <HAL_I2C_MspInit+0x230>
  else if(hi2c->Instance==I2C4)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a2f      	ldr	r2, [pc, #188]	; (800c634 <HAL_I2C_MspInit+0x254>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d14a      	bne.n	800c610 <HAL_I2C_MspInit+0x230>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800c57a:	2310      	movs	r3, #16
 800c57c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800c57e:	2300      	movs	r3, #0
 800c580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c584:	f107 0318 	add.w	r3, r7, #24
 800c588:	4618      	mov	r0, r3
 800c58a:	f012 fe8d 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <HAL_I2C_MspInit+0x1b8>
      Error_Handler();
 800c594:	f7ff fe70 	bl	800c278 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c598:	4b20      	ldr	r3, [pc, #128]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c59a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c59e:	4a1f      	ldr	r2, [pc, #124]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c5a0:	f043 0308 	orr.w	r3, r3, #8
 800c5a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c5a8:	4b1c      	ldr	r3, [pc, #112]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c5aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5ae:	f003 0308 	and.w	r3, r3, #8
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IOL_I2C4_SCL_Pin|IOL_I2C4_SDA_Pin;
 800c5b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c5ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c5be:	2312      	movs	r3, #18
 800c5c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c5ca:	2302      	movs	r3, #2
 800c5cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800c5d0:	2304      	movs	r3, #4
 800c5d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c5d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4816      	ldr	r0, [pc, #88]	; (800c638 <HAL_I2C_MspInit+0x258>)
 800c5de:	f00f f8d7 	bl	801b790 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800c5e2:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c5e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c5e8:	4a0c      	ldr	r2, [pc, #48]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c5f2:	4b0a      	ldr	r3, [pc, #40]	; (800c61c <HAL_I2C_MspInit+0x23c>)
 800c5f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5fc:	60bb      	str	r3, [r7, #8]
 800c5fe:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800c600:	2200      	movs	r2, #0
 800c602:	2100      	movs	r1, #0
 800c604:	2060      	movs	r0, #96	; 0x60
 800c606:	f00c f85c 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800c60a:	2060      	movs	r0, #96	; 0x60
 800c60c:	f00c f873 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800c610:	bf00      	nop
 800c612:	37e0      	adds	r7, #224	; 0xe0
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	40005400 	.word	0x40005400
 800c61c:	58024400 	.word	0x58024400
 800c620:	58020400 	.word	0x58020400
 800c624:	24005568 	.word	0x24005568
 800c628:	40020440 	.word	0x40020440
 800c62c:	24005ab4 	.word	0x24005ab4
 800c630:	40020458 	.word	0x40020458
 800c634:	58001c00 	.word	0x58001c00
 800c638:	58020c00 	.word	0x58020c00

0800c63c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b0b8      	sub	sp, #224	; 0xe0
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c644:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	605a      	str	r2, [r3, #4]
 800c64e:	609a      	str	r2, [r3, #8]
 800c650:	60da      	str	r2, [r3, #12]
 800c652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c654:	f107 0318 	add.w	r3, r7, #24
 800c658:	22b4      	movs	r2, #180	; 0xb4
 800c65a:	2100      	movs	r1, #0
 800c65c:	4618      	mov	r0, r3
 800c65e:	f01a f869 	bl	8026734 <memset>
  if(hspi->Instance==SPI1)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a49      	ldr	r2, [pc, #292]	; (800c78c <HAL_SPI_MspInit+0x150>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	f040 808b 	bne.w	800c784 <HAL_SPI_MspInit+0x148>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800c66e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c672:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800c674:	2300      	movs	r3, #0
 800c676:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c678:	f107 0318 	add.w	r3, r7, #24
 800c67c:	4618      	mov	r0, r3
 800c67e:	f012 fe13 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800c688:	f7ff fdf6 	bl	800c278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c68c:	4b40      	ldr	r3, [pc, #256]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c68e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c692:	4a3f      	ldr	r2, [pc, #252]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c698:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c69c:	4b3c      	ldr	r3, [pc, #240]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c69e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6aa:	4b39      	ldr	r3, [pc, #228]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c6b0:	4a37      	ldr	r2, [pc, #220]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6b2:	f043 0301 	orr.w	r3, r3, #1
 800c6b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c6ba:	4b35      	ldr	r3, [pc, #212]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	613b      	str	r3, [r7, #16]
 800c6c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c6c8:	4b31      	ldr	r3, [pc, #196]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c6ce:	4a30      	ldr	r2, [pc, #192]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6d0:	f043 0308 	orr.w	r3, r3, #8
 800c6d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c6d8:	4b2d      	ldr	r3, [pc, #180]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c6de:	f003 0308 	and.w	r3, r3, #8
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c6e6:	4b2a      	ldr	r3, [pc, #168]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c6ec:	4a28      	ldr	r2, [pc, #160]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c6f6:	4b26      	ldr	r3, [pc, #152]	; (800c790 <HAL_SPI_MspInit+0x154>)
 800c6f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c700:	60bb      	str	r3, [r7, #8]
 800c702:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c704:	2320      	movs	r3, #32
 800c706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c70a:	2302      	movs	r3, #2
 800c70c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c710:	2300      	movs	r3, #0
 800c712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c716:	2300      	movs	r3, #0
 800c718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c71c:	2305      	movs	r3, #5
 800c71e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c722:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c726:	4619      	mov	r1, r3
 800c728:	481a      	ldr	r0, [pc, #104]	; (800c794 <HAL_SPI_MspInit+0x158>)
 800c72a:	f00f f831 	bl	801b790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c72e:	2380      	movs	r3, #128	; 0x80
 800c730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c734:	2302      	movs	r3, #2
 800c736:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c740:	2300      	movs	r3, #0
 800c742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c746:	2305      	movs	r3, #5
 800c748:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c74c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c750:	4619      	mov	r1, r3
 800c752:	4811      	ldr	r0, [pc, #68]	; (800c798 <HAL_SPI_MspInit+0x15c>)
 800c754:	f00f f81c 	bl	801b790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c75c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c760:	2302      	movs	r3, #2
 800c762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c766:	2300      	movs	r3, #0
 800c768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c76c:	2300      	movs	r3, #0
 800c76e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c772:	2305      	movs	r3, #5
 800c774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c778:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c77c:	4619      	mov	r1, r3
 800c77e:	4807      	ldr	r0, [pc, #28]	; (800c79c <HAL_SPI_MspInit+0x160>)
 800c780:	f00f f806 	bl	801b790 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800c784:	bf00      	nop
 800c786:	37e0      	adds	r7, #224	; 0xe0
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	40013000 	.word	0x40013000
 800c790:	58024400 	.word	0x58024400
 800c794:	58020000 	.word	0x58020000
 800c798:	58020c00 	.word	0x58020c00
 800c79c:	58021800 	.word	0x58021800

0800c7a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a0d      	ldr	r2, [pc, #52]	; (800c7e4 <HAL_SPI_MspDeInit+0x44>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d114      	bne.n	800c7dc <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800c7b2:	4b0d      	ldr	r3, [pc, #52]	; (800c7e8 <HAL_SPI_MspDeInit+0x48>)
 800c7b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7b8:	4a0b      	ldr	r2, [pc, #44]	; (800c7e8 <HAL_SPI_MspDeInit+0x48>)
 800c7ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
 800c7c2:	2120      	movs	r1, #32
 800c7c4:	4809      	ldr	r0, [pc, #36]	; (800c7ec <HAL_SPI_MspDeInit+0x4c>)
 800c7c6:	f00f f98b 	bl	801bae0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7);
 800c7ca:	2180      	movs	r1, #128	; 0x80
 800c7cc:	4808      	ldr	r0, [pc, #32]	; (800c7f0 <HAL_SPI_MspDeInit+0x50>)
 800c7ce:	f00f f987 	bl	801bae0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800c7d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c7d6:	4807      	ldr	r0, [pc, #28]	; (800c7f4 <HAL_SPI_MspDeInit+0x54>)
 800c7d8:	f00f f982 	bl	801bae0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	40013000 	.word	0x40013000
 800c7e8:	58024400 	.word	0x58024400
 800c7ec:	58020000 	.word	0x58020000
 800c7f0:	58020c00 	.word	0x58020c00
 800c7f4:	58021800 	.word	0x58021800

0800c7f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b08a      	sub	sp, #40	; 0x28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a5d      	ldr	r2, [pc, #372]	; (800c97c <HAL_TIM_Base_MspInit+0x184>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d10f      	bne.n	800c82a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c80a:	4b5d      	ldr	r3, [pc, #372]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c80c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c810:	4a5b      	ldr	r2, [pc, #364]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c812:	f043 0301 	orr.w	r3, r3, #1
 800c816:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c81a:	4b59      	ldr	r3, [pc, #356]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c81c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	627b      	str	r3, [r7, #36]	; 0x24
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 800c828:	e0a4      	b.n	800c974 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM2)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c832:	d10f      	bne.n	800c854 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c834:	4b52      	ldr	r3, [pc, #328]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c83a:	4a51      	ldr	r2, [pc, #324]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c83c:	f043 0301 	orr.w	r3, r3, #1
 800c840:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c844:	4b4e      	ldr	r3, [pc, #312]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c84a:	f003 0301 	and.w	r3, r3, #1
 800c84e:	623b      	str	r3, [r7, #32]
 800c850:	6a3b      	ldr	r3, [r7, #32]
}
 800c852:	e08f      	b.n	800c974 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM3)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a4a      	ldr	r2, [pc, #296]	; (800c984 <HAL_TIM_Base_MspInit+0x18c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d117      	bne.n	800c88e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c85e:	4b48      	ldr	r3, [pc, #288]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c864:	4a46      	ldr	r2, [pc, #280]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c866:	f043 0302 	orr.w	r3, r3, #2
 800c86a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c86e:	4b44      	ldr	r3, [pc, #272]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c874:	f003 0302 	and.w	r3, r3, #2
 800c878:	61fb      	str	r3, [r7, #28]
 800c87a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c87c:	2200      	movs	r2, #0
 800c87e:	2100      	movs	r1, #0
 800c880:	201d      	movs	r0, #29
 800c882:	f00b ff1e 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c886:	201d      	movs	r0, #29
 800c888:	f00b ff35 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800c88c:	e072      	b.n	800c974 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM4)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a3d      	ldr	r2, [pc, #244]	; (800c988 <HAL_TIM_Base_MspInit+0x190>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d117      	bne.n	800c8c8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c898:	4b39      	ldr	r3, [pc, #228]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c89a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c89e:	4a38      	ldr	r2, [pc, #224]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c8a0:	f043 0304 	orr.w	r3, r3, #4
 800c8a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c8a8:	4b35      	ldr	r3, [pc, #212]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c8aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c8ae:	f003 0304 	and.w	r3, r3, #4
 800c8b2:	61bb      	str	r3, [r7, #24]
 800c8b4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	2103      	movs	r1, #3
 800c8ba:	201e      	movs	r0, #30
 800c8bc:	f00b ff01 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800c8c0:	201e      	movs	r0, #30
 800c8c2:	f00b ff18 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800c8c6:	e055      	b.n	800c974 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM6)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a2f      	ldr	r2, [pc, #188]	; (800c98c <HAL_TIM_Base_MspInit+0x194>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d117      	bne.n	800c902 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c8d2:	4b2b      	ldr	r3, [pc, #172]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c8d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c8d8:	4a29      	ldr	r2, [pc, #164]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c8da:	f043 0310 	orr.w	r3, r3, #16
 800c8de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c8e2:	4b27      	ldr	r3, [pc, #156]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c8e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c8e8:	f003 0310 	and.w	r3, r3, #16
 800c8ec:	617b      	str	r3, [r7, #20]
 800c8ee:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	2103      	movs	r1, #3
 800c8f4:	2036      	movs	r0, #54	; 0x36
 800c8f6:	f00b fee4 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c8fa:	2036      	movs	r0, #54	; 0x36
 800c8fc:	f00b fefb 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800c900:	e038      	b.n	800c974 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM7)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a22      	ldr	r2, [pc, #136]	; (800c990 <HAL_TIM_Base_MspInit+0x198>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d117      	bne.n	800c93c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800c90c:	4b1c      	ldr	r3, [pc, #112]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c90e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c912:	4a1b      	ldr	r2, [pc, #108]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c914:	f043 0320 	orr.w	r3, r3, #32
 800c918:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c91c:	4b18      	ldr	r3, [pc, #96]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c91e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c922:	f003 0320 	and.w	r3, r3, #32
 800c926:	613b      	str	r3, [r7, #16]
 800c928:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800c92a:	2200      	movs	r2, #0
 800c92c:	2100      	movs	r1, #0
 800c92e:	2037      	movs	r0, #55	; 0x37
 800c930:	f00b fec7 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800c934:	2037      	movs	r0, #55	; 0x37
 800c936:	f00b fede 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800c93a:	e01b      	b.n	800c974 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM24)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a14      	ldr	r2, [pc, #80]	; (800c994 <HAL_TIM_Base_MspInit+0x19c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d116      	bne.n	800c974 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800c946:	4b0e      	ldr	r3, [pc, #56]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c948:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c94c:	4a0c      	ldr	r2, [pc, #48]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c94e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c952:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800c956:	4b0a      	ldr	r3, [pc, #40]	; (800c980 <HAL_TIM_Base_MspInit+0x188>)
 800c958:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c95c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c960:	60fb      	str	r3, [r7, #12]
 800c962:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM24_IRQn, 5, 0);
 800c964:	2200      	movs	r2, #0
 800c966:	2105      	movs	r1, #5
 800c968:	20a2      	movs	r0, #162	; 0xa2
 800c96a:	f00b feaa 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 800c96e:	20a2      	movs	r0, #162	; 0xa2
 800c970:	f00b fec1 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800c974:	bf00      	nop
 800c976:	3728      	adds	r7, #40	; 0x28
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	40010000 	.word	0x40010000
 800c980:	58024400 	.word	0x58024400
 800c984:	40000400 	.word	0x40000400
 800c988:	40000800 	.word	0x40000800
 800c98c:	40001000 	.word	0x40001000
 800c990:	40001400 	.word	0x40001400
 800c994:	4000e400 	.word	0x4000e400

0800c998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08a      	sub	sp, #40	; 0x28
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9a0:	f107 0314 	add.w	r3, r7, #20
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	605a      	str	r2, [r3, #4]
 800c9aa:	609a      	str	r2, [r3, #8]
 800c9ac:	60da      	str	r2, [r3, #12]
 800c9ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9b8:	d13f      	bne.n	800ca3a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9ba:	4b22      	ldr	r3, [pc, #136]	; (800ca44 <HAL_TIM_MspPostInit+0xac>)
 800c9bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9c0:	4a20      	ldr	r2, [pc, #128]	; (800ca44 <HAL_TIM_MspPostInit+0xac>)
 800c9c2:	f043 0301 	orr.w	r3, r3, #1
 800c9c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c9ca:	4b1e      	ldr	r3, [pc, #120]	; (800ca44 <HAL_TIM_MspPostInit+0xac>)
 800c9cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	613b      	str	r3, [r7, #16]
 800c9d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ca44 <HAL_TIM_MspPostInit+0xac>)
 800c9da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9de:	4a19      	ldr	r2, [pc, #100]	; (800ca44 <HAL_TIM_MspPostInit+0xac>)
 800c9e0:	f043 0302 	orr.w	r3, r3, #2
 800c9e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c9e8:	4b16      	ldr	r3, [pc, #88]	; (800ca44 <HAL_TIM_MspPostInit+0xac>)
 800c9ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9ee:	f003 0302 	and.w	r3, r3, #2
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = AO_4_PWM_Pin|AO_1_PWM_Pin;
 800c9f6:	f248 0308 	movw	r3, #32776	; 0x8008
 800c9fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9fc:	2302      	movs	r3, #2
 800c9fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca00:	2300      	movs	r3, #0
 800ca02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ca04:	2302      	movs	r3, #2
 800ca06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca0c:	f107 0314 	add.w	r3, r7, #20
 800ca10:	4619      	mov	r1, r3
 800ca12:	480d      	ldr	r0, [pc, #52]	; (800ca48 <HAL_TIM_MspPostInit+0xb0>)
 800ca14:	f00e febc 	bl	801b790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AO_3_PWM_Pin|AO_2_PWM_Pin;
 800ca18:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800ca1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca1e:	2302      	movs	r3, #2
 800ca20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca22:	2300      	movs	r3, #0
 800ca24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ca26:	2302      	movs	r3, #2
 800ca28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca2e:	f107 0314 	add.w	r3, r7, #20
 800ca32:	4619      	mov	r1, r3
 800ca34:	4805      	ldr	r0, [pc, #20]	; (800ca4c <HAL_TIM_MspPostInit+0xb4>)
 800ca36:	f00e feab 	bl	801b790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800ca3a:	bf00      	nop
 800ca3c:	3728      	adds	r7, #40	; 0x28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	58024400 	.word	0x58024400
 800ca48:	58020000 	.word	0x58020000
 800ca4c:	58020400 	.word	0x58020400

0800ca50 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a38      	ldr	r2, [pc, #224]	; (800cb40 <HAL_TIM_Base_MspDeInit+0xf0>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d108      	bne.n	800ca74 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800ca62:	4b38      	ldr	r3, [pc, #224]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800ca64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca68:	4a36      	ldr	r2, [pc, #216]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800ca6a:	f023 0301 	bic.w	r3, r3, #1
 800ca6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  /* USER CODE BEGIN TIM24_MspDeInit 1 */

  /* USER CODE END TIM24_MspDeInit 1 */
  }

}
 800ca72:	e061      	b.n	800cb38 <HAL_TIM_Base_MspDeInit+0xe8>
  else if(htim_base->Instance==TIM2)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca7c:	d108      	bne.n	800ca90 <HAL_TIM_Base_MspDeInit+0x40>
    __HAL_RCC_TIM2_CLK_DISABLE();
 800ca7e:	4b31      	ldr	r3, [pc, #196]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800ca80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ca84:	4a2f      	ldr	r2, [pc, #188]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800ca86:	f023 0301 	bic.w	r3, r3, #1
 800ca8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 800ca8e:	e053      	b.n	800cb38 <HAL_TIM_Base_MspDeInit+0xe8>
  else if(htim_base->Instance==TIM3)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a2c      	ldr	r2, [pc, #176]	; (800cb48 <HAL_TIM_Base_MspDeInit+0xf8>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d10b      	bne.n	800cab2 <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM3_CLK_DISABLE();
 800ca9a:	4b2a      	ldr	r3, [pc, #168]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800ca9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800caa0:	4a28      	ldr	r2, [pc, #160]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800caa2:	f023 0302 	bic.w	r3, r3, #2
 800caa6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800caaa:	201d      	movs	r0, #29
 800caac:	f00b fe31 	bl	8018712 <HAL_NVIC_DisableIRQ>
}
 800cab0:	e042      	b.n	800cb38 <HAL_TIM_Base_MspDeInit+0xe8>
  else if(htim_base->Instance==TIM4)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a25      	ldr	r2, [pc, #148]	; (800cb4c <HAL_TIM_Base_MspDeInit+0xfc>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d10b      	bne.n	800cad4 <HAL_TIM_Base_MspDeInit+0x84>
    __HAL_RCC_TIM4_CLK_DISABLE();
 800cabc:	4b21      	ldr	r3, [pc, #132]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800cabe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cac2:	4a20      	ldr	r2, [pc, #128]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800cac4:	f023 0304 	bic.w	r3, r3, #4
 800cac8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800cacc:	201e      	movs	r0, #30
 800cace:	f00b fe20 	bl	8018712 <HAL_NVIC_DisableIRQ>
}
 800cad2:	e031      	b.n	800cb38 <HAL_TIM_Base_MspDeInit+0xe8>
  else if(htim_base->Instance==TIM6)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a1d      	ldr	r2, [pc, #116]	; (800cb50 <HAL_TIM_Base_MspDeInit+0x100>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d10b      	bne.n	800caf6 <HAL_TIM_Base_MspDeInit+0xa6>
    __HAL_RCC_TIM6_CLK_DISABLE();
 800cade:	4b19      	ldr	r3, [pc, #100]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800cae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cae4:	4a17      	ldr	r2, [pc, #92]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800cae6:	f023 0310 	bic.w	r3, r3, #16
 800caea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 800caee:	2036      	movs	r0, #54	; 0x36
 800caf0:	f00b fe0f 	bl	8018712 <HAL_NVIC_DisableIRQ>
}
 800caf4:	e020      	b.n	800cb38 <HAL_TIM_Base_MspDeInit+0xe8>
  else if(htim_base->Instance==TIM7)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a16      	ldr	r2, [pc, #88]	; (800cb54 <HAL_TIM_Base_MspDeInit+0x104>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d10b      	bne.n	800cb18 <HAL_TIM_Base_MspDeInit+0xc8>
    __HAL_RCC_TIM7_CLK_DISABLE();
 800cb00:	4b10      	ldr	r3, [pc, #64]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800cb02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cb06:	4a0f      	ldr	r2, [pc, #60]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800cb08:	f023 0320 	bic.w	r3, r3, #32
 800cb0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800cb10:	2037      	movs	r0, #55	; 0x37
 800cb12:	f00b fdfe 	bl	8018712 <HAL_NVIC_DisableIRQ>
}
 800cb16:	e00f      	b.n	800cb38 <HAL_TIM_Base_MspDeInit+0xe8>
  else if(htim_base->Instance==TIM24)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a0e      	ldr	r2, [pc, #56]	; (800cb58 <HAL_TIM_Base_MspDeInit+0x108>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d10a      	bne.n	800cb38 <HAL_TIM_Base_MspDeInit+0xe8>
    __HAL_RCC_TIM24_CLK_DISABLE();
 800cb22:	4b08      	ldr	r3, [pc, #32]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800cb24:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800cb28:	4a06      	ldr	r2, [pc, #24]	; (800cb44 <HAL_TIM_Base_MspDeInit+0xf4>)
 800cb2a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cb2e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    HAL_NVIC_DisableIRQ(TIM24_IRQn);
 800cb32:	20a2      	movs	r0, #162	; 0xa2
 800cb34:	f00b fded 	bl	8018712 <HAL_NVIC_DisableIRQ>
}
 800cb38:	bf00      	nop
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	40010000 	.word	0x40010000
 800cb44:	58024400 	.word	0x58024400
 800cb48:	40000400 	.word	0x40000400
 800cb4c:	40000800 	.word	0x40000800
 800cb50:	40001000 	.word	0x40001000
 800cb54:	40001400 	.word	0x40001400
 800cb58:	4000e400 	.word	0x4000e400

0800cb5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b0c2      	sub	sp, #264	; 0x108
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	1d3b      	adds	r3, r7, #4
 800cb64:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb66:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	605a      	str	r2, [r3, #4]
 800cb70:	609a      	str	r2, [r3, #8]
 800cb72:	60da      	str	r2, [r3, #12]
 800cb74:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cb76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cb7a:	22b4      	movs	r2, #180	; 0xb4
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f019 fdd8 	bl	8026734 <memset>
  if(huart->Instance==UART4)
 800cb84:	1d3b      	adds	r3, r7, #4
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a6a      	ldr	r2, [pc, #424]	; (800cd34 <HAL_UART_MspInit+0x1d8>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	f040 80e1 	bne.w	800cd54 <HAL_UART_MspInit+0x1f8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800cb92:	2302      	movs	r3, #2
 800cb94:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800cb96:	2300      	movs	r3, #0
 800cb98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cb9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cba0:	4618      	mov	r0, r3
 800cba2:	f012 fb81 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800cbac:	f7ff fb64 	bl	800c278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800cbb0:	4b61      	ldr	r3, [pc, #388]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cbb6:	4a60      	ldr	r2, [pc, #384]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cbc0:	4b5d      	ldr	r3, [pc, #372]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cbc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbce:	4b5a      	ldr	r3, [pc, #360]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbd4:	4a58      	ldr	r2, [pc, #352]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbd6:	f043 0301 	orr.w	r3, r3, #1
 800cbda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cbde:	4b56      	ldr	r3, [pc, #344]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbec:	4b52      	ldr	r3, [pc, #328]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbf2:	4a51      	ldr	r2, [pc, #324]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbf4:	f043 0304 	orr.w	r3, r3, #4
 800cbf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cbfc:	4b4e      	ldr	r3, [pc, #312]	; (800cd38 <HAL_UART_MspInit+0x1dc>)
 800cbfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc02:	f003 0304 	and.w	r3, r3, #4
 800cc06:	637b      	str	r3, [r7, #52]	; 0x34
 800cc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA12     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = IOL4_TX_U4_Pin;
 800cc0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc12:	2302      	movs	r3, #2
 800cc14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cc1e:	2302      	movs	r3, #2
 800cc20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800cc24:	2306      	movs	r3, #6
 800cc26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(IOL4_TX_U4_GPIO_Port, &GPIO_InitStruct);
 800cc2a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800cc2e:	4619      	mov	r1, r3
 800cc30:	4842      	ldr	r0, [pc, #264]	; (800cd3c <HAL_UART_MspInit+0x1e0>)
 800cc32:	f00e fdad 	bl	801b790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IOL4_RX_U4_Pin;
 800cc36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc3e:	2302      	movs	r3, #2
 800cc40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc44:	2300      	movs	r3, #0
 800cc46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800cc50:	2308      	movs	r3, #8
 800cc52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(IOL4_RX_U4_GPIO_Port, &GPIO_InitStruct);
 800cc56:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4838      	ldr	r0, [pc, #224]	; (800cd40 <HAL_UART_MspInit+0x1e4>)
 800cc5e:	f00e fd97 	bl	801b790 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800cc62:	4b38      	ldr	r3, [pc, #224]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc64:	4a38      	ldr	r2, [pc, #224]	; (800cd48 <HAL_UART_MspInit+0x1ec>)
 800cc66:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800cc68:	4b36      	ldr	r3, [pc, #216]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc6a:	223f      	movs	r2, #63	; 0x3f
 800cc6c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cc6e:	4b35      	ldr	r3, [pc, #212]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc70:	2200      	movs	r2, #0
 800cc72:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cc74:	4b33      	ldr	r3, [pc, #204]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cc7a:	4b32      	ldr	r3, [pc, #200]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc80:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cc82:	4b30      	ldr	r3, [pc, #192]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cc88:	4b2e      	ldr	r3, [pc, #184]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800cc8e:	4b2d      	ldr	r3, [pc, #180]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800cc94:	4b2b      	ldr	r3, [pc, #172]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800cc9a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cc9c:	4b29      	ldr	r3, [pc, #164]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800cca2:	4828      	ldr	r0, [pc, #160]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800cca4:	f00b fd50 	bl	8018748 <HAL_DMA_Init>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 800ccae:	f7ff fae3 	bl	800c278 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800ccb2:	1d3b      	adds	r3, r7, #4
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a23      	ldr	r2, [pc, #140]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800ccb8:	67da      	str	r2, [r3, #124]	; 0x7c
 800ccba:	4a22      	ldr	r2, [pc, #136]	; (800cd44 <HAL_UART_MspInit+0x1e8>)
 800ccbc:	1d3b      	adds	r3, r7, #4
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 800ccc2:	4b22      	ldr	r3, [pc, #136]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccc4:	4a22      	ldr	r2, [pc, #136]	; (800cd50 <HAL_UART_MspInit+0x1f4>)
 800ccc6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800ccc8:	4b20      	ldr	r3, [pc, #128]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccca:	2240      	movs	r2, #64	; 0x40
 800cccc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ccce:	4b1f      	ldr	r3, [pc, #124]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccd0:	2240      	movs	r2, #64	; 0x40
 800ccd2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ccd4:	4b1d      	ldr	r3, [pc, #116]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ccda:	4b1c      	ldr	r3, [pc, #112]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cce0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cce2:	4b1a      	ldr	r3, [pc, #104]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cce8:	4b18      	ldr	r3, [pc, #96]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800ccee:	4b17      	ldr	r3, [pc, #92]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ccf4:	4b15      	ldr	r3, [pc, #84]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccf6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ccfa:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ccfc:	4b13      	ldr	r3, [pc, #76]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800cd02:	4812      	ldr	r0, [pc, #72]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800cd04:	f00b fd20 	bl	8018748 <HAL_DMA_Init>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <HAL_UART_MspInit+0x1b6>
    {
      Error_Handler();
 800cd0e:	f7ff fab3 	bl	800c278 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800cd12:	1d3b      	adds	r3, r7, #4
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a0d      	ldr	r2, [pc, #52]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800cd18:	679a      	str	r2, [r3, #120]	; 0x78
 800cd1a:	4a0c      	ldr	r2, [pc, #48]	; (800cd4c <HAL_UART_MspInit+0x1f0>)
 800cd1c:	1d3b      	adds	r3, r7, #4
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800cd22:	2200      	movs	r2, #0
 800cd24:	2100      	movs	r1, #0
 800cd26:	2034      	movs	r0, #52	; 0x34
 800cd28:	f00b fccb 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800cd2c:	2034      	movs	r0, #52	; 0x34
 800cd2e:	f00b fce2 	bl	80186f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800cd32:	e381      	b.n	800d438 <HAL_UART_MspInit+0x8dc>
 800cd34:	40004c00 	.word	0x40004c00
 800cd38:	58024400 	.word	0x58024400
 800cd3c:	58020000 	.word	0x58020000
 800cd40:	58020800 	.word	0x58020800
 800cd44:	240052b0 	.word	0x240052b0
 800cd48:	40020040 	.word	0x40020040
 800cd4c:	24005d44 	.word	0x24005d44
 800cd50:	40020058 	.word	0x40020058
  else if(huart->Instance==UART5)
 800cd54:	1d3b      	adds	r3, r7, #4
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4ab1      	ldr	r2, [pc, #708]	; (800d020 <HAL_UART_MspInit+0x4c4>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	f040 80ac 	bne.w	800ceba <HAL_UART_MspInit+0x35e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800cd62:	2302      	movs	r3, #2
 800cd64:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800cd66:	2300      	movs	r3, #0
 800cd68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cd6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cd70:	4618      	mov	r0, r3
 800cd72:	f012 fa99 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <HAL_UART_MspInit+0x224>
      Error_Handler();
 800cd7c:	f7ff fa7c 	bl	800c278 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800cd80:	4ba8      	ldr	r3, [pc, #672]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cd82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd86:	4aa7      	ldr	r2, [pc, #668]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cd88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cd90:	4ba4      	ldr	r3, [pc, #656]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cd92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd9a:	633b      	str	r3, [r7, #48]	; 0x30
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd9e:	4ba1      	ldr	r3, [pc, #644]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cda0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cda4:	4a9f      	ldr	r2, [pc, #636]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cda6:	f043 0302 	orr.w	r3, r3, #2
 800cdaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cdae:	4b9d      	ldr	r3, [pc, #628]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cdb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cdb4:	f003 0302 	and.w	r3, r3, #2
 800cdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = IOL1_RX_U5_Pin|IOL1_TX_U5_Pin;
 800cdbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800cdc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800cdd6:	230e      	movs	r3, #14
 800cdd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cddc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800cde0:	4619      	mov	r1, r3
 800cde2:	4891      	ldr	r0, [pc, #580]	; (800d028 <HAL_UART_MspInit+0x4cc>)
 800cde4:	f00e fcd4 	bl	801b790 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream0;
 800cde8:	4b90      	ldr	r3, [pc, #576]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800cdea:	4a91      	ldr	r2, [pc, #580]	; (800d030 <HAL_UART_MspInit+0x4d4>)
 800cdec:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800cdee:	4b8f      	ldr	r3, [pc, #572]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800cdf0:	2242      	movs	r2, #66	; 0x42
 800cdf2:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cdf4:	4b8d      	ldr	r3, [pc, #564]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800cdf6:	2240      	movs	r2, #64	; 0x40
 800cdf8:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cdfa:	4b8c      	ldr	r3, [pc, #560]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ce00:	4b8a      	ldr	r3, [pc, #552]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce06:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ce08:	4b88      	ldr	r3, [pc, #544]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ce0e:	4b87      	ldr	r3, [pc, #540]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800ce14:	4b85      	ldr	r3, [pc, #532]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ce1a:	4b84      	ldr	r3, [pc, #528]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ce20:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ce22:	4b82      	ldr	r3, [pc, #520]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800ce28:	4880      	ldr	r0, [pc, #512]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce2a:	f00b fc8d 	bl	8018748 <HAL_DMA_Init>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d001      	beq.n	800ce38 <HAL_UART_MspInit+0x2dc>
      Error_Handler();
 800ce34:	f7ff fa20 	bl	800c278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800ce38:	1d3b      	adds	r3, r7, #4
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a7b      	ldr	r2, [pc, #492]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce3e:	679a      	str	r2, [r3, #120]	; 0x78
 800ce40:	4a7a      	ldr	r2, [pc, #488]	; (800d02c <HAL_UART_MspInit+0x4d0>)
 800ce42:	1d3b      	adds	r3, r7, #4
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_rx.Instance = DMA1_Stream1;
 800ce48:	4b7a      	ldr	r3, [pc, #488]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce4a:	4a7b      	ldr	r2, [pc, #492]	; (800d038 <HAL_UART_MspInit+0x4dc>)
 800ce4c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800ce4e:	4b79      	ldr	r3, [pc, #484]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce50:	2241      	movs	r2, #65	; 0x41
 800ce52:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ce54:	4b77      	ldr	r3, [pc, #476]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ce5a:	4b76      	ldr	r3, [pc, #472]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ce60:	4b74      	ldr	r3, [pc, #464]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce66:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ce68:	4b72      	ldr	r3, [pc, #456]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ce6e:	4b71      	ldr	r3, [pc, #452]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800ce74:	4b6f      	ldr	r3, [pc, #444]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ce7a:	4b6e      	ldr	r3, [pc, #440]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ce80:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ce82:	4b6c      	ldr	r3, [pc, #432]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800ce88:	486a      	ldr	r0, [pc, #424]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce8a:	f00b fc5d 	bl	8018748 <HAL_DMA_Init>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 800ce94:	f7ff f9f0 	bl	800c278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800ce98:	1d3b      	adds	r3, r7, #4
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a65      	ldr	r2, [pc, #404]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800ce9e:	67da      	str	r2, [r3, #124]	; 0x7c
 800cea0:	4a64      	ldr	r2, [pc, #400]	; (800d034 <HAL_UART_MspInit+0x4d8>)
 800cea2:	1d3b      	adds	r3, r7, #4
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800cea8:	2200      	movs	r2, #0
 800ceaa:	2100      	movs	r1, #0
 800ceac:	2035      	movs	r0, #53	; 0x35
 800ceae:	f00b fc08 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800ceb2:	2035      	movs	r0, #53	; 0x35
 800ceb4:	f00b fc1f 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800ceb8:	e2be      	b.n	800d438 <HAL_UART_MspInit+0x8dc>
  else if(huart->Instance==UART7)
 800ceba:	1d3b      	adds	r3, r7, #4
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a5e      	ldr	r2, [pc, #376]	; (800d03c <HAL_UART_MspInit+0x4e0>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	f040 80c6 	bne.w	800d054 <HAL_UART_MspInit+0x4f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800cec8:	2302      	movs	r3, #2
 800ceca:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800cecc:	2300      	movs	r3, #0
 800cece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ced2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ced6:	4618      	mov	r0, r3
 800ced8:	f012 f9e6 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 800cee2:	f7ff f9c9 	bl	800c278 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800cee6:	4b4f      	ldr	r3, [pc, #316]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ceec:	4a4d      	ldr	r2, [pc, #308]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800ceee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cef2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cef6:	4b4b      	ldr	r3, [pc, #300]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cefc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf00:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800cf04:	4b47      	ldr	r3, [pc, #284]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cf06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf0a:	4a46      	ldr	r2, [pc, #280]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cf0c:	f043 0320 	orr.w	r3, r3, #32
 800cf10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cf14:	4b43      	ldr	r3, [pc, #268]	; (800d024 <HAL_UART_MspInit+0x4c8>)
 800cf16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf1a:	f003 0320 	and.w	r3, r3, #32
 800cf1e:	627b      	str	r3, [r7, #36]	; 0x24
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = IOL2_RX_U7_Pin|IOL2_TX_U7_Pin;
 800cf22:	23c0      	movs	r3, #192	; 0xc0
 800cf24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf28:	2302      	movs	r3, #2
 800cf2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cf34:	2302      	movs	r3, #2
 800cf36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800cf3a:	2307      	movs	r3, #7
 800cf3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800cf40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800cf44:	4619      	mov	r1, r3
 800cf46:	483e      	ldr	r0, [pc, #248]	; (800d040 <HAL_UART_MspInit+0x4e4>)
 800cf48:	f00e fc22 	bl	801b790 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream4;
 800cf4c:	4b3d      	ldr	r3, [pc, #244]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf4e:	4a3e      	ldr	r2, [pc, #248]	; (800d048 <HAL_UART_MspInit+0x4ec>)
 800cf50:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 800cf52:	4b3c      	ldr	r3, [pc, #240]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf54:	224f      	movs	r2, #79	; 0x4f
 800cf56:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cf58:	4b3a      	ldr	r3, [pc, #232]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cf5e:	4b39      	ldr	r3, [pc, #228]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf60:	2200      	movs	r2, #0
 800cf62:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cf64:	4b37      	ldr	r3, [pc, #220]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cf6a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cf6c:	4b35      	ldr	r3, [pc, #212]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cf72:	4b34      	ldr	r3, [pc, #208]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800cf78:	4b32      	ldr	r3, [pc, #200]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800cf7e:	4b31      	ldr	r3, [pc, #196]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800cf84:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cf86:	4b2f      	ldr	r3, [pc, #188]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800cf8c:	482d      	ldr	r0, [pc, #180]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cf8e:	f00b fbdb 	bl	8018748 <HAL_DMA_Init>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <HAL_UART_MspInit+0x440>
      Error_Handler();
 800cf98:	f7ff f96e 	bl	800c278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800cf9c:	1d3b      	adds	r3, r7, #4
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a28      	ldr	r2, [pc, #160]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cfa2:	67da      	str	r2, [r3, #124]	; 0x7c
 800cfa4:	4a27      	ldr	r2, [pc, #156]	; (800d044 <HAL_UART_MspInit+0x4e8>)
 800cfa6:	1d3b      	adds	r3, r7, #4
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream5;
 800cfac:	4b27      	ldr	r3, [pc, #156]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfae:	4a28      	ldr	r2, [pc, #160]	; (800d050 <HAL_UART_MspInit+0x4f4>)
 800cfb0:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 800cfb2:	4b26      	ldr	r3, [pc, #152]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfb4:	2250      	movs	r2, #80	; 0x50
 800cfb6:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cfb8:	4b24      	ldr	r3, [pc, #144]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfba:	2240      	movs	r2, #64	; 0x40
 800cfbc:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cfbe:	4b23      	ldr	r3, [pc, #140]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cfc4:	4b21      	ldr	r3, [pc, #132]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cfca:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cfcc:	4b1f      	ldr	r3, [pc, #124]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cfd2:	4b1e      	ldr	r3, [pc, #120]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800cfd8:	4b1c      	ldr	r3, [pc, #112]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800cfde:	4b1b      	ldr	r3, [pc, #108]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfe0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800cfe4:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cfe6:	4b19      	ldr	r3, [pc, #100]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfe8:	2200      	movs	r2, #0
 800cfea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800cfec:	4817      	ldr	r0, [pc, #92]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800cfee:	f00b fbab 	bl	8018748 <HAL_DMA_Init>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <HAL_UART_MspInit+0x4a0>
      Error_Handler();
 800cff8:	f7ff f93e 	bl	800c278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800cffc:	1d3b      	adds	r3, r7, #4
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a12      	ldr	r2, [pc, #72]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800d002:	679a      	str	r2, [r3, #120]	; 0x78
 800d004:	4a11      	ldr	r2, [pc, #68]	; (800d04c <HAL_UART_MspInit+0x4f0>)
 800d006:	1d3b      	adds	r3, r7, #4
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800d00c:	2200      	movs	r2, #0
 800d00e:	2100      	movs	r1, #0
 800d010:	2052      	movs	r0, #82	; 0x52
 800d012:	f00b fb56 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800d016:	2052      	movs	r0, #82	; 0x52
 800d018:	f00b fb6d 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800d01c:	e20c      	b.n	800d438 <HAL_UART_MspInit+0x8dc>
 800d01e:	bf00      	nop
 800d020:	40005000 	.word	0x40005000
 800d024:	58024400 	.word	0x58024400
 800d028:	58020400 	.word	0x58020400
 800d02c:	24005dbc 	.word	0x24005dbc
 800d030:	40020010 	.word	0x40020010
 800d034:	24005c4c 	.word	0x24005c4c
 800d038:	40020028 	.word	0x40020028
 800d03c:	40007800 	.word	0x40007800
 800d040:	58021400 	.word	0x58021400
 800d044:	24005820 	.word	0x24005820
 800d048:	40020070 	.word	0x40020070
 800d04c:	24005630 	.word	0x24005630
 800d050:	40020088 	.word	0x40020088
  else if(huart->Instance==USART1)
 800d054:	1d3b      	adds	r3, r7, #4
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4ab1      	ldr	r2, [pc, #708]	; (800d320 <HAL_UART_MspInit+0x7c4>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	f040 80ac 	bne.w	800d1ba <HAL_UART_MspInit+0x65e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800d062:	2301      	movs	r3, #1
 800d064:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800d066:	2300      	movs	r3, #0
 800d068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d06c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d070:	4618      	mov	r0, r3
 800d072:	f012 f919 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <HAL_UART_MspInit+0x524>
      Error_Handler();
 800d07c:	f7ff f8fc 	bl	800c278 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d080:	4ba8      	ldr	r3, [pc, #672]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d086:	4aa7      	ldr	r2, [pc, #668]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d088:	f043 0310 	orr.w	r3, r3, #16
 800d08c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d090:	4ba4      	ldr	r3, [pc, #656]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d096:	f003 0310 	and.w	r3, r3, #16
 800d09a:	623b      	str	r3, [r7, #32]
 800d09c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d09e:	4ba1      	ldr	r3, [pc, #644]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d0a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0a4:	4a9f      	ldr	r2, [pc, #636]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d0a6:	f043 0302 	orr.w	r3, r3, #2
 800d0aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d0ae:	4b9d      	ldr	r3, [pc, #628]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d0b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0b4:	f003 0302 	and.w	r3, r3, #2
 800d0b8:	61fb      	str	r3, [r7, #28]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = IOL3_TX_U1_Pin|IOL3_RX_U1_Pin;
 800d0bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d0c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d0d6:	2304      	movs	r3, #4
 800d0d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d0dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4891      	ldr	r0, [pc, #580]	; (800d328 <HAL_UART_MspInit+0x7cc>)
 800d0e4:	f00e fb54 	bl	801b790 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream6;
 800d0e8:	4b90      	ldr	r3, [pc, #576]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d0ea:	4a91      	ldr	r2, [pc, #580]	; (800d330 <HAL_UART_MspInit+0x7d4>)
 800d0ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800d0ee:	4b8f      	ldr	r3, [pc, #572]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d0f0:	2229      	movs	r2, #41	; 0x29
 800d0f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d0f4:	4b8d      	ldr	r3, [pc, #564]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d0fa:	4b8c      	ldr	r3, [pc, #560]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d100:	4b8a      	ldr	r3, [pc, #552]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d106:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d108:	4b88      	ldr	r3, [pc, #544]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d10e:	4b87      	ldr	r3, [pc, #540]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d110:	2200      	movs	r2, #0
 800d112:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800d114:	4b85      	ldr	r3, [pc, #532]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d116:	2200      	movs	r2, #0
 800d118:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800d11a:	4b84      	ldr	r3, [pc, #528]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d11c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d120:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d122:	4b82      	ldr	r3, [pc, #520]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d124:	2200      	movs	r2, #0
 800d126:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800d128:	4880      	ldr	r0, [pc, #512]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d12a:	f00b fb0d 	bl	8018748 <HAL_DMA_Init>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <HAL_UART_MspInit+0x5dc>
      Error_Handler();
 800d134:	f7ff f8a0 	bl	800c278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800d138:	1d3b      	adds	r3, r7, #4
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a7b      	ldr	r2, [pc, #492]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d13e:	67da      	str	r2, [r3, #124]	; 0x7c
 800d140:	4a7a      	ldr	r2, [pc, #488]	; (800d32c <HAL_UART_MspInit+0x7d0>)
 800d142:	1d3b      	adds	r3, r7, #4
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream7;
 800d148:	4b7a      	ldr	r3, [pc, #488]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d14a:	4a7b      	ldr	r2, [pc, #492]	; (800d338 <HAL_UART_MspInit+0x7dc>)
 800d14c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800d14e:	4b79      	ldr	r3, [pc, #484]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d150:	222a      	movs	r2, #42	; 0x2a
 800d152:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d154:	4b77      	ldr	r3, [pc, #476]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d156:	2240      	movs	r2, #64	; 0x40
 800d158:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d15a:	4b76      	ldr	r3, [pc, #472]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d160:	4b74      	ldr	r3, [pc, #464]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d166:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d168:	4b72      	ldr	r3, [pc, #456]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d16e:	4b71      	ldr	r3, [pc, #452]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d170:	2200      	movs	r2, #0
 800d172:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800d174:	4b6f      	ldr	r3, [pc, #444]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d176:	2200      	movs	r2, #0
 800d178:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800d17a:	4b6e      	ldr	r3, [pc, #440]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d17c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d180:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d182:	4b6c      	ldr	r3, [pc, #432]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d184:	2200      	movs	r2, #0
 800d186:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800d188:	486a      	ldr	r0, [pc, #424]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d18a:	f00b fadd 	bl	8018748 <HAL_DMA_Init>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <HAL_UART_MspInit+0x63c>
      Error_Handler();
 800d194:	f7ff f870 	bl	800c278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800d198:	1d3b      	adds	r3, r7, #4
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a65      	ldr	r2, [pc, #404]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d19e:	679a      	str	r2, [r3, #120]	; 0x78
 800d1a0:	4a64      	ldr	r2, [pc, #400]	; (800d334 <HAL_UART_MspInit+0x7d8>)
 800d1a2:	1d3b      	adds	r3, r7, #4
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	2025      	movs	r0, #37	; 0x25
 800d1ae:	f00b fa88 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d1b2:	2025      	movs	r0, #37	; 0x25
 800d1b4:	f00b fa9f 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800d1b8:	e13e      	b.n	800d438 <HAL_UART_MspInit+0x8dc>
  else if(huart->Instance==USART2)
 800d1ba:	1d3b      	adds	r3, r7, #4
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a5e      	ldr	r2, [pc, #376]	; (800d33c <HAL_UART_MspInit+0x7e0>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	f040 80c6 	bne.w	800d354 <HAL_UART_MspInit+0x7f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d1d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f012 f866 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d001      	beq.n	800d1e6 <HAL_UART_MspInit+0x68a>
      Error_Handler();
 800d1e2:	f7ff f849 	bl	800c278 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d1e6:	4b4f      	ldr	r3, [pc, #316]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d1e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d1ec:	4a4d      	ldr	r2, [pc, #308]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d1ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d1f6:	4b4b      	ldr	r3, [pc, #300]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d1f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d1fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d200:	61bb      	str	r3, [r7, #24]
 800d202:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d204:	4b47      	ldr	r3, [pc, #284]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d20a:	4a46      	ldr	r2, [pc, #280]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d20c:	f043 0308 	orr.w	r3, r3, #8
 800d210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d214:	4b43      	ldr	r3, [pc, #268]	; (800d324 <HAL_UART_MspInit+0x7c8>)
 800d216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d21a:	f003 0308 	and.w	r3, r3, #8
 800d21e:	617b      	str	r3, [r7, #20]
 800d220:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_TX_U2_Pin|RS485_RX_U2_Pin;
 800d222:	2360      	movs	r3, #96	; 0x60
 800d224:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d228:	2302      	movs	r3, #2
 800d22a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d22e:	2300      	movs	r3, #0
 800d230:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d234:	2303      	movs	r3, #3
 800d236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d23a:	2307      	movs	r3, #7
 800d23c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d240:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800d244:	4619      	mov	r1, r3
 800d246:	483e      	ldr	r0, [pc, #248]	; (800d340 <HAL_UART_MspInit+0x7e4>)
 800d248:	f00e faa2 	bl	801b790 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream0;
 800d24c:	4b3d      	ldr	r3, [pc, #244]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d24e:	4a3e      	ldr	r2, [pc, #248]	; (800d348 <HAL_UART_MspInit+0x7ec>)
 800d250:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800d252:	4b3c      	ldr	r3, [pc, #240]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d254:	222b      	movs	r2, #43	; 0x2b
 800d256:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d258:	4b3a      	ldr	r3, [pc, #232]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d25e:	4b39      	ldr	r3, [pc, #228]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d260:	2200      	movs	r2, #0
 800d262:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d264:	4b37      	ldr	r3, [pc, #220]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d26a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d26c:	4b35      	ldr	r3, [pc, #212]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d26e:	2200      	movs	r2, #0
 800d270:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d272:	4b34      	ldr	r3, [pc, #208]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d274:	2200      	movs	r2, #0
 800d276:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800d278:	4b32      	ldr	r3, [pc, #200]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800d27e:	4b31      	ldr	r3, [pc, #196]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d280:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d284:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d286:	4b2f      	ldr	r3, [pc, #188]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d288:	2200      	movs	r2, #0
 800d28a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800d28c:	482d      	ldr	r0, [pc, #180]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d28e:	f00b fa5b 	bl	8018748 <HAL_DMA_Init>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <HAL_UART_MspInit+0x740>
      Error_Handler();
 800d298:	f7fe ffee 	bl	800c278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800d29c:	1d3b      	adds	r3, r7, #4
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a28      	ldr	r2, [pc, #160]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d2a2:	67da      	str	r2, [r3, #124]	; 0x7c
 800d2a4:	4a27      	ldr	r2, [pc, #156]	; (800d344 <HAL_UART_MspInit+0x7e8>)
 800d2a6:	1d3b      	adds	r3, r7, #4
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 800d2ac:	4b27      	ldr	r3, [pc, #156]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2ae:	4a28      	ldr	r2, [pc, #160]	; (800d350 <HAL_UART_MspInit+0x7f4>)
 800d2b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800d2b2:	4b26      	ldr	r3, [pc, #152]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2b4:	222c      	movs	r2, #44	; 0x2c
 800d2b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d2b8:	4b24      	ldr	r3, [pc, #144]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2ba:	2240      	movs	r2, #64	; 0x40
 800d2bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2be:	4b23      	ldr	r3, [pc, #140]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d2c4:	4b21      	ldr	r3, [pc, #132]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d2ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d2cc:	4b1f      	ldr	r3, [pc, #124]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d2d2:	4b1e      	ldr	r3, [pc, #120]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800d2d8:	4b1c      	ldr	r3, [pc, #112]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800d2de:	4b1b      	ldr	r3, [pc, #108]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d2e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d2e6:	4b19      	ldr	r3, [pc, #100]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800d2ec:	4817      	ldr	r0, [pc, #92]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d2ee:	f00b fa2b 	bl	8018748 <HAL_DMA_Init>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <HAL_UART_MspInit+0x7a0>
      Error_Handler();
 800d2f8:	f7fe ffbe 	bl	800c278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800d2fc:	1d3b      	adds	r3, r7, #4
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a12      	ldr	r2, [pc, #72]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d302:	679a      	str	r2, [r3, #120]	; 0x78
 800d304:	4a11      	ldr	r2, [pc, #68]	; (800d34c <HAL_UART_MspInit+0x7f0>)
 800d306:	1d3b      	adds	r3, r7, #4
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d30c:	2200      	movs	r2, #0
 800d30e:	2100      	movs	r1, #0
 800d310:	2026      	movs	r0, #38	; 0x26
 800d312:	f00b f9d6 	bl	80186c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d316:	2026      	movs	r0, #38	; 0x26
 800d318:	f00b f9ed 	bl	80186f6 <HAL_NVIC_EnableIRQ>
}
 800d31c:	e08c      	b.n	800d438 <HAL_UART_MspInit+0x8dc>
 800d31e:	bf00      	nop
 800d320:	40011000 	.word	0x40011000
 800d324:	58024400 	.word	0x58024400
 800d328:	58020400 	.word	0x58020400
 800d32c:	24005898 	.word	0x24005898
 800d330:	400200a0 	.word	0x400200a0
 800d334:	240056a8 	.word	0x240056a8
 800d338:	400200b8 	.word	0x400200b8
 800d33c:	40004400 	.word	0x40004400
 800d340:	58020c00 	.word	0x58020c00
 800d344:	24005328 	.word	0x24005328
 800d348:	40020410 	.word	0x40020410
 800d34c:	24005910 	.word	0x24005910
 800d350:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 800d354:	1d3b      	adds	r3, r7, #4
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a3a      	ldr	r2, [pc, #232]	; (800d444 <HAL_UART_MspInit+0x8e8>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d16b      	bne.n	800d438 <HAL_UART_MspInit+0x8dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800d360:	2302      	movs	r3, #2
 800d362:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800d364:	2300      	movs	r3, #0
 800d366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d36a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d36e:	4618      	mov	r0, r3
 800d370:	f011 ff9a 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <HAL_UART_MspInit+0x822>
      Error_Handler();
 800d37a:	f7fe ff7d 	bl	800c278 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d37e:	4b32      	ldr	r3, [pc, #200]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d384:	4a30      	ldr	r2, [pc, #192]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d38a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d38e:	4b2e      	ldr	r3, [pc, #184]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d398:	613b      	str	r3, [r7, #16]
 800d39a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d39c:	4b2a      	ldr	r3, [pc, #168]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d39e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3a2:	4a29      	ldr	r2, [pc, #164]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d3a4:	f043 0302 	orr.w	r3, r3, #2
 800d3a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d3ac:	4b26      	ldr	r3, [pc, #152]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d3ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3b2:	f003 0302 	and.w	r3, r3, #2
 800d3b6:	60fb      	str	r3, [r7, #12]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d3ba:	4b23      	ldr	r3, [pc, #140]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3c0:	4a21      	ldr	r2, [pc, #132]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d3c2:	f043 0304 	orr.w	r3, r3, #4
 800d3c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d3ca:	4b1f      	ldr	r3, [pc, #124]	; (800d448 <HAL_UART_MspInit+0x8ec>)
 800d3cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3d0:	f003 0204 	and.w	r2, r3, #4
 800d3d4:	f107 0308 	add.w	r3, r7, #8
 800d3d8:	601a      	str	r2, [r3, #0]
 800d3da:	f107 0308 	add.w	r3, r7, #8
 800d3de:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = DBUG_RX_U3_Pin;
 800d3e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3e8:	2302      	movs	r3, #2
 800d3ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d3fa:	2307      	movs	r3, #7
 800d3fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(DBUG_RX_U3_GPIO_Port, &GPIO_InitStruct);
 800d400:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800d404:	4619      	mov	r1, r3
 800d406:	4811      	ldr	r0, [pc, #68]	; (800d44c <HAL_UART_MspInit+0x8f0>)
 800d408:	f00e f9c2 	bl	801b790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DBUG_TX_U3_Pin;
 800d40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d410:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d414:	2302      	movs	r3, #2
 800d416:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d41a:	2300      	movs	r3, #0
 800d41c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d420:	2302      	movs	r3, #2
 800d422:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d426:	2307      	movs	r3, #7
 800d428:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(DBUG_TX_U3_GPIO_Port, &GPIO_InitStruct);
 800d42c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800d430:	4619      	mov	r1, r3
 800d432:	4807      	ldr	r0, [pc, #28]	; (800d450 <HAL_UART_MspInit+0x8f4>)
 800d434:	f00e f9ac 	bl	801b790 <HAL_GPIO_Init>
}
 800d438:	bf00      	nop
 800d43a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	40004800 	.word	0x40004800
 800d448:	58024400 	.word	0x58024400
 800d44c:	58020400 	.word	0x58020400
 800d450:	58020800 	.word	0x58020800

0800d454 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800d454:	b580      	push	{r7, lr}
 800d456:	b0b4      	sub	sp, #208	; 0xd0
 800d458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800d45a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d45e:	2200      	movs	r2, #0
 800d460:	601a      	str	r2, [r3, #0]
 800d462:	605a      	str	r2, [r3, #4]
 800d464:	609a      	str	r2, [r3, #8]
 800d466:	60da      	str	r2, [r3, #12]
 800d468:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800d46a:	4b5a      	ldr	r3, [pc, #360]	; (800d5d4 <HAL_FMC_MspInit+0x180>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f040 80ac 	bne.w	800d5cc <HAL_FMC_MspInit+0x178>
    return;
  }
  FMC_Initialized = 1;
 800d474:	4b57      	ldr	r3, [pc, #348]	; (800d5d4 <HAL_FMC_MspInit+0x180>)
 800d476:	2201      	movs	r2, #1
 800d478:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d47a:	f107 0308 	add.w	r3, r7, #8
 800d47e:	22b4      	movs	r2, #180	; 0xb4
 800d480:	2100      	movs	r1, #0
 800d482:	4618      	mov	r0, r3
 800d484:	f019 f956 	bl	8026734 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800d488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d48c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800d48e:	2300      	movs	r3, #0
 800d490:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d492:	f107 0308 	add.w	r3, r7, #8
 800d496:	4618      	mov	r0, r3
 800d498:	f011 ff06 	bl	801f2a8 <HAL_RCCEx_PeriphCLKConfig>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 800d4a2:	f7fe fee9 	bl	800c278 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800d4a6:	4b4c      	ldr	r3, [pc, #304]	; (800d5d8 <HAL_FMC_MspInit+0x184>)
 800d4a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d4ac:	4a4a      	ldr	r2, [pc, #296]	; (800d5d8 <HAL_FMC_MspInit+0x184>)
 800d4ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d4b2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800d4b6:	4b48      	ldr	r3, [pc, #288]	; (800d5d8 <HAL_FMC_MspInit+0x184>)
 800d4b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d4bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4c0:	607b      	str	r3, [r7, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
  PC12   ------> FMC_D6
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800d4c4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800d4c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d4de:	230c      	movs	r3, #12
 800d4e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d4e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	483c      	ldr	r0, [pc, #240]	; (800d5dc <HAL_FMC_MspInit+0x188>)
 800d4ec:	f00e f950 	bl	801b790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800d4f0:	230d      	movs	r3, #13
 800d4f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d502:	2303      	movs	r3, #3
 800d504:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d508:	230c      	movs	r3, #12
 800d50a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d50e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d512:	4619      	mov	r1, r3
 800d514:	4832      	ldr	r0, [pc, #200]	; (800d5e0 <HAL_FMC_MspInit+0x18c>)
 800d516:	f00e f93b 	bl	801b790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800d51a:	f248 1333 	movw	r3, #33075	; 0x8133
 800d51e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d522:	2302      	movs	r3, #2
 800d524:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d528:	2300      	movs	r3, #0
 800d52a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d52e:	2303      	movs	r3, #3
 800d530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d534:	230c      	movs	r3, #12
 800d536:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d53a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d53e:	4619      	mov	r1, r3
 800d540:	4828      	ldr	r0, [pc, #160]	; (800d5e4 <HAL_FMC_MspInit+0x190>)
 800d542:	f00e f925 	bl	801b790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800d546:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800d54a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d54e:	2302      	movs	r3, #2
 800d550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d554:	2300      	movs	r3, #0
 800d556:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d55a:	2303      	movs	r3, #3
 800d55c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d560:	230c      	movs	r3, #12
 800d562:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d566:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d56a:	4619      	mov	r1, r3
 800d56c:	481e      	ldr	r0, [pc, #120]	; (800d5e8 <HAL_FMC_MspInit+0x194>)
 800d56e:	f00e f90f 	bl	801b790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 800d572:	f24c 0303 	movw	r3, #49155	; 0xc003
 800d576:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d57a:	2302      	movs	r3, #2
 800d57c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d580:	2300      	movs	r3, #0
 800d582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d586:	2303      	movs	r3, #3
 800d588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d58c:	230c      	movs	r3, #12
 800d58e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d592:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d596:	4619      	mov	r1, r3
 800d598:	4814      	ldr	r0, [pc, #80]	; (800d5ec <HAL_FMC_MspInit+0x198>)
 800d59a:	f00e f8f9 	bl	801b790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800d59e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5a6:	2302      	movs	r3, #2
 800d5a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF1_FMC;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d5be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4806      	ldr	r0, [pc, #24]	; (800d5e0 <HAL_FMC_MspInit+0x18c>)
 800d5c6:	f00e f8e3 	bl	801b790 <HAL_GPIO_Init>
 800d5ca:	e000      	b.n	800d5ce <HAL_FMC_MspInit+0x17a>
    return;
 800d5cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800d5ce:	37d0      	adds	r7, #208	; 0xd0
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	240008cc 	.word	0x240008cc
 800d5d8:	58024400 	.word	0x58024400
 800d5dc:	58021400 	.word	0x58021400
 800d5e0:	58020800 	.word	0x58020800
 800d5e4:	58021800 	.word	0x58021800
 800d5e8:	58021000 	.word	0x58021000
 800d5ec:	58020c00 	.word	0x58020c00

0800d5f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800d5f8:	f7ff ff2c 	bl	800d454 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0
	return 1;
 800d608:	2301      	movs	r3, #1
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <_kill>:

int _kill(int pid, int sig)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800d61e:	f019 f849 	bl	80266b4 <__errno>
 800d622:	4603      	mov	r3, r0
 800d624:	2216      	movs	r2, #22
 800d626:	601a      	str	r2, [r3, #0]
	return -1;
 800d628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_exit>:

void _exit (int status)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800d63c:	f04f 31ff 	mov.w	r1, #4294967295
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff ffe7 	bl	800d614 <_kill>
	while (1) {}		/* Make sure we hang here */
 800d646:	e7fe      	b.n	800d646 <_exit+0x12>

0800d648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d654:	2300      	movs	r3, #0
 800d656:	617b      	str	r3, [r7, #20]
 800d658:	e00a      	b.n	800d670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d65a:	f3af 8000 	nop.w
 800d65e:	4601      	mov	r1, r0
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	1c5a      	adds	r2, r3, #1
 800d664:	60ba      	str	r2, [r7, #8]
 800d666:	b2ca      	uxtb	r2, r1
 800d668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	3301      	adds	r3, #1
 800d66e:	617b      	str	r3, [r7, #20]
 800d670:	697a      	ldr	r2, [r7, #20]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	429a      	cmp	r2, r3
 800d676:	dbf0      	blt.n	800d65a <_read+0x12>
	}

return len;
 800d678:	687b      	ldr	r3, [r7, #4]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b086      	sub	sp, #24
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d68e:	2300      	movs	r3, #0
 800d690:	617b      	str	r3, [r7, #20]
 800d692:	e009      	b.n	800d6a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	60ba      	str	r2, [r7, #8]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fd fdd7 	bl	800b250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	617b      	str	r3, [r7, #20]
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	dbf1      	blt.n	800d694 <_write+0x12>
	}
	return len;
 800d6b0:	687b      	ldr	r3, [r7, #4]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <_close>:

int _close(int file)
{
 800d6ba:	b480      	push	{r7}
 800d6bc:	b083      	sub	sp, #12
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
	return -1;
 800d6c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	370c      	adds	r7, #12
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b083      	sub	sp, #12
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
 800d6da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d6e2:	605a      	str	r2, [r3, #4]
	return 0;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	370c      	adds	r7, #12
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr

0800d6f2 <_isatty>:

int _isatty(int file)
{
 800d6f2:	b480      	push	{r7}
 800d6f4:	b083      	sub	sp, #12
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
	return 1;
 800d6fa:	2301      	movs	r3, #1
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
	return 0;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
	...

0800d724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d72c:	4a14      	ldr	r2, [pc, #80]	; (800d780 <_sbrk+0x5c>)
 800d72e:	4b15      	ldr	r3, [pc, #84]	; (800d784 <_sbrk+0x60>)
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d738:	4b13      	ldr	r3, [pc, #76]	; (800d788 <_sbrk+0x64>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d102      	bne.n	800d746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d740:	4b11      	ldr	r3, [pc, #68]	; (800d788 <_sbrk+0x64>)
 800d742:	4a12      	ldr	r2, [pc, #72]	; (800d78c <_sbrk+0x68>)
 800d744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d746:	4b10      	ldr	r3, [pc, #64]	; (800d788 <_sbrk+0x64>)
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4413      	add	r3, r2
 800d74e:	693a      	ldr	r2, [r7, #16]
 800d750:	429a      	cmp	r2, r3
 800d752:	d207      	bcs.n	800d764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d754:	f018 ffae 	bl	80266b4 <__errno>
 800d758:	4603      	mov	r3, r0
 800d75a:	220c      	movs	r2, #12
 800d75c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d75e:	f04f 33ff 	mov.w	r3, #4294967295
 800d762:	e009      	b.n	800d778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d764:	4b08      	ldr	r3, [pc, #32]	; (800d788 <_sbrk+0x64>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d76a:	4b07      	ldr	r3, [pc, #28]	; (800d788 <_sbrk+0x64>)
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4413      	add	r3, r2
 800d772:	4a05      	ldr	r2, [pc, #20]	; (800d788 <_sbrk+0x64>)
 800d774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d776:	68fb      	ldr	r3, [r7, #12]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3718      	adds	r7, #24
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	24050000 	.word	0x24050000
 800d784:	00000400 	.word	0x00000400
 800d788:	240008d0 	.word	0x240008d0
 800d78c:	24006038 	.word	0x24006038

0800d790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d790:	b480      	push	{r7}
 800d792:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d794:	4b32      	ldr	r3, [pc, #200]	; (800d860 <SystemInit+0xd0>)
 800d796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d79a:	4a31      	ldr	r2, [pc, #196]	; (800d860 <SystemInit+0xd0>)
 800d79c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d7a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d7a4:	4b2f      	ldr	r3, [pc, #188]	; (800d864 <SystemInit+0xd4>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f003 030f 	and.w	r3, r3, #15
 800d7ac:	2b06      	cmp	r3, #6
 800d7ae:	d807      	bhi.n	800d7c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d7b0:	4b2c      	ldr	r3, [pc, #176]	; (800d864 <SystemInit+0xd4>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f023 030f 	bic.w	r3, r3, #15
 800d7b8:	4a2a      	ldr	r2, [pc, #168]	; (800d864 <SystemInit+0xd4>)
 800d7ba:	f043 0307 	orr.w	r3, r3, #7
 800d7be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800d7c0:	4b29      	ldr	r3, [pc, #164]	; (800d868 <SystemInit+0xd8>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a28      	ldr	r2, [pc, #160]	; (800d868 <SystemInit+0xd8>)
 800d7c6:	f043 0301 	orr.w	r3, r3, #1
 800d7ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d7cc:	4b26      	ldr	r3, [pc, #152]	; (800d868 <SystemInit+0xd8>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800d7d2:	4b25      	ldr	r3, [pc, #148]	; (800d868 <SystemInit+0xd8>)
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	4924      	ldr	r1, [pc, #144]	; (800d868 <SystemInit+0xd8>)
 800d7d8:	4b24      	ldr	r3, [pc, #144]	; (800d86c <SystemInit+0xdc>)
 800d7da:	4013      	ands	r3, r2
 800d7dc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d7de:	4b21      	ldr	r3, [pc, #132]	; (800d864 <SystemInit+0xd4>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f003 0308 	and.w	r3, r3, #8
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d007      	beq.n	800d7fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d7ea:	4b1e      	ldr	r3, [pc, #120]	; (800d864 <SystemInit+0xd4>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f023 030f 	bic.w	r3, r3, #15
 800d7f2:	4a1c      	ldr	r2, [pc, #112]	; (800d864 <SystemInit+0xd4>)
 800d7f4:	f043 0307 	orr.w	r3, r3, #7
 800d7f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800d7fa:	4b1b      	ldr	r3, [pc, #108]	; (800d868 <SystemInit+0xd8>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800d800:	4b19      	ldr	r3, [pc, #100]	; (800d868 <SystemInit+0xd8>)
 800d802:	2200      	movs	r2, #0
 800d804:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800d806:	4b18      	ldr	r3, [pc, #96]	; (800d868 <SystemInit+0xd8>)
 800d808:	2200      	movs	r2, #0
 800d80a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800d80c:	4b16      	ldr	r3, [pc, #88]	; (800d868 <SystemInit+0xd8>)
 800d80e:	4a18      	ldr	r2, [pc, #96]	; (800d870 <SystemInit+0xe0>)
 800d810:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800d812:	4b15      	ldr	r3, [pc, #84]	; (800d868 <SystemInit+0xd8>)
 800d814:	4a17      	ldr	r2, [pc, #92]	; (800d874 <SystemInit+0xe4>)
 800d816:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800d818:	4b13      	ldr	r3, [pc, #76]	; (800d868 <SystemInit+0xd8>)
 800d81a:	4a17      	ldr	r2, [pc, #92]	; (800d878 <SystemInit+0xe8>)
 800d81c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800d81e:	4b12      	ldr	r3, [pc, #72]	; (800d868 <SystemInit+0xd8>)
 800d820:	2200      	movs	r2, #0
 800d822:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800d824:	4b10      	ldr	r3, [pc, #64]	; (800d868 <SystemInit+0xd8>)
 800d826:	4a14      	ldr	r2, [pc, #80]	; (800d878 <SystemInit+0xe8>)
 800d828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800d82a:	4b0f      	ldr	r3, [pc, #60]	; (800d868 <SystemInit+0xd8>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800d830:	4b0d      	ldr	r3, [pc, #52]	; (800d868 <SystemInit+0xd8>)
 800d832:	4a11      	ldr	r2, [pc, #68]	; (800d878 <SystemInit+0xe8>)
 800d834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800d836:	4b0c      	ldr	r3, [pc, #48]	; (800d868 <SystemInit+0xd8>)
 800d838:	2200      	movs	r2, #0
 800d83a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d83c:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <SystemInit+0xd8>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a09      	ldr	r2, [pc, #36]	; (800d868 <SystemInit+0xd8>)
 800d842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d846:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800d848:	4b07      	ldr	r3, [pc, #28]	; (800d868 <SystemInit+0xd8>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d84e:	4b0b      	ldr	r3, [pc, #44]	; (800d87c <SystemInit+0xec>)
 800d850:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800d854:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800d856:	bf00      	nop
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	e000ed00 	.word	0xe000ed00
 800d864:	52002000 	.word	0x52002000
 800d868:	58024400 	.word	0x58024400
 800d86c:	eaf6ed7f 	.word	0xeaf6ed7f
 800d870:	02020200 	.word	0x02020200
 800d874:	01ff0000 	.word	0x01ff0000
 800d878:	01010280 	.word	0x01010280
 800d87c:	52004000 	.word	0x52004000

0800d880 <W25Q_Init>:
/**
  * @brief  Init w25qxx
  * @param  i2c: void pointer to the i2c port struct
  * @retval none
  */
uint8_t W25Q_Init(w25qxx_type_t type, w25qxx_interface_t interface, w25qxx_bool_t dualQspiEnable){
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	4603      	mov	r3, r0
 800d888:	80fb      	strh	r3, [r7, #6]
 800d88a:	460b      	mov	r3, r1
 800d88c:	717b      	strb	r3, [r7, #5]
 800d88e:	4613      	mov	r3, r2
 800d890:	713b      	strb	r3, [r7, #4]
	/*Link the interface function*/
    DRIVER_W25QXX_LINK_INIT(&w25q, w25qxx_handle_t);
 800d892:	f241 1228 	movw	r2, #4392	; 0x1128
 800d896:	2100      	movs	r1, #0
 800d898:	4831      	ldr	r0, [pc, #196]	; (800d960 <W25Q_Init+0xe0>)
 800d89a:	f018 ff4b 	bl	8026734 <memset>
    DRIVER_W25QXX_LINK_SPI_QSPI_INIT(&w25q, W25Q_SPIInit);
 800d89e:	4b30      	ldr	r3, [pc, #192]	; (800d960 <W25Q_Init+0xe0>)
 800d8a0:	4a30      	ldr	r2, [pc, #192]	; (800d964 <W25Q_Init+0xe4>)
 800d8a2:	601a      	str	r2, [r3, #0]
    DRIVER_W25QXX_LINK_SPI_QSPI_DEINIT(&w25q, W25Q_SPIDeinit);
 800d8a4:	4b2e      	ldr	r3, [pc, #184]	; (800d960 <W25Q_Init+0xe0>)
 800d8a6:	4a30      	ldr	r2, [pc, #192]	; (800d968 <W25Q_Init+0xe8>)
 800d8a8:	605a      	str	r2, [r3, #4]
    DRIVER_W25QXX_LINK_SPI_QSPI_WRITE_READ(&w25q, W25Q_SPIWriteRead);
 800d8aa:	4b2d      	ldr	r3, [pc, #180]	; (800d960 <W25Q_Init+0xe0>)
 800d8ac:	4a2f      	ldr	r2, [pc, #188]	; (800d96c <W25Q_Init+0xec>)
 800d8ae:	609a      	str	r2, [r3, #8]
    DRIVER_W25QXX_LINK_DELAY_MS(&w25q, W25Q_Delay_ms);
 800d8b0:	4b2b      	ldr	r3, [pc, #172]	; (800d960 <W25Q_Init+0xe0>)
 800d8b2:	4a2f      	ldr	r2, [pc, #188]	; (800d970 <W25Q_Init+0xf0>)
 800d8b4:	60da      	str	r2, [r3, #12]
    DRIVER_W25QXX_LINK_DELAY_US(&w25q, W25Q_Delay_us);
 800d8b6:	4b2a      	ldr	r3, [pc, #168]	; (800d960 <W25Q_Init+0xe0>)
 800d8b8:	4a2e      	ldr	r2, [pc, #184]	; (800d974 <W25Q_Init+0xf4>)
 800d8ba:	611a      	str	r2, [r3, #16]
	DRIVER_W25QXX_LINK_DEBUG_PRINT(&w25q, DBG_SPRINT);
 800d8bc:	4b28      	ldr	r3, [pc, #160]	; (800d960 <W25Q_Init+0xe0>)
 800d8be:	4a2e      	ldr	r2, [pc, #184]	; (800d978 <W25Q_Init+0xf8>)
 800d8c0:	615a      	str	r2, [r3, #20]

	/*Set chip type*/
	if( w25qxx_set_type(&w25q, type) !=0 ){
 800d8c2:	88fb      	ldrh	r3, [r7, #6]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4826      	ldr	r0, [pc, #152]	; (800d960 <W25Q_Init+0xe0>)
 800d8c8:	f005 fe94 	bl	80135f4 <w25qxx_set_type>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d004      	beq.n	800d8dc <W25Q_Init+0x5c>
		DBG_SPRINT("w25qxx: set type failed!\n");
 800d8d2:	482a      	ldr	r0, [pc, #168]	; (800d97c <W25Q_Init+0xfc>)
 800d8d4:	f000 f98c 	bl	800dbf0 <DBG_SPRINT>
		return 1;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e03c      	b.n	800d956 <W25Q_Init+0xd6>
	}

    /* Set chip interface */
    if (w25qxx_set_interface(&w25q, interface) != 0){
 800d8dc:	797b      	ldrb	r3, [r7, #5]
 800d8de:	4619      	mov	r1, r3
 800d8e0:	481f      	ldr	r0, [pc, #124]	; (800d960 <W25Q_Init+0xe0>)
 800d8e2:	f005 fe9c 	bl	801361e <w25qxx_set_interface>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d004      	beq.n	800d8f6 <W25Q_Init+0x76>
    	DBG_SPRINT("w25qxx: set interface failed.\n");
 800d8ec:	4824      	ldr	r0, [pc, #144]	; (800d980 <W25Q_Init+0x100>)
 800d8ee:	f000 f97f 	bl	800dbf0 <DBG_SPRINT>
        return 1;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e02f      	b.n	800d956 <W25Q_Init+0xd6>
    }

    /*Set dual quad spi */
    if (w25qxx_set_dual_quad_spi(&w25q, dualQspiEnable) != 0){
 800d8f6:	793b      	ldrb	r3, [r7, #4]
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	4819      	ldr	r0, [pc, #100]	; (800d960 <W25Q_Init+0xe0>)
 800d8fc:	f005 fe65 	bl	80135ca <w25qxx_set_dual_quad_spi>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d007      	beq.n	800d916 <W25Q_Init+0x96>
    	/*Deinit chip*/
    	(void)w25qxx_deinit(&w25q);
 800d906:	4816      	ldr	r0, [pc, #88]	; (800d960 <W25Q_Init+0xe0>)
 800d908:	f006 fef4 	bl	80146f4 <w25qxx_deinit>
    	DBG_SPRINT("w25qxx: set dual quad spi failed.\n");
 800d90c:	481d      	ldr	r0, [pc, #116]	; (800d984 <W25Q_Init+0x104>)
 800d90e:	f000 f96f 	bl	800dbf0 <DBG_SPRINT>
        return 1;
 800d912:	2301      	movs	r3, #1
 800d914:	e01f      	b.n	800d956 <W25Q_Init+0xd6>
    }

    /* chip init */
    if (w25qxx_init(&w25q) != 0){
 800d916:	4812      	ldr	r0, [pc, #72]	; (800d960 <W25Q_Init+0xe0>)
 800d918:	f006 fac0 	bl	8013e9c <w25qxx_init>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d004      	beq.n	800d92c <W25Q_Init+0xac>
    	DBG_SPRINT("w25qxx: init failed.\n");
 800d922:	4819      	ldr	r0, [pc, #100]	; (800d988 <W25Q_Init+0x108>)
 800d924:	f000 f964 	bl	800dbf0 <DBG_SPRINT>
        return 1;
 800d928:	2301      	movs	r3, #1
 800d92a:	e014      	b.n	800d956 <W25Q_Init+0xd6>
    }else if (type >= W25Q256){
 800d92c:	88fb      	ldrh	r3, [r7, #6]
 800d92e:	f64e 7217 	movw	r2, #61207	; 0xef17
 800d932:	4293      	cmp	r3, r2
 800d934:	d90e      	bls.n	800d954 <W25Q_Init+0xd4>
		if (w25qxx_set_address_mode(&w25q, W25QXX_ADDRESS_MODE_4_BYTE) != 0){
 800d936:	2101      	movs	r1, #1
 800d938:	4809      	ldr	r0, [pc, #36]	; (800d960 <W25Q_Init+0xe0>)
 800d93a:	f005 fe87 	bl	801364c <w25qxx_set_address_mode>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d007      	beq.n	800d954 <W25Q_Init+0xd4>
			/*Deinit chip*/
			(void)w25qxx_deinit(&w25q);
 800d944:	4806      	ldr	r0, [pc, #24]	; (800d960 <W25Q_Init+0xe0>)
 800d946:	f006 fed5 	bl	80146f4 <w25qxx_deinit>
			DBG_SPRINT("w25qxx: set address mode failed.\n");
 800d94a:	4810      	ldr	r0, [pc, #64]	; (800d98c <W25Q_Init+0x10c>)
 800d94c:	f000 f950 	bl	800dbf0 <DBG_SPRINT>
			return 1;
 800d950:	2301      	movs	r3, #1
 800d952:	e000      	b.n	800d956 <W25Q_Init+0xd6>
		}
    }
	return 0;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	240008d4 	.word	0x240008d4
 800d964:	0800d991 	.word	0x0800d991
 800d968:	0800da55 	.word	0x0800da55
 800d96c:	0800daa1 	.word	0x0800daa1
 800d970:	0800da75 	.word	0x0800da75
 800d974:	0800da8b 	.word	0x0800da8b
 800d978:	0800dbf1 	.word	0x0800dbf1
 800d97c:	0802a738 	.word	0x0802a738
 800d980:	0802a754 	.word	0x0802a754
 800d984:	0802a774 	.word	0x0802a774
 800d988:	0802a798 	.word	0x0802a798
 800d98c:	0802a7b0 	.word	0x0802a7b0

0800d990 <W25Q_SPIInit>:
/**
 * @brief   Spi Init
 * @param	none
 * @retval  error status
 */
uint8_t W25Q_SPIInit(void){
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
	  hspi1.Instance = SPI1;
 800d994:	4b28      	ldr	r3, [pc, #160]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d996:	4a29      	ldr	r2, [pc, #164]	; (800da3c <W25Q_SPIInit+0xac>)
 800d998:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d99a:	4b27      	ldr	r3, [pc, #156]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d99c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800d9a0:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d9a2:	4b25      	ldr	r3, [pc, #148]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d9a8:	4b23      	ldr	r3, [pc, #140]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9aa:	2207      	movs	r2, #7
 800d9ac:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d9ae:	4b22      	ldr	r3, [pc, #136]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d9b4:	4b20      	ldr	r3, [pc, #128]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d9ba:	4b1f      	ldr	r3, [pc, #124]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d9c0:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800d9c2:	4b1d      	ldr	r3, [pc, #116]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d9c8:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d9ca:	4b1b      	ldr	r3, [pc, #108]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d9d0:	4b19      	ldr	r3, [pc, #100]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9d6:	4b18      	ldr	r3, [pc, #96]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 0x0;
 800d9dc:	4b16      	ldr	r3, [pc, #88]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9de:	2200      	movs	r2, #0
 800d9e0:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d9e2:	4b15      	ldr	r3, [pc, #84]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d9e8:	635a      	str	r2, [r3, #52]	; 0x34
	  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d9ea:	4b13      	ldr	r3, [pc, #76]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	639a      	str	r2, [r3, #56]	; 0x38
	  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d9f0:	4b11      	ldr	r3, [pc, #68]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	63da      	str	r2, [r3, #60]	; 0x3c
	  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d9f6:	4b10      	ldr	r3, [pc, #64]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	641a      	str	r2, [r3, #64]	; 0x40
	  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d9fc:	4b0e      	ldr	r3, [pc, #56]	; (800da38 <W25Q_SPIInit+0xa8>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	645a      	str	r2, [r3, #68]	; 0x44
	  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800da02:	4b0d      	ldr	r3, [pc, #52]	; (800da38 <W25Q_SPIInit+0xa8>)
 800da04:	2200      	movs	r2, #0
 800da06:	649a      	str	r2, [r3, #72]	; 0x48
	  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800da08:	4b0b      	ldr	r3, [pc, #44]	; (800da38 <W25Q_SPIInit+0xa8>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	64da      	str	r2, [r3, #76]	; 0x4c
	  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800da0e:	4b0a      	ldr	r3, [pc, #40]	; (800da38 <W25Q_SPIInit+0xa8>)
 800da10:	2200      	movs	r2, #0
 800da12:	651a      	str	r2, [r3, #80]	; 0x50
	  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800da14:	4b08      	ldr	r3, [pc, #32]	; (800da38 <W25Q_SPIInit+0xa8>)
 800da16:	2200      	movs	r2, #0
 800da18:	655a      	str	r2, [r3, #84]	; 0x54
	  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800da1a:	4b07      	ldr	r3, [pc, #28]	; (800da38 <W25Q_SPIInit+0xa8>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	659a      	str	r2, [r3, #88]	; 0x58
	  if( HAL_SPI_Init(&hspi1) != HAL_OK){
 800da20:	4805      	ldr	r0, [pc, #20]	; (800da38 <W25Q_SPIInit+0xa8>)
 800da22:	f013 fd0f 	bl	8021444 <HAL_SPI_Init>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <W25Q_SPIInit+0xa0>
		  return 1;
 800da2c:	2301      	movs	r3, #1
 800da2e:	e000      	b.n	800da32 <W25Q_SPIInit+0xa2>
	  }
	  return 0;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	24005190 	.word	0x24005190
 800da3c:	40013000 	.word	0x40013000

0800da40 <W25Q_GetInstance>:
/**
 * @brief   Get w25q instance
 * @param	none
 * @retval  instance of the w25qxx_handle_t structure
 */
w25qxx_handle_t* W25Q_GetInstance(void){
 800da40:	b480      	push	{r7}
 800da42:	af00      	add	r7, sp, #0
	return &w25q;
 800da44:	4b02      	ldr	r3, [pc, #8]	; (800da50 <W25Q_GetInstance+0x10>)
}
 800da46:	4618      	mov	r0, r3
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	240008d4 	.word	0x240008d4

0800da54 <W25Q_SPIDeinit>:
/**
 * @brief   Deinit spi
 * @param	none
 * @retval  error status
 */
uint8_t W25Q_SPIDeinit(void){
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
    if (HAL_SPI_DeInit(&hspi1) != HAL_OK){
 800da58:	4805      	ldr	r0, [pc, #20]	; (800da70 <W25Q_SPIDeinit+0x1c>)
 800da5a:	f013 fdf9 	bl	8021650 <HAL_SPI_DeInit>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <W25Q_SPIDeinit+0x14>
        return 1;
 800da64:	2301      	movs	r3, #1
 800da66:	e000      	b.n	800da6a <W25Q_SPIDeinit+0x16>
    }
    return 0;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	24005190 	.word	0x24005190

0800da74 <W25Q_Delay_ms>:
/**
 * @brief   Millisecond delay
 * @param	ms: delay time in ms
 * @retval  error status
 */
void W25Q_Delay_ms (uint32_t ms){
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f008 fd43 	bl	8016508 <HAL_Delay>
}
 800da82:	bf00      	nop
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <W25Q_Delay_us>:
/**
 * @brief   microsecond delay
 * @param	us: delay time in us
 * @retval  error status
 */
void W25Q_Delay_us (uint32_t us){
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
	Delay_us(us);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f9c4 	bl	800de20 <Delay_us>
}
 800da98:	bf00      	nop
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <W25Q_SPIWriteRead>:
 */
uint8_t W25Q_SPIWriteRead(uint8_t instruction, uint8_t instruction_line,
        uint32_t address, uint8_t address_line, uint8_t address_len,
        uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
        uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
        uint8_t *out_buf, uint32_t out_len, uint8_t data_line){
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	603a      	str	r2, [r7, #0]
 800daa8:	461a      	mov	r2, r3
 800daaa:	4603      	mov	r3, r0
 800daac:	71fb      	strb	r3, [r7, #7]
 800daae:	460b      	mov	r3, r1
 800dab0:	71bb      	strb	r3, [r7, #6]
 800dab2:	4613      	mov	r3, r2
 800dab4:	717b      	strb	r3, [r7, #5]

	if(in_buf == NULL && in_len == 0 && out_buf == NULL && out_len == 0){
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d10a      	bne.n	800dad2 <W25Q_SPIWriteRead+0x32>
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d107      	bne.n	800dad2 <W25Q_SPIWriteRead+0x32>
 800dac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d104      	bne.n	800dad2 <W25Q_SPIWriteRead+0x32>
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d101      	bne.n	800dad2 <W25Q_SPIWriteRead+0x32>
		return 1;
 800dace:	2301      	movs	r3, #1
 800dad0:	e03a      	b.n	800db48 <W25Q_SPIWriteRead+0xa8>
	}
	HAL_GPIO_WritePin(W25QXX_SPI1_CS_GPIO_Port, W25QXX_SPI1_CS_Pin, GPIO_PIN_RESET);
 800dad2:	2200      	movs	r2, #0
 800dad4:	2101      	movs	r1, #1
 800dad6:	481e      	ldr	r0, [pc, #120]	; (800db50 <W25Q_SPIWriteRead+0xb0>)
 800dad8:	f00e f91c 	bl	801bd14 <HAL_GPIO_WritePin>
	/*SPI Write*/
	if(in_buf != NULL && in_len > 0){
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d014      	beq.n	800db0c <W25Q_SPIWriteRead+0x6c>
 800dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d011      	beq.n	800db0c <W25Q_SPIWriteRead+0x6c>
		if( HAL_SPI_Transmit(&hspi1, in_buf, in_len, in_len+1) != HAL_OK){
 800dae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daea:	b29a      	uxth	r2, r3
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daee:	3301      	adds	r3, #1
 800daf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daf2:	4818      	ldr	r0, [pc, #96]	; (800db54 <W25Q_SPIWriteRead+0xb4>)
 800daf4:	f013 fdd6 	bl	80216a4 <HAL_SPI_Transmit>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d006      	beq.n	800db0c <W25Q_SPIWriteRead+0x6c>
			HAL_GPIO_WritePin(W25QXX_SPI1_CS_GPIO_Port, W25QXX_SPI1_CS_Pin, GPIO_PIN_SET);
 800dafe:	2201      	movs	r2, #1
 800db00:	2101      	movs	r1, #1
 800db02:	4813      	ldr	r0, [pc, #76]	; (800db50 <W25Q_SPIWriteRead+0xb0>)
 800db04:	f00e f906 	bl	801bd14 <HAL_GPIO_WritePin>
			return 1;
 800db08:	2301      	movs	r3, #1
 800db0a:	e01d      	b.n	800db48 <W25Q_SPIWriteRead+0xa8>
		}
	}

	/*SPI Read*/
	if(out_buf != NULL && out_len > 0){
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d014      	beq.n	800db3c <W25Q_SPIWriteRead+0x9c>
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	2b00      	cmp	r3, #0
 800db16:	d011      	beq.n	800db3c <W25Q_SPIWriteRead+0x9c>
		if(HAL_SPI_Receive(&hspi1, out_buf, out_len, out_len+1) != HAL_OK){
 800db18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1e:	3301      	adds	r3, #1
 800db20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db22:	480c      	ldr	r0, [pc, #48]	; (800db54 <W25Q_SPIWriteRead+0xb4>)
 800db24:	f013 ffb0 	bl	8021a88 <HAL_SPI_Receive>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d006      	beq.n	800db3c <W25Q_SPIWriteRead+0x9c>
			HAL_GPIO_WritePin(W25QXX_SPI1_CS_GPIO_Port, W25QXX_SPI1_CS_Pin, GPIO_PIN_SET);
 800db2e:	2201      	movs	r2, #1
 800db30:	2101      	movs	r1, #1
 800db32:	4807      	ldr	r0, [pc, #28]	; (800db50 <W25Q_SPIWriteRead+0xb0>)
 800db34:	f00e f8ee 	bl	801bd14 <HAL_GPIO_WritePin>
			return 1;
 800db38:	2301      	movs	r3, #1
 800db3a:	e005      	b.n	800db48 <W25Q_SPIWriteRead+0xa8>
		}
	}
	HAL_GPIO_WritePin(W25QXX_SPI1_CS_GPIO_Port, W25QXX_SPI1_CS_Pin, GPIO_PIN_SET);
 800db3c:	2201      	movs	r2, #1
 800db3e:	2101      	movs	r1, #1
 800db40:	4803      	ldr	r0, [pc, #12]	; (800db50 <W25Q_SPIWriteRead+0xb0>)
 800db42:	f00e f8e7 	bl	801bd14 <HAL_GPIO_WritePin>
	return 0;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	58020400 	.word	0x58020400
 800db54:	24005190 	.word	0x24005190

0800db58 <DBG_INIT>:
  * @brief  Initializes Debug port
   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *	               the configuration information for the specified UART module.
  * @retval HAL status
  */
void DBG_INIT(DBG_EnableState enable){
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	4603      	mov	r3, r0
 800db60:	71fb      	strb	r3, [r7, #7]
	dbg.enable = enable;
 800db62:	4a0e      	ldr	r2, [pc, #56]	; (800db9c <DBG_INIT+0x44>)
 800db64:	79fb      	ldrb	r3, [r7, #7]
 800db66:	7013      	strb	r3, [r2, #0]
	dbg.enTimeStamp = DBG_DISBLED;
 800db68:	4b0c      	ldr	r3, [pc, #48]	; (800db9c <DBG_INIT+0x44>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	705a      	strb	r2, [r3, #1]
	dbg.txCallback = NULL;
 800db6e:	4b0b      	ldr	r3, [pc, #44]	; (800db9c <DBG_INIT+0x44>)
 800db70:	2200      	movs	r2, #0
 800db72:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	dbg.len = 0;
 800db76:	4b09      	ldr	r3, [pc, #36]	; (800db9c <DBG_INIT+0x44>)
 800db78:	2200      	movs	r2, #0
 800db7a:	805a      	strh	r2, [r3, #2]
	memset(dbg.str, 0, sizeof(dbg.str));
 800db7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db80:	2100      	movs	r1, #0
 800db82:	4807      	ldr	r0, [pc, #28]	; (800dba0 <DBG_INIT+0x48>)
 800db84:	f018 fdd6 	bl	8026734 <memset>
	ts = INST_GetTimeStamp();
 800db88:	f7f8 fa9e 	bl	80060c8 <INST_GetTimeStamp>
 800db8c:	4603      	mov	r3, r0
 800db8e:	4a05      	ldr	r2, [pc, #20]	; (800dba4 <DBG_INIT+0x4c>)
 800db90:	6013      	str	r3, [r2, #0]
}
 800db92:	bf00      	nop
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	24005e38 	.word	0x24005e38
 800dba0:	24005e3c 	.word	0x24005e3c
 800dba4:	24005e34 	.word	0x24005e34

0800dba8 <DBG_PRINT>:
/**
  * @brief  Prints string
  * @param  pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @retval HAL status
  */
void DBG_PRINT(const char *pData){
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	if(dbg.enable == DBG_ENABLED){
 800dbb0:	4b0e      	ldr	r3, [pc, #56]	; (800dbec <DBG_PRINT+0x44>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d115      	bne.n	800dbe4 <DBG_PRINT+0x3c>
		int len = strlen(pData);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7f2 fba9 	bl	8000310 <strlen>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	60fb      	str	r3, [r7, #12]
		if(len > 0U){
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00d      	beq.n	800dbe4 <DBG_PRINT+0x3c>
			if(dbg.enTimeStamp){
//				DBG_PRINT_TIMESTAMP();
			}

			/*TX external print callback*/
			dbg.txCallback((uint8_t *)pData, len);
 800dbc8:	4b08      	ldr	r3, [pc, #32]	; (800dbec <DBG_PRINT+0x44>)
 800dbca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	b292      	uxth	r2, r2
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	4798      	blx	r3
			/*TX internal print*/
//			HAL_UART_Transmit(&huart3, (uint8_t *)pData, len, DBG_TransTimeout(len));
			memset((char *)pData,0,len);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	461a      	mov	r2, r3
 800dbdc:	2100      	movs	r1, #0
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f018 fda8 	bl	8026734 <memset>
		}
	}
}
 800dbe4:	bf00      	nop
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	24005e38 	.word	0x24005e38

0800dbf0 <DBG_SPRINT>:
/**
  * @brief  Prints string
  * @param  pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @retval HAL status
  */
int DBG_SPRINT(char *format, ...){
 800dbf0:	b40f      	push	{r0, r1, r2, r3}
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	af00      	add	r7, sp, #0
	if(dbg.enable != DBG_ENABLED) return 0;
 800dbf8:	4b10      	ldr	r3, [pc, #64]	; (800dc3c <DBG_SPRINT+0x4c>)
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d001      	beq.n	800dc04 <DBG_SPRINT+0x14>
 800dc00:	2300      	movs	r3, #0
 800dc02:	e013      	b.n	800dc2c <DBG_SPRINT+0x3c>
	va_list aptr;
	int32_t ret;

	va_start(aptr, format);
 800dc04:	f107 0314 	add.w	r3, r7, #20
 800dc08:	603b      	str	r3, [r7, #0]
	ret = vsprintf(dbg.str, format, aptr);
 800dc0a:	683a      	ldr	r2, [r7, #0]
 800dc0c:	6939      	ldr	r1, [r7, #16]
 800dc0e:	480c      	ldr	r0, [pc, #48]	; (800dc40 <DBG_SPRINT+0x50>)
 800dc10:	f019 fc54 	bl	80274bc <vsiprintf>
 800dc14:	6078      	str	r0, [r7, #4]
	va_end(aptr);
	if(ret>0){
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	dd06      	ble.n	800dc2a <DBG_SPRINT+0x3a>
		dbg.len = ret;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	4b06      	ldr	r3, [pc, #24]	; (800dc3c <DBG_SPRINT+0x4c>)
 800dc22:	805a      	strh	r2, [r3, #2]
		DBG_PRINT(dbg.str);
 800dc24:	4806      	ldr	r0, [pc, #24]	; (800dc40 <DBG_SPRINT+0x50>)
 800dc26:	f7ff ffbf 	bl	800dba8 <DBG_PRINT>
	}

	return ret;
 800dc2a:	687b      	ldr	r3, [r7, #4]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc36:	b004      	add	sp, #16
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	24005e38 	.word	0x24005e38
 800dc40:	24005e3c 	.word	0x24005e3c

0800dc44 <DBG_SPRINT_NL>:
/**
  * @brief  Prints string
  * @param  pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @retval HAL status
  */
int DBG_SPRINT_NL(char *format, ...){
 800dc44:	b40f      	push	{r0, r1, r2, r3}
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b082      	sub	sp, #8
 800dc4a:	af00      	add	r7, sp, #0
	if(dbg.enable != DBG_ENABLED) return 0;
 800dc4c:	4b19      	ldr	r3, [pc, #100]	; (800dcb4 <DBG_SPRINT_NL+0x70>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d001      	beq.n	800dc58 <DBG_SPRINT_NL+0x14>
 800dc54:	2300      	movs	r3, #0
 800dc56:	e025      	b.n	800dca4 <DBG_SPRINT_NL+0x60>
	va_list aptr;
	int len = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	607b      	str	r3, [r7, #4]

	va_start(aptr, format);
 800dc5c:	f107 0314 	add.w	r3, r7, #20
 800dc60:	603b      	str	r3, [r7, #0]
	len = vsprintf(dbg.str, format, aptr);
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	6939      	ldr	r1, [r7, #16]
 800dc66:	4814      	ldr	r0, [pc, #80]	; (800dcb8 <DBG_SPRINT_NL+0x74>)
 800dc68:	f019 fc28 	bl	80274bc <vsiprintf>
 800dc6c:	6078      	str	r0, [r7, #4]
	va_end(aptr);
	if(len>0){
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	dd16      	ble.n	800dca2 <DBG_SPRINT_NL+0x5e>
//		sprintf(temp, "%lu.%03lu.%03lu : ", timStamp.sec, timStamp.ms, timStamp.us );

//		HAL_UART_Transmit(huart, (uint8_t *)temp, size, DBUG_TransTimeout(size));

//		dbg_PRINT(temp);
		dbg.str[len++] = '\r';
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	1c5a      	adds	r2, r3, #1
 800dc78:	607a      	str	r2, [r7, #4]
 800dc7a:	4a0e      	ldr	r2, [pc, #56]	; (800dcb4 <DBG_SPRINT_NL+0x70>)
 800dc7c:	4413      	add	r3, r2
 800dc7e:	220d      	movs	r2, #13
 800dc80:	711a      	strb	r2, [r3, #4]
		dbg.str[len++] = '\n';
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	4a0a      	ldr	r2, [pc, #40]	; (800dcb4 <DBG_SPRINT_NL+0x70>)
 800dc8a:	4413      	add	r3, r2
 800dc8c:	220a      	movs	r2, #10
 800dc8e:	711a      	strb	r2, [r3, #4]
		DBG_PRINT(dbg.str);
 800dc90:	4809      	ldr	r0, [pc, #36]	; (800dcb8 <DBG_SPRINT_NL+0x74>)
 800dc92:	f7ff ff89 	bl	800dba8 <DBG_PRINT>
		memset(format,0,len);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	6938      	ldr	r0, [r7, #16]
 800dc9e:	f018 fd49 	bl	8026734 <memset>
	}
	return len;
 800dca2:	687b      	ldr	r3, [r7, #4]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcae:	b004      	add	sp, #16
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	24005e38 	.word	0x24005e38
 800dcb8:	24005e3c 	.word	0x24005e3c

0800dcbc <DBG_SPRINT_APPEND>:
/**
  * @brief  Prints string
  * @param  pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @retval HAL status
  */
int DBG_SPRINT_APPEND(char *pData, char *format, ...){
 800dcbc:	b40e      	push	{r1, r2, r3}
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b0c5      	sub	sp, #276	; 0x114
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	1d3b      	adds	r3, r7, #4
 800dcc6:	6018      	str	r0, [r3, #0]
	if(dbg.enable != DBG_ENABLED) return 0;
 800dcc8:	4b21      	ldr	r3, [pc, #132]	; (800dd50 <DBG_SPRINT_APPEND+0x94>)
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d001      	beq.n	800dcd4 <DBG_SPRINT_APPEND+0x18>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e034      	b.n	800dd3e <DBG_SPRINT_APPEND+0x82>
	va_list aptr;
	int32_t ret;
	char buff[DBG_STR_SIZE];

	va_start(aptr, format);
 800dcd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800dcd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	ret = vsprintf(buff, format, aptr);
 800dcdc:	f107 0308 	add.w	r3, r7, #8
 800dce0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800dce4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800dce8:	4618      	mov	r0, r3
 800dcea:	f019 fbe7 	bl	80274bc <vsiprintf>
 800dcee:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	va_end(aptr);

	dbg.len = ret+strlen(pData);
 800dcf2:	1d3b      	adds	r3, r7, #4
 800dcf4:	6818      	ldr	r0, [r3, #0]
 800dcf6:	f7f2 fb0b 	bl	8000310 <strlen>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	4413      	add	r3, r2
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	4b11      	ldr	r3, [pc, #68]	; (800dd50 <DBG_SPRINT_APPEND+0x94>)
 800dd0a:	805a      	strh	r2, [r3, #2]
	if(ret>0 &&  (dbg.len<= DBG_STR_SIZE)){
 800dd0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	dd0b      	ble.n	800dd2c <DBG_SPRINT_APPEND+0x70>
 800dd14:	4b0e      	ldr	r3, [pc, #56]	; (800dd50 <DBG_SPRINT_APPEND+0x94>)
 800dd16:	885b      	ldrh	r3, [r3, #2]
 800dd18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd1c:	d806      	bhi.n	800dd2c <DBG_SPRINT_APPEND+0x70>
		strcat((char *)pData,buff );
 800dd1e:	f107 0208 	add.w	r2, r7, #8
 800dd22:	1d3b      	adds	r3, r7, #4
 800dd24:	4611      	mov	r1, r2
 800dd26:	6818      	ldr	r0, [r3, #0]
 800dd28:	f019 fba2 	bl	8027470 <strcat>
	}
	return (ret>0 ? dbg.len : ret);
 800dd2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	dd02      	ble.n	800dd3a <DBG_SPRINT_APPEND+0x7e>
 800dd34:	4b06      	ldr	r3, [pc, #24]	; (800dd50 <DBG_SPRINT_APPEND+0x94>)
 800dd36:	885b      	ldrh	r3, [r3, #2]
 800dd38:	e001      	b.n	800dd3e <DBG_SPRINT_APPEND+0x82>
 800dd3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
	//	dbg_PRINT();
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800dd44:	46bd      	mov	sp, r7
 800dd46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd4a:	b003      	add	sp, #12
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	24005e38 	.word	0x24005e38

0800dd54 <DBG_ENABLE>:
/**
  * @brief enable debug print in serial terminal
  * @param none
  * @retval None
  */
void DBG_ENABLE(void){
 800dd54:	b480      	push	{r7}
 800dd56:	af00      	add	r7, sp, #0
	dbg.enable = DBG_ENABLED;
 800dd58:	4b03      	ldr	r3, [pc, #12]	; (800dd68 <DBG_ENABLE+0x14>)
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	701a      	strb	r2, [r3, #0]
}
 800dd5e:	bf00      	nop
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr
 800dd68:	24005e38 	.word	0x24005e38

0800dd6c <DBG_DISABLE>:
/**
  * @brief disable debug print in serial terminal
  * @param none
  * @retval None
  */
void DBG_DISABLE(void){
 800dd6c:	b480      	push	{r7}
 800dd6e:	af00      	add	r7, sp, #0
	dbg.enable = DBG_DISBLED;
 800dd70:	4b03      	ldr	r3, [pc, #12]	; (800dd80 <DBG_DISABLE+0x14>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	701a      	strb	r2, [r3, #0]
}
 800dd76:	bf00      	nop
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr
 800dd80:	24005e38 	.word	0x24005e38

0800dd84 <DBG_ENABLE_TIMESTAMP>:
	char temp[32];
	uint8_t size = sprintf(temp, "%lu.%03lu.%03lu : ", ts->sec, ts->ms, ts->us );
//				HAL_UART_Transmit(&huart3, (uint8_t *)pData, len,len);
	dbg.txCallback((uint8_t *)temp, size);
}
void DBG_ENABLE_TIMESTAMP(void){
 800dd84:	b480      	push	{r7}
 800dd86:	af00      	add	r7, sp, #0
	dbg.enTimeStamp = DBG_ENABLED;
 800dd88:	4b03      	ldr	r3, [pc, #12]	; (800dd98 <DBG_ENABLE_TIMESTAMP+0x14>)
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	705a      	strb	r2, [r3, #1]
}
 800dd8e:	bf00      	nop
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	24005e38 	.word	0x24005e38

0800dd9c <DBG_DISABLE_TIMESTAMP>:
/**
  * @brief disable timestamp print in serial terminal
  * @param none
  * @retval None
  */
void DBG_DISABLE_TIMESTAMP(void){
 800dd9c:	b480      	push	{r7}
 800dd9e:	af00      	add	r7, sp, #0
	dbg.enTimeStamp = DBG_DISBLED;
 800dda0:	4b03      	ldr	r3, [pc, #12]	; (800ddb0 <DBG_DISABLE_TIMESTAMP+0x14>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	705a      	strb	r2, [r3, #1]
}
 800dda6:	bf00      	nop
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr
 800ddb0:	24005e38 	.word	0x24005e38

0800ddb4 <DBG_IS_ENABLED>:
/**
  * @brief check debug is enabled or not
  * @param none
  * @retval None
  */
uint8_t DBG_IS_ENABLED(void){
 800ddb4:	b480      	push	{r7}
 800ddb6:	af00      	add	r7, sp, #0
	return dbg.enable;
 800ddb8:	4b03      	ldr	r3, [pc, #12]	; (800ddc8 <DBG_IS_ENABLED+0x14>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	24005e38 	.word	0x24005e38

0800ddcc <DBG_AttachTxCallback>:
/**
  * @brief attach tx callback function
  * @param none
  * @retval None
  */
void DBG_AttachTxCallback( void (*callback)(uint8_t* data, uint16_t len)){
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
	dbg.txCallback = callback;
 800ddd4:	4a04      	ldr	r2, [pc, #16]	; (800dde8 <DBG_AttachTxCallback+0x1c>)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 800dddc:	bf00      	nop
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	24005e38 	.word	0x24005e38

0800ddec <Delay_Init>:
 * @brief  delay clock init
 * @return status code
 *         - 0 success
 * @note   none
 */
void Delay_Init(void){
 800ddec:	b580      	push	{r7, lr}
 800ddee:	af00      	add	r7, sp, #0
    /*Config systick clock source HCLK */
//    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
    DBG_SPRINT_NL("SysClk: %u",HAL_RCC_GetSysClockFreq());
 800ddf0:	f011 f884 	bl	801eefc <HAL_RCC_GetSysClockFreq>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4806      	ldr	r0, [pc, #24]	; (800de14 <Delay_Init+0x28>)
 800ddfa:	f7ff ff23 	bl	800dc44 <DBG_SPRINT_NL>
    /* Calculate clock count in 1 us*/
    clkCount = HAL_RCC_GetSysClockFreq()/1000000;
 800ddfe:	f011 f87d 	bl	801eefc <HAL_RCC_GetSysClockFreq>
 800de02:	4603      	mov	r3, r0
 800de04:	4a04      	ldr	r2, [pc, #16]	; (800de18 <Delay_Init+0x2c>)
 800de06:	fba2 2303 	umull	r2, r3, r2, r3
 800de0a:	0c9b      	lsrs	r3, r3, #18
 800de0c:	4a03      	ldr	r2, [pc, #12]	; (800de1c <Delay_Init+0x30>)
 800de0e:	6013      	str	r3, [r2, #0]
}
 800de10:	bf00      	nop
 800de12:	bd80      	pop	{r7, pc}
 800de14:	0802a7d4 	.word	0x0802a7d4
 800de18:	431bde83 	.word	0x431bde83
 800de1c:	240019fc 	.word	0x240019fc

0800de20 <Delay_us>:
/**
 * @brief   delay us
 * @param	us
 * @note    none
 */
void Delay_us(uint32_t us){
 800de20:	b480      	push	{r7}
 800de22:	b089      	sub	sp, #36	; 0x24
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
    uint32_t ticks = us*clkCount;
 800de28:	4b1a      	ldr	r3, [pc, #104]	; (800de94 <Delay_us+0x74>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	fb02 f303 	mul.w	r3, r2, r3
 800de32:	617b      	str	r3, [r7, #20]
    uint32_t told = SysTick->VAL;
 800de34:	4b18      	ldr	r3, [pc, #96]	; (800de98 <Delay_us+0x78>)
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = SysTick->VAL;
 800de3a:	4b17      	ldr	r3, [pc, #92]	; (800de98 <Delay_us+0x78>)
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD;
 800de44:	4b14      	ldr	r3, [pc, #80]	; (800de98 <Delay_us+0x78>)
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	60fb      	str	r3, [r7, #12]

    /* delay */
    while (1){
        tnow = SysTick->VAL;
 800de4a:	4b13      	ldr	r3, [pc, #76]	; (800de98 <Delay_us+0x78>)
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	613b      	str	r3, [r7, #16]
        if (tnow != told){
 800de50:	693a      	ldr	r2, [r7, #16]
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	429a      	cmp	r2, r3
 800de56:	d0f8      	beq.n	800de4a <Delay_us+0x2a>
        	tcnt += (tnow < told) ?
        			(told - tnow) :
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d203      	bcs.n	800de68 <Delay_us+0x48>
 800de60:	69fa      	ldr	r2, [r7, #28]
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	e004      	b.n	800de72 <Delay_us+0x52>
					(reload - tnow + told);
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	1ad2      	subs	r2, r2, r3
        			(told - tnow) :
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	4413      	add	r3, r2
        	tcnt += (tnow < told) ?
 800de72:	69ba      	ldr	r2, [r7, #24]
 800de74:	4413      	add	r3, r2
 800de76:	61bb      	str	r3, [r7, #24]
            told = tnow;
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks){ break; }
 800de7c:	69ba      	ldr	r2, [r7, #24]
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	429a      	cmp	r2, r3
 800de82:	d200      	bcs.n	800de86 <Delay_us+0x66>
        tnow = SysTick->VAL;
 800de84:	e7e1      	b.n	800de4a <Delay_us+0x2a>
            if (tcnt >= ticks){ break; }
 800de86:	bf00      	nop
        }
    }
}
 800de88:	bf00      	nop
 800de8a:	3724      	adds	r7, #36	; 0x24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr
 800de94:	240019fc 	.word	0x240019fc
 800de98:	e000e010 	.word	0xe000e010

0800de9c <DI_Init>:
/**
  * @brief  Initialize the digital input as normal input
  * @param  dinp: digital input struct
  * @retval none
  */
DI_Error DI_Init(DigitalIn_t *di){
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b088      	sub	sp, #32
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
	if(di == NULL) return DI_ERR_NULL_POINTER;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d102      	bne.n	800deb0 <DI_Init+0x14>
 800deaa:	f04f 33ff 	mov.w	r3, #4294967295
 800deae:	e020      	b.n	800def2 <DI_Init+0x56>

	di->state = GPIO_PIN_RESET;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	// configure gpio in digital input
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800deb8:	f107 030c 	add.w	r3, r7, #12
 800debc:	2200      	movs	r2, #0
 800debe:	601a      	str	r2, [r3, #0]
 800dec0:	605a      	str	r2, [r3, #4]
 800dec2:	609a      	str	r2, [r3, #8]
 800dec4:	60da      	str	r2, [r3, #12]
 800dec6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = di->config.pin;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	899b      	ldrh	r3, [r3, #12]
 800decc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dece:	2300      	movs	r3, #0
 800ded0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(di->config.port, &GPIO_InitStruct);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	f107 020c 	add.w	r2, r7, #12
 800dede:	4611      	mov	r1, r2
 800dee0:	4618      	mov	r0, r3
 800dee2:	f00d fc55 	bl	801b790 <HAL_GPIO_Init>

	FLTR_ClearDebounce(&di->dbunce);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	3318      	adds	r3, #24
 800deea:	4618      	mov	r0, r3
 800deec:	f000 fedd 	bl	800ecaa <FLTR_ClearDebounce>

	return DI_ERR_NONE;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3720      	adds	r7, #32
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <DI_ConfigPulsCapMode>:
/**
  * @brief  configs the digital input mode to capture the pulse
  * @param  dinp: digital input struct
  * @retval none
  */
void DI_ConfigPulsCapMode(DigitalIn_t *di){
 800defa:	b580      	push	{r7, lr}
 800defc:	b082      	sub	sp, #8
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]

	switch (di->config.counterType ) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	795b      	ldrb	r3, [r3, #5]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d103      	bne.n	800df12 <DI_ConfigPulsCapMode+0x18>
		case DI_COUNT_TYPE_TIMER:
//			DEBUG_SPRINT_NL("counterType: 2");
			DI_ConfigPulsCapChannel(di);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f908 	bl	800e120 <DI_ConfigPulsCapChannel>
			break;
 800df10:	e000      	b.n	800df14 <DI_ConfigPulsCapMode+0x1a>
//			GPIO_InitStruct.Pull = GPIO_NOPULL;
//			HAL_GPIO_Init(di->config.port, &GPIO_InitStruct);
//
//		}break;
		default:
			break;
 800df12:	bf00      	nop
	}


}
 800df14:	bf00      	nop
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <DI_ConfigNormalMode>:
  * @brief  configs the digital input in normal mode
  * @param  dinp: digital input struct
  * @retval none
  */

void DI_ConfigNormalMode(DigitalIn_t *di){
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b088      	sub	sp, #32
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df24:	f107 030c 	add.w	r3, r7, #12
 800df28:	2200      	movs	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	605a      	str	r2, [r3, #4]
 800df2e:	609a      	str	r2, [r3, #8]
 800df30:	60da      	str	r2, [r3, #12]
 800df32:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df34:	2300      	movs	r3, #0
 800df36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin = di->config.pin;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	899b      	ldrh	r3, [r3, #12]
 800df3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df3e:	2300      	movs	r3, #0
 800df40:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(di->config.port, &GPIO_InitStruct);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	f107 020c 	add.w	r2, r7, #12
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f00d fc1f 	bl	801b790 <HAL_GPIO_Init>
}
 800df52:	bf00      	nop
 800df54:	3720      	adds	r7, #32
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <DI_Config>:
/**
  * @brief  configs the digital input
  * @param  dinp: digital input struct
  * @retval none
  */
void DI_Config(DigitalIn_t *di){
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b082      	sub	sp, #8
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
	/* GPIO Ports Clock Enable */
	switch (di->config.mode) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	791b      	ldrb	r3, [r3, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <DI_Config+0x16>
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d004      	beq.n	800df78 <DI_Config+0x1e>
			break;
		case DI_MODE_PULSE_CAPTURE:
			DI_ConfigPulsCapMode(di);
			break;
		default:
			break;
 800df6e:	e007      	b.n	800df80 <DI_Config+0x26>
			DI_ConfigNormalMode(di);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7ff ffd3 	bl	800df1c <DI_ConfigNormalMode>
			break;
 800df76:	e003      	b.n	800df80 <DI_Config+0x26>
			DI_ConfigPulsCapMode(di);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7ff ffbe 	bl	800defa <DI_ConfigPulsCapMode>
			break;
 800df7e:	bf00      	nop
	}
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <DI_AttachTimer>:
/**
  * @brief  Initiate the timer for pulse counter mode
  * @param  dinp: digital input struct
  * @retval none
  */
DI_Error DI_AttachTimer(TIM_HandleTypeDef *tim){
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
	if(tim == NULL) return DI_ERR_NULL_POINTER;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d102      	bne.n	800df9c <DI_AttachTimer+0x14>
 800df96:	f04f 33ff 	mov.w	r3, #4294967295
 800df9a:	e003      	b.n	800dfa4 <DI_AttachTimer+0x1c>
	htimDI = tim;
 800df9c:	4a04      	ldr	r2, [pc, #16]	; (800dfb0 <DI_AttachTimer+0x28>)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6013      	str	r3, [r2, #0]
	return DI_ERR_NONE;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr
 800dfb0:	24005f4c 	.word	0x24005f4c

0800dfb4 <DI_ConfigTimer>:
/**
  * @brief  Configure the timer for pulse counter mode
  * @param  dinp: digital input struct
  * @retval none
  */
void DI_ConfigTimer(void){
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b08e      	sub	sp, #56	; 0x38
 800dfb8:	af00      	add	r7, sp, #0
	  /* Peripheral clock enable */
	    __HAL_RCC_TIM2_CLK_ENABLE();
 800dfba:	4b54      	ldr	r3, [pc, #336]	; (800e10c <DI_ConfigTimer+0x158>)
 800dfbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dfc0:	4a52      	ldr	r2, [pc, #328]	; (800e10c <DI_ConfigTimer+0x158>)
 800dfc2:	f043 0301 	orr.w	r3, r3, #1
 800dfc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dfca:	4b50      	ldr	r3, [pc, #320]	; (800e10c <DI_ConfigTimer+0x158>)
 800dfcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dfd0:	f003 0301 	and.w	r3, r3, #1
 800dfd4:	607b      	str	r3, [r7, #4]
 800dfd6:	687b      	ldr	r3, [r7, #4]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfd8:	4b4c      	ldr	r3, [pc, #304]	; (800e10c <DI_ConfigTimer+0x158>)
 800dfda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfde:	4a4b      	ldr	r2, [pc, #300]	; (800e10c <DI_ConfigTimer+0x158>)
 800dfe0:	f043 0301 	orr.w	r3, r3, #1
 800dfe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dfe8:	4b48      	ldr	r3, [pc, #288]	; (800e10c <DI_ConfigTimer+0x158>)
 800dfea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfee:	f003 0301 	and.w	r3, r3, #1
 800dff2:	603b      	str	r3, [r7, #0]
 800dff4:	683b      	ldr	r3, [r7, #0]
	    /**TIM2 GPIO Configuration
	    PA0-WKUP     ------> TIM2_CH1
	    PA1     ------> TIM2_CH2
	    */
	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dffa:	2200      	movs	r2, #0
 800dffc:	601a      	str	r2, [r3, #0]
 800dffe:	605a      	str	r2, [r3, #4]
 800e000:	609a      	str	r2, [r3, #8]
 800e002:	60da      	str	r2, [r3, #12]
 800e004:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = DI_1_ENC_A_Pin|DI_2_ENC_B_Pin;
 800e006:	23c0      	movs	r3, #192	; 0xc0
 800e008:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e00a:	2302      	movs	r3, #2
 800e00c:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e00e:	2300      	movs	r3, #0
 800e010:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e012:	2300      	movs	r3, #0
 800e014:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e016:	2301      	movs	r3, #1
 800e018:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e01a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e01e:	4619      	mov	r1, r3
 800e020:	483b      	ldr	r0, [pc, #236]	; (800e110 <DI_ConfigTimer+0x15c>)
 800e022:	f00d fbb5 	bl	801b790 <HAL_GPIO_Init>

	    /* TIM2 interrupt Init */
	    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800e026:	2202      	movs	r2, #2
 800e028:	2100      	movs	r1, #0
 800e02a:	201c      	movs	r0, #28
 800e02c:	f00a fb49 	bl	80186c2 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e030:	201c      	movs	r0, #28
 800e032:	f00a fb60 	bl	80186f6 <HAL_NVIC_EnableIRQ>

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e036:	f107 0314 	add.w	r3, r7, #20
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	605a      	str	r2, [r3, #4]
 800e040:	609a      	str	r2, [r3, #8]
 800e042:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e044:	f107 0308 	add.w	r3, r7, #8
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]
 800e04c:	605a      	str	r2, [r3, #4]
 800e04e:	609a      	str	r2, [r3, #8]

	  htimDI->Instance = TIM2;
 800e050:	4b30      	ldr	r3, [pc, #192]	; (800e114 <DI_ConfigTimer+0x160>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e058:	601a      	str	r2, [r3, #0]
	  htimDI->Init.Prescaler = (HAL_RCC_GetHCLKFreq()/1000000);
 800e05a:	f011 f8c9 	bl	801f1f0 <HAL_RCC_GetHCLKFreq>
 800e05e:	4602      	mov	r2, r0
 800e060:	4b2c      	ldr	r3, [pc, #176]	; (800e114 <DI_ConfigTimer+0x160>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	492c      	ldr	r1, [pc, #176]	; (800e118 <DI_ConfigTimer+0x164>)
 800e066:	fba1 1202 	umull	r1, r2, r1, r2
 800e06a:	0c92      	lsrs	r2, r2, #18
 800e06c:	605a      	str	r2, [r3, #4]
	  htimDI->Init.CounterMode = TIM_COUNTERMODE_UP;
 800e06e:	4b29      	ldr	r3, [pc, #164]	; (800e114 <DI_ConfigTimer+0x160>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2200      	movs	r2, #0
 800e074:	609a      	str	r2, [r3, #8]
	  htimDI->Init.Period = 1000000-1;
 800e076:	4b27      	ldr	r3, [pc, #156]	; (800e114 <DI_ConfigTimer+0x160>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a28      	ldr	r2, [pc, #160]	; (800e11c <DI_ConfigTimer+0x168>)
 800e07c:	60da      	str	r2, [r3, #12]
	  htimDI->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e07e:	4b25      	ldr	r3, [pc, #148]	; (800e114 <DI_ConfigTimer+0x160>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2200      	movs	r2, #0
 800e084:	611a      	str	r2, [r3, #16]
	  htimDI->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e086:	4b23      	ldr	r3, [pc, #140]	; (800e114 <DI_ConfigTimer+0x160>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2280      	movs	r2, #128	; 0x80
 800e08c:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(htimDI) != HAL_OK)
 800e08e:	4b21      	ldr	r3, [pc, #132]	; (800e114 <DI_ConfigTimer+0x160>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4618      	mov	r0, r3
 800e094:	f014 fabf 	bl	8022616 <HAL_TIM_Base_Init>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d001      	beq.n	800e0a2 <DI_ConfigTimer+0xee>
	  {
	    Error_Handler();
 800e09e:	f7fe f8eb 	bl	800c278 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e0a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0a6:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(htimDI, &sClockSourceConfig) != HAL_OK)
 800e0a8:	4b1a      	ldr	r3, [pc, #104]	; (800e114 <DI_ConfigTimer+0x160>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f107 0214 	add.w	r2, r7, #20
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f015 fcc4 	bl	8023a40 <HAL_TIM_ConfigClockSource>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d001      	beq.n	800e0c2 <DI_ConfigTimer+0x10e>
	  {
	    Error_Handler();
 800e0be:	f7fe f8db 	bl	800c278 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(htimDI) != HAL_OK)
 800e0c2:	4b14      	ldr	r3, [pc, #80]	; (800e114 <DI_ConfigTimer+0x160>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f014 fdf2 	bl	8022cb0 <HAL_TIM_IC_Init>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <DI_ConfigTimer+0x122>
	  {
	    Error_Handler();
 800e0d2:	f7fe f8d1 	bl	800c278 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(htimDI, &sMasterConfig) != HAL_OK)
 800e0de:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <DI_ConfigTimer+0x160>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f107 0208 	add.w	r2, r7, #8
 800e0e6:	4611      	mov	r1, r2
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f016 fb17 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <DI_ConfigTimer+0x144>
	  {
	    Error_Handler();
 800e0f4:	f7fe f8c0 	bl	800c278 <Error_Handler>
	  }

	  HAL_TIM_Base_Start_IT(htimDI);
 800e0f8:	4b06      	ldr	r3, [pc, #24]	; (800e114 <DI_ConfigTimer+0x160>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f014 fb3d 	bl	802277c <HAL_TIM_Base_Start_IT>

//	  DEBUG_SPRINT_NL("ConfTim htimDI: %p", htimDI);
}
 800e102:	bf00      	nop
 800e104:	3738      	adds	r7, #56	; 0x38
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	58024400 	.word	0x58024400
 800e110:	58020000 	.word	0x58020000
 800e114:	24005f4c 	.word	0x24005f4c
 800e118:	431bde83 	.word	0x431bde83
 800e11c:	000f423f 	.word	0x000f423f

0800e120 <DI_ConfigPulsCapChannel>:

void DI_ConfigPulsCapChannel(DigitalIn_t *di){
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]

	DI_ConfigTimer();
 800e128:	f7ff ff44 	bl	800dfb4 <DI_ConfigTimer>

	TIM_IC_InitTypeDef sConfigIC = {0};
 800e12c:	f107 0308 	add.w	r3, r7, #8
 800e130:	2200      	movs	r2, #0
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	605a      	str	r2, [r3, #4]
 800e136:	609a      	str	r2, [r3, #8]
 800e138:	60da      	str	r2, [r3, #12]

    HAL_TIM_IC_Stop_IT(htimDI,  di->config.channel);
 800e13a:	4b22      	ldr	r3, [pc, #136]	; (800e1c4 <DI_ConfigPulsCapChannel+0xa4>)
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	691b      	ldr	r3, [r3, #16]
 800e142:	4619      	mov	r1, r3
 800e144:	4610      	mov	r0, r2
 800e146:	f014 ffd9 	bl	80230fc <HAL_TIM_IC_Stop_IT>
	switch (di->config.trigMode) {
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	79db      	ldrb	r3, [r3, #7]
 800e14e:	2b03      	cmp	r3, #3
 800e150:	d00c      	beq.n	800e16c <DI_ConfigPulsCapChannel+0x4c>
 800e152:	2b03      	cmp	r3, #3
 800e154:	dc0d      	bgt.n	800e172 <DI_ConfigPulsCapChannel+0x52>
 800e156:	2b01      	cmp	r3, #1
 800e158:	d002      	beq.n	800e160 <DI_ConfigPulsCapChannel+0x40>
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	d003      	beq.n	800e166 <DI_ConfigPulsCapChannel+0x46>
 800e15e:	e008      	b.n	800e172 <DI_ConfigPulsCapChannel+0x52>
		case DI_TRIG_MODE_RISING:
//			DEBUG_SPRINT_NL("trigMode: 2");
			sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800e160:	2300      	movs	r3, #0
 800e162:	60bb      	str	r3, [r7, #8]
			break;
 800e164:	e00b      	b.n	800e17e <DI_ConfigPulsCapChannel+0x5e>
		case DI_TRIG_MODE_FALLING:
			sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800e166:	2302      	movs	r3, #2
 800e168:	60bb      	str	r3, [r7, #8]
			break;
 800e16a:	e008      	b.n	800e17e <DI_ConfigPulsCapChannel+0x5e>
		case DI_TRIG_MODE_RISING_FALLING:
			sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800e16c:	230a      	movs	r3, #10
 800e16e:	60bb      	str	r3, [r7, #8]
			break;
 800e170:	e005      	b.n	800e17e <DI_ConfigPulsCapChannel+0x5e>
		default:
			sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800e172:	2300      	movs	r3, #0
 800e174:	60bb      	str	r3, [r7, #8]
			di->config.trigMode = DI_TRIG_MODE_RISING;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	71da      	strb	r2, [r3, #7]
			break;
 800e17c:	bf00      	nop
	}

	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800e17e:	2301      	movs	r3, #1
 800e180:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800e182:	2300      	movs	r3, #0
 800e184:	613b      	str	r3, [r7, #16]
	sConfigIC.ICFilter = 0;
 800e186:	2300      	movs	r3, #0
 800e188:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_IC_ConfigChannel(htimDI, &sConfigIC, di->config.channel) != HAL_OK)
 800e18a:	4b0e      	ldr	r3, [pc, #56]	; (800e1c4 <DI_ConfigPulsCapChannel+0xa4>)
 800e18c:	6818      	ldr	r0, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	691a      	ldr	r2, [r3, #16]
 800e192:	f107 0308 	add.w	r3, r7, #8
 800e196:	4619      	mov	r1, r3
 800e198:	f015 faa1 	bl	80236de <HAL_TIM_IC_ConfigChannel>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <DI_ConfigPulsCapChannel+0x86>
	{
	Error_Handler();
 800e1a2:	f7fe f869 	bl	800c278 <Error_Handler>
	}
	 HAL_TIM_IC_Start_IT(htimDI,  di->config.channel);
 800e1a6:	4b07      	ldr	r3, [pc, #28]	; (800e1c4 <DI_ConfigPulsCapChannel+0xa4>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f014 fe45 	bl	8022e40 <HAL_TIM_IC_Start_IT>
	 di->pulseInf.countOVF = 0;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	879a      	strh	r2, [r3, #60]	; 0x3c
//	 DEBUG_SPRINT_NL("Conf Count htimDI: %p", htimDI);
}
 800e1bc:	bf00      	nop
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	24005f4c 	.word	0x24005f4c

0800e1c8 <DI_CalculatePulse>:



void DI_CalculatePulse(DigitalIn_t *di){
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
	if(di->pulseInf.isEdgeDtctd > 0){
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d057      	beq.n	800e28a <DI_CalculatePulse+0xc2>
		di->pulseInf.isEdgeDtctd = 0;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		uint16_t ovf = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	81fb      	strh	r3, [r7, #14]
		if(di->pulseInf.edgeTime < di->pulseInf.lastEdgeTime || di->pulseInf.countOVF>0){
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d303      	bcc.n	800e1fa <DI_CalculatePulse+0x32>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d01e      	beq.n	800e238 <DI_CalculatePulse+0x70>

			di->pulseInf.period = ((double)(((htimDI->Init.Period+1)*di->pulseInf.countOVF)  + di->pulseInf.edgeTime - di->pulseInf.lastEdgeTime));///(double)(htimDI->Init.Period+1)
 800e1fa:	4b29      	ldr	r3, [pc, #164]	; (800e2a0 <DI_CalculatePulse+0xd8>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	3301      	adds	r3, #1
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800e206:	fb02 f203 	mul.w	r2, r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20e:	441a      	add	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	ee07 3a90 	vmov	s15, r3
 800e21a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e21e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e222:	ee17 2a90 	vmov	r2, s15
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	635a      	str	r2, [r3, #52]	; 0x34

//			DEBUG_SPRINT_NL("Overflow: %d",di->pulseInf.countOVF);
			ovf = di->pulseInf.countOVF;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e22e:	81fb      	strh	r3, [r7, #14]
			di->pulseInf.countOVF = 0;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	879a      	strh	r2, [r3, #60]	; 0x3c
 800e236:	e00e      	b.n	800e256 <DI_CalculatePulse+0x8e>
		}else{
			di->pulseInf.period = ((double)(di->pulseInf.edgeTime - di->pulseInf.lastEdgeTime));///(double)(htimDI->Init.Period+1)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	ee07 3a90 	vmov	s15, r3
 800e246:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e24a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e24e:	ee17 2a90 	vmov	r2, s15
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	635a      	str	r2, [r3, #52]	; 0x34
		}
//		DEBUG_SPRINT_NL("DI_%d: { ET0: %luus, ET1: %luus, PRD: %luus, OVF: %d }",di->index, di->pulseInf.lastEdgeTime, di->pulseInf.edgeTime,  di->pulseInf.period, ovf);
		di->pulseInf.period = ((double)di->pulseInf.period/(double)(htimDI->Init.Period+1))*1000.0f;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25a:	ee07 3a90 	vmov	s15, r3
 800e25e:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800e262:	4b0f      	ldr	r3, [pc, #60]	; (800e2a0 <DI_CalculatePulse+0xd8>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	3301      	adds	r3, #1
 800e26a:	ee07 3a90 	vmov	s15, r3
 800e26e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800e272:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e276:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800e298 <DI_CalculatePulse+0xd0>
 800e27a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e27e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e282:	ee17 2a90 	vmov	r2, s15
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800e28a:	bf00      	nop
 800e28c:	3714      	adds	r7, #20
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	00000000 	.word	0x00000000
 800e29c:	408f4000 	.word	0x408f4000
 800e2a0:	24005f4c 	.word	0x24005f4c

0800e2a4 <DI_DetectEdge>:
/**
  * @brief  Reads the digital input
  * @param  dinp: digital input struct
  * @retval none
  */
void DI_DetectEdge(DigitalIn_t *di){
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
	if(di->state > di->lastState){				// here state is the last state & final state is the present state
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d908      	bls.n	800e2ce <DI_DetectEdge+0x2a>
		di->trigger = DI_TRIG_RISING;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		di->isTriggered = 1U;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}else if(di->state < di->lastState){
		di->trigger = DI_TRIG_FALLING;
		di->isTriggered = 1U;
	}
}
 800e2cc:	e00f      	b.n	800e2ee <DI_DetectEdge+0x4a>
	}else if(di->state < di->lastState){
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d207      	bcs.n	800e2ee <DI_DetectEdge+0x4a>
		di->trigger = DI_TRIG_FALLING;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2202      	movs	r2, #2
 800e2e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		di->isTriggered = 1U;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800e2ee:	bf00      	nop
 800e2f0:	370c      	adds	r7, #12
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <DI_Read>:
/**
  * @brief  Reads the digital input
  * @param  dinp: digital input struct
  * @retval none
  */
void DI_Read(DigitalIn_t *di){
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b082      	sub	sp, #8
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]

	/*Read input*/
	di->dbunce.currentState = DI_READ_PIN(di->config.port, di->config.pin);				// ADDED: instead of HAL_GPIO_ReadPin() to reduce the process time
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	8992      	ldrh	r2, [r2, #12]
 800e30c:	4013      	ands	r3, r2
 800e30e:	2b00      	cmp	r3, #0
 800e310:	bf14      	ite	ne
 800e312:	2301      	movne	r3, #1
 800e314:	2300      	moveq	r3, #0
 800e316:	b2db      	uxtb	r3, r3
 800e318:	b29a      	uxth	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	83da      	strh	r2, [r3, #30]
	/*Apply debounce filter*/
	while(di->dbunce.counter <= di->dbunce.countMax && di->dbunce.finalState != di->dbunce.currentState){
 800e31e:	e012      	b.n	800e346 <DI_Read+0x4c>
		di->dbunce.currentState = DI_READ_PIN(di->config.port, di->config.pin);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	8992      	ldrh	r2, [r2, #12]
 800e32a:	4013      	ands	r3, r2
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	bf14      	ite	ne
 800e330:	2301      	movne	r3, #1
 800e332:	2300      	moveq	r3, #0
 800e334:	b2db      	uxtb	r3, r3
 800e336:	b29a      	uxth	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	83da      	strh	r2, [r3, #30]
		FLTR_ApplyDebounce(&di->dbunce);													// use debounce filter
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	3318      	adds	r3, #24
 800e340:	4618      	mov	r0, r3
 800e342:	f000 fc5a 	bl	800ebfa <FLTR_ApplyDebounce>
	while(di->dbunce.counter <= di->dbunce.countMax && di->dbunce.finalState != di->dbunce.currentState){
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	8b1a      	ldrh	r2, [r3, #24]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	8b5b      	ldrh	r3, [r3, #26]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d805      	bhi.n	800e35e <DI_Read+0x64>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	8b9a      	ldrh	r2, [r3, #28]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	8bdb      	ldrh	r3, [r3, #30]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d1e0      	bne.n	800e320 <DI_Read+0x26>
	}
	/*Detect edge*/
	di->state = di->dbunce.finalState;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	8b9b      	ldrh	r3, [r3, #28]
 800e362:	b2da      	uxtb	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	DI_DetectEdge(di); 						// here state is the last state & final state is the present state
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff ff9a 	bl	800e2a4 <DI_DetectEdge>
//	if(di->lastState != di->state && di->config.mode == DI_MODE_NORMAL){
//		DI_StateChangecallback(di);
//	}

	di->lastState = di->state;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800e37c:	bf00      	nop
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <DI_Counter>:
/**
  * @brief  counter for the digital inputs, when inputs are set in counter mode
  * @param  dinp: digital input struct
  * @retval none
  */
void DI_Counter(DigitalIn_t *di){
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
	/* 1. check the counter type
	 * 2. check the counter trigger mode
	 * 3. check the up/down counter
	 * */
	//1> checking of counter type
	if(di->config.counterType == DI_COUNT_TYPE_NORMAL){										//counter in normal mode
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	795b      	ldrb	r3, [r3, #5]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d157      	bne.n	800e444 <DI_Counter+0xc0>
		DI_Read(di);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7ff ffb0 	bl	800e2fa <DI_Read>
		//2. checking the  counter trigger mode
		if(di->isTriggered){
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f000 80b6 	beq.w	800e512 <DI_Counter+0x18e>
			// check the trigger mode
			switch (di->config.trigMode) {
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	79db      	ldrb	r3, [r3, #7]
 800e3aa:	2b03      	cmp	r3, #3
 800e3ac:	d030      	beq.n	800e410 <DI_Counter+0x8c>
 800e3ae:	2b03      	cmp	r3, #3
 800e3b0:	dc3e      	bgt.n	800e430 <DI_Counter+0xac>
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d002      	beq.n	800e3bc <DI_Counter+0x38>
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d015      	beq.n	800e3e6 <DI_Counter+0x62>
					break;
				case DI_TRIG_MODE_RISING_FALLING:												// counter will count on rising & falling edge trigger
					di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--;
					break;
				default:
					break;
 800e3ba:	e039      	b.n	800e430 <DI_Counter+0xac>
					if(di->trigger == DI_TRIG_RISING)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d136      	bne.n	800e434 <DI_Counter+0xb0>
						(di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	799b      	ldrb	r3, [r3, #6]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d105      	bne.n	800e3da <DI_Counter+0x56>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d2:	1c5a      	adds	r2, r3, #1
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 800e3d8:	e02c      	b.n	800e434 <DI_Counter+0xb0>
						(di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3de:	1e5a      	subs	r2, r3, #1
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 800e3e4:	e026      	b.n	800e434 <DI_Counter+0xb0>
					if(di->trigger == DI_TRIG_FALLING)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e3ec:	2b02      	cmp	r3, #2
 800e3ee:	d123      	bne.n	800e438 <DI_Counter+0xb4>
						(di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	799b      	ldrb	r3, [r3, #6]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d105      	bne.n	800e404 <DI_Counter+0x80>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 800e402:	e019      	b.n	800e438 <DI_Counter+0xb4>
						(di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e408:	1e5a      	subs	r2, r3, #1
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 800e40e:	e013      	b.n	800e438 <DI_Counter+0xb4>
					di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	799b      	ldrb	r3, [r3, #6]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d105      	bne.n	800e424 <DI_Counter+0xa0>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e41c:	1c5a      	adds	r2, r3, #1
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 800e422:	e00a      	b.n	800e43a <DI_Counter+0xb6>
					di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e428:	1e5a      	subs	r2, r3, #1
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 800e42e:	e004      	b.n	800e43a <DI_Counter+0xb6>
					break;
 800e430:	bf00      	nop
 800e432:	e002      	b.n	800e43a <DI_Counter+0xb6>
					break;
 800e434:	bf00      	nop
 800e436:	e000      	b.n	800e43a <DI_Counter+0xb6>
					break;
 800e438:	bf00      	nop
			}
			di->isTriggered = 0;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			}
		}
	}else if(di->config.counterType == DI_COUNT_TYPE_TIMER){
		DI_CalculatePulse(di);
	}
}
 800e442:	e066      	b.n	800e512 <DI_Counter+0x18e>
	}else if (di->config.counterType == DI_COUNT_TYPE_EXTI){					//counter in interrupt mode
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	795b      	ldrb	r3, [r3, #5]
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d15b      	bne.n	800e504 <DI_Counter+0x180>
		if (di->dbunce.isInterrupt > 0U) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d05d      	beq.n	800e512 <DI_Counter+0x18e>
			di->dbunce.currentState = HAL_GPIO_ReadPin(di->config.port, di->config.pin);					// read the digital inputs
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	689a      	ldr	r2, [r3, #8]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	899b      	ldrh	r3, [r3, #12]
 800e45e:	4619      	mov	r1, r3
 800e460:	4610      	mov	r0, r2
 800e462:	f00d fc3f 	bl	801bce4 <HAL_GPIO_ReadPin>
 800e466:	4603      	mov	r3, r0
 800e468:	b29a      	uxth	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	83da      	strh	r2, [r3, #30]
			FLTR_ApplyDebounceExti(&di->dbunce);													// use debounce filter
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	3318      	adds	r3, #24
 800e472:	4618      	mov	r0, r3
 800e474:	f000 fc07 	bl	800ec86 <FLTR_ApplyDebounceExti>
			di->state = di->dbunce.finalState;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	8b9b      	ldrh	r3, [r3, #28]
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DI_DetectEdge(di);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f7ff ff0d 	bl	800e2a4 <DI_DetectEdge>
			di->lastState = di->state;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			if(di->dbunce.isInterrupt == 0U){										// isInterrupt is reseting in the FLTR_ApplyDebounceExti()  function
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d138      	bne.n	800e512 <DI_Counter+0x18e>
				if(di->isTriggered){
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d033      	beq.n	800e512 <DI_Counter+0x18e>
							if(di->trigger == DI_TRIG_RISING)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d10e      	bne.n	800e4d2 <DI_Counter+0x14e>
								(di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	799b      	ldrb	r3, [r3, #6]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d105      	bne.n	800e4c8 <DI_Counter+0x144>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c0:	1c5a      	adds	r2, r3, #1
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	629a      	str	r2, [r3, #40]	; 0x28
 800e4c6:	e004      	b.n	800e4d2 <DI_Counter+0x14e>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4cc:	1e5a      	subs	r2, r3, #1
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	629a      	str	r2, [r3, #40]	; 0x28
							if(di->trigger == DI_TRIG_FALLING)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d10e      	bne.n	800e4fa <DI_Counter+0x176>
								(di->config.countMode == DI_COUNT_MODE_UP ? di->count++ : di->count--);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	799b      	ldrb	r3, [r3, #6]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d105      	bne.n	800e4f0 <DI_Counter+0x16c>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e8:	1c5a      	adds	r2, r3, #1
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	629a      	str	r2, [r3, #40]	; 0x28
 800e4ee:	e004      	b.n	800e4fa <DI_Counter+0x176>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f4:	1e5a      	subs	r2, r3, #1
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	629a      	str	r2, [r3, #40]	; 0x28
					di->isTriggered = 0;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800e502:	e006      	b.n	800e512 <DI_Counter+0x18e>
	}else if(di->config.counterType == DI_COUNT_TYPE_TIMER){
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	795b      	ldrb	r3, [r3, #5]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d102      	bne.n	800e512 <DI_Counter+0x18e>
		DI_CalculatePulse(di);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7ff fe5b 	bl	800e1c8 <DI_CalculatePulse>
}
 800e512:	bf00      	nop
 800e514:	3708      	adds	r7, #8
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
	...

0800e51c <DI_AttachStateChangeCallback>:


void DI_AttachStateChangeCallback(void (*callbackFunc)(DigitalIn_t *di)){
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
	DI_StateChangecallback = callbackFunc;
 800e524:	4a04      	ldr	r2, [pc, #16]	; (800e538 <DI_AttachStateChangeCallback+0x1c>)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6013      	str	r3, [r2, #0]
}
 800e52a:	bf00      	nop
 800e52c:	370c      	adds	r7, #12
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	24005f44 	.word	0x24005f44

0800e53c <DI_AttachCounterExtiCallback>:


void DI_AttachCounterExtiCallback(void (*callbackFunc)(uint16_t pin)){
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
	DI_CounterExtiCallback = callbackFunc;
 800e544:	4a04      	ldr	r2, [pc, #16]	; (800e558 <DI_AttachCounterExtiCallback+0x1c>)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6013      	str	r3, [r2, #0]
}
 800e54a:	bf00      	nop
 800e54c:	370c      	adds	r7, #12
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	24005f48 	.word	0x24005f48

0800e55c <DI_CounterByExtI>:
/**
  * @brief  counter for the digital input using external interrupt
  * @param  dinp: digital input struct
  * @retval none
  */
void DI_CounterByExtI(DigitalIn_t *di){
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
	// check the trigger mode
//	di->dbunce.currentState = HAL_GPIO_ReadPin(di->config.port, di->config.pin);					// read the digital inputs
//	FLTR_ApplyDebounce(&di->dbunce);													// use debounce filter
//	di->state = di->dbunce.finalState;
	FLTR_StartDebounceExti(&di->dbunce);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	3318      	adds	r3, #24
 800e568:	4618      	mov	r0, r3
 800e56a:	f000 fb7f 	bl	800ec6c <FLTR_StartDebounceExti>
//	(di->config.countMode == DI_COUNT_MODE_UP ? di->counter++ : di->counter--);

}
 800e56e:	bf00      	nop
 800e570:	3708      	adds	r7, #8
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}

0800e576 <DO_Init>:
/**
  * @brief  Initializes the Digital out peripheral according to the specified parameters in the DO_Init.
  * @param  dout: pointer to a DigitalOut structure
  * @retval error status
  */
DO_Error DO_Init(DigitalOut_t *dout, uint32_t mode, uint32_t pull, uint32_t speed){
 800e576:	b5b0      	push	{r4, r5, r7, lr}
 800e578:	b08a      	sub	sp, #40	; 0x28
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	60f8      	str	r0, [r7, #12]
 800e57e:	60b9      	str	r1, [r7, #8]
 800e580:	607a      	str	r2, [r7, #4]
 800e582:	603b      	str	r3, [r7, #0]

	if(dout == NULL) return DO_ERR_NULL_POINTER;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d102      	bne.n	800e590 <DO_Init+0x1a>
 800e58a:	f04f 33ff 	mov.w	r3, #4294967295
 800e58e:	e02f      	b.n	800e5f0 <DO_Init+0x7a>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e590:	f107 0314 	add.w	r3, r7, #20
 800e594:	2200      	movs	r2, #0
 800e596:	601a      	str	r2, [r3, #0]
 800e598:	605a      	str	r2, [r3, #4]
 800e59a:	609a      	str	r2, [r3, #8]
 800e59c:	60da      	str	r2, [r3, #12]
 800e59e:	611a      	str	r2, [r3, #16]
	/*Initial state*/
	HAL_GPIO_WritePin(dout->port, dout->pin, GPIO_PIN_RESET);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	68d8      	ldr	r0, [r3, #12]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	8a1b      	ldrh	r3, [r3, #16]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	f00d fbb2 	bl	801bd14 <HAL_GPIO_WritePin>
	dout->pinInit = GPIO_InitStruct;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f103 0414 	add.w	r4, r3, #20
 800e5b6:	f107 0514 	add.w	r5, r7, #20
 800e5ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5be:	682b      	ldr	r3, [r5, #0]
 800e5c0:	6023      	str	r3, [r4, #0]
	/*Digital out Configure */
	dout->pinInit.Pin = dout->pin;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	8a1b      	ldrh	r3, [r3, #16]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	615a      	str	r2, [r3, #20]
	dout->pinInit.Mode = mode;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	619a      	str	r2, [r3, #24]
	dout->pinInit.Pull = pull;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	61da      	str	r2, [r3, #28]
	dout->pinInit.Speed = speed;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	621a      	str	r2, [r3, #32]
	HAL_GPIO_Init(dout->port, &dout->pinInit);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	68da      	ldr	r2, [r3, #12]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3314      	adds	r3, #20
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f00d f8d1 	bl	801b790 <HAL_GPIO_Init>
	return DO_ERR_NONE;
 800e5ee:	2300      	movs	r3, #0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3728      	adds	r7, #40	; 0x28
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bdb0      	pop	{r4, r5, r7, pc}

0800e5f8 <DO_Write>:
/**
  * @brief Write digital output
  * @param  dout: pointer to a DigitalOut structure
  * @retval none
  */
void DO_Write(DigitalOut_t *dout){
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dout->port, dout->pin, dout->state);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	68d8      	ldr	r0, [r3, #12]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	8a19      	ldrh	r1, [r3, #16]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	7a1b      	ldrb	r3, [r3, #8]
 800e60c:	461a      	mov	r2, r3
 800e60e:	f00d fb81 	bl	801bd14 <HAL_GPIO_WritePin>
}
 800e612:	bf00      	nop
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
	...

0800e61c <ENC_Config>:
/*Common functions-------------------*/


/*@brief Configs the encoder
 * */
void ENC_Config(Encoder *enc){
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]

	if(enc->enable == 0) return; // if not enable return from the function
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d06b      	beq.n	800e704 <ENC_Config+0xe8>

//	if(enc != NULL && enc->isChanged > 0){
//		enc->isChanged = 0;

		switch (enc->configs.mode) {
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	791b      	ldrb	r3, [r3, #4]
 800e630:	2b03      	cmp	r3, #3
 800e632:	d869      	bhi.n	800e708 <ENC_Config+0xec>
 800e634:	a201      	add	r2, pc, #4	; (adr r2, 800e63c <ENC_Config+0x20>)
 800e636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63a:	bf00      	nop
 800e63c:	0800e64d 	.word	0x0800e64d
 800e640:	0800e695 	.word	0x0800e695
 800e644:	0800e6b7 	.word	0x0800e6b7
 800e648:	0800e6d9 	.word	0x0800e6d9
			case ENC_MODE_QUAD:
				{

					// deinit gpio for encoder channel A, B & Z
					HAL_GPIO_DeInit(enc->configs.channelA.port, enc->configs.channelA.pin);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e654:	4619      	mov	r1, r3
 800e656:	4610      	mov	r0, r2
 800e658:	f00d fa42 	bl	801bae0 <HAL_GPIO_DeInit>
					HAL_GPIO_DeInit(enc->configs.channelB.port, enc->configs.channelB.pin);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f00d fa3a 	bl	801bae0 <HAL_GPIO_DeInit>
					HAL_GPIO_DeInit(enc->configs.channelZ.port, enc->configs.channelZ.pin);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e674:	4619      	mov	r1, r3
 800e676:	4610      	mov	r0, r2
 800e678:	f00d fa32 	bl	801bae0 <HAL_GPIO_DeInit>

					// config timers for quadrature encoder with channel A & B
					ENC_ConfigQuad(enc);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f847 	bl	800e710 <ENC_ConfigQuad>

					// config channel Z for quadrature home position
					DI_ConfigInceExtI(&enc->configs.channelZ);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	3334      	adds	r3, #52	; 0x34
 800e686:	4618      	mov	r0, r3
 800e688:	f000 f98f 	bl	800e9aa <DI_ConfigInceExtI>
					enc->counterZ = 0;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	669a      	str	r2, [r3, #104]	; 0x68
				}
				break;
 800e692:	e03a      	b.n	800e70a <ENC_Config+0xee>
			case ENC_MODE_INCRE_CHA:
				HAL_TIM_Encoder_Stop(enc->configs.quadrature.timer, TIM_CHANNEL_ALL);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	213c      	movs	r1, #60	; 0x3c
 800e69a:	4618      	mov	r0, r3
 800e69c:	f014 ff78 	bl	8023590 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_DeInit(enc->configs.quadrature.timer);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f014 fe8d 	bl	80233c4 <HAL_TIM_Encoder_DeInit>
				DI_ConfigInceExtI(&enc->configs.channelA);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	3340      	adds	r3, #64	; 0x40
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f000 f97b 	bl	800e9aa <DI_ConfigInceExtI>
				break;
 800e6b4:	e029      	b.n	800e70a <ENC_Config+0xee>
			case ENC_MODE_INCRE_CHB:
				HAL_TIM_Encoder_Stop(enc->configs.quadrature.timer, TIM_CHANNEL_ALL);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	213c      	movs	r1, #60	; 0x3c
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f014 ff67 	bl	8023590 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_DeInit(enc->configs.quadrature.timer);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	689b      	ldr	r3, [r3, #8]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f014 fe7c 	bl	80233c4 <HAL_TIM_Encoder_DeInit>
				DI_ConfigInceExtI(&enc->configs.channelB);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	334c      	adds	r3, #76	; 0x4c
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f000 f96a 	bl	800e9aa <DI_ConfigInceExtI>
				break;
 800e6d6:	e018      	b.n	800e70a <ENC_Config+0xee>
			case ENC_MODE_INCRE_CHAB:
				HAL_TIM_Encoder_Stop(enc->configs.quadrature.timer, TIM_CHANNEL_ALL);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	213c      	movs	r1, #60	; 0x3c
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f014 ff56 	bl	8023590 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_DeInit(enc->configs.quadrature.timer);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	689b      	ldr	r3, [r3, #8]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f014 fe6b 	bl	80233c4 <HAL_TIM_Encoder_DeInit>
				DI_ConfigInceExtI(&enc->configs.channelA);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	3340      	adds	r3, #64	; 0x40
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f000 f959 	bl	800e9aa <DI_ConfigInceExtI>
				DI_ConfigInceExtI(&enc->configs.channelB);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	334c      	adds	r3, #76	; 0x4c
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f000 f954 	bl	800e9aa <DI_ConfigInceExtI>
				break;
 800e702:	e002      	b.n	800e70a <ENC_Config+0xee>
	if(enc->enable == 0) return; // if not enable return from the function
 800e704:	bf00      	nop
 800e706:	e000      	b.n	800e70a <ENC_Config+0xee>
			default:
				break;
 800e708:	bf00      	nop
		}
//	}

}
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <ENC_ConfigQuad>:
void ENC_CalcPPR(Encoder *enc);


/*Quadrature encoder functions----------------------------*/

static void ENC_ConfigQuad(Encoder *enc){
 800e710:	b5b0      	push	{r4, r5, r7, lr}
 800e712:	b096      	sub	sp, #88	; 0x58
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
	// stop the encoder before changing the configuration
	HAL_TIM_Encoder_Stop(enc->configs.quadrature.timer, TIM_CHANNEL_ALL);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	689b      	ldr	r3, [r3, #8]
 800e71c:	213c      	movs	r1, #60	; 0x3c
 800e71e:	4618      	mov	r0, r3
 800e720:	f014 ff36 	bl	8023590 <HAL_TIM_Encoder_Stop>

	HAL_TIM_Base_DeInit(enc->configs.quadrature.timer);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	4618      	mov	r0, r3
 800e72a:	f013 ffcb 	bl	80226c4 <HAL_TIM_Base_DeInit>
	HAL_TIM_IC_DeInit(enc->configs.quadrature.timer);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	4618      	mov	r0, r3
 800e734:	f014 fb13 	bl	8022d5e <HAL_TIM_IC_DeInit>

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e738:	4b57      	ldr	r3, [pc, #348]	; (800e898 <ENC_ConfigQuad+0x188>)
 800e73a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e73e:	4a56      	ldr	r2, [pc, #344]	; (800e898 <ENC_ConfigQuad+0x188>)
 800e740:	f043 0301 	orr.w	r3, r3, #1
 800e744:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e748:	4b53      	ldr	r3, [pc, #332]	; (800e898 <ENC_ConfigQuad+0x188>)
 800e74a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	613b      	str	r3, [r7, #16]
 800e754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e756:	4b50      	ldr	r3, [pc, #320]	; (800e898 <ENC_ConfigQuad+0x188>)
 800e758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e75c:	4a4e      	ldr	r2, [pc, #312]	; (800e898 <ENC_ConfigQuad+0x188>)
 800e75e:	f043 0301 	orr.w	r3, r3, #1
 800e762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e766:	4b4c      	ldr	r3, [pc, #304]	; (800e898 <ENC_ConfigQuad+0x188>)
 800e768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e76c:	f003 0301 	and.w	r3, r3, #1
 800e770:	60fb      	str	r3, [r7, #12]
 800e772:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e774:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e778:	2200      	movs	r2, #0
 800e77a:	601a      	str	r2, [r3, #0]
 800e77c:	605a      	str	r2, [r3, #4]
 800e77e:	609a      	str	r2, [r3, #8]
 800e780:	60da      	str	r2, [r3, #12]
 800e782:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DI_1_ENC_A_Pin|DI_2_ENC_B_Pin;
 800e784:	23c0      	movs	r3, #192	; 0xc0
 800e786:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e788:	2302      	movs	r3, #2
 800e78a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e78c:	2300      	movs	r3, #0
 800e78e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e790:	2300      	movs	r3, #0
 800e792:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e794:	2301      	movs	r3, #1
 800e796:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e798:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e79c:	4619      	mov	r1, r3
 800e79e:	483f      	ldr	r0, [pc, #252]	; (800e89c <ENC_ConfigQuad+0x18c>)
 800e7a0:	f00c fff6 	bl	801b790 <HAL_GPIO_Init>


	TIM_Encoder_InitTypeDef sConfig = {0};
 800e7a4:	f107 0320 	add.w	r3, r7, #32
 800e7a8:	2224      	movs	r2, #36	; 0x24
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f017 ffc1 	bl	8026734 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e7b2:	f107 0314 	add.w	r3, r7, #20
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	601a      	str	r2, [r3, #0]
 800e7ba:	605a      	str	r2, [r3, #4]
 800e7bc:	609a      	str	r2, [r3, #8]

	enc->configs.quadrature.timer->Instance = TIM2;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e7c6:	601a      	str	r2, [r3, #0]
	enc->configs.quadrature.timer->Init.Prescaler = 0;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	605a      	str	r2, [r3, #4]
	enc->configs.quadrature.timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	609a      	str	r2, [r3, #8]
	enc->configs.quadrature.timer->Init.Period = ENC_QUAD_MAX_TIM_PERIOD;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e0:	60da      	str	r2, [r3, #12]
	enc->configs.quadrature.timer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	611a      	str	r2, [r3, #16]
	enc->configs.quadrature.timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	619a      	str	r2, [r3, #24]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	623b      	str	r3, [r7, #32]
	sConfig.IC1Polarity = enc->configs.quadrature.trigMode == ENC_TRIG_MODE_RISING ? TIM_ICPOLARITY_RISING : TIM_ICPOLARITY_FALLING;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d101      	bne.n	800e804 <ENC_ConfigQuad+0xf4>
 800e800:	2300      	movs	r3, #0
 800e802:	e000      	b.n	800e806 <ENC_ConfigQuad+0xf6>
 800e804:	2302      	movs	r3, #2
 800e806:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e808:	2301      	movs	r3, #1
 800e80a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e80c:	2300      	movs	r3, #0
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC1Filter = 0;
 800e810:	2300      	movs	r3, #0
 800e812:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Polarity = enc->configs.quadrature.trigMode == ENC_TRIG_MODE_RISING ? TIM_ICPOLARITY_RISING : TIM_ICPOLARITY_FALLING;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d101      	bne.n	800e822 <ENC_ConfigQuad+0x112>
 800e81e:	2300      	movs	r3, #0
 800e820:	e000      	b.n	800e824 <ENC_ConfigQuad+0x114>
 800e822:	2302      	movs	r3, #2
 800e824:	637b      	str	r3, [r7, #52]	; 0x34
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e826:	2301      	movs	r3, #1
 800e828:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e82a:	2300      	movs	r3, #0
 800e82c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfig.IC2Filter = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	643b      	str	r3, [r7, #64]	; 0x40
	enc->configs.quadrature.timerConfig = sConfig;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f103 040c 	add.w	r4, r3, #12
 800e838:	f107 0520 	add.w	r5, r7, #32
 800e83c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e83e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	6023      	str	r3, [r4, #0]
	if (HAL_TIM_Encoder_Init(enc->configs.quadrature.timer, &enc->configs.quadrature.timerConfig) != HAL_OK)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	689a      	ldr	r2, [r3, #8]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	330c      	adds	r3, #12
 800e850:	4619      	mov	r1, r3
 800e852:	4610      	mov	r0, r2
 800e854:	f014 fd10 	bl	8023278 <HAL_TIM_Encoder_Init>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <ENC_ConfigQuad+0x152>
	{
		Error_Handler();
 800e85e:	f7fd fd0b 	bl	800c278 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e862:	2300      	movs	r3, #0
 800e864:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e866:	2300      	movs	r3, #0
 800e868:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(enc->configs.quadrature.timer, &sMasterConfig) != HAL_OK)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f107 0214 	add.w	r2, r7, #20
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f015 ff51 	bl	802471c <HAL_TIMEx_MasterConfigSynchronization>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <ENC_ConfigQuad+0x174>
	{
		Error_Handler();
 800e880:	f7fd fcfa 	bl	800c278 <Error_Handler>
	}
	// start the encoder after changing the configuration
	HAL_TIM_Encoder_Start(enc->configs.quadrature.timer, TIM_CHANNEL_ALL);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	213c      	movs	r1, #60	; 0x3c
 800e88a:	4618      	mov	r0, r3
 800e88c:	f014 fdf2 	bl	8023474 <HAL_TIM_Encoder_Start>

}
 800e890:	bf00      	nop
 800e892:	3758      	adds	r7, #88	; 0x58
 800e894:	46bd      	mov	sp, r7
 800e896:	bdb0      	pop	{r4, r5, r7, pc}
 800e898:	58024400 	.word	0x58024400
 800e89c:	58020000 	.word	0x58020000

0800e8a0 <ENC_ReadQuad>:

/**
  * @brief Read quadrature encoder value
  */
void ENC_ReadQuad(Encoder *enc){
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
	if(enc->enable > 0 && enc->configs.mode == ENC_MODE_QUAD){
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d048      	beq.n	800e942 <ENC_ReadQuad+0xa2>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	791b      	ldrb	r3, [r3, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d144      	bne.n	800e942 <ENC_ReadQuad+0xa2>
		enc->counterQuad = __HAL_TIM_GET_COUNTER(enc->configs.quadrature.timer);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	65da      	str	r2, [r3, #92]	; 0x5c

		ENC_GetDirQuad(enc);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f84e 	bl	800e968 <ENC_GetDirQuad>
		if( (enc->direction == ENC_DIR_CW && enc->lastCountQuad > 0) &&
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d115      	bne.n	800e902 <ENC_ReadQuad+0x62>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	dd10      	ble.n	800e902 <ENC_ReadQuad+0x62>
			(enc->counterQuad >= (int32_t)(ENC_QUAD_MIN_COUNT-1) && enc->counterQuad < (int16_t)(0)) )
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
		if( (enc->direction == ENC_DIR_CW && enc->lastCountQuad > 0) &&
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	da0c      	bge.n	800e902 <ENC_ReadQuad+0x62>
		{
			enc->counterQuad = enc->counterQuad&ENC_QUAD_MAX_COUNT;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	65da      	str	r2, [r3, #92]	; 0x5c
			__HAL_TIM_SET_COUNTER(enc->configs.quadrature.timer, enc->counterQuad);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	625a      	str	r2, [r3, #36]	; 0x24
 800e900:	e019      	b.n	800e936 <ENC_ReadQuad+0x96>
		}else if((enc->direction == ENC_DIR_CCW && enc->lastCountQuad < 0) &&
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d114      	bne.n	800e936 <ENC_ReadQuad+0x96>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e912:	2b00      	cmp	r3, #0
 800e914:	da0f      	bge.n	800e936 <ENC_ReadQuad+0x96>
				(enc->counterQuad > (int32_t)(0) && enc->counterQuad <= (int32_t)(ENC_QUAD_MAX_COUNT))){
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
		}else if((enc->direction == ENC_DIR_CCW && enc->lastCountQuad < 0) &&
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	dd0b      	ble.n	800e936 <ENC_ReadQuad+0x96>
			enc->counterQuad = (enc->counterQuad - ENC_QUAD_MAX_COUNT );
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e922:	4b10      	ldr	r3, [pc, #64]	; (800e964 <ENC_ReadQuad+0xc4>)
 800e924:	4413      	add	r3, r2
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	65d3      	str	r3, [r2, #92]	; 0x5c
			__HAL_TIM_SET_COUNTER(enc->configs.quadrature.timer, enc->counterQuad);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	625a      	str	r2, [r3, #36]	; 0x24
		}
		enc->lastCountQuad = enc->counterQuad;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800e940:	e00b      	b.n	800e95a <ENC_ReadQuad+0xba>
//		DEBUG_SPRINT_NL("CuntA: %u, GetA: %u",enc->counterQuad , __HAL_TIM_GET_COUNTER(enc->configs.quadrature.timer));
	}else{
		enc->counterQuad = 0;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	65da      	str	r2, [r3, #92]	; 0x5c
		enc->lastCountQuad = 0;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		enc->direction = 0;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
}
 800e958:	bf00      	nop
 800e95a:	bf00      	nop
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	80000001 	.word	0x80000001

0800e968 <ENC_GetDirQuad>:
 * 0 = no rotation
 * 1 = CW rotation
 * 2 = CCW rotation
 *
 */
void ENC_GetDirQuad(Encoder *enc){
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
	if(enc->enable > 0 && enc->configs.mode == ENC_MODE_QUAD){
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d012      	beq.n	800e99e <ENC_GetDirQuad+0x36>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	791b      	ldrb	r3, [r3, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10e      	bne.n	800e99e <ENC_GetDirQuad+0x36>
		enc->direction = ((enc->configs.quadrature.timer->Instance->CR1 & TIM_CR1_DIR)>0);		// CW dir = 0, and CCW dir = 1
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f003 0310 	and.w	r3, r3, #16
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	bf14      	ite	ne
 800e990:	2301      	movne	r3, #1
 800e992:	2300      	moveq	r3, #0
 800e994:	b2db      	uxtb	r3, r3
 800e996:	461a      	mov	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
}
 800e99e:	bf00      	nop
 800e9a0:	370c      	adds	r7, #12
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <DI_ConfigInceExtI>:
/**
  * @brief  configs external interrupt for incremental encoder
  * @param  encIcre: encoder config struct
  * @retval none
  */
void DI_ConfigInceExtI(ENC_ConfigIncre *encIcre){
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b088      	sub	sp, #32
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9b2:	f107 030c 	add.w	r3, r7, #12
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	601a      	str	r2, [r3, #0]
 800e9ba:	605a      	str	r2, [r3, #4]
 800e9bc:	609a      	str	r2, [r3, #8]
 800e9be:	60da      	str	r2, [r3, #12]
 800e9c0:	611a      	str	r2, [r3, #16]


	HAL_GPIO_DeInit(encIcre->port, encIcre->pin);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	f00d f887 	bl	801bae0 <HAL_GPIO_DeInit>
	switch (encIcre->trigMode) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	7a9b      	ldrb	r3, [r3, #10]
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d00e      	beq.n	800e9f8 <DI_ConfigInceExtI+0x4e>
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	dc10      	bgt.n	800ea00 <DI_ConfigInceExtI+0x56>
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <DI_ConfigInceExtI+0x3e>
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d004      	beq.n	800e9f0 <DI_ConfigInceExtI+0x46>
		case ENC_TRIG_MODE_RISING_FALLING:
			GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
			break;
		default:				// for others

			break;
 800e9e6:	e00b      	b.n	800ea00 <DI_ConfigInceExtI+0x56>
			GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e9e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e9ec:	613b      	str	r3, [r7, #16]
			break;
 800e9ee:	e008      	b.n	800ea02 <DI_ConfigInceExtI+0x58>
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800e9f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800e9f4:	613b      	str	r3, [r7, #16]
			break;
 800e9f6:	e004      	b.n	800ea02 <DI_ConfigInceExtI+0x58>
			GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800e9f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800e9fc:	613b      	str	r3, [r7, #16]
			break;
 800e9fe:	e000      	b.n	800ea02 <DI_ConfigInceExtI+0x58>
			break;
 800ea00:	bf00      	nop
	}

	GPIO_InitStruct.Pin = encIcre->pin;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(encIcre->port, &GPIO_InitStruct);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f107 020c 	add.w	r2, r7, #12
 800ea14:	4611      	mov	r1, r2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f00c feba 	bl	801b790 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(encIcre->intrpt, 0, ENC_INCRE_EXTI_PRIORITY);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea22:	2201      	movs	r2, #1
 800ea24:	2100      	movs	r1, #0
 800ea26:	4618      	mov	r0, r3
 800ea28:	f009 fe4b 	bl	80186c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(encIcre->intrpt);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f009 fe5f 	bl	80186f6 <HAL_NVIC_EnableIRQ>



}
 800ea38:	bf00      	nop
 800ea3a:	3720      	adds	r7, #32
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <ENC_ReadChA>:


/**
  * @brief Read incremental encoder Channel A
  */
void ENC_ReadChA(Encoder *enc){
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
	if(enc->enable > 0){
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00b      	beq.n	800ea68 <ENC_ReadChA+0x28>
		if(enc->configs.mode & ENC_MODE_INCRE_CHA){	enc->counterA ++;}
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	791b      	ldrb	r3, [r3, #4]
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d008      	beq.n	800ea6e <ENC_ReadChA+0x2e>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea60:	1c5a      	adds	r2, r3, #1
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	661a      	str	r2, [r3, #96]	; 0x60
	}else{
		enc->counterA = 0;
	}
}
 800ea66:	e002      	b.n	800ea6e <ENC_ReadChA+0x2e>
		enc->counterA = 0;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ea6e:	bf00      	nop
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr

0800ea7a <ENC_ReadChB>:


/**
  * @brief Read incremental encoder Channel B
  */
void ENC_ReadChB(Encoder *enc){
 800ea7a:	b480      	push	{r7}
 800ea7c:	b083      	sub	sp, #12
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
	if(enc->enable > 0){
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00b      	beq.n	800eaa2 <ENC_ReadChB+0x28>
	if(enc->configs.mode & ENC_MODE_INCRE_CHB){	enc->counterB ++;}
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	791b      	ldrb	r3, [r3, #4]
 800ea8e:	f003 0302 	and.w	r3, r3, #2
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d008      	beq.n	800eaa8 <ENC_ReadChB+0x2e>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea9a:	1c5a      	adds	r2, r3, #1
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	665a      	str	r2, [r3, #100]	; 0x64
	}else{
		enc->counterB = 0;
	}
}
 800eaa0:	e002      	b.n	800eaa8 <ENC_ReadChB+0x2e>
		enc->counterB = 0;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	665a      	str	r2, [r3, #100]	; 0x64
}
 800eaa8:	bf00      	nop
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <FLTR_ApplyMedian>:
/**
  * @brief  Median filter
  * @param  mParams: median parameters
  * @retval filtered value
  */
void FLTR_ApplyMedian(FLTR_Median *mParams){
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b08c      	sub	sp, #48	; 0x30
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
	//TODO: to implement Median filter
	unsigned int wBuffer[FLTR_MED_WINDOW_SIZE];
	mParams->window[mParams->position++] = mParams->nextValue;					// set the new sample to the window buffer
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eac6:	1c5a      	adds	r2, r3, #1
 800eac8:	b2d0      	uxtb	r0, r2
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
 800ead0:	461a      	mov	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	memcpy(wBuffer, mParams->window, FLTR_MED_WINDOW_SIZE*sizeof(wBuffer[0]));		// copy the samples from the window buffer to the local buffer
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	f107 030c 	add.w	r3, r7, #12
 800eade:	2224      	movs	r2, #36	; 0x24
 800eae0:	4618      	mov	r0, r3
 800eae2:	f017 fe19 	bl	8026718 <memcpy>
	qsort(wBuffer, FLTR_MED_WINDOW_SIZE, sizeof(wBuffer[0]), CompFunc);				// Arrange the local buffer elements in ascending order
 800eae6:	f107 000c 	add.w	r0, r7, #12
 800eaea:	4b0b      	ldr	r3, [pc, #44]	; (800eb18 <FLTR_ApplyMedian+0x64>)
 800eaec:	2204      	movs	r2, #4
 800eaee:	2109      	movs	r1, #9
 800eaf0:	f018 fb5d 	bl	80271ae <qsort>
	if(mParams->position >= FLTR_MED_WINDOW_SIZE)	mParams->position = 0;			// if window buffer is full, set the position to zero for adding new sample to the buffer
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eafa:	2b08      	cmp	r3, #8
 800eafc:	d903      	bls.n	800eb06 <FLTR_ApplyMedian+0x52>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2200      	movs	r2, #0
 800eb02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mParams->value = wBuffer[((FLTR_MED_WINDOW_SIZE-1U)/2U)];									// getting the center value of the buffer and return
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800eb0e:	bf00      	nop
 800eb10:	3730      	adds	r7, #48	; 0x30
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	0800ecdd 	.word	0x0800ecdd

0800eb1c <FLTR_ApplyMovAvg>:
/**
  * @brief  Moving Average filter
  * @param  maParams: Moving average parameters
  * @retval filtered value
  */
void FLTR_ApplyMovAvg(FLTR_MovingAverage *maParams){
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
	maParams->sum = maParams->sum - maParams->window[maParams->position] + maParams->nextValue;		// add the new value and subtract the old value from the sum of the elements
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb2e:	4619      	mov	r1, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800eb3c:	441a      	add	r2, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	62da      	str	r2, [r3, #44]	; 0x2c
	maParams->window[maParams->position++] = maParams->nextValue;									// set the new sample to the window buffer
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb4c:	1c5a      	adds	r2, r3, #1
 800eb4e:	b2d0      	uxtb	r0, r2
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
 800eb56:	461a      	mov	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(maParams->position >= FLTR_MOV_WINDOW_SIZE)	maParams->position = 0;								// if window buffer is full, set the position to zero for adding new sample to the buffer
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb64:	2b08      	cmp	r3, #8
 800eb66:	d903      	bls.n	800eb70 <FLTR_ApplyMovAvg+0x54>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	maParams->value = maParams->sum/FLTR_MOV_WINDOW_SIZE;//(uint16_t)ceil((float)maParams->sum/(float)FLTR_MOV_WINDOW_SIZE);															// calculate the average and return
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb74:	4a06      	ldr	r2, [pc, #24]	; (800eb90 <FLTR_ApplyMovAvg+0x74>)
 800eb76:	fba2 2303 	umull	r2, r3, r2, r3
 800eb7a:	085b      	lsrs	r3, r3, #1
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800eb82:	bf00      	nop
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	38e38e39 	.word	0x38e38e39

0800eb94 <FLTR_ClearMedian>:
/**
  * @brief  Clears median filter
  * @param  mParams: median filter parameters
  * @retvalnone
  */
void FLTR_ClearMedian(FLTR_Median *mParams){
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
	mParams->value = 0;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	849a      	strh	r2, [r3, #36]	; 0x24
	mParams->nextValue = 0;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	84da      	strh	r2, [r3, #38]	; 0x26
	mParams->position = 0;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	memset(mParams->window, 0, FLTR_MED_WINDOW_SIZE*sizeof(mParams->window[0]));
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2224      	movs	r2, #36	; 0x24
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f017 fdbc 	bl	8026734 <memset>
}
 800ebbc:	bf00      	nop
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <FLTR_ClearMovAvg>:
/**
  * @brief  Clears moving average filter
  * @param  mParams: moving average filter parameters
  * @retvalnone
  */
void FLTR_ClearMovAvg(FLTR_MovingAverage *maParams){
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
	maParams->value = 0;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	849a      	strh	r2, [r3, #36]	; 0x24
	maParams->nextValue = 0;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	84da      	strh	r2, [r3, #38]	; 0x26
	maParams->position = 0;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	maParams->sum = 0;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	62da      	str	r2, [r3, #44]	; 0x2c
	memset(maParams->window, 0, FLTR_MOV_WINDOW_SIZE*sizeof(maParams->window[0]));
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2224      	movs	r2, #36	; 0x24
 800ebea:	2100      	movs	r1, #0
 800ebec:	4618      	mov	r0, r3
 800ebee:	f017 fda1 	bl	8026734 <memset>
}
 800ebf2:	bf00      	nop
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <FLTR_ApplyDebounce>:
/**
  * @brief  debounce filter to remove the bounce of the digital inputs
  * @param  debounce: debounce filter struct
  * @retval none
  */
uint8_t FLTR_ApplyDebounce(FLTR_Debounce *debounce){
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]

	if((debounce->finalState == debounce->currentState) && (debounce->counter > 0U)){
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	889a      	ldrh	r2, [r3, #4]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	88db      	ldrh	r3, [r3, #6]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d109      	bne.n	800ec22 <FLTR_ApplyDebounce+0x28>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	881b      	ldrh	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d005      	beq.n	800ec22 <FLTR_ApplyDebounce+0x28>
		debounce->counter --;											// resets the bounce counter if the input state is not changed
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	801a      	strh	r2, [r3, #0]
	}
	if(debounce->finalState != debounce->currentState){
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	889a      	ldrh	r2, [r3, #4]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	88db      	ldrh	r3, [r3, #6]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d005      	beq.n	800ec3a <FLTR_ApplyDebounce+0x40>
		debounce->counter++;												// increments the bounce counter value if the input state is changed
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	3301      	adds	r3, #1
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	801a      	strh	r2, [r3, #0]
	}

	if(debounce->counter >= debounce->countMax){						// if debounce counter is exceed the max limit
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	881a      	ldrh	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	885b      	ldrh	r3, [r3, #2]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d30b      	bcc.n	800ec5e <FLTR_ApplyDebounce+0x64>
		debounce->isInterrupt = 0U;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	721a      	strb	r2, [r3, #8]
		debounce->counter = 0U;											// reset the counter
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	801a      	strh	r2, [r3, #0]
		debounce->finalState = debounce->currentState;										// update the last state variable
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	88da      	ldrh	r2, [r3, #6]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	809a      	strh	r2, [r3, #4]
		return 1U;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e000      	b.n	800ec60 <FLTR_ApplyDebounce+0x66>
	}
	return 0U;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <FLTR_StartDebounceExti>:


void FLTR_StartDebounceExti(FLTR_Debounce *debounce){
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
	debounce->isInterrupt = 1U;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	721a      	strb	r2, [r3, #8]
}
 800ec7a:	bf00      	nop
 800ec7c:	370c      	adds	r7, #12
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr

0800ec86 <FLTR_ApplyDebounceExti>:
/**
  * @brief  debounce filter for external interrupt
  * @param  debounce: debounce filter struct
  * @retval none
  */
uint8_t FLTR_ApplyDebounceExti(FLTR_Debounce *debounce){
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b082      	sub	sp, #8
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
	if(debounce->isInterrupt > 0U){
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	7a1b      	ldrb	r3, [r3, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d004      	beq.n	800eca0 <FLTR_ApplyDebounceExti+0x1a>
		return FLTR_ApplyDebounce(debounce);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff ffaf 	bl	800ebfa <FLTR_ApplyDebounce>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	e000      	b.n	800eca2 <FLTR_ApplyDebounceExti+0x1c>
	}
	return 0U;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <FLTR_ClearDebounce>:
/**
  * @brief  clear debounce filter parameter
  * @param  debounce: debounce filter struct
  * @retval none
  */
void FLTR_ClearDebounce(FLTR_Debounce *debounce){
 800ecaa:	b480      	push	{r7}
 800ecac:	b083      	sub	sp, #12
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
	debounce->counter = 0;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	801a      	strh	r2, [r3, #0]
	debounce->countMax = 0;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	805a      	strh	r2, [r3, #2]
	debounce->currentState = 0;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	80da      	strh	r2, [r3, #6]
	debounce->finalState = 0;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	809a      	strh	r2, [r3, #4]
	debounce->isInterrupt = 0U;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	721a      	strb	r2, [r3, #8]
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <CompFunc>:
/**
  * @brief  compare to numbers
  * @param a,b: two numbers
  * @retval return value can be positive or negative, if positive a is grater else b is grater
  */
int CompFunc (const void * a, const void * b) {
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
   return ( *(int*)a - *(int*)b );
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	1ad3      	subs	r3, r2, r3
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <IOL_Timer_AttachTimeSourceCallback>:
}


/* @brief Attach the time source callback function for the timer
 * */
void IOL_Timer_AttachTimeSourceCallback(uint64_t (*callback)(void)){
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
	timeSourceCB = callback;
 800ed04:	4a04      	ldr	r2, [pc, #16]	; (800ed18 <IOL_Timer_AttachTimeSourceCallback+0x1c>)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6013      	str	r3, [r2, #0]
}
 800ed0a:	bf00      	nop
 800ed0c:	370c      	adds	r7, #12
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	24005f54 	.word	0x24005f54

0800ed1c <L6360_I2CReadStatusParity>:
/**
  * @brief  reads status register
  * @param  l6360: pointer to the struct
  * @retval error status/ or value
  */
L6360_Status L6360_I2CReadStatusParity(L6360_IOLink_hw_t* l6360, uint8_t *status, uint8_t* parity){
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b088      	sub	sp, #32
 800ed20:	af02      	add	r7, sp, #8
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	607a      	str	r2, [r7, #4]
	L6360_Status statusRet = L6360_OK;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	75fb      	strb	r3, [r7, #23]
	uint8_t data[2] = {0};
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	823b      	strh	r3, [r7, #16]
	uint8_t devAddress = l6360->i2c.devAddress;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800ed36:	757b      	strb	r3, [r7, #21]
	data[0] = L6360_I2C_REG_ADDR_STATUS;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	743b      	strb	r3, [r7, #16]

	if(CHECK_NULL_POINTER(l6360) || CHECK_NULL_POINTER(status)|| CHECK_NULL_POINTER(parity) || CHECK_NULL_POINTER(l6360->i2c.hi2c)){
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00a      	beq.n	800ed58 <L6360_I2CReadStatusParity+0x3c>
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d007      	beq.n	800ed58 <L6360_I2CReadStatusParity+0x3c>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d004      	beq.n	800ed58 <L6360_I2CReadStatusParity+0x3c>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f8d3 314f 	ldr.w	r3, [r3, #335]	; 0x14f
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d101      	bne.n	800ed5c <L6360_I2CReadStatusParity+0x40>
		return L6360_NULL_PTR_PARAM;
 800ed58:	230a      	movs	r3, #10
 800ed5a:	e054      	b.n	800ee06 <L6360_I2CReadStatusParity+0xea>
	}else if(!L6360_CHECK_I2C_ADDR(devAddress)){
 800ed5c:	7d7b      	ldrb	r3, [r7, #21]
 800ed5e:	2bc2      	cmp	r3, #194	; 0xc2
 800ed60:	d00a      	beq.n	800ed78 <L6360_I2CReadStatusParity+0x5c>
 800ed62:	7d7b      	ldrb	r3, [r7, #21]
 800ed64:	2bc6      	cmp	r3, #198	; 0xc6
 800ed66:	d007      	beq.n	800ed78 <L6360_I2CReadStatusParity+0x5c>
 800ed68:	7d7b      	ldrb	r3, [r7, #21]
 800ed6a:	2bc4      	cmp	r3, #196	; 0xc4
 800ed6c:	d004      	beq.n	800ed78 <L6360_I2CReadStatusParity+0x5c>
 800ed6e:	7d7b      	ldrb	r3, [r7, #21]
 800ed70:	2bc8      	cmp	r3, #200	; 0xc8
 800ed72:	d001      	beq.n	800ed78 <L6360_I2CReadStatusParity+0x5c>
		return L6360_INVALID_DEV_ADDRESS;
 800ed74:	2306      	movs	r3, #6
 800ed76:	e046      	b.n	800ee06 <L6360_I2CReadStatusParity+0xea>
	}

	/*Check and lock the process*/
	L6360_LOCK(l6360->i2c);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d101      	bne.n	800ed86 <L6360_I2CReadStatusParity+0x6a>
 800ed82:	2302      	movs	r3, #2
 800ed84:	e03f      	b.n	800ee06 <L6360_I2CReadStatusParity+0xea>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142

	/*send register address 1st*/
#ifdef L6360_MCU_STM32XXX
	HAL_StatusTypeDef errStatus = HAL_I2C_Master_Transmit(l6360->i2c.hi2c, devAddress ,  data, 1, 2);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f8d3 014f 	ldr.w	r0, [r3, #335]	; 0x14f
 800ed94:	7d7b      	ldrb	r3, [r7, #21]
 800ed96:	b299      	uxth	r1, r3
 800ed98:	f107 0210 	add.w	r2, r7, #16
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	2301      	movs	r3, #1
 800eda2:	f00d f895 	bl	801bed0 <HAL_I2C_Master_Transmit>
 800eda6:	4603      	mov	r3, r0
 800eda8:	75bb      	strb	r3, [r7, #22]
	if(errStatus == HAL_OK){
 800edaa:	7dbb      	ldrb	r3, [r7, #22]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d112      	bne.n	800edd6 <L6360_I2CReadStatusParity+0xba>
		/*receive data*/
		data[0] = 0;
 800edb0:	2300      	movs	r3, #0
 800edb2:	743b      	strb	r3, [r7, #16]
		errStatus = HAL_I2C_Master_Receive(l6360->i2c.hi2c, (devAddress | L6360_RW_MODE_READ), data, 2, 3);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8d3 014f 	ldr.w	r0, [r3, #335]	; 0x14f
 800edba:	7d7b      	ldrb	r3, [r7, #21]
 800edbc:	f043 0301 	orr.w	r3, r3, #1
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	b299      	uxth	r1, r3
 800edc4:	f107 0210 	add.w	r2, r7, #16
 800edc8:	2303      	movs	r3, #3
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	2302      	movs	r3, #2
 800edce:	f00d f973 	bl	801c0b8 <HAL_I2C_Master_Receive>
 800edd2:	4603      	mov	r3, r0
 800edd4:	75bb      	strb	r3, [r7, #22]
	}
	if(errStatus != HAL_OK){
 800edd6:	7dbb      	ldrb	r3, [r7, #22]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d006      	beq.n	800edea <L6360_I2CReadStatusParity+0xce>
		statusRet = ConvertError(errStatus);
 800eddc:	7dbb      	ldrb	r3, [r7, #22]
 800edde:	b29b      	uxth	r3, r3
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 f8e5 	bl	800efb0 <ConvertError>
 800ede6:	4603      	mov	r3, r0
 800ede8:	75fb      	strb	r3, [r7, #23]
		statusRet = l6360->i2c.read_cb((devAddress | L6360_RW_MODE_READ), data, 2);
	}
#endif

	/*Set received data*/
	if(statusRet == L6360_OK){
 800edea:	7dfb      	ldrb	r3, [r7, #23]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d105      	bne.n	800edfc <L6360_I2CReadStatusParity+0xe0>
		*status = data[0];
 800edf0:	7c3a      	ldrb	r2, [r7, #16]
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	701a      	strb	r2, [r3, #0]
		*parity = data[1];
 800edf6:	7c7a      	ldrb	r2, [r7, #17]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	701a      	strb	r2, [r3, #0]
	}
	/*Process unlock*/
	L6360_UNLOCK(l6360->i2c);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2200      	movs	r2, #0
 800ee00:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142

	return statusRet;
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3718      	adds	r7, #24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <L6360_I2CIRQHandler>:
/**
  * @brief  Handle the interrupt
  * @param  l6360: l6360 structure pointer
  * @retval none
  */
void L6360_I2CIRQHandler(L6360_IOLink_hw_t* l6360){
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b082      	sub	sp, #8
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
	L6360_I2CReadStatusParity(l6360, &l6360->reg.sr.value, &l6360->reg.pr.value);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	1c99      	adds	r1, r3, #2
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	330a      	adds	r3, #10
 800ee1e:	461a      	mov	r2, r3
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7ff ff7b 	bl	800ed1c <L6360_I2CReadStatusParity>
	/* TODO: If it is needed to implement retry for write operation according to the
	 * error by checking status and parity register. We have to implement here.
	 * */
}
 800ee26:	bf00      	nop
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <L6360_I2CAttachWriteCallback>:
  * 		regAddr: register address
  * 		data: data pointer
  * 		len: data length
  * @retval none
  */
void L6360_I2CAttachWriteCallback(L6360_IOLink_hw_t* l6360, L6360_Status (*callback) (uint8_t devAddress, uint8_t* data, uint16_t len)){
 800ee2e:	b480      	push	{r7}
 800ee30:	b083      	sub	sp, #12
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
 800ee36:	6039      	str	r1, [r7, #0]
//#ifdef L6360_MCU_STM32XXX
	l6360->i2c.write_cb = callback;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	683a      	ldr	r2, [r7, #0]
 800ee3c:	f8c3 2147 	str.w	r2, [r3, #327]	; 0x147
//#endif
}
 800ee40:	bf00      	nop
 800ee42:	370c      	adds	r7, #12
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr

0800ee4c <L6360_I2CAttachReadCallback>:
  * 		regAddr: register address
  * 		data: data pointer
  * 		len: data length
  * @retval none
  */
void L6360_I2CAttachReadCallback(L6360_IOLink_hw_t* l6360, L6360_Status (*callback) (uint8_t devAddress, uint8_t* data, uint16_t len)){
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
//#ifdef L6360_MCU_STM32XXX
	l6360->i2c.read_cb = callback;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	f8c3 214b 	str.w	r2, [r3, #331]	; 0x14b
//#endif
}
 800ee5e:	bf00      	nop
 800ee60:	370c      	adds	r7, #12
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <L6360_UartTxcIRQ>:

/** @brief	TX complete interrupt handler. Call this function when TX complete interrupt occur.
  * @param  l6360: l6360 structure pointer
  * @retval error status
  */
void L6360_UartTxcIRQ(L6360_IOLink_hw_t* l6360){
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]

	L6360_CqDisable(l6360);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 f84b 	bl	800ef0e <L6360_CqDisable>
//	DBG_SPRINT_NL("UART_TXC:");
}
 800ee78:	bf00      	nop
 800ee7a:	3708      	adds	r7, #8
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <L6360_UartRxcIRQ>:

/** @brief	RX complete interrupt handler. Call this function when RX complete interrupt occur.
  * @param  l6360: l6360 structure pointer
  * @retval error status
  */
void L6360_UartRxcIRQ(L6360_IOLink_hw_t* l6360, uint8_t *data, uint16_t len){
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	80fb      	strh	r3, [r7, #6]
	l6360->uart.rxLen = len;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	88fa      	ldrh	r2, [r7, #6]
 800ee92:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
//	HAL_UARTEx_ReceiveToIdle_DMA(l6360->uart.huart, l6360->uart.rxBuf, 256);
//	__HAL_DMA_DISABLE_IT(l6360->uart.huart->hdmarx, DMA_IT_HT);
//	__HAL_UART_DISABLE_IT(l6360->uart.huart, UART_IT_ORE);

//	HAL_UARTEx_ReceiveToIdle_IT(l6360->uart.huart, l6360->uart.rxBuf, 256);
	DBG_SPRINT_NL("UART_RX[%d]:%02X,%02X",len, l6360->uart.rxBuf[0], l6360->uart.rxBuf[1]);
 800ee96:	88f9      	ldrh	r1, [r7, #6]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	7d5b      	ldrb	r3, [r3, #21]
 800eea2:	4803      	ldr	r0, [pc, #12]	; (800eeb0 <L6360_UartRxcIRQ+0x30>)
 800eea4:	f7fe fece 	bl	800dc44 <DBG_SPRINT_NL>
//	while(1){};
}
 800eea8:	bf00      	nop
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	0802a810 	.word	0x0802a810

0800eeb4 <L6360_UartAttachConfigCallback>:
  * @retval none
  */
void L6360_UartAttachConfigCallback( L6360_IOLink_hw_t* l6360,
		L6360_Status (*callback)(L6360_IOLink_hw_t* l6360,
				L6360_RWMode rwMode, uint32_t* baudrate))
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
	l6360->uart.config_cb = callback;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	f8c3 2116 	str.w	r2, [r3, #278]	; 0x116
}
 800eec6:	bf00      	nop
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <L6360_UartAttachTXCallback>:

/** @brief	Attach uart transmission callback function
  * @param  l6360: l6360 structure pointer
  * @retval none
  */
void L6360_UartAttachTXCallback(L6360_IOLink_hw_t* l6360, L6360_Status (*callback) (L6360_IOLink_hw_t* l6360,uint8_t* data, uint16_t len, uint32_t timeout)){
 800eed2:	b480      	push	{r7}
 800eed4:	b083      	sub	sp, #12
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	6039      	str	r1, [r7, #0]
	l6360->uart.tx_cb = callback;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	f8c3 211a 	str.w	r2, [r3, #282]	; 0x11a
}
 800eee4:	bf00      	nop
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <L6360_UartAttachRXCallback>:

/** @brief	Attach uart receive callback function
  * @param  l6360: l6360 structure pointer
  * @retval none
  */
void L6360_UartAttachRXCallback( L6360_IOLink_hw_t* l6360, L6360_Status (*callback) (L6360_IOLink_hw_t* l6360,uint8_t* data, uint16_t len, uint32_t timeout)){
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
	l6360->uart.rx_cb = callback;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	f8c3 211e 	str.w	r2, [r3, #286]	; 0x11e
}
 800ef02:	bf00      	nop
 800ef04:	370c      	adds	r7, #12
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <L6360_CqDisable>:
/**
  * @brief  Disable the EN_C/Q  gpio pin
  * @param  l6360: l6360 structure pointer
  * @retval none
  */
void L6360_CqDisable(L6360_IOLink_hw_t* l6360){
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b082      	sub	sp, #8
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
#ifdef L6360_MCU_STM32XXX
	HAL_GPIO_WritePin(l6360->ctrlPins.cqEnPort, l6360->ctrlPins.cqEnPin, GPIO_PIN_RESET);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8d3 015b 	ldr.w	r0, [r3, #347]	; 0x15b
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 3165 	ldrh.w	r3, [r3, #357]	; 0x165
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	2200      	movs	r2, #0
 800ef26:	4619      	mov	r1, r3
 800ef28:	f00c fef4 	bl	801bd14 <HAL_GPIO_WritePin>
#else
	l6360->ctrlPins.encq(l6360, L6360_PIN_RESET);
#endif
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <L6360_AttachLplusPinCallback>:
  * @brief  Attach L plus pin callback
  * @param  l6360: l6360 structure pointer
  * 		callback: callback to lPlus pin
  * @retval none
  */
void L6360_AttachLplusPinCallback(L6360_IOLink_hw_t* l6360, void (*callback)(L6360_IOLink_hw_t* l6360, L6360_PinState state)){
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
	l6360->ctrlPins.enLplus = callback;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	f8c3 216b 	str.w	r2, [r3, #363]	; 0x16b
}
 800ef46:	bf00      	nop
 800ef48:	370c      	adds	r7, #12
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <L6360_AttachCQPinCallback>:
  * @brief  Attach CQ pin callback
  * @param  l6360: l6360 structure pointer
  * 		callback: callback to CQ pin
  * @retval none
  */
void L6360_AttachCQPinCallback(L6360_IOLink_hw_t* l6360, void (*callback)(L6360_IOLink_hw_t* l6360, L6360_PinState state)){
 800ef52:	b480      	push	{r7}
 800ef54:	b083      	sub	sp, #12
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	6039      	str	r1, [r7, #0]
	l6360->ctrlPins.encq = callback;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	683a      	ldr	r2, [r7, #0]
 800ef60:	f8c3 216f 	str.w	r2, [r3, #367]	; 0x16f
}
 800ef64:	bf00      	nop
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <L6360_AttachResetPinCallback>:
  * @brief  Attach reset pin callback
  * @param  l6360: l6360 structure pointer
  * 		callback: callback to reset pin
  * @retval none
  */
void L6360_AttachResetPinCallback(L6360_IOLink_hw_t* l6360, void (*callback)(L6360_IOLink_hw_t* l6360, L6360_PinState state)){
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
	l6360->ctrlPins.rst = callback;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	f8c3 2173 	str.w	r2, [r3, #371]	; 0x173
}
 800ef82:	bf00      	nop
 800ef84:	370c      	adds	r7, #12
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
	...

0800ef90 <L6360_AttachTimerCallback>:
/**
  * @brief  Get time in us
  * @param  none
  * @retval time in us
  */
void L6360_AttachTimerCallback(uint64_t (*callback)(void)){
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
	getTime_us = callback;
 800ef98:	4a04      	ldr	r2, [pc, #16]	; (800efac <L6360_AttachTimerCallback+0x1c>)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6013      	str	r3, [r2, #0]
}
 800ef9e:	bf00      	nop
 800efa0:	370c      	adds	r7, #12
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	24005f58 	.word	0x24005f58

0800efb0 <ConvertError>:
/* convert error from other type to l6360 error type
 * */
static inline L6360_Status ConvertError(uint16_t error){
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	4603      	mov	r3, r0
 800efb8:	80fb      	strh	r3, [r7, #6]
	switch (error) {
 800efba:	88fb      	ldrh	r3, [r7, #6]
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d813      	bhi.n	800efe8 <ConvertError+0x38>
 800efc0:	a201      	add	r2, pc, #4	; (adr r2, 800efc8 <ConvertError+0x18>)
 800efc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc6:	bf00      	nop
 800efc8:	0800efd9 	.word	0x0800efd9
 800efcc:	0800efdd 	.word	0x0800efdd
 800efd0:	0800efe1 	.word	0x0800efe1
 800efd4:	0800efe5 	.word	0x0800efe5
#ifdef L6360_MCU_STM32XXX
	case HAL_OK:
		return L6360_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	e006      	b.n	800efea <ConvertError+0x3a>
		break;
	case HAL_ERROR:
		return L6360_ERROR;
 800efdc:	2301      	movs	r3, #1
 800efde:	e004      	b.n	800efea <ConvertError+0x3a>
		break;
	case HAL_BUSY:
		return L6360_BUSY;
 800efe0:	2302      	movs	r3, #2
 800efe2:	e002      	b.n	800efea <ConvertError+0x3a>
		break;
	case HAL_TIMEOUT:
		return L6360_TIMEOUT;
 800efe4:	2303      	movs	r3, #3
 800efe6:	e000      	b.n	800efea <ConvertError+0x3a>
		break;
#endif
	default:
		return L6360_UNKNOWN;
 800efe8:	2304      	movs	r3, #4
		break;
	}
}
 800efea:	4618      	mov	r0, r3
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop

0800eff8 <MB_CalcCRC16>:
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
	0x40
} ;

unsigned short MB_CalcCRC16 (volatile unsigned char *puchMsg, unsigned short usDataLen ) /* The function returns the CRC as a unsigned short type   */
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	460b      	mov	r3, r1
 800f002:	807b      	strh	r3, [r7, #2]
//*puchMsg =  /* message to calculate CRC upon */
//usDataLen =  /* quantity of bytes in message  */

    unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized  */
 800f004:	23ff      	movs	r3, #255	; 0xff
 800f006:	73fb      	strb	r3, [r7, #15]
    unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized  */
 800f008:	23ff      	movs	r3, #255	; 0xff
 800f00a:	73bb      	strb	r3, [r7, #14]
    unsigned uIndex ; /* will index into CRC lookup table  */
    while (usDataLen--) /* pass through message buffer  */
 800f00c:	e014      	b.n	800f038 <MB_CalcCRC16+0x40>
    {
        uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC  */
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	1c5a      	adds	r2, r3, #1
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	b2da      	uxtb	r2, r3
 800f018:	7bbb      	ldrb	r3, [r7, #14]
 800f01a:	4053      	eors	r3, r2
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	60bb      	str	r3, [r7, #8]
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800f020:	4a0f      	ldr	r2, [pc, #60]	; (800f060 <MB_CalcCRC16+0x68>)
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	4413      	add	r3, r2
 800f026:	781a      	ldrb	r2, [r3, #0]
 800f028:	7bfb      	ldrb	r3, [r7, #15]
 800f02a:	4053      	eors	r3, r2
 800f02c:	73bb      	strb	r3, [r7, #14]
        uchCRCHi = auchCRCLo[uIndex] ;
 800f02e:	4a0d      	ldr	r2, [pc, #52]	; (800f064 <MB_CalcCRC16+0x6c>)
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	4413      	add	r3, r2
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	73fb      	strb	r3, [r7, #15]
    while (usDataLen--) /* pass through message buffer  */
 800f038:	887b      	ldrh	r3, [r7, #2]
 800f03a:	1e5a      	subs	r2, r3, #1
 800f03c:	807a      	strh	r2, [r7, #2]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1e5      	bne.n	800f00e <MB_CalcCRC16+0x16>
    }
    return (uchCRCHi << 8 | uchCRCLo) ;
 800f042:	7bfb      	ldrb	r3, [r7, #15]
 800f044:	021b      	lsls	r3, r3, #8
 800f046:	b21a      	sxth	r2, r3
 800f048:	7bbb      	ldrb	r3, [r7, #14]
 800f04a:	b21b      	sxth	r3, r3
 800f04c:	4313      	orrs	r3, r2
 800f04e:	b21b      	sxth	r3, r3
 800f050:	b29b      	uxth	r3, r3
}
 800f052:	4618      	mov	r0, r3
 800f054:	3714      	adds	r7, #20
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	2400002c 	.word	0x2400002c
 800f064:	2400012c 	.word	0x2400012c

0800f068 <MB_CRCCheck>:
/**
  * @brief To check the CRC16
  * @param None
  * @retval 1 or 0, if calculated CRC is matched with received CRC it will return 1, otherwise it will return 0
  */
uint8_t MB_CRCCheck(uint8_t *buff, uint8_t size){
 800f068:	b5b0      	push	{r4, r5, r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	460b      	mov	r3, r1
 800f072:	70fb      	strb	r3, [r7, #3]
 800f074:	466b      	mov	r3, sp
 800f076:	461d      	mov	r5, r3
	unsigned short dataLength = size-2u;			//last 2 bytes of adu are for crc16, that's why we have to minus 2 from the adu buffer size
 800f078:	78fb      	ldrb	r3, [r7, #3]
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	3b02      	subs	r3, #2
 800f07e:	82fb      	strh	r3, [r7, #22]
	unsigned char data[dataLength];
 800f080:	8afc      	ldrh	r4, [r7, #22]
 800f082:	4623      	mov	r3, r4
 800f084:	3b01      	subs	r3, #1
 800f086:	613b      	str	r3, [r7, #16]
 800f088:	b2a0      	uxth	r0, r4
 800f08a:	f04f 0100 	mov.w	r1, #0
 800f08e:	f04f 0200 	mov.w	r2, #0
 800f092:	f04f 0300 	mov.w	r3, #0
 800f096:	00cb      	lsls	r3, r1, #3
 800f098:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f09c:	00c2      	lsls	r2, r0, #3
 800f09e:	b2a0      	uxth	r0, r4
 800f0a0:	f04f 0100 	mov.w	r1, #0
 800f0a4:	f04f 0200 	mov.w	r2, #0
 800f0a8:	f04f 0300 	mov.w	r3, #0
 800f0ac:	00cb      	lsls	r3, r1, #3
 800f0ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f0b2:	00c2      	lsls	r2, r0, #3
 800f0b4:	4623      	mov	r3, r4
 800f0b6:	3307      	adds	r3, #7
 800f0b8:	08db      	lsrs	r3, r3, #3
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	ebad 0d03 	sub.w	sp, sp, r3
 800f0c0:	466b      	mov	r3, sp
 800f0c2:	3300      	adds	r3, #0
 800f0c4:	60fb      	str	r3, [r7, #12]

	/*
	 * 2nd 1-byte from the last of the PDU is the CRC lower byte
	 * last 1-byte of the PDU is the CRC higher byte
	 */
	uint16_t receivedCRC16 = (buff[size-1] << 8) | buff[size-2];
 800f0c6:	78fb      	ldrb	r3, [r7, #3]
 800f0c8:	3b01      	subs	r3, #1
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	021b      	lsls	r3, r3, #8
 800f0d2:	b21a      	sxth	r2, r3
 800f0d4:	78fb      	ldrb	r3, [r7, #3]
 800f0d6:	3b02      	subs	r3, #2
 800f0d8:	6879      	ldr	r1, [r7, #4]
 800f0da:	440b      	add	r3, r1
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	b21b      	sxth	r3, r3
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	b21b      	sxth	r3, r3
 800f0e4:	817b      	strh	r3, [r7, #10]

	memcpy(data, buff, dataLength);						//to copy the PDU to data array without 2 bytes of CRC
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	8afa      	ldrh	r2, [r7, #22]
 800f0ea:	6879      	ldr	r1, [r7, #4]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f017 fb13 	bl	8026718 <memcpy>
	return (receivedCRC16 == MB_CalcCRC16(data, dataLength));						// if CRC is matched, it will return 1, else 0
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	8afa      	ldrh	r2, [r7, #22]
 800f0f6:	4611      	mov	r1, r2
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff ff7d 	bl	800eff8 <MB_CalcCRC16>
 800f0fe:	4603      	mov	r3, r0
 800f100:	461a      	mov	r2, r3
 800f102:	897b      	ldrh	r3, [r7, #10]
 800f104:	4293      	cmp	r3, r2
 800f106:	bf0c      	ite	eq
 800f108:	2301      	moveq	r3, #1
 800f10a:	2300      	movne	r3, #0
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	46ad      	mov	sp, r5
}
 800f110:	4618      	mov	r0, r3
 800f112:	3718      	adds	r7, #24
 800f114:	46bd      	mov	sp, r7
 800f116:	bdb0      	pop	{r4, r5, r7, pc}

0800f118 <MB_CUST_Init>:


uint8_t (*MB_CUST_Process109ReqAODOCallback)(uint8_t *buff, uint16_t size);
uint8_t (*MB_CUST_Build107RespAIDICallback)(uint8_t *buff, uint16_t size);

void MB_CUST_Init(MB_Custom *custom){
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
	custom->numOfSlv = 0;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	709a      	strb	r2, [r3, #2]
	custom->slvStartAddr = 0;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	705a      	strb	r2, [r3, #1]
	custom->reTransTimer.enable = 0;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	721a      	strb	r2, [r3, #8]
	custom->reTransTimer.time = 0;
 800f132:	6879      	ldr	r1, [r7, #4]
 800f134:	f04f 0200 	mov.w	r2, #0
 800f138:	f04f 0300 	mov.w	r3, #0
 800f13c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	custom->rcvdCount = 0;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	custom->isReadyToSend = 0;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MBRS_CUST_ClearMQ();
 800f150:	f000 fb40 	bl	800f7d4 <MBRS_CUST_ClearMQ>

}
 800f154:	bf00      	nop
 800f156:	3708      	adds	r7, #8
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}

0800f15c <MB_CUST_BuildRTUReqRIRDI>:

/**
  * @brief Built request to send MB rtu slave for custom function 107-Read Input Register & Discrete input
  * @retval returns size of the buffer
  */
uint16_t MB_CUST_BuildRTUReqRIRDI(MB_Custom *custom, uint8_t *buff){
 800f15c:	b5b0      	push	{r4, r5, r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
	 * ------------------------------------------------------------------------------------------------------
	 * Broadcast address | Custom Function Code | Slave Starting Address | Number of Slave (N) |   CRC-16 	|
	 *   	1 byte		 |		 1 bytes	    |			1 byte		 |		1 bytes		   |   2 bytes	|
	 * ------------------------------------------------------------------------------------------------------
	 * */
	uint16_t size = 0;
 800f166:	2300      	movs	r3, #0
 800f168:	81fb      	strh	r3, [r7, #14]
	buff[size++] = MB_BROADCAST_ADDR;				//  Broadcast address
 800f16a:	89fb      	ldrh	r3, [r7, #14]
 800f16c:	1c5a      	adds	r2, r3, #1
 800f16e:	81fa      	strh	r2, [r7, #14]
 800f170:	461a      	mov	r2, r3
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	4413      	add	r3, r2
 800f176:	2200      	movs	r2, #0
 800f178:	701a      	strb	r2, [r3, #0]
	buff[size++] = MB_CFC_RIRDI_107;				//  Custom Function Code 107-Read Input Register & Discrete input
 800f17a:	89fb      	ldrh	r3, [r7, #14]
 800f17c:	1c5a      	adds	r2, r3, #1
 800f17e:	81fa      	strh	r2, [r7, #14]
 800f180:	461a      	mov	r2, r3
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	4413      	add	r3, r2
 800f186:	226b      	movs	r2, #107	; 0x6b
 800f188:	701a      	strb	r2, [r3, #0]
	buff[size++] = custom->slvStartAddr;			//Slave Starting Address
 800f18a:	89fb      	ldrh	r3, [r7, #14]
 800f18c:	1c5a      	adds	r2, r3, #1
 800f18e:	81fa      	strh	r2, [r7, #14]
 800f190:	461a      	mov	r2, r3
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	4413      	add	r3, r2
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	7852      	ldrb	r2, [r2, #1]
 800f19a:	701a      	strb	r2, [r3, #0]
	buff[size++] = custom->numOfSlv;				// Number of slaves
 800f19c:	89fb      	ldrh	r3, [r7, #14]
 800f19e:	1c5a      	adds	r2, r3, #1
 800f1a0:	81fa      	strh	r2, [r7, #14]
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	7892      	ldrb	r2, [r2, #2]
 800f1ac:	701a      	strb	r2, [r3, #0]
	MBTOOL_SplitU16ToBytes(&buff[size+1], &buff[size], MB_CalcCRC16(buff, size));	// calculate CRC-16, and set it to the buffer
 800f1ae:	89fb      	ldrh	r3, [r7, #14]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	683a      	ldr	r2, [r7, #0]
 800f1b4:	18d4      	adds	r4, r2, r3
 800f1b6:	89fb      	ldrh	r3, [r7, #14]
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	18d5      	adds	r5, r2, r3
 800f1bc:	89fb      	ldrh	r3, [r7, #14]
 800f1be:	4619      	mov	r1, r3
 800f1c0:	6838      	ldr	r0, [r7, #0]
 800f1c2:	f7ff ff19 	bl	800eff8 <MB_CalcCRC16>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	4629      	mov	r1, r5
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f003 fec7 	bl	8012f60 <MBTOOL_SplitU16ToBytes>
	return size+2;
 800f1d2:	89fb      	ldrh	r3, [r7, #14]
 800f1d4:	3302      	adds	r3, #2
 800f1d6:	b29b      	uxth	r3, r3

}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bdb0      	pop	{r4, r5, r7, pc}

0800f1e0 <MB_CUST_BuildEmptySubPacket>:
		}
	}
	return size;
}

uint16_t MB_CUST_BuildEmptySubPacket(uint8_t *buff, uint8_t status){
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	70fb      	strb	r3, [r7, #3]

	memset(buff, 0xFF,MB_CUST_DATA_BLOCK_SIZE);		// set 0xFF as there is no valid value
 800f1ec:	220a      	movs	r2, #10
 800f1ee:	21ff      	movs	r1, #255	; 0xff
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f017 fa9f 	bl	8026734 <memset>
	/*now set the status byte*/
	buff[MB_CUST_DATA_BLOCK_SIZE-2] = status;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	3308      	adds	r3, #8
 800f1fa:	78fa      	ldrb	r2, [r7, #3]
 800f1fc:	701a      	strb	r2, [r3, #0]
	return MB_CUST_DATA_BLOCK_SIZE;
 800f1fe:	230a      	movs	r3, #10
}
 800f200:	4618      	mov	r0, r3
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <MB_CUST_CheckCFunCode>:


/*
 * Checks custom function code
 * */
uint8_t MB_CUST_CheckCFunCode(uint8_t funCode){
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	4603      	mov	r3, r0
 800f210:	71fb      	strb	r3, [r7, #7]
	return (funCode == MB_CFC_RIRDI_107 || funCode == MB_CFC_WMHRCO_109);
 800f212:	79fb      	ldrb	r3, [r7, #7]
 800f214:	2b6b      	cmp	r3, #107	; 0x6b
 800f216:	d002      	beq.n	800f21e <MB_CUST_CheckCFunCode+0x16>
 800f218:	79fb      	ldrb	r3, [r7, #7]
 800f21a:	2b6d      	cmp	r3, #109	; 0x6d
 800f21c:	d101      	bne.n	800f222 <MB_CUST_CheckCFunCode+0x1a>
 800f21e:	2301      	movs	r3, #1
 800f220:	e000      	b.n	800f224 <MB_CUST_CheckCFunCode+0x1c>
 800f222:	2300      	movs	r3, #0
 800f224:	b2db      	uxtb	r3, r3
}
 800f226:	4618      	mov	r0, r3
 800f228:	370c      	adds	r7, #12
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
	...

0800f234 <MB_CUST_StartTimer>:
//	MBTOOL_SplitU16ToBytes(buff[size+2],buff[size+1], MB_CalcCRC16(buff, size));	// calculate CRC-16, and set it to the buffer
//	return size+2;
//
//}

void MB_CUST_StartTimer(MB_CUST_WaitingTimer *timer){
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
	timer->enable = 1;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2201      	movs	r2, #1
 800f240:	701a      	strb	r2, [r3, #0]
	timer->time = TS_GetUS(&timStamp);
 800f242:	4806      	ldr	r0, [pc, #24]	; (800f25c <MB_CUST_StartTimer+0x28>)
 800f244:	f7fb fe90 	bl	800af68 <TS_GetUS>
 800f248:	4602      	mov	r2, r0
 800f24a:	460b      	mov	r3, r1
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800f252:	bf00      	nop
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	24005168 	.word	0x24005168

0800f260 <MB_CUST_StopTimer>:

void MB_CUST_StopTimer(MB_CUST_WaitingTimer *timer){
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
	timer->enable = 0;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	701a      	strb	r2, [r3, #0]
	timer->time = 0;
 800f26e:	6879      	ldr	r1, [r7, #4]
 800f270:	f04f 0200 	mov.w	r2, #0
 800f274:	f04f 0300 	mov.w	r3, #0
 800f278:	e9c1 2302 	strd	r2, r3, [r1, #8]
	timer->isTimeRst = 0;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	615a      	str	r2, [r3, #20]
}
 800f282:	bf00      	nop
 800f284:	370c      	adds	r7, #12
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr
	...

0800f290 <MB_CUST_ResetTimer>:

void MB_CUST_ResetTimer(MB_CUST_WaitingTimer *timer){
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
	timer->time = TS_GetUS(&timStamp);
 800f298:	4807      	ldr	r0, [pc, #28]	; (800f2b8 <MB_CUST_ResetTimer+0x28>)
 800f29a:	f7fb fe65 	bl	800af68 <TS_GetUS>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	6879      	ldr	r1, [r7, #4]
 800f2a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	timer->isTimeRst = 1;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	615a      	str	r2, [r3, #20]
}
 800f2ae:	bf00      	nop
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	24005168 	.word	0x24005168

0800f2bc <MB_CUST_IsTimerRunning>:

void MB_CUST_SetTimeout(MB_CUST_WaitingTimer *timer, uint32_t timeout){
	timer->timeout = timeout;
}

uint8_t MB_CUST_IsTimerRunning(MB_CUST_WaitingTimer *timer){
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
	return timer->enable;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	781b      	ldrb	r3, [r3, #0]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <MB_CUST_IsTimeout>:

uint8_t MB_CUST_IsTimeout(MB_CUST_WaitingTimer *timer){
 800f2d4:	b5b0      	push	{r4, r5, r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
	if(!timer->enable) return 0;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <MB_CUST_IsTimeout+0x14>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	e021      	b.n	800f32c <MB_CUST_IsTimeout+0x58>
	if((uint64_t)fabsl((long double)(TS_GetUS(&timStamp) - timer->time)) >= (uint64_t)timer->timeout){
 800f2e8:	4812      	ldr	r0, [pc, #72]	; (800f334 <MB_CUST_IsTimeout+0x60>)
 800f2ea:	f7fb fe3d 	bl	800af68 <TS_GetUS>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f2f4:	1a84      	subs	r4, r0, r2
 800f2f6:	eb61 0503 	sbc.w	r5, r1, r3
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	f7f1 f9e5 	bl	80006cc <__aeabi_ul2d>
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	4610      	mov	r0, r2
 800f308:	4619      	mov	r1, r3
 800f30a:	f7f1 fa2d 	bl	8000768 <__aeabi_d2ulz>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	691b      	ldr	r3, [r3, #16]
 800f312:	461a      	mov	r2, r3
 800f314:	f04f 0300 	mov.w	r3, #0
 800f318:	4299      	cmp	r1, r3
 800f31a:	bf08      	it	eq
 800f31c:	4290      	cmpeq	r0, r2
 800f31e:	d304      	bcc.n	800f32a <MB_CUST_IsTimeout+0x56>
//		timer->time = TS_GetUS(&timStamp);
		timer->isTimeRst = 0;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	615a      	str	r2, [r3, #20]
		return 1;
 800f326:	2301      	movs	r3, #1
 800f328:	e000      	b.n	800f32c <MB_CUST_IsTimeout+0x58>
	}
	return 0;
 800f32a:	2300      	movs	r3, #0
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bdb0      	pop	{r4, r5, r7, pc}
 800f334:	24005168 	.word	0x24005168

0800f338 <MBRS_CUST_GetSlvStartAddr>:
//}


/*------Modbus Custom functions for slave------------*/

uint8_t MBRS_CUST_GetSlvStartAddr(void){
 800f338:	b480      	push	{r7}
 800f33a:	af00      	add	r7, sp, #0
	return mbHandle.rxBuffer[MB_FC_INDEX+1];
 800f33c:	4b03      	ldr	r3, [pc, #12]	; (800f34c <MBRS_CUST_GetSlvStartAddr+0x14>)
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	789b      	ldrb	r3, [r3, #2]
}
 800f342:	4618      	mov	r0, r3
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr
 800f34c:	24005f80 	.word	0x24005f80

0800f350 <MBRS_CUST_GetNumOfSlv>:

uint8_t MBRS_CUST_GetNumOfSlv(void){
 800f350:	b480      	push	{r7}
 800f352:	af00      	add	r7, sp, #0
	return mbHandle.rxBuffer[MB_FC_INDEX+2];
 800f354:	4b03      	ldr	r3, [pc, #12]	; (800f364 <MBRS_CUST_GetNumOfSlv+0x14>)
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	78db      	ldrb	r3, [r3, #3]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	24005f80 	.word	0x24005f80

0800f368 <MBRS_CUST_CheckSlvStartAddr>:
/**
  * @brief check the slave start address
  * @param none
  * @retval 0 = no exception, or >0 = exception code
  */
uint8_t MBRS_CUST_CheckSlvStartAddr(uint8_t address){
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
	return ((address > MB_BROADCAST_ADDR) && (address <= MB_SLAVE_ADDR_MAX))?
			0: MB_ECC_ISSA_12;
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d004      	beq.n	800f382 <MBRS_CUST_CheckSlvStartAddr+0x1a>
	return ((address > MB_BROADCAST_ADDR) && (address <= MB_SLAVE_ADDR_MAX))?
 800f378:	79fb      	ldrb	r3, [r7, #7]
 800f37a:	2bf7      	cmp	r3, #247	; 0xf7
 800f37c:	d801      	bhi.n	800f382 <MBRS_CUST_CheckSlvStartAddr+0x1a>
			0: MB_ECC_ISSA_12;
 800f37e:	2300      	movs	r3, #0
 800f380:	e000      	b.n	800f384 <MBRS_CUST_CheckSlvStartAddr+0x1c>
 800f382:	230c      	movs	r3, #12
}
 800f384:	4618      	mov	r0, r3
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <MBRS_CUST_CheckNumOfSlv>:
/**
  * @brief check the  num of slaves
  * @param none
  * @retval 0 = no exception, or >0 = exception code
  */
uint8_t MBRS_CUST_CheckNumOfSlv(uint8_t numOfSlv){
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	4603      	mov	r3, r0
 800f398:	71fb      	strb	r3, [r7, #7]
	return ((numOfSlv >= 1) && (numOfSlv <= MB_CUST_NUM_OF_SLAVE_MAX))? 0: MB_ECC_INS_13;
 800f39a:	79fb      	ldrb	r3, [r7, #7]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d004      	beq.n	800f3aa <MBRS_CUST_CheckNumOfSlv+0x1a>
 800f3a0:	79fb      	ldrb	r3, [r7, #7]
 800f3a2:	2b18      	cmp	r3, #24
 800f3a4:	d801      	bhi.n	800f3aa <MBRS_CUST_CheckNumOfSlv+0x1a>
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	e000      	b.n	800f3ac <MBRS_CUST_CheckNumOfSlv+0x1c>
 800f3aa:	230d      	movs	r3, #13
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	370c      	adds	r7, #12
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr

0800f3b8 <MBRS_CUST_CheckSlvSAAndNum>:
/**
  * @brief check the  slave start address & num of slaves
  * @param none
  * @retval 0 = no exception, or >0 = exception code
  */
uint8_t MBRS_CUST_CheckSlvSAAndNum(uint8_t address, uint8_t numOfSlv){
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	4603      	mov	r3, r0
 800f3c0:	460a      	mov	r2, r1
 800f3c2:	71fb      	strb	r3, [r7, #7]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	71bb      	strb	r3, [r7, #6]

	if(MBRS_CUST_CheckNumOfSlv(numOfSlv)==0){
 800f3c8:	79bb      	ldrb	r3, [r7, #6]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff ffe0 	bl	800f390 <MBRS_CUST_CheckNumOfSlv>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d111      	bne.n	800f3fa <MBRS_CUST_CheckSlvSAAndNum+0x42>
		if(MBRS_CUST_CheckSlvStartAddr(address)==0 && (numOfSlv+numOfSlv>=1 && numOfSlv+numOfSlv <= MB_SLAVE_ADDR_MAX)){
 800f3d6:	79fb      	ldrb	r3, [r7, #7]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7ff ffc5 	bl	800f368 <MBRS_CUST_CheckSlvStartAddr>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d108      	bne.n	800f3f6 <MBRS_CUST_CheckSlvSAAndNum+0x3e>
 800f3e4:	79bb      	ldrb	r3, [r7, #6]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d005      	beq.n	800f3f6 <MBRS_CUST_CheckSlvSAAndNum+0x3e>
 800f3ea:	79bb      	ldrb	r3, [r7, #6]
 800f3ec:	005b      	lsls	r3, r3, #1
 800f3ee:	2bf7      	cmp	r3, #247	; 0xf7
 800f3f0:	d801      	bhi.n	800f3f6 <MBRS_CUST_CheckSlvSAAndNum+0x3e>
			return 0;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	e002      	b.n	800f3fc <MBRS_CUST_CheckSlvSAAndNum+0x44>
		}else{
			return MB_ECC_ISSA_12;
 800f3f6:	230c      	movs	r3, #12
 800f3f8:	e000      	b.n	800f3fc <MBRS_CUST_CheckSlvSAAndNum+0x44>
		}
	}else{
		return MB_ECC_INS_13;
 800f3fa:	230d      	movs	r3, #13
	}

//	return MBRS_CUST_CheckSlvStartAddr(address) == 0 ? MBRS_CUST_CheckNumOfSlv(numOfSlv): MB_ECC_ISSA_12;

}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3708      	adds	r7, #8
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <MBR_CUST_readIRDI>:


/**
  * @brief To read input register & discrete input(CFC-107) and make the response PDU
  */
uint8_t MBR_CUST_readIRDI(void){
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0




	if(MB_GetRTUMode()==MB_RTU_MODE_SLAVE){
 800f40a:	f000 fd31 	bl	800fe70 <MB_GetRTUMode>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	f040 816d 	bne.w	800f6f0 <MBR_CUST_readIRDI+0x2ec>
		static uint8_t excepCode =	0;
		MB_RTUSlave *slave;
		slave = MBRS_GetInstance();
 800f416:	f002 fd8f 	bl	8011f38 <MBRS_GetInstance>
 800f41a:	6078      	str	r0, [r7, #4]
//		DEBUG_SPRINT(" P0.1:%d",slave->custom.respondingSlave);
//		DEBUG_SPRINT("\r\nR%dL%dS%dN%d", MBRS_CUST_GetSlvStartAddr() , slave->slave_address, slave->custom.slvStartAddr, slave->custom.numOfSlv);
		 if(MBRS_CUST_GetSlvStartAddr() > slave->slave_address ){															 // if the response is for this slave
 800f41c:	f7ff ff8c 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f420:	4603      	mov	r3, r0
 800f422:	461a      	mov	r2, r3
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d905      	bls.n	800f438 <MBR_CUST_readIRDI+0x34>
			slave->custom.isReadyToSend = 0;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			return MB_NRS_254;
 800f434:	23fe      	movs	r3, #254	; 0xfe
 800f436:	e16f      	b.n	800f718 <MBR_CUST_readIRDI+0x314>
		}

		if(!MB_CUST_IsTimerRunning(&slave->custom.waitingTimer)){
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	3330      	adds	r3, #48	; 0x30
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7ff ff3d 	bl	800f2bc <MB_CUST_IsTimerRunning>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d122      	bne.n	800f48e <MBR_CUST_readIRDI+0x8a>
			//Check the request packet size
			if(slave->rxBufferSize == MB_CUST_107_REQ_PACK_SIZE){
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	7b1b      	ldrb	r3, [r3, #12]
 800f44c:	2b06      	cmp	r3, #6
 800f44e:	d11e      	bne.n	800f48e <MBR_CUST_readIRDI+0x8a>
				slave->custom.numOfSlv = MBRS_CUST_GetNumOfSlv();
 800f450:	f7ff ff7e 	bl	800f350 <MBRS_CUST_GetNumOfSlv>
 800f454:	4603      	mov	r3, r0
 800f456:	461a      	mov	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	749a      	strb	r2, [r3, #18]
				slave->custom.slvStartAddr = MBRS_CUST_GetSlvStartAddr();
 800f45c:	f7ff ff6c 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f460:	4603      	mov	r3, r0
 800f462:	461a      	mov	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	745a      	strb	r2, [r3, #17]
				excepCode =	MBRS_CUST_CheckSlvSAAndNum(slave->custom.slvStartAddr,slave->custom.numOfSlv );
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	7c5a      	ldrb	r2, [r3, #17]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7c9b      	ldrb	r3, [r3, #18]
 800f470:	4619      	mov	r1, r3
 800f472:	4610      	mov	r0, r2
 800f474:	f7ff ffa0 	bl	800f3b8 <MBRS_CUST_CheckSlvSAAndNum>
 800f478:	4603      	mov	r3, r0
 800f47a:	461a      	mov	r2, r3
 800f47c:	4ba8      	ldr	r3, [pc, #672]	; (800f720 <MBR_CUST_readIRDI+0x31c>)
 800f47e:	701a      	strb	r2, [r3, #0]
				if(excepCode != 0 ){	return excepCode;}
 800f480:	4ba7      	ldr	r3, [pc, #668]	; (800f720 <MBR_CUST_readIRDI+0x31c>)
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d002      	beq.n	800f48e <MBR_CUST_readIRDI+0x8a>
 800f488:	4ba5      	ldr	r3, [pc, #660]	; (800f720 <MBR_CUST_readIRDI+0x31c>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	e144      	b.n	800f718 <MBR_CUST_readIRDI+0x314>
//			excepCode =	MBRS_CUST_CheckSlvStartAddr(MBRS_CUST_GetSlvStartAddr());
			//excepCode = MBRS_CUST_CheckSlvSAAndNum(MBRS_CUST_GetSlvStartAddr(), MBRS_CUST_GetNumOfSlv());			// is the slave address is valid;
		}
//		uint8_t slvStartAddr = MBRS_CUST_GetSlvStartAddr();
//		DEBUG_SPRINT(" P0.2:%d",slave->custom.respondingSlave);
		if(slave->custom.waitingTimer.isTimeRst<=0 && MBRS_CUST_GetSlvStartAddr() > 0){
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f492:	2b00      	cmp	r3, #0
 800f494:	d10a      	bne.n	800f4ac <MBR_CUST_readIRDI+0xa8>
 800f496:	f7ff ff4f 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d005      	beq.n	800f4ac <MBR_CUST_readIRDI+0xa8>
			slave->custom.respondingSlave = MBRS_CUST_GetSlvStartAddr();
 800f4a0:	f7ff ff4a 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	74da      	strb	r2, [r3, #19]
//			DEBUG_SPRINT(" P1.1:%d",slave->custom.respondingSlave);
		}

		//check response from other slave address
		if((slave->custom.respondingSlave+1) == slave->slave_address
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	7cdb      	ldrb	r3, [r3, #19]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	7812      	ldrb	r2, [r2, #0]
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d147      	bne.n	800f54a <MBR_CUST_readIRDI+0x146>
				&& slave->custom.waitingTimer.isTimeRst<=0
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d143      	bne.n	800f54a <MBR_CUST_readIRDI+0x146>
				&& slave->custom.eventType == MB_CUST_EVENT_107_RECVD){		// if the response comes from just in front slave
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d13e      	bne.n	800f54a <MBR_CUST_readIRDI+0x146>
			if(!MB_CUST_IsTimerRunning(&slave->custom.waitingTimer)){
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	3330      	adds	r3, #48	; 0x30
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff fef3 	bl	800f2bc <MB_CUST_IsTimerRunning>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d12c      	bne.n	800f536 <MBR_CUST_readIRDI+0x132>
				if(slave->custom.numOfSlv == 0 && slave->rxBufferSize == MB_CUST_107_REQ_PACK_SIZE){
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	7c9b      	ldrb	r3, [r3, #18]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d119      	bne.n	800f518 <MBR_CUST_readIRDI+0x114>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	7b1b      	ldrb	r3, [r3, #12]
 800f4e8:	2b06      	cmp	r3, #6
 800f4ea:	d115      	bne.n	800f518 <MBR_CUST_readIRDI+0x114>
					slave->custom.numOfSlv = MBRS_CUST_GetNumOfSlv();
 800f4ec:	f7ff ff30 	bl	800f350 <MBRS_CUST_GetNumOfSlv>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	749a      	strb	r2, [r3, #18]
					slave->custom.slvStartAddr = MBRS_CUST_GetSlvStartAddr();
 800f4f8:	f7ff ff1e 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	461a      	mov	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	745a      	strb	r2, [r3, #17]
					if(MBRS_CUST_CheckNumOfSlv(slave->custom.numOfSlv ) == MB_ECC_INS_13) {return MB_ECC_INS_13; }
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	7c9b      	ldrb	r3, [r3, #18]
 800f508:	4618      	mov	r0, r3
 800f50a:	f7ff ff41 	bl	800f390 <MBRS_CUST_CheckNumOfSlv>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b0d      	cmp	r3, #13
 800f512:	d101      	bne.n	800f518 <MBR_CUST_readIRDI+0x114>
 800f514:	230d      	movs	r3, #13
 800f516:	e0ff      	b.n	800f718 <MBR_CUST_readIRDI+0x314>
				}
				 if(slave->custom.numOfSlv > 1){
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	7c9b      	ldrb	r3, [r3, #18]
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d908      	bls.n	800f532 <MBR_CUST_readIRDI+0x12e>
					MB_CUST_StartTimer(&slave->custom.waitingTimer);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3330      	adds	r3, #48	; 0x30
 800f524:	4618      	mov	r0, r3
 800f526:	f7ff fe85 	bl	800f234 <MB_CUST_StartTimer>
					slave->custom.isReadyToSend = 0;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
//					DEBUG_PRINT(" P1.2");
				 }
				return MB_NRS_254;
 800f532:	23fe      	movs	r3, #254	; 0xfe
 800f534:	e0f0      	b.n	800f718 <MBR_CUST_readIRDI+0x314>
			}else{
//				DEBUG_PRINT(" P1");
				slave->custom.isReadyToSend = 1;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2201      	movs	r2, #1
 800f53a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				MB_CUST_StopTimer(&slave->custom.waitingTimer);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	3330      	adds	r3, #48	; 0x30
 800f542:	4618      	mov	r0, r3
 800f544:	f7ff fe8c 	bl	800f260 <MB_CUST_StopTimer>
			if(!MB_CUST_IsTimerRunning(&slave->custom.waitingTimer)){
 800f548:	e09e      	b.n	800f688 <MBR_CUST_readIRDI+0x284>
			}
		}
		else if((slave->custom.respondingSlave+1) == slave->slave_address
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	7cdb      	ldrb	r3, [r3, #19]
 800f54e:	3301      	adds	r3, #1
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	7812      	ldrb	r2, [r2, #0]
 800f554:	4293      	cmp	r3, r2
 800f556:	d112      	bne.n	800f57e <MBR_CUST_readIRDI+0x17a>
				&& slave->custom.waitingTimer.isTimeRst==1
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d10e      	bne.n	800f57e <MBR_CUST_readIRDI+0x17a>
				&& slave->custom.eventType == MB_CUST_EVENT_107_RECVD){		// if the response comes from just in front slave
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f566:	2b01      	cmp	r3, #1
 800f568:	d109      	bne.n	800f57e <MBR_CUST_readIRDI+0x17a>
//				DEBUG_SPRINT("\nR:%d",slave->custom.respondingSlave);
				slave->custom.isReadyToSend = 1;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2201      	movs	r2, #1
 800f56e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				MB_CUST_StopTimer(&slave->custom.waitingTimer);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	3330      	adds	r3, #48	; 0x30
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff fe72 	bl	800f260 <MB_CUST_StopTimer>
 800f57c:	e084      	b.n	800f688 <MBR_CUST_readIRDI+0x284>
		}
		else if(slave->custom.respondingSlave < slave->slave_address
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	7cda      	ldrb	r2, [r3, #19]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	429a      	cmp	r2, r3
 800f588:	d24c      	bcs.n	800f624 <MBR_CUST_readIRDI+0x220>
				&& slave->custom.eventType == MB_CUST_EVENT_107_RECVD){		// if this device is not the next slave
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f590:	2b01      	cmp	r3, #1
 800f592:	d147      	bne.n	800f624 <MBR_CUST_readIRDI+0x220>
			slave->custom.isReadyToSend = 0;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			if(!MB_CUST_IsTimerRunning(&slave->custom.waitingTimer)){
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	3330      	adds	r3, #48	; 0x30
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7ff fe8b 	bl	800f2bc <MB_CUST_IsTimerRunning>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d12b      	bne.n	800f604 <MBR_CUST_readIRDI+0x200>
				if(slave->custom.numOfSlv == 0 && slave->rxBufferSize == MB_CUST_107_REQ_PACK_SIZE){
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	7c9b      	ldrb	r3, [r3, #18]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d119      	bne.n	800f5e8 <MBR_CUST_readIRDI+0x1e4>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	7b1b      	ldrb	r3, [r3, #12]
 800f5b8:	2b06      	cmp	r3, #6
 800f5ba:	d115      	bne.n	800f5e8 <MBR_CUST_readIRDI+0x1e4>
//					DEBUG_PRINT(" P2");
					slave->custom.numOfSlv = MBRS_CUST_GetNumOfSlv();
 800f5bc:	f7ff fec8 	bl	800f350 <MBRS_CUST_GetNumOfSlv>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	749a      	strb	r2, [r3, #18]
					slave->custom.slvStartAddr = MBRS_CUST_GetSlvStartAddr();
 800f5c8:	f7ff feb6 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	745a      	strb	r2, [r3, #17]
					if(MBRS_CUST_CheckNumOfSlv(slave->custom.numOfSlv ) == MB_ECC_INS_13) {return MB_ECC_INS_13; }
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	7c9b      	ldrb	r3, [r3, #18]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7ff fed9 	bl	800f390 <MBRS_CUST_CheckNumOfSlv>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b0d      	cmp	r3, #13
 800f5e2:	d101      	bne.n	800f5e8 <MBR_CUST_readIRDI+0x1e4>
 800f5e4:	230d      	movs	r3, #13
 800f5e6:	e097      	b.n	800f718 <MBR_CUST_readIRDI+0x314>
				}
				if(slave->custom.numOfSlv > 1){
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	7c9b      	ldrb	r3, [r3, #18]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d94a      	bls.n	800f686 <MBR_CUST_readIRDI+0x282>
//					DEBUG_PRINT(" P3");

//					DEBUG_SPRINT("\nR:%d",slave->rxBufferSize);
					MB_CUST_StartTimer(&slave->custom.waitingTimer);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3330      	adds	r3, #48	; 0x30
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7ff fe1d 	bl	800f234 <MB_CUST_StartTimer>
					slave->custom.isReadyToSend = 0;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			if(!MB_CUST_IsTimerRunning(&slave->custom.waitingTimer)){
 800f602:	e040      	b.n	800f686 <MBR_CUST_readIRDI+0x282>
				}
			}else{
//				DEBUG_PRINT(" P3.1");

//				DEBUG_SPRINT("\nR:%d",slave->custom.respondingSlave);
				MB_CUST_ResetTimer(&slave->custom.waitingTimer);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	3330      	adds	r3, #48	; 0x30
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fe41 	bl	800f290 <MB_CUST_ResetTimer>
				slave->custom.waitingTimer.isTimeRst = 0;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	645a      	str	r2, [r3, #68]	; 0x44
				slave->custom.respondingSlave++;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	7cdb      	ldrb	r3, [r3, #19]
 800f618:	3301      	adds	r3, #1
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	74da      	strb	r2, [r3, #19]
				return MB_NRS_254;
 800f620:	23fe      	movs	r3, #254	; 0xfe
 800f622:	e079      	b.n	800f718 <MBR_CUST_readIRDI+0x314>
			}
		}else if(slave->custom.respondingSlave == slave->slave_address){
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	7cda      	ldrb	r2, [r3, #19]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d12b      	bne.n	800f688 <MBR_CUST_readIRDI+0x284>
//				&& slave->custom.eventType == MB_CUST_EVENT_107_TIMEOUT){	// if this device is the target slave
//			DEBUG_PRINT(" P4");
			if(slave->custom.numOfSlv == 0 && slave->rxBufferSize == MB_CUST_107_REQ_PACK_SIZE){
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	7c9b      	ldrb	r3, [r3, #18]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d119      	bne.n	800f66c <MBR_CUST_readIRDI+0x268>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7b1b      	ldrb	r3, [r3, #12]
 800f63c:	2b06      	cmp	r3, #6
 800f63e:	d115      	bne.n	800f66c <MBR_CUST_readIRDI+0x268>
//				DEBUG_PRINT(" P5");
				slave->custom.numOfSlv = MBRS_CUST_GetNumOfSlv();
 800f640:	f7ff fe86 	bl	800f350 <MBRS_CUST_GetNumOfSlv>
 800f644:	4603      	mov	r3, r0
 800f646:	461a      	mov	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	749a      	strb	r2, [r3, #18]
				slave->custom.slvStartAddr = MBRS_CUST_GetSlvStartAddr();
 800f64c:	f7ff fe74 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f650:	4603      	mov	r3, r0
 800f652:	461a      	mov	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	745a      	strb	r2, [r3, #17]
				if(MBRS_CUST_CheckNumOfSlv(slave->custom.numOfSlv ) == MB_ECC_INS_13) {return MB_ECC_INS_13; }
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	7c9b      	ldrb	r3, [r3, #18]
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff fe97 	bl	800f390 <MBRS_CUST_CheckNumOfSlv>
 800f662:	4603      	mov	r3, r0
 800f664:	2b0d      	cmp	r3, #13
 800f666:	d101      	bne.n	800f66c <MBR_CUST_readIRDI+0x268>
 800f668:	230d      	movs	r3, #13
 800f66a:	e055      	b.n	800f718 <MBR_CUST_readIRDI+0x314>
			}
			slave->custom.waitingTimer.isTimeRst = 0;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	645a      	str	r2, [r3, #68]	; 0x44
			slave->custom.isReadyToSend = 1;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2201      	movs	r2, #1
 800f676:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			MB_CUST_StopTimer(&slave->custom.waitingTimer);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3330      	adds	r3, #48	; 0x30
 800f67e:	4618      	mov	r0, r3
 800f680:	f7ff fdee 	bl	800f260 <MB_CUST_StopTimer>
 800f684:	e000      	b.n	800f688 <MBR_CUST_readIRDI+0x284>
			if(!MB_CUST_IsTimerRunning(&slave->custom.waitingTimer)){
 800f686:	bf00      	nop
		}

		if((slave->slave_address) >=(slave->custom.slvStartAddr+slave->custom.numOfSlv) ){		// if this device is not in the range of target slaves
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	461a      	mov	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	7c5b      	ldrb	r3, [r3, #17]
 800f692:	4619      	mov	r1, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	7c9b      	ldrb	r3, [r3, #18]
 800f698:	440b      	add	r3, r1
 800f69a:	429a      	cmp	r2, r3
 800f69c:	db1d      	blt.n	800f6da <MBR_CUST_readIRDI+0x2d6>

			slave->custom.isReadyToSend = 0;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			 if( MBRS_CUST_GetSlvStartAddr() == (slave->custom.slvStartAddr+slave->custom.numOfSlv-1)){
 800f6a6:	f7ff fe47 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	7c5b      	ldrb	r3, [r3, #17]
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	7c9b      	ldrb	r3, [r3, #18]
 800f6b8:	440b      	add	r3, r1
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d105      	bne.n	800f6cc <MBR_CUST_readIRDI+0x2c8>
					slave->custom.numOfSlv = 0;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	749a      	strb	r2, [r3, #18]
					slave->custom.slvStartAddr = 0;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	745a      	strb	r2, [r3, #17]

			 }
//			 DEBUG_PRINT(" P6");
			 MB_CUST_StopTimer(&slave->custom.waitingTimer);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3330      	adds	r3, #48	; 0x30
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7ff fdc5 	bl	800f260 <MB_CUST_StopTimer>
			return MB_NRS_254;
 800f6d6:	23fe      	movs	r3, #254	; 0xfe
 800f6d8:	e01e      	b.n	800f718 <MBR_CUST_readIRDI+0x314>
		}
//		DEBUG_PRINT(" P10");
		// Append slave address, function code and responding slave address
		mbHandle.txBufferSize = 0;
 800f6da:	4b12      	ldr	r3, [pc, #72]	; (800f724 <MBR_CUST_readIRDI+0x320>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	735a      	strb	r2, [r3, #13]
		MB_appendToRespPDU_SAFC();						// here the slave address basically is the broadcast address
 800f6e0:	f000 fd7a 	bl	80101d8 <MB_appendToRespPDU_SAFC>
		MB_appendToRespPDU(slave->slave_address);		// local slave address
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f000 fd59 	bl	80101a0 <MB_appendToRespPDU>
 800f6ee:	e002      	b.n	800f6f6 <MBR_CUST_readIRDI+0x2f2>
//				DEBUG_SPRINT("\r\nR%dL%dS%dN%dT%d", MBRS_CUST_GetSlvStartAddr() , slave->slave_address, slave->custom.slvStartAddr, slave->custom.numOfSlv,slave->custom.respondingSlave);
//		slave->custom.isReadyToSend = 1;
	}else{
		mbHandle.txBufferSize = 0;
 800f6f0:	4b0c      	ldr	r3, [pc, #48]	; (800f724 <MBR_CUST_readIRDI+0x320>)
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	735a      	strb	r2, [r3, #13]
	}

	//New Implementation-30/07/2023
	MB_CUST_Build107RespAIDICallback(&mbHandle.txBuffer[mbHandle.txBufferSize], MB_CUST_DATA_BLOCK_SIZE);
 800f6f6:	4b0c      	ldr	r3, [pc, #48]	; (800f728 <MBR_CUST_readIRDI+0x324>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a0a      	ldr	r2, [pc, #40]	; (800f724 <MBR_CUST_readIRDI+0x320>)
 800f6fc:	6892      	ldr	r2, [r2, #8]
 800f6fe:	4909      	ldr	r1, [pc, #36]	; (800f724 <MBR_CUST_readIRDI+0x320>)
 800f700:	7b49      	ldrb	r1, [r1, #13]
 800f702:	440a      	add	r2, r1
 800f704:	210a      	movs	r1, #10
 800f706:	4610      	mov	r0, r2
 800f708:	4798      	blx	r3
	mbHandle.txBufferSize += MB_CUST_DATA_BLOCK_SIZE;
 800f70a:	4b06      	ldr	r3, [pc, #24]	; (800f724 <MBR_CUST_readIRDI+0x320>)
 800f70c:	7b5b      	ldrb	r3, [r3, #13]
 800f70e:	330a      	adds	r3, #10
 800f710:	b2da      	uxtb	r2, r3
 800f712:	4b04      	ldr	r3, [pc, #16]	; (800f724 <MBR_CUST_readIRDI+0x320>)
 800f714:	735a      	strb	r2, [r3, #13]
//		// set DI data to resp buffer
//		for(uint8_t i = 0; i < size; i++){
//			MB_appendToRespPDU(dataDI[i]);
//		}

		return MB_RS_255;				// if there is no exception
 800f716:	23ff      	movs	r3, #255	; 0xff
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	24001c44 	.word	0x24001c44
 800f724:	24005f80 	.word	0x24005f80
 800f728:	24005f60 	.word	0x24005f60

0800f72c <MBR_CUST_writeHRCO>:

/*
  * @brief To write Holding register & Coils output(CFC-109) and make the response PDU
  */

uint8_t MBR_CUST_writeHRCO(void){
 800f72c:	b598      	push	{r3, r4, r7, lr}
 800f72e:	af00      	add	r7, sp, #0
	/* write holding register-------------*/
//		uint16_t startAddress = MB_CUST_HR_AO1_ADDR;
//		uint16_t endAddress = startAddress + MB_CUST_NUM_OF_HR_AO-1;

//		uint8_t byteIndex = 0;
		if(MB_GetRTUMode()==MB_RTU_MODE_SLAVE){
 800f730:	f000 fb9e 	bl	800fe70 <MB_GetRTUMode>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d112      	bne.n	800f760 <MBR_CUST_writeHRCO+0x34>
//			byteIndex = (MB_FC_INDEX+3) + (MBRS_GetSlaveAddress()-MBRS_CUST_GetSlvStartAddr())*MB_CUST_DATA_BLOCK_SIZE;
			mbHandle.rxBufferSize= (MB_FC_INDEX+3) + (MBRS_GetSlaveAddress()-MBRS_CUST_GetSlvStartAddr())*MB_CUST_DATA_BLOCK_SIZE;
 800f73a:	f002 fc09 	bl	8011f50 <MBRS_GetSlaveAddress>
 800f73e:	4603      	mov	r3, r0
 800f740:	461c      	mov	r4, r3
 800f742:	f7ff fdf9 	bl	800f338 <MBRS_CUST_GetSlvStartAddr>
 800f746:	4603      	mov	r3, r0
 800f748:	1ae3      	subs	r3, r4, r3
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	461a      	mov	r2, r3
 800f74e:	0092      	lsls	r2, r2, #2
 800f750:	4413      	add	r3, r2
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	b2db      	uxtb	r3, r3
 800f756:	3304      	adds	r3, #4
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	4b0c      	ldr	r3, [pc, #48]	; (800f78c <MBR_CUST_writeHRCO+0x60>)
 800f75c:	731a      	strb	r2, [r3, #12]
 800f75e:	e002      	b.n	800f766 <MBR_CUST_writeHRCO+0x3a>
		}else{
//			byteIndex = 0;
			mbHandle.rxBufferSize=0;
 800f760:	4b0a      	ldr	r3, [pc, #40]	; (800f78c <MBR_CUST_writeHRCO+0x60>)
 800f762:	2200      	movs	r2, #0
 800f764:	731a      	strb	r2, [r3, #12]
		}
		//New Implementation-30/07/2023
		MB_CUST_Process109ReqAODOCallback(&mbHandle.rxBuffer[mbHandle.rxBufferSize], MB_CUST_DATA_BLOCK_SIZE);
 800f766:	4b0a      	ldr	r3, [pc, #40]	; (800f790 <MBR_CUST_writeHRCO+0x64>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a08      	ldr	r2, [pc, #32]	; (800f78c <MBR_CUST_writeHRCO+0x60>)
 800f76c:	6852      	ldr	r2, [r2, #4]
 800f76e:	4907      	ldr	r1, [pc, #28]	; (800f78c <MBR_CUST_writeHRCO+0x60>)
 800f770:	7b09      	ldrb	r1, [r1, #12]
 800f772:	440a      	add	r2, r1
 800f774:	210a      	movs	r1, #10
 800f776:	4610      	mov	r0, r2
 800f778:	4798      	blx	r3
		mbHandle.rxBufferSize += MB_CUST_DATA_BLOCK_SIZE;
 800f77a:	4b04      	ldr	r3, [pc, #16]	; (800f78c <MBR_CUST_writeHRCO+0x60>)
 800f77c:	7b1b      	ldrb	r3, [r3, #12]
 800f77e:	330a      	adds	r3, #10
 800f780:	b2da      	uxtb	r2, r3
 800f782:	4b02      	ldr	r3, [pc, #8]	; (800f78c <MBR_CUST_writeHRCO+0x60>)
 800f784:	731a      	strb	r2, [r3, #12]
////			MB_appendToRespPDU(MBRS_GetSlaveAddress());		// local slave address
//		 }else{
//
//		 }

		return MB_NRS_254;//MB_RS_255;
 800f786:	23fe      	movs	r3, #254	; 0xfe

}
 800f788:	4618      	mov	r0, r3
 800f78a:	bd98      	pop	{r3, r4, r7, pc}
 800f78c:	24005f80 	.word	0x24005f80
 800f790:	24005f5c 	.word	0x24005f5c

0800f794 <MB_CUST_attachProcess109ReqAODOCallback>:
}




void MB_CUST_attachProcess109ReqAODOCallback(uint8_t (*callbackFunc)(uint8_t *buff, uint16_t size)){
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]

	MB_CUST_Process109ReqAODOCallback = callbackFunc;
 800f79c:	4a04      	ldr	r2, [pc, #16]	; (800f7b0 <MB_CUST_attachProcess109ReqAODOCallback+0x1c>)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6013      	str	r3, [r2, #0]


}
 800f7a2:	bf00      	nop
 800f7a4:	370c      	adds	r7, #12
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	24005f5c 	.word	0x24005f5c

0800f7b4 <MB_CUST_attachBuild107RespAIDICallback>:
void MB_CUST_attachBuild107RespAIDICallback(uint8_t (*callbackFunc)(uint8_t *buff, uint16_t size)){
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
	MB_CUST_Build107RespAIDICallback = callbackFunc;
 800f7bc:	4a04      	ldr	r2, [pc, #16]	; (800f7d0 <MB_CUST_attachBuild107RespAIDICallback+0x1c>)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6013      	str	r3, [r2, #0]
}
 800f7c2:	bf00      	nop
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	24005f60 	.word	0x24005f60

0800f7d4 <MBRS_CUST_ClearMQ>:
/**
  * @brief  clear the msg queue
  * @param  que: Pointer to msg queue
  * @retval none
  */
void MBRS_CUST_ClearMQ(void){
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0

	 msgQ.startIndex = 0U;
 800f7da:	4b17      	ldr	r3, [pc, #92]	; (800f838 <MBRS_CUST_ClearMQ+0x64>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	701a      	strb	r2, [r3, #0]
	 msgQ.endIndex = 0U;
 800f7e0:	4b15      	ldr	r3, [pc, #84]	; (800f838 <MBRS_CUST_ClearMQ+0x64>)
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	705a      	strb	r2, [r3, #1]
	 msgQ.noOfMsg = 0U;
 800f7e6:	4b14      	ldr	r3, [pc, #80]	; (800f838 <MBRS_CUST_ClearMQ+0x64>)
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	709a      	strb	r2, [r3, #2]
	for (uint16_t i = 0U; i < MB_CUST_MQ_QUE_SIZE; i++){
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	80fb      	strh	r3, [r7, #6]
 800f7f0:	e019      	b.n	800f826 <MBRS_CUST_ClearMQ+0x52>


		 msgQ.msg[i].size = 0u;
 800f7f2:	88fa      	ldrh	r2, [r7, #6]
 800f7f4:	4910      	ldr	r1, [pc, #64]	; (800f838 <MBRS_CUST_ClearMQ+0x64>)
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	00db      	lsls	r3, r3, #3
 800f7fa:	4413      	add	r3, r2
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	440b      	add	r3, r1
 800f800:	3314      	adds	r3, #20
 800f802:	2200      	movs	r2, #0
 800f804:	801a      	strh	r2, [r3, #0]
		memset( msgQ.msg[i].buff, 0U, MB_CUST_MQ_MSG_SIZE);
 800f806:	88fa      	ldrh	r2, [r7, #6]
 800f808:	4613      	mov	r3, r2
 800f80a:	00db      	lsls	r3, r3, #3
 800f80c:	4413      	add	r3, r2
 800f80e:	005b      	lsls	r3, r3, #1
 800f810:	4a09      	ldr	r2, [pc, #36]	; (800f838 <MBRS_CUST_ClearMQ+0x64>)
 800f812:	4413      	add	r3, r2
 800f814:	3304      	adds	r3, #4
 800f816:	2210      	movs	r2, #16
 800f818:	2100      	movs	r1, #0
 800f81a:	4618      	mov	r0, r3
 800f81c:	f016 ff8a 	bl	8026734 <memset>
	for (uint16_t i = 0U; i < MB_CUST_MQ_QUE_SIZE; i++){
 800f820:	88fb      	ldrh	r3, [r7, #6]
 800f822:	3301      	adds	r3, #1
 800f824:	80fb      	strh	r3, [r7, #6]
 800f826:	88fb      	ldrh	r3, [r7, #6]
 800f828:	2b1f      	cmp	r3, #31
 800f82a:	d9e2      	bls.n	800f7f2 <MBRS_CUST_ClearMQ+0x1e>
	}
}
 800f82c:	bf00      	nop
 800f82e:	bf00      	nop
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	24001a00 	.word	0x24001a00

0800f83c <MB_DIAG_CheckDSFC>:
/**
  * @brief Diagnostics (FC-08)
  * @param none
  * @retval status code for exception and non exception
  */
uint8_t MB_DIAG_CheckDSFC(uint8_t subFuncCode){
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	4603      	mov	r3, r0
 800f844:	71fb      	strb	r3, [r7, #7]
	return ((subFuncCode >= MB_DSFC_RQD_0 && subFuncCode <= MB_DSFC_RDR_2)
			|| (subFuncCode == MB_DSFC_FLOM_4)
			|| (subFuncCode >= MB_DSFC_CCDR_10 && subFuncCode <= MB_DSFC_RSMC_14)
			|| (subFuncCode == MB_DSFC_RBCOC_18) || (subFuncCode == MB_DSFC_COCF_20));
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d90e      	bls.n	800f86a <MB_DIAG_CheckDSFC+0x2e>
			|| (subFuncCode == MB_DSFC_FLOM_4)
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	2b04      	cmp	r3, #4
 800f850:	d00b      	beq.n	800f86a <MB_DIAG_CheckDSFC+0x2e>
			|| (subFuncCode >= MB_DSFC_CCDR_10 && subFuncCode <= MB_DSFC_RSMC_14)
 800f852:	79fb      	ldrb	r3, [r7, #7]
 800f854:	2b09      	cmp	r3, #9
 800f856:	d902      	bls.n	800f85e <MB_DIAG_CheckDSFC+0x22>
 800f858:	79fb      	ldrb	r3, [r7, #7]
 800f85a:	2b0e      	cmp	r3, #14
 800f85c:	d905      	bls.n	800f86a <MB_DIAG_CheckDSFC+0x2e>
			|| (subFuncCode == MB_DSFC_RBCOC_18) || (subFuncCode == MB_DSFC_COCF_20));
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	2b12      	cmp	r3, #18
 800f862:	d002      	beq.n	800f86a <MB_DIAG_CheckDSFC+0x2e>
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	2b14      	cmp	r3, #20
 800f868:	d101      	bne.n	800f86e <MB_DIAG_CheckDSFC+0x32>
 800f86a:	2301      	movs	r3, #1
 800f86c:	e000      	b.n	800f870 <MB_DIAG_CheckDSFC+0x34>
 800f86e:	2300      	movs	r3, #0
 800f870:	b2db      	uxtb	r3, r3
}
 800f872:	4618      	mov	r0, r3
 800f874:	370c      	adds	r7, #12
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <MB_DIAG_CheckData>:
/**
  * @brief It checks the sub function code data field
  * @param none
  * @retval 0,1 whare, 0 means exception and 1 means no exception
  */
uint8_t MB_DIAG_CheckData(uint8_t subFuncCode, uint16_t dataValue){
 800f87e:	b480      	push	{r7}
 800f880:	b083      	sub	sp, #12
 800f882:	af00      	add	r7, sp, #0
 800f884:	4603      	mov	r3, r0
 800f886:	460a      	mov	r2, r1
 800f888:	71fb      	strb	r3, [r7, #7]
 800f88a:	4613      	mov	r3, r2
 800f88c:	80bb      	strh	r3, [r7, #4]

	if((subFuncCode != MB_DSFC_RQD_0) && (subFuncCode != MB_DSFC_CAID_3)){
 800f88e:	79fb      	ldrb	r3, [r7, #7]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d018      	beq.n	800f8c6 <MB_DIAG_CheckData+0x48>
 800f894:	79fb      	ldrb	r3, [r7, #7]
 800f896:	2b03      	cmp	r3, #3
 800f898:	d015      	beq.n	800f8c6 <MB_DIAG_CheckData+0x48>
		if(subFuncCode == MB_DSFC_RCO_1){
 800f89a:	79fb      	ldrb	r3, [r7, #7]
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d10b      	bne.n	800f8b8 <MB_DIAG_CheckData+0x3a>
			return ((dataValue==LOW) || (dataValue==HIGH));
 800f8a0:	88bb      	ldrh	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d003      	beq.n	800f8ae <MB_DIAG_CheckData+0x30>
 800f8a6:	88bb      	ldrh	r3, [r7, #4]
 800f8a8:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800f8ac:	d101      	bne.n	800f8b2 <MB_DIAG_CheckData+0x34>
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e000      	b.n	800f8b4 <MB_DIAG_CheckData+0x36>
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	e007      	b.n	800f8c8 <MB_DIAG_CheckData+0x4a>
		}else{
			return (dataValue==LOW);
 800f8b8:	88bb      	ldrh	r3, [r7, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	bf0c      	ite	eq
 800f8be:	2301      	moveq	r3, #1
 800f8c0:	2300      	movne	r3, #0
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	e000      	b.n	800f8c8 <MB_DIAG_CheckData+0x4a>
		}
	}else{
		return 0;
 800f8c6:	2300      	movs	r3, #0
	}
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <MB_DSF_ReturnQD>:
  * @brief It processes the diagnostics sub-function 00 Return Query Data,
  * the request data field is to be returned (looped back) in the response
  * @param none
  * @retval 0,1 whare, 0 means exception and 1 means no exception
  */
uint8_t MB_DSF_ReturnQD(MB_RTUDiag *diag){
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
	DBG_PRINT("\r\nRetQD 1");
 800f8dc:	4809      	ldr	r0, [pc, #36]	; (800f904 <MB_DSF_ReturnQD+0x30>)
 800f8de:	f7fe f963 	bl	800dba8 <DBG_PRINT>
	if(MB_getDiagData() >=0x0000 && MB_getDiagData() <=0xFFFF){
 800f8e2:	f000 f927 	bl	800fb34 <MB_getDiagData>
 800f8e6:	f000 f925 	bl	800fb34 <MB_getDiagData>
		DBG_PRINT("\r\nRetQD 2");
 800f8ea:	4807      	ldr	r0, [pc, #28]	; (800f908 <MB_DSF_ReturnQD+0x34>)
 800f8ec:	f7fe f95c 	bl	800dba8 <DBG_PRINT>
//		memcpy(mbSlave->txBuffer, mbSlave->rxBuffer, mbSlave->rxBufferSize);
//		mbSlave->txBufferSize = mbSlave->rxBufferSize;
		MB_CopyReqToRespPDU();
 800f8f0:	f000 fcaa 	bl	8010248 <MB_CopyReqToRespPDU>
		DBG_PRINT("\r\nRetQD 3");
 800f8f4:	4805      	ldr	r0, [pc, #20]	; (800f90c <MB_DSF_ReturnQD+0x38>)
 800f8f6:	f7fe f957 	bl	800dba8 <DBG_PRINT>
		return MB_RS_255;
 800f8fa:	23ff      	movs	r3, #255	; 0xff
	}else{
		return MB_EC_ILDV_3;
	}
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	0802a858 	.word	0x0802a858
 800f908:	0802a864 	.word	0x0802a864
 800f90c:	0802a870 	.word	0x0802a870

0800f910 <MB_DSF_RestartCO>:
/**
  * @brief It processes the diagnostics sub-function 01 Restart Communications Option
  * @param none
  * @retval 0,1 whare, 0 means exception and 1 means no exception
  */
uint8_t MB_DSF_RestartCO(MB_RTUDiag *diag){
 800f910:	b590      	push	{r4, r7, lr}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
		*/
		//mbSlave->listen_only_mode = 0U;		// bring the port out of the Listen Only Mode
		// TODO: to add function for disabling listen only mode
		// TODO: to add function for restart device
		// TODO: To initialize and restart serial port
		diag->comm_event_count = 0;			// Clear comm. event counter
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	819a      	strh	r2, [r3, #12]
		MB_ClearCounters(diag);					// to clear all the counters
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f910 	bl	800fb44 <MB_ClearCounters>
//		mbSlave->device_restart_flage = 1U;
		MB_SetRestartFlag();
 800f924:	f001 ff96 	bl	8011854 <MB_SetRestartFlag>
		MB_DIAG_SubFuncCallback(MB_DSFC_RCO_1, MB_getDiagData());
 800f928:	4b17      	ldr	r3, [pc, #92]	; (800f988 <MB_DSF_RestartCO+0x78>)
 800f92a:	681c      	ldr	r4, [r3, #0]
 800f92c:	f000 f902 	bl	800fb34 <MB_getDiagData>
 800f930:	4603      	mov	r3, r0
 800f932:	4619      	mov	r1, r3
 800f934:	2001      	movs	r0, #1
 800f936:	47a0      	blx	r4
		if(diag->listen_only_mode==1U){
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d115      	bne.n	800f96c <MB_DSF_RestartCO+0x5c>
			diag->listen_only_mode = 0U;// disable listen only mode
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2200      	movs	r2, #0
 800f944:	701a      	strb	r2, [r3, #0]

			FS_WriteIntNum(SA_MB_LISTEN_ONLY_MODE, diag->listen_only_mode); // TODO: to take the storing function in callback, store listen only mode flag to flash
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	4619      	mov	r1, r3
 800f94c:	2091      	movs	r0, #145	; 0x91
 800f94e:	f7f4 ffd3 	bl	80048f8 <FS_WriteIntNum>
			if(!MB_GetRestartFlag() || diag->listen_only_mode){
 800f952:	f001 ff73 	bl	801183c <MB_GetRestartFlag>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d003      	beq.n	800f964 <MB_DSF_RestartCO+0x54>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <MB_DSF_RestartCO+0x58>
				return MB_EC_SDV_4;
 800f964:	2304      	movs	r3, #4
 800f966:	e00b      	b.n	800f980 <MB_DSF_RestartCO+0x70>
			}else{
				return MB_NRS_254;
 800f968:	23fe      	movs	r3, #254	; 0xfe
 800f96a:	e009      	b.n	800f980 <MB_DSF_RestartCO+0x70>
			}
		}else{
			if(!MB_GetRestartFlag()){
 800f96c:	f001 ff66 	bl	801183c <MB_GetRestartFlag>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d101      	bne.n	800f97a <MB_DSF_RestartCO+0x6a>
				return MB_EC_SDV_4;
 800f976:	2304      	movs	r3, #4
 800f978:	e002      	b.n	800f980 <MB_DSF_RestartCO+0x70>
			}else{
				MB_CopyReqToRespPDU();
 800f97a:	f000 fc65 	bl	8010248 <MB_CopyReqToRespPDU>
				return MB_RS_255;
 800f97e:	23ff      	movs	r3, #255	; 0xff
			}
		}


}
 800f980:	4618      	mov	r0, r3
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	bd90      	pop	{r4, r7, pc}
 800f988:	24005f64 	.word	0x24005f64

0800f98c <MB_DSF_ReturnDR>:
/**
  * @brief It processes the diagnostics sub-function 02 Return Diagnostic Register,
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
uint8_t MB_DSF_ReturnDR(MB_RTUDiag *diag){
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
	// diagnostic registers are not define

	//uint16_t dataValue = mbSlave->diag_register;
	if(MB_GetDiagRegValue()>=0 && MB_GetDiagRegValue()<=MB_MAX_REGISTER_VALUE){
 800f994:	f001 ff6a 	bl	801186c <MB_GetDiagRegValue>
 800f998:	f001 ff68 	bl	801186c <MB_GetDiagRegValue>
		//HAL_UART_Transmit(&huart2, mbSlave->rxBuffer,  mbSlave->rxBufferSize, MB_TRANS_TIMEOUT);
		MB_DIAG_BuildResp2byteData(MB_GetDiagRegValue());
 800f99c:	f001 ff66 	bl	801186c <MB_GetDiagRegValue>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f000 f891 	bl	800faca <MB_DIAG_BuildResp2byteData>
		return MB_RS_255;
 800f9a8:	23ff      	movs	r3, #255	; 0xff
	}else{
		return MB_EC_SDV_4;
	}
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3708      	adds	r7, #8
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
	...

0800f9b4 <MB_DSF_ForceLOM>:
/**
  * @brief It processes the diagnostics sub-function 04 Force Listen Only Mode,
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
uint8_t MB_DSF_ForceLOM(MB_RTUDiag *diag){
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]

	/*
	 * TODO: to store the settings of listen only modes
	 * TODO: to turn off all the active communications
	 */
	diag->listen_only_mode = 1U;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2201      	movs	r2, #1
 800f9c0:	701a      	strb	r2, [r3, #0]
	if(diag->listen_only_mode){
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d009      	beq.n	800f9de <MB_DSF_ForceLOM+0x2a>
		MB_DIAG_SubFuncCallback(MB_DSFC_FLOM_4, diag->listen_only_mode);
 800f9ca:	4b07      	ldr	r3, [pc, #28]	; (800f9e8 <MB_DSF_ForceLOM+0x34>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	7812      	ldrb	r2, [r2, #0]
 800f9d2:	b292      	uxth	r2, r2
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	2004      	movs	r0, #4
 800f9d8:	4798      	blx	r3

		return MB_NRS_254;
 800f9da:	23fe      	movs	r3, #254	; 0xfe
 800f9dc:	e000      	b.n	800f9e0 <MB_DSF_ForceLOM+0x2c>
	}else{
		return MB_EC_SDV_4; //exception code 4
 800f9de:	2304      	movs	r3, #4

	}
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	24005f64 	.word	0x24005f64

0800f9ec <MB_DSF_ClearCDR>:
/**
  * @brief It processes the diagnostics sub-function 10 (0A Hex) Clear Counters and Diagnostic Register
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
uint8_t MB_DSF_ClearCDR(MB_RTUDiag *diag){
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]

	MB_ClearCounters(diag);
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 f8a5 	bl	800fb44 <MB_ClearCounters>
	diag->comm_event_count = 0;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	819a      	strh	r2, [r3, #12]
	MB_ClearDiagReg();
 800fa00:	f001 ff40 	bl	8011884 <MB_ClearDiagReg>
	if(MB_CheckCountersClear(diag)){
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f000 f8b9 	bl	800fb7c <MB_CheckCountersClear>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d003      	beq.n	800fa18 <MB_DSF_ClearCDR+0x2c>
		MB_CopyReqToRespPDU();
 800fa10:	f000 fc1a 	bl	8010248 <MB_CopyReqToRespPDU>
		return MB_RS_255;
 800fa14:	23ff      	movs	r3, #255	; 0xff
 800fa16:	e000      	b.n	800fa1a <MB_DSF_ClearCDR+0x2e>
	}else{
		return MB_EC_SDV_4;
 800fa18:	2304      	movs	r3, #4
	}

}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <MB_DSF_ReturnBMC>:
/**
  * @brief It processes the diagnostics sub-function 11 (0B Hex) return bus message count
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
uint8_t MB_DSF_ReturnBMC(MB_RTUDiag *diag){
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b082      	sub	sp, #8
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
	if(diag->bus_msg_count>=0 && diag->bus_msg_count<=MB_MAX_REGISTER_VALUE){
		//HAL_UART_Transmit(&huart2, mbSlave->rxBuffer,  mbSlave->rxBufferSize, MB_TRANS_TIMEOUT);
		MB_DIAG_BuildResp2byteData(diag->bus_msg_count);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	885b      	ldrh	r3, [r3, #2]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 f84b 	bl	800faca <MB_DIAG_BuildResp2byteData>
		return MB_RS_255;
 800fa34:	23ff      	movs	r3, #255	; 0xff
	}else{
		return MB_EC_SDV_4;
	}
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <MB_DSF_ReturnBCEC>:
/**
  * @brief It processes the diagnostics sub-function 12 (0C Hex) Return Bus Communication Error Count
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
uint8_t MB_DSF_ReturnBCEC(MB_RTUDiag *diag){
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b082      	sub	sp, #8
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
	if(diag->bus_com_err_count>=0 && diag->bus_com_err_count<=MB_MAX_REGISTER_VALUE){
		//HAL_UART_Transmit(&huart2, mbSlave->rxBuffer,  mbSlave->rxBufferSize, MB_TRANS_TIMEOUT);
		MB_DIAG_BuildResp2byteData(diag->bus_com_err_count);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	889b      	ldrh	r3, [r3, #4]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 f83d 	bl	800faca <MB_DIAG_BuildResp2byteData>
		return MB_RS_255;
 800fa50:	23ff      	movs	r3, #255	; 0xff
	}else{
		return MB_EC_SDV_4;
	}
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3708      	adds	r7, #8
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}

0800fa5a <MB_DSF_ReturnBEEC>:
/**
  * @brief It processes the diagnostics sub-function 13 (0D Hex) Return Bus Exception Error Count
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
uint8_t MB_DSF_ReturnBEEC(MB_RTUDiag *diag){
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	b082      	sub	sp, #8
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
	if(diag->bus_exp_err_count>=0 && diag->bus_exp_err_count<=MB_MAX_REGISTER_VALUE){
			//HAL_UART_Transmit(&huart2, mbSlave->rxBuffer,  mbSlave->rxBufferSize, MB_TRANS_TIMEOUT);
			MB_DIAG_BuildResp2byteData(diag->bus_exp_err_count);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	88db      	ldrh	r3, [r3, #6]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 f82f 	bl	800faca <MB_DIAG_BuildResp2byteData>
			return MB_RS_255;
 800fa6c:	23ff      	movs	r3, #255	; 0xff
		}else{
			return MB_EC_SDV_4;
		}
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <MB_DSF_ReturnSMC>:
/**
  * @brief It processes the diagnostics sub-function 14 (0E Hex) Return Server Message Count
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
uint8_t MB_DSF_ReturnSMC(MB_RTUDiag *diag){
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b082      	sub	sp, #8
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
	if(diag->slv_msg_count>=0 && diag->slv_msg_count<=MB_MAX_REGISTER_VALUE){
		//HAL_UART_Transmit(&huart2, mbSlave->rxBuffer,  mbSlave->rxBufferSize, MB_TRANS_TIMEOUT);
		MB_DIAG_BuildResp2byteData(diag->slv_msg_count);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	891b      	ldrh	r3, [r3, #8]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f000 f821 	bl	800faca <MB_DIAG_BuildResp2byteData>
		return MB_RS_255;
 800fa88:	23ff      	movs	r3, #255	; 0xff
	}else{
		return MB_EC_SDV_4;
	}
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3708      	adds	r7, #8
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <MB_DSF_ReturnBCOC>:
/**
  * @brief It processes the diagnostics sub-function 18 (12 Hex) Return Bus Character Overrun Count
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
uint8_t MB_DSF_ReturnBCOC(MB_RTUDiag *diag){
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b082      	sub	sp, #8
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
	if(diag->bus_char_ovrun_count>=0 && diag->bus_char_ovrun_count<=MB_MAX_REGISTER_VALUE){
		MB_DIAG_BuildResp2byteData(diag->bus_char_ovrun_count);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	895b      	ldrh	r3, [r3, #10]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f000 f813 	bl	800faca <MB_DIAG_BuildResp2byteData>
		return MB_RS_255;
 800faa4:	23ff      	movs	r3, #255	; 0xff
	}else{
		return MB_EC_SDV_4;
	}
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <MB_DSF_ClearOCF>:


uint8_t MB_DSF_ClearOCF(MB_RTUDiag *diag){
 800faae:	b580      	push	{r7, lr}
 800fab0:	b082      	sub	sp, #8
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
	if(diag->bus_char_ovrun_count>=0 && diag->bus_char_ovrun_count<=MB_MAX_REGISTER_VALUE){
		diag->bus_char_ovrun_count = 0;			// to reset the character overrun counter
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2200      	movs	r2, #0
 800faba:	815a      	strh	r2, [r3, #10]
		MB_CopyReqToRespPDU();						// it copies requested PDU to response PDU for echoing the requested data
 800fabc:	f000 fbc4 	bl	8010248 <MB_CopyReqToRespPDU>
		return MB_RS_255;
 800fac0:	23ff      	movs	r3, #255	; 0xff
	}else{
		return MB_EC_SDV_4;
	}
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <MB_DIAG_BuildResp2byteData>:
/**
  * @brief It builds the diagnostics sub-function respons for 2 byte data value
  * @param none
  * @retval none
  */
void MB_DIAG_BuildResp2byteData(uint16_t value){
 800faca:	b580      	push	{r7, lr}
 800facc:	b082      	sub	sp, #8
 800face:	af00      	add	r7, sp, #0
 800fad0:	4603      	mov	r3, r0
 800fad2:	80fb      	strh	r3, [r7, #6]
	MB_appendToRespPDU_SAFC();
 800fad4:	f000 fb80 	bl	80101d8 <MB_appendToRespPDU_SAFC>
	MB_appendToRespPDU_SFC();
 800fad8:	f000 f810 	bl	800fafc <MB_appendToRespPDU_SFC>
	MB_appendToRespPDU((uint8_t)(value >> 8u));
 800fadc:	88fb      	ldrh	r3, [r7, #6]
 800fade:	0a1b      	lsrs	r3, r3, #8
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	4618      	mov	r0, r3
 800fae6:	f000 fb5b 	bl	80101a0 <MB_appendToRespPDU>
	MB_appendToRespPDU((uint8_t)(value & MB_AND_MASK_16T8));
 800faea:	88fb      	ldrh	r3, [r7, #6]
 800faec:	b2db      	uxtb	r3, r3
 800faee:	4618      	mov	r0, r3
 800faf0:	f000 fb56 	bl	80101a0 <MB_appendToRespPDU>
//	MB_appendToRespPDU_CRC();
}
 800faf4:	bf00      	nop
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <MB_appendToRespPDU_SFC>:
/**
  * @brief It append sub-function code to response PDU
  * @param none
  * @retval none
  */
void MB_appendToRespPDU_SFC(void){
 800fafc:	b580      	push	{r7, lr}
 800fafe:	af00      	add	r7, sp, #0
	MB_appendToRespPDU((uint8_t)(MB_getDiagSFC()>>8u));
 800fb00:	f000 f810 	bl	800fb24 <MB_getDiagSFC>
 800fb04:	4603      	mov	r3, r0
 800fb06:	0a1b      	lsrs	r3, r3, #8
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f000 fb47 	bl	80101a0 <MB_appendToRespPDU>
	MB_appendToRespPDU((uint8_t)(MB_getDiagSFC()&MB_AND_MASK_16T8));
 800fb12:	f000 f807 	bl	800fb24 <MB_getDiagSFC>
 800fb16:	4603      	mov	r3, r0
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f000 fb40 	bl	80101a0 <MB_appendToRespPDU>
}
 800fb20:	bf00      	nop
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <MB_getDiagSFC>:
/**
  * @brief To get the diagnostics sub-function code from the requested PDU buffer
  * @param none
  * @retval returns the diagnostics sub-function code
  */
uint16_t MB_getDiagSFC(void){
 800fb24:	b580      	push	{r7, lr}
 800fb26:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+1);
 800fb28:	2002      	movs	r0, #2
 800fb2a:	f000 fddf 	bl	80106ec <MB_get2byteData>
 800fb2e:	4603      	mov	r3, r0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <MB_getDiagData>:
/**
  * @brief To get the diagnostics sub-function data from the requested PDU buffer
  * @param none
  * @retval returns the diagnostics sub-function data
  */
uint16_t MB_getDiagData(void){
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+3);
 800fb38:	2004      	movs	r0, #4
 800fb3a:	f000 fdd7 	bl	80106ec <MB_get2byteData>
 800fb3e:	4603      	mov	r3, r0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <MB_ClearCounters>:
/**
  * @brief To reset the modbus settings on restart,
  * @param none
  * @retval none
  */
void MB_ClearCounters(MB_RTUDiag *diag){
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
	diag->bus_msg_count = 0;				// the bus message counter resets to 0
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	805a      	strh	r2, [r3, #2]
	diag->slv_msg_count = 0;				// the slave message counter resets to 0
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	811a      	strh	r2, [r3, #8]
	diag->bus_com_err_count = 0;			// the  Bus Communication Error Count resets to 0
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	809a      	strh	r2, [r3, #4]
	diag->bus_exp_err_count = 0;			// the  Bus Exception Error Count resets to 0
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	80da      	strh	r2, [r3, #6]
	diag->bus_char_ovrun_count = 0;		// the  Bus Character Overrun Count resets to 0
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	815a      	strh	r2, [r3, #10]
	diag->comm_event_count = 0;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	819a      	strh	r2, [r3, #12]
}
 800fb70:	bf00      	nop
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <MB_CheckCountersClear>:
/**
  * @brief To reset the modbus settings on restart,
  * @param none
  * @retval none
  */
uint8_t MB_CheckCountersClear(MB_RTUDiag *diag){
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
	return ( diag->bus_msg_count == 0 		&& diag->slv_msg_count == 0 		&&
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	885b      	ldrh	r3, [r3, #2]
			diag->bus_com_err_count == 0 	&& diag->bus_exp_err_count == 0 	&&
			diag->bus_char_ovrun_count == 0 && diag->comm_event_count == 0);
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d115      	bne.n	800fbb8 <MB_CheckCountersClear+0x3c>
	return ( diag->bus_msg_count == 0 		&& diag->slv_msg_count == 0 		&&
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	891b      	ldrh	r3, [r3, #8]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d111      	bne.n	800fbb8 <MB_CheckCountersClear+0x3c>
			diag->bus_com_err_count == 0 	&& diag->bus_exp_err_count == 0 	&&
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	889b      	ldrh	r3, [r3, #4]
	return ( diag->bus_msg_count == 0 		&& diag->slv_msg_count == 0 		&&
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d10d      	bne.n	800fbb8 <MB_CheckCountersClear+0x3c>
			diag->bus_com_err_count == 0 	&& diag->bus_exp_err_count == 0 	&&
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	88db      	ldrh	r3, [r3, #6]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d109      	bne.n	800fbb8 <MB_CheckCountersClear+0x3c>
			diag->bus_char_ovrun_count == 0 && diag->comm_event_count == 0);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	895b      	ldrh	r3, [r3, #10]
			diag->bus_com_err_count == 0 	&& diag->bus_exp_err_count == 0 	&&
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d105      	bne.n	800fbb8 <MB_CheckCountersClear+0x3c>
			diag->bus_char_ovrun_count == 0 && diag->comm_event_count == 0);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	899b      	ldrh	r3, [r3, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d101      	bne.n	800fbb8 <MB_CheckCountersClear+0x3c>
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	e000      	b.n	800fbba <MB_CheckCountersClear+0x3e>
 800fbb8:	2300      	movs	r3, #0
 800fbba:	b2db      	uxtb	r3, r3
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	370c      	adds	r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <MB_DIAG_attachCallback>:



void MB_DIAG_attachCallback(uint8_t (*callbackFunc)(uint16_t subFuncCode, uint16_t value)){
 800fbc8:	b480      	push	{r7}
 800fbca:	b083      	sub	sp, #12
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
	MB_DIAG_SubFuncCallback = callbackFunc;
 800fbd0:	4a04      	ldr	r2, [pc, #16]	; (800fbe4 <MB_DIAG_attachCallback+0x1c>)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6013      	str	r3, [r2, #0]
}
 800fbd6:	bf00      	nop
 800fbd8:	370c      	adds	r7, #12
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	24005f64 	.word	0x24005f64

0800fbe8 <MBG_Init>:
  * @param none
  * @retval none
  */
static MB_Gateway *gw;

void MBG_Init(MB_Gateway *gway){
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
	gw = gway;
 800fbf0:	4a1b      	ldr	r2, [pc, #108]	; (800fc60 <MBG_Init+0x78>)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6013      	str	r3, [r2, #0]
	gw->clientId = 0;
 800fbf6:	4b1a      	ldr	r3, [pc, #104]	; (800fc60 <MBG_Init+0x78>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	601a      	str	r2, [r3, #0]
	gw->clientKey =  0 ;
 800fbfe:	4b18      	ldr	r3, [pc, #96]	; (800fc60 <MBG_Init+0x78>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2200      	movs	r2, #0
 800fc04:	809a      	strh	r2, [r3, #4]
	gw->rplyTimer.enable = 0;
 800fc06:	4b16      	ldr	r3, [pc, #88]	; (800fc60 <MBG_Init+0x78>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	761a      	strb	r2, [r3, #24]
	gw->rplyTimer.timer = 0;
 800fc0e:	4b14      	ldr	r3, [pc, #80]	; (800fc60 <MBG_Init+0x78>)
 800fc10:	6819      	ldr	r1, [r3, #0]
 800fc12:	f04f 0200 	mov.w	r2, #0
 800fc16:	f04f 0300 	mov.w	r3, #0
 800fc1a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	gw->tcpHeader.transId = 0;
 800fc1e:	4b10      	ldr	r3, [pc, #64]	; (800fc60 <MBG_Init+0x78>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2200      	movs	r2, #0
 800fc24:	80da      	strh	r2, [r3, #6]
	gw->tcpHeader.protocolId = 0;
 800fc26:	4b0e      	ldr	r3, [pc, #56]	; (800fc60 <MBG_Init+0x78>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	811a      	strh	r2, [r3, #8]
	gw->tcpHeader.length = 0;
 800fc2e:	4b0c      	ldr	r3, [pc, #48]	; (800fc60 <MBG_Init+0x78>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2200      	movs	r2, #0
 800fc34:	815a      	strh	r2, [r3, #10]
	gw->tcpHeader.unitId = 0;
 800fc36:	4b0a      	ldr	r3, [pc, #40]	; (800fc60 <MBG_Init+0x78>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	731a      	strb	r2, [r3, #12]
	gw->isBusy = 0;
 800fc3e:	4b08      	ldr	r3, [pc, #32]	; (800fc60 <MBG_Init+0x78>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gw->isReqSent = 0;
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <MBG_Init+0x78>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 800fc52:	bf00      	nop
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	24001c48 	.word	0x24001c48

0800fc64 <MBG_GetTCPHeader>:

void MBG_SetInstance(MB_Gateway *gway){
	 gw = gway;
}

MBTCP_Header *MBG_GetTCPHeader(void){
 800fc64:	b480      	push	{r7}
 800fc66:	af00      	add	r7, sp, #0
	return &gw->tcpHeader;
 800fc68:	4b03      	ldr	r3, [pc, #12]	; (800fc78 <MBG_GetTCPHeader+0x14>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	3306      	adds	r3, #6
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr
 800fc78:	24001c48 	.word	0x24001c48

0800fc7c <MBG_GetTCPClientId>:

void MBG_SetTCPHeader(MBTCP_Header *header){
	gw->tcpHeader = *header;
}

uint32_t MBG_GetTCPClientId(void){
 800fc7c:	b480      	push	{r7}
 800fc7e:	af00      	add	r7, sp, #0
	return gw->clientId;
 800fc80:	4b03      	ldr	r3, [pc, #12]	; (800fc90 <MBG_GetTCPClientId+0x14>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	681b      	ldr	r3, [r3, #0]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr
 800fc90:	24001c48 	.word	0x24001c48

0800fc94 <MBG_GetTCPClientKey>:

void MBG_SetTCPClientId(uint32_t id){
	gw->clientId = id;
}

uint32_t MBG_GetTCPClientKey(void){
 800fc94:	b480      	push	{r7}
 800fc96:	af00      	add	r7, sp, #0
	return gw->clientKey;
 800fc98:	4b03      	ldr	r3, [pc, #12]	; (800fca8 <MBG_GetTCPClientKey+0x14>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	889b      	ldrh	r3, [r3, #4]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr
 800fca8:	24001c48 	.word	0x24001c48

0800fcac <MBG_ConvertRTU2TCP>:
  * @brief Convert RTU protocol to TCP protocol
  * @param rtuBuffer: pointer to the rtu buffer, max size up to 256 bytes
  * @param tcpmBuffer: pointer to the rtu buffer,
  * @retval error status: 0 = Error, 1 = ok
  */
uint16_t MBG_ConvertRTU2TCP(uint8_t *tcpmBuffer, uint8_t *rtuBuffer, uint16_t rtuBufferSize){
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b086      	sub	sp, #24
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	80fb      	strh	r3, [r7, #6]
//	MBTOOL_SplitU16ToBytes(&tcpmBuffer[MBTCP_INDX_LENGTH_HI], &tcpmBuffer[MBTCP_INDX_LENGTH_LO], rtuBufferSize);	// set the length of the rtu packet
	uint8_t startPos = MBTCP_INDX_UNIT_ID;		// start position from where bytes to be copied to the rtu buffer from tcp buffer
 800fcba:	2306      	movs	r3, #6
 800fcbc:	75fb      	strb	r3, [r7, #23]
	if(rtuBufferSize > 2 && rtuBufferSize <= MBS_RTU_PDU_MAX_SIZE){
 800fcbe:	88fb      	ldrh	r3, [r7, #6]
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d910      	bls.n	800fce6 <MBG_ConvertRTU2TCP+0x3a>
 800fcc4:	88fb      	ldrh	r3, [r7, #6]
 800fcc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcca:	d80c      	bhi.n	800fce6 <MBG_ConvertRTU2TCP+0x3a>
		memcpy(&tcpmBuffer[startPos], rtuBuffer, rtuBufferSize-2);
 800fccc:	7dfb      	ldrb	r3, [r7, #23]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	18d0      	adds	r0, r2, r3
 800fcd2:	88fb      	ldrh	r3, [r7, #6]
 800fcd4:	3b02      	subs	r3, #2
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	68b9      	ldr	r1, [r7, #8]
 800fcda:	f016 fd1d 	bl	8026718 <memcpy>
		return rtuBufferSize-2;
 800fcde:	88fb      	ldrh	r3, [r7, #6]
 800fce0:	3b02      	subs	r3, #2
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	e000      	b.n	800fce8 <MBG_ConvertRTU2TCP+0x3c>
	}else{
		return MB_ERROR;
 800fce6:	2300      	movs	r3, #0
	}
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3718      	adds	r7, #24
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <MBG_StartTimeout>:

void MBG_StartTimeout(MB_ReplyTimer *rplyTimer){
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
	rplyTimer->timer = TS_GetUS(&timStamp);
 800fcf8:	4807      	ldr	r0, [pc, #28]	; (800fd18 <MBG_StartTimeout+0x28>)
 800fcfa:	f7fb f935 	bl	800af68 <TS_GetUS>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	460b      	mov	r3, r1
 800fd02:	6879      	ldr	r1, [r7, #4]
 800fd04:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rplyTimer->enable = 1;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	701a      	strb	r2, [r3, #0]
}
 800fd0e:	bf00      	nop
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	24005168 	.word	0x24005168

0800fd1c <MBG_StopTimeout>:

void MBG_StopTimeout(MB_ReplyTimer *rplyTimer){
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
	rplyTimer->timer = 0;
 800fd24:	6879      	ldr	r1, [r7, #4]
 800fd26:	f04f 0200 	mov.w	r2, #0
 800fd2a:	f04f 0300 	mov.w	r3, #0
 800fd2e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rplyTimer->enable = 0;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	701a      	strb	r2, [r3, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <MBG_ResetTimeout>:

void MBG_ResetTimeout(MB_ReplyTimer *rplyTimer){
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
	rplyTimer->timer = TS_GetUS(&timStamp);
 800fd4c:	4805      	ldr	r0, [pc, #20]	; (800fd64 <MBG_ResetTimeout+0x20>)
 800fd4e:	f7fb f90b 	bl	800af68 <TS_GetUS>
 800fd52:	4602      	mov	r2, r0
 800fd54:	460b      	mov	r3, r1
 800fd56:	6879      	ldr	r1, [r7, #4]
 800fd58:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 800fd5c:	bf00      	nop
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	24005168 	.word	0x24005168

0800fd68 <MBG_CheckTimeout>:

uint8_t MBG_CheckTimeout(MB_ReplyTimer *rplyTimer){
 800fd68:	b5b0      	push	{r4, r5, r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
	if(!rplyTimer->enable) return MB_ERROR;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d101      	bne.n	800fd7c <MBG_CheckTimeout+0x14>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	e01e      	b.n	800fdba <MBG_CheckTimeout+0x52>

	if((uint64_t)fabsl((long double)(TS_GetUS(&timStamp)-rplyTimer->timer)) >= (uint64_t)rplyTimer->timeout){
 800fd7c:	4811      	ldr	r0, [pc, #68]	; (800fdc4 <MBG_CheckTimeout+0x5c>)
 800fd7e:	f7fb f8f3 	bl	800af68 <TS_GetUS>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800fd88:	1a84      	subs	r4, r0, r2
 800fd8a:	eb61 0503 	sbc.w	r5, r1, r3
 800fd8e:	4620      	mov	r0, r4
 800fd90:	4629      	mov	r1, r5
 800fd92:	f7f0 fc9b 	bl	80006cc <__aeabi_ul2d>
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4610      	mov	r0, r2
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	f7f0 fce3 	bl	8000768 <__aeabi_d2ulz>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	461a      	mov	r2, r3
 800fda8:	f04f 0300 	mov.w	r3, #0
 800fdac:	4299      	cmp	r1, r3
 800fdae:	bf08      	it	eq
 800fdb0:	4290      	cmpeq	r0, r2
 800fdb2:	d301      	bcc.n	800fdb8 <MBG_CheckTimeout+0x50>
//		gWay->isTimeoutStarted = 0;
		return MB_OK;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e000      	b.n	800fdba <MBG_CheckTimeout+0x52>

	}
	return MB_ERROR;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bdb0      	pop	{r4, r5, r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	24005168 	.word	0x24005168

0800fdc8 <MBG_SendToSerial>:
  * @brief send to the serial line
  * @param rtuBuffer: pointer to the rtu buffer, max size up to 256 bytes
  * @param tcpmBuffer: pointer to the rtu buffer,
  * @retval error status: 0 = Error, 1 = ok
  */
uint8_t MBG_SendToSerial(uint8_t *buffer, uint16_t size){
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	807b      	strh	r3, [r7, #2]
	MBS_Serial *serial;
	serial = MBS_GetInstance();
 800fdd4:	f002 fa9a 	bl	801230c <MBS_GetInstance>
 800fdd8:	60f8      	str	r0, [r7, #12]
	if(!serial->isBusy){
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	7d1b      	ldrb	r3, [r3, #20]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d11b      	bne.n	800fe1a <MBG_SendToSerial+0x52>
		serial->isBusy = 1;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2201      	movs	r2, #1
 800fde6:	751a      	strb	r2, [r3, #20]

		memcpy(serial->txBuff, buffer, size);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f503 7391 	add.w	r3, r3, #290	; 0x122
 800fdee:	887a      	ldrh	r2, [r7, #2]
 800fdf0:	6879      	ldr	r1, [r7, #4]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f016 fc90 	bl	8026718 <memcpy>
		serial->txBuffSize = size;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	887a      	ldrh	r2, [r7, #2]
 800fdfc:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224

		if( MBS_Send(serial) != MB_OK){
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f002 fc25 	bl	8012650 <MBS_Send>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d004      	beq.n	800fe16 <MBG_SendToSerial+0x4e>
			serial->isBusy = 0;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	751a      	strb	r2, [r3, #20]
			return MB_ERROR;
 800fe12:	2300      	movs	r3, #0
 800fe14:	e002      	b.n	800fe1c <MBG_SendToSerial+0x54>
		}
//		MBG_StartTimeout(gw);
		return MB_OK;
 800fe16:	2301      	movs	r3, #1
 800fe18:	e000      	b.n	800fe1c <MBG_SendToSerial+0x54>
	}else{
		return MB_ERROR;
 800fe1a:	2300      	movs	r3, #0
	}

}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <__NVIC_SystemReset>:
{
 800fe24:	b480      	push	{r7}
 800fe26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800fe28:	f3bf 8f4f 	dsb	sy
}
 800fe2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800fe2e:	4b06      	ldr	r3, [pc, #24]	; (800fe48 <__NVIC_SystemReset+0x24>)
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800fe36:	4904      	ldr	r1, [pc, #16]	; (800fe48 <__NVIC_SystemReset+0x24>)
 800fe38:	4b04      	ldr	r3, [pc, #16]	; (800fe4c <__NVIC_SystemReset+0x28>)
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fe3e:	f3bf 8f4f 	dsb	sy
}
 800fe42:	bf00      	nop
    __NOP();
 800fe44:	bf00      	nop
 800fe46:	e7fd      	b.n	800fe44 <__NVIC_SystemReset+0x20>
 800fe48:	e000ed00 	.word	0xe000ed00
 800fe4c:	05fa0004 	.word	0x05fa0004

0800fe50 <MB_SetRTUMode>:
	//MB_DIAG_Init(_mbHandle);
	mbHandle.is_req_cpy_to_resp = 0U;
	mbHandle.diag.listen_only_mode = 0;
}

void MB_SetRTUMode(MB_RTUMode mode){
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	4603      	mov	r3, r0
 800fe58:	71fb      	strb	r3, [r7, #7]
	mbHandle.mode = mode;
 800fe5a:	4a04      	ldr	r2, [pc, #16]	; (800fe6c <MB_SetRTUMode+0x1c>)
 800fe5c:	79fb      	ldrb	r3, [r7, #7]
 800fe5e:	7013      	strb	r3, [r2, #0]
}
 800fe60:	bf00      	nop
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr
 800fe6c:	24005f80 	.word	0x24005f80

0800fe70 <MB_GetRTUMode>:

MB_RTUMode MB_GetRTUMode(void){
 800fe70:	b480      	push	{r7}
 800fe72:	af00      	add	r7, sp, #0
	return mbHandle.mode;
 800fe74:	4b03      	ldr	r3, [pc, #12]	; (800fe84 <MB_GetRTUMode+0x14>)
 800fe76:	781b      	ldrb	r3, [r3, #0]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
 800fe84:	24005f80 	.word	0x24005f80

0800fe88 <MB_GetHandlerInstance>:

void MB_SetHandlerInstance(MB_RTUHandler *_mbHandle){
	mbHandle = *_mbHandle;
}

MB_RTUHandler *MB_GetHandlerInstance(void){
 800fe88:	b480      	push	{r7}
 800fe8a:	af00      	add	r7, sp, #0
	return &mbHandle;
 800fe8c:	4b02      	ldr	r3, [pc, #8]	; (800fe98 <MB_GetHandlerInstance+0x10>)
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr
 800fe98:	24005f80 	.word	0x24005f80

0800fe9c <MB_setReqBuff>:
  * @brief sets requested modbus pdu buffer
  * @param buff: pdu buffer pointer
  * @param size: pdu buffer size
  * @retval none
  */
void MB_setReqBuff(uint8_t *buff, uint8_t size){
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	460b      	mov	r3, r1
 800fea6:	70fb      	strb	r3, [r7, #3]
	mbHandle.rxBuffer = buff;
 800fea8:	4a05      	ldr	r2, [pc, #20]	; (800fec0 <MB_setReqBuff+0x24>)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6053      	str	r3, [r2, #4]
	mbHandle.rxBufferSize = size;
 800feae:	4a04      	ldr	r2, [pc, #16]	; (800fec0 <MB_setReqBuff+0x24>)
 800feb0:	78fb      	ldrb	r3, [r7, #3]
 800feb2:	7313      	strb	r3, [r2, #12]

}
 800feb4:	bf00      	nop
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	24005f80 	.word	0x24005f80

0800fec4 <MB_setRespBuff>:
  * @param buff: pdu buffer pointer
  * @param size: pdu buffer size
  * @retval none
  */

void MB_setRespBuff(uint8_t *buff){
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
	mbHandle.txBuffer = buff;
 800fecc:	4a04      	ldr	r2, [pc, #16]	; (800fee0 <MB_setRespBuff+0x1c>)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6093      	str	r3, [r2, #8]
}
 800fed2:	bf00      	nop
 800fed4:	370c      	adds	r7, #12
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop
 800fee0:	24005f80 	.word	0x24005f80

0800fee4 <MB_getRespBuffSize>:
/*
 * get response buffer size
 * */
uint8_t MB_getRespBuffSize(void){
 800fee4:	b480      	push	{r7}
 800fee6:	af00      	add	r7, sp, #0
	return mbHandle.txBufferSize;
 800fee8:	4b03      	ldr	r3, [pc, #12]	; (800fef8 <MB_getRespBuffSize+0x14>)
 800feea:	7b5b      	ldrb	r3, [r3, #13]
}
 800feec:	4618      	mov	r0, r3
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	24005f80 	.word	0x24005f80

0800fefc <MB_executeRequest>:
/**
  * @brief To execute the request which is received from the master
  * @param functionCode = the request function code
  * @retval 2-6,8,10-11, and 255; where 2-6,8 & 10-11 = exception code, and 255 = no exception occurred
  */
uint8_t MB_executeRequest(uint8_t functionCode){
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	4603      	mov	r3, r0
 800ff04:	71fb      	strb	r3, [r7, #7]
	uint8_t exeStatus = MB_RS_255;
 800ff06:	23ff      	movs	r3, #255	; 0xff
 800ff08:	73fb      	strb	r3, [r7, #15]
	mbHandle.txBufferSize = 0u;
 800ff0a:	4b9c      	ldr	r3, [pc, #624]	; (801017c <MB_executeRequest+0x280>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	735a      	strb	r2, [r3, #13]
	switch (functionCode) {
 800ff10:	79fb      	ldrb	r3, [r7, #7]
 800ff12:	3b01      	subs	r3, #1
 800ff14:	2b6c      	cmp	r3, #108	; 0x6c
 800ff16:	f200 8128 	bhi.w	801016a <MB_executeRequest+0x26e>
 800ff1a:	a201      	add	r2, pc, #4	; (adr r2, 800ff20 <MB_executeRequest+0x24>)
 800ff1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff20:	080100d5 	.word	0x080100d5
 800ff24:	080100df 	.word	0x080100df
 800ff28:	080100e9 	.word	0x080100e9
 800ff2c:	080100f3 	.word	0x080100f3
 800ff30:	080100fd 	.word	0x080100fd
 800ff34:	08010107 	.word	0x08010107
 800ff38:	08010111 	.word	0x08010111
 800ff3c:	0801011b 	.word	0x0801011b
 800ff40:	0801016b 	.word	0x0801016b
 800ff44:	0801016b 	.word	0x0801016b
 800ff48:	08010125 	.word	0x08010125
 800ff4c:	0801016b 	.word	0x0801016b
 800ff50:	0801016b 	.word	0x0801016b
 800ff54:	0801016b 	.word	0x0801016b
 800ff58:	0801012f 	.word	0x0801012f
 800ff5c:	08010139 	.word	0x08010139
 800ff60:	0801016b 	.word	0x0801016b
 800ff64:	0801016b 	.word	0x0801016b
 800ff68:	0801016b 	.word	0x0801016b
 800ff6c:	0801016b 	.word	0x0801016b
 800ff70:	0801016b 	.word	0x0801016b
 800ff74:	08010143 	.word	0x08010143
 800ff78:	0801014d 	.word	0x0801014d
 800ff7c:	0801016b 	.word	0x0801016b
 800ff80:	0801016b 	.word	0x0801016b
 800ff84:	0801016b 	.word	0x0801016b
 800ff88:	0801016b 	.word	0x0801016b
 800ff8c:	0801016b 	.word	0x0801016b
 800ff90:	0801016b 	.word	0x0801016b
 800ff94:	0801016b 	.word	0x0801016b
 800ff98:	0801016b 	.word	0x0801016b
 800ff9c:	0801016b 	.word	0x0801016b
 800ffa0:	0801016b 	.word	0x0801016b
 800ffa4:	0801016b 	.word	0x0801016b
 800ffa8:	0801016b 	.word	0x0801016b
 800ffac:	0801016b 	.word	0x0801016b
 800ffb0:	0801016b 	.word	0x0801016b
 800ffb4:	0801016b 	.word	0x0801016b
 800ffb8:	0801016b 	.word	0x0801016b
 800ffbc:	0801016b 	.word	0x0801016b
 800ffc0:	0801016b 	.word	0x0801016b
 800ffc4:	0801016b 	.word	0x0801016b
 800ffc8:	0801016b 	.word	0x0801016b
 800ffcc:	0801016b 	.word	0x0801016b
 800ffd0:	0801016b 	.word	0x0801016b
 800ffd4:	0801016b 	.word	0x0801016b
 800ffd8:	0801016b 	.word	0x0801016b
 800ffdc:	0801016b 	.word	0x0801016b
 800ffe0:	0801016b 	.word	0x0801016b
 800ffe4:	0801016b 	.word	0x0801016b
 800ffe8:	0801016b 	.word	0x0801016b
 800ffec:	0801016b 	.word	0x0801016b
 800fff0:	0801016b 	.word	0x0801016b
 800fff4:	0801016b 	.word	0x0801016b
 800fff8:	0801016b 	.word	0x0801016b
 800fffc:	0801016b 	.word	0x0801016b
 8010000:	0801016b 	.word	0x0801016b
 8010004:	0801016b 	.word	0x0801016b
 8010008:	0801016b 	.word	0x0801016b
 801000c:	0801016b 	.word	0x0801016b
 8010010:	0801016b 	.word	0x0801016b
 8010014:	0801016b 	.word	0x0801016b
 8010018:	0801016b 	.word	0x0801016b
 801001c:	0801016b 	.word	0x0801016b
 8010020:	0801016b 	.word	0x0801016b
 8010024:	0801016b 	.word	0x0801016b
 8010028:	0801016b 	.word	0x0801016b
 801002c:	0801016b 	.word	0x0801016b
 8010030:	0801016b 	.word	0x0801016b
 8010034:	0801016b 	.word	0x0801016b
 8010038:	0801016b 	.word	0x0801016b
 801003c:	0801016b 	.word	0x0801016b
 8010040:	0801016b 	.word	0x0801016b
 8010044:	0801016b 	.word	0x0801016b
 8010048:	0801016b 	.word	0x0801016b
 801004c:	0801016b 	.word	0x0801016b
 8010050:	0801016b 	.word	0x0801016b
 8010054:	0801016b 	.word	0x0801016b
 8010058:	0801016b 	.word	0x0801016b
 801005c:	0801016b 	.word	0x0801016b
 8010060:	0801016b 	.word	0x0801016b
 8010064:	0801016b 	.word	0x0801016b
 8010068:	0801016b 	.word	0x0801016b
 801006c:	0801016b 	.word	0x0801016b
 8010070:	0801016b 	.word	0x0801016b
 8010074:	0801016b 	.word	0x0801016b
 8010078:	0801016b 	.word	0x0801016b
 801007c:	0801016b 	.word	0x0801016b
 8010080:	0801016b 	.word	0x0801016b
 8010084:	0801016b 	.word	0x0801016b
 8010088:	0801016b 	.word	0x0801016b
 801008c:	0801016b 	.word	0x0801016b
 8010090:	0801016b 	.word	0x0801016b
 8010094:	0801016b 	.word	0x0801016b
 8010098:	0801016b 	.word	0x0801016b
 801009c:	0801016b 	.word	0x0801016b
 80100a0:	0801016b 	.word	0x0801016b
 80100a4:	0801016b 	.word	0x0801016b
 80100a8:	0801016b 	.word	0x0801016b
 80100ac:	0801016b 	.word	0x0801016b
 80100b0:	0801016b 	.word	0x0801016b
 80100b4:	0801016b 	.word	0x0801016b
 80100b8:	0801016b 	.word	0x0801016b
 80100bc:	0801016b 	.word	0x0801016b
 80100c0:	0801016b 	.word	0x0801016b
 80100c4:	0801016b 	.word	0x0801016b
 80100c8:	08010157 	.word	0x08010157
 80100cc:	0801016b 	.word	0x0801016b
 80100d0:	08010161 	.word	0x08010161
		case MB_FC_RC_01:
			exeStatus = MB_readCoils();
 80100d4:	f000 fba4 	bl	8010820 <MB_readCoils>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
			break;
 80100dc:	e048      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_RDI_02:
			exeStatus = MB_readDI();
 80100de:	f000 fc27 	bl	8010930 <MB_readDI>
 80100e2:	4603      	mov	r3, r0
 80100e4:	73fb      	strb	r3, [r7, #15]
			break;
 80100e6:	e043      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_RHR_03:
			exeStatus = MB_readHR();
 80100e8:	f000 fcae 	bl	8010a48 <MB_readHR>
 80100ec:	4603      	mov	r3, r0
 80100ee:	73fb      	strb	r3, [r7, #15]
			break;
 80100f0:	e03e      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_RIR_04:
			exeStatus = MB_readIR();
 80100f2:	f000 fd3f 	bl	8010b74 <MB_readIR>
 80100f6:	4603      	mov	r3, r0
 80100f8:	73fb      	strb	r3, [r7, #15]
			break;
 80100fa:	e039      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_WSC_05:
			exeStatus = MB_writeSC();
 80100fc:	f000 fdc6 	bl	8010c8c <MB_writeSC>
 8010100:	4603      	mov	r3, r0
 8010102:	73fb      	strb	r3, [r7, #15]
			break;
 8010104:	e034      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_WSR_06:
			exeStatus = MB_writeSHR();
 8010106:	f000 fdf3 	bl	8010cf0 <MB_writeSHR>
 801010a:	4603      	mov	r3, r0
 801010c:	73fb      	strb	r3, [r7, #15]
			break;
 801010e:	e02f      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_RES_07:
			exeStatus = MB_readES();
 8010110:	f000 fe30 	bl	8010d74 <MB_readES>
 8010114:	4603      	mov	r3, r0
 8010116:	73fb      	strb	r3, [r7, #15]
			break;
 8010118:	e02a      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_DIAG_08:

			exeStatus = MB_diagnostics();					// this function is being used only for modbus serial line
 801011a:	f000 fe3d 	bl	8010d98 <MB_diagnostics>
 801011e:	4603      	mov	r3, r0
 8010120:	73fb      	strb	r3, [r7, #15]
			break;
 8010122:	e025      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_GCEC_11:
			exeStatus = MB_getCEC();						// this function is being used only for modbus serial line
 8010124:	f000 fedc 	bl	8010ee0 <MB_getCEC>
 8010128:	4603      	mov	r3, r0
 801012a:	73fb      	strb	r3, [r7, #15]
			break;
 801012c:	e020      	b.n	8010170 <MB_executeRequest+0x274>
//		case MB_FC_GCEL_12:
//
//			break;
		case MB_FC_WMC_15:
			exeStatus = MB_writeMC();
 801012e:	f000 ff13 	bl	8010f58 <MB_writeMC>
 8010132:	4603      	mov	r3, r0
 8010134:	73fb      	strb	r3, [r7, #15]
			break;
 8010136:	e01b      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_WMR_16:
			exeStatus = MB_writeMHR();
 8010138:	f000 ffb8 	bl	80110ac <MB_writeMHR>
 801013c:	4603      	mov	r3, r0
 801013e:	73fb      	strb	r3, [r7, #15]
			break;
 8010140:	e016      	b.n	8010170 <MB_executeRequest+0x274>
//			break;
//		case MB_FC_WFR_21:
//
//			break;
		case MB_FC_MWR_22:
			exeStatus = MB_writeHRM();
 8010142:	f001 f839 	bl	80111b8 <MB_writeHRM>
 8010146:	4603      	mov	r3, r0
 8010148:	73fb      	strb	r3, [r7, #15]
			break;
 801014a:	e011      	b.n	8010170 <MB_executeRequest+0x274>
		case MB_FC_RWMR_23:
			exeStatus = MB_readWriteMHR();
 801014c:	f001 f876 	bl	801123c <MB_readWriteMHR>
 8010150:	4603      	mov	r3, r0
 8010152:	73fb      	strb	r3, [r7, #15]
			break;
 8010154:	e00c      	b.n	8010170 <MB_executeRequest+0x274>
//		case MB_CFC_WMR_106:
//
//			break;
		case MB_CFC_RIRDI_107:

			exeStatus = MBR_CUST_readIRDI();
 8010156:	f7ff f955 	bl	800f404 <MBR_CUST_readIRDI>
 801015a:	4603      	mov	r3, r0
 801015c:	73fb      	strb	r3, [r7, #15]
//			DEBUG_SPRINT("\r\n4.rd ");
			break;
 801015e:	e007      	b.n	8010170 <MB_executeRequest+0x274>
//		case MB_CFC_RHRCO_108:
//
//			break;
		case MB_CFC_WMHRCO_109:
			exeStatus = MBR_CUST_writeHRCO();
 8010160:	f7ff fae4 	bl	800f72c <MBR_CUST_writeHRCO>
 8010164:	4603      	mov	r3, r0
 8010166:	73fb      	strb	r3, [r7, #15]
			break;
 8010168:	e002      	b.n	8010170 <MB_executeRequest+0x274>
//		case MB_CFC_RMHRIRCODI_110:
//
//			break;
		default:
			exeStatus = MB_EC_ILF_1;
 801016a:	2301      	movs	r3, #1
 801016c:	73fb      	strb	r3, [r7, #15]
			break;
 801016e:	bf00      	nop
	}
	return exeStatus;
 8010170:	7bfb      	ldrb	r3, [r7, #15]
}
 8010172:	4618      	mov	r0, r3
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	24005f80 	.word	0x24005f80

08010180 <MB_ClearBuffer>:
/**
  * @brief To clear the modbus PDU buffer,
  * @param none
  * @retval none
  */
void MB_ClearBuffer(void){
 8010180:	b480      	push	{r7}
 8010182:	af00      	add	r7, sp, #0
//	memset(mbHandle.rxBuffer,0U,mbHandle.rxBufferSize);
//	memset(mbHandle.txBuffer,0U,mbHandle.txBufferSize);
	mbHandle.rxBufferSize = 0U;
 8010184:	4b05      	ldr	r3, [pc, #20]	; (801019c <MB_ClearBuffer+0x1c>)
 8010186:	2200      	movs	r2, #0
 8010188:	731a      	strb	r2, [r3, #12]
	mbHandle.txBufferSize = 0U;
 801018a:	4b04      	ldr	r3, [pc, #16]	; (801019c <MB_ClearBuffer+0x1c>)
 801018c:	2200      	movs	r2, #0
 801018e:	735a      	strb	r2, [r3, #13]
}
 8010190:	bf00      	nop
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	24005f80 	.word	0x24005f80

080101a0 <MB_appendToRespPDU>:
/**
  * @brief It append data to response PDU
  * @param data, data byte to append to response PDU
  * @retval none
  */
void MB_appendToRespPDU(uint8_t data){
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	4603      	mov	r3, r0
 80101a8:	71fb      	strb	r3, [r7, #7]
	mbHandle.txBuffer[mbHandle.txBufferSize++] = data;
 80101aa:	4b0a      	ldr	r3, [pc, #40]	; (80101d4 <MB_appendToRespPDU+0x34>)
 80101ac:	689a      	ldr	r2, [r3, #8]
 80101ae:	4b09      	ldr	r3, [pc, #36]	; (80101d4 <MB_appendToRespPDU+0x34>)
 80101b0:	7b5b      	ldrb	r3, [r3, #13]
 80101b2:	1c59      	adds	r1, r3, #1
 80101b4:	b2c8      	uxtb	r0, r1
 80101b6:	4907      	ldr	r1, [pc, #28]	; (80101d4 <MB_appendToRespPDU+0x34>)
 80101b8:	7348      	strb	r0, [r1, #13]
 80101ba:	4413      	add	r3, r2
 80101bc:	79fa      	ldrb	r2, [r7, #7]
 80101be:	701a      	strb	r2, [r3, #0]
	mbHandle.is_req_cpy_to_resp = 0U;
 80101c0:	4b04      	ldr	r3, [pc, #16]	; (80101d4 <MB_appendToRespPDU+0x34>)
 80101c2:	2200      	movs	r2, #0
 80101c4:	739a      	strb	r2, [r3, #14]
}
 80101c6:	bf00      	nop
 80101c8:	370c      	adds	r7, #12
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop
 80101d4:	24005f80 	.word	0x24005f80

080101d8 <MB_appendToRespPDU_SAFC>:
/**
  * @brief It append slave address and function code to response PDU
  * @param none
  * @retval none
  */
void MB_appendToRespPDU_SAFC(void){
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
	MB_appendToRespPDU(MB_getSlaveAddress());
 80101dc:	f000 faa4 	bl	8010728 <MB_getSlaveAddress>
 80101e0:	4603      	mov	r3, r0
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7ff ffdc 	bl	80101a0 <MB_appendToRespPDU>
	MB_appendToRespPDU(MB_getFunctionCode());
 80101e8:	f000 faaa 	bl	8010740 <MB_getFunctionCode>
 80101ec:	4603      	mov	r3, r0
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff ffd6 	bl	80101a0 <MB_appendToRespPDU>
}
 80101f4:	bf00      	nop
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <MB_appendToRespPDU_CRC>:
/**
  * @brief It appends CRC16 to response PDU
  * @param none
  * @retval none
  */
void MB_appendToRespPDU_CRC(void){
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
	if(!mbHandle.is_req_cpy_to_resp){
 80101fe:	4b11      	ldr	r3, [pc, #68]	; (8010244 <MB_appendToRespPDU_CRC+0x4c>)
 8010200:	7b9b      	ldrb	r3, [r3, #14]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d116      	bne.n	8010234 <MB_appendToRespPDU_CRC+0x3c>
		uint16_t crc16 = MB_CalcCRC16(mbHandle.txBuffer, mbHandle.txBufferSize);			// calculates CRC
 8010206:	4b0f      	ldr	r3, [pc, #60]	; (8010244 <MB_appendToRespPDU_CRC+0x4c>)
 8010208:	689b      	ldr	r3, [r3, #8]
 801020a:	4a0e      	ldr	r2, [pc, #56]	; (8010244 <MB_appendToRespPDU_CRC+0x4c>)
 801020c:	7b52      	ldrb	r2, [r2, #13]
 801020e:	b292      	uxth	r2, r2
 8010210:	4611      	mov	r1, r2
 8010212:	4618      	mov	r0, r3
 8010214:	f7fe fef0 	bl	800eff8 <MB_CalcCRC16>
 8010218:	4603      	mov	r3, r0
 801021a:	80fb      	strh	r3, [r7, #6]
		MB_appendToRespPDU((uint8_t)(crc16 & 0x00FF));
 801021c:	88fb      	ldrh	r3, [r7, #6]
 801021e:	b2db      	uxtb	r3, r3
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff ffbd 	bl	80101a0 <MB_appendToRespPDU>
		MB_appendToRespPDU((uint8_t)(crc16>>8));
 8010226:	88fb      	ldrh	r3, [r7, #6]
 8010228:	0a1b      	lsrs	r3, r3, #8
 801022a:	b29b      	uxth	r3, r3
 801022c:	b2db      	uxtb	r3, r3
 801022e:	4618      	mov	r0, r3
 8010230:	f7ff ffb6 	bl	80101a0 <MB_appendToRespPDU>
	}
	mbHandle.is_req_cpy_to_resp = 0U;
 8010234:	4b03      	ldr	r3, [pc, #12]	; (8010244 <MB_appendToRespPDU_CRC+0x4c>)
 8010236:	2200      	movs	r2, #0
 8010238:	739a      	strb	r2, [r3, #14]
}
 801023a:	bf00      	nop
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	24005f80 	.word	0x24005f80

08010248 <MB_CopyReqToRespPDU>:
/**
  * @brief It copies request PDU to response PDU
  * @param none
  * @retval none
  */
void MB_CopyReqToRespPDU(void){
 8010248:	b580      	push	{r7, lr}
 801024a:	af00      	add	r7, sp, #0
	memcpy(mbHandle.txBuffer, mbHandle.rxBuffer, mbHandle.rxBufferSize);
 801024c:	4b08      	ldr	r3, [pc, #32]	; (8010270 <MB_CopyReqToRespPDU+0x28>)
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	4a07      	ldr	r2, [pc, #28]	; (8010270 <MB_CopyReqToRespPDU+0x28>)
 8010252:	6851      	ldr	r1, [r2, #4]
 8010254:	4a06      	ldr	r2, [pc, #24]	; (8010270 <MB_CopyReqToRespPDU+0x28>)
 8010256:	7b12      	ldrb	r2, [r2, #12]
 8010258:	4618      	mov	r0, r3
 801025a:	f016 fa5d 	bl	8026718 <memcpy>
//	mbHandle.txBuffer = mbHandle.rxBuffer;
	mbHandle.txBufferSize = mbHandle.rxBufferSize;
 801025e:	4b04      	ldr	r3, [pc, #16]	; (8010270 <MB_CopyReqToRespPDU+0x28>)
 8010260:	7b1a      	ldrb	r2, [r3, #12]
 8010262:	4b03      	ldr	r3, [pc, #12]	; (8010270 <MB_CopyReqToRespPDU+0x28>)
 8010264:	735a      	strb	r2, [r3, #13]
	mbHandle.is_req_cpy_to_resp = 1U;
 8010266:	4b02      	ldr	r3, [pc, #8]	; (8010270 <MB_CopyReqToRespPDU+0x28>)
 8010268:	2201      	movs	r2, #1
 801026a:	739a      	strb	r2, [r3, #14]
}
 801026c:	bf00      	nop
 801026e:	bd80      	pop	{r7, pc}
 8010270:	24005f80 	.word	0x24005f80

08010274 <MB_excepRespBuilder>:
/**
  * @brief To build exception response
  * @param None
  * @retval 1 or 0, if calculated CRC is matched with received CRC it will return 1, otherwise it will return 0
  */
void MB_excepRespBuilder(uint8_t excepCode){
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	4603      	mov	r3, r0
 801027c:	71fb      	strb	r3, [r7, #7]
	MB_appendToRespPDU(MB_getSlaveAddress());							// appends the slave address to the response PDU
 801027e:	f000 fa53 	bl	8010728 <MB_getSlaveAddress>
 8010282:	4603      	mov	r3, r0
 8010284:	4618      	mov	r0, r3
 8010286:	f7ff ff8b 	bl	80101a0 <MB_appendToRespPDU>
	MB_appendToRespPDU(MB_EFC_OFFSET + MB_getFunctionCode());			// appends the exception function code
 801028a:	f000 fa59 	bl	8010740 <MB_getFunctionCode>
 801028e:	4603      	mov	r3, r0
 8010290:	3b80      	subs	r3, #128	; 0x80
 8010292:	b2db      	uxtb	r3, r3
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff ff83 	bl	80101a0 <MB_appendToRespPDU>
	MB_appendToRespPDU(excepCode);										// appends exception code
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff ff7f 	bl	80101a0 <MB_appendToRespPDU>

//	MB_appendToRespPDU_CRC();											// appends CRC16 to the response

}
 80102a2:	bf00      	nop
 80102a4:	3708      	adds	r7, #8
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <MB_isFunctionCodeValid>:
/**
  * @brief To check the function code
  * @param functionCode - received function code
  * @retval 1U or 0U, returns 1U for valid function code, or return 0U for invalid function code
  */
uint8_t MB_isFunctionCodeValid(uint8_t functionCode){
 80102aa:	b480      	push	{r7}
 80102ac:	b083      	sub	sp, #12
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	4603      	mov	r3, r0
 80102b2:	71fb      	strb	r3, [r7, #7]
	// 1-227 is the range of supported function code public + user define function code
	return ((functionCode >= MB_FC_RC_01 && functionCode <= MB_FC_DIAG_08)
	|| (functionCode == MB_FC_GCEC_11 )
	|| (functionCode >= MB_FC_WMC_15 && functionCode <= MB_FC_WMR_16)
	|| (functionCode >= MB_FC_MWR_22 && functionCode <= MB_FC_RWMR_23)
	|| (functionCode == 66u)
 80102b4:	79fb      	ldrb	r3, [r7, #7]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d002      	beq.n	80102c0 <MB_isFunctionCodeValid+0x16>
	return ((functionCode >= MB_FC_RC_01 && functionCode <= MB_FC_DIAG_08)
 80102ba:	79fb      	ldrb	r3, [r7, #7]
 80102bc:	2b08      	cmp	r3, #8
 80102be:	d911      	bls.n	80102e4 <MB_isFunctionCodeValid+0x3a>
	|| (functionCode == MB_FC_GCEC_11 )
 80102c0:	79fb      	ldrb	r3, [r7, #7]
 80102c2:	2b0b      	cmp	r3, #11
 80102c4:	d00e      	beq.n	80102e4 <MB_isFunctionCodeValid+0x3a>
	|| (functionCode >= MB_FC_WMC_15 && functionCode <= MB_FC_WMR_16)
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	2b0e      	cmp	r3, #14
 80102ca:	d902      	bls.n	80102d2 <MB_isFunctionCodeValid+0x28>
 80102cc:	79fb      	ldrb	r3, [r7, #7]
 80102ce:	2b10      	cmp	r3, #16
 80102d0:	d908      	bls.n	80102e4 <MB_isFunctionCodeValid+0x3a>
	|| (functionCode >= MB_FC_MWR_22 && functionCode <= MB_FC_RWMR_23)
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	2b15      	cmp	r3, #21
 80102d6:	d902      	bls.n	80102de <MB_isFunctionCodeValid+0x34>
 80102d8:	79fb      	ldrb	r3, [r7, #7]
 80102da:	2b17      	cmp	r3, #23
 80102dc:	d902      	bls.n	80102e4 <MB_isFunctionCodeValid+0x3a>
	|| (functionCode == 66u)
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	2b42      	cmp	r3, #66	; 0x42
 80102e2:	d101      	bne.n	80102e8 <MB_isFunctionCodeValid+0x3e>
 80102e4:	2301      	movs	r3, #1
 80102e6:	e000      	b.n	80102ea <MB_isFunctionCodeValid+0x40>
 80102e8:	2300      	movs	r3, #0
 80102ea:	b2db      	uxtb	r3, r3
	);
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	370c      	adds	r7, #12
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <MB_checkSlaveAddress>:


uint8_t MB_checkSlaveAddress(uint16_t address){
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	4603      	mov	r3, r0
 8010300:	80fb      	strh	r3, [r7, #6]
	return ((address >= MB_BROADCAST_ADDR) && (address <= MB_SLAVE_ADDR_MAX));
 8010302:	88fb      	ldrh	r3, [r7, #6]
 8010304:	2bf7      	cmp	r3, #247	; 0xf7
 8010306:	bf94      	ite	ls
 8010308:	2301      	movls	r3, #1
 801030a:	2300      	movhi	r3, #0
 801030c:	b2db      	uxtb	r3, r3
}
 801030e:	4618      	mov	r0, r3
 8010310:	370c      	adds	r7, #12
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr
	...

0801031c <MB_checkMCQtyAddrByteCount>:
  * @param none
  * @retval 0, 2 & 3, where 0 = no exception, 2 = illegal data address, 3 = illegal data value
  *
  */

uint8_t MB_checkMCQtyAddrByteCount(void){
 801031c:	b590      	push	{r4, r7, lr}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
	uint8_t clc_byte_count = (MB_getQuantity(MB_FC_INDEX+3)/8)+(MB_getQuantity(MB_FC_INDEX+3)%8>0);		// to calculate byte count from the output quantity
 8010322:	2004      	movs	r0, #4
 8010324:	f000 fa36 	bl	8010794 <MB_getQuantity>
 8010328:	4603      	mov	r3, r0
 801032a:	08db      	lsrs	r3, r3, #3
 801032c:	b29b      	uxth	r3, r3
 801032e:	b2dc      	uxtb	r4, r3
 8010330:	2004      	movs	r0, #4
 8010332:	f000 fa2f 	bl	8010794 <MB_getQuantity>
 8010336:	4603      	mov	r3, r0
 8010338:	f003 0307 	and.w	r3, r3, #7
 801033c:	b29b      	uxth	r3, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	bf14      	ite	ne
 8010342:	2301      	movne	r3, #1
 8010344:	2300      	moveq	r3, #0
 8010346:	b2db      	uxtb	r3, r3
 8010348:	4423      	add	r3, r4
 801034a:	71fb      	strb	r3, [r7, #7]
	if(MB_checkDataQuantity(MB_getQuantity(MB_FC_INDEX+3), (MB_COA_MAX-MB_CO_ADDR_OFFSET))
 801034c:	2004      	movs	r0, #4
 801034e:	f000 fa21 	bl	8010794 <MB_getQuantity>
 8010352:	4603      	mov	r3, r0
 8010354:	213e      	movs	r1, #62	; 0x3e
 8010356:	4618      	mov	r0, r3
 8010358:	f000 f90e 	bl	8010578 <MB_checkDataQuantity>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d01b      	beq.n	801039a <MB_checkMCQtyAddrByteCount+0x7e>
			&& (clc_byte_count == mbHandle.rxBuffer[MB_FC_INDEX+5])){				//multiple coils write checks valid quantity of coils
 8010362:	4b10      	ldr	r3, [pc, #64]	; (80103a4 <MB_checkMCQtyAddrByteCount+0x88>)
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	3306      	adds	r3, #6
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	79fa      	ldrb	r2, [r7, #7]
 801036c:	429a      	cmp	r2, r3
 801036e:	d114      	bne.n	801039a <MB_checkMCQtyAddrByteCount+0x7e>
		if(MB_checkDataAddress(MB_getStartAddress(MB_FC_INDEX+1), (MB_COA_MAX-MB_CO_ADDR_OFFSET), MB_getQuantity(MB_FC_INDEX+3))){		// MAX coils/registers address 10000, checks valid data address and address+quantity of coils, Max value will not exceed 9999
 8010370:	2002      	movs	r0, #2
 8010372:	f000 f9f1 	bl	8010758 <MB_getStartAddress>
 8010376:	4603      	mov	r3, r0
 8010378:	461c      	mov	r4, r3
 801037a:	2004      	movs	r0, #4
 801037c:	f000 fa0a 	bl	8010794 <MB_getQuantity>
 8010380:	4603      	mov	r3, r0
 8010382:	461a      	mov	r2, r3
 8010384:	213e      	movs	r1, #62	; 0x3e
 8010386:	4620      	mov	r0, r4
 8010388:	f000 f90f 	bl	80105aa <MB_checkDataAddress>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <MB_checkMCQtyAddrByteCount+0x7a>
			return 0;
 8010392:	2300      	movs	r3, #0
 8010394:	e002      	b.n	801039c <MB_checkMCQtyAddrByteCount+0x80>
		}else{
			return MB_EC_ILDA_2;										// returns exception code - 2 for illegal data address and address+quantity
 8010396:	2302      	movs	r3, #2
 8010398:	e000      	b.n	801039c <MB_checkMCQtyAddrByteCount+0x80>
		}
	}else{
		return MB_EC_ILDV_3;											// returns exception code - 3 for illegal data value/quantity
 801039a:	2303      	movs	r3, #3
	}

}
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd90      	pop	{r4, r7, pc}
 80103a4:	24005f80 	.word	0x24005f80

080103a8 <MB_checkMRQtyAddrByteCount>:
/**
  * @brief To check the valid data quantity, address and byte count for the registers
  * @param none
  * @retval 0, 2 & 3, where 0 = no exception, 2 = illegal data address, 3 = illegal data value
  */
uint8_t MB_checkMRQtyAddrByteCount(uint16_t maxAddress){
 80103a8:	b5b0      	push	{r4, r5, r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	4603      	mov	r3, r0
 80103b0:	80fb      	strh	r3, [r7, #6]
	uint8_t clc_byte_count = MB_getQuantity(MB_FC_INDEX+3)*2;		// to calculate byte count from the output quantity
 80103b2:	2004      	movs	r0, #4
 80103b4:	f000 f9ee 	bl	8010794 <MB_getQuantity>
 80103b8:	4603      	mov	r3, r0
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	005b      	lsls	r3, r3, #1
 80103be:	73fb      	strb	r3, [r7, #15]
	if(MB_checkDataQuantity(MB_getQuantity(MB_FC_INDEX+3), (maxAddress-MB_HR_ADDR_OFFSET))
 80103c0:	2004      	movs	r0, #4
 80103c2:	f000 f9e7 	bl	8010794 <MB_getQuantity>
 80103c6:	4603      	mov	r3, r0
 80103c8:	461a      	mov	r2, r3
 80103ca:	88fb      	ldrh	r3, [r7, #6]
 80103cc:	f503 43c7 	add.w	r3, r3, #25472	; 0x6380
 80103d0:	333f      	adds	r3, #63	; 0x3f
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	4619      	mov	r1, r3
 80103d6:	4610      	mov	r0, r2
 80103d8:	f000 f8ce 	bl	8010578 <MB_checkDataQuantity>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d020      	beq.n	8010424 <MB_checkMRQtyAddrByteCount+0x7c>
			&& (clc_byte_count == mbHandle.rxBuffer[MB_FC_INDEX+5])){				// Max quantity- 1968 for multiple register write checks valid quantity of coils
 80103e2:	4b13      	ldr	r3, [pc, #76]	; (8010430 <MB_checkMRQtyAddrByteCount+0x88>)
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	3306      	adds	r3, #6
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	7bfa      	ldrb	r2, [r7, #15]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d119      	bne.n	8010424 <MB_checkMRQtyAddrByteCount+0x7c>
		if(MB_checkDataAddress(MB_getStartAddress(MB_FC_INDEX+1), (maxAddress-MB_HR_ADDR_OFFSET), MB_getQuantity(MB_FC_INDEX+3))){		// MAX coils/registers address 10000, checks valid data address and address+quantity of register, Max value will not exceed 9999
 80103f0:	2002      	movs	r0, #2
 80103f2:	f000 f9b1 	bl	8010758 <MB_getStartAddress>
 80103f6:	4603      	mov	r3, r0
 80103f8:	461d      	mov	r5, r3
 80103fa:	88fb      	ldrh	r3, [r7, #6]
 80103fc:	f503 43c7 	add.w	r3, r3, #25472	; 0x6380
 8010400:	333f      	adds	r3, #63	; 0x3f
 8010402:	b29c      	uxth	r4, r3
 8010404:	2004      	movs	r0, #4
 8010406:	f000 f9c5 	bl	8010794 <MB_getQuantity>
 801040a:	4603      	mov	r3, r0
 801040c:	461a      	mov	r2, r3
 801040e:	4621      	mov	r1, r4
 8010410:	4628      	mov	r0, r5
 8010412:	f000 f8ca 	bl	80105aa <MB_checkDataAddress>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d001      	beq.n	8010420 <MB_checkMRQtyAddrByteCount+0x78>
			return 0;
 801041c:	2300      	movs	r3, #0
 801041e:	e002      	b.n	8010426 <MB_checkMRQtyAddrByteCount+0x7e>
		}else{
			return MB_EC_ILDA_2;										// returns exception code - 2 for illegal data address and address+quantity
 8010420:	2302      	movs	r3, #2
 8010422:	e000      	b.n	8010426 <MB_checkMRQtyAddrByteCount+0x7e>
		}
	}else{
		return MB_EC_ILDV_3;											// returns exception code - 3 for illegal data value/quantity
 8010424:	2303      	movs	r3, #3
	}

}
 8010426:	4618      	mov	r0, r3
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bdb0      	pop	{r4, r5, r7, pc}
 801042e:	bf00      	nop
 8010430:	24005f80 	.word	0x24005f80

08010434 <MB_checkRWMRQtyAddrByteCount>:
/**
  * @brief To check the valid data quantity, address and byte count for the read/write multiple registers
  * @param none
  * @retval 0, 2 & 3, where 0 = no exception, 2 = illegal data address, 3 = illegal data value
  */
uint8_t MB_checkRWMRQtyAddrByteCount(void){
 8010434:	b598      	push	{r3, r4, r7, lr}
 8010436:	af00      	add	r7, sp, #0
	//uint8_t clc_byte_count = MB_getQuantity(MB_FC_INDEX+3)*2;		// to calculate byte count from the output quantity
	if(MB_checkDataQuantity(MB_getQuantity(MB_FC_INDEX+3U), (MB_HRA_MAX-MB_HR_ADDR_OFFSET))		// to check the quantity to read the register
 8010438:	2004      	movs	r0, #4
 801043a:	f000 f9ab 	bl	8010794 <MB_getQuantity>
 801043e:	4603      	mov	r3, r0
 8010440:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8010444:	4618      	mov	r0, r3
 8010446:	f000 f897 	bl	8010578 <MB_checkDataQuantity>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d03e      	beq.n	80104ce <MB_checkRWMRQtyAddrByteCount+0x9a>
		&& MB_checkDataQuantity(MB_getQuantity(MB_FC_INDEX+7U), (MB_HRA_MAX-MB_HR_ADDR_OFFSET))	// to check the quantity to write the register
 8010450:	2008      	movs	r0, #8
 8010452:	f000 f99f 	bl	8010794 <MB_getQuantity>
 8010456:	4603      	mov	r3, r0
 8010458:	f44f 719d 	mov.w	r1, #314	; 0x13a
 801045c:	4618      	mov	r0, r3
 801045e:	f000 f88b 	bl	8010578 <MB_checkDataQuantity>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d032      	beq.n	80104ce <MB_checkRWMRQtyAddrByteCount+0x9a>
		&& ((MB_getQuantity(MB_FC_INDEX+7U)*2U) == mbHandle.rxBuffer[MB_FC_INDEX+9U])){				// Max quantity- 125 for the register
 8010468:	2008      	movs	r0, #8
 801046a:	f000 f993 	bl	8010794 <MB_getQuantity>
 801046e:	4603      	mov	r3, r0
 8010470:	005b      	lsls	r3, r3, #1
 8010472:	4a18      	ldr	r2, [pc, #96]	; (80104d4 <MB_checkRWMRQtyAddrByteCount+0xa0>)
 8010474:	6852      	ldr	r2, [r2, #4]
 8010476:	320a      	adds	r2, #10
 8010478:	7812      	ldrb	r2, [r2, #0]
 801047a:	4293      	cmp	r3, r2
 801047c:	d127      	bne.n	80104ce <MB_checkRWMRQtyAddrByteCount+0x9a>

		if(MB_checkDataAddress(MB_getStartAddress(MB_FC_INDEX+1U), (MB_HRA_MAX-MB_HR_ADDR_OFFSET), MB_getQuantity(MB_FC_INDEX+3U))
 801047e:	2002      	movs	r0, #2
 8010480:	f000 f96a 	bl	8010758 <MB_getStartAddress>
 8010484:	4603      	mov	r3, r0
 8010486:	461c      	mov	r4, r3
 8010488:	2004      	movs	r0, #4
 801048a:	f000 f983 	bl	8010794 <MB_getQuantity>
 801048e:	4603      	mov	r3, r0
 8010490:	461a      	mov	r2, r3
 8010492:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8010496:	4620      	mov	r0, r4
 8010498:	f000 f887 	bl	80105aa <MB_checkDataAddress>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d013      	beq.n	80104ca <MB_checkRWMRQtyAddrByteCount+0x96>
			&& MB_checkDataAddress(MB_getStartAddress(MB_FC_INDEX+5U), (MB_HRA_MAX-MB_HR_ADDR_OFFSET), MB_getQuantity(MB_FC_INDEX+7U))){		// MAX coils/registers address 10000, checks valid data address and address+quantity of register, Max value will not exceed 9999
 80104a2:	2006      	movs	r0, #6
 80104a4:	f000 f958 	bl	8010758 <MB_getStartAddress>
 80104a8:	4603      	mov	r3, r0
 80104aa:	461c      	mov	r4, r3
 80104ac:	2008      	movs	r0, #8
 80104ae:	f000 f971 	bl	8010794 <MB_getQuantity>
 80104b2:	4603      	mov	r3, r0
 80104b4:	461a      	mov	r2, r3
 80104b6:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80104ba:	4620      	mov	r0, r4
 80104bc:	f000 f875 	bl	80105aa <MB_checkDataAddress>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d001      	beq.n	80104ca <MB_checkRWMRQtyAddrByteCount+0x96>
			return 0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	e002      	b.n	80104d0 <MB_checkRWMRQtyAddrByteCount+0x9c>
		}else{
			return MB_EC_ILDA_2;										// returns exception code - 2 for illegal data address and address+quantity
 80104ca:	2302      	movs	r3, #2
 80104cc:	e000      	b.n	80104d0 <MB_checkRWMRQtyAddrByteCount+0x9c>
		}
	}else{
		return MB_EC_ILDV_3;											// returns exception code - 3 for illegal data value/quantity
 80104ce:	2303      	movs	r3, #3
	}

}
 80104d0:	4618      	mov	r0, r3
 80104d2:	bd98      	pop	{r3, r4, r7, pc}
 80104d4:	24005f80 	.word	0x24005f80

080104d8 <MB_checkMWRAddrMask>:
/**
  * @brief To check the valid reference address and mask for the mask write holding register
  * @param none
  * @retval 0, 2 & 3, where 0 = no exception, 2 = illegal data address, 3 = illegal data value
  */
uint8_t MB_checkMWRAddrMask(void){
 80104d8:	b598      	push	{r3, r4, r7, lr}
 80104da:	af00      	add	r7, sp, #0
	//uint8_t clc_byte_count = MB_getQuantity(MB_FC_INDEX+3)*2;		// to calculate byte count from the output quantity
	if(MB_getMWRRefAddress()>=0 && MB_getMWRRefAddress() <= (MB_HRA_MAX-MB_HR_ADDR_OFFSET)){				// Max quantity- 125 for the register
 80104dc:	f000 f952 	bl	8010784 <MB_getMWRRefAddress>
 80104e0:	f000 f950 	bl	8010784 <MB_getMWRRefAddress>
 80104e4:	4603      	mov	r3, r0
 80104e6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80104ea:	d815      	bhi.n	8010518 <MB_checkMWRAddrMask+0x40>
		if(MB_checkAndOrMask(MB_getMWRAndMask(), MB_getMWROrMask()) && (mbHandle.rxBufferSize==10U)){		// MAX coils/registers address 10000, checks valid data address and address+quantity of register, Max value will not exceed 9999
 80104ec:	f000 f988 	bl	8010800 <MB_getMWRAndMask>
 80104f0:	4603      	mov	r3, r0
 80104f2:	461c      	mov	r4, r3
 80104f4:	f000 f98c 	bl	8010810 <MB_getMWROrMask>
 80104f8:	4603      	mov	r3, r0
 80104fa:	4619      	mov	r1, r3
 80104fc:	4620      	mov	r0, r4
 80104fe:	f000 f876 	bl	80105ee <MB_checkAndOrMask>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d005      	beq.n	8010514 <MB_checkMWRAddrMask+0x3c>
 8010508:	4b05      	ldr	r3, [pc, #20]	; (8010520 <MB_checkMWRAddrMask+0x48>)
 801050a:	7b1b      	ldrb	r3, [r3, #12]
 801050c:	2b0a      	cmp	r3, #10
 801050e:	d101      	bne.n	8010514 <MB_checkMWRAddrMask+0x3c>
			return MB_EC_NONE_0;											// returns exception code - 0 for no exception
 8010510:	2300      	movs	r3, #0
 8010512:	e002      	b.n	801051a <MB_checkMWRAddrMask+0x42>
		}else{
			return MB_EC_ILDV_3;											// returns exception code - 3 for illegal data value/quantity
 8010514:	2303      	movs	r3, #3
 8010516:	e000      	b.n	801051a <MB_checkMWRAddrMask+0x42>
		}
	}else{
		return MB_EC_ILDA_2;										// returns exception code - 2 for illegal data address and address+quantity
 8010518:	2302      	movs	r3, #2
	}

}
 801051a:	4618      	mov	r0, r3
 801051c:	bd98      	pop	{r3, r4, r7, pc}
 801051e:	bf00      	nop
 8010520:	24005f80 	.word	0x24005f80

08010524 <MB_checkDataQtyAddr>:
  * of the requested coils or registers, quantity is the number of requested coils or register
  * and maxQuantity is the max number of coils or registers
  *
  * @retval 0, 2 & 3, where 0 = no exception, 2 = illegal data address, 3 = illegal data value
  */
uint8_t MB_checkDataQtyAddr(uint16_t startAddress, uint16_t maxAddress, uint16_t quantity, uint16_t maxQuantity){
 8010524:	b590      	push	{r4, r7, lr}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	4604      	mov	r4, r0
 801052c:	4608      	mov	r0, r1
 801052e:	4611      	mov	r1, r2
 8010530:	461a      	mov	r2, r3
 8010532:	4623      	mov	r3, r4
 8010534:	80fb      	strh	r3, [r7, #6]
 8010536:	4603      	mov	r3, r0
 8010538:	80bb      	strh	r3, [r7, #4]
 801053a:	460b      	mov	r3, r1
 801053c:	807b      	strh	r3, [r7, #2]
 801053e:	4613      	mov	r3, r2
 8010540:	803b      	strh	r3, [r7, #0]
	if(MB_checkDataQuantity(quantity, maxQuantity)){						// Max quantity- 2000 for coils and 125 for registers, checks valid quantity of coils
 8010542:	883a      	ldrh	r2, [r7, #0]
 8010544:	887b      	ldrh	r3, [r7, #2]
 8010546:	4611      	mov	r1, r2
 8010548:	4618      	mov	r0, r3
 801054a:	f000 f815 	bl	8010578 <MB_checkDataQuantity>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00c      	beq.n	801056e <MB_checkDataQtyAddr+0x4a>
		if(MB_checkDataAddress(startAddress, maxAddress, quantity)){		// MAX coils/registers address 10000, checks valid data address and address+quantity of coils, Max value will not exceed 9999
 8010554:	887a      	ldrh	r2, [r7, #2]
 8010556:	88b9      	ldrh	r1, [r7, #4]
 8010558:	88fb      	ldrh	r3, [r7, #6]
 801055a:	4618      	mov	r0, r3
 801055c:	f000 f825 	bl	80105aa <MB_checkDataAddress>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d001      	beq.n	801056a <MB_checkDataQtyAddr+0x46>
			return 0;
 8010566:	2300      	movs	r3, #0
 8010568:	e002      	b.n	8010570 <MB_checkDataQtyAddr+0x4c>
		}else{
			return MB_EC_ILDA_2;										// returns exception code - 2 for illegal data address and address+quantity
 801056a:	2302      	movs	r3, #2
 801056c:	e000      	b.n	8010570 <MB_checkDataQtyAddr+0x4c>
		}
	}else{
		return MB_EC_ILDV_3;											// returns exception code - 3 for illegal data value/quantity
 801056e:	2303      	movs	r3, #3
	}
}
 8010570:	4618      	mov	r0, r3
 8010572:	370c      	adds	r7, #12
 8010574:	46bd      	mov	sp, r7
 8010576:	bd90      	pop	{r4, r7, pc}

08010578 <MB_checkDataQuantity>:
  * @param quantity, maxQuantity, where, quantity is the number of requested coils or register
  * and maxQuantity is the max number of coils or registers
  *
  * @retval 0, 1 0 = invalid, 1 = valid
  */
uint8_t MB_checkDataQuantity(uint16_t quantity, uint16_t maxQuantity){
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	4603      	mov	r3, r0
 8010580:	460a      	mov	r2, r1
 8010582:	80fb      	strh	r3, [r7, #6]
 8010584:	4613      	mov	r3, r2
 8010586:	80bb      	strh	r3, [r7, #4]
	return (quantity >= 1 && quantity <= maxQuantity);
 8010588:	88fb      	ldrh	r3, [r7, #6]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d005      	beq.n	801059a <MB_checkDataQuantity+0x22>
 801058e:	88fa      	ldrh	r2, [r7, #6]
 8010590:	88bb      	ldrh	r3, [r7, #4]
 8010592:	429a      	cmp	r2, r3
 8010594:	d801      	bhi.n	801059a <MB_checkDataQuantity+0x22>
 8010596:	2301      	movs	r3, #1
 8010598:	e000      	b.n	801059c <MB_checkDataQuantity+0x24>
 801059a:	2300      	movs	r3, #0
 801059c:	b2db      	uxtb	r3, r3
}
 801059e:	4618      	mov	r0, r3
 80105a0:	370c      	adds	r7, #12
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <MB_checkDataAddress>:
  * @param startAddress and quantity, where, startAddress is the starting address
  * of the requested coils or registers, quantity is the number of requested coils or register
  *
  * @retval 0, 1 0 = invalid, 1 = valid
  */
uint8_t MB_checkDataAddress(uint16_t startAddress, uint16_t maxAddress, uint16_t quantity){
 80105aa:	b480      	push	{r7}
 80105ac:	b085      	sub	sp, #20
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	4603      	mov	r3, r0
 80105b2:	80fb      	strh	r3, [r7, #6]
 80105b4:	460b      	mov	r3, r1
 80105b6:	80bb      	strh	r3, [r7, #4]
 80105b8:	4613      	mov	r3, r2
 80105ba:	807b      	strh	r3, [r7, #2]
	uint16_t lastAddress = startAddress + quantity;
 80105bc:	88fa      	ldrh	r2, [r7, #6]
 80105be:	887b      	ldrh	r3, [r7, #2]
 80105c0:	4413      	add	r3, r2
 80105c2:	81fb      	strh	r3, [r7, #14]
	return((startAddress >= 0 && startAddress <= maxAddress)
				&& (lastAddress >= 1 && lastAddress <= maxAddress));
 80105c4:	88fa      	ldrh	r2, [r7, #6]
 80105c6:	88bb      	ldrh	r3, [r7, #4]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d808      	bhi.n	80105de <MB_checkDataAddress+0x34>
 80105cc:	89fb      	ldrh	r3, [r7, #14]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d005      	beq.n	80105de <MB_checkDataAddress+0x34>
 80105d2:	89fa      	ldrh	r2, [r7, #14]
 80105d4:	88bb      	ldrh	r3, [r7, #4]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d801      	bhi.n	80105de <MB_checkDataAddress+0x34>
 80105da:	2301      	movs	r3, #1
 80105dc:	e000      	b.n	80105e0 <MB_checkDataAddress+0x36>
 80105de:	2300      	movs	r3, #0
 80105e0:	b2db      	uxtb	r3, r3
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3714      	adds	r7, #20
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr

080105ee <MB_checkAndOrMask>:


uint8_t MB_checkAndOrMask(uint16_t andMask, uint16_t orMask){
 80105ee:	b480      	push	{r7}
 80105f0:	b083      	sub	sp, #12
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	4603      	mov	r3, r0
 80105f6:	460a      	mov	r2, r1
 80105f8:	80fb      	strh	r3, [r7, #6]
 80105fa:	4613      	mov	r3, r2
 80105fc:	80bb      	strh	r3, [r7, #4]
	return ((andMask >= 0) && (andMask <= MB_MAX_REGISTER_VALUE))
			&& ((orMask >= 0) && (orMask <= MB_MAX_REGISTER_VALUE));
 80105fe:	2301      	movs	r3, #1
}
 8010600:	4618      	mov	r0, r3
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <MB_checkSCValue>:
  *
  * @param value, it is the output coil value, output coil can be 0x0000 or 0xFFFF
  *
  * @retval 0 or 1, where 1 = no exception,  0 = exception
  */
uint8_t MB_checkSCValue(uint16_t value){
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	80fb      	strh	r3, [r7, #6]
	return (value==LOW || value==HIGH);
 8010616:	88fb      	ldrh	r3, [r7, #6]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d003      	beq.n	8010624 <MB_checkSCValue+0x18>
 801061c:	88fb      	ldrh	r3, [r7, #6]
 801061e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8010622:	d101      	bne.n	8010628 <MB_checkSCValue+0x1c>
 8010624:	2301      	movs	r3, #1
 8010626:	e000      	b.n	801062a <MB_checkSCValue+0x1e>
 8010628:	2300      	movs	r3, #0
 801062a:	b2db      	uxtb	r3, r3
}
 801062c:	4618      	mov	r0, r3
 801062e:	370c      	adds	r7, #12
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <MB_checkSRValue>:
  *
  * @param value, it is the output coil value, output coil can be 0x0000 or 0xFFFF
  *
  * @retval 0 or 1, where 1 = no exception,  0 = exception
  */
uint8_t MB_checkSRValue(uint16_t value){
 8010638:	b480      	push	{r7}
 801063a:	b083      	sub	sp, #12
 801063c:	af00      	add	r7, sp, #0
 801063e:	4603      	mov	r3, r0
 8010640:	80fb      	strh	r3, [r7, #6]
	return (value>=0x0000 && value<=MB_MAX_REGISTER_VALUE);
 8010642:	2301      	movs	r3, #1
}
 8010644:	4618      	mov	r0, r3
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <MB_checkSCRAddr>:
  *
  * @param address, for the target output coil or register
  *
  * @retval 0 or 1, where 1 = no exception,  0 = exception
  */
uint8_t MB_checkSCRAddr(uint16_t address, uint16_t maxAddress){
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	4603      	mov	r3, r0
 8010658:	460a      	mov	r2, r1
 801065a:	80fb      	strh	r3, [r7, #6]
 801065c:	4613      	mov	r3, r2
 801065e:	80bb      	strh	r3, [r7, #4]
	return (address>=0U && address<maxAddress);
 8010660:	88fa      	ldrh	r2, [r7, #6]
 8010662:	88bb      	ldrh	r3, [r7, #4]
 8010664:	429a      	cmp	r2, r3
 8010666:	bf34      	ite	cc
 8010668:	2301      	movcc	r3, #1
 801066a:	2300      	movcs	r3, #0
 801066c:	b2db      	uxtb	r3, r3
}
 801066e:	4618      	mov	r0, r3
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr

0801067a <MB_checkSCValueAddr>:
  *
  * @param address, for the target output coil or register
  *
  * @retval 0,2& 3, where 0 = no exception, 2 = illegal data address,  3 = illegal data value
  */
uint8_t MB_checkSCValueAddr(void){
 801067a:	b580      	push	{r7, lr}
 801067c:	af00      	add	r7, sp, #0
	if(MB_checkSCValue(MB_getSCRValue())){
 801067e:	f000 f897 	bl	80107b0 <MB_getSCRValue>
 8010682:	4603      	mov	r3, r0
 8010684:	4618      	mov	r0, r3
 8010686:	f7ff ffc1 	bl	801060c <MB_checkSCValue>
 801068a:	4603      	mov	r3, r0
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00d      	beq.n	80106ac <MB_checkSCValueAddr+0x32>
		if(MB_checkSCRAddr(MB_getSCRAddress(), (MB_COA_MAX-MB_CO_ADDR_OFFSET))){
 8010690:	f000 f870 	bl	8010774 <MB_getSCRAddress>
 8010694:	4603      	mov	r3, r0
 8010696:	213e      	movs	r1, #62	; 0x3e
 8010698:	4618      	mov	r0, r3
 801069a:	f7ff ffd9 	bl	8010650 <MB_checkSCRAddr>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d001      	beq.n	80106a8 <MB_checkSCValueAddr+0x2e>
			return 0;
 80106a4:	2300      	movs	r3, #0
 80106a6:	e002      	b.n	80106ae <MB_checkSCValueAddr+0x34>
		}else{
			return MB_EC_ILDA_2;
 80106a8:	2302      	movs	r3, #2
 80106aa:	e000      	b.n	80106ae <MB_checkSCValueAddr+0x34>
		}
	}else{
		return MB_EC_ILDV_3;
 80106ac:	2303      	movs	r3, #3
	}

}
 80106ae:	4618      	mov	r0, r3
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <MB_checkSRValueAddr>:
  *
  * @param address, for the target output coil or register
  *
  * @retval 0,2& 3, where 0 = no exception, 2 = illegal data address,  3 = illegal data value
  */
uint8_t MB_checkSRValueAddr(void){
 80106b2:	b580      	push	{r7, lr}
 80106b4:	af00      	add	r7, sp, #0
	if(MB_checkSRValue(MB_getSCRValue())){
 80106b6:	f000 f87b 	bl	80107b0 <MB_getSCRValue>
 80106ba:	4603      	mov	r3, r0
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff ffbb 	bl	8010638 <MB_checkSRValue>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00e      	beq.n	80106e6 <MB_checkSRValueAddr+0x34>
		if(MB_checkSCRAddr(MB_getSCRAddress(), (MB_HRA_MAX-MB_HR_ADDR_OFFSET))>0u){
 80106c8:	f000 f854 	bl	8010774 <MB_getSCRAddress>
 80106cc:	4603      	mov	r3, r0
 80106ce:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7ff ffbc 	bl	8010650 <MB_checkSCRAddr>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <MB_checkSRValueAddr+0x30>
			return 0U;
 80106de:	2300      	movs	r3, #0
 80106e0:	e002      	b.n	80106e8 <MB_checkSRValueAddr+0x36>
		}else{
			return MB_EC_ILDA_2;
 80106e2:	2302      	movs	r3, #2
 80106e4:	e000      	b.n	80106e8 <MB_checkSRValueAddr+0x36>
		}
	}else{
		return MB_EC_ILDV_3;
 80106e6:	2303      	movs	r3, #3
	}

}
 80106e8:	4618      	mov	r0, r3
 80106ea:	bd80      	pop	{r7, pc}

080106ec <MB_get2byteData>:





uint16_t MB_get2byteData(uint8_t firstByteIndex){
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	4603      	mov	r3, r0
 80106f4:	71fb      	strb	r3, [r7, #7]
	return ((uint16_t)mbHandle.rxBuffer[firstByteIndex]<<8u | (uint16_t)mbHandle.rxBuffer[firstByteIndex+1u]);
 80106f6:	4b0b      	ldr	r3, [pc, #44]	; (8010724 <MB_get2byteData+0x38>)
 80106f8:	685a      	ldr	r2, [r3, #4]
 80106fa:	79fb      	ldrb	r3, [r7, #7]
 80106fc:	4413      	add	r3, r2
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	021b      	lsls	r3, r3, #8
 8010702:	b21a      	sxth	r2, r3
 8010704:	4b07      	ldr	r3, [pc, #28]	; (8010724 <MB_get2byteData+0x38>)
 8010706:	6859      	ldr	r1, [r3, #4]
 8010708:	79fb      	ldrb	r3, [r7, #7]
 801070a:	3301      	adds	r3, #1
 801070c:	440b      	add	r3, r1
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	b21b      	sxth	r3, r3
 8010712:	4313      	orrs	r3, r2
 8010714:	b21b      	sxth	r3, r3
 8010716:	b29b      	uxth	r3, r3
}
 8010718:	4618      	mov	r0, r3
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr
 8010724:	24005f80 	.word	0x24005f80

08010728 <MB_getSlaveAddress>:
/**
  * @brief To get slave address
  * @param none
  * @retval 0-127
  */
uint8_t MB_getSlaveAddress(void){
 8010728:	b480      	push	{r7}
 801072a:	af00      	add	r7, sp, #0
	return mbHandle.rxBuffer[MB_SA_INDEX];
 801072c:	4b03      	ldr	r3, [pc, #12]	; (801073c <MB_getSlaveAddress+0x14>)
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	781b      	ldrb	r3, [r3, #0]
}
 8010732:	4618      	mov	r0, r3
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr
 801073c:	24005f80 	.word	0x24005f80

08010740 <MB_getFunctionCode>:
/**
  * @brief To get the function code from request PDU buffer
  * @param none
  * @retval 0-127
  */
uint8_t MB_getFunctionCode(void){
 8010740:	b480      	push	{r7}
 8010742:	af00      	add	r7, sp, #0
	return mbHandle.rxBuffer[MB_FC_INDEX];
 8010744:	4b03      	ldr	r3, [pc, #12]	; (8010754 <MB_getFunctionCode+0x14>)
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	785b      	ldrb	r3, [r3, #1]
}
 801074a:	4618      	mov	r0, r3
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr
 8010754:	24005f80 	.word	0x24005f80

08010758 <MB_getStartAddress>:
/**
  * @brief To get the data start address (without offset) from request PDU buffer
  * @param none
  * @retval 0-9999
  */
uint16_t MB_getStartAddress(uint8_t firstByteIndex){
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	4603      	mov	r3, r0
 8010760:	71fb      	strb	r3, [r7, #7]
	return MB_get2byteData(firstByteIndex);
 8010762:	79fb      	ldrb	r3, [r7, #7]
 8010764:	4618      	mov	r0, r3
 8010766:	f7ff ffc1 	bl	80106ec <MB_get2byteData>
 801076a:	4603      	mov	r3, r0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <MB_getSCRAddress>:

uint16_t MB_getSCRAddress(void){
 8010774:	b580      	push	{r7, lr}
 8010776:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+1);
 8010778:	2002      	movs	r0, #2
 801077a:	f7ff ffb7 	bl	80106ec <MB_get2byteData>
 801077e:	4603      	mov	r3, r0
}
 8010780:	4618      	mov	r0, r3
 8010782:	bd80      	pop	{r7, pc}

08010784 <MB_getMWRRefAddress>:
/**
  * @brief To get reference address (without offset) for mask write register from request PDU buffer
  * @param none
  * @retval 0-9999, holding register reference address without offset
  */
uint16_t MB_getMWRRefAddress(void){
 8010784:	b580      	push	{r7, lr}
 8010786:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+1);
 8010788:	2002      	movs	r0, #2
 801078a:	f7ff ffaf 	bl	80106ec <MB_get2byteData>
 801078e:	4603      	mov	r3, r0
}
 8010790:	4618      	mov	r0, r3
 8010792:	bd80      	pop	{r7, pc}

08010794 <MB_getQuantity>:
/**
  * @brief To get the requested data quantity from request PDU buffer
  * @param none
  * @retval 1-2000 or 1-125, 1-2000 for coils and discrete input and 1-125 for registers
  */
uint16_t MB_getQuantity(uint8_t firstByteIndex){
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	4603      	mov	r3, r0
 801079c:	71fb      	strb	r3, [r7, #7]
	return MB_get2byteData(firstByteIndex);
 801079e:	79fb      	ldrb	r3, [r7, #7]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7ff ffa3 	bl	80106ec <MB_get2byteData>
 80107a6:	4603      	mov	r3, r0
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <MB_getSCRValue>:
/**
  * @brief To get the requested data output value from the request PDU buffer
  * @param none
  * @retval the output value for single coil or register
  */
uint16_t MB_getSCRValue(void){
 80107b0:	b580      	push	{r7, lr}
 80107b2:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+3);//(mbHandle.rxBuffer[MB_FC_INDEX+3]<<8 | mbHandle.rxBuffer[MB_FC_INDEX+4]);
 80107b4:	2004      	movs	r0, #4
 80107b6:	f7ff ff99 	bl	80106ec <MB_get2byteData>
 80107ba:	4603      	mov	r3, r0
}
 80107bc:	4618      	mov	r0, r3
 80107be:	bd80      	pop	{r7, pc}

080107c0 <MB_getMCValueInByte>:
/**
  * @brief To get the requested data output value from the request PDU buffer
  * @param none
  * @retval the output value for single coil or register
  */
uint8_t MB_getMCValueInByte(uint8_t index){
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	4603      	mov	r3, r0
 80107c8:	71fb      	strb	r3, [r7, #7]
	return mbHandle.rxBuffer[index];//(mbHandle.rxBuffer[MB_FC_INDEX+3]<<8 | mbHandle.rxBuffer[MB_FC_INDEX+4]);
 80107ca:	4b05      	ldr	r3, [pc, #20]	; (80107e0 <MB_getMCValueInByte+0x20>)
 80107cc:	685a      	ldr	r2, [r3, #4]
 80107ce:	79fb      	ldrb	r3, [r7, #7]
 80107d0:	4413      	add	r3, r2
 80107d2:	781b      	ldrb	r3, [r3, #0]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	24005f80 	.word	0x24005f80

080107e4 <MB_getMRValueIn2Byte>:
/**
  * @brief To get the requested data output value from the request PDU buffer
  * @param none
  * @retval the output value for single coil or register
  */
uint16_t MB_getMRValueIn2Byte(uint8_t index){
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	4603      	mov	r3, r0
 80107ec:	71fb      	strb	r3, [r7, #7]
	return MB_get2byteData(index);//(mbHandle.rxBuffer[MB_FC_INDEX+3]<<8 | mbHandle.rxBuffer[MB_FC_INDEX+4])
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7ff ff7b 	bl	80106ec <MB_get2byteData>
 80107f6:	4603      	mov	r3, r0
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <MB_getMWRAndMask>:
/**
  * @brief To get the AND mask for the mask write register from the requested PDU buffer
  * @param none
  * @retval 0x0000-0xFFFF, returns AND mask for mask write register
  */
uint16_t MB_getMWRAndMask(void){
 8010800:	b580      	push	{r7, lr}
 8010802:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+3);//(mbHandle.rxBuffer[MB_FC_INDEX+3]<<8 | mbHandle.rxBuffer[MB_FC_INDEX+4]);
 8010804:	2004      	movs	r0, #4
 8010806:	f7ff ff71 	bl	80106ec <MB_get2byteData>
 801080a:	4603      	mov	r3, r0
}
 801080c:	4618      	mov	r0, r3
 801080e:	bd80      	pop	{r7, pc}

08010810 <MB_getMWROrMask>:
/**
  * @brief To get the OR mask for the mask write register from the requested PDU buffer
  * @param none
  * @retval 0x0000-0xFFFF, returns OR mask for mask write register
  */
uint16_t MB_getMWROrMask(void){
 8010810:	b580      	push	{r7, lr}
 8010812:	af00      	add	r7, sp, #0
	return MB_get2byteData(MB_FC_INDEX+5);//(mbHandle.rxBuffer[MB_FC_INDEX+5]<<8 | mbHandle.rxBuffer[MB_FC_INDEX+6]);
 8010814:	2006      	movs	r0, #6
 8010816:	f7ff ff69 	bl	80106ec <MB_get2byteData>
 801081a:	4603      	mov	r3, r0
}
 801081c:	4618      	mov	r0, r3
 801081e:	bd80      	pop	{r7, pc}

08010820 <MB_readCoils>:
/**
  * @brief To read the coils status (FC-01) and make the response PDU
  * @param none
  * @retval 2-4 & 255, where 2-4 = exception occurred , 255 = no exception occurred
  */
uint8_t MB_readCoils(void){
 8010820:	b5b0      	push	{r4, r5, r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkDataQtyAddr( MB_getStartAddress(MB_FC_INDEX+1), (MB_COA_MAX-MB_CO_ADDR_OFFSET),
 8010826:	2002      	movs	r0, #2
 8010828:	f7ff ff96 	bl	8010758 <MB_getStartAddress>
 801082c:	4603      	mov	r3, r0
 801082e:	461c      	mov	r4, r3
 8010830:	2004      	movs	r0, #4
 8010832:	f7ff ffaf 	bl	8010794 <MB_getQuantity>
 8010836:	4603      	mov	r3, r0
 8010838:	461a      	mov	r2, r3
 801083a:	233e      	movs	r3, #62	; 0x3e
 801083c:	213e      	movs	r1, #62	; 0x3e
 801083e:	4620      	mov	r0, r4
 8010840:	f7ff fe70 	bl	8010524 <MB_checkDataQtyAddr>
 8010844:	4603      	mov	r3, r0
 8010846:	73bb      	strb	r3, [r7, #14]
			MB_getQuantity(MB_FC_INDEX+3), (MB_COA_MAX-MB_CO_ADDR_OFFSET) );//MB_checkCoilDataQtyAddr(MB_CA_MAX);
	if(excepCode == 0){										// if there is no exception
 8010848:	7bbb      	ldrb	r3, [r7, #14]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d16b      	bne.n	8010926 <MB_readCoils+0x106>
 801084e:	466b      	mov	r3, sp
 8010850:	461d      	mov	r5, r3

		uint8_t byteCount = (MB_getQuantity(MB_FC_INDEX+3)/8)+((MB_getQuantity(MB_FC_INDEX+3)%8)>0);
 8010852:	2004      	movs	r0, #4
 8010854:	f7ff ff9e 	bl	8010794 <MB_getQuantity>
 8010858:	4603      	mov	r3, r0
 801085a:	08db      	lsrs	r3, r3, #3
 801085c:	b29b      	uxth	r3, r3
 801085e:	b2dc      	uxtb	r4, r3
 8010860:	2004      	movs	r0, #4
 8010862:	f7ff ff97 	bl	8010794 <MB_getQuantity>
 8010866:	4603      	mov	r3, r0
 8010868:	f003 0307 	and.w	r3, r3, #7
 801086c:	b29b      	uxth	r3, r3
 801086e:	2b00      	cmp	r3, #0
 8010870:	bf14      	ite	ne
 8010872:	2301      	movne	r3, #1
 8010874:	2300      	moveq	r3, #0
 8010876:	b2db      	uxtb	r3, r3
 8010878:	4423      	add	r3, r4
 801087a:	737b      	strb	r3, [r7, #13]
		uint16_t startAddress = MB_getStartAddress(MB_FC_INDEX+1)+MB_CO_ADDR_OFFSET;
 801087c:	2002      	movs	r0, #2
 801087e:	f7ff ff6b 	bl	8010758 <MB_getStartAddress>
 8010882:	4603      	mov	r3, r0
 8010884:	3301      	adds	r3, #1
 8010886:	817b      	strh	r3, [r7, #10]
		uint16_t endAddress = startAddress + MB_getQuantity(MB_FC_INDEX+3);
 8010888:	2004      	movs	r0, #4
 801088a:	f7ff ff83 	bl	8010794 <MB_getQuantity>
 801088e:	4603      	mov	r3, r0
 8010890:	461a      	mov	r2, r3
 8010892:	897b      	ldrh	r3, [r7, #10]
 8010894:	4413      	add	r3, r2
 8010896:	813b      	strh	r3, [r7, #8]
		uint8_t data[byteCount];
 8010898:	7b7c      	ldrb	r4, [r7, #13]
 801089a:	4623      	mov	r3, r4
 801089c:	3b01      	subs	r3, #1
 801089e:	607b      	str	r3, [r7, #4]
 80108a0:	b2e0      	uxtb	r0, r4
 80108a2:	f04f 0100 	mov.w	r1, #0
 80108a6:	f04f 0200 	mov.w	r2, #0
 80108aa:	f04f 0300 	mov.w	r3, #0
 80108ae:	00cb      	lsls	r3, r1, #3
 80108b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80108b4:	00c2      	lsls	r2, r0, #3
 80108b6:	b2e0      	uxtb	r0, r4
 80108b8:	f04f 0100 	mov.w	r1, #0
 80108bc:	f04f 0200 	mov.w	r2, #0
 80108c0:	f04f 0300 	mov.w	r3, #0
 80108c4:	00cb      	lsls	r3, r1, #3
 80108c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80108ca:	00c2      	lsls	r2, r0, #3
 80108cc:	4623      	mov	r3, r4
 80108ce:	3307      	adds	r3, #7
 80108d0:	08db      	lsrs	r3, r3, #3
 80108d2:	00db      	lsls	r3, r3, #3
 80108d4:	ebad 0d03 	sub.w	sp, sp, r3
 80108d8:	466b      	mov	r3, sp
 80108da:	3300      	adds	r3, #0
 80108dc:	603b      	str	r3, [r7, #0]

		if(MB_getCoilsInByte(data, byteCount, startAddress, endAddress)){
 80108de:	6838      	ldr	r0, [r7, #0]
 80108e0:	893b      	ldrh	r3, [r7, #8]
 80108e2:	897a      	ldrh	r2, [r7, #10]
 80108e4:	7b79      	ldrb	r1, [r7, #13]
 80108e6:	f000 fe35 	bl	8011554 <MB_getCoilsInByte>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d017      	beq.n	8010920 <MB_readCoils+0x100>
			MB_appendToRespPDU_SAFC();							// to append slave address and function code to response PDU
 80108f0:	f7ff fc72 	bl	80101d8 <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);  // total response byte
 80108f4:	7b7b      	ldrb	r3, [r7, #13]
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7ff fc52 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < byteCount; i++){
 80108fc:	2300      	movs	r3, #0
 80108fe:	73fb      	strb	r3, [r7, #15]
 8010900:	e008      	b.n	8010914 <MB_readCoils+0xf4>
				MB_appendToRespPDU(data[i]);
 8010902:	7bfb      	ldrb	r3, [r7, #15]
 8010904:	683a      	ldr	r2, [r7, #0]
 8010906:	5cd3      	ldrb	r3, [r2, r3]
 8010908:	4618      	mov	r0, r3
 801090a:	f7ff fc49 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < byteCount; i++){
 801090e:	7bfb      	ldrb	r3, [r7, #15]
 8010910:	3301      	adds	r3, #1
 8010912:	73fb      	strb	r3, [r7, #15]
 8010914:	7bfa      	ldrb	r2, [r7, #15]
 8010916:	7b7b      	ldrb	r3, [r7, #13]
 8010918:	429a      	cmp	r2, r3
 801091a:	d3f2      	bcc.n	8010902 <MB_readCoils+0xe2>
			}
//			MB_appendToRespPDU_CRC();
			//HAL_UART_Transmit(&huart2, mbHandle.txBuffer, mbHandle.txBufferSize, MB_TRANS_TIMEOUT);
			return MB_RS_255;
 801091c:	23ff      	movs	r3, #255	; 0xff
 801091e:	e000      	b.n	8010922 <MB_readCoils+0x102>
		}else{
			return MB_EC_SDV_4;								// returns exception code 04
 8010920:	2304      	movs	r3, #4
 8010922:	46ad      	mov	sp, r5
 8010924:	e000      	b.n	8010928 <MB_readCoils+0x108>
		}

		/*------- Test end---------*/

	}else{													// if exception occurred
		return excepCode;
 8010926:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 8010928:	4618      	mov	r0, r3
 801092a:	3710      	adds	r7, #16
 801092c:	46bd      	mov	sp, r7
 801092e:	bdb0      	pop	{r4, r5, r7, pc}

08010930 <MB_readDI>:
/**
  * @brief To read the discrete input status (FC-02) and make the response PDU
  * @param none
  * @retval none
  */
uint8_t MB_readDI(void){
 8010930:	b5b0      	push	{r4, r5, r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkDataQtyAddr( MB_getStartAddress(MB_FC_INDEX+1), (MB_DIA_MAX-MB_DI_ADDR_OFFSET),
 8010936:	2002      	movs	r0, #2
 8010938:	f7ff ff0e 	bl	8010758 <MB_getStartAddress>
 801093c:	4603      	mov	r3, r0
 801093e:	461c      	mov	r4, r3
 8010940:	2004      	movs	r0, #4
 8010942:	f7ff ff27 	bl	8010794 <MB_getQuantity>
 8010946:	4603      	mov	r3, r0
 8010948:	461a      	mov	r2, r3
 801094a:	2308      	movs	r3, #8
 801094c:	2108      	movs	r1, #8
 801094e:	4620      	mov	r0, r4
 8010950:	f7ff fde8 	bl	8010524 <MB_checkDataQtyAddr>
 8010954:	4603      	mov	r3, r0
 8010956:	73bb      	strb	r3, [r7, #14]
						MB_getQuantity(MB_FC_INDEX+3), (MB_DIA_MAX-MB_DI_ADDR_OFFSET) );//MB_checkCoilDataQtyAddr(MB_DIA_MAX);
	if(excepCode == 0){										// if there is no exception
 8010958:	7bbb      	ldrb	r3, [r7, #14]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d16e      	bne.n	8010a3c <MB_readDI+0x10c>
 801095e:	466b      	mov	r3, sp
 8010960:	461d      	mov	r5, r3

		/*------- Test start---------*/
		uint8_t byteCount = (MB_getQuantity(MB_FC_INDEX+3)/8)+((MB_getQuantity(MB_FC_INDEX+3)%8)>0);
 8010962:	2004      	movs	r0, #4
 8010964:	f7ff ff16 	bl	8010794 <MB_getQuantity>
 8010968:	4603      	mov	r3, r0
 801096a:	08db      	lsrs	r3, r3, #3
 801096c:	b29b      	uxth	r3, r3
 801096e:	b2dc      	uxtb	r4, r3
 8010970:	2004      	movs	r0, #4
 8010972:	f7ff ff0f 	bl	8010794 <MB_getQuantity>
 8010976:	4603      	mov	r3, r0
 8010978:	f003 0307 	and.w	r3, r3, #7
 801097c:	b29b      	uxth	r3, r3
 801097e:	2b00      	cmp	r3, #0
 8010980:	bf14      	ite	ne
 8010982:	2301      	movne	r3, #1
 8010984:	2300      	moveq	r3, #0
 8010986:	b2db      	uxtb	r3, r3
 8010988:	4423      	add	r3, r4
 801098a:	737b      	strb	r3, [r7, #13]
		uint16_t startAddress = MB_getStartAddress(MB_FC_INDEX+1)+MB_DI_ADDR_OFFSET;
 801098c:	2002      	movs	r0, #2
 801098e:	f7ff fee3 	bl	8010758 <MB_getStartAddress>
 8010992:	4603      	mov	r3, r0
 8010994:	461a      	mov	r2, r3
 8010996:	f242 7311 	movw	r3, #10001	; 0x2711
 801099a:	4413      	add	r3, r2
 801099c:	817b      	strh	r3, [r7, #10]
		uint16_t endAddress = startAddress + MB_getQuantity(MB_FC_INDEX+3);
 801099e:	2004      	movs	r0, #4
 80109a0:	f7ff fef8 	bl	8010794 <MB_getQuantity>
 80109a4:	4603      	mov	r3, r0
 80109a6:	461a      	mov	r2, r3
 80109a8:	897b      	ldrh	r3, [r7, #10]
 80109aa:	4413      	add	r3, r2
 80109ac:	813b      	strh	r3, [r7, #8]
		uint8_t data[byteCount];
 80109ae:	7b7c      	ldrb	r4, [r7, #13]
 80109b0:	4623      	mov	r3, r4
 80109b2:	3b01      	subs	r3, #1
 80109b4:	607b      	str	r3, [r7, #4]
 80109b6:	b2e0      	uxtb	r0, r4
 80109b8:	f04f 0100 	mov.w	r1, #0
 80109bc:	f04f 0200 	mov.w	r2, #0
 80109c0:	f04f 0300 	mov.w	r3, #0
 80109c4:	00cb      	lsls	r3, r1, #3
 80109c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80109ca:	00c2      	lsls	r2, r0, #3
 80109cc:	b2e0      	uxtb	r0, r4
 80109ce:	f04f 0100 	mov.w	r1, #0
 80109d2:	f04f 0200 	mov.w	r2, #0
 80109d6:	f04f 0300 	mov.w	r3, #0
 80109da:	00cb      	lsls	r3, r1, #3
 80109dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80109e0:	00c2      	lsls	r2, r0, #3
 80109e2:	4623      	mov	r3, r4
 80109e4:	3307      	adds	r3, #7
 80109e6:	08db      	lsrs	r3, r3, #3
 80109e8:	00db      	lsls	r3, r3, #3
 80109ea:	ebad 0d03 	sub.w	sp, sp, r3
 80109ee:	466b      	mov	r3, sp
 80109f0:	3300      	adds	r3, #0
 80109f2:	603b      	str	r3, [r7, #0]
		if(MB_getDIInByte(data, byteCount, startAddress, endAddress)){
 80109f4:	6838      	ldr	r0, [r7, #0]
 80109f6:	893b      	ldrh	r3, [r7, #8]
 80109f8:	897a      	ldrh	r2, [r7, #10]
 80109fa:	7b79      	ldrb	r1, [r7, #13]
 80109fc:	f000 fcfe 	bl	80113fc <MB_getDIInByte>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d017      	beq.n	8010a36 <MB_readDI+0x106>
			MB_appendToRespPDU_SAFC();							// to append slave address and function code to response PDU
 8010a06:	f7ff fbe7 	bl	80101d8 <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);  // total response byte
 8010a0a:	7b7b      	ldrb	r3, [r7, #13]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7ff fbc7 	bl	80101a0 <MB_appendToRespPDU>

			for(uint8_t i = 0; i < byteCount; i++){
 8010a12:	2300      	movs	r3, #0
 8010a14:	73fb      	strb	r3, [r7, #15]
 8010a16:	e008      	b.n	8010a2a <MB_readDI+0xfa>
				MB_appendToRespPDU(data[i]);
 8010a18:	7bfb      	ldrb	r3, [r7, #15]
 8010a1a:	683a      	ldr	r2, [r7, #0]
 8010a1c:	5cd3      	ldrb	r3, [r2, r3]
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7ff fbbe 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < byteCount; i++){
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	3301      	adds	r3, #1
 8010a28:	73fb      	strb	r3, [r7, #15]
 8010a2a:	7bfa      	ldrb	r2, [r7, #15]
 8010a2c:	7b7b      	ldrb	r3, [r7, #13]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d3f2      	bcc.n	8010a18 <MB_readDI+0xe8>
			}
//			MB_appendToRespPDU_CRC();
			return MB_RS_255;
 8010a32:	23ff      	movs	r3, #255	; 0xff
 8010a34:	e000      	b.n	8010a38 <MB_readDI+0x108>
		}else{
			return MB_EC_SDV_4;								// returns exception code 04
 8010a36:	2304      	movs	r3, #4
 8010a38:	46ad      	mov	sp, r5
 8010a3a:	e000      	b.n	8010a3e <MB_readDI+0x10e>
		}

	}else{													// if exception occurred
		return excepCode;
 8010a3c:	7bbb      	ldrb	r3, [r7, #14]
	}

}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010a48 <MB_readHR>:
/**
  * @brief To read the holding Register (FC-03) and make the response PDU
  * @param none
  * @retval none
  */
uint8_t MB_readHR(void){
 8010a48:	b5b0      	push	{r4, r5, r7, lr}
 8010a4a:	b086      	sub	sp, #24
 8010a4c:	af00      	add	r7, sp, #0
	uint8_t excepCode =  MB_checkDataQtyAddr(MB_getStartAddress(MB_FC_INDEX+1), (MB_HRA_MAX-MB_HR_ADDR_OFFSET),
 8010a4e:	2002      	movs	r0, #2
 8010a50:	f7ff fe82 	bl	8010758 <MB_getStartAddress>
 8010a54:	4603      	mov	r3, r0
 8010a56:	461c      	mov	r4, r3
 8010a58:	2004      	movs	r0, #4
 8010a5a:	f7ff fe9b 	bl	8010794 <MB_getQuantity>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	461a      	mov	r2, r3
 8010a62:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8010a66:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f7ff fd5a 	bl	8010524 <MB_checkDataQtyAddr>
 8010a70:	4603      	mov	r3, r0
 8010a72:	75bb      	strb	r3, [r7, #22]
						 MB_getQuantity(MB_FC_INDEX+3), (MB_HRA_MAX-MB_HR_ADDR_OFFSET));//MB_checkRegisterDataQtyAddr(MB_HRA_MAX);
	if(excepCode == 0){										// if there is no exception
 8010a74:	7dbb      	ldrb	r3, [r7, #22]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d174      	bne.n	8010b64 <MB_readHR+0x11c>
 8010a7a:	466b      	mov	r3, sp
 8010a7c:	461d      	mov	r5, r3

		/*------- Test start---------*/

		uint8_t size = MB_getQuantity(MB_FC_INDEX+3);		// get the requested quantity
 8010a7e:	2004      	movs	r0, #4
 8010a80:	f7ff fe88 	bl	8010794 <MB_getQuantity>
 8010a84:	4603      	mov	r3, r0
 8010a86:	757b      	strb	r3, [r7, #21]
		uint16_t data[size];
 8010a88:	7d7c      	ldrb	r4, [r7, #21]
 8010a8a:	4623      	mov	r3, r4
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	613b      	str	r3, [r7, #16]
 8010a90:	b2e0      	uxtb	r0, r4
 8010a92:	f04f 0100 	mov.w	r1, #0
 8010a96:	f04f 0200 	mov.w	r2, #0
 8010a9a:	f04f 0300 	mov.w	r3, #0
 8010a9e:	010b      	lsls	r3, r1, #4
 8010aa0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8010aa4:	0102      	lsls	r2, r0, #4
 8010aa6:	b2e0      	uxtb	r0, r4
 8010aa8:	f04f 0100 	mov.w	r1, #0
 8010aac:	f04f 0200 	mov.w	r2, #0
 8010ab0:	f04f 0300 	mov.w	r3, #0
 8010ab4:	010b      	lsls	r3, r1, #4
 8010ab6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8010aba:	0102      	lsls	r2, r0, #4
 8010abc:	4623      	mov	r3, r4
 8010abe:	005b      	lsls	r3, r3, #1
 8010ac0:	3307      	adds	r3, #7
 8010ac2:	08db      	lsrs	r3, r3, #3
 8010ac4:	00db      	lsls	r3, r3, #3
 8010ac6:	ebad 0d03 	sub.w	sp, sp, r3
 8010aca:	466b      	mov	r3, sp
 8010acc:	3301      	adds	r3, #1
 8010ace:	085b      	lsrs	r3, r3, #1
 8010ad0:	005b      	lsls	r3, r3, #1
 8010ad2:	60fb      	str	r3, [r7, #12]
		uint16_t startAddress =  MB_getStartAddress(MB_FC_INDEX+1)+MB_HR_ADDR_OFFSET;
 8010ad4:	2002      	movs	r0, #2
 8010ad6:	f7ff fe3f 	bl	8010758 <MB_getStartAddress>
 8010ada:	4603      	mov	r3, r0
 8010adc:	461a      	mov	r2, r3
 8010ade:	4b24      	ldr	r3, [pc, #144]	; (8010b70 <MB_readHR+0x128>)
 8010ae0:	4413      	add	r3, r2
 8010ae2:	817b      	strh	r3, [r7, #10]
		uint16_t lastAddress = startAddress+size-1;
 8010ae4:	7d7b      	ldrb	r3, [r7, #21]
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	897b      	ldrh	r3, [r7, #10]
 8010aea:	4413      	add	r3, r2
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	3b01      	subs	r3, #1
 8010af0:	813b      	strh	r3, [r7, #8]
		// retrieve registers value and make the response

		if(MB_getHRsValue(data, startAddress, lastAddress)){
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	893a      	ldrh	r2, [r7, #8]
 8010af6:	8979      	ldrh	r1, [r7, #10]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f000 fddf 	bl	80116bc <MB_getHRsValue>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d02c      	beq.n	8010b5e <MB_readHR+0x116>

			uint16_t andMask = 0x00FF;
 8010b04:	23ff      	movs	r3, #255	; 0xff
 8010b06:	80fb      	strh	r3, [r7, #6]
			uint8_t byteCount = size*2;
 8010b08:	7d7b      	ldrb	r3, [r7, #21]
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	717b      	strb	r3, [r7, #5]
			MB_appendToRespPDU_SAFC();
 8010b0e:	f7ff fb63 	bl	80101d8 <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);
 8010b12:	797b      	ldrb	r3, [r7, #5]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff fb43 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < size; i++){
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	75fb      	strb	r3, [r7, #23]
 8010b1e:	e018      	b.n	8010b52 <MB_readHR+0x10a>
				MB_appendToRespPDU((uint8_t)(data[i]>>8));
 8010b20:	7dfa      	ldrb	r2, [r7, #23]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010b28:	0a1b      	lsrs	r3, r3, #8
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7ff fb36 	bl	80101a0 <MB_appendToRespPDU>
				MB_appendToRespPDU((uint8_t)(data[i] & andMask));
 8010b34:	7dfa      	ldrb	r2, [r7, #23]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010b3c:	b2da      	uxtb	r2, r3
 8010b3e:	88fb      	ldrh	r3, [r7, #6]
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	4013      	ands	r3, r2
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7ff fb2a 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < size; i++){
 8010b4c:	7dfb      	ldrb	r3, [r7, #23]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	75fb      	strb	r3, [r7, #23]
 8010b52:	7dfa      	ldrb	r2, [r7, #23]
 8010b54:	7d7b      	ldrb	r3, [r7, #21]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d3e2      	bcc.n	8010b20 <MB_readHR+0xd8>

			}

//			MB_appendToRespPDU_CRC();

			return MB_RS_255;
 8010b5a:	23ff      	movs	r3, #255	; 0xff
 8010b5c:	e000      	b.n	8010b60 <MB_readHR+0x118>
		}else{
			return MB_EC_SDV_4;									// exception - 4 ,  service device failure
 8010b5e:	2304      	movs	r3, #4
 8010b60:	46ad      	mov	sp, r5
 8010b62:	e000      	b.n	8010b66 <MB_readHR+0x11e>
		}

	}else{													// if exception occurred
		return excepCode;
 8010b64:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3718      	adds	r7, #24
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	ffff9c41 	.word	0xffff9c41

08010b74 <MB_readIR>:
/**
  * @brief To read the input register(FC-04) and make the response PDU
  * @param none
  * @retval none
  */
uint8_t MB_readIR(void){
 8010b74:	b5b0      	push	{r4, r5, r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkDataQtyAddr(MB_getStartAddress(MB_FC_INDEX+1), (MB_IRA_MAX-MB_IR_ADDR_OFFSET),
 8010b7a:	2002      	movs	r0, #2
 8010b7c:	f7ff fdec 	bl	8010758 <MB_getStartAddress>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461c      	mov	r4, r3
 8010b84:	2004      	movs	r0, #4
 8010b86:	f7ff fe05 	bl	8010794 <MB_getQuantity>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	23b2      	movs	r3, #178	; 0xb2
 8010b90:	21b2      	movs	r1, #178	; 0xb2
 8010b92:	4620      	mov	r0, r4
 8010b94:	f7ff fcc6 	bl	8010524 <MB_checkDataQtyAddr>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	75bb      	strb	r3, [r7, #22]
						MB_getQuantity(MB_FC_INDEX+3), (MB_IRA_MAX-MB_IR_ADDR_OFFSET));//MB_checkRegisterDataQtyAddr(MB_IRA_MAX);
	if(excepCode == 0){										// if there is no exception
 8010b9c:	7dbb      	ldrb	r3, [r7, #22]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d16f      	bne.n	8010c82 <MB_readIR+0x10e>
 8010ba2:	466b      	mov	r3, sp
 8010ba4:	461d      	mov	r5, r3

		uint8_t size = MB_getQuantity(MB_FC_INDEX+3);
 8010ba6:	2004      	movs	r0, #4
 8010ba8:	f7ff fdf4 	bl	8010794 <MB_getQuantity>
 8010bac:	4603      	mov	r3, r0
 8010bae:	757b      	strb	r3, [r7, #21]
		uint16_t data[size];
 8010bb0:	7d7c      	ldrb	r4, [r7, #21]
 8010bb2:	4623      	mov	r3, r4
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	613b      	str	r3, [r7, #16]
 8010bb8:	b2e0      	uxtb	r0, r4
 8010bba:	f04f 0100 	mov.w	r1, #0
 8010bbe:	f04f 0200 	mov.w	r2, #0
 8010bc2:	f04f 0300 	mov.w	r3, #0
 8010bc6:	010b      	lsls	r3, r1, #4
 8010bc8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8010bcc:	0102      	lsls	r2, r0, #4
 8010bce:	b2e0      	uxtb	r0, r4
 8010bd0:	f04f 0100 	mov.w	r1, #0
 8010bd4:	f04f 0200 	mov.w	r2, #0
 8010bd8:	f04f 0300 	mov.w	r3, #0
 8010bdc:	010b      	lsls	r3, r1, #4
 8010bde:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8010be2:	0102      	lsls	r2, r0, #4
 8010be4:	4623      	mov	r3, r4
 8010be6:	005b      	lsls	r3, r3, #1
 8010be8:	3307      	adds	r3, #7
 8010bea:	08db      	lsrs	r3, r3, #3
 8010bec:	00db      	lsls	r3, r3, #3
 8010bee:	ebad 0d03 	sub.w	sp, sp, r3
 8010bf2:	466b      	mov	r3, sp
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	085b      	lsrs	r3, r3, #1
 8010bf8:	005b      	lsls	r3, r3, #1
 8010bfa:	60fb      	str	r3, [r7, #12]
		uint16_t startAddress =  MB_getStartAddress(MB_FC_INDEX+1)+MB_IR_ADDR_OFFSET;
 8010bfc:	2002      	movs	r0, #2
 8010bfe:	f7ff fdab 	bl	8010758 <MB_getStartAddress>
 8010c02:	4603      	mov	r3, r0
 8010c04:	461a      	mov	r2, r3
 8010c06:	f247 5331 	movw	r3, #30001	; 0x7531
 8010c0a:	4413      	add	r3, r2
 8010c0c:	817b      	strh	r3, [r7, #10]
		uint16_t lastAddress = startAddress+size-1;
 8010c0e:	7d7b      	ldrb	r3, [r7, #21]
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	897b      	ldrh	r3, [r7, #10]
 8010c14:	4413      	add	r3, r2
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	813b      	strh	r3, [r7, #8]

		if(MB_getIRsValue(data, size,  startAddress, lastAddress)){
 8010c1c:	68f8      	ldr	r0, [r7, #12]
 8010c1e:	893b      	ldrh	r3, [r7, #8]
 8010c20:	897a      	ldrh	r2, [r7, #10]
 8010c22:	7d79      	ldrb	r1, [r7, #21]
 8010c24:	f000 fd18 	bl	8011658 <MB_getIRsValue>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d026      	beq.n	8010c7c <MB_readIR+0x108>


			uint8_t byteCount = size*2;
 8010c2e:	7d7b      	ldrb	r3, [r7, #21]
 8010c30:	005b      	lsls	r3, r3, #1
 8010c32:	71fb      	strb	r3, [r7, #7]
			MB_appendToRespPDU_SAFC();
 8010c34:	f7ff fad0 	bl	80101d8 <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);
 8010c38:	79fb      	ldrb	r3, [r7, #7]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff fab0 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < size; i++){
 8010c40:	2300      	movs	r3, #0
 8010c42:	75fb      	strb	r3, [r7, #23]
 8010c44:	e014      	b.n	8010c70 <MB_readIR+0xfc>
				MB_appendToRespPDU((uint8_t)(data[i]>>8));
 8010c46:	7dfa      	ldrb	r2, [r7, #23]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010c4e:	0a1b      	lsrs	r3, r3, #8
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7ff faa3 	bl	80101a0 <MB_appendToRespPDU>
				MB_appendToRespPDU((uint8_t)(data[i] & MB_AND_MASK_16T8));
 8010c5a:	7dfa      	ldrb	r2, [r7, #23]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7ff fa9b 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < size; i++){
 8010c6a:	7dfb      	ldrb	r3, [r7, #23]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	75fb      	strb	r3, [r7, #23]
 8010c70:	7dfa      	ldrb	r2, [r7, #23]
 8010c72:	7d7b      	ldrb	r3, [r7, #21]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d3e6      	bcc.n	8010c46 <MB_readIR+0xd2>
			}
			return MB_RS_255;
 8010c78:	23ff      	movs	r3, #255	; 0xff
 8010c7a:	e000      	b.n	8010c7e <MB_readIR+0x10a>
		}else{

			return MB_EC_SDV_4;									// exception - 4 ,  service device failure
 8010c7c:	2304      	movs	r3, #4
 8010c7e:	46ad      	mov	sp, r5
 8010c80:	e000      	b.n	8010c84 <MB_readIR+0x110>
		}

	}else{													// if exception occurred
		return excepCode;
 8010c82:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bdb0      	pop	{r4, r5, r7, pc}

08010c8c <MB_writeSC>:
/**
  * @brief To write the single coil(FC-05) and make the response PDU
  * @param none
  * @retval none
  */
uint8_t MB_writeSC(void){
 8010c8c:	b590      	push	{r4, r7, lr}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkSCValueAddr();
 8010c92:	f7ff fcf2 	bl	801067a <MB_checkSCValueAddr>
 8010c96:	4603      	mov	r3, r0
 8010c98:	71fb      	strb	r3, [r7, #7]
	if(excepCode == 0){										// if there is no exception
 8010c9a:	79fb      	ldrb	r3, [r7, #7]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d11f      	bne.n	8010ce0 <MB_writeSC+0x54>
		/*------- Test start---------*/

		if(MB_setCoil(MB_getSCRAddress()+MB_CO_ADDR_OFFSET, MB_getSCRValue())){
 8010ca0:	f7ff fd68 	bl	8010774 <MB_getSCRAddress>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	b29c      	uxth	r4, r3
 8010caa:	f7ff fd81 	bl	80107b0 <MB_getSCRValue>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f000 fc1e 	bl	80114f4 <MB_setCoil>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d00e      	beq.n	8010cdc <MB_writeSC+0x50>
			memcpy(mbHandle.txBuffer, mbHandle.rxBuffer, mbHandle.rxBufferSize); // 2 is subtracted, case of 2 byte crc will add at the end of the processing
 8010cbe:	4b0b      	ldr	r3, [pc, #44]	; (8010cec <MB_writeSC+0x60>)
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	4a0a      	ldr	r2, [pc, #40]	; (8010cec <MB_writeSC+0x60>)
 8010cc4:	6851      	ldr	r1, [r2, #4]
 8010cc6:	4a09      	ldr	r2, [pc, #36]	; (8010cec <MB_writeSC+0x60>)
 8010cc8:	7b12      	ldrb	r2, [r2, #12]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f015 fd24 	bl	8026718 <memcpy>
			mbHandle.txBufferSize = mbHandle.rxBufferSize; // 2 is subtracted, case of 2 byte crc will add at the end of the processing
 8010cd0:	4b06      	ldr	r3, [pc, #24]	; (8010cec <MB_writeSC+0x60>)
 8010cd2:	7b1a      	ldrb	r2, [r3, #12]
 8010cd4:	4b05      	ldr	r3, [pc, #20]	; (8010cec <MB_writeSC+0x60>)
 8010cd6:	735a      	strb	r2, [r3, #13]

			return MB_RS_255;
 8010cd8:	23ff      	movs	r3, #255	; 0xff
 8010cda:	e002      	b.n	8010ce2 <MB_writeSC+0x56>
		}else{
			return MB_EC_SDV_4;
 8010cdc:	2304      	movs	r3, #4
 8010cde:	e000      	b.n	8010ce2 <MB_writeSC+0x56>


		/*------- Test end---------*/

	}else{													// if exception occurred
		return excepCode;
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	370c      	adds	r7, #12
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd90      	pop	{r4, r7, pc}
 8010cea:	bf00      	nop
 8010cec:	24005f80 	.word	0x24005f80

08010cf0 <MB_writeSHR>:
/**
  * @brief To write the single register(FC-06) and make the response PDU
  * @param none
  * @retval none
  */
uint8_t MB_writeSHR(void){
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkSRValueAddr();
 8010cf6:	f7ff fcdc 	bl	80106b2 <MB_checkSRValueAddr>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	71fb      	strb	r3, [r7, #7]
	if(excepCode == 0U){										// if there is no exception
 8010cfe:	79fb      	ldrb	r3, [r7, #7]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d12d      	bne.n	8010d60 <MB_writeSHR+0x70>
		if(MB_setHRValue(MB_getSCRAddress()+MB_HR_ADDR_OFFSET, MB_getSCRValue()) == MB_OK){//setSingleRegisterValue(MB_getSCRAddress()+MB_HR_ADDR_OFFSET, MB_getSCRValue())){
 8010d04:	f7ff fd36 	bl	8010774 <MB_getSCRAddress>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	4b17      	ldr	r3, [pc, #92]	; (8010d6c <MB_writeSHR+0x7c>)
 8010d0e:	4413      	add	r3, r2
 8010d10:	b29c      	uxth	r4, r3
 8010d12:	f7ff fd4d 	bl	80107b0 <MB_getSCRValue>
 8010d16:	4603      	mov	r3, r0
 8010d18:	4619      	mov	r1, r3
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f000 fcfe 	bl	801171c <MB_setHRValue>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d11a      	bne.n	8010d5c <MB_writeSHR+0x6c>
			memcpy(mbHandle.txBuffer, mbHandle.rxBuffer, mbHandle.rxBufferSize);  // 2 is subtracted, case of 2 byte crc will add at the end of the processing
 8010d26:	4b12      	ldr	r3, [pc, #72]	; (8010d70 <MB_writeSHR+0x80>)
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	4a11      	ldr	r2, [pc, #68]	; (8010d70 <MB_writeSHR+0x80>)
 8010d2c:	6851      	ldr	r1, [r2, #4]
 8010d2e:	4a10      	ldr	r2, [pc, #64]	; (8010d70 <MB_writeSHR+0x80>)
 8010d30:	7b12      	ldrb	r2, [r2, #12]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f015 fcf0 	bl	8026718 <memcpy>
			if((MB_getSCRAddress()+MB_HR_ADDR_OFFSET) == MB_HRA_MB_SLAVE_ADDRESS){
 8010d38:	f7ff fd1c 	bl	8010774 <MB_getSCRAddress>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010d42:	d105      	bne.n	8010d50 <MB_writeSHR+0x60>
				mbHandle.txBuffer[MB_SA_INDEX] = MB_getSlaveAddress();
 8010d44:	4b0a      	ldr	r3, [pc, #40]	; (8010d70 <MB_writeSHR+0x80>)
 8010d46:	689c      	ldr	r4, [r3, #8]
 8010d48:	f7ff fcee 	bl	8010728 <MB_getSlaveAddress>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	7023      	strb	r3, [r4, #0]
			}
			mbHandle.txBufferSize = mbHandle.rxBufferSize; // 2 is subtracted, case of 2 byte crc will add at the end of the processing
 8010d50:	4b07      	ldr	r3, [pc, #28]	; (8010d70 <MB_writeSHR+0x80>)
 8010d52:	7b1a      	ldrb	r2, [r3, #12]
 8010d54:	4b06      	ldr	r3, [pc, #24]	; (8010d70 <MB_writeSHR+0x80>)
 8010d56:	735a      	strb	r2, [r3, #13]
			return MB_RS_255;
 8010d58:	23ff      	movs	r3, #255	; 0xff
 8010d5a:	e002      	b.n	8010d62 <MB_writeSHR+0x72>
		}else{
			return MB_EC_SDV_4;
 8010d5c:	2304      	movs	r3, #4
 8010d5e:	e000      	b.n	8010d62 <MB_writeSHR+0x72>
		}
	}else{													// if exception occurred
		return excepCode;
 8010d60:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	370c      	adds	r7, #12
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd90      	pop	{r4, r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	ffff9c41 	.word	0xffff9c41
 8010d70:	24005f80 	.word	0x24005f80

08010d74 <MB_readES>:
/**
  * @brief To Read Exception Status (FC-07) and make the response PDU
  * @param none
  * @retval none
  */
uint8_t MB_readES(void){
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
	/*------- Test start---------*/
	//TODO: it is not implement properly, later we will implement
	uint8_t excepStatus = MB_GetExcepStatus();
 8010d7a:	f000 fd8f 	bl	801189c <MB_GetExcepStatus>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	71fb      	strb	r3, [r7, #7]
	if( excepStatus >= 0 && excepStatus <= 255u){										// if there is no exception
		MB_appendToRespPDU_SAFC();
 8010d82:	f7ff fa29 	bl	80101d8 <MB_appendToRespPDU_SAFC>
		MB_appendToRespPDU(excepStatus);
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7ff fa09 	bl	80101a0 <MB_appendToRespPDU>
//		MB_appendToRespPDU_CRC();
		return MB_RS_255;
 8010d8e:	23ff      	movs	r3, #255	; 0xff
	}else{													// if exception occurred
		return MB_EC_SDV_4;
	}

	/*------- Test end---------*/
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <MB_diagnostics>:
/**
  * @brief Diagnostics (FC-08)
  * @param none
  * @retval status code for exception and non exception
  */
uint8_t  MB_diagnostics(void){
 8010d98:	b590      	push	{r4, r7, lr}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
	if(MB_DIAG_CheckDSFC(MB_getDiagSFC())){						// to check the sub-function code for diagnostics
 8010d9e:	f7fe fec1 	bl	800fb24 <MB_getDiagSFC>
 8010da2:	4603      	mov	r3, r0
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe fd48 	bl	800f83c <MB_DIAG_CheckDSFC>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f000 808f 	beq.w	8010ed2 <MB_diagnostics+0x13a>
		if(MB_getDiagSFC() == MB_DSFC_RQD_0){					// if the sub-function code is 0
 8010db4:	f7fe feb6 	bl	800fb24 <MB_getDiagSFC>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d104      	bne.n	8010dc8 <MB_diagnostics+0x30>
			 * where, the requested pdu buffer is subtracting by 6 as a result we have only
			 * the number of data bytes and dividing by 2 to check there is an even number
			 * of data bytes. Because, each data contains 2 bytes. otherwise it will through an exception
			 *
			 * */
			return MB_DSF_ReturnQD(&mbHandle.diag);
 8010dbe:	4847      	ldr	r0, [pc, #284]	; (8010edc <MB_diagnostics+0x144>)
 8010dc0:	f7fe fd88 	bl	800f8d4 <MB_DSF_ReturnQD>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	e085      	b.n	8010ed4 <MB_diagnostics+0x13c>
		}else{

			if(MB_DIAG_CheckData(MB_getDiagSFC(), MB_getDiagData())){
 8010dc8:	f7fe feac 	bl	800fb24 <MB_getDiagSFC>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	b2dc      	uxtb	r4, r3
 8010dd0:	f7fe feb0 	bl	800fb34 <MB_getDiagData>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f7fe fd50 	bl	800f87e <MB_DIAG_CheckData>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d074      	beq.n	8010ece <MB_diagnostics+0x136>
				uint8_t status = MB_EC_SDV_4;
 8010de4:	2304      	movs	r3, #4
 8010de6:	71fb      	strb	r3, [r7, #7]
				switch (MB_getDiagSFC()) {
 8010de8:	f7fe fe9c 	bl	800fb24 <MB_getDiagSFC>
 8010dec:	4603      	mov	r3, r0
 8010dee:	3b01      	subs	r3, #1
 8010df0:	2b13      	cmp	r3, #19
 8010df2:	d867      	bhi.n	8010ec4 <MB_diagnostics+0x12c>
 8010df4:	a201      	add	r2, pc, #4	; (adr r2, 8010dfc <MB_diagnostics+0x64>)
 8010df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfa:	bf00      	nop
 8010dfc:	08010e4d 	.word	0x08010e4d
 8010e00:	08010e59 	.word	0x08010e59
 8010e04:	08010ec5 	.word	0x08010ec5
 8010e08:	08010e65 	.word	0x08010e65
 8010e0c:	08010ec5 	.word	0x08010ec5
 8010e10:	08010ec5 	.word	0x08010ec5
 8010e14:	08010ec5 	.word	0x08010ec5
 8010e18:	08010ec5 	.word	0x08010ec5
 8010e1c:	08010ec5 	.word	0x08010ec5
 8010e20:	08010e71 	.word	0x08010e71
 8010e24:	08010e7d 	.word	0x08010e7d
 8010e28:	08010e89 	.word	0x08010e89
 8010e2c:	08010e95 	.word	0x08010e95
 8010e30:	08010ea1 	.word	0x08010ea1
 8010e34:	08010ec5 	.word	0x08010ec5
 8010e38:	08010ec5 	.word	0x08010ec5
 8010e3c:	08010ec5 	.word	0x08010ec5
 8010e40:	08010ead 	.word	0x08010ead
 8010e44:	08010ec5 	.word	0x08010ec5
 8010e48:	08010eb9 	.word	0x08010eb9
//					case MB_DSFC_RQD_0:
//						break;
					case MB_DSFC_RCO_1:
						status = MB_DSF_RestartCO(&mbHandle.diag);
 8010e4c:	4823      	ldr	r0, [pc, #140]	; (8010edc <MB_diagnostics+0x144>)
 8010e4e:	f7fe fd5f 	bl	800f910 <MB_DSF_RestartCO>
 8010e52:	4603      	mov	r3, r0
 8010e54:	71fb      	strb	r3, [r7, #7]
						break;
 8010e56:	e038      	b.n	8010eca <MB_diagnostics+0x132>
					case MB_DSFC_RDR_2:
						status = MB_DSF_ReturnDR(&mbHandle.diag);
 8010e58:	4820      	ldr	r0, [pc, #128]	; (8010edc <MB_diagnostics+0x144>)
 8010e5a:	f7fe fd97 	bl	800f98c <MB_DSF_ReturnDR>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	71fb      	strb	r3, [r7, #7]
						break;
 8010e62:	e032      	b.n	8010eca <MB_diagnostics+0x132>
//					case MB_DSFC_CAID_3:
//
//						break;
					case MB_DSFC_FLOM_4:
						status = MB_DSF_ForceLOM(&mbHandle.diag);
 8010e64:	481d      	ldr	r0, [pc, #116]	; (8010edc <MB_diagnostics+0x144>)
 8010e66:	f7fe fda5 	bl	800f9b4 <MB_DSF_ForceLOM>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	71fb      	strb	r3, [r7, #7]
						break;
 8010e6e:	e02c      	b.n	8010eca <MB_diagnostics+0x132>
					case MB_DSFC_CCDR_10:
						status = MB_DSF_ClearCDR(&mbHandle.diag);
 8010e70:	481a      	ldr	r0, [pc, #104]	; (8010edc <MB_diagnostics+0x144>)
 8010e72:	f7fe fdbb 	bl	800f9ec <MB_DSF_ClearCDR>
 8010e76:	4603      	mov	r3, r0
 8010e78:	71fb      	strb	r3, [r7, #7]
						break;
 8010e7a:	e026      	b.n	8010eca <MB_diagnostics+0x132>
					case MB_DSFC_RBMC_11:
						status = MB_DSF_ReturnBMC(&mbHandle.diag);
 8010e7c:	4817      	ldr	r0, [pc, #92]	; (8010edc <MB_diagnostics+0x144>)
 8010e7e:	f7fe fdd0 	bl	800fa22 <MB_DSF_ReturnBMC>
 8010e82:	4603      	mov	r3, r0
 8010e84:	71fb      	strb	r3, [r7, #7]
						break;
 8010e86:	e020      	b.n	8010eca <MB_diagnostics+0x132>
					case MB_DSFC_RBCEC_12:
						status = MB_DSF_ReturnBCEC(&mbHandle.diag);
 8010e88:	4814      	ldr	r0, [pc, #80]	; (8010edc <MB_diagnostics+0x144>)
 8010e8a:	f7fe fdd8 	bl	800fa3e <MB_DSF_ReturnBCEC>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	71fb      	strb	r3, [r7, #7]
						break;
 8010e92:	e01a      	b.n	8010eca <MB_diagnostics+0x132>
					case MB_DSFC_RBEEC_13:
						status = MB_DSF_ReturnBEEC(&mbHandle.diag);
 8010e94:	4811      	ldr	r0, [pc, #68]	; (8010edc <MB_diagnostics+0x144>)
 8010e96:	f7fe fde0 	bl	800fa5a <MB_DSF_ReturnBEEC>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	71fb      	strb	r3, [r7, #7]
						break;
 8010e9e:	e014      	b.n	8010eca <MB_diagnostics+0x132>
					case MB_DSFC_RSMC_14:
						status = MB_DSF_ReturnSMC(&mbHandle.diag);
 8010ea0:	480e      	ldr	r0, [pc, #56]	; (8010edc <MB_diagnostics+0x144>)
 8010ea2:	f7fe fde8 	bl	800fa76 <MB_DSF_ReturnSMC>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	71fb      	strb	r3, [r7, #7]
						break;
 8010eaa:	e00e      	b.n	8010eca <MB_diagnostics+0x132>
//						break;
//					case MB_DSFC_RSBC_17:
//
//						break;
					case MB_DSFC_RBCOC_18:
						status = MB_DSF_ReturnBCOC(&mbHandle.diag);
 8010eac:	480b      	ldr	r0, [pc, #44]	; (8010edc <MB_diagnostics+0x144>)
 8010eae:	f7fe fdf0 	bl	800fa92 <MB_DSF_ReturnBCOC>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	71fb      	strb	r3, [r7, #7]
						break;
 8010eb6:	e008      	b.n	8010eca <MB_diagnostics+0x132>
					case MB_DSFC_COCF_20:
						status = MB_DSF_ClearOCF(&mbHandle.diag);
 8010eb8:	4808      	ldr	r0, [pc, #32]	; (8010edc <MB_diagnostics+0x144>)
 8010eba:	f7fe fdf8 	bl	800faae <MB_DSF_ClearOCF>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	71fb      	strb	r3, [r7, #7]
						break;
 8010ec2:	e002      	b.n	8010eca <MB_diagnostics+0x132>
					default:
						status = MB_EC_SDV_4;
 8010ec4:	2304      	movs	r3, #4
 8010ec6:	71fb      	strb	r3, [r7, #7]
						break;
 8010ec8:	bf00      	nop
				}
				return status;
 8010eca:	79fb      	ldrb	r3, [r7, #7]
 8010ecc:	e002      	b.n	8010ed4 <MB_diagnostics+0x13c>
			}else{
				return MB_EC_ILDV_3;						// if data value of the diagnostics sub-function is not valid, it will returns exception code 3
 8010ece:	2303      	movs	r3, #3
 8010ed0:	e000      	b.n	8010ed4 <MB_diagnostics+0x13c>
			}
		}
	}else{
		return MB_EC_ILF_1;						// if diagnostics sub-function code is not valid, it will returns exception code 1
 8010ed2:	2301      	movs	r3, #1
	}
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd90      	pop	{r4, r7, pc}
 8010edc:	24005f90 	.word	0x24005f90

08010ee0 <MB_getCEC>:
/**
  * @brief to Get Comm Event Counter (FC-11) and make the response PDU
  * @param none
  * @retval status code for exception and non exception
  */
uint8_t MB_getCEC(void){
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0


		/*------- Test start---------*/
		uint16_t statusWord = MB_GetBusyStatus() == MB_STATUS_BUSY? MB_MAX_REGISTER_VALUE : 0;
 8010ee6:	f000 fc75 	bl	80117d4 <MB_GetBusyStatus>
 8010eea:	4603      	mov	r3, r0
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	d102      	bne.n	8010ef6 <MB_getCEC+0x16>
 8010ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ef4:	e000      	b.n	8010ef8 <MB_getCEC+0x18>
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	80fb      	strh	r3, [r7, #6]
		uint16_t eventCount = mbHandle.diag.comm_event_count;
 8010efa:	4b16      	ldr	r3, [pc, #88]	; (8010f54 <MB_getCEC+0x74>)
 8010efc:	8b9b      	ldrh	r3, [r3, #28]
 8010efe:	80bb      	strh	r3, [r7, #4]
		if((statusWord == 0 || statusWord == MB_MAX_REGISTER_VALUE)
 8010f00:	88fb      	ldrh	r3, [r7, #6]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d004      	beq.n	8010f10 <MB_getCEC+0x30>
			&& (eventCount >= 0 && eventCount <= MB_MAX_REGISTER_VALUE)){
 8010f06:	88fb      	ldrh	r3, [r7, #6]
 8010f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d11b      	bne.n	8010f48 <MB_getCEC+0x68>
			MB_appendToRespPDU_SAFC();
 8010f10:	f7ff f962 	bl	80101d8 <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU((uint8_t)(statusWord>>8));
 8010f14:	88fb      	ldrh	r3, [r7, #6]
 8010f16:	0a1b      	lsrs	r3, r3, #8
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff f93f 	bl	80101a0 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(statusWord & MB_AND_MASK_16T8));
 8010f22:	88fb      	ldrh	r3, [r7, #6]
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff f93a 	bl	80101a0 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(eventCount>>8));
 8010f2c:	88bb      	ldrh	r3, [r7, #4]
 8010f2e:	0a1b      	lsrs	r3, r3, #8
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7ff f933 	bl	80101a0 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(eventCount & MB_AND_MASK_16T8));
 8010f3a:	88bb      	ldrh	r3, [r7, #4]
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7ff f92e 	bl	80101a0 <MB_appendToRespPDU>
//			MB_appendToRespPDU_CRC();
			return MB_RS_255;
 8010f44:	23ff      	movs	r3, #255	; 0xff
 8010f46:	e000      	b.n	8010f4a <MB_getCEC+0x6a>
		}else{
			return MB_EC_SDV_4;
 8010f48:	2304      	movs	r3, #4
		}

}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3708      	adds	r7, #8
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	24005f80 	.word	0x24005f80

08010f58 <MB_writeMC>:
/**
  * @brief To write the multiple coils(FC-15) and make the response PDU
  * @param none
  * @retval none
  */
uint8_t MB_writeMC(void){
 8010f58:	b590      	push	{r4, r7, lr}
 8010f5a:	b087      	sub	sp, #28
 8010f5c:	af00      	add	r7, sp, #0

	uint8_t excepCode = MB_checkMCQtyAddrByteCount();		//TODO: an error is found there, have to solve it
 8010f5e:	f7ff f9dd 	bl	801031c <MB_checkMCQtyAddrByteCount>
 8010f62:	4603      	mov	r3, r0
 8010f64:	757b      	strb	r3, [r7, #21]
	if(excepCode == 0){										// if there is no exception
 8010f66:	7d7b      	ldrb	r3, [r7, #21]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	f040 8099 	bne.w	80110a0 <MB_writeMC+0x148>

		/*------- Test start---------*/


		uint16_t startAddress = MB_getStartAddress(MB_FC_INDEX+1)+MB_CO_ADDR_OFFSET;
 8010f6e:	2002      	movs	r0, #2
 8010f70:	f7ff fbf2 	bl	8010758 <MB_getStartAddress>
 8010f74:	4603      	mov	r3, r0
 8010f76:	3301      	adds	r3, #1
 8010f78:	827b      	strh	r3, [r7, #18]
		uint16_t endAddress = startAddress + MB_getQuantity(MB_FC_INDEX+3);
 8010f7a:	2004      	movs	r0, #4
 8010f7c:	f7ff fc0a 	bl	8010794 <MB_getQuantity>
 8010f80:	4603      	mov	r3, r0
 8010f82:	461a      	mov	r2, r3
 8010f84:	8a7b      	ldrh	r3, [r7, #18]
 8010f86:	4413      	add	r3, r2
 8010f88:	823b      	strh	r3, [r7, #16]
		uint8_t byteCount = (MB_getQuantity(MB_FC_INDEX+3)/8)+((MB_getQuantity(MB_FC_INDEX+3)%8)>0);
 8010f8a:	2004      	movs	r0, #4
 8010f8c:	f7ff fc02 	bl	8010794 <MB_getQuantity>
 8010f90:	4603      	mov	r3, r0
 8010f92:	08db      	lsrs	r3, r3, #3
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	b2dc      	uxtb	r4, r3
 8010f98:	2004      	movs	r0, #4
 8010f9a:	f7ff fbfb 	bl	8010794 <MB_getQuantity>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	f003 0307 	and.w	r3, r3, #7
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	bf14      	ite	ne
 8010faa:	2301      	movne	r3, #1
 8010fac:	2300      	moveq	r3, #0
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	4423      	add	r3, r4
 8010fb2:	73fb      	strb	r3, [r7, #15]
		uint16_t startByteIndex = (MB_FC_INDEX+6);
 8010fb4:	2307      	movs	r3, #7
 8010fb6:	81bb      	strh	r3, [r7, #12]
		//uint16_t lastByteIndex = (startByteIndex + byteCount-1);

		for(uint8_t byteIndex = 0; byteIndex < byteCount; byteIndex++){
 8010fb8:	2300      	movs	r3, #0
 8010fba:	75fb      	strb	r3, [r7, #23]
 8010fbc:	e03a      	b.n	8011034 <MB_writeMC+0xdc>
			uint8_t data = MB_getMCValueInByte((startByteIndex+byteIndex));
 8010fbe:	89bb      	ldrh	r3, [r7, #12]
 8010fc0:	b2da      	uxtb	r2, r3
 8010fc2:	7dfb      	ldrb	r3, [r7, #23]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7ff fbf9 	bl	80107c0 <MB_getMCValueInByte>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	727b      	strb	r3, [r7, #9]
			for(uint8_t bitIndex = 0; bitIndex < 8U; bitIndex++){
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	75bb      	strb	r3, [r7, #22]
 8010fd6:	e027      	b.n	8011028 <MB_writeMC+0xd0>
				//uint8_t bitValue = ((data>>bitIndex)&0x01);
				uint16_t coilAddress = startAddress+(byteIndex*8U)+bitIndex;
 8010fd8:	7dfb      	ldrb	r3, [r7, #23]
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	00db      	lsls	r3, r3, #3
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	8a7b      	ldrh	r3, [r7, #18]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	7dbb      	ldrb	r3, [r7, #22]
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	4413      	add	r3, r2
 8010fec:	80fb      	strh	r3, [r7, #6]
				if(coilAddress>=startAddress && coilAddress < endAddress){
 8010fee:	88fa      	ldrh	r2, [r7, #6]
 8010ff0:	8a7b      	ldrh	r3, [r7, #18]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d31b      	bcc.n	801102e <MB_writeMC+0xd6>
 8010ff6:	88fa      	ldrh	r2, [r7, #6]
 8010ff8:	8a3b      	ldrh	r3, [r7, #16]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d217      	bcs.n	801102e <MB_writeMC+0xd6>
					if(MB_setCoil(coilAddress, ((data>>bitIndex)&0x01)) == MB_ERROR){
 8010ffe:	7a7a      	ldrb	r2, [r7, #9]
 8011000:	7dbb      	ldrb	r3, [r7, #22]
 8011002:	fa42 f303 	asr.w	r3, r2, r3
 8011006:	b29b      	uxth	r3, r3
 8011008:	f003 0301 	and.w	r3, r3, #1
 801100c:	b29a      	uxth	r2, r3
 801100e:	88fb      	ldrh	r3, [r7, #6]
 8011010:	4611      	mov	r1, r2
 8011012:	4618      	mov	r0, r3
 8011014:	f000 fa6e 	bl	80114f4 <MB_setCoil>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d101      	bne.n	8011022 <MB_writeMC+0xca>
						return MB_EC_SDV_4;
 801101e:	2304      	movs	r3, #4
 8011020:	e03f      	b.n	80110a2 <MB_writeMC+0x14a>
			for(uint8_t bitIndex = 0; bitIndex < 8U; bitIndex++){
 8011022:	7dbb      	ldrb	r3, [r7, #22]
 8011024:	3301      	adds	r3, #1
 8011026:	75bb      	strb	r3, [r7, #22]
 8011028:	7dbb      	ldrb	r3, [r7, #22]
 801102a:	2b07      	cmp	r3, #7
 801102c:	d9d4      	bls.n	8010fd8 <MB_writeMC+0x80>
		for(uint8_t byteIndex = 0; byteIndex < byteCount; byteIndex++){
 801102e:	7dfb      	ldrb	r3, [r7, #23]
 8011030:	3301      	adds	r3, #1
 8011032:	75fb      	strb	r3, [r7, #23]
 8011034:	7dfa      	ldrb	r2, [r7, #23]
 8011036:	7bfb      	ldrb	r3, [r7, #15]
 8011038:	429a      	cmp	r2, r3
 801103a:	d3c0      	bcc.n	8010fbe <MB_writeMC+0x66>
				}
			}
		}


			uint16_t andMask = 0x00FF;
 801103c:	23ff      	movs	r3, #255	; 0xff
 801103e:	817b      	strh	r3, [r7, #10]
			MB_appendToRespPDU_SAFC();
 8011040:	f7ff f8ca 	bl	80101d8 <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU((uint8_t)(MB_getStartAddress(MB_FC_INDEX+1)>>8));
 8011044:	2002      	movs	r0, #2
 8011046:	f7ff fb87 	bl	8010758 <MB_getStartAddress>
 801104a:	4603      	mov	r3, r0
 801104c:	0a1b      	lsrs	r3, r3, #8
 801104e:	b29b      	uxth	r3, r3
 8011050:	b2db      	uxtb	r3, r3
 8011052:	4618      	mov	r0, r3
 8011054:	f7ff f8a4 	bl	80101a0 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(MB_getStartAddress(MB_FC_INDEX+1) & andMask));
 8011058:	2002      	movs	r0, #2
 801105a:	f7ff fb7d 	bl	8010758 <MB_getStartAddress>
 801105e:	4603      	mov	r3, r0
 8011060:	b2da      	uxtb	r2, r3
 8011062:	897b      	ldrh	r3, [r7, #10]
 8011064:	b2db      	uxtb	r3, r3
 8011066:	4013      	ands	r3, r2
 8011068:	b2db      	uxtb	r3, r3
 801106a:	4618      	mov	r0, r3
 801106c:	f7ff f898 	bl	80101a0 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(MB_getQuantity(MB_FC_INDEX+3)>>8));
 8011070:	2004      	movs	r0, #4
 8011072:	f7ff fb8f 	bl	8010794 <MB_getQuantity>
 8011076:	4603      	mov	r3, r0
 8011078:	0a1b      	lsrs	r3, r3, #8
 801107a:	b29b      	uxth	r3, r3
 801107c:	b2db      	uxtb	r3, r3
 801107e:	4618      	mov	r0, r3
 8011080:	f7ff f88e 	bl	80101a0 <MB_appendToRespPDU>
			MB_appendToRespPDU((uint8_t)(MB_getQuantity(MB_FC_INDEX+3) & andMask));
 8011084:	2004      	movs	r0, #4
 8011086:	f7ff fb85 	bl	8010794 <MB_getQuantity>
 801108a:	4603      	mov	r3, r0
 801108c:	b2da      	uxtb	r2, r3
 801108e:	897b      	ldrh	r3, [r7, #10]
 8011090:	b2db      	uxtb	r3, r3
 8011092:	4013      	ands	r3, r2
 8011094:	b2db      	uxtb	r3, r3
 8011096:	4618      	mov	r0, r3
 8011098:	f7ff f882 	bl	80101a0 <MB_appendToRespPDU>
//			MB_appendToRespPDU_CRC();
		return MB_RS_255;
 801109c:	23ff      	movs	r3, #255	; 0xff
 801109e:	e000      	b.n	80110a2 <MB_writeMC+0x14a>
	}else{													// if exception occurred
		return excepCode;
 80110a0:	7d7b      	ldrb	r3, [r7, #21]
	}
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	371c      	adds	r7, #28
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd90      	pop	{r4, r7, pc}
	...

080110ac <MB_writeMHR>:
/**
  * @brief To write the multiple register(FC-16) and make the response PDU
  * @param none
  * @retval none
  */
uint8_t MB_writeMHR(void){
 80110ac:	b590      	push	{r4, r7, lr}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkMRQtyAddrByteCount(MB_HRA_MAX);
 80110b2:	f649 507b 	movw	r0, #40315	; 0x9d7b
 80110b6:	f7ff f977 	bl	80103a8 <MB_checkMRQtyAddrByteCount>
 80110ba:	4603      	mov	r3, r0
 80110bc:	72fb      	strb	r3, [r7, #11]
	if(excepCode == 0){										// if there is no exception
 80110be:	7afb      	ldrb	r3, [r7, #11]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d16f      	bne.n	80111a4 <MB_writeMHR+0xf8>

		uint16_t startAddress = MB_getStartAddress(MB_FC_INDEX+1)+MB_HR_ADDR_OFFSET;
 80110c4:	2002      	movs	r0, #2
 80110c6:	f7ff fb47 	bl	8010758 <MB_getStartAddress>
 80110ca:	4603      	mov	r3, r0
 80110cc:	461a      	mov	r2, r3
 80110ce:	4b38      	ldr	r3, [pc, #224]	; (80111b0 <MB_writeMHR+0x104>)
 80110d0:	4413      	add	r3, r2
 80110d2:	813b      	strh	r3, [r7, #8]
		uint16_t endAddress = startAddress + MB_getQuantity(MB_FC_INDEX+3)-1;
 80110d4:	2004      	movs	r0, #4
 80110d6:	f7ff fb5d 	bl	8010794 <MB_getQuantity>
 80110da:	4603      	mov	r3, r0
 80110dc:	461a      	mov	r2, r3
 80110de:	893b      	ldrh	r3, [r7, #8]
 80110e0:	4413      	add	r3, r2
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	3b01      	subs	r3, #1
 80110e6:	80fb      	strh	r3, [r7, #6]
//		uint8_t byteCount = MB_getQuantity(MB_FC_INDEX+3);
		//uint16_t startByteIndex = (MB_FC_INDEX+6);
		//uint16_t lastByteIndex = (startByteIndex + byteCount-1);
		uint8_t byteIndex = (MB_FC_INDEX+6);
 80110e8:	2307      	movs	r3, #7
 80110ea:	73fb      	strb	r3, [r7, #15]
		for(uint16_t regAddress = startAddress; regAddress <= endAddress; regAddress++){
 80110ec:	893b      	ldrh	r3, [r7, #8]
 80110ee:	81bb      	strh	r3, [r7, #12]
 80110f0:	e016      	b.n	8011120 <MB_writeMHR+0x74>
			uint16_t data = MB_getMRValueIn2Byte((byteIndex));
 80110f2:	7bfb      	ldrb	r3, [r7, #15]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7ff fb75 	bl	80107e4 <MB_getMRValueIn2Byte>
 80110fa:	4603      	mov	r3, r0
 80110fc:	807b      	strh	r3, [r7, #2]
			byteIndex += 2;
 80110fe:	7bfb      	ldrb	r3, [r7, #15]
 8011100:	3302      	adds	r3, #2
 8011102:	73fb      	strb	r3, [r7, #15]
			if(MB_setHRValue(regAddress, data) == MB_ERROR){
 8011104:	887a      	ldrh	r2, [r7, #2]
 8011106:	89bb      	ldrh	r3, [r7, #12]
 8011108:	4611      	mov	r1, r2
 801110a:	4618      	mov	r0, r3
 801110c:	f000 fb06 	bl	801171c <MB_setHRValue>
 8011110:	4603      	mov	r3, r0
 8011112:	2b00      	cmp	r3, #0
 8011114:	d101      	bne.n	801111a <MB_writeMHR+0x6e>
				return MB_EC_SDV_4;
 8011116:	2304      	movs	r3, #4
 8011118:	e045      	b.n	80111a6 <MB_writeMHR+0xfa>
		for(uint16_t regAddress = startAddress; regAddress <= endAddress; regAddress++){
 801111a:	89bb      	ldrh	r3, [r7, #12]
 801111c:	3301      	adds	r3, #1
 801111e:	81bb      	strh	r3, [r7, #12]
 8011120:	89ba      	ldrh	r2, [r7, #12]
 8011122:	88fb      	ldrh	r3, [r7, #6]
 8011124:	429a      	cmp	r2, r3
 8011126:	d9e4      	bls.n	80110f2 <MB_writeMHR+0x46>
			}
		}

		uint16_t andMask = 0x00FF;
 8011128:	23ff      	movs	r3, #255	; 0xff
 801112a:	80bb      	strh	r3, [r7, #4]
		MB_appendToRespPDU_SAFC();
 801112c:	f7ff f854 	bl	80101d8 <MB_appendToRespPDU_SAFC>
		MB_appendToRespPDU((uint8_t)(MB_getStartAddress(MB_FC_INDEX+1)>>8));
 8011130:	2002      	movs	r0, #2
 8011132:	f7ff fb11 	bl	8010758 <MB_getStartAddress>
 8011136:	4603      	mov	r3, r0
 8011138:	0a1b      	lsrs	r3, r3, #8
 801113a:	b29b      	uxth	r3, r3
 801113c:	b2db      	uxtb	r3, r3
 801113e:	4618      	mov	r0, r3
 8011140:	f7ff f82e 	bl	80101a0 <MB_appendToRespPDU>
		MB_appendToRespPDU((uint8_t)(MB_getStartAddress(MB_FC_INDEX+1) & andMask));
 8011144:	2002      	movs	r0, #2
 8011146:	f7ff fb07 	bl	8010758 <MB_getStartAddress>
 801114a:	4603      	mov	r3, r0
 801114c:	b2da      	uxtb	r2, r3
 801114e:	88bb      	ldrh	r3, [r7, #4]
 8011150:	b2db      	uxtb	r3, r3
 8011152:	4013      	ands	r3, r2
 8011154:	b2db      	uxtb	r3, r3
 8011156:	4618      	mov	r0, r3
 8011158:	f7ff f822 	bl	80101a0 <MB_appendToRespPDU>
		MB_appendToRespPDU((uint8_t)(MB_getQuantity(MB_FC_INDEX+3)>>8));
 801115c:	2004      	movs	r0, #4
 801115e:	f7ff fb19 	bl	8010794 <MB_getQuantity>
 8011162:	4603      	mov	r3, r0
 8011164:	0a1b      	lsrs	r3, r3, #8
 8011166:	b29b      	uxth	r3, r3
 8011168:	b2db      	uxtb	r3, r3
 801116a:	4618      	mov	r0, r3
 801116c:	f7ff f818 	bl	80101a0 <MB_appendToRespPDU>
		MB_appendToRespPDU((uint8_t)(MB_getQuantity(MB_FC_INDEX+3) & andMask));
 8011170:	2004      	movs	r0, #4
 8011172:	f7ff fb0f 	bl	8010794 <MB_getQuantity>
 8011176:	4603      	mov	r3, r0
 8011178:	b2da      	uxtb	r2, r3
 801117a:	88bb      	ldrh	r3, [r7, #4]
 801117c:	b2db      	uxtb	r3, r3
 801117e:	4013      	ands	r3, r2
 8011180:	b2db      	uxtb	r3, r3
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff f80c 	bl	80101a0 <MB_appendToRespPDU>
//		MB_appendToRespPDU_CRC();

		if((MB_getSCRAddress()+MB_HR_ADDR_OFFSET) == MB_HRA_MB_SLAVE_ADDRESS){
 8011188:	f7ff faf4 	bl	8010774 <MB_getSCRAddress>
 801118c:	4603      	mov	r3, r0
 801118e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011192:	d105      	bne.n	80111a0 <MB_writeMHR+0xf4>
			mbHandle.txBuffer[MB_SA_INDEX] = MB_getSlaveAddress();
 8011194:	4b07      	ldr	r3, [pc, #28]	; (80111b4 <MB_writeMHR+0x108>)
 8011196:	689c      	ldr	r4, [r3, #8]
 8011198:	f7ff fac6 	bl	8010728 <MB_getSlaveAddress>
 801119c:	4603      	mov	r3, r0
 801119e:	7023      	strb	r3, [r4, #0]
		}

		return MB_RS_255;
 80111a0:	23ff      	movs	r3, #255	; 0xff
 80111a2:	e000      	b.n	80111a6 <MB_writeMHR+0xfa>
	}else{													// if exception occurred
		return excepCode;
 80111a4:	7afb      	ldrb	r3, [r7, #11]
	}
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3714      	adds	r7, #20
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd90      	pop	{r4, r7, pc}
 80111ae:	bf00      	nop
 80111b0:	ffff9c41 	.word	0xffff9c41
 80111b4:	24005f80 	.word	0x24005f80

080111b8 <MB_writeHRM>:
/**
  * @brief To write mask to the holding register(FC-22) and make the response PDU
  * @param none
  * @retval 2,3,4 & 255, where 2-4 for the Modbus exception code, and 255 for no exception
  */
uint8_t MB_writeHRM(void){
 80111b8:	b5b0      	push	{r4, r5, r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkMWRAddrMask();
 80111be:	f7ff f98b 	bl	80104d8 <MB_checkMWRAddrMask>
 80111c2:	4603      	mov	r3, r0
 80111c4:	71fb      	strb	r3, [r7, #7]
	if(excepCode == 0){										// if there is no exception
 80111c6:	79fb      	ldrb	r3, [r7, #7]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d12e      	bne.n	801122a <MB_writeHRM+0x72>

		if((MB_getMWRRefAddress()+MB_HR_ADDR_OFFSET) != MB_HRA_MB_SLAVE_ADDRESS){	//if the reference address is not slave address, mask write register option is not applicable for slave address
 80111cc:	f7ff fada 	bl	8010784 <MB_getMWRRefAddress>
 80111d0:	4603      	mov	r3, r0
 80111d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80111d6:	d026      	beq.n	8011226 <MB_writeHRM+0x6e>

			if(MB_setMaskWHRValue((MB_getMWRRefAddress()+MB_HR_ADDR_OFFSET), MB_getMWRAndMask(), MB_getMWROrMask())){
 80111d8:	f7ff fad4 	bl	8010784 <MB_getMWRRefAddress>
 80111dc:	4603      	mov	r3, r0
 80111de:	461a      	mov	r2, r3
 80111e0:	4b14      	ldr	r3, [pc, #80]	; (8011234 <MB_writeHRM+0x7c>)
 80111e2:	4413      	add	r3, r2
 80111e4:	b29c      	uxth	r4, r3
 80111e6:	f7ff fb0b 	bl	8010800 <MB_getMWRAndMask>
 80111ea:	4603      	mov	r3, r0
 80111ec:	461d      	mov	r5, r3
 80111ee:	f7ff fb0f 	bl	8010810 <MB_getMWROrMask>
 80111f2:	4603      	mov	r3, r0
 80111f4:	461a      	mov	r2, r3
 80111f6:	4629      	mov	r1, r5
 80111f8:	4620      	mov	r0, r4
 80111fa:	f000 faa5 	bl	8011748 <MB_setMaskWHRValue>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d00e      	beq.n	8011222 <MB_writeHRM+0x6a>

				memcpy(mbHandle.txBuffer, mbHandle.rxBuffer, mbHandle.rxBufferSize);
 8011204:	4b0c      	ldr	r3, [pc, #48]	; (8011238 <MB_writeHRM+0x80>)
 8011206:	689b      	ldr	r3, [r3, #8]
 8011208:	4a0b      	ldr	r2, [pc, #44]	; (8011238 <MB_writeHRM+0x80>)
 801120a:	6851      	ldr	r1, [r2, #4]
 801120c:	4a0a      	ldr	r2, [pc, #40]	; (8011238 <MB_writeHRM+0x80>)
 801120e:	7b12      	ldrb	r2, [r2, #12]
 8011210:	4618      	mov	r0, r3
 8011212:	f015 fa81 	bl	8026718 <memcpy>
				mbHandle.txBufferSize = mbHandle.rxBufferSize;
 8011216:	4b08      	ldr	r3, [pc, #32]	; (8011238 <MB_writeHRM+0x80>)
 8011218:	7b1a      	ldrb	r2, [r3, #12]
 801121a:	4b07      	ldr	r3, [pc, #28]	; (8011238 <MB_writeHRM+0x80>)
 801121c:	735a      	strb	r2, [r3, #13]
				//HAL_UART_Transmit(&huart2, mbHandle.rxBuffer, mbHandle.rxBufferSize, MB_TRANS_TIMEOUT);
				return MB_RS_255;
 801121e:	23ff      	movs	r3, #255	; 0xff
 8011220:	e004      	b.n	801122c <MB_writeHRM+0x74>
			}else{
				return MB_EC_SDV_4;									// exception - 4 ,  service device failure
 8011222:	2304      	movs	r3, #4
 8011224:	e002      	b.n	801122c <MB_writeHRM+0x74>
			}
		}else{
			return MB_EC_ILDA_2;
 8011226:	2302      	movs	r3, #2
 8011228:	e000      	b.n	801122c <MB_writeHRM+0x74>
		}
	}else{													// if exception occurred
		return excepCode;
 801122a:	79fb      	ldrb	r3, [r7, #7]
	}
}
 801122c:	4618      	mov	r0, r3
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bdb0      	pop	{r4, r5, r7, pc}
 8011234:	ffff9c41 	.word	0xffff9c41
 8011238:	24005f80 	.word	0x24005f80

0801123c <MB_readWriteMHR>:
/**
  * @brief To read/write the multiple register(FC-23) and make the response PDU
  * @param none
  * @retval 2,3,4 & 255, where 2-4 for the Modbus exception code, and 255 for no exception
  */
uint8_t MB_readWriteMHR(void){
 801123c:	b5b0      	push	{r4, r5, r7, lr}
 801123e:	b088      	sub	sp, #32
 8011240:	af00      	add	r7, sp, #0
	uint8_t excepCode = MB_checkRWMRQtyAddrByteCount();
 8011242:	f7ff f8f7 	bl	8010434 <MB_checkRWMRQtyAddrByteCount>
 8011246:	4603      	mov	r3, r0
 8011248:	76bb      	strb	r3, [r7, #26]
	if(excepCode == 0){										// if there is no exception
 801124a:	7ebb      	ldrb	r3, [r7, #26]
 801124c:	2b00      	cmp	r3, #0
 801124e:	f040 80b3 	bne.w	80113b8 <MB_readWriteMHR+0x17c>
		/*------- Test start---------*/



		uint16_t startAddressRead = MB_getStartAddress(MB_FC_INDEX+1)+MB_HR_ADDR_OFFSET;
 8011252:	2002      	movs	r0, #2
 8011254:	f7ff fa80 	bl	8010758 <MB_getStartAddress>
 8011258:	4603      	mov	r3, r0
 801125a:	461a      	mov	r2, r3
 801125c:	4b59      	ldr	r3, [pc, #356]	; (80113c4 <MB_readWriteMHR+0x188>)
 801125e:	4413      	add	r3, r2
 8011260:	833b      	strh	r3, [r7, #24]
		uint8_t quantityRead = MB_getQuantity(MB_FC_INDEX+3);
 8011262:	2004      	movs	r0, #4
 8011264:	f7ff fa96 	bl	8010794 <MB_getQuantity>
 8011268:	4603      	mov	r3, r0
 801126a:	75fb      	strb	r3, [r7, #23]
		uint16_t endAddressRead = startAddressRead + quantityRead-1;
 801126c:	7dfb      	ldrb	r3, [r7, #23]
 801126e:	b29a      	uxth	r2, r3
 8011270:	8b3b      	ldrh	r3, [r7, #24]
 8011272:	4413      	add	r3, r2
 8011274:	b29b      	uxth	r3, r3
 8011276:	3b01      	subs	r3, #1
 8011278:	82bb      	strh	r3, [r7, #20]

		uint16_t startAddressWrite = MB_getStartAddress(MB_FC_INDEX+5)+MB_HR_ADDR_OFFSET;
 801127a:	2006      	movs	r0, #6
 801127c:	f7ff fa6c 	bl	8010758 <MB_getStartAddress>
 8011280:	4603      	mov	r3, r0
 8011282:	461a      	mov	r2, r3
 8011284:	4b4f      	ldr	r3, [pc, #316]	; (80113c4 <MB_readWriteMHR+0x188>)
 8011286:	4413      	add	r3, r2
 8011288:	827b      	strh	r3, [r7, #18]
		uint16_t endAddressWrite = startAddressWrite + MB_getQuantity(MB_FC_INDEX+7)-1;
 801128a:	2008      	movs	r0, #8
 801128c:	f7ff fa82 	bl	8010794 <MB_getQuantity>
 8011290:	4603      	mov	r3, r0
 8011292:	461a      	mov	r2, r3
 8011294:	8a7b      	ldrh	r3, [r7, #18]
 8011296:	4413      	add	r3, r2
 8011298:	b29b      	uxth	r3, r3
 801129a:	3b01      	subs	r3, #1
 801129c:	823b      	strh	r3, [r7, #16]
		//uint8_t  byteCountWrite = mbHandle.rxBuffer[MB_FC_INDEX+9]/2;
		uint8_t byteIndex = (MB_FC_INDEX+10);
 801129e:	230b      	movs	r3, #11
 80112a0:	76fb      	strb	r3, [r7, #27]

		// write register
		for(uint16_t regAddress = startAddressWrite; regAddress <= endAddressWrite; regAddress++){
 80112a2:	8a7b      	ldrh	r3, [r7, #18]
 80112a4:	83bb      	strh	r3, [r7, #28]
 80112a6:	e016      	b.n	80112d6 <MB_readWriteMHR+0x9a>
			uint16_t data = MB_getMRValueIn2Byte((byteIndex));
 80112a8:	7efb      	ldrb	r3, [r7, #27]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff fa9a 	bl	80107e4 <MB_getMRValueIn2Byte>
 80112b0:	4603      	mov	r3, r0
 80112b2:	807b      	strh	r3, [r7, #2]
			byteIndex += 2;
 80112b4:	7efb      	ldrb	r3, [r7, #27]
 80112b6:	3302      	adds	r3, #2
 80112b8:	76fb      	strb	r3, [r7, #27]
			if(MB_setHRValue(regAddress, data) == MB_ERROR){
 80112ba:	887a      	ldrh	r2, [r7, #2]
 80112bc:	8bbb      	ldrh	r3, [r7, #28]
 80112be:	4611      	mov	r1, r2
 80112c0:	4618      	mov	r0, r3
 80112c2:	f000 fa2b 	bl	801171c <MB_setHRValue>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d101      	bne.n	80112d0 <MB_readWriteMHR+0x94>
				return MB_EC_SDV_4;
 80112cc:	2304      	movs	r3, #4
 80112ce:	e074      	b.n	80113ba <MB_readWriteMHR+0x17e>
		for(uint16_t regAddress = startAddressWrite; regAddress <= endAddressWrite; regAddress++){
 80112d0:	8bbb      	ldrh	r3, [r7, #28]
 80112d2:	3301      	adds	r3, #1
 80112d4:	83bb      	strh	r3, [r7, #28]
 80112d6:	8bba      	ldrh	r2, [r7, #28]
 80112d8:	8a3b      	ldrh	r3, [r7, #16]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d9e4      	bls.n	80112a8 <MB_readWriteMHR+0x6c>
			}
		}

		//  read register
		uint16_t data[quantityRead];
 80112de:	7dfc      	ldrb	r4, [r7, #23]
 80112e0:	466b      	mov	r3, sp
 80112e2:	461d      	mov	r5, r3
 80112e4:	4623      	mov	r3, r4
 80112e6:	3b01      	subs	r3, #1
 80112e8:	60fb      	str	r3, [r7, #12]
 80112ea:	b2e0      	uxtb	r0, r4
 80112ec:	f04f 0100 	mov.w	r1, #0
 80112f0:	f04f 0200 	mov.w	r2, #0
 80112f4:	f04f 0300 	mov.w	r3, #0
 80112f8:	010b      	lsls	r3, r1, #4
 80112fa:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80112fe:	0102      	lsls	r2, r0, #4
 8011300:	b2e0      	uxtb	r0, r4
 8011302:	f04f 0100 	mov.w	r1, #0
 8011306:	f04f 0200 	mov.w	r2, #0
 801130a:	f04f 0300 	mov.w	r3, #0
 801130e:	010b      	lsls	r3, r1, #4
 8011310:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8011314:	0102      	lsls	r2, r0, #4
 8011316:	4623      	mov	r3, r4
 8011318:	005b      	lsls	r3, r3, #1
 801131a:	3307      	adds	r3, #7
 801131c:	08db      	lsrs	r3, r3, #3
 801131e:	00db      	lsls	r3, r3, #3
 8011320:	ebad 0d03 	sub.w	sp, sp, r3
 8011324:	466b      	mov	r3, sp
 8011326:	3301      	adds	r3, #1
 8011328:	085b      	lsrs	r3, r3, #1
 801132a:	005b      	lsls	r3, r3, #1
 801132c:	60bb      	str	r3, [r7, #8]
		if(MB_getHRsValue(data, startAddressRead, endAddressRead)){
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	8aba      	ldrh	r2, [r7, #20]
 8011332:	8b39      	ldrh	r1, [r7, #24]
 8011334:	4618      	mov	r0, r3
 8011336:	f000 f9c1 	bl	80116bc <MB_getHRsValue>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d038      	beq.n	80113b2 <MB_readWriteMHR+0x176>

			uint16_t andMask = 0x00FF;
 8011340:	23ff      	movs	r3, #255	; 0xff
 8011342:	80fb      	strh	r3, [r7, #6]
			uint8_t byteCount = quantityRead*2;
 8011344:	7dfb      	ldrb	r3, [r7, #23]
 8011346:	005b      	lsls	r3, r3, #1
 8011348:	717b      	strb	r3, [r7, #5]
			MB_appendToRespPDU_SAFC();
 801134a:	f7fe ff45 	bl	80101d8 <MB_appendToRespPDU_SAFC>
			MB_appendToRespPDU(byteCount);
 801134e:	797b      	ldrb	r3, [r7, #5]
 8011350:	4618      	mov	r0, r3
 8011352:	f7fe ff25 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < quantityRead; i++){
 8011356:	2300      	movs	r3, #0
 8011358:	77fb      	strb	r3, [r7, #31]
 801135a:	e018      	b.n	801138e <MB_readWriteMHR+0x152>
				MB_appendToRespPDU((uint8_t)(data[i]>>8));
 801135c:	7ffa      	ldrb	r2, [r7, #31]
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011364:	0a1b      	lsrs	r3, r3, #8
 8011366:	b29b      	uxth	r3, r3
 8011368:	b2db      	uxtb	r3, r3
 801136a:	4618      	mov	r0, r3
 801136c:	f7fe ff18 	bl	80101a0 <MB_appendToRespPDU>
				MB_appendToRespPDU((uint8_t)(data[i] & andMask));
 8011370:	7ffa      	ldrb	r2, [r7, #31]
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011378:	b2da      	uxtb	r2, r3
 801137a:	88fb      	ldrh	r3, [r7, #6]
 801137c:	b2db      	uxtb	r3, r3
 801137e:	4013      	ands	r3, r2
 8011380:	b2db      	uxtb	r3, r3
 8011382:	4618      	mov	r0, r3
 8011384:	f7fe ff0c 	bl	80101a0 <MB_appendToRespPDU>
			for(uint8_t i = 0; i < quantityRead; i++){
 8011388:	7ffb      	ldrb	r3, [r7, #31]
 801138a:	3301      	adds	r3, #1
 801138c:	77fb      	strb	r3, [r7, #31]
 801138e:	7ffa      	ldrb	r2, [r7, #31]
 8011390:	7dfb      	ldrb	r3, [r7, #23]
 8011392:	429a      	cmp	r2, r3
 8011394:	d3e2      	bcc.n	801135c <MB_readWriteMHR+0x120>
			}
//			MB_appendToRespPDU_CRC();

			if((MB_getSCRAddress()+MB_HR_ADDR_OFFSET) == MB_HRA_MB_SLAVE_ADDRESS){
 8011396:	f7ff f9ed 	bl	8010774 <MB_getSCRAddress>
 801139a:	4603      	mov	r3, r0
 801139c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80113a0:	d105      	bne.n	80113ae <MB_readWriteMHR+0x172>
				mbHandle.txBuffer[MB_SA_INDEX] = MB_getSlaveAddress();
 80113a2:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <MB_readWriteMHR+0x18c>)
 80113a4:	689c      	ldr	r4, [r3, #8]
 80113a6:	f7ff f9bf 	bl	8010728 <MB_getSlaveAddress>
 80113aa:	4603      	mov	r3, r0
 80113ac:	7023      	strb	r3, [r4, #0]
			}
			return MB_RS_255;
 80113ae:	23ff      	movs	r3, #255	; 0xff
 80113b0:	e000      	b.n	80113b4 <MB_readWriteMHR+0x178>
		}else{
			return MB_EC_SDV_4;									// exception - 4 ,  service device failure
 80113b2:	2304      	movs	r3, #4
 80113b4:	46ad      	mov	sp, r5
 80113b6:	e000      	b.n	80113ba <MB_readWriteMHR+0x17e>
		}

		/*------- Test end---------*/

	}else{													// if exception occurred
		return excepCode;
 80113b8:	7ebb      	ldrb	r3, [r7, #26]
	}
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3720      	adds	r7, #32
 80113be:	46bd      	mov	sp, r7
 80113c0:	bdb0      	pop	{r4, r5, r7, pc}
 80113c2:	bf00      	nop
 80113c4:	ffff9c41 	.word	0xffff9c41
 80113c8:	24005f80 	.word	0x24005f80

080113cc <MB_CallbackRCO>:
/**
  * @brief callback for Restart Communications Option
  * @param none
  * @retval none
  */
void MB_CallbackRCO(void){
 80113cc:	b580      	push	{r7, lr}
 80113ce:	af00      	add	r7, sp, #0
	NVIC_SystemReset();		// to reset the mcu
 80113d0:	f7fe fd28 	bl	800fe24 <__NVIC_SystemReset>

080113d4 <MB_getDI>:





uint8_t MB_getDI(uint16_t address, uint8_t *value){
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	4603      	mov	r3, r0
 80113dc:	6039      	str	r1, [r7, #0]
 80113de:	80fb      	strh	r3, [r7, #6]
	return MB_readDICallback(address, value);
 80113e0:	4b05      	ldr	r3, [pc, #20]	; (80113f8 <MB_getDI+0x24>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	88fa      	ldrh	r2, [r7, #6]
 80113e6:	6839      	ldr	r1, [r7, #0]
 80113e8:	4610      	mov	r0, r2
 80113ea:	4798      	blx	r3
 80113ec:	4603      	mov	r3, r0
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	24005fa4 	.word	0x24005fa4

080113fc <MB_getDIInByte>:

uint8_t MB_getDIInByte(uint8_t *byteArray, uint8_t size, uint16_t startAddress, uint16_t endAddress){
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b086      	sub	sp, #24
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	4608      	mov	r0, r1
 8011406:	4611      	mov	r1, r2
 8011408:	461a      	mov	r2, r3
 801140a:	4603      	mov	r3, r0
 801140c:	72fb      	strb	r3, [r7, #11]
 801140e:	460b      	mov	r3, r1
 8011410:	813b      	strh	r3, [r7, #8]
 8011412:	4613      	mov	r3, r2
 8011414:	80fb      	strh	r3, [r7, #6]
	volatile uint8_t byteCount = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	757b      	strb	r3, [r7, #21]
	volatile uint8_t dataByte = 0;
 801141a:	2300      	movs	r3, #0
 801141c:	753b      	strb	r3, [r7, #20]
	volatile uint8_t bitCount = 0;
 801141e:	2300      	movs	r3, #0
 8011420:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i = startAddress; i < endAddress; i++){
 8011422:	893b      	ldrh	r3, [r7, #8]
 8011424:	82fb      	strh	r3, [r7, #22]
 8011426:	e041      	b.n	80114ac <MB_getDIInByte+0xb0>
		uint8_t data = 0;
 8011428:	2300      	movs	r3, #0
 801142a:	74bb      	strb	r3, [r7, #18]
		if(MB_getDI(i, &data)){
 801142c:	f107 0212 	add.w	r2, r7, #18
 8011430:	8afb      	ldrh	r3, [r7, #22]
 8011432:	4611      	mov	r1, r2
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff ffcd 	bl	80113d4 <MB_getDI>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d030      	beq.n	80114a2 <MB_getDIInByte+0xa6>
			if(data >=0 && data <=1){
 8011440:	7cbb      	ldrb	r3, [r7, #18]
 8011442:	2b01      	cmp	r3, #1
 8011444:	d82b      	bhi.n	801149e <MB_getDIInByte+0xa2>
				dataByte |= data<<(bitCount++);
 8011446:	7cbb      	ldrb	r3, [r7, #18]
 8011448:	461a      	mov	r2, r3
 801144a:	7cfb      	ldrb	r3, [r7, #19]
 801144c:	b2db      	uxtb	r3, r3
 801144e:	1c59      	adds	r1, r3, #1
 8011450:	b2c9      	uxtb	r1, r1
 8011452:	74f9      	strb	r1, [r7, #19]
 8011454:	fa02 f303 	lsl.w	r3, r2, r3
 8011458:	b25a      	sxtb	r2, r3
 801145a:	7d3b      	ldrb	r3, [r7, #20]
 801145c:	b2db      	uxtb	r3, r3
 801145e:	b25b      	sxtb	r3, r3
 8011460:	4313      	orrs	r3, r2
 8011462:	b25b      	sxtb	r3, r3
 8011464:	b2db      	uxtb	r3, r3
 8011466:	753b      	strb	r3, [r7, #20]
				if(bitCount>=8){
 8011468:	7cfb      	ldrb	r3, [r7, #19]
 801146a:	b2db      	uxtb	r3, r3
 801146c:	2b07      	cmp	r3, #7
 801146e:	d91a      	bls.n	80114a6 <MB_getDIInByte+0xaa>
					if(byteCount < size){
 8011470:	7d7b      	ldrb	r3, [r7, #21]
 8011472:	b2db      	uxtb	r3, r3
 8011474:	7afa      	ldrb	r2, [r7, #11]
 8011476:	429a      	cmp	r2, r3
 8011478:	d90f      	bls.n	801149a <MB_getDIInByte+0x9e>
						byteArray[byteCount++] = dataByte;
 801147a:	7d7b      	ldrb	r3, [r7, #21]
 801147c:	b2db      	uxtb	r3, r3
 801147e:	1c5a      	adds	r2, r3, #1
 8011480:	b2d2      	uxtb	r2, r2
 8011482:	757a      	strb	r2, [r7, #21]
 8011484:	461a      	mov	r2, r3
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	4413      	add	r3, r2
 801148a:	7d3a      	ldrb	r2, [r7, #20]
 801148c:	b2d2      	uxtb	r2, r2
 801148e:	701a      	strb	r2, [r3, #0]
						dataByte = 0;
 8011490:	2300      	movs	r3, #0
 8011492:	753b      	strb	r3, [r7, #20]
						bitCount=0;
 8011494:	2300      	movs	r3, #0
 8011496:	74fb      	strb	r3, [r7, #19]
 8011498:	e005      	b.n	80114a6 <MB_getDIInByte+0xaa>
					}else{
						return MB_ERROR;
 801149a:	2300      	movs	r3, #0
 801149c:	e026      	b.n	80114ec <MB_getDIInByte+0xf0>
					}
				}
			}else{
				return MB_ERROR;
 801149e:	2300      	movs	r3, #0
 80114a0:	e024      	b.n	80114ec <MB_getDIInByte+0xf0>
			}
		}else{
			return MB_ERROR;
 80114a2:	2300      	movs	r3, #0
 80114a4:	e022      	b.n	80114ec <MB_getDIInByte+0xf0>
	for(uint16_t i = startAddress; i < endAddress; i++){
 80114a6:	8afb      	ldrh	r3, [r7, #22]
 80114a8:	3301      	adds	r3, #1
 80114aa:	82fb      	strh	r3, [r7, #22]
 80114ac:	8afa      	ldrh	r2, [r7, #22]
 80114ae:	88fb      	ldrh	r3, [r7, #6]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d3b9      	bcc.n	8011428 <MB_getDIInByte+0x2c>
		}
	}
	if( bitCount > 0 && bitCount < 8){
 80114b4:	7cfb      	ldrb	r3, [r7, #19]
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d016      	beq.n	80114ea <MB_getDIInByte+0xee>
 80114bc:	7cfb      	ldrb	r3, [r7, #19]
 80114be:	b2db      	uxtb	r3, r3
 80114c0:	2b07      	cmp	r3, #7
 80114c2:	d812      	bhi.n	80114ea <MB_getDIInByte+0xee>
		if(byteCount < size){
 80114c4:	7d7b      	ldrb	r3, [r7, #21]
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	7afa      	ldrb	r2, [r7, #11]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d90b      	bls.n	80114e6 <MB_getDIInByte+0xea>
			byteArray[byteCount++] = dataByte;
 80114ce:	7d7b      	ldrb	r3, [r7, #21]
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	1c5a      	adds	r2, r3, #1
 80114d4:	b2d2      	uxtb	r2, r2
 80114d6:	757a      	strb	r2, [r7, #21]
 80114d8:	461a      	mov	r2, r3
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	4413      	add	r3, r2
 80114de:	7d3a      	ldrb	r2, [r7, #20]
 80114e0:	b2d2      	uxtb	r2, r2
 80114e2:	701a      	strb	r2, [r3, #0]
 80114e4:	e001      	b.n	80114ea <MB_getDIInByte+0xee>
		}else{
			return MB_ERROR;
 80114e6:	2300      	movs	r3, #0
 80114e8:	e000      	b.n	80114ec <MB_getDIInByte+0xf0>
		}
		//byteCount++;
	}

	return MB_OK;
 80114ea:	2301      	movs	r3, #1
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3718      	adds	r7, #24
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <MB_setCoil>:
/**
  * @brief sets coil output
  * @param address: address of the holding register
  * @retval holding register value
  */
uint8_t MB_setCoil(uint16_t address, uint16_t value){
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	4603      	mov	r3, r0
 80114fc:	460a      	mov	r2, r1
 80114fe:	80fb      	strh	r3, [r7, #6]
 8011500:	4613      	mov	r3, r2
 8011502:	80bb      	strh	r3, [r7, #4]

	return MB_writeCOCallback(address, (value > 0));
 8011504:	4b08      	ldr	r3, [pc, #32]	; (8011528 <MB_setCoil+0x34>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	88fa      	ldrh	r2, [r7, #6]
 801150a:	b2d0      	uxtb	r0, r2
 801150c:	88ba      	ldrh	r2, [r7, #4]
 801150e:	2a00      	cmp	r2, #0
 8011510:	bf14      	ite	ne
 8011512:	2201      	movne	r2, #1
 8011514:	2200      	moveq	r2, #0
 8011516:	b2d2      	uxtb	r2, r2
 8011518:	4611      	mov	r1, r2
 801151a:	4798      	blx	r3
 801151c:	4603      	mov	r3, r0
	//return (address-MB_C_ADDR_OFFSET >= 0 && address-MB_C_ADDR_OFFSET <= MB_MAX_CR_ADDR);
}
 801151e:	4618      	mov	r0, r3
 8011520:	3708      	adds	r7, #8
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	24005f70 	.word	0x24005f70

0801152c <MB_getCoil>:


uint8_t MB_getCoil( uint16_t address, uint8_t *value){
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	4603      	mov	r3, r0
 8011534:	6039      	str	r1, [r7, #0]
 8011536:	80fb      	strh	r3, [r7, #6]
	return MB_readCOCallback(address, value);
 8011538:	4b05      	ldr	r3, [pc, #20]	; (8011550 <MB_getCoil+0x24>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	88fa      	ldrh	r2, [r7, #6]
 801153e:	b2d2      	uxtb	r2, r2
 8011540:	6839      	ldr	r1, [r7, #0]
 8011542:	4610      	mov	r0, r2
 8011544:	4798      	blx	r3
 8011546:	4603      	mov	r3, r0
}
 8011548:	4618      	mov	r0, r3
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	24005f7c 	.word	0x24005f7c

08011554 <MB_getCoilsInByte>:
uint8_t MB_getCoilsInByte(uint8_t *byteArray, uint8_t size, uint16_t startAddress, uint16_t endAddress){
 8011554:	b580      	push	{r7, lr}
 8011556:	b086      	sub	sp, #24
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	4608      	mov	r0, r1
 801155e:	4611      	mov	r1, r2
 8011560:	461a      	mov	r2, r3
 8011562:	4603      	mov	r3, r0
 8011564:	72fb      	strb	r3, [r7, #11]
 8011566:	460b      	mov	r3, r1
 8011568:	813b      	strh	r3, [r7, #8]
 801156a:	4613      	mov	r3, r2
 801156c:	80fb      	strh	r3, [r7, #6]
	uint8_t byteCount = 0;
 801156e:	2300      	movs	r3, #0
 8011570:	75fb      	strb	r3, [r7, #23]
	uint8_t dataByte = 0;
 8011572:	2300      	movs	r3, #0
 8011574:	75bb      	strb	r3, [r7, #22]
	uint8_t bitCount = 0;
 8011576:	2300      	movs	r3, #0
 8011578:	757b      	strb	r3, [r7, #21]

	for(uint16_t i = startAddress; i < endAddress; i++){
 801157a:	893b      	ldrh	r3, [r7, #8]
 801157c:	827b      	strh	r3, [r7, #18]
 801157e:	e038      	b.n	80115f2 <MB_getCoilsInByte+0x9e>
		uint8_t data=0;
 8011580:	2300      	movs	r3, #0
 8011582:	747b      	strb	r3, [r7, #17]
		if(MB_getCoil(i, &data)){
 8011584:	f107 0211 	add.w	r2, r7, #17
 8011588:	8a7b      	ldrh	r3, [r7, #18]
 801158a:	4611      	mov	r1, r2
 801158c:	4618      	mov	r0, r3
 801158e:	f7ff ffcd 	bl	801152c <MB_getCoil>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d027      	beq.n	80115e8 <MB_getCoilsInByte+0x94>
			if(data >=0 && data <=1){
 8011598:	7c7b      	ldrb	r3, [r7, #17]
 801159a:	2b01      	cmp	r3, #1
 801159c:	d822      	bhi.n	80115e4 <MB_getCoilsInByte+0x90>
				dataByte |= data<<(bitCount++);
 801159e:	7c7b      	ldrb	r3, [r7, #17]
 80115a0:	461a      	mov	r2, r3
 80115a2:	7d7b      	ldrb	r3, [r7, #21]
 80115a4:	1c59      	adds	r1, r3, #1
 80115a6:	7579      	strb	r1, [r7, #21]
 80115a8:	fa02 f303 	lsl.w	r3, r2, r3
 80115ac:	b25a      	sxtb	r2, r3
 80115ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80115b2:	4313      	orrs	r3, r2
 80115b4:	b25b      	sxtb	r3, r3
 80115b6:	75bb      	strb	r3, [r7, #22]
				if(bitCount>=8){
 80115b8:	7d7b      	ldrb	r3, [r7, #21]
 80115ba:	2b07      	cmp	r3, #7
 80115bc:	d916      	bls.n	80115ec <MB_getCoilsInByte+0x98>
					if(byteCount < size){
 80115be:	7dfa      	ldrb	r2, [r7, #23]
 80115c0:	7afb      	ldrb	r3, [r7, #11]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d20c      	bcs.n	80115e0 <MB_getCoilsInByte+0x8c>
						byteArray[byteCount++] = dataByte;
 80115c6:	7dfb      	ldrb	r3, [r7, #23]
 80115c8:	1c5a      	adds	r2, r3, #1
 80115ca:	75fa      	strb	r2, [r7, #23]
 80115cc:	461a      	mov	r2, r3
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	4413      	add	r3, r2
 80115d2:	7dba      	ldrb	r2, [r7, #22]
 80115d4:	701a      	strb	r2, [r3, #0]
						dataByte = 0;
 80115d6:	2300      	movs	r3, #0
 80115d8:	75bb      	strb	r3, [r7, #22]
						bitCount=0;
 80115da:	2300      	movs	r3, #0
 80115dc:	757b      	strb	r3, [r7, #21]
 80115de:	e005      	b.n	80115ec <MB_getCoilsInByte+0x98>
					}else{
						return MB_ERROR;
 80115e0:	2300      	movs	r3, #0
 80115e2:	e020      	b.n	8011626 <MB_getCoilsInByte+0xd2>
					}
				}
			}else{
				return MB_ERROR;
 80115e4:	2300      	movs	r3, #0
 80115e6:	e01e      	b.n	8011626 <MB_getCoilsInByte+0xd2>
			}
		}else{
			return MB_ERROR;
 80115e8:	2300      	movs	r3, #0
 80115ea:	e01c      	b.n	8011626 <MB_getCoilsInByte+0xd2>
	for(uint16_t i = startAddress; i < endAddress; i++){
 80115ec:	8a7b      	ldrh	r3, [r7, #18]
 80115ee:	3301      	adds	r3, #1
 80115f0:	827b      	strh	r3, [r7, #18]
 80115f2:	8a7a      	ldrh	r2, [r7, #18]
 80115f4:	88fb      	ldrh	r3, [r7, #6]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d3c2      	bcc.n	8011580 <MB_getCoilsInByte+0x2c>
		}
	}
	if( bitCount > 0 && bitCount < 8){
 80115fa:	7d7b      	ldrb	r3, [r7, #21]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d011      	beq.n	8011624 <MB_getCoilsInByte+0xd0>
 8011600:	7d7b      	ldrb	r3, [r7, #21]
 8011602:	2b07      	cmp	r3, #7
 8011604:	d80e      	bhi.n	8011624 <MB_getCoilsInByte+0xd0>
		if(byteCount < size){
 8011606:	7dfa      	ldrb	r2, [r7, #23]
 8011608:	7afb      	ldrb	r3, [r7, #11]
 801160a:	429a      	cmp	r2, r3
 801160c:	d208      	bcs.n	8011620 <MB_getCoilsInByte+0xcc>
			byteArray[byteCount++] = dataByte;
 801160e:	7dfb      	ldrb	r3, [r7, #23]
 8011610:	1c5a      	adds	r2, r3, #1
 8011612:	75fa      	strb	r2, [r7, #23]
 8011614:	461a      	mov	r2, r3
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	4413      	add	r3, r2
 801161a:	7dba      	ldrb	r2, [r7, #22]
 801161c:	701a      	strb	r2, [r3, #0]
 801161e:	e001      	b.n	8011624 <MB_getCoilsInByte+0xd0>
		}else{
			return MB_ERROR;
 8011620:	2300      	movs	r3, #0
 8011622:	e000      	b.n	8011626 <MB_getCoilsInByte+0xd2>
		}
		//byteCount++;
	}

	return MB_OK;
 8011624:	2301      	movs	r3, #1
}
 8011626:	4618      	mov	r0, r3
 8011628:	3718      	adds	r7, #24
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
	...

08011630 <MB_getIRValue>:


uint8_t MB_getIRValue(uint16_t address, uint16_t *value){
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	4603      	mov	r3, r0
 8011638:	6039      	str	r1, [r7, #0]
 801163a:	80fb      	strh	r3, [r7, #6]
	return MB_readIRCallback(address, value);
 801163c:	4b05      	ldr	r3, [pc, #20]	; (8011654 <MB_getIRValue+0x24>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	88fa      	ldrh	r2, [r7, #6]
 8011642:	6839      	ldr	r1, [r7, #0]
 8011644:	4610      	mov	r0, r2
 8011646:	4798      	blx	r3
 8011648:	4603      	mov	r3, r0
}
 801164a:	4618      	mov	r0, r3
 801164c:	3708      	adds	r7, #8
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	24005f6c 	.word	0x24005f6c

08011658 <MB_getIRsValue>:

uint8_t MB_getIRsValue(uint16_t *value, uint8_t size, uint16_t startAddress, uint16_t lastAddresss){
 8011658:	b580      	push	{r7, lr}
 801165a:	b086      	sub	sp, #24
 801165c:	af00      	add	r7, sp, #0
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	4608      	mov	r0, r1
 8011662:	4611      	mov	r1, r2
 8011664:	461a      	mov	r2, r3
 8011666:	4603      	mov	r3, r0
 8011668:	72fb      	strb	r3, [r7, #11]
 801166a:	460b      	mov	r3, r1
 801166c:	813b      	strh	r3, [r7, #8]
 801166e:	4613      	mov	r3, r2
 8011670:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = startAddress; i <= lastAddresss; i++){
 8011672:	893b      	ldrh	r3, [r7, #8]
 8011674:	82fb      	strh	r3, [r7, #22]
 8011676:	e017      	b.n	80116a8 <MB_getIRsValue+0x50>
		uint16_t data;
		if(MB_getIRValue(i, &data)){
 8011678:	f107 0214 	add.w	r2, r7, #20
 801167c:	8afb      	ldrh	r3, [r7, #22]
 801167e:	4611      	mov	r1, r2
 8011680:	4618      	mov	r0, r3
 8011682:	f7ff ffd5 	bl	8011630 <MB_getIRValue>
 8011686:	4603      	mov	r3, r0
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00b      	beq.n	80116a4 <MB_getIRsValue+0x4c>
			if(data >= 0x0000 && data <= 0xFFFF){
				value[i-startAddress] = data;
 801168c:	8afa      	ldrh	r2, [r7, #22]
 801168e:	893b      	ldrh	r3, [r7, #8]
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	68fa      	ldr	r2, [r7, #12]
 8011696:	4413      	add	r3, r2
 8011698:	8aba      	ldrh	r2, [r7, #20]
 801169a:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = startAddress; i <= lastAddresss; i++){
 801169c:	8afb      	ldrh	r3, [r7, #22]
 801169e:	3301      	adds	r3, #1
 80116a0:	82fb      	strh	r3, [r7, #22]
 80116a2:	e001      	b.n	80116a8 <MB_getIRsValue+0x50>
			}else{
				return MB_ERROR;
			}
		}else{
			return MB_ERROR;
 80116a4:	2300      	movs	r3, #0
 80116a6:	e004      	b.n	80116b2 <MB_getIRsValue+0x5a>
	for(uint16_t i = startAddress; i <= lastAddresss; i++){
 80116a8:	8afa      	ldrh	r2, [r7, #22]
 80116aa:	88fb      	ldrh	r3, [r7, #6]
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d9e3      	bls.n	8011678 <MB_getIRsValue+0x20>
		}
	}

	return MB_OK;
 80116b0:	2301      	movs	r3, #1
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3718      	adds	r7, #24
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
	...

080116bc <MB_getHRsValue>:
  * @param pData: pointer of the data
  * @param startAddress: start address to be read
  * @param lastAddresss: last address of the register
  * @retval return error if an exception happen
  */
uint8_t MB_getHRsValue(uint16_t *pData, uint16_t startAddress, uint16_t lastAddresss){
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	460b      	mov	r3, r1
 80116c6:	807b      	strh	r3, [r7, #2]
 80116c8:	4613      	mov	r3, r2
 80116ca:	803b      	strh	r3, [r7, #0]
	//DEBUG_PRINT("getHR_ok\r\n");

	for(uint16_t address = startAddress; address <= lastAddresss; address++){
 80116cc:	887b      	ldrh	r3, [r7, #2]
 80116ce:	81fb      	strh	r3, [r7, #14]
 80116d0:	e019      	b.n	8011706 <MB_getHRsValue+0x4a>
		uint16_t data = 0U;
 80116d2:	2300      	movs	r3, #0
 80116d4:	81bb      	strh	r3, [r7, #12]
		//DEBUG_PRINT_INT("address: ", address, ",\r\n ");
		if(MB_readHRCallback(address, &data)){
 80116d6:	4b10      	ldr	r3, [pc, #64]	; (8011718 <MB_getHRsValue+0x5c>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f107 010c 	add.w	r1, r7, #12
 80116de:	89fa      	ldrh	r2, [r7, #14]
 80116e0:	4610      	mov	r0, r2
 80116e2:	4798      	blx	r3
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d00b      	beq.n	8011702 <MB_getHRsValue+0x46>
			//DEBUG_PRINT_INT(" OK address: ", address, ",\r\n ");
			if(data >= 0x0000 && data <= 0xFFFF){
				pData[address-startAddress] = data;
 80116ea:	89fa      	ldrh	r2, [r7, #14]
 80116ec:	887b      	ldrh	r3, [r7, #2]
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	4413      	add	r3, r2
 80116f6:	89ba      	ldrh	r2, [r7, #12]
 80116f8:	801a      	strh	r2, [r3, #0]
	for(uint16_t address = startAddress; address <= lastAddresss; address++){
 80116fa:	89fb      	ldrh	r3, [r7, #14]
 80116fc:	3301      	adds	r3, #1
 80116fe:	81fb      	strh	r3, [r7, #14]
 8011700:	e001      	b.n	8011706 <MB_getHRsValue+0x4a>
			}else{
				return MB_ERROR;
			}
		}else{
			//DEBUG_PRINT_INT(" ERROR address: ", address, ",\r\n ");
			return MB_ERROR;
 8011702:	2300      	movs	r3, #0
 8011704:	e004      	b.n	8011710 <MB_getHRsValue+0x54>
	for(uint16_t address = startAddress; address <= lastAddresss; address++){
 8011706:	89fa      	ldrh	r2, [r7, #14]
 8011708:	883b      	ldrh	r3, [r7, #0]
 801170a:	429a      	cmp	r2, r3
 801170c:	d9e1      	bls.n	80116d2 <MB_getHRsValue+0x16>
		}
	}

	return MB_OK;
 801170e:	2301      	movs	r3, #1
}
 8011710:	4618      	mov	r0, r3
 8011712:	3710      	adds	r7, #16
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	24005fac 	.word	0x24005fac

0801171c <MB_setHRValue>:
/**
  * @brief sets single holding register data
  * @param address: address to be write the register
  * @retval return error if an exception happen
  */
uint8_t MB_setHRValue(uint16_t address, uint16_t data){
 801171c:	b580      	push	{r7, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	af00      	add	r7, sp, #0
 8011722:	4603      	mov	r3, r0
 8011724:	460a      	mov	r2, r1
 8011726:	80fb      	strh	r3, [r7, #6]
 8011728:	4613      	mov	r3, r2
 801172a:	80bb      	strh	r3, [r7, #4]
	//DEBUG_PRINT("SHR_OK\r\n");
	return MB_writeHRCallback(address, data);
 801172c:	4b05      	ldr	r3, [pc, #20]	; (8011744 <MB_setHRValue+0x28>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	88b9      	ldrh	r1, [r7, #4]
 8011732:	88fa      	ldrh	r2, [r7, #6]
 8011734:	4610      	mov	r0, r2
 8011736:	4798      	blx	r3
 8011738:	4603      	mov	r3, r0
	 //return (mbRegister.HR[address - MB_HR_ADDR_OFFSET] == data);
}
 801173a:	4618      	mov	r0, r3
 801173c:	3708      	adds	r7, #8
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	24005f78 	.word	0x24005f78

08011748 <MB_setMaskWHRValue>:


uint8_t MB_setMaskWHRValue(uint16_t address, uint16_t andMask, uint16_t orMask){
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	4603      	mov	r3, r0
 8011750:	80fb      	strh	r3, [r7, #6]
 8011752:	460b      	mov	r3, r1
 8011754:	80bb      	strh	r3, [r7, #4]
 8011756:	4613      	mov	r3, r2
 8011758:	807b      	strh	r3, [r7, #2]

	return MB_maskWriteHRCallback(address, andMask, orMask);
 801175a:	4b05      	ldr	r3, [pc, #20]	; (8011770 <MB_setMaskWHRValue+0x28>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	887a      	ldrh	r2, [r7, #2]
 8011760:	88b9      	ldrh	r1, [r7, #4]
 8011762:	88f8      	ldrh	r0, [r7, #6]
 8011764:	4798      	blx	r3
 8011766:	4603      	mov	r3, r0
	 //return (mbRegister.HR[address - MB_HR_ADDR_OFFSET] == data);
}
 8011768:	4618      	mov	r0, r3
 801176a:	3708      	adds	r7, #8
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	24005f74 	.word	0x24005f74

08011774 <MB_CountBusExpErr>:


/**
  * @brief count Bus exception error by 1, max count 65535 times
  */
void MB_CountBusExpErr(void){
 8011774:	b480      	push	{r7}
 8011776:	af00      	add	r7, sp, #0
	mbHandle.diag.bus_exp_err_count++;
 8011778:	4b05      	ldr	r3, [pc, #20]	; (8011790 <MB_CountBusExpErr+0x1c>)
 801177a:	8adb      	ldrh	r3, [r3, #22]
 801177c:	3301      	adds	r3, #1
 801177e:	b29a      	uxth	r2, r3
 8011780:	4b03      	ldr	r3, [pc, #12]	; (8011790 <MB_CountBusExpErr+0x1c>)
 8011782:	82da      	strh	r2, [r3, #22]
}
 8011784:	bf00      	nop
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop
 8011790:	24005f80 	.word	0x24005f80

08011794 <MB_CountSlaveMsg>:

void MB_CountSlaveMsg(void){
 8011794:	b480      	push	{r7}
 8011796:	af00      	add	r7, sp, #0
	mbHandle.diag.slv_msg_count++;
 8011798:	4b05      	ldr	r3, [pc, #20]	; (80117b0 <MB_CountSlaveMsg+0x1c>)
 801179a:	8b1b      	ldrh	r3, [r3, #24]
 801179c:	3301      	adds	r3, #1
 801179e:	b29a      	uxth	r2, r3
 80117a0:	4b03      	ldr	r3, [pc, #12]	; (80117b0 <MB_CountSlaveMsg+0x1c>)
 80117a2:	831a      	strh	r2, [r3, #24]
}
 80117a4:	bf00      	nop
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop
 80117b0:	24005f80 	.word	0x24005f80

080117b4 <MB_CountCommEvent>:
  */
void MB_CountBusCharOvrun(void){ 							// count bus char overrun counter by 1
	mbHandle.diag.bus_char_ovrun_count++;
}

void MB_CountCommEvent(void){
 80117b4:	b480      	push	{r7}
 80117b6:	af00      	add	r7, sp, #0
	mbHandle.diag.comm_event_count++;
 80117b8:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <MB_CountCommEvent+0x1c>)
 80117ba:	8b9b      	ldrh	r3, [r3, #28]
 80117bc:	3301      	adds	r3, #1
 80117be:	b29a      	uxth	r2, r3
 80117c0:	4b03      	ldr	r3, [pc, #12]	; (80117d0 <MB_CountCommEvent+0x1c>)
 80117c2:	839a      	strh	r2, [r3, #28]
}
 80117c4:	bf00      	nop
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop
 80117d0:	24005f80 	.word	0x24005f80

080117d4 <MB_GetBusyStatus>:

/*Functions for busy status*/
uint8_t MB_GetBusyStatus(void){
 80117d4:	b480      	push	{r7}
 80117d6:	af00      	add	r7, sp, #0
	return mbHandle.busy_status;
 80117d8:	4b03      	ldr	r3, [pc, #12]	; (80117e8 <MB_GetBusyStatus+0x14>)
 80117da:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80117de:	4618      	mov	r0, r3
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	24005f80 	.word	0x24005f80

080117ec <MB_SetBusyStatus>:
void MB_SetBusyStatus(void){
 80117ec:	b480      	push	{r7}
 80117ee:	af00      	add	r7, sp, #0
	mbHandle.busy_status = MB_STATUS_BUSY;
 80117f0:	4b04      	ldr	r3, [pc, #16]	; (8011804 <MB_SetBusyStatus+0x18>)
 80117f2:	2201      	movs	r2, #1
 80117f4:	f883 2020 	strb.w	r2, [r3, #32]
}
 80117f8:	bf00      	nop
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	24005f80 	.word	0x24005f80

08011808 <MB_ClearBusyStatus>:

void MB_ClearBusyStatus(void){
 8011808:	b480      	push	{r7}
 801180a:	af00      	add	r7, sp, #0
	mbHandle.busy_status = MB_STATUS_OK;
 801180c:	4b04      	ldr	r3, [pc, #16]	; (8011820 <MB_ClearBusyStatus+0x18>)
 801180e:	2200      	movs	r2, #0
 8011810:	f883 2020 	strb.w	r2, [r3, #32]
}
 8011814:	bf00      	nop
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop
 8011820:	24005f80 	.word	0x24005f80

08011824 <MB_GetListenOnlyMode>:

/*Functions for listen only mode*/
uint8_t MB_GetListenOnlyMode(void){
 8011824:	b480      	push	{r7}
 8011826:	af00      	add	r7, sp, #0
	return mbHandle.diag.listen_only_mode;
 8011828:	4b03      	ldr	r3, [pc, #12]	; (8011838 <MB_GetListenOnlyMode+0x14>)
 801182a:	7c1b      	ldrb	r3, [r3, #16]
}
 801182c:	4618      	mov	r0, r3
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop
 8011838:	24005f80 	.word	0x24005f80

0801183c <MB_GetRestartFlag>:
	mbHandle.diag.listen_only_mode = 0U;
}


/*Functions for Restart flag for restart communication option*/
uint8_t MB_GetRestartFlag(void){
 801183c:	b480      	push	{r7}
 801183e:	af00      	add	r7, sp, #0
	return mbHandle.diag.device_restart_flag;
 8011840:	4b03      	ldr	r3, [pc, #12]	; (8011850 <MB_GetRestartFlag+0x14>)
 8011842:	7c5b      	ldrb	r3, [r3, #17]
}
 8011844:	4618      	mov	r0, r3
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop
 8011850:	24005f80 	.word	0x24005f80

08011854 <MB_SetRestartFlag>:
void MB_SetRestartFlag(void){
 8011854:	b480      	push	{r7}
 8011856:	af00      	add	r7, sp, #0
	mbHandle.diag.device_restart_flag = 1U;
 8011858:	4b03      	ldr	r3, [pc, #12]	; (8011868 <MB_SetRestartFlag+0x14>)
 801185a:	2201      	movs	r2, #1
 801185c:	745a      	strb	r2, [r3, #17]
}
 801185e:	bf00      	nop
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr
 8011868:	24005f80 	.word	0x24005f80

0801186c <MB_GetDiagRegValue>:
/**
  * @brief It get the diagnostics register data
  * @param none
  * @retval 0,1 whare, 0 means exception and 1 means no exception
  */
uint16_t MB_GetDiagRegValue(void){
 801186c:	b480      	push	{r7}
 801186e:	af00      	add	r7, sp, #0
	return mbHandle.diag.diagReg.value;
 8011870:	4b03      	ldr	r3, [pc, #12]	; (8011880 <MB_GetDiagRegValue+0x14>)
 8011872:	8bdb      	ldrh	r3, [r3, #30]
}
 8011874:	4618      	mov	r0, r3
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	24005f80 	.word	0x24005f80

08011884 <MB_ClearDiagReg>:
/**
  * @brief It set the diagnostics register data
  * @param none
  * @retval 1U/0U; where, 1U = no exception, 0U = exception occurred
  */
void MB_ClearDiagReg(void){
 8011884:	b480      	push	{r7}
 8011886:	af00      	add	r7, sp, #0

	mbHandle.diag.diagReg.value = 0u;
 8011888:	4b03      	ldr	r3, [pc, #12]	; (8011898 <MB_ClearDiagReg+0x14>)
 801188a:	2200      	movs	r2, #0
 801188c:	83da      	strh	r2, [r3, #30]
}
 801188e:	bf00      	nop
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr
 8011898:	24005f80 	.word	0x24005f80

0801189c <MB_GetExcepStatus>:



uint8_t MB_GetExcepStatus(void){
 801189c:	b480      	push	{r7}
 801189e:	af00      	add	r7, sp, #0
	return mbHandle.excepStatus;
 80118a0:	4b03      	ldr	r3, [pc, #12]	; (80118b0 <MB_GetExcepStatus+0x14>)
 80118a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr
 80118b0:	24005f80 	.word	0x24005f80

080118b4 <MB_attachDICallback>:



/*------ attach callback----------*/
// to attach callback function for discrete input
void MB_attachDICallback(uint8_t (*callbackReadFunc)( MB_DIAddrEnum address, uint8_t *value)){
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
	MB_readDICallback = callbackReadFunc;
 80118bc:	4a04      	ldr	r2, [pc, #16]	; (80118d0 <MB_attachDICallback+0x1c>)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6013      	str	r3, [r2, #0]
}
 80118c2:	bf00      	nop
 80118c4:	370c      	adds	r7, #12
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop
 80118d0:	24005fa4 	.word	0x24005fa4

080118d4 <MB_attachCOCallback>:

// to attach callback function for coil output
void MB_attachCOCallback(uint8_t (*callbackWriteFunc)(MB_CoilAddrEnum address, uint8_t value), uint8_t (*callbackReadFunc)(MB_CoilAddrEnum address, uint8_t *value)){
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]
	MB_writeCOCallback = callbackWriteFunc;
 80118de:	4a06      	ldr	r2, [pc, #24]	; (80118f8 <MB_attachCOCallback+0x24>)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6013      	str	r3, [r2, #0]
	MB_readCOCallback = callbackReadFunc;
 80118e4:	4a05      	ldr	r2, [pc, #20]	; (80118fc <MB_attachCOCallback+0x28>)
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	6013      	str	r3, [r2, #0]
}
 80118ea:	bf00      	nop
 80118ec:	370c      	adds	r7, #12
 80118ee:	46bd      	mov	sp, r7
 80118f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop
 80118f8:	24005f70 	.word	0x24005f70
 80118fc:	24005f7c 	.word	0x24005f7c

08011900 <MB_attachIRCallback>:

// to attach callback function for input register
void MB_attachIRCallback(uint8_t (*callbackReadFunc)(MB_IRAddrEnum address, uint16_t *value)){
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
	MB_readIRCallback = callbackReadFunc;
 8011908:	4a04      	ldr	r2, [pc, #16]	; (801191c <MB_attachIRCallback+0x1c>)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6013      	str	r3, [r2, #0]
}
 801190e:	bf00      	nop
 8011910:	370c      	adds	r7, #12
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	24005f6c 	.word	0x24005f6c

08011920 <MB_attachHRCallback>:

// to attach callback function for holding register
void MB_attachHRCallback(uint8_t (*callbackWriteFunc)(MB_HRAddrEnum address, uint16_t value), uint8_t (*callbackReadFunc)(MB_HRAddrEnum address, uint16_t *value)){
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
	MB_writeHRCallback = callbackWriteFunc;
 801192a:	4a06      	ldr	r2, [pc, #24]	; (8011944 <MB_attachHRCallback+0x24>)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6013      	str	r3, [r2, #0]
	MB_readHRCallback = callbackReadFunc;
 8011930:	4a05      	ldr	r2, [pc, #20]	; (8011948 <MB_attachHRCallback+0x28>)
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	6013      	str	r3, [r2, #0]
}
 8011936:	bf00      	nop
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop
 8011944:	24005f78 	.word	0x24005f78
 8011948:	24005fac 	.word	0x24005fac

0801194c <MB_attachMaskWHRCallback>:

void MB_attachMaskWHRCallback(uint8_t (*callbackWriteFunc)(MB_HRAddrEnum address, uint16_t andMask, uint16_t orMask)){
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
	MB_maskWriteHRCallback = callbackWriteFunc;
 8011954:	4a04      	ldr	r2, [pc, #16]	; (8011968 <MB_attachMaskWHRCallback+0x1c>)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6013      	str	r3, [r2, #0]
}
 801195a:	bf00      	nop
 801195c:	370c      	adds	r7, #12
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop
 8011968:	24005f74 	.word	0x24005f74

0801196c <MB_attachChangeSACllback>:

void MB_attachChangeSACllback(uint8_t (*callbackFunc)(uint8_t slaveAddress)){
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
	MB_changSAcallback = callbackFunc;
 8011974:	4a04      	ldr	r2, [pc, #16]	; (8011988 <MB_attachChangeSACllback+0x1c>)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6013      	str	r3, [r2, #0]
}
 801197a:	bf00      	nop
 801197c:	370c      	adds	r7, #12
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	24005fa8 	.word	0x24005fa8

0801198c <MBMQ_clear>:
/**
  * @brief  clear the msg queue
  * @param  que: Pointer to msg queue
  * @retval none
  */
void MBMQ_clear(MBMQ_Queue *que){
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
	que->id = 0U;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	601a      	str	r2, [r3, #0]
	que->startIndex = 0U;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2200      	movs	r2, #0
 801199e:	711a      	strb	r2, [r3, #4]
	que->endIndex = 0U;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	715a      	strb	r2, [r3, #5]
	que->noOfMsg = 0U;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	719a      	strb	r2, [r3, #6]
	for (uint16_t i = 0U; i < MBMQ_QUEUE_SIZE; i++){
 80119ac:	2300      	movs	r3, #0
 80119ae:	81fb      	strh	r3, [r7, #14]
 80119b0:	e030      	b.n	8011a14 <MBMQ_clear+0x88>
		que->msg[i].id = 0U;
 80119b2:	89fb      	ldrh	r3, [r7, #14]
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80119ba:	fb01 f303 	mul.w	r3, r1, r3
 80119be:	4413      	add	r3, r2
 80119c0:	3308      	adds	r3, #8
 80119c2:	2200      	movs	r2, #0
 80119c4:	601a      	str	r2, [r3, #0]
//		que->msg[i].keyIP = 0U;
		que->msg[i].key = 0U;
 80119c6:	89fb      	ldrh	r3, [r7, #14]
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80119ce:	fb01 f303 	mul.w	r3, r1, r3
 80119d2:	4413      	add	r3, r2
 80119d4:	330c      	adds	r3, #12
 80119d6:	2200      	movs	r2, #0
 80119d8:	801a      	strh	r2, [r3, #0]
		que->msg[i].size = 0u;
 80119da:	89fb      	ldrh	r3, [r7, #14]
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	3301      	adds	r3, #1
 80119e0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80119e4:	fb01 f303 	mul.w	r3, r1, r3
 80119e8:	4413      	add	r3, r2
 80119ea:	3306      	adds	r3, #6
 80119ec:	2200      	movs	r2, #0
 80119ee:	801a      	strh	r2, [r3, #0]
		memset(que->msg[i].buff, 0U, MBMQ_BUFF_SIZE);
 80119f0:	89fb      	ldrh	r3, [r7, #14]
 80119f2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80119f6:	fb02 f303 	mul.w	r3, r2, r3
 80119fa:	3308      	adds	r3, #8
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	4413      	add	r3, r2
 8011a00:	3306      	adds	r3, #6
 8011a02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011a06:	2100      	movs	r1, #0
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f014 fe93 	bl	8026734 <memset>
	for (uint16_t i = 0U; i < MBMQ_QUEUE_SIZE; i++){
 8011a0e:	89fb      	ldrh	r3, [r7, #14]
 8011a10:	3301      	adds	r3, #1
 8011a12:	81fb      	strh	r3, [r7, #14]
 8011a14:	89fb      	ldrh	r3, [r7, #14]
 8011a16:	2b03      	cmp	r3, #3
 8011a18:	d9cb      	bls.n	80119b2 <MBMQ_clear+0x26>
	}
}
 8011a1a:	bf00      	nop
 8011a1c:	bf00      	nop
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <MBMQ_clearMsg>:
}

/**
  * @brief  clear the msg
  */
void MBMQ_clearMsg(MBMQ_Msg *msg){
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
	msg->id = 0;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	601a      	str	r2, [r3, #0]
//	msg->keyIP = 0;
	msg->key = 0;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	809a      	strh	r2, [r3, #4]
	msg->size = 0;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
	memset(msg->buff, 0, MBMQ_BUFF_SIZE);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	3306      	adds	r3, #6
 8011a44:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011a48:	2100      	movs	r1, #0
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f014 fe72 	bl	8026734 <memset>
}
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <MBRM_Init>:
static MB_RTUMaster *mbMstr;


/* initiates modbus master struct
 * */
void MBRM_Init(MB_RTUMaster *master){
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
	mbMstr = master;
 8011a60:	4a27      	ldr	r2, [pc, #156]	; (8011b00 <MBRM_Init+0xa8>)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6013      	str	r3, [r2, #0]
	mbMstr->isPendingRqst = 0;
 8011a66:	4b26      	ldr	r3, [pc, #152]	; (8011b00 <MBRM_Init+0xa8>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	mbMstr->isBusy = 0;
 8011a70:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <MBRM_Init+0xa8>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2200      	movs	r2, #0
 8011a76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	mbMstr->retryCount = 0;
 8011a7a:	4b21      	ldr	r3, [pc, #132]	; (8011b00 <MBRM_Init+0xa8>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	mbMstr->replyTimer.enableTimer = 0;
 8011a84:	4b1e      	ldr	r3, [pc, #120]	; (8011b00 <MBRM_Init+0xa8>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	721a      	strb	r2, [r3, #8]
	mbMstr->replyTimer.isTimeout = 0;
 8011a8c:	4b1c      	ldr	r3, [pc, #112]	; (8011b00 <MBRM_Init+0xa8>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2200      	movs	r2, #0
 8011a92:	771a      	strb	r2, [r3, #28]
	mbMstr->replyTimer.timer = 0;
 8011a94:	4b1a      	ldr	r3, [pc, #104]	; (8011b00 <MBRM_Init+0xa8>)
 8011a96:	6819      	ldr	r1, [r3, #0]
 8011a98:	f04f 0200 	mov.w	r2, #0
 8011a9c:	f04f 0300 	mov.w	r3, #0
 8011aa0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mbMstr->state = 0;
 8011aa4:	4b16      	ldr	r3, [pc, #88]	; (8011b00 <MBRM_Init+0xa8>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	705a      	strb	r2, [r3, #1]
	mbMstr->status = 0;
 8011aac:	4b14      	ldr	r3, [pc, #80]	; (8011b00 <MBRM_Init+0xa8>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	709a      	strb	r2, [r3, #2]
	memset(mbMstr->rxBuff, 0, MB_PDU_MAX_SIZE);
 8011ab4:	4b12      	ldr	r3, [pc, #72]	; (8011b00 <MBRM_Init+0xa8>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	3398      	adds	r3, #152	; 0x98
 8011aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011abe:	2100      	movs	r1, #0
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f014 fe37 	bl	8026734 <memset>
	memset(mbMstr->txBuff, 0, MB_PDU_MAX_SIZE);
 8011ac6:	4b0e      	ldr	r3, [pc, #56]	; (8011b00 <MBRM_Init+0xa8>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f014 fe2d 	bl	8026734 <memset>
	mbMstr->rxBuffSize = 0;
 8011ada:	4b09      	ldr	r3, [pc, #36]	; (8011b00 <MBRM_Init+0xa8>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
	mbMstr->txBuffSize = 0;
 8011ae4:	4b06      	ldr	r3, [pc, #24]	; (8011b00 <MBRM_Init+0xa8>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a

	serial = MBS_GetInstance();
 8011aee:	f000 fc0d 	bl	801230c <MBS_GetInstance>
 8011af2:	4603      	mov	r3, r0
 8011af4:	4a03      	ldr	r2, [pc, #12]	; (8011b04 <MBRM_Init+0xac>)
 8011af6:	6013      	str	r3, [r2, #0]
}
 8011af8:	bf00      	nop
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	24001c50 	.word	0x24001c50
 8011b04:	24001c4c 	.word	0x24001c4c

08011b08 <MBRM_BindSerial>:
}


/*Binds serial to the Modbus master
 * */
void MBRM_BindSerial(MBS_Serial *serial_){
 8011b08:	b480      	push	{r7}
 8011b0a:	b083      	sub	sp, #12
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
	serial = serial_;
 8011b10:	4a04      	ldr	r2, [pc, #16]	; (8011b24 <MBRM_BindSerial+0x1c>)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6013      	str	r3, [r2, #0]
}
 8011b16:	bf00      	nop
 8011b18:	370c      	adds	r7, #12
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop
 8011b24:	24001c4c 	.word	0x24001c4c

08011b28 <MBRM_Execute>:
  * @brief processes received data packet and response according to the command
  *
  * @param none
  * @retval None
  */
void MBRM_Execute(MB_RTUMaster *master){
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]

	switch (master->state) {
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	785b      	ldrb	r3, [r3, #1]
 8011b34:	2b04      	cmp	r3, #4
 8011b36:	f200 8140 	bhi.w	8011dba <MBRM_Execute+0x292>
 8011b3a:	a201      	add	r2, pc, #4	; (adr r2, 8011b40 <MBRM_Execute+0x18>)
 8011b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b40:	08011b55 	.word	0x08011b55
 8011b44:	08011c25 	.word	0x08011c25
 8011b48:	08011d3d 	.word	0x08011d3d
 8011b4c:	08011dbb 	.word	0x08011dbb
 8011b50:	08011d67 	.word	0x08011d67
			/* 1. check the pending request is available or not
			 * 2. if yes, initiate to send the request
			 * 3. start the response timeout timer
			 * 4. change the state flag to the waiting replay state
			 * */
			if(master->isPendingRqst > 0){
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d05e      	beq.n	8011c1c <MBRM_Execute+0xf4>

				master->retryCount = 1;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2201      	movs	r2, #1
 8011b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				master->status = MBRM_STATUS_BUSY;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2201      	movs	r2, #1
 8011b6a:	709a      	strb	r2, [r3, #2]

//				DEBUG_SPRINT_NL("srlBusy: %d: ",serial->isBusy);
				//TODO: ADD-20230902, ------------
				if((serial->protocol == MBS_PROTO_RTU_STD || serial->protocol == MBS_PROTO_RTU_CLUSTER) && (serial->isSending || serial->isReceiving)) return;		// if serial line is busy to send or receive with another request
 8011b6c:	4b99      	ldr	r3, [pc, #612]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	785b      	ldrb	r3, [r3, #1]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d004      	beq.n	8011b80 <MBRM_Execute+0x58>
 8011b76:	4b97      	ldr	r3, [pc, #604]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	785b      	ldrb	r3, [r3, #1]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d10b      	bne.n	8011b98 <MBRM_Execute+0x70>
 8011b80:	4b94      	ldr	r3, [pc, #592]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	7d9b      	ldrb	r3, [r3, #22]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f040 8119 	bne.w	8011dbe <MBRM_Execute+0x296>
 8011b8c:	4b91      	ldr	r3, [pc, #580]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	7d5b      	ldrb	r3, [r3, #21]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f040 8113 	bne.w	8011dbe <MBRM_Execute+0x296>


				if(serial->isBusy) return;		// if serial line is busy with another request
 8011b98:	4b8e      	ldr	r3, [pc, #568]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	7d1b      	ldrb	r3, [r3, #20]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f040 810f 	bne.w	8011dc2 <MBRM_Execute+0x29a>
				serial->mode = MBS_MODE_MASTER;
 8011ba4:	4b8b      	ldr	r3, [pc, #556]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2201      	movs	r2, #1
 8011baa:	701a      	strb	r2, [r3, #0]
				serial->isBusy = 1;
 8011bac:	4b89      	ldr	r3, [pc, #548]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	751a      	strb	r2, [r3, #20]

				// copy the bufffer to the serial buffer
				memcpy(serial->txBuff, master->txBuff, master->txBuffSize);
 8011bb4:	4b87      	ldr	r3, [pc, #540]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	f503 7091 	add.w	r0, r3, #290	; 0x122
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f503 71cc 	add.w	r1, r3, #408	; 0x198
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 8011bc8:	461a      	mov	r2, r3
 8011bca:	f014 fda5 	bl	8026718 <memcpy>
				serial->txBuffSize = master->txBuffSize;
 8011bce:	4b81      	ldr	r3, [pc, #516]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	f8b2 229a 	ldrh.w	r2, [r2, #666]	; 0x29a
 8011bd8:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
//				DEBUG_SPRINT_NL("MBM Snt: %d: ",serial->txBuffSize);
				if(MBS_Send(serial) == MB_OK){								// send the request to the slave
 8011bdc:	4b7d      	ldr	r3, [pc, #500]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4618      	mov	r0, r3
 8011be2:	f000 fd35 	bl	8012650 <MBS_Send>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d112      	bne.n	8011c12 <MBRM_Execute+0xea>

					MB_CUST_ResetTimer(&master->custom.reTransTimer);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3330      	adds	r3, #48	; 0x30
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7fd fb4d 	bl	800f290 <MB_CUST_ResetTimer>
						MBRM_StartReplyTimer(&master->replyTimer);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	3308      	adds	r3, #8
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f000 f8ee 	bl	8011ddc <MBRM_StartReplyTimer>
						master->isPendingRqst--;						// decrease the pending request
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011c06:	3b01      	subs	r3, #1
 8011c08:	b2da      	uxtb	r2, r3
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					serial->isBusy = 0;
				}
			}else{
				master->status = MBRM_STATUS_OK;
			}
			break;
 8011c10:	e0dc      	b.n	8011dcc <MBRM_Execute+0x2a4>
					serial->isBusy = 0;
 8011c12:	4b70      	ldr	r3, [pc, #448]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	2200      	movs	r2, #0
 8011c18:	751a      	strb	r2, [r3, #20]
			break;
 8011c1a:	e0d7      	b.n	8011dcc <MBRM_Execute+0x2a4>
				master->status = MBRM_STATUS_OK;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	709a      	strb	r2, [r3, #2]
			break;
 8011c22:	e0d3      	b.n	8011dcc <MBRM_Execute+0x2a4>
			 * 3. if an error in the receive frame, retry may be performed
			 * 4. if no reply is received, the Response time-out expires, and an error is generated
			 * 5. go to the Processing error state
			 * */

			if(serial->isDataReceived > 0U){					// if data packet is received
 8011c24:	4b6b      	ldr	r3, [pc, #428]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	7cdb      	ldrb	r3, [r3, #19]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d055      	beq.n	8011cda <MBRM_Execute+0x1b2>
				serial->isDataReceived = 0U;
 8011c2e:	4b69      	ldr	r3, [pc, #420]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2200      	movs	r2, #0
 8011c34:	74da      	strb	r2, [r3, #19]
//				serial->isBusy = 0;
				if(!MBRM_IsUnexpectedSlave()){					// if the packet received from the target slave
 8011c36:	f000 f93d 	bl	8011eb4 <MBRM_IsUnexpectedSlave>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d143      	bne.n	8011cc8 <MBRM_Execute+0x1a0>
					if(MB_CRCCheck(serial->rxBuff, serial->rxBuffSize)){ 		// check the error with the CRC
 8011c40:	4b64      	ldr	r3, [pc, #400]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8011c48:	4b62      	ldr	r3, [pc, #392]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	4619      	mov	r1, r3
 8011c54:	4610      	mov	r0, r2
 8011c56:	f7fd fa07 	bl	800f068 <MB_CRCCheck>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d006      	beq.n	8011c6e <MBRM_Execute+0x146>
						master->replyTimer.enableTimer = 0u;			// disable timer
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2200      	movs	r2, #0
 8011c64:	721a      	strb	r2, [r3, #8]
						master->state = MBRM_STATE_PROCESSING_REPLY;		// change the state
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2203      	movs	r2, #3
 8011c6a:	705a      	strb	r2, [r3, #1]
				}else{
					master->state = MBRM_STATE_PROCESSING_ERROR;		// change the state
				}
			}

			break;
 8011c6c:	e0ab      	b.n	8011dc6 <MBRM_Execute+0x29e>
						master->status = MBRM_STATUS_FRAME_ERROR;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2203      	movs	r2, #3
 8011c72:	709a      	strb	r2, [r3, #2]
						if(master->retryCount < master->retryMax){
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d21d      	bcs.n	8011cc0 <MBRM_Execute+0x198>
							master->retryCount++;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	b2da      	uxtb	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							master->replyTimer.timer = TS_GetUS(&timStamp);			// update the time
 8011c94:	4850      	ldr	r0, [pc, #320]	; (8011dd8 <MBRM_Execute+0x2b0>)
 8011c96:	f7f9 f967 	bl	800af68 <TS_GetUS>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	6879      	ldr	r1, [r7, #4]
 8011ca0:	e9c1 2304 	strd	r2, r3, [r1, #16]
							serial->mode = MBS_MODE_MASTER;
 8011ca4:	4b4b      	ldr	r3, [pc, #300]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	2201      	movs	r2, #1
 8011caa:	701a      	strb	r2, [r3, #0]
							serial->isBusy = 1;
 8011cac:	4b49      	ldr	r3, [pc, #292]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	751a      	strb	r2, [r3, #20]
							MBS_Send(serial);
 8011cb4:	4b47      	ldr	r3, [pc, #284]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f000 fcc9 	bl	8012650 <MBS_Send>
			break;
 8011cbe:	e082      	b.n	8011dc6 <MBRM_Execute+0x29e>
							master->state = MBRM_STATE_PROCESSING_REPLY;		// change the state
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2203      	movs	r2, #3
 8011cc4:	705a      	strb	r2, [r3, #1]
			break;
 8011cc6:	e07e      	b.n	8011dc6 <MBRM_Execute+0x29e>
					master->status = MBRM_STATUS_TIMEOUT_ERROR;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2202      	movs	r2, #2
 8011ccc:	709a      	strb	r2, [r3, #2]
					MBS_ClearRXBuffer(serial);		// clear receive buffer
 8011cce:	4b41      	ldr	r3, [pc, #260]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f000 ff16 	bl	8012b04 <MBS_ClearRXBuffer>
			break;
 8011cd8:	e075      	b.n	8011dc6 <MBRM_Execute+0x29e>
			}else if(master->replyTimer.isTimeout > 0u){	// if time out
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	7f1b      	ldrb	r3, [r3, #28]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d071      	beq.n	8011dc6 <MBRM_Execute+0x29e>
				master->status = MBRM_STATUS_TIMEOUT_ERROR;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2202      	movs	r2, #2
 8011ce6:	709a      	strb	r2, [r3, #2]
				if(master->retryCount < master->retryMax){
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d21d      	bcs.n	8011d34 <MBRM_Execute+0x20c>
					master->retryCount++;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011cfe:	3301      	adds	r3, #1
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					master->replyTimer.timer = TS_GetUS(&timStamp);			// update the time
 8011d08:	4833      	ldr	r0, [pc, #204]	; (8011dd8 <MBRM_Execute+0x2b0>)
 8011d0a:	f7f9 f92d 	bl	800af68 <TS_GetUS>
 8011d0e:	4602      	mov	r2, r0
 8011d10:	460b      	mov	r3, r1
 8011d12:	6879      	ldr	r1, [r7, #4]
 8011d14:	e9c1 2304 	strd	r2, r3, [r1, #16]
					serial->mode = MBS_MODE_MASTER;
 8011d18:	4b2e      	ldr	r3, [pc, #184]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	701a      	strb	r2, [r3, #0]
					serial->isBusy = 1;
 8011d20:	4b2c      	ldr	r3, [pc, #176]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2201      	movs	r2, #1
 8011d26:	751a      	strb	r2, [r3, #20]
					MBS_Send(serial);
 8011d28:	4b2a      	ldr	r3, [pc, #168]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f000 fc8f 	bl	8012650 <MBS_Send>
			break;
 8011d32:	e048      	b.n	8011dc6 <MBRM_Execute+0x29e>
					master->state = MBRM_STATE_PROCESSING_ERROR;		// change the state
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2204      	movs	r2, #4
 8011d38:	705a      	strb	r2, [r3, #1]
			break;
 8011d3a:	e044      	b.n	8011dc6 <MBRM_Execute+0x29e>
		case MBRM_STATE_WAITING_TURNAROUND_DELAY:

			if(MBRM_GetSlaveAddress() == MB_BROADCAST_ADDR && MBRM_GetFunCode() != MB_CFC_RIRDI_107){
 8011d3c:	f000 f8d0 	bl	8011ee0 <MBRM_GetSlaveAddress>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d141      	bne.n	8011dca <MBRM_Execute+0x2a2>
 8011d46:	f000 f8d9 	bl	8011efc <MBRM_GetFunCode>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b6b      	cmp	r3, #107	; 0x6b
 8011d4e:	d03c      	beq.n	8011dca <MBRM_Execute+0x2a2>
				if(master->replyTimer.isTimeout > 0) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	7f1b      	ldrb	r3, [r3, #28]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d038      	beq.n	8011dca <MBRM_Execute+0x2a2>
					master->state = MBRM_STATE_IDLE;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	705a      	strb	r2, [r3, #1]
					master->replyTimer.isTimeout = 0;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2200      	movs	r2, #0
 8011d62:	771a      	strb	r2, [r3, #28]
				}
			}

			break;
 8011d64:	e031      	b.n	8011dca <MBRM_Execute+0x2a2>
		case MBRM_STATE_PROCESSING_REPLY:
			//TODO: to implement processing the response

			break;
		case MBRM_STATE_PROCESSING_ERROR:
			master->state = MBRM_STATE_IDLE;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	705a      	strb	r2, [r3, #1]
			memset(master->txBuff, 0, master->txBuffSize);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 8011d78:	461a      	mov	r2, r3
 8011d7a:	2100      	movs	r1, #0
 8011d7c:	f014 fcda 	bl	8026734 <memset>
			memset(master->rxBuff, 0, master->rxBuffSize);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	2100      	movs	r1, #0
 8011d90:	f014 fcd0 	bl	8026734 <memset>
			master->txBuffSize = 0;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
			master->rxBuffSize = 0;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
			MBS_ClearTXBuffer(serial);
 8011da4:	4b0b      	ldr	r3, [pc, #44]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	4618      	mov	r0, r3
 8011daa:	f000 fe9d 	bl	8012ae8 <MBS_ClearTXBuffer>
			MBS_ClearRXBuffer(serial);
 8011dae:	4b09      	ldr	r3, [pc, #36]	; (8011dd4 <MBRM_Execute+0x2ac>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 fea6 	bl	8012b04 <MBS_ClearRXBuffer>
			// TODO: to implement processing error later
			break;
 8011db8:	e008      	b.n	8011dcc <MBRM_Execute+0x2a4>
		default:
			break;
 8011dba:	bf00      	nop
 8011dbc:	e006      	b.n	8011dcc <MBRM_Execute+0x2a4>
				if((serial->protocol == MBS_PROTO_RTU_STD || serial->protocol == MBS_PROTO_RTU_CLUSTER) && (serial->isSending || serial->isReceiving)) return;		// if serial line is busy to send or receive with another request
 8011dbe:	bf00      	nop
 8011dc0:	e004      	b.n	8011dcc <MBRM_Execute+0x2a4>
				if(serial->isBusy) return;		// if serial line is busy with another request
 8011dc2:	bf00      	nop
 8011dc4:	e002      	b.n	8011dcc <MBRM_Execute+0x2a4>
			break;
 8011dc6:	bf00      	nop
 8011dc8:	e000      	b.n	8011dcc <MBRM_Execute+0x2a4>
			break;
 8011dca:	bf00      	nop
	}




}
 8011dcc:	3708      	adds	r7, #8
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	24001c4c 	.word	0x24001c4c
 8011dd8:	24005168 	.word	0x24005168

08011ddc <MBRM_StartReplyTimer>:


void MBRM_StartReplyTimer(MBRM_ReplyTimer *replyTimer){
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
	replyTimer->enableTimer = 1;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2201      	movs	r2, #1
 8011de8:	701a      	strb	r2, [r3, #0]
	replyTimer->timer = TS_GetUS(&timStamp);			// update the time
 8011dea:	4806      	ldr	r0, [pc, #24]	; (8011e04 <MBRM_StartReplyTimer+0x28>)
 8011dec:	f7f9 f8bc 	bl	800af68 <TS_GetUS>
 8011df0:	4602      	mov	r2, r0
 8011df2:	460b      	mov	r3, r1
 8011df4:	6879      	ldr	r1, [r7, #4]
 8011df6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8011dfa:	bf00      	nop
 8011dfc:	3708      	adds	r7, #8
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	24005168 	.word	0x24005168

08011e08 <MBRM_StopReplyTimer>:


void MBRM_StopReplyTimer(MBRM_ReplyTimer *replyTimer){
 8011e08:	b480      	push	{r7}
 8011e0a:	b083      	sub	sp, #12
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
	replyTimer->enableTimer = 0;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	701a      	strb	r2, [r3, #0]
}
 8011e16:	bf00      	nop
 8011e18:	370c      	adds	r7, #12
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr
	...

08011e24 <MBRM_RestReplyTimer>:


void MBRM_RestReplyTimer(MBRM_ReplyTimer *replyTimer){
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
	replyTimer->timer = TS_GetUS(&timStamp);			// update the time
 8011e2c:	4805      	ldr	r0, [pc, #20]	; (8011e44 <MBRM_RestReplyTimer+0x20>)
 8011e2e:	f7f9 f89b 	bl	800af68 <TS_GetUS>
 8011e32:	4602      	mov	r2, r0
 8011e34:	460b      	mov	r3, r1
 8011e36:	6879      	ldr	r1, [r7, #4]
 8011e38:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 8011e3c:	bf00      	nop
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	24005168 	.word	0x24005168

08011e48 <MBRM_IsReplyTimeout>:
  * @brief counts time in every ms, have to execute this function in ms or in faster
  *
  * @param none
  * @retval None
  */
uint8_t MBRM_IsReplyTimeout(MBRM_ReplyTimer *replyTimer){
 8011e48:	b5b0      	push	{r4, r5, r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]

	if(!replyTimer->enableTimer){ return 0;}
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d101      	bne.n	8011e5c <MBRM_IsReplyTimeout+0x14>
 8011e58:	2300      	movs	r3, #0
 8011e5a:	e024      	b.n	8011ea6 <MBRM_IsReplyTimeout+0x5e>
	if((uint64_t)fabsl((long double)(TS_GetUS(&timStamp) - replyTimer->timer)) >= (uint64_t)(replyTimer->timeout)){
 8011e5c:	4814      	ldr	r0, [pc, #80]	; (8011eb0 <MBRM_IsReplyTimeout+0x68>)
 8011e5e:	f7f9 f883 	bl	800af68 <TS_GetUS>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011e68:	1a84      	subs	r4, r0, r2
 8011e6a:	eb61 0503 	sbc.w	r5, r1, r3
 8011e6e:	4620      	mov	r0, r4
 8011e70:	4629      	mov	r1, r5
 8011e72:	f7ee fc2b 	bl	80006cc <__aeabi_ul2d>
 8011e76:	4602      	mov	r2, r0
 8011e78:	460b      	mov	r3, r1
 8011e7a:	4610      	mov	r0, r2
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	f7ee fc73 	bl	8000768 <__aeabi_d2ulz>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	691b      	ldr	r3, [r3, #16]
 8011e86:	461a      	mov	r2, r3
 8011e88:	f04f 0300 	mov.w	r3, #0
 8011e8c:	4299      	cmp	r1, r3
 8011e8e:	bf08      	it	eq
 8011e90:	4290      	cmpeq	r0, r2
 8011e92:	d304      	bcc.n	8011e9e <MBRM_IsReplyTimeout+0x56>
//			replyTimer->enableTimer = 0U;
		replyTimer->isTimeout = 1U;					// set the timeout flag
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2201      	movs	r2, #1
 8011e98:	751a      	strb	r2, [r3, #20]
//			replyTimer->timer = HAL_GetTick();			// update the time
		return 1;
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	e003      	b.n	8011ea6 <MBRM_IsReplyTimeout+0x5e>
	}else{
		replyTimer->isTimeout = 0U;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	751a      	strb	r2, [r3, #20]
	}

 return 0;
 8011ea4:	2300      	movs	r3, #0
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bdb0      	pop	{r4, r5, r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	24005168 	.word	0x24005168

08011eb4 <MBRM_IsUnexpectedSlave>:
  * @brief if the receviced packet from unexpected slave, returns 1 else 0
  *
  * @param none
  * @retval 1 = unexpected slave, 0 = target slave
  */
uint8_t MBRM_IsUnexpectedSlave(void){
 8011eb4:	b480      	push	{r7}
 8011eb6:	af00      	add	r7, sp, #0
	return (serial->txBuff[MB_SA_INDEX] != serial->rxBuff[MB_SA_INDEX]);
 8011eb8:	4b08      	ldr	r3, [pc, #32]	; (8011edc <MBRM_IsUnexpectedSlave+0x28>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 8011ec0:	4b06      	ldr	r3, [pc, #24]	; (8011edc <MBRM_IsUnexpectedSlave+0x28>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	bf14      	ite	ne
 8011ecc:	2301      	movne	r3, #1
 8011ece:	2300      	moveq	r3, #0
 8011ed0:	b2db      	uxtb	r3, r3
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr
 8011edc:	24001c4c 	.word	0x24001c4c

08011ee0 <MBRM_GetSlaveAddress>:


uint8_t MBRM_GetSlaveAddress(void){
 8011ee0:	b480      	push	{r7}
 8011ee2:	af00      	add	r7, sp, #0
	return serial->txBuff[MB_SA_INDEX];
 8011ee4:	4b04      	ldr	r3, [pc, #16]	; (8011ef8 <MBRM_GetSlaveAddress+0x18>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	24001c4c 	.word	0x24001c4c

08011efc <MBRM_GetFunCode>:


uint8_t MBRM_GetFunCode(void){
 8011efc:	b480      	push	{r7}
 8011efe:	af00      	add	r7, sp, #0
	return serial->txBuff[MB_FC_INDEX];
 8011f00:	4b04      	ldr	r3, [pc, #16]	; (8011f14 <MBRM_GetFunCode+0x18>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	24001c4c 	.word	0x24001c4c

08011f18 <MBRS_Init>:
#include "MB_Custom.h"
#include "MB_Serial.h"

\
static MB_RTUSlave *slv;
void MBRS_Init(MB_RTUSlave *mbSlave){
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
	slv = mbSlave;
 8011f20:	4a04      	ldr	r2, [pc, #16]	; (8011f34 <MBRS_Init+0x1c>)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6013      	str	r3, [r2, #0]
}
 8011f26:	bf00      	nop
 8011f28:	370c      	adds	r7, #12
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f30:	4770      	bx	lr
 8011f32:	bf00      	nop
 8011f34:	24001c54 	.word	0x24001c54

08011f38 <MBRS_GetInstance>:

MB_RTUSlave *MBRS_GetInstance(void){
 8011f38:	b480      	push	{r7}
 8011f3a:	af00      	add	r7, sp, #0
	return slv;
 8011f3c:	4b03      	ldr	r3, [pc, #12]	; (8011f4c <MBRS_GetInstance+0x14>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	46bd      	mov	sp, r7
 8011f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop
 8011f4c:	24001c54 	.word	0x24001c54

08011f50 <MBRS_GetSlaveAddress>:
void MBRS_SetInstance(MB_RTUSlave *mbSlave){
	slv = mbSlave;
}

uint8_t MBRS_GetSlaveAddress(void){
 8011f50:	b480      	push	{r7}
 8011f52:	af00      	add	r7, sp, #0
	return slv->slave_address;
 8011f54:	4b03      	ldr	r3, [pc, #12]	; (8011f64 <MBRS_GetSlaveAddress+0x14>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	781b      	ldrb	r3, [r3, #0]
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	24001c54 	.word	0x24001c54

08011f68 <MBRS_processRequest>:
  *
  * @param none
  *
  * @retval 0 & 1, if returns 0 do nothing, else send the response to the master
  */
uint8_t MBRS_processRequest(MB_RTUSlave *mbSlave){
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
		 * all active communication controls are turned off
		 * and  any MODBUS messages addressed to it or broadcast are monitored,
		 * but no actions will be taken and no responses will be sent
		 * */

	MB_setReqBuff(mbSlave->rxBuffer, mbSlave->rxBufferSize);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	685a      	ldr	r2, [r3, #4]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	7b1b      	ldrb	r3, [r3, #12]
 8011f78:	4619      	mov	r1, r3
 8011f7a:	4610      	mov	r0, r2
 8011f7c:	f7fd ff8e 	bl	800fe9c <MB_setReqBuff>
	MB_setRespBuff(mbSlave->txBuffer);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	689b      	ldr	r3, [r3, #8]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7fd ff9d 	bl	800fec4 <MB_setRespBuff>
	uint8_t processStatus = 0u;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	73fb      	strb	r3, [r7, #15]
	uint8_t funCode = MB_getFunctionCode();
 8011f8e:	f7fe fbd7 	bl	8010740 <MB_getFunctionCode>
 8011f92:	4603      	mov	r3, r0
 8011f94:	73bb      	strb	r3, [r7, #14]

	if((MB_GetListenOnlyMode() == 0U) || (funCode == MB_FC_DIAG_08 && MB_getDiagSFC() == MB_DSFC_RCO_1)){	// check if the device is not in listen only mode
 8011f96:	f7ff fc45 	bl	8011824 <MB_GetListenOnlyMode>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d009      	beq.n	8011fb4 <MBRS_processRequest+0x4c>
 8011fa0:	7bbb      	ldrb	r3, [r7, #14]
 8011fa2:	2b08      	cmp	r3, #8
 8011fa4:	f040 8098 	bne.w	80120d8 <MBRS_processRequest+0x170>
 8011fa8:	f7fd fdbc 	bl	800fb24 <MB_getDiagSFC>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	f040 8092 	bne.w	80120d8 <MBRS_processRequest+0x170>
		if( funCode != MB_FC_GCEC_11){										// the busy status will 1U except comm. even counter
 8011fb4:	7bbb      	ldrb	r3, [r7, #14]
 8011fb6:	2b0b      	cmp	r3, #11
 8011fb8:	d001      	beq.n	8011fbe <MBRS_processRequest+0x56>

			MB_SetBusyStatus();
 8011fba:	f7ff fc17 	bl	80117ec <MB_SetBusyStatus>
		}
		MB_CountSlaveMsg();													// counts the quantity of messages addressed to the slave, or broadcast, that the remote device has processed since its last restart
 8011fbe:	f7ff fbe9 	bl	8011794 <MB_CountSlaveMsg>
		// check function code

		if( MB_isFunctionCodeValid(funCode)>0U || MB_CUST_CheckCFunCode(funCode)>0){									// if the function code is valid
 8011fc2:	7bbb      	ldrb	r3, [r7, #14]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7fe f970 	bl	80102aa <MB_isFunctionCodeValid>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d106      	bne.n	8011fde <MBRS_processRequest+0x76>
 8011fd0:	7bbb      	ldrb	r3, [r7, #14]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fd f918 	bl	800f208 <MB_CUST_CheckCFunCode>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d006      	beq.n	8011fec <MBRS_processRequest+0x84>
//			DEBUG_SPRINT("\r\n3.exReq ");
//			DEBUG_SPRINT_NL("MS_3");
//			DEBUG_SPRINT("\nrsp_1:%d", mbSlave->custom.respondingSlave);
//			DEBUG_SPRINT("\nr:%d",mbSlave->custom.respondingSlave);
			processStatus = MB_executeRequest(funCode);						//  MB_executeRequest() will return 0x04 and 0xFF, 0x04 = exception occured and 0xFF = no exception
 8011fde:	7bbb      	ldrb	r3, [r7, #14]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7fd ff8b 	bl	800fefc <MB_executeRequest>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	73fb      	strb	r3, [r7, #15]
 8011fea:	e001      	b.n	8011ff0 <MBRS_processRequest+0x88>
//			DEBUG_SPRINT("\r\nx.exReq:%d ",processStatus);
		}else{
			processStatus = MB_EC_ILF_1;									// exception code 1 for illegal function code
 8011fec:	2301      	movs	r3, #1
 8011fee:	73fb      	strb	r3, [r7, #15]
		}
		if (processStatus != 0u){
 8011ff0:	7bfb      	ldrb	r3, [r7, #15]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d070      	beq.n	80120d8 <MBRS_processRequest+0x170>
			if(processStatus != MB_RS_255 && processStatus != MB_NRS_254){	// for exception response
 8011ff6:	7bfb      	ldrb	r3, [r7, #15]
 8011ff8:	2bff      	cmp	r3, #255	; 0xff
 8011ffa:	d028      	beq.n	801204e <MBRS_processRequest+0xe6>
 8011ffc:	7bfb      	ldrb	r3, [r7, #15]
 8011ffe:	2bfe      	cmp	r3, #254	; 0xfe
 8012000:	d025      	beq.n	801204e <MBRS_processRequest+0xe6>
				MB_CountBusExpErr();										// counts the quantity of MODBUS exception responses returned by the slave since its last restart
 8012002:	f7ff fbb7 	bl	8011774 <MB_CountBusExpErr>
				if(MB_CUST_CheckCFunCode(funCode)>0){						// build error packet for custom function
 8012006:	7bbb      	ldrb	r3, [r7, #14]
 8012008:	4618      	mov	r0, r3
 801200a:	f7fd f8fd 	bl	800f208 <MB_CUST_CheckCFunCode>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d017      	beq.n	8012044 <MBRS_processRequest+0xdc>
					MB_appendToRespPDU(MB_getSlaveAddress());				// appends the slave address to the response PDU
 8012014:	f7fe fb88 	bl	8010728 <MB_getSlaveAddress>
 8012018:	4603      	mov	r3, r0
 801201a:	4618      	mov	r0, r3
 801201c:	f7fe f8c0 	bl	80101a0 <MB_appendToRespPDU>
					MB_appendToRespPDU(MB_EFC_OFFSET + MB_getFunctionCode());// appends the exception function code
 8012020:	f7fe fb8e 	bl	8010740 <MB_getFunctionCode>
 8012024:	4603      	mov	r3, r0
 8012026:	3b80      	subs	r3, #128	; 0x80
 8012028:	b2db      	uxtb	r3, r3
 801202a:	4618      	mov	r0, r3
 801202c:	f7fe f8b8 	bl	80101a0 <MB_appendToRespPDU>
					MB_appendToRespPDU(mbSlave->slave_address);		// target slave address
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	4618      	mov	r0, r3
 8012036:	f7fe f8b3 	bl	80101a0 <MB_appendToRespPDU>
					MB_appendToRespPDU(processStatus);						// appends exception code
 801203a:	7bfb      	ldrb	r3, [r7, #15]
 801203c:	4618      	mov	r0, r3
 801203e:	f7fe f8af 	bl	80101a0 <MB_appendToRespPDU>
				if(MB_CUST_CheckCFunCode(funCode)>0){						// build error packet for custom function
 8012042:	e00e      	b.n	8012062 <MBRS_processRequest+0xfa>

				}else{														// error packet for regular function code
					MB_excepRespBuilder(processStatus);						// processStatus = 255 means, no exception and the response has been built
 8012044:	7bfb      	ldrb	r3, [r7, #15]
 8012046:	4618      	mov	r0, r3
 8012048:	f7fe f914 	bl	8010274 <MB_excepRespBuilder>
				if(MB_CUST_CheckCFunCode(funCode)>0){						// build error packet for custom function
 801204c:	e009      	b.n	8012062 <MBRS_processRequest+0xfa>
				}
			}else{															// for normal response
				if(funCode!= MB_FC_GCEC_11){
 801204e:	7bbb      	ldrb	r3, [r7, #14]
 8012050:	2b0b      	cmp	r3, #11
 8012052:	d001      	beq.n	8012058 <MBRS_processRequest+0xf0>
					MB_CountCommEvent();									// Increment communication event counter, nut will not increment for  exception responses, poll commands, or fetch event counter commands
 8012054:	f7ff fbae 	bl	80117b4 <MB_CountCommEvent>
				}
				if(processStatus == MB_NRS_254){
 8012058:	7bfb      	ldrb	r3, [r7, #15]
 801205a:	2bfe      	cmp	r3, #254	; 0xfe
 801205c:	d101      	bne.n	8012062 <MBRS_processRequest+0xfa>
//					MB_CUST_StopTimer(&mbSlave->custom.waitingTimer);
					return 0U;
 801205e:	2300      	movs	r3, #0
 8012060:	e03b      	b.n	80120da <MBRS_processRequest+0x172>
				}
			}
			// return 1 to send the response, if it is either normal or exception response
			if((MB_GetListenOnlyMode() == 0U) && (mbSlave->rxBuffer[MB_SA_INDEX] != MB_BROADCAST_ADDR)){
 8012062:	f7ff fbdf 	bl	8011824 <MB_GetListenOnlyMode>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d11a      	bne.n	80120a2 <MBRS_processRequest+0x13a>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d015      	beq.n	80120a2 <MBRS_processRequest+0x13a>
				MB_appendToRespPDU_CRC();
 8012076:	f7fe f8bf 	bl	80101f8 <MB_appendToRespPDU_CRC>
				mbSlave->txBufferSize = MB_getRespBuffSize();
 801207a:	f7fd ff33 	bl	800fee4 <MB_getRespBuffSize>
 801207e:	4603      	mov	r3, r0
 8012080:	461a      	mov	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	735a      	strb	r2, [r3, #13]
				if(funCode == MB_FC_WSC_05 || funCode == MB_FC_WSR_06) {mbSlave->txBufferSize -= 2;}
 8012086:	7bbb      	ldrb	r3, [r7, #14]
 8012088:	2b05      	cmp	r3, #5
 801208a:	d002      	beq.n	8012092 <MBRS_processRequest+0x12a>
 801208c:	7bbb      	ldrb	r3, [r7, #14]
 801208e:	2b06      	cmp	r3, #6
 8012090:	d105      	bne.n	801209e <MBRS_processRequest+0x136>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	7b5b      	ldrb	r3, [r3, #13]
 8012096:	3b02      	subs	r3, #2
 8012098:	b2da      	uxtb	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	735a      	strb	r2, [r3, #13]
				return 1U;
 801209e:	2301      	movs	r3, #1
 80120a0:	e01b      	b.n	80120da <MBRS_processRequest+0x172>
			}

			// for custom function code
			if(MB_CUST_CheckCFunCode(funCode) && (mbSlave->txBuffer[MB_SA_INDEX] == MB_BROADCAST_ADDR)){
 80120a2:	7bbb      	ldrb	r3, [r7, #14]
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fd f8af 	bl	800f208 <MB_CUST_CheckCFunCode>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d013      	beq.n	80120d8 <MBRS_processRequest+0x170>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	781b      	ldrb	r3, [r3, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d10e      	bne.n	80120d8 <MBRS_processRequest+0x170>
//				//TODO: To remove
//				for(uint32_t i = 3; i <  13; i++){
//					mbSlave->txBuffer[i] = 0;
//				}
//				//--------------------
				MB_appendToRespPDU_CRC();
 80120ba:	f7fe f89d 	bl	80101f8 <MB_appendToRespPDU_CRC>

				mbSlave->txBufferSize = MB_getRespBuffSize();
 80120be:	f7fd ff11 	bl	800fee4 <MB_getRespBuffSize>
 80120c2:	4603      	mov	r3, r0
 80120c4:	461a      	mov	r2, r3
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	735a      	strb	r2, [r3, #13]

				if(mbSlave->custom.isReadyToSend>0){ return 1U;	}
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d001      	beq.n	80120d8 <MBRS_processRequest+0x170>
 80120d4:	2301      	movs	r3, #1
 80120d6:	e000      	b.n	80120da <MBRS_processRequest+0x172>
			}
		}
	}
	return 0U;
 80120d8:	2300      	movs	r3, #0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <MBRS_PostProcess>:
/**
  * @brief To process some task after sending the response
  * @param none
  * @retval none
  */
void MBRS_PostProcess(MB_RTUSlave *mbSlave, uint8_t error){
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b082      	sub	sp, #8
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
 80120ea:	460b      	mov	r3, r1
 80120ec:	70fb      	strb	r3, [r7, #3]
	if(MB_GetRestartFlag()){	// restart the device
 80120ee:	f7ff fba5 	bl	801183c <MB_GetRestartFlag>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d001      	beq.n	80120fc <MBRS_PostProcess+0x1a>
		MB_CallbackRCO();
 80120f8:	f7ff f968 	bl	80113cc <MB_CallbackRCO>
	}
	MB_ClearBusyStatus();
 80120fc:	f7ff fb84 	bl	8011808 <MB_ClearBusyStatus>
}
 8012100:	bf00      	nop
 8012102:	3708      	adds	r7, #8
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <MB_REG_SetDI>:
  * @param value: value to be set to the register
  * @retval return value of the register
  */


uint8_t MB_REG_SetDI(uint32_t address,  uint16_t value){
 8012108:	b580      	push	{r7, lr}
 801210a:	b086      	sub	sp, #24
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	460b      	mov	r3, r1
 8012112:	807b      	strh	r3, [r7, #2]
	if(address < MB_DI_ADDR_OFFSET){return MB_ERROR;}
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f242 7210 	movw	r2, #10000	; 0x2710
 801211a:	4293      	cmp	r3, r2
 801211c:	d801      	bhi.n	8012122 <MB_REG_SetDI+0x1a>
 801211e:	2300      	movs	r3, #0
 8012120:	e04d      	b.n	80121be <MB_REG_SetDI+0xb6>
	uint8_t mask = 0x01;
 8012122:	2301      	movs	r3, #1
 8012124:	75fb      	strb	r3, [r7, #23]
	address = address - MB_DI_ADDR_OFFSET;
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	4b27      	ldr	r3, [pc, #156]	; (80121c8 <MB_REG_SetDI+0xc0>)
 801212a:	4413      	add	r3, r2
 801212c:	607b      	str	r3, [r7, #4]
    if (address < MB_REG_DI_DATA_MAX) {
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f242 7218 	movw	r2, #10008	; 0x2718
 8012134:	4293      	cmp	r3, r2
 8012136:	d841      	bhi.n	80121bc <MB_REG_SetDI+0xb4>
        int byteIndex = (address) / 8;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	08db      	lsrs	r3, r3, #3
 801213c:	613b      	str	r3, [r7, #16]
        int bitIndex = (address) % 8;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f003 0307 	and.w	r3, r3, #7
 8012144:	60fb      	str	r3, [r7, #12]
        if (value > 0) {
 8012146:	887b      	ldrh	r3, [r7, #2]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d012      	beq.n	8012172 <MB_REG_SetDI+0x6a>
            REG.DI[byteIndex] |= (mask << bitIndex);
 801214c:	4a1f      	ldr	r2, [pc, #124]	; (80121cc <MB_REG_SetDI+0xc4>)
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	4413      	add	r3, r2
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	b25a      	sxtb	r2, r3
 8012156:	7df9      	ldrb	r1, [r7, #23]
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	fa01 f303 	lsl.w	r3, r1, r3
 801215e:	b25b      	sxtb	r3, r3
 8012160:	4313      	orrs	r3, r2
 8012162:	b25b      	sxtb	r3, r3
 8012164:	b2d9      	uxtb	r1, r3
 8012166:	4a19      	ldr	r2, [pc, #100]	; (80121cc <MB_REG_SetDI+0xc4>)
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	4413      	add	r3, r2
 801216c:	460a      	mov	r2, r1
 801216e:	701a      	strb	r2, [r3, #0]
 8012170:	e013      	b.n	801219a <MB_REG_SetDI+0x92>
        } else {
        	REG.DI[byteIndex] &= ~(mask << bitIndex);
 8012172:	4a16      	ldr	r2, [pc, #88]	; (80121cc <MB_REG_SetDI+0xc4>)
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	4413      	add	r3, r2
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	b25a      	sxtb	r2, r3
 801217c:	7df9      	ldrb	r1, [r7, #23]
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	fa01 f303 	lsl.w	r3, r1, r3
 8012184:	b25b      	sxtb	r3, r3
 8012186:	43db      	mvns	r3, r3
 8012188:	b25b      	sxtb	r3, r3
 801218a:	4013      	ands	r3, r2
 801218c:	b25b      	sxtb	r3, r3
 801218e:	b2d9      	uxtb	r1, r3
 8012190:	4a0e      	ldr	r2, [pc, #56]	; (80121cc <MB_REG_SetDI+0xc4>)
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	4413      	add	r3, r2
 8012196:	460a      	mov	r2, r1
 8012198:	701a      	strb	r2, [r3, #0]
        }
        MB_REG_ChangeDICallback((address+MB_DI_ADDR_OFFSET), (value>0));
 801219a:	4b0d      	ldr	r3, [pc, #52]	; (80121d0 <MB_REG_SetDI+0xc8>)
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	6879      	ldr	r1, [r7, #4]
 80121a0:	f242 7311 	movw	r3, #10001	; 0x2711
 80121a4:	440b      	add	r3, r1
 80121a6:	8879      	ldrh	r1, [r7, #2]
 80121a8:	2900      	cmp	r1, #0
 80121aa:	bf14      	ite	ne
 80121ac:	2101      	movne	r1, #1
 80121ae:	2100      	moveq	r1, #0
 80121b0:	b2c9      	uxtb	r1, r1
 80121b2:	b289      	uxth	r1, r1
 80121b4:	4618      	mov	r0, r3
 80121b6:	4790      	blx	r2
        return MB_OK;
 80121b8:	2301      	movs	r3, #1
 80121ba:	e000      	b.n	80121be <MB_REG_SetDI+0xb6>
    }
    return MB_ERROR;
 80121bc:	2300      	movs	r3, #0
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3718      	adds	r7, #24
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	ffffd8ef 	.word	0xffffd8ef
 80121cc:	24001c58 	.word	0x24001c58
 80121d0:	24005fbc 	.word	0x24005fbc

080121d4 <MBS_Init>:
  * where, 	Timer_1P5_CHAR timer pinter point 1.5 char timer,
  * 		Timer_3P5_CHAR timer pinter point 3.5 char timer,
  * @retval None
  *
  */
void MBS_Init(MBS_Serial *serial, UART_HandleTypeDef *UART, TIM_HandleTypeDef *timer_1, TIM_HandleTypeDef *timer_2, GPIO_TypeDef *RS485_DIR_PORT, uint16_t RS485_DIR_PIN ){
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
	serl = serial;
 80121e2:	4a36      	ldr	r2, [pc, #216]	; (80122bc <MBS_Init+0xe8>)
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	6013      	str	r3, [r2, #0]
	Uart = UART;
 80121e8:	4a35      	ldr	r2, [pc, #212]	; (80122c0 <MBS_Init+0xec>)
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	6013      	str	r3, [r2, #0]
	Timer_1P5_CHAR = timer_1;
 80121ee:	4a35      	ldr	r2, [pc, #212]	; (80122c4 <MBS_Init+0xf0>)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6013      	str	r3, [r2, #0]
	Timer_3P5_CHAR = timer_2;
 80121f4:	4a34      	ldr	r2, [pc, #208]	; (80122c8 <MBS_Init+0xf4>)
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	6013      	str	r3, [r2, #0]

	if(serial->protocol != MBS_PROTO_RTU_CLUSTER_DMA){
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	785b      	ldrb	r3, [r3, #1]
 80121fe:	2b02      	cmp	r3, #2
 8012200:	d009      	beq.n	8012216 <MBS_Init+0x42>
		__HAL_UART_ENABLE_IT(Uart, UART_IT_RXNE);		// enable uart receive interrupt
 8012202:	4b2f      	ldr	r3, [pc, #188]	; (80122c0 <MBS_Init+0xec>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	4b2d      	ldr	r3, [pc, #180]	; (80122c0 <MBS_Init+0xec>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f042 0220 	orr.w	r2, r2, #32
 8012214:	601a      	str	r2, [r3, #0]
	}
	MBS_Timer_Init(Timer_1P5_CHAR->Instance);					// initialize 1.5 char timer
 8012216:	4b2b      	ldr	r3, [pc, #172]	; (80122c4 <MBS_Init+0xf0>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	4618      	mov	r0, r3
 801221e:	f000 f859 	bl	80122d4 <MBS_Timer_Init>
	MBS_Timer_Init(Timer_3P5_CHAR->Instance);					// initialize 3.5 char timer
 8012222:	4b29      	ldr	r3, [pc, #164]	; (80122c8 <MBS_Init+0xf4>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	4618      	mov	r0, r3
 801222a:	f000 f853 	bl	80122d4 <MBS_Timer_Init>
	serial->frameOkFlag = 0U;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2200      	movs	r2, #0
 8012232:	761a      	strb	r2, [r3, #24]

	rs485_dir_port = RS485_DIR_PORT;
 8012234:	4a25      	ldr	r2, [pc, #148]	; (80122cc <MBS_Init+0xf8>)
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	6013      	str	r3, [r2, #0]
	rs485_dir_pin = RS485_DIR_PIN;
 801223a:	4a25      	ldr	r2, [pc, #148]	; (80122d0 <MBS_Init+0xfc>)
 801223c:	8bbb      	ldrh	r3, [r7, #28]
 801223e:	8013      	strh	r3, [r2, #0]
	MBS_STOP_TIMER(Timer_1P5_CHAR);		//start 1.5 char timer
 8012240:	4b20      	ldr	r3, [pc, #128]	; (80122c4 <MBS_Init+0xf0>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2200      	movs	r2, #0
 8012248:	625a      	str	r2, [r3, #36]	; 0x24
 801224a:	4b1e      	ldr	r3, [pc, #120]	; (80122c4 <MBS_Init+0xf0>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	4b1c      	ldr	r3, [pc, #112]	; (80122c4 <MBS_Init+0xf0>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f022 0201 	bic.w	r2, r2, #1
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	4b19      	ldr	r3, [pc, #100]	; (80122c4 <MBS_Init+0xf0>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	691a      	ldr	r2, [r3, #16]
 8012266:	4b17      	ldr	r3, [pc, #92]	; (80122c4 <MBS_Init+0xf0>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f022 0201 	bic.w	r2, r2, #1
 8012270:	611a      	str	r2, [r3, #16]
	MBS_STOP_TIMER(Timer_3P5_CHAR);		//start 3.5 char timer
 8012272:	4b15      	ldr	r3, [pc, #84]	; (80122c8 <MBS_Init+0xf4>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2200      	movs	r2, #0
 801227a:	625a      	str	r2, [r3, #36]	; 0x24
 801227c:	4b12      	ldr	r3, [pc, #72]	; (80122c8 <MBS_Init+0xf4>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	681a      	ldr	r2, [r3, #0]
 8012284:	4b10      	ldr	r3, [pc, #64]	; (80122c8 <MBS_Init+0xf4>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f022 0201 	bic.w	r2, r2, #1
 801228e:	601a      	str	r2, [r3, #0]
 8012290:	4b0d      	ldr	r3, [pc, #52]	; (80122c8 <MBS_Init+0xf4>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	691a      	ldr	r2, [r3, #16]
 8012298:	4b0b      	ldr	r3, [pc, #44]	; (80122c8 <MBS_Init+0xf4>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	f022 0201 	bic.w	r2, r2, #1
 80122a2:	611a      	str	r2, [r3, #16]

	/*Set the serial receiving mode always*/
	HAL_GPIO_WritePin(rs485_dir_port, rs485_dir_pin,  GPIO_PIN_RESET);//(serial->mode == MBS_MODE_MASTER ? GPIO_PIN_SET : GPIO_PIN_RESET));			// RS485 data direction pin, set low to  enable receiving and set high to enable transmitting
 80122a4:	4b09      	ldr	r3, [pc, #36]	; (80122cc <MBS_Init+0xf8>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4a09      	ldr	r2, [pc, #36]	; (80122d0 <MBS_Init+0xfc>)
 80122aa:	8811      	ldrh	r1, [r2, #0]
 80122ac:	2200      	movs	r2, #0
 80122ae:	4618      	mov	r0, r3
 80122b0:	f009 fd30 	bl	801bd14 <HAL_GPIO_WritePin>

}
 80122b4:	bf00      	nop
 80122b6:	3710      	adds	r7, #16
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	2400203c 	.word	0x2400203c
 80122c0:	24005fc8 	.word	0x24005fc8
 80122c4:	24005fd0 	.word	0x24005fd0
 80122c8:	24005fc4 	.word	0x24005fc4
 80122cc:	24005fcc 	.word	0x24005fcc
 80122d0:	24005fdc 	.word	0x24005fdc

080122d4 <MBS_Timer_Init>:
/**
  * @brief Initialize timer
  * @param none
  * @retval None
  */
static void MBS_Timer_Init(TIM_TypeDef *Timer_Inst){
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
	Timer_Inst->CR1 &= ~TIM_CR1_CEN;		// Initially disable timer4 counter
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f023 0201 	bic.w	r2, r3, #1
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	601a      	str	r2, [r3, #0]
	Timer_Inst->EGR |= TIM_EGR_UG;			// Re-initialize the counter and generates an update of the registers.
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	695b      	ldr	r3, [r3, #20]
 80122ec:	f043 0201 	orr.w	r2, r3, #1
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	615a      	str	r2, [r3, #20]
	Timer_Inst->DIER |= TIM_DIER_UIE;		// enable Update interrupt
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	68db      	ldr	r3, [r3, #12]
 80122f8:	f043 0201 	orr.w	r2, r3, #1
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	60da      	str	r2, [r3, #12]
}
 8012300:	bf00      	nop
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr

0801230c <MBS_GetInstance>:
/**
  * @brief gets the modbus serial instance
  * @param none
  * @retval None
  */
MBS_Serial *MBS_GetInstance(void){
 801230c:	b480      	push	{r7}
 801230e:	af00      	add	r7, sp, #0
	return serl;
 8012310:	4b03      	ldr	r3, [pc, #12]	; (8012320 <MBS_GetInstance+0x14>)
 8012312:	681b      	ldr	r3, [r3, #0]
}
 8012314:	4618      	mov	r0, r3
 8012316:	46bd      	mov	sp, r7
 8012318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	2400203c 	.word	0x2400203c

08012324 <MBS_Config>:
/**
  * @brief configures the modbus serial port
  * @param serialPort: modbus serial port struct
  * @retval error status
  */
MB_ErrorStatus MBS_Config(MBS_Serial *serial){
 8012324:	b590      	push	{r4, r7, lr}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
	MB_ErrorStatus errorStatus = MB_OK;
 801232c:	2301      	movs	r3, #1
 801232e:	73fb      	strb	r3, [r7, #15]

	/*---------stop the uart interrupt, and the 3.5 & 1.5 char time------------*/
	__HAL_UART_DISABLE_IT(Uart, UART_IT_RXNE);		// enable uart receive interrupt
 8012330:	4b80      	ldr	r3, [pc, #512]	; (8012534 <MBS_Config+0x210>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	681a      	ldr	r2, [r3, #0]
 8012338:	4b7e      	ldr	r3, [pc, #504]	; (8012534 <MBS_Config+0x210>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	f022 0220 	bic.w	r2, r2, #32
 8012342:	601a      	str	r2, [r3, #0]
	MBS_STOP_TIMER(Timer_1P5_CHAR); 					//stop 1.5 char timer
 8012344:	4b7c      	ldr	r3, [pc, #496]	; (8012538 <MBS_Config+0x214>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2200      	movs	r2, #0
 801234c:	625a      	str	r2, [r3, #36]	; 0x24
 801234e:	4b7a      	ldr	r3, [pc, #488]	; (8012538 <MBS_Config+0x214>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	681a      	ldr	r2, [r3, #0]
 8012356:	4b78      	ldr	r3, [pc, #480]	; (8012538 <MBS_Config+0x214>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	f022 0201 	bic.w	r2, r2, #1
 8012360:	601a      	str	r2, [r3, #0]
 8012362:	4b75      	ldr	r3, [pc, #468]	; (8012538 <MBS_Config+0x214>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	691a      	ldr	r2, [r3, #16]
 801236a:	4b73      	ldr	r3, [pc, #460]	; (8012538 <MBS_Config+0x214>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f022 0201 	bic.w	r2, r2, #1
 8012374:	611a      	str	r2, [r3, #16]
	MBS_STOP_TIMER(Timer_3P5_CHAR); 					//stop 3.5 char timer
 8012376:	4b71      	ldr	r3, [pc, #452]	; (801253c <MBS_Config+0x218>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2200      	movs	r2, #0
 801237e:	625a      	str	r2, [r3, #36]	; 0x24
 8012380:	4b6e      	ldr	r3, [pc, #440]	; (801253c <MBS_Config+0x218>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	4b6c      	ldr	r3, [pc, #432]	; (801253c <MBS_Config+0x218>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f022 0201 	bic.w	r2, r2, #1
 8012392:	601a      	str	r2, [r3, #0]
 8012394:	4b69      	ldr	r3, [pc, #420]	; (801253c <MBS_Config+0x218>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	691a      	ldr	r2, [r3, #16]
 801239c:	4b67      	ldr	r3, [pc, #412]	; (801253c <MBS_Config+0x218>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f022 0201 	bic.w	r2, r2, #1
 80123a6:	611a      	str	r2, [r3, #16]

	MBS_DecodeConfigValue(serial);
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f000 f8cb 	bl	8012544 <MBS_DecodeConfigValue>
	// sets the baudrate for modbus serial
	if((serial->baudRateIndex >= MBS_BR_MIN_INDEX && serial->baudRateIndex < MBS_BR_MAX_INDEX) ){
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	7a1b      	ldrb	r3, [r3, #8]
 80123b2:	2b0f      	cmp	r3, #15
 80123b4:	d80d      	bhi.n	80123d2 <MBS_Config+0xae>
		Uart->Init.BaudRate = MBS_BaudRate[(serial->baudRateIndex)];
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	7a1b      	ldrb	r3, [r3, #8]
 80123ba:	4619      	mov	r1, r3
 80123bc:	4b5d      	ldr	r3, [pc, #372]	; (8012534 <MBS_Config+0x210>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a5f      	ldr	r2, [pc, #380]	; (8012540 <MBS_Config+0x21c>)
 80123c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80123c6:	605a      	str	r2, [r3, #4]
		goto MBS_SERIAL_CONFIG_END;
	}

	/*---------configure the uart------------*/
	// sets the data bits for modbus serial
	switch (serial->dataBits) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	7c1b      	ldrb	r3, [r3, #16]
 80123cc:	2b07      	cmp	r3, #7
 80123ce:	d006      	beq.n	80123de <MBS_Config+0xba>
 80123d0:	e002      	b.n	80123d8 <MBS_Config+0xb4>
		errorStatus = MB_ERROR;
 80123d2:	2300      	movs	r3, #0
 80123d4:	73fb      	strb	r3, [r7, #15]
		goto MBS_SERIAL_CONFIG_END;
 80123d6:	e09e      	b.n	8012516 <MBS_Config+0x1f2>
	switch (serial->dataBits) {
 80123d8:	2b08      	cmp	r3, #8
 80123da:	d005      	beq.n	80123e8 <MBS_Config+0xc4>
 80123dc:	e00a      	b.n	80123f4 <MBS_Config+0xd0>
		case MBS_DB_7:
			Uart->Init.WordLength = UART_WORDLENGTH_8B;		// wordlength 8 bits = 7 data bits  + 1 parity bits
 80123de:	4b55      	ldr	r3, [pc, #340]	; (8012534 <MBS_Config+0x210>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	2200      	movs	r2, #0
 80123e4:	609a      	str	r2, [r3, #8]
			break;
 80123e6:	e008      	b.n	80123fa <MBS_Config+0xd6>
		case MBS_DB_8:
			Uart->Init.WordLength = UART_WORDLENGTH_9B;		// wordlength 9 bits = 8 data bits + 1 parity bits
 80123e8:	4b52      	ldr	r3, [pc, #328]	; (8012534 <MBS_Config+0x210>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80123f0:	609a      	str	r2, [r3, #8]
			break;
 80123f2:	e002      	b.n	80123fa <MBS_Config+0xd6>
		default:
			errorStatus = MB_ERROR;
 80123f4:	2300      	movs	r3, #0
 80123f6:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 80123f8:	e08d      	b.n	8012516 <MBS_Config+0x1f2>

	}


	// sets the parity bit
	switch (serial->parityBit) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	7c5b      	ldrb	r3, [r3, #17]
 80123fe:	2b02      	cmp	r3, #2
 8012400:	d011      	beq.n	8012426 <MBS_Config+0x102>
 8012402:	2b02      	cmp	r3, #2
 8012404:	dc15      	bgt.n	8012432 <MBS_Config+0x10e>
 8012406:	2b00      	cmp	r3, #0
 8012408:	d002      	beq.n	8012410 <MBS_Config+0xec>
 801240a:	2b01      	cmp	r3, #1
 801240c:	d005      	beq.n	801241a <MBS_Config+0xf6>
 801240e:	e010      	b.n	8012432 <MBS_Config+0x10e>
		case MBS_PB_NONE:
			Uart->Init.Parity = UART_PARITY_NONE;
 8012410:	4b48      	ldr	r3, [pc, #288]	; (8012534 <MBS_Config+0x210>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	2200      	movs	r2, #0
 8012416:	611a      	str	r2, [r3, #16]
			break;
 8012418:	e00e      	b.n	8012438 <MBS_Config+0x114>
		case MBS_PB_ODD:
			Uart->Init.Parity = UART_PARITY_ODD;
 801241a:	4b46      	ldr	r3, [pc, #280]	; (8012534 <MBS_Config+0x210>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8012422:	611a      	str	r2, [r3, #16]
			break;
 8012424:	e008      	b.n	8012438 <MBS_Config+0x114>
		case MBS_PB_EVEN:
			Uart->Init.Parity = UART_PARITY_EVEN;
 8012426:	4b43      	ldr	r3, [pc, #268]	; (8012534 <MBS_Config+0x210>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801242e:	611a      	str	r2, [r3, #16]
			break;
 8012430:	e002      	b.n	8012438 <MBS_Config+0x114>
		default:
			errorStatus = MB_ERROR;
 8012432:	2300      	movs	r3, #0
 8012434:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 8012436:	e06e      	b.n	8012516 <MBS_Config+0x1f2>
			break;
	}

	// sets the stop bit
	switch (serial->stopBit) {
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	7c9b      	ldrb	r3, [r3, #18]
 801243c:	2b01      	cmp	r3, #1
 801243e:	d002      	beq.n	8012446 <MBS_Config+0x122>
 8012440:	2b02      	cmp	r3, #2
 8012442:	d005      	beq.n	8012450 <MBS_Config+0x12c>
 8012444:	e00a      	b.n	801245c <MBS_Config+0x138>
		case MBS_SB_1:
			Uart->Init.StopBits = UART_STOPBITS_1;
 8012446:	4b3b      	ldr	r3, [pc, #236]	; (8012534 <MBS_Config+0x210>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2200      	movs	r2, #0
 801244c:	60da      	str	r2, [r3, #12]
			break;
 801244e:	e008      	b.n	8012462 <MBS_Config+0x13e>
		case MBS_SB_2:
			Uart->Init.StopBits = UART_STOPBITS_2;
 8012450:	4b38      	ldr	r3, [pc, #224]	; (8012534 <MBS_Config+0x210>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012458:	60da      	str	r2, [r3, #12]
			break;
 801245a:	e002      	b.n	8012462 <MBS_Config+0x13e>
		default:
			errorStatus = MB_ERROR;
 801245c:	2300      	movs	r3, #0
 801245e:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 8012460:	e059      	b.n	8012516 <MBS_Config+0x1f2>
			break;
	}

	/*---------configure uart, 1.5 and 3.5 char Timer------------*/
	if(errorStatus == MB_OK){
 8012462:	7bfb      	ldrb	r3, [r7, #15]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d155      	bne.n	8012514 <MBS_Config+0x1f0>
		if(serial->protocol == MBS_PROTO_RTU_STD){
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	785b      	ldrb	r3, [r3, #1]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d118      	bne.n	80124a2 <MBS_Config+0x17e>
			Timer_1P5_CHAR->Init.Period = MBS_GetCharTime(Uart->Init.BaudRate, MBS_1P5_CHAR);	// set the 1.5 char timer period according to the new baud rate
 8012470:	4b30      	ldr	r3, [pc, #192]	; (8012534 <MBS_Config+0x210>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	4a30      	ldr	r2, [pc, #192]	; (8012538 <MBS_Config+0x214>)
 8012478:	6814      	ldr	r4, [r2, #0]
 801247a:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 801247e:	4618      	mov	r0, r3
 8012480:	f000 fb82 	bl	8012b88 <MBS_GetCharTime>
 8012484:	4603      	mov	r3, r0
 8012486:	60e3      	str	r3, [r4, #12]
			Timer_3P5_CHAR->Init.Period = MBS_GetCharTime(Uart->Init.BaudRate, MBS_3P5_CHAR);	// set the 3.5 char timer period according to the new baud rat
 8012488:	4b2a      	ldr	r3, [pc, #168]	; (8012534 <MBS_Config+0x210>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	4a2b      	ldr	r2, [pc, #172]	; (801253c <MBS_Config+0x218>)
 8012490:	6814      	ldr	r4, [r2, #0]
 8012492:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8012496:	4618      	mov	r0, r3
 8012498:	f000 fb76 	bl	8012b88 <MBS_GetCharTime>
 801249c:	4603      	mov	r3, r0
 801249e:	60e3      	str	r3, [r4, #12]
 80124a0:	e017      	b.n	80124d2 <MBS_Config+0x1ae>
		}else{
			Timer_1P5_CHAR->Init.Period = MBS_GetCharTimeCluster(Uart->Init.BaudRate, MBS_1P5_CHAR);	// set the 1.5 char timer period according to the new baud rate
 80124a2:	4b24      	ldr	r3, [pc, #144]	; (8012534 <MBS_Config+0x210>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	4a23      	ldr	r2, [pc, #140]	; (8012538 <MBS_Config+0x214>)
 80124aa:	6814      	ldr	r4, [r2, #0]
 80124ac:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80124b0:	4618      	mov	r0, r3
 80124b2:	f000 fba9 	bl	8012c08 <MBS_GetCharTimeCluster>
 80124b6:	4603      	mov	r3, r0
 80124b8:	60e3      	str	r3, [r4, #12]
			Timer_3P5_CHAR->Init.Period = MBS_GetCharTimeCluster(Uart->Init.BaudRate, MBS_3P5_CHAR);	// set the 3.5 char timer period according to the new baud rat
 80124ba:	4b1e      	ldr	r3, [pc, #120]	; (8012534 <MBS_Config+0x210>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	4a1e      	ldr	r2, [pc, #120]	; (801253c <MBS_Config+0x218>)
 80124c2:	6814      	ldr	r4, [r2, #0]
 80124c4:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 80124c8:	4618      	mov	r0, r3
 80124ca:	f000 fb9d 	bl	8012c08 <MBS_GetCharTimeCluster>
 80124ce:	4603      	mov	r3, r0
 80124d0:	60e3      	str	r3, [r4, #12]
		}

		if (HAL_TIM_Base_Init(Timer_1P5_CHAR) != HAL_OK) {
 80124d2:	4b19      	ldr	r3, [pc, #100]	; (8012538 <MBS_Config+0x214>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f010 f89d 	bl	8022616 <HAL_TIM_Base_Init>
 80124dc:	4603      	mov	r3, r0
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d002      	beq.n	80124e8 <MBS_Config+0x1c4>
			errorStatus = MB_ERROR;
 80124e2:	2300      	movs	r3, #0
 80124e4:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 80124e6:	e016      	b.n	8012516 <MBS_Config+0x1f2>
		}					// configure 1.5 char timer
		if (HAL_TIM_Base_Init(Timer_3P5_CHAR) != HAL_OK) {
 80124e8:	4b14      	ldr	r3, [pc, #80]	; (801253c <MBS_Config+0x218>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4618      	mov	r0, r3
 80124ee:	f010 f892 	bl	8022616 <HAL_TIM_Base_Init>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d002      	beq.n	80124fe <MBS_Config+0x1da>
			errorStatus = MB_ERROR;
 80124f8:	2300      	movs	r3, #0
 80124fa:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 80124fc:	e00b      	b.n	8012516 <MBS_Config+0x1f2>
		}					// configure 3.5 char timer
		if (HAL_UART_Init(Uart) != HAL_OK) {
 80124fe:	4b0d      	ldr	r3, [pc, #52]	; (8012534 <MBS_Config+0x210>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	4618      	mov	r0, r3
 8012504:	f012 f9a6 	bl	8024854 <HAL_UART_Init>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d002      	beq.n	8012514 <MBS_Config+0x1f0>
			errorStatus = MB_ERROR;
 801250e:	2300      	movs	r3, #0
 8012510:	73fb      	strb	r3, [r7, #15]
			goto MBS_SERIAL_CONFIG_END;
 8012512:	e000      	b.n	8012516 <MBS_Config+0x1f2>
		}								// configure uart
	}

	/*---------start uart interrupt and the 3.5 & 1.5 char timer------------*/
	MBS_SERIAL_CONFIG_END:							// goto label
 8012514:	bf00      	nop

	__HAL_UART_ENABLE_IT(Uart, UART_IT_RXNE);		// enable uart receive interrupt
 8012516:	4b07      	ldr	r3, [pc, #28]	; (8012534 <MBS_Config+0x210>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	681a      	ldr	r2, [r3, #0]
 801251e:	4b05      	ldr	r3, [pc, #20]	; (8012534 <MBS_Config+0x210>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f042 0220 	orr.w	r2, r2, #32
 8012528:	601a      	str	r2, [r3, #0]
//	MBS_START_TIMER(Timer_1P5_CHAR-); 				//start 1.5 char timer
//	MBS_START_TIMER(Timer_3P5_CHAR); 				//start 3.5 char timer

	return errorStatus;
 801252a:	7bfb      	ldrb	r3, [r7, #15]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3714      	adds	r7, #20
 8012530:	46bd      	mov	sp, r7
 8012532:	bd90      	pop	{r4, r7, pc}
 8012534:	24005fc8 	.word	0x24005fc8
 8012538:	24005fd0 	.word	0x24005fd0
 801253c:	24005fc4 	.word	0x24005fc4
 8012540:	2400022c 	.word	0x2400022c

08012544 <MBS_DecodeConfigValue>:
  * @brief decode modbus configuration value
  *
  * @param serialPort: modbus serial port struct
  * @retval 0 = error, 1 = no error
  */
uint8_t MBS_DecodeConfigValue(MBS_Serial *serial){
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
	serial->baudRateIndex = (serial->serialConfigValue&0xF000)>>12U;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	88db      	ldrh	r3, [r3, #6]
 8012550:	0b1b      	lsrs	r3, r3, #12
 8012552:	b29b      	uxth	r3, r3
 8012554:	b2da      	uxtb	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	721a      	strb	r2, [r3, #8]
	serial->dataBits 		= (serial->serialConfigValue&0x0F00)>>8U;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	88db      	ldrh	r3, [r3, #6]
 801255e:	121b      	asrs	r3, r3, #8
 8012560:	b2db      	uxtb	r3, r3
 8012562:	f003 030f 	and.w	r3, r3, #15
 8012566:	b2da      	uxtb	r2, r3
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	741a      	strb	r2, [r3, #16]
	serial->parityBit		= (serial->serialConfigValue&0x00F0)>>4U;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	88db      	ldrh	r3, [r3, #6]
 8012570:	111b      	asrs	r3, r3, #4
 8012572:	b2db      	uxtb	r3, r3
 8012574:	f003 030f 	and.w	r3, r3, #15
 8012578:	b2da      	uxtb	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	745a      	strb	r2, [r3, #17]
	serial->stopBit 		= (serial->serialConfigValue&0x000F);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	88db      	ldrh	r3, [r3, #6]
 8012582:	b2db      	uxtb	r3, r3
 8012584:	f003 030f 	and.w	r3, r3, #15
 8012588:	b2da      	uxtb	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	749a      	strb	r2, [r3, #18]
	if((serial->baudRateIndex >= MBS_BR_MIN_INDEX && serial->baudRateIndex < MBS_BR_MAX_INDEX) ){
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	7a1b      	ldrb	r3, [r3, #8]
 8012592:	2b0f      	cmp	r3, #15
 8012594:	d809      	bhi.n	80125aa <MBS_DecodeConfigValue+0x66>
		serial->baudRate = MBS_BaudRate[serial->baudRateIndex];
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	7a1b      	ldrb	r3, [r3, #8]
 801259a:	461a      	mov	r2, r3
 801259c:	4b06      	ldr	r3, [pc, #24]	; (80125b8 <MBS_DecodeConfigValue+0x74>)
 801259e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	60da      	str	r2, [r3, #12]
		return MB_OK;
 80125a6:	2301      	movs	r3, #1
 80125a8:	e000      	b.n	80125ac <MBS_DecodeConfigValue+0x68>
	}else{
		return MB_ERROR;
 80125aa:	2300      	movs	r3, #0
	}
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	370c      	adds	r7, #12
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr
 80125b8:	2400022c 	.word	0x2400022c

080125bc <MBS_CheckSerialConfigValidity>:


uint8_t MBS_CheckSerialConfigValidity(MBS_Serial *serial){
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
	MB_ErrorStatus errorStatus = MB_OK;
 80125c4:	2301      	movs	r3, #1
 80125c6:	73fb      	strb	r3, [r7, #15]
	MBS_DecodeConfigValue(serial);		// decode the serial config value
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f7ff ffbb 	bl	8012544 <MBS_DecodeConfigValue>
	// check the baud rate is in the list
	if(!(serial->baudRateIndex >= MBS_BR_MIN_INDEX && serial->baudRateIndex < MBS_BR_MAX_INDEX)){
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	7a1b      	ldrb	r3, [r3, #8]
 80125d2:	2b0f      	cmp	r3, #15
 80125d4:	d901      	bls.n	80125da <MBS_CheckSerialConfigValidity+0x1e>

		errorStatus = MB_ERROR;
 80125d6:	2300      	movs	r3, #0
 80125d8:	73fb      	strb	r3, [r7, #15]
	}
	// check databits
	if(!(serial->dataBits >= MBS_DB_7 && serial->dataBits <= MBS_DB_8)){
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	7c1b      	ldrb	r3, [r3, #16]
 80125de:	2b06      	cmp	r3, #6
 80125e0:	d903      	bls.n	80125ea <MBS_CheckSerialConfigValidity+0x2e>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	7c1b      	ldrb	r3, [r3, #16]
 80125e6:	2b08      	cmp	r3, #8
 80125e8:	d901      	bls.n	80125ee <MBS_CheckSerialConfigValidity+0x32>

		errorStatus = MB_ERROR;
 80125ea:	2300      	movs	r3, #0
 80125ec:	73fb      	strb	r3, [r7, #15]
	}
	// check parity bits
	if(!(serial->parityBit >= MBS_PB_NONE && serial->parityBit <= MBS_PB_EVEN)){
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	7c5b      	ldrb	r3, [r3, #17]
 80125f2:	2b02      	cmp	r3, #2
 80125f4:	d901      	bls.n	80125fa <MBS_CheckSerialConfigValidity+0x3e>

		errorStatus = MB_ERROR;
 80125f6:	2300      	movs	r3, #0
 80125f8:	73fb      	strb	r3, [r7, #15]
	}
	// check stop bit
	if(!(serial->stopBit >= MBS_SB_1 && serial->stopBit <= MBS_SB_2)){
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	7c9b      	ldrb	r3, [r3, #18]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d003      	beq.n	801260a <MBS_CheckSerialConfigValidity+0x4e>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	7c9b      	ldrb	r3, [r3, #18]
 8012606:	2b02      	cmp	r3, #2
 8012608:	d901      	bls.n	801260e <MBS_CheckSerialConfigValidity+0x52>

		errorStatus = MB_ERROR;
 801260a:	2300      	movs	r3, #0
 801260c:	73fb      	strb	r3, [r7, #15]
	}
	return errorStatus;
 801260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3710      	adds	r7, #16
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <MBS_SetBaudRateUserDef>:

/*
 * function to set user define baud rate.
 * 0 position in MBS_BaudRate[] array is for user define baud rate
 * */
void MBS_SetBaudRateUserDef(uint32_t br){
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
	MBS_BaudRate[0] = br;
 8012620:	4a04      	ldr	r2, [pc, #16]	; (8012634 <MBS_SetBaudRateUserDef+0x1c>)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6013      	str	r3, [r2, #0]
}
 8012626:	bf00      	nop
 8012628:	370c      	adds	r7, #12
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr
 8012632:	bf00      	nop
 8012634:	2400022c 	.word	0x2400022c

08012638 <MBS_GetBaudRateUserDef>:

/*
 * function to get user define baud rate
 *  0 position in MBS_BaudRate[] array is for user define baud rate
 * */
uint32_t MBS_GetBaudRateUserDef(void){
 8012638:	b480      	push	{r7}
 801263a:	af00      	add	r7, sp, #0
	return MBS_BaudRate[0];
 801263c:	4b03      	ldr	r3, [pc, #12]	; (801264c <MBS_GetBaudRateUserDef+0x14>)
 801263e:	681b      	ldr	r3, [r3, #0]
}
 8012640:	4618      	mov	r0, r3
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	2400022c 	.word	0x2400022c

08012650 <MBS_Send>:




//---------
MB_ErrorStatus MBS_Send(MBS_Serial *serial){
 8012650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012652:	b089      	sub	sp, #36	; 0x24
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]

	MB_ErrorStatus errorStatus = MB_OK;
 8012658:	2301      	movs	r3, #1
 801265a:	77fb      	strb	r3, [r7, #31]
	if(serial->txBuffSize > 0u){
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8012662:	2b00      	cmp	r3, #0
 8012664:	f000 80be 	beq.w	80127e4 <MBS_Send+0x194>

		if(!serial->isSending){
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	7d9b      	ldrb	r3, [r3, #22]
 801266c:	2b00      	cmp	r3, #0
 801266e:	f040 80b6 	bne.w	80127de <MBS_Send+0x18e>
			serial->rxBuffSize = 0;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2200      	movs	r2, #0
 8012676:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
//			HAL_GPIO_WritePin(RS485_TX_LED_GPIO_Port, RS485_TX_LED_Pin, GPIO_PIN_SET);
			// TODO: To implement LED with IOExtender
			HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);     // set the rs485 to transmit mod
 801267a:	2201      	movs	r2, #1
 801267c:	2108      	movs	r1, #8
 801267e:	485d      	ldr	r0, [pc, #372]	; (80127f4 <MBS_Send+0x1a4>)
 8012680:	f009 fb48 	bl	801bd14 <HAL_GPIO_WritePin>
			serial->txCount++;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 801268a:	1c5a      	adds	r2, r3, #1
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
			if(serial->protocol == MBS_PROTO_RTU_CLUSTER_DMA){			// modbus rtu cluster protocol use dma
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	785b      	ldrb	r3, [r3, #1]
 8012696:	2b02      	cmp	r3, #2
 8012698:	d147      	bne.n	801272a <MBS_Send+0xda>
//					DEBUG_SPRINT_APPEND(dbug.str,"%02X,", serial->txBuff[i]);
//				}
//				DEBUG_SPRINT_APPEND(dbug.str,"]");
//				DEBUG_SPRINT(dbug.str);
//
				for(uint32_t i = 0; i <  50; i++){
 801269a:	2300      	movs	r3, #0
 801269c:	61bb      	str	r3, [r7, #24]
 801269e:	e003      	b.n	80126a8 <MBS_Send+0x58>
					__NOP();
 80126a0:	bf00      	nop
				for(uint32_t i = 0; i <  50; i++){
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	3301      	adds	r3, #1
 80126a6:	61bb      	str	r3, [r7, #24]
 80126a8:	69bb      	ldr	r3, [r7, #24]
 80126aa:	2b31      	cmp	r3, #49	; 0x31
 80126ac:	d9f8      	bls.n	80126a0 <MBS_Send+0x50>
				};

				if( MB_UartSendDMA(serial->txBuff,  serial->txBuffSize) != HAL_OK ){
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f503 7291 	add.w	r2, r3, #290	; 0x122
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 80126ba:	4619      	mov	r1, r3
 80126bc:	4610      	mov	r0, r2
 80126be:	f000 fce5 	bl	801308c <MB_UartSendDMA>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d002      	beq.n	80126ce <MBS_Send+0x7e>
					errorStatus = MB_ERROR;
 80126c8:	2300      	movs	r3, #0
 80126ca:	77fb      	strb	r3, [r7, #31]
 80126cc:	e08c      	b.n	80127e8 <MBS_Send+0x198>
				}else{

					serial->isSending = 1;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2201      	movs	r2, #1
 80126d2:	759a      	strb	r2, [r3, #22]
					rtuTxCount++;
 80126d4:	4b48      	ldr	r3, [pc, #288]	; (80127f8 <MBS_Send+0x1a8>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	3301      	adds	r3, #1
 80126da:	4a47      	ldr	r2, [pc, #284]	; (80127f8 <MBS_Send+0x1a8>)
 80126dc:	6013      	str	r3, [r2, #0]
					uint32_t waitMax = MBS_GetByteTxTime( Uart->Init.BaudRate)*serial->txBuffSize*1000;
 80126de:	4b47      	ldr	r3, [pc, #284]	; (80127fc <MBS_Send+0x1ac>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	4618      	mov	r0, r3
 80126e6:	f000 faeb 	bl	8012cc0 <MBS_GetByteTxTime>
 80126ea:	eeb0 7a40 	vmov.f32	s14, s0
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 80126f4:	ee07 3a90 	vmov	s15, r3
 80126f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012700:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8012800 <MBS_Send+0x1b0>
 8012704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801270c:	ee17 3a90 	vmov	r3, s15
 8012710:	60bb      	str	r3, [r7, #8]
					for(uint32_t i = 0; i <  waitMax; i++){
 8012712:	2300      	movs	r3, #0
 8012714:	617b      	str	r3, [r7, #20]
 8012716:	e003      	b.n	8012720 <MBS_Send+0xd0>
						__NOP();
 8012718:	bf00      	nop
					for(uint32_t i = 0; i <  waitMax; i++){
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	3301      	adds	r3, #1
 801271e:	617b      	str	r3, [r7, #20]
 8012720:	697a      	ldr	r2, [r7, #20]
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	429a      	cmp	r2, r3
 8012726:	d3f7      	bcc.n	8012718 <MBS_Send+0xc8>
 8012728:	e05e      	b.n	80127e8 <MBS_Send+0x198>
	//			}
	//			DEBUG_SPRINT_APPEND(dbug.str,"]");
	//			DEBUG_SPRINT_NL(dbug.str);
		//		DEBUG_SPRINT_NL("%s %s: %s...", STR_MB, STR_SERIAL, STR_SENDING);

				for(uint32_t i = 0; i <  50; i++){
 801272a:	2300      	movs	r3, #0
 801272c:	613b      	str	r3, [r7, #16]
 801272e:	e003      	b.n	8012738 <MBS_Send+0xe8>
					__NOP();
 8012730:	bf00      	nop
				for(uint32_t i = 0; i <  50; i++){
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	3301      	adds	r3, #1
 8012736:	613b      	str	r3, [r7, #16]
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	2b31      	cmp	r3, #49	; 0x31
 801273c:	d9f8      	bls.n	8012730 <MBS_Send+0xe0>
				};

				if(HAL_UART_Transmit(Uart, serial->txBuff, serial->txBuffSize, MBS_GetTransTimeout(serial->txBuffSize, Uart->Init.BaudRate ))!= HAL_OK){
 801273e:	4b2f      	ldr	r3, [pc, #188]	; (80127fc <MBS_Send+0x1ac>)
 8012740:	681c      	ldr	r4, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f503 7591 	add.w	r5, r3, #290	; 0x122
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8b3 6224 	ldrh.w	r6, [r3, #548]	; 0x224
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8012754:	b2da      	uxtb	r2, r3
 8012756:	4b29      	ldr	r3, [pc, #164]	; (80127fc <MBS_Send+0x1ac>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	4619      	mov	r1, r3
 801275e:	4610      	mov	r0, r2
 8012760:	f000 fa7c 	bl	8012c5c <MBS_GetTransTimeout>
 8012764:	4603      	mov	r3, r0
 8012766:	4632      	mov	r2, r6
 8012768:	4629      	mov	r1, r5
 801276a:	4620      	mov	r0, r4
 801276c:	f012 f8c2 	bl	80248f4 <HAL_UART_Transmit>
 8012770:	4603      	mov	r3, r0
 8012772:	2b00      	cmp	r3, #0
 8012774:	d002      	beq.n	801277c <MBS_Send+0x12c>
					errorStatus = MB_ERROR;
 8012776:	2300      	movs	r3, #0
 8012778:	77fb      	strb	r3, [r7, #31]
 801277a:	e020      	b.n	80127be <MBS_Send+0x16e>
		//			DEBUG_SPRINT_NL("%s %s: %s", STR_MB, STR_SERIAL, STR_FAILED);
				}else{

					rtuTxCount++;
 801277c:	4b1e      	ldr	r3, [pc, #120]	; (80127f8 <MBS_Send+0x1a8>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	3301      	adds	r3, #1
 8012782:	4a1d      	ldr	r2, [pc, #116]	; (80127f8 <MBS_Send+0x1a8>)
 8012784:	6013      	str	r3, [r2, #0]
					serial->isSending = 1;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2201      	movs	r2, #1
 801278a:	759a      	strb	r2, [r3, #22]
					for(uint32_t i = 0; i <  50; i++){
 801278c:	2300      	movs	r3, #0
 801278e:	60fb      	str	r3, [r7, #12]
 8012790:	e003      	b.n	801279a <MBS_Send+0x14a>
						__NOP();
 8012792:	bf00      	nop
					for(uint32_t i = 0; i <  50; i++){
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	3301      	adds	r3, #1
 8012798:	60fb      	str	r3, [r7, #12]
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	2b31      	cmp	r3, #49	; 0x31
 801279e:	d9f8      	bls.n	8012792 <MBS_Send+0x142>
					};
					MBS_START_TIMER(Timer_3P5_CHAR);		//start 3.5 char timer
 80127a0:	4b18      	ldr	r3, [pc, #96]	; (8012804 <MBS_Send+0x1b4>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	2200      	movs	r2, #0
 80127a8:	625a      	str	r2, [r3, #36]	; 0x24
 80127aa:	4b16      	ldr	r3, [pc, #88]	; (8012804 <MBS_Send+0x1b4>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	4b14      	ldr	r3, [pc, #80]	; (8012804 <MBS_Send+0x1b4>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f042 0201 	orr.w	r2, r2, #1
 80127bc:	601a      	str	r2, [r3, #0]
				}



				/*Set the serial receiving mode always*/
				HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);//(serial->mode == MBS_MODE_MASTER ? GPIO_PIN_SET: GPIO_PIN_RESET));		// set the rs485 to receive mode
 80127be:	2200      	movs	r2, #0
 80127c0:	2108      	movs	r1, #8
 80127c2:	480c      	ldr	r0, [pc, #48]	; (80127f4 <MBS_Send+0x1a4>)
 80127c4:	f009 faa6 	bl	801bd14 <HAL_GPIO_WritePin>
//				HAL_GPIO_WritePin(RS485_TX_LED_GPIO_Port, RS485_TX_LED_Pin, GPIO_PIN_RESET);
				// TODO: To implement LED with IOExtender

				MBS_AllCmpltTxCallback(serial, MB_getSCRAddress(), errorStatus);
 80127c8:	f7fd ffd4 	bl	8010774 <MB_getSCRAddress>
 80127cc:	4603      	mov	r3, r0
 80127ce:	4619      	mov	r1, r3
 80127d0:	7ffb      	ldrb	r3, [r7, #31]
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	461a      	mov	r2, r3
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 f9a2 	bl	8012b20 <MBS_AllCmpltTxCallback>
 80127dc:	e004      	b.n	80127e8 <MBS_Send+0x198>
			}
		}else{
			errorStatus = MB_ERROR;
 80127de:	2300      	movs	r3, #0
 80127e0:	77fb      	strb	r3, [r7, #31]
 80127e2:	e001      	b.n	80127e8 <MBS_Send+0x198>
		}
	}else{
		errorStatus = MB_ERROR;
 80127e4:	2300      	movs	r3, #0
 80127e6:	77fb      	strb	r3, [r7, #31]
	}



	return errorStatus;
 80127e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3724      	adds	r7, #36	; 0x24
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127f2:	bf00      	nop
 80127f4:	58021000 	.word	0x58021000
 80127f8:	240008c4 	.word	0x240008c4
 80127fc:	24005fc8 	.word	0x24005fc8
 8012800:	447a0000 	.word	0x447a0000
 8012804:	24005fc4 	.word	0x24005fc4

08012808 <MBS_Receive>:
  * @brief receives serial data byte
  *
  * @param none
  * @retval None
  */
void MBS_Receive(MBS_Serial *serial){
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]

		serial->isReceiving = 1;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2201      	movs	r2, #1
 8012814:	755a      	strb	r2, [r3, #21]


//		DIO_WRITE_PIN_SET(RS485_RX_LED_GPIO_Port, RS485_RX_LED_Pin);
		// TODO: To implement LED with IOExtender
		MBS_STOP_TIMER(Timer_1P5_CHAR); //stop 1.5 char timer
 8012816:	4b39      	ldr	r3, [pc, #228]	; (80128fc <MBS_Receive+0xf4>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	2200      	movs	r2, #0
 801281e:	625a      	str	r2, [r3, #36]	; 0x24
 8012820:	4b36      	ldr	r3, [pc, #216]	; (80128fc <MBS_Receive+0xf4>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	4b34      	ldr	r3, [pc, #208]	; (80128fc <MBS_Receive+0xf4>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f022 0201 	bic.w	r2, r2, #1
 8012832:	601a      	str	r2, [r3, #0]
 8012834:	4b31      	ldr	r3, [pc, #196]	; (80128fc <MBS_Receive+0xf4>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	691a      	ldr	r2, [r3, #16]
 801283c:	4b2f      	ldr	r3, [pc, #188]	; (80128fc <MBS_Receive+0xf4>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	f022 0201 	bic.w	r2, r2, #1
 8012846:	611a      	str	r2, [r3, #16]
		MBS_STOP_TIMER(Timer_3P5_CHAR); //stop 3.5 char timer
 8012848:	4b2d      	ldr	r3, [pc, #180]	; (8012900 <MBS_Receive+0xf8>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2200      	movs	r2, #0
 8012850:	625a      	str	r2, [r3, #36]	; 0x24
 8012852:	4b2b      	ldr	r3, [pc, #172]	; (8012900 <MBS_Receive+0xf8>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	4b29      	ldr	r3, [pc, #164]	; (8012900 <MBS_Receive+0xf8>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f022 0201 	bic.w	r2, r2, #1
 8012864:	601a      	str	r2, [r3, #0]
 8012866:	4b26      	ldr	r3, [pc, #152]	; (8012900 <MBS_Receive+0xf8>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	691a      	ldr	r2, [r3, #16]
 801286e:	4b24      	ldr	r3, [pc, #144]	; (8012900 <MBS_Receive+0xf8>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	f022 0201 	bic.w	r2, r2, #1
 8012878:	611a      	str	r2, [r3, #16]

		// copy data to the receive buffer
		if(serial->rxBuffSize < MB_PDU_MAX_SIZE){
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8012880:	2bff      	cmp	r3, #255	; 0xff
 8012882:	d812      	bhi.n	80128aa <MBS_Receive+0xa2>
			serial->rxBuff[serial->rxBuffSize++] = Uart->Instance->RDR;
 8012884:	4b1f      	ldr	r3, [pc, #124]	; (8012904 <MBS_Receive+0xfc>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8012892:	1c5a      	adds	r2, r3, #1
 8012894:	b291      	uxth	r1, r2
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	f8a2 1222 	strh.w	r1, [r2, #546]	; 0x222
 801289c:	4619      	mov	r1, r3
 801289e:	b2c2      	uxtb	r2, r0
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	440b      	add	r3, r1
 80128a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80128a8:	e004      	b.n	80128b4 <MBS_Receive+0xac>
		}else{
			serial->rxBuffSize = MB_PDU_MAX_SIZE;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80128b0:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
		}

		MBS_START_TIMER(Timer_1P5_CHAR);		//start 1.5 char timer
 80128b4:	4b11      	ldr	r3, [pc, #68]	; (80128fc <MBS_Receive+0xf4>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	2200      	movs	r2, #0
 80128bc:	625a      	str	r2, [r3, #36]	; 0x24
 80128be:	4b0f      	ldr	r3, [pc, #60]	; (80128fc <MBS_Receive+0xf4>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	4b0d      	ldr	r3, [pc, #52]	; (80128fc <MBS_Receive+0xf4>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f042 0201 	orr.w	r2, r2, #1
 80128d0:	601a      	str	r2, [r3, #0]
		MBS_START_TIMER(Timer_3P5_CHAR);		//start 3.5 char timer
 80128d2:	4b0b      	ldr	r3, [pc, #44]	; (8012900 <MBS_Receive+0xf8>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	2200      	movs	r2, #0
 80128da:	625a      	str	r2, [r3, #36]	; 0x24
 80128dc:	4b08      	ldr	r3, [pc, #32]	; (8012900 <MBS_Receive+0xf8>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	4b06      	ldr	r3, [pc, #24]	; (8012900 <MBS_Receive+0xf8>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f042 0201 	orr.w	r2, r2, #1
 80128ee:	601a      	str	r2, [r3, #0]
//		DBG_SPRINT("RRX: %02X",serial->rxBuff);
}
 80128f0:	bf00      	nop
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr
 80128fc:	24005fd0 	.word	0x24005fd0
 8012900:	24005fc4 	.word	0x24005fc4
 8012904:	24005fc8 	.word	0x24005fc8

08012908 <MBS_StopReceiving>:


void MBS_StopReceiving(MBS_Serial *serial){
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]

	rtuRxCount++; //TODO: to remove
 8012910:	4b35      	ldr	r3, [pc, #212]	; (80129e8 <MBS_StopReceiving+0xe0>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	3301      	adds	r3, #1
 8012916:	4a34      	ldr	r2, [pc, #208]	; (80129e8 <MBS_StopReceiving+0xe0>)
 8012918:	6013      	str	r3, [r2, #0]
	serial->rxCount++;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8012920:	1c5a      	adds	r2, r3, #1
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	if(serial->protocol == MBS_PROTO_RTU_CLUSTER_DMA){		// use dma to receive
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	785b      	ldrb	r3, [r3, #1]
 801292c:	2b02      	cmp	r3, #2
 801292e:	d119      	bne.n	8012964 <MBS_StopReceiving+0x5c>
		serial->isDataReceived = 1U;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2201      	movs	r2, #1
 8012934:	74da      	strb	r2, [r3, #19]
//		DEBUG_SPRINT("\r\nR:(%d)",serial->rxBuffSize);
		if(serial->rxBuffSize <= MB_PDU_MIN_SIZE || serial->rxBuffSize >= MB_PDU_MAX_SIZE){
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 801293c:	2b04      	cmp	r3, #4
 801293e:	d904      	bls.n	801294a <MBS_StopReceiving+0x42>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8012946:	2bff      	cmp	r3, #255	; 0xff
 8012948:	d907      	bls.n	801295a <MBS_StopReceiving+0x52>
			serial->rxBuffSize = 0 ;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2200      	movs	r2, #0
 801294e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
			serial->isDataReceived = 0U;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2200      	movs	r2, #0
 8012956:	74da      	strb	r2, [r3, #19]
			serial->isReceiving = 0;
		}
	}
//	HAL_GPIO_WritePin(RS485_RX_LED_GPIO_Port, RS485_RX_LED_Pin, GPIO_PIN_RESET);
	// TODO: To implement LED with IOExtender
}
 8012958:	e041      	b.n	80129de <MBS_StopReceiving+0xd6>
			MBS_CmpltRxCallback(serial);
 801295a:	4b24      	ldr	r3, [pc, #144]	; (80129ec <MBS_StopReceiving+0xe4>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	4798      	blx	r3
}
 8012962:	e03c      	b.n	80129de <MBS_StopReceiving+0xd6>
		if(Timer_3P5_CHAR->Instance->SR & TIM_SR_UIF){
 8012964:	4b22      	ldr	r3, [pc, #136]	; (80129f0 <MBS_StopReceiving+0xe8>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	691b      	ldr	r3, [r3, #16]
 801296c:	f003 0301 	and.w	r3, r3, #1
 8012970:	2b00      	cmp	r3, #0
 8012972:	d034      	beq.n	80129de <MBS_StopReceiving+0xd6>
			MBS_STOP_TIMER(Timer_3P5_CHAR);		//stop the 3.5 char timer, once a data packet is received
 8012974:	4b1e      	ldr	r3, [pc, #120]	; (80129f0 <MBS_StopReceiving+0xe8>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2200      	movs	r2, #0
 801297c:	625a      	str	r2, [r3, #36]	; 0x24
 801297e:	4b1c      	ldr	r3, [pc, #112]	; (80129f0 <MBS_StopReceiving+0xe8>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	681a      	ldr	r2, [r3, #0]
 8012986:	4b1a      	ldr	r3, [pc, #104]	; (80129f0 <MBS_StopReceiving+0xe8>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f022 0201 	bic.w	r2, r2, #1
 8012990:	601a      	str	r2, [r3, #0]
 8012992:	4b17      	ldr	r3, [pc, #92]	; (80129f0 <MBS_StopReceiving+0xe8>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	691a      	ldr	r2, [r3, #16]
 801299a:	4b15      	ldr	r3, [pc, #84]	; (80129f0 <MBS_StopReceiving+0xe8>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f022 0201 	bic.w	r2, r2, #1
 80129a4:	611a      	str	r2, [r3, #16]
			serial->isDataReceived = 1U;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2201      	movs	r2, #1
 80129aa:	74da      	strb	r2, [r3, #19]
			if(serial->rxBuffSize <= MB_PDU_MIN_SIZE || serial->rxBuffSize >= MB_PDU_MAX_SIZE){
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80129b2:	2b04      	cmp	r3, #4
 80129b4:	d904      	bls.n	80129c0 <MBS_StopReceiving+0xb8>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80129bc:	2bff      	cmp	r3, #255	; 0xff
 80129be:	d907      	bls.n	80129d0 <MBS_StopReceiving+0xc8>
				serial->rxBuffSize = 0 ;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2200      	movs	r2, #0
 80129c4:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
				serial->isDataReceived = 0U;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2200      	movs	r2, #0
 80129cc:	74da      	strb	r2, [r3, #19]
 80129ce:	e003      	b.n	80129d8 <MBS_StopReceiving+0xd0>
				MBS_CmpltRxCallback(serial);
 80129d0:	4b06      	ldr	r3, [pc, #24]	; (80129ec <MBS_StopReceiving+0xe4>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	4798      	blx	r3
			serial->isReceiving = 0;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2200      	movs	r2, #0
 80129dc:	755a      	strb	r2, [r3, #21]
}
 80129de:	bf00      	nop
 80129e0:	3708      	adds	r7, #8
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	240008c0 	.word	0x240008c0
 80129ec:	24005fd8 	.word	0x24005fd8
 80129f0:	24005fc4 	.word	0x24005fc4

080129f4 <MBS_ProcessRcvdFrame>:
  * @brief processes received data packet and response according to the command
  *
  * @param none
  * @retval None
  */
void MBS_ProcessRcvdFrame(MBS_Serial *serial, MB_RTUSlave *mbSlave){
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
	if(serial->isDataReceived > 0U){
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	7cdb      	ldrb	r3, [r3, #19]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d01a      	beq.n	8012a3c <MBS_ProcessRcvdFrame+0x48>
		serial->isDataReceived = 0U;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	74da      	strb	r2, [r3, #19]
		if(serial->frameOkFlag){	// if the buffer size is less than the max buffer size
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	7e1b      	ldrb	r3, [r3, #24]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d008      	beq.n	8012a26 <MBS_ProcessRcvdFrame+0x32>
			mbSlave->custom.eventType = MB_CUST_EVENT_107_RECVD;
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2201      	movs	r2, #1
 8012a18:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
			MBS_ProcessFrame(serial, mbSlave);
 8012a1c:	6839      	ldr	r1, [r7, #0]
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f000 f810 	bl	8012a44 <MBS_ProcessFrame>
 8012a24:	e001      	b.n	8012a2a <MBS_ProcessRcvdFrame+0x36>
		}else{
			MB_ClearBuffer();
 8012a26:	f7fd fbab 	bl	8010180 <MB_ClearBuffer>
		}
		MB_ClearBuffer();
 8012a2a:	f7fd fba9 	bl	8010180 <MB_ClearBuffer>
		serial->rxBuffSize = 0;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2200      	movs	r2, #0
 8012a32:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
		serial->frameOkFlag = 0U;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	761a      	strb	r2, [r3, #24]
	}
}
 8012a3c:	bf00      	nop
 8012a3e:	3708      	adds	r7, #8
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <MBS_ProcessFrame>:


void MBS_ProcessFrame(MBS_Serial *serial, MB_RTUSlave *mbSlave){
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
//	uint8_t slaveAddr = serial->rxBuff[MB_SA_INDEX]; 	// pares the broadcast address
	//			uint8_t funCode = serial->rxBuff[MB_FC_INDEX]; 		// pares the function code
				MB_ErrorStatus errorStatus = MB_ERROR;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	73fb      	strb	r3, [r7, #15]
				mbSlave->rxBuffer = &serial->rxBuff[0];
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	605a      	str	r2, [r3, #4]
				mbSlave->txBuffer = &serial->txBuff[0];
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f503 7291 	add.w	r2, r3, #290	; 0x122
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	609a      	str	r2, [r3, #8]
				mbSlave->rxBufferSize = serial->rxBuffSize;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8012a6c:	b2da      	uxtb	r2, r3
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	731a      	strb	r2, [r3, #12]
				mbSlave->txBufferSize = serial->txBuffSize;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8012a78:	b2da      	uxtb	r2, r3
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	735a      	strb	r2, [r3, #13]
	//
	//
	//			DEBUG_SPRINT("\r\n2.bfPReq ");
	//			DEBUG_SPRINT_NL("MS_2");

					uint8_t statusRet = MBRS_processRequest(mbSlave);
 8012a7e:	6838      	ldr	r0, [r7, #0]
 8012a80:	f7ff fa72 	bl	8011f68 <MBRS_processRequest>
 8012a84:	4603      	mov	r3, r0
 8012a86:	73bb      	strb	r3, [r7, #14]


					serial->rxBuffSize = mbSlave->rxBufferSize;
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	7b1b      	ldrb	r3, [r3, #12]
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
					serial->txBuffSize = mbSlave->txBufferSize;
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	7b5b      	ldrb	r3, [r3, #13]
 8012a98:	b29a      	uxth	r2, r3
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224


					if(statusRet>0){
 8012aa0:	7bbb      	ldrb	r3, [r7, #14]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d017      	beq.n	8012ad6 <MBS_ProcessFrame+0x92>
	//						DEBUG_SPRINT_APPEND(dbug.str, "%02X,", serial->txBuff[i] );
	//					}
	//					DEBUG_SPRINT_APPEND(dbug.str, "]");
	//					DEBUG_SPRINT(dbug.str);

						serial->mode = MBS_MODE_SLAVE;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2202      	movs	r2, #2
 8012aaa:	701a      	strb	r2, [r3, #0]
						errorStatus = MBS_Send(serial);
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f7ff fdcf 	bl	8012650 <MBS_Send>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	73fb      	strb	r3, [r7, #15]


							serial->rxBuffSize = 0;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
							serial->txBuffSize = 0;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
							mbSlave->rxBufferSize = 0;
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	731a      	strb	r2, [r3, #12]
							mbSlave->txBufferSize = 0;
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	735a      	strb	r2, [r3, #13]
							MB_ClearBuffer();
 8012ad2:	f7fd fb55 	bl	8010180 <MB_ClearBuffer>

					}
					MBRS_PostProcess(mbSlave, errorStatus); // to process some modbus related task after sending the response
 8012ad6:	7bfb      	ldrb	r3, [r7, #15]
 8012ad8:	4619      	mov	r1, r3
 8012ada:	6838      	ldr	r0, [r7, #0]
 8012adc:	f7ff fb01 	bl	80120e2 <MBRS_PostProcess>
	//			}
}
 8012ae0:	bf00      	nop
 8012ae2:	3710      	adds	r7, #16
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <MBS_ClearTXBuffer>:

//void MBS_SetFramOk(void){
//	gVar.mbSerial.frameOkFlag = 1;
//}

void MBS_ClearTXBuffer(MBS_Serial *serial){
 8012ae8:	b480      	push	{r7}
 8012aea:	b083      	sub	sp, #12
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
//	memset(serial->txBuff,0U,serial->txBuffSize);
	serial->txBuffSize = 0U;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2200      	movs	r2, #0
 8012af4:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
}
 8012af8:	bf00      	nop
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <MBS_ClearRXBuffer>:

void MBS_ClearRXBuffer(MBS_Serial *serial){
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
//	memset(serial->rxBuff,0U,serial->rxBuffSize);
	serial->rxBuffSize = 0U;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 8012b14:	bf00      	nop
 8012b16:	370c      	adds	r7, #12
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <MBS_AllCmpltTxCallback>:
	MBS_DecodeConfigValue(serial);
	return MBS_Config(serial);
}


void MBS_AllCmpltTxCallback(MBS_Serial *serial,  uint16_t address,uint16_t value){
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	460b      	mov	r3, r1
 8012b2a:	807b      	strh	r3, [r7, #2]
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	803b      	strh	r3, [r7, #0]
	MBS_CmpltTxCallback(serial, address,value);
 8012b30:	4b04      	ldr	r3, [pc, #16]	; (8012b44 <MBS_AllCmpltTxCallback+0x24>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	883a      	ldrh	r2, [r7, #0]
 8012b36:	8879      	ldrh	r1, [r7, #2]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	4798      	blx	r3
}
 8012b3c:	bf00      	nop
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	24005fd4 	.word	0x24005fd4

08012b48 <MBS_attachCmpltTxCallback>:

void MBS_attachCmpltTxCallback(MB_ErrorStatus (*callbackFunc)(MBS_Serial *mbSerial, uint16_t address, uint16_t value)){
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
	MBS_CmpltTxCallback = callbackFunc;
 8012b50:	4a04      	ldr	r2, [pc, #16]	; (8012b64 <MBS_attachCmpltTxCallback+0x1c>)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6013      	str	r3, [r2, #0]
}
 8012b56:	bf00      	nop
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	24005fd4 	.word	0x24005fd4

08012b68 <MBS_attachCmpltRxCallback>:

void MBS_attachCmpltRxCallback(uint8_t (*callbackFunc)(MBS_Serial *mbSerial)){
 8012b68:	b480      	push	{r7}
 8012b6a:	b083      	sub	sp, #12
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
	MBS_CmpltRxCallback = callbackFunc;
 8012b70:	4a04      	ldr	r2, [pc, #16]	; (8012b84 <MBS_attachCmpltRxCallback+0x1c>)
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6013      	str	r3, [r2, #0]
}
 8012b76:	bf00      	nop
 8012b78:	370c      	adds	r7, #12
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr
 8012b82:	bf00      	nop
 8012b84:	24005fd8 	.word	0x24005fd8

08012b88 <MBS_GetCharTime>:
/**
  * @brief to get the 1.5 7 3.5 char time for slave mode
  * @param none
  * @retval return timeout in us
  */
uint32_t MBS_GetCharTime(uint32_t baudRate, float charType){
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	ed2d 8b02 	vpush	{d8}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	ed87 0a00 	vstr	s0, [r7]
	/*old implementation*/
	if(baudRate <= MBS_BaudRate[MBS_BR19200_INDEX]){
 8012b98:	4b19      	ldr	r3, [pc, #100]	; (8012c00 <MBS_GetCharTime+0x78>)
 8012b9a:	69db      	ldr	r3, [r3, #28]
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d819      	bhi.n	8012bd6 <MBS_GetCharTime+0x4e>
		return ceil(1000.0f * charType * MBS_GetByteTxTime(baudRate));
 8012ba2:	edd7 7a00 	vldr	s15, [r7]
 8012ba6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8012c04 <MBS_GetCharTime+0x7c>
 8012baa:	ee27 8a87 	vmul.f32	s16, s15, s14
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f000 f886 	bl	8012cc0 <MBS_GetByteTxTime>
 8012bb4:	eef0 7a40 	vmov.f32	s15, s0
 8012bb8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012bbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012bc0:	eeb0 0b47 	vmov.f64	d0, d7
 8012bc4:	f016 fd48 	bl	8029658 <ceil>
 8012bc8:	eeb0 7b40 	vmov.f64	d7, d0
 8012bcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8012bd0:	ee17 3a90 	vmov	r3, s15
 8012bd4:	e00d      	b.n	8012bf2 <MBS_GetCharTime+0x6a>
	}else{
		return (charType == MBS_1P5_CHAR ? MBS_1P5_CHAR_INTERVAL_OVER_BR19200 : MBS_3P5_CHAR_INTERVAL_OVER_BR19200);
 8012bd6:	edd7 7a00 	vldr	s15, [r7]
 8012bda:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8012bde:	eef4 7a47 	vcmp.f32	s15, s14
 8012be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be6:	d102      	bne.n	8012bee <MBS_GetCharTime+0x66>
 8012be8:	f240 23ee 	movw	r3, #750	; 0x2ee
 8012bec:	e001      	b.n	8012bf2 <MBS_GetCharTime+0x6a>
 8012bee:	f240 63d6 	movw	r3, #1750	; 0x6d6
	}
	/*New Implementation only for test*/
//	return ceil(1000.0f * interval * MBS_GetByteTxTime(baudRate));
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	ecbd 8b02 	vpop	{d8}
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	2400022c 	.word	0x2400022c
 8012c04:	447a0000 	.word	0x447a0000

08012c08 <MBS_GetCharTimeCluster>:
/**
  * @brief to get the 1.5 7 3.5 char time for slave mode
  * @param none
  * @retval return timeout in us
  */
uint32_t MBS_GetCharTimeCluster(uint32_t baudRate, float charType){
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	ed2d 8b02 	vpush	{d8}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	ed87 0a00 	vstr	s0, [r7]
	return ceil(1000.0f * charType * MBS_GetByteTxTime(baudRate));
 8012c18:	edd7 7a00 	vldr	s15, [r7]
 8012c1c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8012c58 <MBS_GetCharTimeCluster+0x50>
 8012c20:	ee27 8a87 	vmul.f32	s16, s15, s14
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f000 f84b 	bl	8012cc0 <MBS_GetByteTxTime>
 8012c2a:	eef0 7a40 	vmov.f32	s15, s0
 8012c2e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012c32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012c36:	eeb0 0b47 	vmov.f64	d0, d7
 8012c3a:	f016 fd0d 	bl	8029658 <ceil>
 8012c3e:	eeb0 7b40 	vmov.f64	d7, d0
 8012c42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8012c46:	ee17 3a90 	vmov	r3, s15
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	ecbd 8b02 	vpop	{d8}
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	447a0000 	.word	0x447a0000

08012c5c <MBS_GetTransTimeout>:
  * @brief to get the transmission rate according to the number of byte to be sent
  *
  * @param none
  * @retval return timeout in ms
  */
static uint16_t MBS_GetTransTimeout(uint8_t size, uint32_t baudRate){
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	ed2d 8b02 	vpush	{d8}
 8012c62:	b082      	sub	sp, #8
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	4603      	mov	r3, r0
 8012c68:	6039      	str	r1, [r7, #0]
 8012c6a:	71fb      	strb	r3, [r7, #7]
		return (ceil((float)size*MBS_GetByteTxTime(baudRate)*1.1f)+1U);		// calculate serial transmission timeout
 8012c6c:	79fb      	ldrb	r3, [r7, #7]
 8012c6e:	ee07 3a90 	vmov	s15, r3
 8012c72:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8012c76:	6838      	ldr	r0, [r7, #0]
 8012c78:	f000 f822 	bl	8012cc0 <MBS_GetByteTxTime>
 8012c7c:	eef0 7a40 	vmov.f32	s15, s0
 8012c80:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012c84:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8012cbc <MBS_GetTransTimeout+0x60>
 8012c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012c90:	eeb0 0b47 	vmov.f64	d0, d7
 8012c94:	f016 fce0 	bl	8029658 <ceil>
 8012c98:	eeb0 7b40 	vmov.f64	d7, d0
 8012c9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012ca0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012ca4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8012ca8:	ee17 3a90 	vmov	r3, s15
 8012cac:	b29b      	uxth	r3, r3

}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	ecbd 8b02 	vpop	{d8}
 8012cb8:	bd80      	pop	{r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	3f8ccccd 	.word	0x3f8ccccd

08012cc0 <MBS_GetByteTxTime>:
  * fo 1 byte tx, we actually need to send 11bits in 1 frame
  * 1 frame = 11 bits = 1 stop bit + 8 bits data + 1 parity bit + 1 stop bit
  * @param none
  * @retval return timeout in ms
  */
static float MBS_GetByteTxTime(uint32_t baudRate){
 8012cc0:	b480      	push	{r7}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
	return (baudRate > 0 ? (11000.0f/(float)baudRate) : MBS_1CHAR_TX_TIMEOUT_MAX);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d009      	beq.n	8012ce2 <MBS_GetByteTxTime+0x22>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	ee07 3a90 	vmov	s15, r3
 8012cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cd8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8012cf8 <MBS_GetByteTxTime+0x38>
 8012cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012ce0:	e001      	b.n	8012ce6 <MBS_GetByteTxTime+0x26>
 8012ce2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8012cfc <MBS_GetByteTxTime+0x3c>
 8012ce6:	eef0 7a47 	vmov.f32	s15, s14
}
 8012cea:	eeb0 0a67 	vmov.f32	s0, s15
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr
 8012cf8:	462be000 	.word	0x462be000
 8012cfc:	3f856042 	.word	0x3f856042

08012d00 <MBTCP_SetHeader>:
	header->unitId = buff[MBTCP_INDX_UNIT_ID];
}



void MBTCP_SetHeader(uint8_t *buff, MBTCP_Header *header){
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]

	MBTOOL_SplitU16ToBytes(&buff[MBTCP_INDX_TRANS_ID_HI], &buff[MBTCP_INDX_TRANS_ID_LO], header->transId);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	1c59      	adds	r1, r3, #1
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	881b      	ldrh	r3, [r3, #0]
 8012d12:	461a      	mov	r2, r3
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f000 f923 	bl	8012f60 <MBTOOL_SplitU16ToBytes>
	MBTOOL_SplitU16ToBytes(&buff[MBTCP_INDX_PROTOCOL_ID_HI], &buff[MBTCP_INDX_PROTOCOL_ID_LO], header->protocolId);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	1c98      	adds	r0, r3, #2
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	1cd9      	adds	r1, r3, #3
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	885b      	ldrh	r3, [r3, #2]
 8012d26:	461a      	mov	r2, r3
 8012d28:	f000 f91a 	bl	8012f60 <MBTOOL_SplitU16ToBytes>
	MBTOOL_SplitU16ToBytes(&buff[MBTCP_INDX_LENGTH_HI], &buff[MBTCP_INDX_LENGTH_LO], header->length);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	1d18      	adds	r0, r3, #4
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	1d59      	adds	r1, r3, #5
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	889b      	ldrh	r3, [r3, #4]
 8012d38:	461a      	mov	r2, r3
 8012d3a:	f000 f911 	bl	8012f60 <MBTOOL_SplitU16ToBytes>
	buff[MBTCP_INDX_UNIT_ID] = header->unitId;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	3306      	adds	r3, #6
 8012d42:	683a      	ldr	r2, [r7, #0]
 8012d44:	7992      	ldrb	r2, [r2, #6]
 8012d46:	701a      	strb	r2, [r3, #0]
}
 8012d48:	bf00      	nop
 8012d4a:	3708      	adds	r7, #8
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}

08012d50 <MBTCP_isFunCodeValid>:
/**
  * @brief To check the function code
  * @param functionCode - received function code
  * @retval 1U or 0U, returns 1U for valid function code, or return 0U for invalid function code
  */
uint8_t MBTCP_isFunCodeValid(uint8_t functionCode){
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	4603      	mov	r3, r0
 8012d58:	71fb      	strb	r3, [r7, #7]
	// 1-227 is the range of supported function code public + user define function code
	return ((functionCode >= MB_FC_RC_01 && functionCode <= MB_FC_WSR_06)
	|| (functionCode >= MB_FC_WMC_15 && functionCode <= MB_FC_WMR_16)
 8012d5a:	79fb      	ldrb	r3, [r7, #7]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d002      	beq.n	8012d66 <MBTCP_isFunCodeValid+0x16>
	return ((functionCode >= MB_FC_RC_01 && functionCode <= MB_FC_WSR_06)
 8012d60:	79fb      	ldrb	r3, [r7, #7]
 8012d62:	2b06      	cmp	r3, #6
 8012d64:	d905      	bls.n	8012d72 <MBTCP_isFunCodeValid+0x22>
	|| (functionCode >= MB_FC_WMC_15 && functionCode <= MB_FC_WMR_16)
 8012d66:	79fb      	ldrb	r3, [r7, #7]
 8012d68:	2b0e      	cmp	r3, #14
 8012d6a:	d904      	bls.n	8012d76 <MBTCP_isFunCodeValid+0x26>
 8012d6c:	79fb      	ldrb	r3, [r7, #7]
 8012d6e:	2b10      	cmp	r3, #16
 8012d70:	d801      	bhi.n	8012d76 <MBTCP_isFunCodeValid+0x26>
 8012d72:	2301      	movs	r3, #1
 8012d74:	e000      	b.n	8012d78 <MBTCP_isFunCodeValid+0x28>
 8012d76:	2300      	movs	r3, #0
 8012d78:	b2db      	uxtb	r3, r3
//	|| (functionCode >= MB_FC_MWR_22 && functionCode <= MB_FC_RWMR_23)
//	|| (functionCode == 66u)
	);
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	370c      	adds	r7, #12
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr

08012d86 <MBTCPC_ClearPendingList>:


/**
* @brief add new transaction into the list
* */
void MBTCPC_ClearPendingList(MBTCPC_TransInfo *list){
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b084      	sub	sp, #16
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < MBTCPC_MAX_TRANS; i++){
 8012d8e:	2300      	movs	r3, #0
 8012d90:	73fb      	strb	r3, [r7, #15]
 8012d92:	e00c      	b.n	8012dae <MBTCPC_ClearPendingList+0x28>
    	MBTCPC_ClearTransInfo(&list[i]);
 8012d94:	7bfb      	ldrb	r3, [r7, #15]
 8012d96:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012d9a:	fb02 f303 	mul.w	r3, r2, r3
 8012d9e:	687a      	ldr	r2, [r7, #4]
 8012da0:	4413      	add	r3, r2
 8012da2:	4618      	mov	r0, r3
 8012da4:	f000 f80b 	bl	8012dbe <MBTCPC_ClearTransInfo>
    for(uint8_t i = 0; i < MBTCPC_MAX_TRANS; i++){
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
 8012daa:	3301      	adds	r3, #1
 8012dac:	73fb      	strb	r3, [r7, #15]
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d0ef      	beq.n	8012d94 <MBTCPC_ClearPendingList+0xe>
    }
}
 8012db4:	bf00      	nop
 8012db6:	bf00      	nop
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <MBTCPC_ClearTransInfo>:

/**
* @brief add new transaction into the list
* */
void MBTCPC_ClearTransInfo(MBTCPC_TransInfo *info){
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b082      	sub	sp, #8
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]

	info->isAvailable = 0;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	709a      	strb	r2, [r3, #2]
	info->transId = 0;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2200      	movs	r2, #0
 8012dd0:	809a      	strh	r2, [r3, #4]
	info->unitId = 0;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	719a      	strb	r2, [r3, #6]
	info->funCode = 0;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	71da      	strb	r2, [r3, #7]
	info->startAddr = 0;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2200      	movs	r2, #0
 8012de2:	811a      	strh	r2, [r3, #8]
	info->quantity = 0;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2200      	movs	r2, #0
 8012de8:	815a      	strh	r2, [r3, #10]
	info->slvStartAddr = 0;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2200      	movs	r2, #0
 8012dee:	739a      	strb	r2, [r3, #14]
	info->numOfSlv = 0;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2200      	movs	r2, #0
 8012df4:	73da      	strb	r2, [r3, #15]
	info->byteCount = 0;		// quantity of  registers, coils & discrete inputs
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	819a      	strh	r2, [r3, #12]
	info->lastRetryTime = 0;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	825a      	strh	r2, [r3, #18]
	info->retryTimeout = 0;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2200      	movs	r2, #0
 8012e06:	829a      	strh	r2, [r3, #20]
	info->retryCounter = 0;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	82da      	strh	r2, [r3, #22]
	info->retryCount = 0;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2200      	movs	r2, #0
 8012e12:	831a      	strh	r2, [r3, #24]
	memset(info->txBuff, 0, MBTCP_BUFF_SIZE);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	331a      	adds	r3, #26
 8012e18:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f013 fc88 	bl	8026734 <memset>
	memset(info->rxBuff, 0, MBTCP_BUFF_SIZE);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8012e2a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012e2e:	2100      	movs	r1, #0
 8012e30:	4618      	mov	r0, r3
 8012e32:	f013 fc7f 	bl	8026734 <memset>
	info->txBuffSize = 0;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	f8a3 22ea 	strh.w	r2, [r3, #746]	; 0x2ea
	info->rxBuffSize = 0;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2200      	movs	r2, #0
 8012e42:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec

}
 8012e46:	bf00      	nop
 8012e48:	3708      	adds	r7, #8
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <MBTCPS_ClearClientParams>:
/**
* @brief initialize  client which will connect to the modbus tcp server
* @param cParams: pointer to the struct of client params
* @retval none
*/
void MBTCPS_ClearClientParams(MBTCPS_ClientParams *cParams){
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b082      	sub	sp, #8
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
	cParams->id 		 = 0U;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	601a      	str	r2, [r3, #0]
	cParams->sockId 		 = 0U;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	715a      	strb	r2, [r3, #5]
	cParams->port  	 = 0U;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2200      	movs	r2, #0
 8012e66:	821a      	strh	r2, [r3, #16]
	cParams->transId  	 = 0U;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	825a      	strh	r2, [r3, #18]
	cParams->protocolId  = 0U;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	2200      	movs	r2, #0
 8012e72:	829a      	strh	r2, [r3, #20]
	cParams->length		 = 0U;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2200      	movs	r2, #0
 8012e78:	82da      	strh	r2, [r3, #22]
	cParams->unitId 	 = 0U;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	761a      	strb	r2, [r3, #24]
	cParams->excepCode 	 = 0U;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2200      	movs	r2, #0
 8012e84:	769a      	strb	r2, [r3, #26]
//	cParams->curntTrnsNo = 0U;
	memset(cParams->ip,0, (sizeof(cParams->ip)/sizeof(cParams->ip[0])));
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	3306      	adds	r3, #6
 8012e8a:	2204      	movs	r2, #4
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f013 fc50 	bl	8026734 <memset>
	memset(cParams->mac,0, (sizeof(cParams->ip)/sizeof(cParams->mac[0])));
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	330a      	adds	r3, #10
 8012e98:	2204      	movs	r2, #4
 8012e9a:	2100      	movs	r1, #0
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f013 fc49 	bl	8026734 <memset>
	memset(cParams->rxBuff,0, (sizeof(cParams->rxBuff)/sizeof(cParams->rxBuff[0])));
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	331b      	adds	r3, #27
 8012ea6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012eaa:	2100      	movs	r1, #0
 8012eac:	4618      	mov	r0, r3
 8012eae:	f013 fc41 	bl	8026734 <memset>
	memset(cParams->txBuff,0, (sizeof(cParams->txBuff)/sizeof(cParams->txBuff[0])));
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f203 1383 	addw	r3, r3, #387	; 0x183
 8012eb8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012ebc:	2100      	movs	r1, #0
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f013 fc38 	bl	8026734 <memset>
	cParams->rxBuffSize = 0U;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	cParams->txBuffSize = 0U;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee
}
 8012ed4:	bf00      	nop
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <MBTCPS_FindClientByIdAndPort>:
* @brief find the client from connected client list by id & port
* @param mbtcps: pointer to the struct of modbus tcp server
* @param client: pointer to the struct of client
* @retval returns error status, 0 = not found, 1 = found
*/
uint8_t MBTCPS_FindClientByIdAndPort(MB_TCPServer *mbtcps, uint32_t id,  uint32_t port){
 8012edc:	b480      	push	{r7}
 8012ede:	b087      	sub	sp, #28
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	607a      	str	r2, [r7, #4]
	for(uint8_t i = 0; i < MBTCPS_MAX_CONNS; i++){
 8012ee8:	2300      	movs	r3, #0
 8012eea:	75fb      	strb	r3, [r7, #23]
 8012eec:	e020      	b.n	8012f30 <MBTCPS_FindClientByIdAndPort+0x54>
		if((mbtcps->clients[i].id == id) && (mbtcps->clients[i].port == port)){
 8012eee:	7dfb      	ldrb	r3, [r7, #23]
 8012ef0:	68fa      	ldr	r2, [r7, #12]
 8012ef2:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8012ef6:	fb01 f303 	mul.w	r3, r1, r3
 8012efa:	4413      	add	r3, r2
 8012efc:	331c      	adds	r3, #28
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	68ba      	ldr	r2, [r7, #8]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d111      	bne.n	8012f2a <MBTCPS_FindClientByIdAndPort+0x4e>
 8012f06:	7dfb      	ldrb	r3, [r7, #23]
 8012f08:	68fa      	ldr	r2, [r7, #12]
 8012f0a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8012f0e:	fb01 f303 	mul.w	r3, r1, r3
 8012f12:	4413      	add	r3, r2
 8012f14:	332c      	adds	r3, #44	; 0x2c
 8012f16:	881b      	ldrh	r3, [r3, #0]
 8012f18:	461a      	mov	r2, r3
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d104      	bne.n	8012f2a <MBTCPS_FindClientByIdAndPort+0x4e>
			mbtcps->clientIndex = i;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	7dfa      	ldrb	r2, [r7, #23]
 8012f24:	709a      	strb	r2, [r3, #2]
			return MB_OK;
 8012f26:	2301      	movs	r3, #1
 8012f28:	e006      	b.n	8012f38 <MBTCPS_FindClientByIdAndPort+0x5c>
	for(uint8_t i = 0; i < MBTCPS_MAX_CONNS; i++){
 8012f2a:	7dfb      	ldrb	r3, [r7, #23]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	75fb      	strb	r3, [r7, #23]
 8012f30:	7dfb      	ldrb	r3, [r7, #23]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d0db      	beq.n	8012eee <MBTCPS_FindClientByIdAndPort+0x12>
		}
	}
	return MB_ERROR;
 8012f36:	2300      	movs	r3, #0
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	371c      	adds	r7, #28
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f42:	4770      	bx	lr

08012f44 <MBTCPS_Send>:
	memcpy(mbtcps->clients[clientIndex].txBuff, mbtcps->clients[clientIndex].rxBuff, 4);
}



void MBTCPS_Send(MBTCPS_ClientParams *client){
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
	MBTCPS_SendCallback(client);
 8012f4c:	4b03      	ldr	r3, [pc, #12]	; (8012f5c <MBTCPS_Send+0x18>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	4798      	blx	r3
}
 8012f54:	bf00      	nop
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	24005fe0 	.word	0x24005fe0

08012f60 <MBTOOL_SplitU16ToBytes>:
}

/**
  * @brief combines 2 separate bytes into a single 2 byte variable
  */
void MBTOOL_SplitU16ToBytes(uint8_t *highByte, uint8_t *lowByte, uint16_t u16){
 8012f60:	b480      	push	{r7}
 8012f62:	b085      	sub	sp, #20
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	80fb      	strh	r3, [r7, #6]
	*highByte = (uint8_t)((u16>>8)&0xFF);	// MS byte
 8012f6e:	88fb      	ldrh	r3, [r7, #6]
 8012f70:	0a1b      	lsrs	r3, r3, #8
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	b2da      	uxtb	r2, r3
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	701a      	strb	r2, [r3, #0]
	*lowByte = (uint8_t)(u16&0x00FF);		// LS byte
 8012f7a:	88fb      	ldrh	r3, [r7, #6]
 8012f7c:	b2da      	uxtb	r2, r3
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	701a      	strb	r2, [r3, #0]
}
 8012f82:	bf00      	nop
 8012f84:	3714      	adds	r7, #20
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr
	...

08012f90 <MB_UartInit>:
/**
  * @brief Initialize uart for modbus serial line in interrupt mode
  * @param none
  * @retval 0 = error, 1 = no error
  */
uint8_t MB_UartInit(UART_HandleTypeDef *_uart, USART_TypeDef *Instance, uint32_t baudRate){
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	60f8      	str	r0, [r7, #12]
 8012f98:	60b9      	str	r1, [r7, #8]
 8012f9a:	607a      	str	r2, [r7, #4]
	uart = _uart;
 8012f9c:	4a26      	ldr	r2, [pc, #152]	; (8013038 <MB_UartInit+0xa8>)
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	6013      	str	r3, [r2, #0]
	_uart->Instance = Instance;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	68ba      	ldr	r2, [r7, #8]
 8012fa6:	601a      	str	r2, [r3, #0]
	_uart->Init.BaudRate = baudRate;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	605a      	str	r2, [r3, #4]
	_uart->Init.WordLength = UART_WORDLENGTH_9B;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012fb4:	609a      	str	r2, [r3, #8]
	_uart->Init.StopBits = UART_STOPBITS_1;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	60da      	str	r2, [r3, #12]
	_uart->Init.Parity = UART_PARITY_EVEN;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012fc2:	611a      	str	r2, [r3, #16]
	_uart->Init.Mode = UART_MODE_TX_RX;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	220c      	movs	r2, #12
 8012fc8:	615a      	str	r2, [r3, #20]
	_uart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	619a      	str	r2, [r3, #24]
	_uart->Init.OverSampling = UART_OVERSAMPLING_8;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012fd6:	61da      	str	r2, [r3, #28]
	_uart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	621a      	str	r2, [r3, #32]
	_uart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	625a      	str	r2, [r3, #36]	; 0x24
	_uart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(_uart) != HAL_OK) {
 8012fea:	68f8      	ldr	r0, [r7, #12]
 8012fec:	f011 fc32 	bl	8024854 <HAL_UART_Init>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d001      	beq.n	8012ffa <MB_UartInit+0x6a>
		return 0;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	e01a      	b.n	8013030 <MB_UartInit+0xa0>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(_uart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK){
 8012ffa:	2100      	movs	r1, #0
 8012ffc:	68f8      	ldr	r0, [r7, #12]
 8012ffe:	f013 f96c 	bl	80262da <HAL_UARTEx_SetTxFifoThreshold>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d001      	beq.n	801300c <MB_UartInit+0x7c>
		 return 0;
 8013008:	2300      	movs	r3, #0
 801300a:	e011      	b.n	8013030 <MB_UartInit+0xa0>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(_uart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK){
 801300c:	2100      	movs	r1, #0
 801300e:	68f8      	ldr	r0, [r7, #12]
 8013010:	f013 f9a1 	bl	8026356 <HAL_UARTEx_SetRxFifoThreshold>
 8013014:	4603      	mov	r3, r0
 8013016:	2b00      	cmp	r3, #0
 8013018:	d001      	beq.n	801301e <MB_UartInit+0x8e>
		 return 0;
 801301a:	2300      	movs	r3, #0
 801301c:	e008      	b.n	8013030 <MB_UartInit+0xa0>
	}
	if (HAL_UARTEx_DisableFifoMode(_uart) != HAL_OK){
 801301e:	68f8      	ldr	r0, [r7, #12]
 8013020:	f013 f922 	bl	8026268 <HAL_UARTEx_DisableFifoMode>
 8013024:	4603      	mov	r3, r0
 8013026:	2b00      	cmp	r3, #0
 8013028:	d001      	beq.n	801302e <MB_UartInit+0x9e>
		 return 0;
 801302a:	2300      	movs	r3, #0
 801302c:	e000      	b.n	8013030 <MB_UartInit+0xa0>
	}

	return 1;
 801302e:	2301      	movs	r3, #1
}
 8013030:	4618      	mov	r0, r3
 8013032:	3710      	adds	r7, #16
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	24005ff0 	.word	0x24005ff0

0801303c <MB_UartInitDMA>:
  * @brief Initialize uart for modbus serial line in DMA mode
  * @param none
  * @retval 0 = error, 1 = no error
  */

uint8_t MB_UartInitDMA( DMA_HandleTypeDef *_dma_uart_rx, DMA_HandleTypeDef *_dma_uart_tx){
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]

//	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	  __HAL_RCC_DMA1_CLK_ENABLE();
 8013046:	4b0e      	ldr	r3, [pc, #56]	; (8013080 <MB_UartInitDMA+0x44>)
 8013048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801304c:	4a0c      	ldr	r2, [pc, #48]	; (8013080 <MB_UartInitDMA+0x44>)
 801304e:	f043 0301 	orr.w	r3, r3, #1
 8013052:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8013056:	4b0a      	ldr	r3, [pc, #40]	; (8013080 <MB_UartInitDMA+0x44>)
 8013058:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801305c:	f003 0301 	and.w	r3, r3, #1
 8013060:	60fb      	str	r3, [r7, #12]
 8013062:	68fb      	ldr	r3, [r7, #12]
	dma_uart_rx = _dma_uart_rx;
 8013064:	4a07      	ldr	r2, [pc, #28]	; (8013084 <MB_UartInitDMA+0x48>)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6013      	str	r3, [r2, #0]
	dma_uart_tx = _dma_uart_tx;
 801306a:	4a07      	ldr	r2, [pc, #28]	; (8013088 <MB_UartInitDMA+0x4c>)
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	6013      	str	r3, [r2, #0]
//    HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
//    /* DMA1_Stream1_IRQn interrupt configuration */
//    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
	return 1;
 8013070:	2301      	movs	r3, #1
}
 8013072:	4618      	mov	r0, r3
 8013074:	3714      	adds	r7, #20
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop
 8013080:	58024400 	.word	0x58024400
 8013084:	24005fec 	.word	0x24005fec
 8013088:	24005fe8 	.word	0x24005fe8

0801308c <MB_UartSendDMA>:



HAL_StatusTypeDef MB_UartSendDMA(uint8_t *buffer, uint16_t size){
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	460b      	mov	r3, r1
 8013096:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Transmit_DMA(uart, buffer, size);
 8013098:	4b05      	ldr	r3, [pc, #20]	; (80130b0 <MB_UartSendDMA+0x24>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	887a      	ldrh	r2, [r7, #2]
 801309e:	6879      	ldr	r1, [r7, #4]
 80130a0:	4618      	mov	r0, r3
 80130a2:	f011 fd91 	bl	8024bc8 <HAL_UART_Transmit_DMA>
 80130a6:	4603      	mov	r3, r0
//	return MB_BM_UartSendDMA(buffer, size);
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3708      	adds	r7, #8
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	24005ff0 	.word	0x24005ff0

080130b4 <MB_UartReceiveDMA>:
	    return HAL_BUSY;
	  }
}


HAL_StatusTypeDef MB_UartReceiveDMA(uint8_t *buffer, uint16_t size){
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	460b      	mov	r3, r1
 80130be:	807b      	strh	r3, [r7, #2]

	HAL_StatusTypeDef status;

	status = HAL_UARTEx_ReceiveToIdle_DMA(uart, buffer, size);
 80130c0:	4b41      	ldr	r3, [pc, #260]	; (80131c8 <MB_UartReceiveDMA+0x114>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	887a      	ldrh	r2, [r7, #2]
 80130c6:	6879      	ldr	r1, [r7, #4]
 80130c8:	4618      	mov	r0, r3
 80130ca:	f013 f982 	bl	80263d2 <HAL_UARTEx_ReceiveToIdle_DMA>
 80130ce:	4603      	mov	r3, r0
 80130d0:	73fb      	strb	r3, [r7, #15]
	__HAL_DMA_DISABLE_IT(dma_uart_rx, DMA_IT_HT);
 80130d2:	4b3e      	ldr	r3, [pc, #248]	; (80131cc <MB_UartReceiveDMA+0x118>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4a3d      	ldr	r2, [pc, #244]	; (80131d0 <MB_UartReceiveDMA+0x11c>)
 80130da:	4293      	cmp	r3, r2
 80130dc:	d059      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 80130de:	4b3b      	ldr	r3, [pc, #236]	; (80131cc <MB_UartReceiveDMA+0x118>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4a3b      	ldr	r2, [pc, #236]	; (80131d4 <MB_UartReceiveDMA+0x120>)
 80130e6:	4293      	cmp	r3, r2
 80130e8:	d053      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 80130ea:	4b38      	ldr	r3, [pc, #224]	; (80131cc <MB_UartReceiveDMA+0x118>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	4a39      	ldr	r2, [pc, #228]	; (80131d8 <MB_UartReceiveDMA+0x124>)
 80130f2:	4293      	cmp	r3, r2
 80130f4:	d04d      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 80130f6:	4b35      	ldr	r3, [pc, #212]	; (80131cc <MB_UartReceiveDMA+0x118>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a37      	ldr	r2, [pc, #220]	; (80131dc <MB_UartReceiveDMA+0x128>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d047      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 8013102:	4b32      	ldr	r3, [pc, #200]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	4a35      	ldr	r2, [pc, #212]	; (80131e0 <MB_UartReceiveDMA+0x12c>)
 801310a:	4293      	cmp	r3, r2
 801310c:	d041      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 801310e:	4b2f      	ldr	r3, [pc, #188]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	4a33      	ldr	r2, [pc, #204]	; (80131e4 <MB_UartReceiveDMA+0x130>)
 8013116:	4293      	cmp	r3, r2
 8013118:	d03b      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 801311a:	4b2c      	ldr	r3, [pc, #176]	; (80131cc <MB_UartReceiveDMA+0x118>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a31      	ldr	r2, [pc, #196]	; (80131e8 <MB_UartReceiveDMA+0x134>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d035      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 8013126:	4b29      	ldr	r3, [pc, #164]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	4a2f      	ldr	r2, [pc, #188]	; (80131ec <MB_UartReceiveDMA+0x138>)
 801312e:	4293      	cmp	r3, r2
 8013130:	d02f      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 8013132:	4b26      	ldr	r3, [pc, #152]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	4a2d      	ldr	r2, [pc, #180]	; (80131f0 <MB_UartReceiveDMA+0x13c>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d029      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 801313e:	4b23      	ldr	r3, [pc, #140]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	4a2b      	ldr	r2, [pc, #172]	; (80131f4 <MB_UartReceiveDMA+0x140>)
 8013146:	4293      	cmp	r3, r2
 8013148:	d023      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 801314a:	4b20      	ldr	r3, [pc, #128]	; (80131cc <MB_UartReceiveDMA+0x118>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	4a29      	ldr	r2, [pc, #164]	; (80131f8 <MB_UartReceiveDMA+0x144>)
 8013152:	4293      	cmp	r3, r2
 8013154:	d01d      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 8013156:	4b1d      	ldr	r3, [pc, #116]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	4a27      	ldr	r2, [pc, #156]	; (80131fc <MB_UartReceiveDMA+0x148>)
 801315e:	4293      	cmp	r3, r2
 8013160:	d017      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 8013162:	4b1a      	ldr	r3, [pc, #104]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a25      	ldr	r2, [pc, #148]	; (8013200 <MB_UartReceiveDMA+0x14c>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d011      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 801316e:	4b17      	ldr	r3, [pc, #92]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	4a23      	ldr	r2, [pc, #140]	; (8013204 <MB_UartReceiveDMA+0x150>)
 8013176:	4293      	cmp	r3, r2
 8013178:	d00b      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 801317a:	4b14      	ldr	r3, [pc, #80]	; (80131cc <MB_UartReceiveDMA+0x118>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4a21      	ldr	r2, [pc, #132]	; (8013208 <MB_UartReceiveDMA+0x154>)
 8013182:	4293      	cmp	r3, r2
 8013184:	d005      	beq.n	8013192 <MB_UartReceiveDMA+0xde>
 8013186:	4b11      	ldr	r3, [pc, #68]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4a1f      	ldr	r2, [pc, #124]	; (801320c <MB_UartReceiveDMA+0x158>)
 801318e:	4293      	cmp	r3, r2
 8013190:	d10a      	bne.n	80131a8 <MB_UartReceiveDMA+0xf4>
 8013192:	4b0e      	ldr	r3, [pc, #56]	; (80131cc <MB_UartReceiveDMA+0x118>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	4b0c      	ldr	r3, [pc, #48]	; (80131cc <MB_UartReceiveDMA+0x118>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f022 0208 	bic.w	r2, r2, #8
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	e009      	b.n	80131bc <MB_UartReceiveDMA+0x108>
 80131a8:	4b08      	ldr	r3, [pc, #32]	; (80131cc <MB_UartReceiveDMA+0x118>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	4b06      	ldr	r3, [pc, #24]	; (80131cc <MB_UartReceiveDMA+0x118>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f022 0204 	bic.w	r2, r2, #4
 80131ba:	601a      	str	r2, [r3, #0]
	return status;
 80131bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3710      	adds	r7, #16
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	24005ff0 	.word	0x24005ff0
 80131cc:	24005fec 	.word	0x24005fec
 80131d0:	40020010 	.word	0x40020010
 80131d4:	40020028 	.word	0x40020028
 80131d8:	40020040 	.word	0x40020040
 80131dc:	40020058 	.word	0x40020058
 80131e0:	40020070 	.word	0x40020070
 80131e4:	40020088 	.word	0x40020088
 80131e8:	400200a0 	.word	0x400200a0
 80131ec:	400200b8 	.word	0x400200b8
 80131f0:	40020410 	.word	0x40020410
 80131f4:	40020428 	.word	0x40020428
 80131f8:	40020440 	.word	0x40020440
 80131fc:	40020458 	.word	0x40020458
 8013200:	40020470 	.word	0x40020470
 8013204:	40020488 	.word	0x40020488
 8013208:	400204a0 	.word	0x400204a0
 801320c:	400204b8 	.word	0x400204b8

08013210 <PCA_AttachI2C>:
/**
  * @brief  Attach I2C to PCA9557 IO Extender
  * @param  i2c: pointer to the i2c port struct
  * @retval none
  */
PCA_Error_te PCA_AttachI2C(I2C_HandleTypeDef* hi2c){
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
	if(hi2c == NULL) return PCA_ERR_NULL_PTR;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d102      	bne.n	8013224 <PCA_AttachI2C+0x14>
 801321e:	f06f 0303 	mvn.w	r3, #3
 8013222:	e003      	b.n	801322c <PCA_AttachI2C+0x1c>
	i2c = hi2c;
 8013224:	4a04      	ldr	r2, [pc, #16]	; (8013238 <PCA_AttachI2C+0x28>)
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6013      	str	r3, [r2, #0]
	return PCA_ERR_NONE;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	370c      	adds	r7, #12
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr
 8013238:	24005ffc 	.word	0x24005ffc

0801323c <PCA_Init>:
  * @brief  Initialize PCA9557 and set address
  * @param  pca: pointer to the PCA9557_IOExt_ts struct
  * @param  devAddr: address of the PCA9557 chip
  * @retval none
  */
PCA_Error_te PCA_Init(PCA9557_IOExt_ts* pca, uint8_t devAddr){
 801323c:	b590      	push	{r4, r7, lr}
 801323e:	b087      	sub	sp, #28
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	460b      	mov	r3, r1
 8013246:	70fb      	strb	r3, [r7, #3]
//	DBG_SPRINT_NL("hi2c1: %p", hi2c1);
	if(pca == NULL || i2c == NULL) {
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d003      	beq.n	8013256 <PCA_Init+0x1a>
 801324e:	4b1e      	ldr	r3, [pc, #120]	; (80132c8 <PCA_Init+0x8c>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d102      	bne.n	801325c <PCA_Init+0x20>
		return PCA_ERR_NULL_PTR;
 8013256:	f06f 0303 	mvn.w	r3, #3
 801325a:	e030      	b.n	80132be <PCA_Init+0x82>
	}else if(devAddr >= PCA_DEV_ADDR_MAX){
 801325c:	78fb      	ldrb	r3, [r7, #3]
 801325e:	2b07      	cmp	r3, #7
 8013260:	d902      	bls.n	8013268 <PCA_Init+0x2c>
		return PCA_ERR_INVALID_DEV_ADDRES;
 8013262:	f06f 0305 	mvn.w	r3, #5
 8013266:	e02a      	b.n	80132be <PCA_Init+0x82>
	}
	PCA9557_IOExt_ts pcaIOEx = {0};
 8013268:	f107 0308 	add.w	r3, r7, #8
 801326c:	2200      	movs	r2, #0
 801326e:	601a      	str	r2, [r3, #0]
 8013270:	605a      	str	r2, [r3, #4]
 8013272:	609a      	str	r2, [r3, #8]
	*pca = pcaIOEx;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	461c      	mov	r4, r3
 8013278:	f107 0308 	add.w	r3, r7, #8
 801327c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	pca->devAddress = devAddr;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	78fa      	ldrb	r2, [r7, #3]
 8013288:	701a      	strb	r2, [r3, #0]
	devAddr = GET_DEV_ADDR(devAddr, PCA_WR_DIR_W);
 801328a:	78fb      	ldrb	r3, [r7, #3]
 801328c:	005b      	lsls	r3, r3, #1
 801328e:	b25b      	sxtb	r3, r3
 8013290:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8013294:	b25b      	sxtb	r3, r3
 8013296:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(i2c, devAddr, 3, 3);
 8013298:	4b0b      	ldr	r3, [pc, #44]	; (80132c8 <PCA_Init+0x8c>)
 801329a:	6818      	ldr	r0, [r3, #0]
 801329c:	78fb      	ldrb	r3, [r7, #3]
 801329e:	b299      	uxth	r1, r3
 80132a0:	2303      	movs	r3, #3
 80132a2:	2203      	movs	r2, #3
 80132a4:	f009 f86e 	bl	801c384 <HAL_I2C_IsDeviceReady>
 80132a8:	4603      	mov	r3, r0
 80132aa:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK){
 80132ac:	7dfb      	ldrb	r3, [r7, #23]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d004      	beq.n	80132bc <PCA_Init+0x80>
		return CONV_ERROR(status);
 80132b2:	7dfb      	ldrb	r3, [r7, #23]
 80132b4:	425b      	negs	r3, r3
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	b25b      	sxtb	r3, r3
 80132ba:	e000      	b.n	80132be <PCA_Init+0x82>
	}
	return PCA_ERR_NONE;
 80132bc:	2300      	movs	r3, #0
}
 80132be:	4618      	mov	r0, r3
 80132c0:	371c      	adds	r7, #28
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd90      	pop	{r4, r7, pc}
 80132c6:	bf00      	nop
 80132c8:	24005ffc 	.word	0x24005ffc

080132cc <PCA_ConfigPin>:
/**
  * @brief  Configure PCA9557 Pins
  * @param  i2c: void pointer to the i2c port struct
  * @retval none
  */
PCA_Error_te PCA_ConfigPin(PCA9557_IOExt_ts* pca){
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b084      	sub	sp, #16
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
	if(pca == NULL){
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d102      	bne.n	80132e0 <PCA_ConfigPin+0x14>
		return PCA_ERR_NULL_PTR;
 80132da:	f06f 0303 	mvn.w	r3, #3
 80132de:	e02a      	b.n	8013336 <PCA_ConfigPin+0x6a>
	}else if(pca->devAddress >= PCA_DEV_ADDR_MAX){
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	2b07      	cmp	r3, #7
 80132e6:	d902      	bls.n	80132ee <PCA_ConfigPin+0x22>
		return PCA_ERR_INVALID_DEV_ADDRES;
 80132e8:	f06f 0305 	mvn.w	r3, #5
 80132ec:	e023      	b.n	8013336 <PCA_ConfigPin+0x6a>
	}
	/*Write Pin mode configuration register*/
	PCA_Error_te errStatus = PCA_WriteReg(pca->devAddress,
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	7818      	ldrb	r0, [r3, #0]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	791b      	ldrb	r3, [r3, #4]
 80132f6:	461a      	mov	r2, r3
 80132f8:	2103      	movs	r1, #3
 80132fa:	f000 f851 	bl	80133a0 <PCA_WriteReg>
 80132fe:	4603      	mov	r3, r0
 8013300:	73fb      	strb	r3, [r7, #15]
											PCA_CONFIG_REG,
											pca->CR.value);
	if(errStatus != PCA_ERR_NONE){
 8013302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d002      	beq.n	8013310 <PCA_ConfigPin+0x44>
		return errStatus;
 801330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801330e:	e012      	b.n	8013336 <PCA_ConfigPin+0x6a>
	}
	/*Write pin polarity inversion register*/
	errStatus = PCA_WriteReg( pca->devAddress,
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	7818      	ldrb	r0, [r3, #0]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	795b      	ldrb	r3, [r3, #5]
 8013318:	461a      	mov	r2, r3
 801331a:	2102      	movs	r1, #2
 801331c:	f000 f840 	bl	80133a0 <PCA_WriteReg>
 8013320:	4603      	mov	r3, r0
 8013322:	73fb      	strb	r3, [r7, #15]
								PCA_POLARINV_REG,
								pca->PR.value);
	if(errStatus != PCA_ERR_NONE){
 8013324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d002      	beq.n	8013332 <PCA_ConfigPin+0x66>
		return errStatus;
 801332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013330:	e001      	b.n	8013336 <PCA_ConfigPin+0x6a>
	}

	return errStatus;
 8013332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013336:	4618      	mov	r0, r3
 8013338:	3710      	adds	r7, #16
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}

0801333e <PCA_WritePinAllIT>:
  * @param  devAddr: 3-bits Device address
  * @param  selectReg: register address to select the target register
  * @param  data: data pointer to be write
  * @retval none
  */
PCA_Error_te PCA_WritePinAllIT(PCA9557_IOExt_ts* pca,  uint8_t state){
 801333e:	b580      	push	{r7, lr}
 8013340:	b084      	sub	sp, #16
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
 8013346:	460b      	mov	r3, r1
 8013348:	70fb      	strb	r3, [r7, #3]
	if(pca == NULL){
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d102      	bne.n	8013356 <PCA_WritePinAllIT+0x18>
		return PCA_ERR_NULL_PTR;
 8013350:	f06f 0303 	mvn.w	r3, #3
 8013354:	e01f      	b.n	8013396 <PCA_WritePinAllIT+0x58>
	}else if(pca->devAddress >= PCA_DEV_ADDR_MAX){
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	2b07      	cmp	r3, #7
 801335c:	d902      	bls.n	8013364 <PCA_WritePinAllIT+0x26>
		return PCA_ERR_INVALID_DEV_ADDRES;
 801335e:	f06f 0305 	mvn.w	r3, #5
 8013362:	e018      	b.n	8013396 <PCA_WritePinAllIT+0x58>
	}


	/*Write Pin Output state register*/
	PCA_Error_te errStatus = PCA_WriteRegIT(pca, pca->devAddress,
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	7819      	ldrb	r1, [r3, #0]
 8013368:	78fb      	ldrb	r3, [r7, #3]
 801336a:	2201      	movs	r2, #1
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f000 f859 	bl	8013424 <PCA_WriteRegIT>
 8013372:	4603      	mov	r3, r0
 8013374:	73fb      	strb	r3, [r7, #15]
											PCA_OUTPUT_REG,
											state);
	if(errStatus != PCA_ERR_NONE){
 8013376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d002      	beq.n	8013384 <PCA_WritePinAllIT+0x46>
		return errStatus;
 801337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013382:	e008      	b.n	8013396 <PCA_WritePinAllIT+0x58>
	}
	pca->flag.writeCmplt = PCA_WRITE_NOT_COMPLETED;
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	79d3      	ldrb	r3, [r2, #7]
 8013388:	f043 0301 	orr.w	r3, r3, #1
 801338c:	71d3      	strb	r3, [r2, #7]
	pca->SR.value = state;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	78fa      	ldrb	r2, [r7, #3]
 8013392:	70da      	strb	r2, [r3, #3]
	return PCA_ERR_NONE;
 8013394:	2300      	movs	r3, #0
}
 8013396:	4618      	mov	r0, r3
 8013398:	3710      	adds	r7, #16
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
	...

080133a0 <PCA_WriteReg>:
  * @param  devAddr: 3-bits Device address
  * @param  selectReg: register address to select the target register
  * @param  data: data pointer to be write
  * @retval none
  */
PCA_Error_te PCA_WriteReg(uint8_t devAddr, PCA_Registers_te selectReg, uint8_t data){
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b086      	sub	sp, #24
 80133a4:	af02      	add	r7, sp, #8
 80133a6:	4603      	mov	r3, r0
 80133a8:	71fb      	strb	r3, [r7, #7]
 80133aa:	460b      	mov	r3, r1
 80133ac:	71bb      	strb	r3, [r7, #6]
 80133ae:	4613      	mov	r3, r2
 80133b0:	717b      	strb	r3, [r7, #5]
	/*Check errors*/
	if(devAddr >= PCA_DEV_ADDR_MAX){
 80133b2:	79fb      	ldrb	r3, [r7, #7]
 80133b4:	2b07      	cmp	r3, #7
 80133b6:	d902      	bls.n	80133be <PCA_WriteReg+0x1e>
		return PCA_ERR_INVALID_DEV_ADDRES;
 80133b8:	f06f 0305 	mvn.w	r3, #5
 80133bc:	e02b      	b.n	8013416 <PCA_WriteReg+0x76>
	}else if(selectReg >= PCA_MAX_REG){
 80133be:	79bb      	ldrb	r3, [r7, #6]
 80133c0:	2b03      	cmp	r3, #3
 80133c2:	d902      	bls.n	80133ca <PCA_WriteReg+0x2a>
		return PCA_ERR_INVALID_REGISTER;
 80133c4:	f06f 0306 	mvn.w	r3, #6
 80133c8:	e025      	b.n	8013416 <PCA_WriteReg+0x76>
	}

	uint8_t buff[2] = {0};
 80133ca:	2300      	movs	r3, #0
 80133cc:	81bb      	strh	r3, [r7, #12]
	buff[0] = (uint8_t)selectReg;
 80133ce:	79bb      	ldrb	r3, [r7, #6]
 80133d0:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 80133d2:	797b      	ldrb	r3, [r7, #5]
 80133d4:	737b      	strb	r3, [r7, #13]
	/*Write and mask insure the WR direction bit is set to the write mode*/
	devAddr = GET_DEV_ADDR(devAddr, PCA_WR_DIR_W);//(PCA_DEV_FIXED_ADDR | (devAddr<<1)) & PCA_WR_DIR_W_AND_MASK;
 80133d6:	79fb      	ldrb	r3, [r7, #7]
 80133d8:	005b      	lsls	r3, r3, #1
 80133da:	b25b      	sxtb	r3, r3
 80133dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80133e0:	b25b      	sxtb	r3, r3
 80133e2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit(i2c, devAddr, buff, 2, 2);
 80133e4:	4b0e      	ldr	r3, [pc, #56]	; (8013420 <PCA_WriteReg+0x80>)
 80133e6:	6818      	ldr	r0, [r3, #0]
 80133e8:	79fb      	ldrb	r3, [r7, #7]
 80133ea:	b299      	uxth	r1, r3
 80133ec:	f107 020c 	add.w	r2, r7, #12
 80133f0:	2302      	movs	r3, #2
 80133f2:	9300      	str	r3, [sp, #0]
 80133f4:	2302      	movs	r3, #2
 80133f6:	f008 fd6b 	bl	801bed0 <HAL_I2C_Master_Transmit>
 80133fa:	4603      	mov	r3, r0
 80133fc:	73fb      	strb	r3, [r7, #15]
	if(stat != HAL_OK){
 80133fe:	7bfb      	ldrb	r3, [r7, #15]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d004      	beq.n	801340e <PCA_WriteReg+0x6e>
		return CONV_ERROR(stat);
 8013404:	7bfb      	ldrb	r3, [r7, #15]
 8013406:	425b      	negs	r3, r3
 8013408:	b2db      	uxtb	r3, r3
 801340a:	b25b      	sxtb	r3, r3
 801340c:	e003      	b.n	8013416 <PCA_WriteReg+0x76>
	}
	i2c->ErrorCode;
 801340e:	4b04      	ldr	r3, [pc, #16]	; (8013420 <PCA_WriteReg+0x80>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	6c5b      	ldr	r3, [r3, #68]	; 0x44

	return PCA_ERR_NONE;
 8013414:	2300      	movs	r3, #0

}
 8013416:	4618      	mov	r0, r3
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	24005ffc 	.word	0x24005ffc

08013424 <PCA_WriteRegIT>:
  * @param  devAddr: 3-bits Device address
  * @param  selectReg: register address to select the target register
  * @param  data: data pointer to be write
  * @retval none
  */
PCA_Error_te PCA_WriteRegIT(PCA9557_IOExt_ts* pca, uint8_t devAddr, PCA_Registers_te selectReg, uint8_t data){
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	4608      	mov	r0, r1
 801342e:	4611      	mov	r1, r2
 8013430:	461a      	mov	r2, r3
 8013432:	4603      	mov	r3, r0
 8013434:	70fb      	strb	r3, [r7, #3]
 8013436:	460b      	mov	r3, r1
 8013438:	70bb      	strb	r3, [r7, #2]
 801343a:	4613      	mov	r3, r2
 801343c:	707b      	strb	r3, [r7, #1]

	/*Check errors*/
	if(devAddr >= PCA_DEV_ADDR_MAX){
 801343e:	78fb      	ldrb	r3, [r7, #3]
 8013440:	2b07      	cmp	r3, #7
 8013442:	d902      	bls.n	801344a <PCA_WriteRegIT+0x26>
		return PCA_ERR_INVALID_DEV_ADDRES;
 8013444:	f06f 0305 	mvn.w	r3, #5
 8013448:	e033      	b.n	80134b2 <PCA_WriteRegIT+0x8e>
	}else if(selectReg >= PCA_MAX_REG){
 801344a:	78bb      	ldrb	r3, [r7, #2]
 801344c:	2b03      	cmp	r3, #3
 801344e:	d902      	bls.n	8013456 <PCA_WriteRegIT+0x32>
		return PCA_ERR_INVALID_REGISTER;
 8013450:	f06f 0306 	mvn.w	r3, #6
 8013454:	e02d      	b.n	80134b2 <PCA_WriteRegIT+0x8e>
	}
	/*Process lock*/
	PCA_LOCK(pca);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	799b      	ldrb	r3, [r3, #6]
 801345a:	2b01      	cmp	r3, #1
 801345c:	d102      	bne.n	8013464 <PCA_WriteRegIT+0x40>
 801345e:	f06f 0304 	mvn.w	r3, #4
 8013462:	e026      	b.n	80134b2 <PCA_WriteRegIT+0x8e>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2201      	movs	r2, #1
 8013468:	719a      	strb	r2, [r3, #6]
	uint8_t buff[2] = {0};
 801346a:	2300      	movs	r3, #0
 801346c:	81bb      	strh	r3, [r7, #12]
	buff[0] = selectReg;
 801346e:	78bb      	ldrb	r3, [r7, #2]
 8013470:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 8013472:	787b      	ldrb	r3, [r7, #1]
 8013474:	737b      	strb	r3, [r7, #13]
	/*Write and mask insure the WR direction bit is set to the write mode*/
	devAddr = GET_DEV_ADDR(devAddr, PCA_WR_DIR_W);
 8013476:	78fb      	ldrb	r3, [r7, #3]
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	b25b      	sxtb	r3, r3
 801347c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8013480:	b25b      	sxtb	r3, r3
 8013482:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(i2c, devAddr, buff, 2);
 8013484:	4b0d      	ldr	r3, [pc, #52]	; (80134bc <PCA_WriteRegIT+0x98>)
 8013486:	6818      	ldr	r0, [r3, #0]
 8013488:	78fb      	ldrb	r3, [r7, #3]
 801348a:	b299      	uxth	r1, r3
 801348c:	f107 020c 	add.w	r2, r7, #12
 8013490:	2302      	movs	r3, #2
 8013492:	f008 ff07 	bl	801c2a4 <HAL_I2C_Master_Transmit_IT>
 8013496:	4603      	mov	r3, r0
 8013498:	73fb      	strb	r3, [r7, #15]
	if(stat != HAL_OK){
 801349a:	7bfb      	ldrb	r3, [r7, #15]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d007      	beq.n	80134b0 <PCA_WriteRegIT+0x8c>
		/*Process unlock*/
		PCA_UNLOCK(pca);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2200      	movs	r2, #0
 80134a4:	719a      	strb	r2, [r3, #6]
		return CONV_ERROR(stat);
 80134a6:	7bfb      	ldrb	r3, [r7, #15]
 80134a8:	425b      	negs	r3, r3
 80134aa:	b2db      	uxtb	r3, r3
 80134ac:	b25b      	sxtb	r3, r3
 80134ae:	e000      	b.n	80134b2 <PCA_WriteRegIT+0x8e>
	}
	return PCA_ERR_NONE;
 80134b0:	2300      	movs	r3, #0
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	24005ffc 	.word	0x24005ffc

080134c0 <PCA_GetWriteCmpltFlag>:
/**
  * @brief  Gets write complete flag. clears this flag on read
  * @param  pca: pointer to the PCA9557 structure
  * @retval flag value
  */
uint8_t PCA_GetWriteCmpltFlag(PCA9557_IOExt_ts* pca){
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
	 return pca->flag.writeCmplt;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	79db      	ldrb	r3, [r3, #7]
 80134cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80134d0:	b2db      	uxtb	r3, r3
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	370c      	adds	r7, #12
 80134d6:	46bd      	mov	sp, r7
 80134d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134dc:	4770      	bx	lr

080134de <PID_Proportional>:

/**
  * @brief proportional term for the PID controller
  * @param pid: PID_Controller, for the PID parameters
  */
inline void PID_Proportional(PID *pid){
 80134de:	b480      	push	{r7}
 80134e0:	b083      	sub	sp, #12
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	6078      	str	r0, [r7, #4]
	pid->output_p = pid->kp * pid->error;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80134f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80134fc:	bf00      	nop
 80134fe:	370c      	adds	r7, #12
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr

08013508 <a_w25qxx_spi_write_read>:
 *             - 0 success
 *             - 1 write read failed
 * @note       none
 */
static uint8_t a_w25qxx_spi_write_read(w25qxx_handle_t *handle, uint8_t *in_buf, uint32_t in_len, uint8_t *out_buf, uint32_t out_len)
{
 8013508:	b590      	push	{r4, r7, lr}
 801350a:	b08f      	sub	sp, #60	; 0x3c
 801350c:	af0a      	add	r7, sp, #40	; 0x28
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]
 8013514:	603b      	str	r3, [r7, #0]
    if (handle->spi_qspi_write_read(0x00, 0x00, 0x00000000, 0x00, 0x00,                /* write read data */
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	689c      	ldr	r4, [r3, #8]
 801351a:	2301      	movs	r3, #1
 801351c:	9309      	str	r3, [sp, #36]	; 0x24
 801351e:	6a3b      	ldr	r3, [r7, #32]
 8013520:	9308      	str	r3, [sp, #32]
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	9307      	str	r3, [sp, #28]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	9306      	str	r3, [sp, #24]
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	9305      	str	r3, [sp, #20]
 801352e:	2300      	movs	r3, #0
 8013530:	9304      	str	r3, [sp, #16]
 8013532:	2300      	movs	r3, #0
 8013534:	9303      	str	r3, [sp, #12]
 8013536:	2300      	movs	r3, #0
 8013538:	9302      	str	r3, [sp, #8]
 801353a:	2300      	movs	r3, #0
 801353c:	9301      	str	r3, [sp, #4]
 801353e:	2300      	movs	r3, #0
 8013540:	9300      	str	r3, [sp, #0]
 8013542:	2300      	movs	r3, #0
 8013544:	2200      	movs	r2, #0
 8013546:	2100      	movs	r1, #0
 8013548:	2000      	movs	r0, #0
 801354a:	47a0      	blx	r4
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d001      	beq.n	8013556 <a_w25qxx_spi_write_read+0x4e>
                                    0x00000000, 0x00, 0x00, 
                                    0x00, in_buf, in_len, out_buf, out_len, 1) != 0)
    {
        return 1;                                                                      /* return error */
 8013552:	2301      	movs	r3, #1
 8013554:	e000      	b.n	8013558 <a_w25qxx_spi_write_read+0x50>
    }
    else
    {
        return 0;                                                                      /* success return 0 */
 8013556:	2300      	movs	r3, #0
    }
}
 8013558:	4618      	mov	r0, r3
 801355a:	3714      	adds	r7, #20
 801355c:	46bd      	mov	sp, r7
 801355e:	bd90      	pop	{r4, r7, pc}

08013560 <a_w25qxx_qspi_write_read>:
static uint8_t a_w25qxx_qspi_write_read(w25qxx_handle_t *handle, uint8_t instruction, uint8_t instruction_line,
                                        uint32_t address, uint8_t address_line, uint8_t address_len,
                                        uint32_t alternate, uint8_t alternate_line, uint8_t alternate_len,
                                        uint8_t dummy, uint8_t *in_buf, uint32_t in_len,
                                        uint8_t *out_buf, uint32_t out_len, uint8_t data_line)
{
 8013560:	b590      	push	{r4, r7, lr}
 8013562:	b08f      	sub	sp, #60	; 0x3c
 8013564:	af0a      	add	r7, sp, #40	; 0x28
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	607b      	str	r3, [r7, #4]
 801356a:	460b      	mov	r3, r1
 801356c:	72fb      	strb	r3, [r7, #11]
 801356e:	4613      	mov	r3, r2
 8013570:	72bb      	strb	r3, [r7, #10]
    if (handle->spi_qspi_write_read(instruction, instruction_line, address, address_line, address_len,        /* write read data */
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	689c      	ldr	r4, [r3, #8]
 8013576:	f897 2020 	ldrb.w	r2, [r7, #32]
 801357a:	7ab9      	ldrb	r1, [r7, #10]
 801357c:	7af8      	ldrb	r0, [r7, #11]
 801357e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013582:	9309      	str	r3, [sp, #36]	; 0x24
 8013584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013586:	9308      	str	r3, [sp, #32]
 8013588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801358a:	9307      	str	r3, [sp, #28]
 801358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801358e:	9306      	str	r3, [sp, #24]
 8013590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013592:	9305      	str	r3, [sp, #20]
 8013594:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013598:	9304      	str	r3, [sp, #16]
 801359a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801359e:	9303      	str	r3, [sp, #12]
 80135a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80135a4:	9302      	str	r3, [sp, #8]
 80135a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a8:	9301      	str	r3, [sp, #4]
 80135aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80135ae:	9300      	str	r3, [sp, #0]
 80135b0:	4613      	mov	r3, r2
 80135b2:	687a      	ldr	r2, [r7, #4]
 80135b4:	47a0      	blx	r4
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d001      	beq.n	80135c0 <a_w25qxx_qspi_write_read+0x60>
                                    alternate, alternate_line, alternate_len, 
                                    dummy, in_buf, in_len, out_buf, out_len, data_line) != 0)
    {
        return 1;                                                                                             /* return error */
 80135bc:	2301      	movs	r3, #1
 80135be:	e000      	b.n	80135c2 <a_w25qxx_qspi_write_read+0x62>
    }
    else
    {
        return 0;                                                                                             /* success return 0 */
 80135c0:	2300      	movs	r3, #0
    }
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3714      	adds	r7, #20
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd90      	pop	{r4, r7, pc}

080135ca <w25qxx_set_dual_quad_spi>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_dual_quad_spi(w25qxx_handle_t *handle, w25qxx_bool_t enable)
{
 80135ca:	b480      	push	{r7}
 80135cc:	b083      	sub	sp, #12
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	6078      	str	r0, [r7, #4]
 80135d2:	460b      	mov	r3, r1
 80135d4:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                                    /* check handle */
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d101      	bne.n	80135e0 <w25qxx_set_dual_quad_spi+0x16>
    {
        return 2;                                          /* return error */
 80135dc:	2302      	movs	r3, #2
 80135de:	e003      	b.n	80135e8 <w25qxx_set_dual_quad_spi+0x1e>
    }

    handle->dual_quad_spi_enable = (uint8_t)enable;        /* set enable */
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	78fa      	ldrb	r2, [r7, #3]
 80135e4:	77da      	strb	r2, [r3, #31]
    
    return 0;                                              /* success return 0 */
 80135e6:	2300      	movs	r3, #0
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	370c      	adds	r7, #12
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <w25qxx_set_type>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_type(w25qxx_handle_t *handle, w25qxx_type_t type)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	460b      	mov	r3, r1
 80135fe:	807b      	strh	r3, [r7, #2]
    if (handle == NULL)                  /* check handle */
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d101      	bne.n	801360a <w25qxx_set_type+0x16>
    {
        return 2;                        /* return error */
 8013606:	2302      	movs	r3, #2
 8013608:	e003      	b.n	8013612 <w25qxx_set_type+0x1e>
    }

    handle->type = (uint16_t)type;       /* set type */
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	887a      	ldrh	r2, [r7, #2]
 801360e:	835a      	strh	r2, [r3, #26]
    
    return 0;                            /* success return 0 */
 8013610:	2300      	movs	r3, #0
}
 8013612:	4618      	mov	r0, r3
 8013614:	370c      	adds	r7, #12
 8013616:	46bd      	mov	sp, r7
 8013618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361c:	4770      	bx	lr

0801361e <w25qxx_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t w25qxx_set_interface(w25qxx_handle_t *handle, w25qxx_interface_t interface)
{
 801361e:	b480      	push	{r7}
 8013620:	b083      	sub	sp, #12
 8013622:	af00      	add	r7, sp, #0
 8013624:	6078      	str	r0, [r7, #4]
 8013626:	460b      	mov	r3, r1
 8013628:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                           /* check handle */
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d101      	bne.n	8013634 <w25qxx_set_interface+0x16>
    {
        return 2;                                 /* return error */
 8013630:	2302      	movs	r3, #2
 8013632:	e004      	b.n	801363e <w25qxx_set_interface+0x20>
    }

    handle->spi_qspi = (uint8_t)interface;        /* set interface */
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	78fa      	ldrb	r2, [r7, #3]
 8013638:	f883 2020 	strb.w	r2, [r3, #32]
    
    return 0;                                     /* success return 0 */
 801363c:	2300      	movs	r3, #0
}
 801363e:	4618      	mov	r0, r3
 8013640:	370c      	adds	r7, #12
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr
	...

0801364c <w25qxx_set_address_mode>:
 *             - 3 handle is not initialized
 *             - 4 current type can't use this function
 * @note      none
 */
uint8_t w25qxx_set_address_mode(w25qxx_handle_t *handle, w25qxx_address_mode_t mode)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b090      	sub	sp, #64	; 0x40
 8013650:	af0c      	add	r7, sp, #48	; 0x30
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	460b      	mov	r3, r1
 8013656:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t buf[1];
    
    if (handle == NULL)                                                               /* check handle */
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d101      	bne.n	8013662 <w25qxx_set_address_mode+0x16>
    {
        return 2;                                                                     /* return error */
 801365e:	2302      	movs	r3, #2
 8013660:	e098      	b.n	8013794 <w25qxx_set_address_mode+0x148>
    }   
    if (handle->inited != 1)                                                          /* check handle initialization */
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	7e1b      	ldrb	r3, [r3, #24]
 8013666:	2b01      	cmp	r3, #1
 8013668:	d001      	beq.n	801366e <w25qxx_set_address_mode+0x22>
    {
        return 3;                                                                     /* return error */
 801366a:	2303      	movs	r3, #3
 801366c:	e092      	b.n	8013794 <w25qxx_set_address_mode+0x148>
    }
    if (handle->type < W25Q256)                                                       /* check type */
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	8b5b      	ldrh	r3, [r3, #26]
 8013672:	f64e 7217 	movw	r2, #61207	; 0xef17
 8013676:	4293      	cmp	r3, r2
 8013678:	d805      	bhi.n	8013686 <w25qxx_set_address_mode+0x3a>
    {
        handle->debug_print("w25qxx: current type can't use this function.\n");       /* current type can't use this function */
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	695b      	ldr	r3, [r3, #20]
 801367e:	4847      	ldr	r0, [pc, #284]	; (801379c <w25qxx_set_address_mode+0x150>)
 8013680:	4798      	blx	r3
       
        return 4;                                                                     /* return error */
 8013682:	2304      	movs	r3, #4
 8013684:	e086      	b.n	8013794 <w25qxx_set_address_mode+0x148>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                     /* spi interface */
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f893 3020 	ldrb.w	r3, [r3, #32]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d14e      	bne.n	801372e <w25qxx_set_address_mode+0xe2>
    {
        if (handle->dual_quad_spi_enable != 0)                                        /* enable dual quad spi */
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	7fdb      	ldrb	r3, [r3, #31]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d02e      	beq.n	80136f6 <w25qxx_set_address_mode+0xaa>
        {
            if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                   /* address 3 mode byte */
 8013698:	78fb      	ldrb	r3, [r7, #3]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d102      	bne.n	80136a4 <w25qxx_set_address_mode+0x58>
            {
                buf[0] = 0xE9;                                                        /* 3 byte mode */
 801369e:	23e9      	movs	r3, #233	; 0xe9
 80136a0:	733b      	strb	r3, [r7, #12]
 80136a2:	e001      	b.n	80136a8 <w25qxx_set_address_mode+0x5c>
            }
            else                                                                      /* address 4 mode byte */
            {
                buf[0] = 0xB7;                                                        /* 4 byte mode */
 80136a4:	23b7      	movs	r3, #183	; 0xb7
 80136a6:	733b      	strb	r3, [r7, #12]
            }
            res = a_w25qxx_qspi_write_read(handle, buf[0], 1,
 80136a8:	7b39      	ldrb	r1, [r7, #12]
 80136aa:	2300      	movs	r3, #0
 80136ac:	930a      	str	r3, [sp, #40]	; 0x28
 80136ae:	2300      	movs	r3, #0
 80136b0:	9309      	str	r3, [sp, #36]	; 0x24
 80136b2:	2300      	movs	r3, #0
 80136b4:	9308      	str	r3, [sp, #32]
 80136b6:	2300      	movs	r3, #0
 80136b8:	9307      	str	r3, [sp, #28]
 80136ba:	2300      	movs	r3, #0
 80136bc:	9306      	str	r3, [sp, #24]
 80136be:	2300      	movs	r3, #0
 80136c0:	9305      	str	r3, [sp, #20]
 80136c2:	2300      	movs	r3, #0
 80136c4:	9304      	str	r3, [sp, #16]
 80136c6:	2300      	movs	r3, #0
 80136c8:	9303      	str	r3, [sp, #12]
 80136ca:	2300      	movs	r3, #0
 80136cc:	9302      	str	r3, [sp, #8]
 80136ce:	2300      	movs	r3, #0
 80136d0:	9301      	str	r3, [sp, #4]
 80136d2:	2300      	movs	r3, #0
 80136d4:	9300      	str	r3, [sp, #0]
 80136d6:	2300      	movs	r3, #0
 80136d8:	2201      	movs	r2, #1
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f7ff ff40 	bl	8013560 <a_w25qxx_qspi_write_read>
 80136e0:	4603      	mov	r3, r0
 80136e2:	73fb      	strb	r3, [r7, #15]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                         /* qspi write read */
            if (res != 0)                                                             /* check result */
 80136e4:	7bfb      	ldrb	r3, [r7, #15]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d050      	beq.n	801378c <w25qxx_set_address_mode+0x140>
            {
                handle->debug_print("w25qxx: set address mode failed.\n");            /* set address mode failed */
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	695b      	ldr	r3, [r3, #20]
 80136ee:	482c      	ldr	r0, [pc, #176]	; (80137a0 <w25qxx_set_address_mode+0x154>)
 80136f0:	4798      	blx	r3
               
                return 1;                                                             /* return error */
 80136f2:	2301      	movs	r3, #1
 80136f4:	e04e      	b.n	8013794 <w25qxx_set_address_mode+0x148>
            }
        }
        else                                                                          /* single spi */
        {
            if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                   /* address 3 mode byte */
 80136f6:	78fb      	ldrb	r3, [r7, #3]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d102      	bne.n	8013702 <w25qxx_set_address_mode+0xb6>
            {
                buf[0] = 0xE9;                                                        /* 3 byte mode */
 80136fc:	23e9      	movs	r3, #233	; 0xe9
 80136fe:	733b      	strb	r3, [r7, #12]
 8013700:	e001      	b.n	8013706 <w25qxx_set_address_mode+0xba>
            }
            else                                                                      /* address 4 mode byte */
            {
                buf[0] = 0xB7;                                                        /* 4 byte mode */
 8013702:	23b7      	movs	r3, #183	; 0xb7
 8013704:	733b      	strb	r3, [r7, #12]
            }
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);        /* spi write read */
 8013706:	f107 010c 	add.w	r1, r7, #12
 801370a:	2300      	movs	r3, #0
 801370c:	9300      	str	r3, [sp, #0]
 801370e:	2300      	movs	r3, #0
 8013710:	2201      	movs	r2, #1
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7ff fef8 	bl	8013508 <a_w25qxx_spi_write_read>
 8013718:	4603      	mov	r3, r0
 801371a:	73fb      	strb	r3, [r7, #15]
            if (res != 0)                                                             /* check result */
 801371c:	7bfb      	ldrb	r3, [r7, #15]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d034      	beq.n	801378c <w25qxx_set_address_mode+0x140>
            {
                handle->debug_print("w25qxx: set address mode failed.\n");            /* set address mode failed */
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	695b      	ldr	r3, [r3, #20]
 8013726:	481e      	ldr	r0, [pc, #120]	; (80137a0 <w25qxx_set_address_mode+0x154>)
 8013728:	4798      	blx	r3
               
                return 1;                                                             /* return error */
 801372a:	2301      	movs	r3, #1
 801372c:	e032      	b.n	8013794 <w25qxx_set_address_mode+0x148>
            }
        }
    }
    else                                                                              /* qspi interface */
    {
        if (mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* address 3 mode byte */
 801372e:	78fb      	ldrb	r3, [r7, #3]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d102      	bne.n	801373a <w25qxx_set_address_mode+0xee>
        {
            buf[0] = 0xE9;                                                            /* 3 byte mode */
 8013734:	23e9      	movs	r3, #233	; 0xe9
 8013736:	733b      	strb	r3, [r7, #12]
 8013738:	e001      	b.n	801373e <w25qxx_set_address_mode+0xf2>
        }
        else                                                                          /* address 4 mode byte */
        {
            buf[0] = 0xB7;                                                            /* 4 byte mode */
 801373a:	23b7      	movs	r3, #183	; 0xb7
 801373c:	733b      	strb	r3, [r7, #12]
        }
        res = a_w25qxx_qspi_write_read(handle, buf[0], 4,
 801373e:	7b39      	ldrb	r1, [r7, #12]
 8013740:	2300      	movs	r3, #0
 8013742:	930a      	str	r3, [sp, #40]	; 0x28
 8013744:	2300      	movs	r3, #0
 8013746:	9309      	str	r3, [sp, #36]	; 0x24
 8013748:	2300      	movs	r3, #0
 801374a:	9308      	str	r3, [sp, #32]
 801374c:	2300      	movs	r3, #0
 801374e:	9307      	str	r3, [sp, #28]
 8013750:	2300      	movs	r3, #0
 8013752:	9306      	str	r3, [sp, #24]
 8013754:	2300      	movs	r3, #0
 8013756:	9305      	str	r3, [sp, #20]
 8013758:	2300      	movs	r3, #0
 801375a:	9304      	str	r3, [sp, #16]
 801375c:	2300      	movs	r3, #0
 801375e:	9303      	str	r3, [sp, #12]
 8013760:	2300      	movs	r3, #0
 8013762:	9302      	str	r3, [sp, #8]
 8013764:	2300      	movs	r3, #0
 8013766:	9301      	str	r3, [sp, #4]
 8013768:	2300      	movs	r3, #0
 801376a:	9300      	str	r3, [sp, #0]
 801376c:	2300      	movs	r3, #0
 801376e:	2204      	movs	r2, #4
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7ff fef5 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013776:	4603      	mov	r3, r0
 8013778:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                             /* qspi write read */
        if (res != 0)                                                                 /* check result */
 801377a:	7bfb      	ldrb	r3, [r7, #15]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d005      	beq.n	801378c <w25qxx_set_address_mode+0x140>
        {
            handle->debug_print("w25qxx: set address mode failed.\n");                /* set address mode failed */
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	695b      	ldr	r3, [r3, #20]
 8013784:	4806      	ldr	r0, [pc, #24]	; (80137a0 <w25qxx_set_address_mode+0x154>)
 8013786:	4798      	blx	r3
           
            return 1;                                                                 /* return error */
 8013788:	2301      	movs	r3, #1
 801378a:	e003      	b.n	8013794 <w25qxx_set_address_mode+0x148>
        }
    }
    
    handle->address_mode = (uint8_t)mode;                                             /* set address mode */
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	78fa      	ldrb	r2, [r7, #3]
 8013790:	771a      	strb	r2, [r3, #28]
    
    return 0;                                                                         /* success return 0 */
 8013792:	2300      	movs	r3, #0
}
 8013794:	4618      	mov	r0, r3
 8013796:	3710      	adds	r7, #16
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	0802a87c 	.word	0x0802a87c
 80137a0:	0802a8ac 	.word	0x0802a8ac

080137a4 <w25qxx_sector_erase_4k>:
 *            - 5 address mode is invalid
 *            - 6 sector erase 4k timeout
 * @note      none
 */
uint8_t w25qxx_sector_erase_4k(w25qxx_handle_t *handle, uint32_t addr)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b092      	sub	sp, #72	; 0x48
 80137a8:	af0c      	add	r7, sp, #48	; 0x30
 80137aa:	6078      	str	r0, [r7, #4]
 80137ac:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t status;
    uint32_t timeout;
    uint8_t buf[5];
    
    if (handle == NULL)                                                                                     /* check handle */
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d101      	bne.n	80137b8 <w25qxx_sector_erase_4k+0x14>
    {
        return 2;                                                                                           /* return error */
 80137b4:	2302      	movs	r3, #2
 80137b6:	e365      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
    }   
    if (handle->inited != 1)                                                                                /* check handle initialization */
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	7e1b      	ldrb	r3, [r3, #24]
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d001      	beq.n	80137c4 <w25qxx_sector_erase_4k+0x20>
    {
        return 3;                                                                                           /* return error */
 80137c0:	2303      	movs	r3, #3
 80137c2:	e35f      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
    }
    if ((addr % 4096) != 0)                                                                                 /* check address */
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d005      	beq.n	80137da <w25qxx_sector_erase_4k+0x36>
    {
        handle->debug_print("w25qxx: addr is invalid.\n");                                                  /* addr is invalid */
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	695b      	ldr	r3, [r3, #20]
 80137d2:	48a7      	ldr	r0, [pc, #668]	; (8013a70 <w25qxx_sector_erase_4k+0x2cc>)
 80137d4:	4798      	blx	r3
       
        return 4;                                                                                           /* return error */
 80137d6:	2304      	movs	r3, #4
 80137d8:	e354      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                           /* spi interface */
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	f040 8219 	bne.w	8013c18 <w25qxx_sector_erase_4k+0x474>
    {
        if (handle->dual_quad_spi_enable != 0)                                                              /* enable dual quad spi */
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	7fdb      	ldrb	r3, [r3, #31]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	f000 8129 	beq.w	8013a42 <w25qxx_sector_erase_4k+0x29e>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 80137f0:	2300      	movs	r3, #0
 80137f2:	930a      	str	r3, [sp, #40]	; 0x28
 80137f4:	2300      	movs	r3, #0
 80137f6:	9309      	str	r3, [sp, #36]	; 0x24
 80137f8:	2300      	movs	r3, #0
 80137fa:	9308      	str	r3, [sp, #32]
 80137fc:	2300      	movs	r3, #0
 80137fe:	9307      	str	r3, [sp, #28]
 8013800:	2300      	movs	r3, #0
 8013802:	9306      	str	r3, [sp, #24]
 8013804:	2300      	movs	r3, #0
 8013806:	9305      	str	r3, [sp, #20]
 8013808:	2300      	movs	r3, #0
 801380a:	9304      	str	r3, [sp, #16]
 801380c:	2300      	movs	r3, #0
 801380e:	9303      	str	r3, [sp, #12]
 8013810:	2300      	movs	r3, #0
 8013812:	9302      	str	r3, [sp, #8]
 8013814:	2300      	movs	r3, #0
 8013816:	9301      	str	r3, [sp, #4]
 8013818:	2300      	movs	r3, #0
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	2300      	movs	r3, #0
 801381e:	2201      	movs	r2, #1
 8013820:	2106      	movs	r1, #6
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f7ff fe9c 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013828:	4603      	mov	r3, r0
 801382a:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* qspi write read */
            if (res != 0)                                                                                   /* check result */
 801382c:	7cfb      	ldrb	r3, [r7, #19]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d005      	beq.n	801383e <w25qxx_sector_erase_4k+0x9a>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	695b      	ldr	r3, [r3, #20]
 8013836:	488f      	ldr	r0, [pc, #572]	; (8013a74 <w25qxx_sector_erase_4k+0x2d0>)
 8013838:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 801383a:	2301      	movs	r3, #1
 801383c:	e322      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	7f1b      	ldrb	r3, [r3, #28]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d17f      	bne.n	8013946 <w25qxx_sector_erase_4k+0x1a2>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	8b5b      	ldrh	r3, [r3, #26]
 801384a:	f64e 7217 	movw	r2, #61207	; 0xef17
 801384e:	4293      	cmp	r3, r2
 8013850:	d952      	bls.n	80138f8 <w25qxx_sector_erase_4k+0x154>
                {
                    buf[0] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	0e1b      	lsrs	r3, r3, #24
 8013856:	b2db      	uxtb	r3, r3
 8013858:	733b      	strb	r3, [r7, #12]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 801385a:	2301      	movs	r3, #1
 801385c:	930a      	str	r3, [sp, #40]	; 0x28
 801385e:	2300      	movs	r3, #0
 8013860:	9309      	str	r3, [sp, #36]	; 0x24
 8013862:	2300      	movs	r3, #0
 8013864:	9308      	str	r3, [sp, #32]
 8013866:	2301      	movs	r3, #1
 8013868:	9307      	str	r3, [sp, #28]
 801386a:	f107 030c 	add.w	r3, r7, #12
 801386e:	9306      	str	r3, [sp, #24]
 8013870:	2300      	movs	r3, #0
 8013872:	9305      	str	r3, [sp, #20]
 8013874:	2300      	movs	r3, #0
 8013876:	9304      	str	r3, [sp, #16]
 8013878:	2300      	movs	r3, #0
 801387a:	9303      	str	r3, [sp, #12]
 801387c:	2300      	movs	r3, #0
 801387e:	9302      	str	r3, [sp, #8]
 8013880:	2300      	movs	r3, #0
 8013882:	9301      	str	r3, [sp, #4]
 8013884:	2300      	movs	r3, #0
 8013886:	9300      	str	r3, [sp, #0]
 8013888:	2300      	movs	r3, #0
 801388a:	2201      	movs	r2, #1
 801388c:	21c5      	movs	r1, #197	; 0xc5
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f7ff fe66 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013894:	4603      	mov	r3, r0
 8013896:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                          /* spi write read */
                    if (res != 0)                                                                           /* check result */
 8013898:	7cfb      	ldrb	r3, [r7, #19]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d005      	beq.n	80138aa <w25qxx_sector_erase_4k+0x106>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	695b      	ldr	r3, [r3, #20]
 80138a2:	4875      	ldr	r0, [pc, #468]	; (8013a78 <w25qxx_sector_erase_4k+0x2d4>)
 80138a4:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 80138a6:	2301      	movs	r3, #1
 80138a8:	e2ec      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                    }
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 80138aa:	2300      	movs	r3, #0
 80138ac:	930a      	str	r3, [sp, #40]	; 0x28
 80138ae:	2300      	movs	r3, #0
 80138b0:	9309      	str	r3, [sp, #36]	; 0x24
 80138b2:	2300      	movs	r3, #0
 80138b4:	9308      	str	r3, [sp, #32]
 80138b6:	2300      	movs	r3, #0
 80138b8:	9307      	str	r3, [sp, #28]
 80138ba:	2300      	movs	r3, #0
 80138bc:	9306      	str	r3, [sp, #24]
 80138be:	2300      	movs	r3, #0
 80138c0:	9305      	str	r3, [sp, #20]
 80138c2:	2300      	movs	r3, #0
 80138c4:	9304      	str	r3, [sp, #16]
 80138c6:	2300      	movs	r3, #0
 80138c8:	9303      	str	r3, [sp, #12]
 80138ca:	2300      	movs	r3, #0
 80138cc:	9302      	str	r3, [sp, #8]
 80138ce:	2300      	movs	r3, #0
 80138d0:	9301      	str	r3, [sp, #4]
 80138d2:	2300      	movs	r3, #0
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	2300      	movs	r3, #0
 80138d8:	2201      	movs	r2, #1
 80138da:	2106      	movs	r1, #6
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f7ff fe3f 	bl	8013560 <a_w25qxx_qspi_write_read>
 80138e2:	4603      	mov	r3, r0
 80138e4:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                       /* qspi write read */
                    if (res != 0)                                                                           /* check result */
 80138e6:	7cfb      	ldrb	r3, [r7, #19]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d005      	beq.n	80138f8 <w25qxx_sector_erase_4k+0x154>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	695b      	ldr	r3, [r3, #20]
 80138f0:	4860      	ldr	r0, [pc, #384]	; (8013a74 <w25qxx_sector_erase_4k+0x2d0>)
 80138f2:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 80138f4:	2301      	movs	r3, #1
 80138f6:	e2c5      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 1,
 80138f8:	2300      	movs	r3, #0
 80138fa:	930a      	str	r3, [sp, #40]	; 0x28
 80138fc:	2300      	movs	r3, #0
 80138fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013900:	2300      	movs	r3, #0
 8013902:	9308      	str	r3, [sp, #32]
 8013904:	2300      	movs	r3, #0
 8013906:	9307      	str	r3, [sp, #28]
 8013908:	2300      	movs	r3, #0
 801390a:	9306      	str	r3, [sp, #24]
 801390c:	2300      	movs	r3, #0
 801390e:	9305      	str	r3, [sp, #20]
 8013910:	2300      	movs	r3, #0
 8013912:	9304      	str	r3, [sp, #16]
 8013914:	2300      	movs	r3, #0
 8013916:	9303      	str	r3, [sp, #12]
 8013918:	2300      	movs	r3, #0
 801391a:	9302      	str	r3, [sp, #8]
 801391c:	2303      	movs	r3, #3
 801391e:	9301      	str	r3, [sp, #4]
 8013920:	2301      	movs	r3, #1
 8013922:	9300      	str	r3, [sp, #0]
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	2201      	movs	r2, #1
 8013928:	2120      	movs	r1, #32
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fe18 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013930:	4603      	mov	r3, r0
 8013932:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* spi write read */
                if (res != 0)                                                                               /* check result */
 8013934:	7cfb      	ldrb	r3, [r7, #19]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d03c      	beq.n	80139b4 <w25qxx_sector_erase_4k+0x210>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	695b      	ldr	r3, [r3, #20]
 801393e:	484f      	ldr	r0, [pc, #316]	; (8013a7c <w25qxx_sector_erase_4k+0x2d8>)
 8013940:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8013942:	2301      	movs	r3, #1
 8013944:	e29e      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	7f1b      	ldrb	r3, [r3, #28]
 801394a:	2b01      	cmp	r3, #1
 801394c:	d12c      	bne.n	80139a8 <w25qxx_sector_erase_4k+0x204>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	8b5b      	ldrh	r3, [r3, #26]
 8013952:	f64e 7217 	movw	r2, #61207	; 0xef17
 8013956:	4293      	cmp	r3, r2
 8013958:	d926      	bls.n	80139a8 <w25qxx_sector_erase_4k+0x204>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 1,
 801395a:	2300      	movs	r3, #0
 801395c:	930a      	str	r3, [sp, #40]	; 0x28
 801395e:	2300      	movs	r3, #0
 8013960:	9309      	str	r3, [sp, #36]	; 0x24
 8013962:	2300      	movs	r3, #0
 8013964:	9308      	str	r3, [sp, #32]
 8013966:	2300      	movs	r3, #0
 8013968:	9307      	str	r3, [sp, #28]
 801396a:	2300      	movs	r3, #0
 801396c:	9306      	str	r3, [sp, #24]
 801396e:	2300      	movs	r3, #0
 8013970:	9305      	str	r3, [sp, #20]
 8013972:	2300      	movs	r3, #0
 8013974:	9304      	str	r3, [sp, #16]
 8013976:	2300      	movs	r3, #0
 8013978:	9303      	str	r3, [sp, #12]
 801397a:	2300      	movs	r3, #0
 801397c:	9302      	str	r3, [sp, #8]
 801397e:	2304      	movs	r3, #4
 8013980:	9301      	str	r3, [sp, #4]
 8013982:	2301      	movs	r3, #1
 8013984:	9300      	str	r3, [sp, #0]
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	2201      	movs	r2, #1
 801398a:	2120      	movs	r1, #32
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7ff fde7 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013992:	4603      	mov	r3, r0
 8013994:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* spi write read */
                if (res != 0)                                                                               /* check result */
 8013996:	7cfb      	ldrb	r3, [r7, #19]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d00b      	beq.n	80139b4 <w25qxx_sector_erase_4k+0x210>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	695b      	ldr	r3, [r3, #20]
 80139a0:	4836      	ldr	r0, [pc, #216]	; (8013a7c <w25qxx_sector_erase_4k+0x2d8>)
 80139a2:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80139a4:	2301      	movs	r3, #1
 80139a6:	e26d      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	695b      	ldr	r3, [r3, #20]
 80139ac:	4834      	ldr	r0, [pc, #208]	; (8013a80 <w25qxx_sector_erase_4k+0x2dc>)
 80139ae:	4798      	blx	r3
               
                return 5;                                                                                   /* return error */
 80139b0:	2305      	movs	r3, #5
 80139b2:	e267      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
            }
            
            timeout = 400;                                                                                  /* max 400 ms */
 80139b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80139b8:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 80139ba:	e033      	b.n	8013a24 <w25qxx_sector_erase_4k+0x280>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 1,
 80139bc:	2301      	movs	r3, #1
 80139be:	930a      	str	r3, [sp, #40]	; 0x28
 80139c0:	2301      	movs	r3, #1
 80139c2:	9309      	str	r3, [sp, #36]	; 0x24
 80139c4:	f107 0312 	add.w	r3, r7, #18
 80139c8:	9308      	str	r3, [sp, #32]
 80139ca:	2300      	movs	r3, #0
 80139cc:	9307      	str	r3, [sp, #28]
 80139ce:	2300      	movs	r3, #0
 80139d0:	9306      	str	r3, [sp, #24]
 80139d2:	2300      	movs	r3, #0
 80139d4:	9305      	str	r3, [sp, #20]
 80139d6:	2300      	movs	r3, #0
 80139d8:	9304      	str	r3, [sp, #16]
 80139da:	2300      	movs	r3, #0
 80139dc:	9303      	str	r3, [sp, #12]
 80139de:	2300      	movs	r3, #0
 80139e0:	9302      	str	r3, [sp, #8]
 80139e2:	2300      	movs	r3, #0
 80139e4:	9301      	str	r3, [sp, #4]
 80139e6:	2300      	movs	r3, #0
 80139e8:	9300      	str	r3, [sp, #0]
 80139ea:	2300      	movs	r3, #0
 80139ec:	2201      	movs	r2, #1
 80139ee:	2105      	movs	r1, #5
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f7ff fdb5 	bl	8013560 <a_w25qxx_qspi_write_read>
 80139f6:	4603      	mov	r3, r0
 80139f8:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0,
                                              (uint8_t *)&status, 1, 1);                                    /* spi write read */
                if (res != 0)                                                                               /* check result */
 80139fa:	7cfb      	ldrb	r3, [r7, #19]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d005      	beq.n	8013a0c <w25qxx_sector_erase_4k+0x268>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	695b      	ldr	r3, [r3, #20]
 8013a04:	481f      	ldr	r0, [pc, #124]	; (8013a84 <w25qxx_sector_erase_4k+0x2e0>)
 8013a06:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8013a08:	2301      	movs	r3, #1
 8013a0a:	e23b      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8013a0c:	7cbb      	ldrb	r3, [r7, #18]
 8013a0e:	f003 0301 	and.w	r3, r3, #1
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d00a      	beq.n	8013a2c <w25qxx_sector_erase_4k+0x288>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	3b01      	subs	r3, #1
 8013a1a:	617b      	str	r3, [r7, #20]
                handle->delay_ms(1);                                                                        /* delay 1 ms */
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	68db      	ldr	r3, [r3, #12]
 8013a20:	2001      	movs	r0, #1
 8013a22:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d1c8      	bne.n	80139bc <w25qxx_sector_erase_4k+0x218>
 8013a2a:	e000      	b.n	8013a2e <w25qxx_sector_erase_4k+0x28a>
                    break;                                                                                  /* break */
 8013a2c:	bf00      	nop
            }
            if (timeout == 0)
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	f040 8226 	bne.w	8013e82 <w25qxx_sector_erase_4k+0x6de>
            {
                handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                  /* sector erase 4k timeout */
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	695b      	ldr	r3, [r3, #20]
 8013a3a:	4813      	ldr	r0, [pc, #76]	; (8013a88 <w25qxx_sector_erase_4k+0x2e4>)
 8013a3c:	4798      	blx	r3
               
                return 6;                                                                                   /* return error */
 8013a3e:	2306      	movs	r3, #6
 8013a40:	e220      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
            }
        }
        else                                                                                                /* single spi */
        {
            buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                           /* write enable command */
 8013a42:	2306      	movs	r3, #6
 8013a44:	733b      	strb	r3, [r7, #12]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                              /* spi write read */
 8013a46:	f107 010c 	add.w	r1, r7, #12
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	9300      	str	r3, [sp, #0]
 8013a4e:	2300      	movs	r3, #0
 8013a50:	2201      	movs	r2, #1
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f7ff fd58 	bl	8013508 <a_w25qxx_spi_write_read>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	74fb      	strb	r3, [r7, #19]
            if (res != 0)                                                                                   /* check result */
 8013a5c:	7cfb      	ldrb	r3, [r7, #19]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d014      	beq.n	8013a8c <w25qxx_sector_erase_4k+0x2e8>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	695b      	ldr	r3, [r3, #20]
 8013a66:	4803      	ldr	r0, [pc, #12]	; (8013a74 <w25qxx_sector_erase_4k+0x2d0>)
 8013a68:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	e20a      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
 8013a6e:	bf00      	nop
 8013a70:	0802b054 	.word	0x0802b054
 8013a74:	0802a8d0 	.word	0x0802a8d0
 8013a78:	0802aecc 	.word	0x0802aecc
 8013a7c:	0802b118 	.word	0x0802b118
 8013a80:	0802abdc 	.word	0x0802abdc
 8013a84:	0802a934 	.word	0x0802a934
 8013a88:	0802b13c 	.word	0x0802b13c
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	7f1b      	ldrb	r3, [r3, #28]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d156      	bne.n	8013b42 <w25qxx_sector_erase_4k+0x39e>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	8b5b      	ldrh	r3, [r3, #26]
 8013a98:	f64e 7217 	movw	r2, #61207	; 0xef17
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d92f      	bls.n	8013b00 <w25qxx_sector_erase_4k+0x35c>
                {
                    buf[0] = 0xC5;                                                                          /* write extended addr register command */
 8013aa0:	23c5      	movs	r3, #197	; 0xc5
 8013aa2:	733b      	strb	r3, [r7, #12]
                    buf[1] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	0e1b      	lsrs	r3, r3, #24
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	737b      	strb	r3, [r7, #13]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                      /* spi write read */
 8013aac:	f107 010c 	add.w	r1, r7, #12
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	9300      	str	r3, [sp, #0]
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	2202      	movs	r2, #2
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7ff fd25 	bl	8013508 <a_w25qxx_spi_write_read>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8013ac2:	7cfb      	ldrb	r3, [r7, #19]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d005      	beq.n	8013ad4 <w25qxx_sector_erase_4k+0x330>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	695b      	ldr	r3, [r3, #20]
 8013acc:	48a8      	ldr	r0, [pc, #672]	; (8013d70 <w25qxx_sector_erase_4k+0x5cc>)
 8013ace:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	e1d7      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                    }
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                   /* write enable command */
 8013ad4:	2306      	movs	r3, #6
 8013ad6:	733b      	strb	r3, [r7, #12]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                      /* spi write read */
 8013ad8:	f107 010c 	add.w	r1, r7, #12
 8013adc:	2300      	movs	r3, #0
 8013ade:	9300      	str	r3, [sp, #0]
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7ff fd0f 	bl	8013508 <a_w25qxx_spi_write_read>
 8013aea:	4603      	mov	r3, r0
 8013aec:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8013aee:	7cfb      	ldrb	r3, [r7, #19]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d005      	beq.n	8013b00 <w25qxx_sector_erase_4k+0x35c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	695b      	ldr	r3, [r3, #20]
 8013af8:	489e      	ldr	r0, [pc, #632]	; (8013d74 <w25qxx_sector_erase_4k+0x5d0>)
 8013afa:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8013afc:	2301      	movs	r3, #1
 8013afe:	e1c1      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                    }
                }
                buf[0] = W25QXX_COMMAND_SECTOR_ERASE_4K;                                                    /* sector erase 4k command */
 8013b00:	2320      	movs	r3, #32
 8013b02:	733b      	strb	r3, [r7, #12]
                buf[1] = (addr >> 16) & 0xFF;                                                               /* 23 - 16 bits */
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	0c1b      	lsrs	r3, r3, #16
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	737b      	strb	r3, [r7, #13]
                buf[2] = (addr >> 8) & 0xFF;                                                                /* 15 - 8  bits */
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	0a1b      	lsrs	r3, r3, #8
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	73bb      	strb	r3, [r7, #14]
                buf[3] = (addr >> 0) & 0xFF;                                                                /* 7 - 0 bits */
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	73fb      	strb	r3, [r7, #15]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4, NULL, 0);                          /* spi write read */
 8013b1a:	f107 010c 	add.w	r1, r7, #12
 8013b1e:	2300      	movs	r3, #0
 8013b20:	9300      	str	r3, [sp, #0]
 8013b22:	2300      	movs	r3, #0
 8013b24:	2204      	movs	r2, #4
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7ff fcee 	bl	8013508 <a_w25qxx_spi_write_read>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8013b30:	7cfb      	ldrb	r3, [r7, #19]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d03a      	beq.n	8013bac <w25qxx_sector_erase_4k+0x408>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	695b      	ldr	r3, [r3, #20]
 8013b3a:	488f      	ldr	r0, [pc, #572]	; (8013d78 <w25qxx_sector_erase_4k+0x5d4>)
 8013b3c:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8013b3e:	2301      	movs	r3, #1
 8013b40:	e1a0      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	7f1b      	ldrb	r3, [r3, #28]
 8013b46:	2b01      	cmp	r3, #1
 8013b48:	d12a      	bne.n	8013ba0 <w25qxx_sector_erase_4k+0x3fc>
                     && (handle->type >= W25Q256))
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8b5b      	ldrh	r3, [r3, #26]
 8013b4e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d924      	bls.n	8013ba0 <w25qxx_sector_erase_4k+0x3fc>
            {
                buf[0] = W25QXX_COMMAND_SECTOR_ERASE_4K;                                                    /* sector erase 4k command */
 8013b56:	2320      	movs	r3, #32
 8013b58:	733b      	strb	r3, [r7, #12]
                buf[1] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	0e1b      	lsrs	r3, r3, #24
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	737b      	strb	r3, [r7, #13]
                buf[2] = (addr >> 16) & 0xFF;                                                               /* 23 - 16 bits */
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	0c1b      	lsrs	r3, r3, #16
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	73bb      	strb	r3, [r7, #14]
                buf[3] = (addr >> 8) & 0xFF;                                                                /* 15 - 8  bits */
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	0a1b      	lsrs	r3, r3, #8
 8013b6e:	b2db      	uxtb	r3, r3
 8013b70:	73fb      	strb	r3, [r7, #15]
                buf[4] = (addr >> 0) & 0xFF;                                                                /* 7 - 0 bits */
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, NULL, 0);                          /* spi write read */
 8013b78:	f107 010c 	add.w	r1, r7, #12
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	9300      	str	r3, [sp, #0]
 8013b80:	2300      	movs	r3, #0
 8013b82:	2205      	movs	r2, #5
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7ff fcbf 	bl	8013508 <a_w25qxx_spi_write_read>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8013b8e:	7cfb      	ldrb	r3, [r7, #19]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d00b      	beq.n	8013bac <w25qxx_sector_erase_4k+0x408>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	695b      	ldr	r3, [r3, #20]
 8013b98:	4877      	ldr	r0, [pc, #476]	; (8013d78 <w25qxx_sector_erase_4k+0x5d4>)
 8013b9a:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	e171      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	695b      	ldr	r3, [r3, #20]
 8013ba4:	4875      	ldr	r0, [pc, #468]	; (8013d7c <w25qxx_sector_erase_4k+0x5d8>)
 8013ba6:	4798      	blx	r3
               
                return 5;                                                                                   /* return error */
 8013ba8:	2305      	movs	r3, #5
 8013baa:	e16b      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
            }
            
            timeout = 400;                                                                                  /* max 400 ms */
 8013bac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013bb0:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 8013bb2:	e022      	b.n	8013bfa <w25qxx_sector_erase_4k+0x456>
            {
                buf[0] = W25QXX_COMMAND_READ_STATUS_REG1;                                                   /* read status1 command */
 8013bb4:	2305      	movs	r3, #5
 8013bb6:	733b      	strb	r3, [r7, #12]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, (uint8_t *)&status, 1);            /* spi write read */
 8013bb8:	f107 0312 	add.w	r3, r7, #18
 8013bbc:	f107 010c 	add.w	r1, r7, #12
 8013bc0:	2201      	movs	r2, #1
 8013bc2:	9200      	str	r2, [sp, #0]
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f7ff fc9e 	bl	8013508 <a_w25qxx_spi_write_read>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8013bd0:	7cfb      	ldrb	r3, [r7, #19]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d005      	beq.n	8013be2 <w25qxx_sector_erase_4k+0x43e>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	695b      	ldr	r3, [r3, #20]
 8013bda:	4869      	ldr	r0, [pc, #420]	; (8013d80 <w25qxx_sector_erase_4k+0x5dc>)
 8013bdc:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8013bde:	2301      	movs	r3, #1
 8013be0:	e150      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8013be2:	7cbb      	ldrb	r3, [r7, #18]
 8013be4:	f003 0301 	and.w	r3, r3, #1
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d00a      	beq.n	8013c02 <w25qxx_sector_erase_4k+0x45e>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	3b01      	subs	r3, #1
 8013bf0:	617b      	str	r3, [r7, #20]
                handle->delay_ms(1);                                                                        /* delay 1 ms */
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	68db      	ldr	r3, [r3, #12]
 8013bf6:	2001      	movs	r0, #1
 8013bf8:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d1d9      	bne.n	8013bb4 <w25qxx_sector_erase_4k+0x410>
 8013c00:	e000      	b.n	8013c04 <w25qxx_sector_erase_4k+0x460>
                    break;                                                                                  /* break */
 8013c02:	bf00      	nop
            }
            if (timeout == 0)
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f040 813b 	bne.w	8013e82 <w25qxx_sector_erase_4k+0x6de>
            {
                handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                  /* sector erase 4k timeout */
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	695b      	ldr	r3, [r3, #20]
 8013c10:	485c      	ldr	r0, [pc, #368]	; (8013d84 <w25qxx_sector_erase_4k+0x5e0>)
 8013c12:	4798      	blx	r3
               
                return 6;                                                                                   /* return error */
 8013c14:	2306      	movs	r3, #6
 8013c16:	e135      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
            }
        }
    }
    else
    {
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8013c18:	2300      	movs	r3, #0
 8013c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8013c20:	2300      	movs	r3, #0
 8013c22:	9308      	str	r3, [sp, #32]
 8013c24:	2300      	movs	r3, #0
 8013c26:	9307      	str	r3, [sp, #28]
 8013c28:	2300      	movs	r3, #0
 8013c2a:	9306      	str	r3, [sp, #24]
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	9305      	str	r3, [sp, #20]
 8013c30:	2300      	movs	r3, #0
 8013c32:	9304      	str	r3, [sp, #16]
 8013c34:	2300      	movs	r3, #0
 8013c36:	9303      	str	r3, [sp, #12]
 8013c38:	2300      	movs	r3, #0
 8013c3a:	9302      	str	r3, [sp, #8]
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	9301      	str	r3, [sp, #4]
 8013c40:	2300      	movs	r3, #0
 8013c42:	9300      	str	r3, [sp, #0]
 8013c44:	2300      	movs	r3, #0
 8013c46:	2204      	movs	r2, #4
 8013c48:	2106      	movs	r1, #6
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7ff fc88 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013c50:	4603      	mov	r3, r0
 8013c52:	74fb      	strb	r3, [r7, #19]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                                   /* qspi write read */
        if (res != 0)                                                                                       /* check result */
 8013c54:	7cfb      	ldrb	r3, [r7, #19]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d005      	beq.n	8013c66 <w25qxx_sector_erase_4k+0x4c2>
        {
            handle->debug_print("w25qxx: write enable failed.\n");                                          /* write enable failed */
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	695b      	ldr	r3, [r3, #20]
 8013c5e:	4845      	ldr	r0, [pc, #276]	; (8013d74 <w25qxx_sector_erase_4k+0x5d0>)
 8013c60:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8013c62:	2301      	movs	r3, #1
 8013c64:	e10e      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
        }
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                             /* 3 address mode */
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	7f1b      	ldrb	r3, [r3, #28]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	f040 808c 	bne.w	8013d88 <w25qxx_sector_erase_4k+0x5e4>
        {
            if (handle->type >= W25Q256)                                                                    /* >128Mb */
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	8b5b      	ldrh	r3, [r3, #26]
 8013c74:	f64e 7217 	movw	r2, #61207	; 0xef17
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d952      	bls.n	8013d22 <w25qxx_sector_erase_4k+0x57e>
            {
                buf[0] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	0e1b      	lsrs	r3, r3, #24
 8013c80:	b2db      	uxtb	r3, r3
 8013c82:	733b      	strb	r3, [r7, #12]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8013c84:	2304      	movs	r3, #4
 8013c86:	930a      	str	r3, [sp, #40]	; 0x28
 8013c88:	2300      	movs	r3, #0
 8013c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	9308      	str	r3, [sp, #32]
 8013c90:	2301      	movs	r3, #1
 8013c92:	9307      	str	r3, [sp, #28]
 8013c94:	f107 030c 	add.w	r3, r7, #12
 8013c98:	9306      	str	r3, [sp, #24]
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	9305      	str	r3, [sp, #20]
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	9304      	str	r3, [sp, #16]
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	9303      	str	r3, [sp, #12]
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	9302      	str	r3, [sp, #8]
 8013caa:	2300      	movs	r3, #0
 8013cac:	9301      	str	r3, [sp, #4]
 8013cae:	2300      	movs	r3, #0
 8013cb0:	9300      	str	r3, [sp, #0]
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	2204      	movs	r2, #4
 8013cb6:	21c5      	movs	r1, #197	; 0xc5
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f7ff fc51 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8013cc2:	7cfb      	ldrb	r3, [r7, #19]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d005      	beq.n	8013cd4 <w25qxx_sector_erase_4k+0x530>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                  /* write extended addr register failed */
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	695b      	ldr	r3, [r3, #20]
 8013ccc:	4828      	ldr	r0, [pc, #160]	; (8013d70 <w25qxx_sector_erase_4k+0x5cc>)
 8013cce:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e0d7      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8013cd8:	2300      	movs	r3, #0
 8013cda:	9309      	str	r3, [sp, #36]	; 0x24
 8013cdc:	2300      	movs	r3, #0
 8013cde:	9308      	str	r3, [sp, #32]
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	9307      	str	r3, [sp, #28]
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	9306      	str	r3, [sp, #24]
 8013ce8:	2300      	movs	r3, #0
 8013cea:	9305      	str	r3, [sp, #20]
 8013cec:	2300      	movs	r3, #0
 8013cee:	9304      	str	r3, [sp, #16]
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	9303      	str	r3, [sp, #12]
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	9302      	str	r3, [sp, #8]
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	9301      	str	r3, [sp, #4]
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	2300      	movs	r3, #0
 8013d02:	2204      	movs	r2, #4
 8013d04:	2106      	movs	r1, #6
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f7ff fc2a 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* qspi write read */
                if (res != 0)                                                                               /* check result */
 8013d10:	7cfb      	ldrb	r3, [r7, #19]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d005      	beq.n	8013d22 <w25qxx_sector_erase_4k+0x57e>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                  /* write enable failed */
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	695b      	ldr	r3, [r3, #20]
 8013d1a:	4816      	ldr	r0, [pc, #88]	; (8013d74 <w25qxx_sector_erase_4k+0x5d0>)
 8013d1c:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8013d1e:	2301      	movs	r3, #1
 8013d20:	e0b0      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 4,
 8013d22:	2300      	movs	r3, #0
 8013d24:	930a      	str	r3, [sp, #40]	; 0x28
 8013d26:	2300      	movs	r3, #0
 8013d28:	9309      	str	r3, [sp, #36]	; 0x24
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	9308      	str	r3, [sp, #32]
 8013d2e:	2300      	movs	r3, #0
 8013d30:	9307      	str	r3, [sp, #28]
 8013d32:	2300      	movs	r3, #0
 8013d34:	9306      	str	r3, [sp, #24]
 8013d36:	2300      	movs	r3, #0
 8013d38:	9305      	str	r3, [sp, #20]
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	9304      	str	r3, [sp, #16]
 8013d3e:	2300      	movs	r3, #0
 8013d40:	9303      	str	r3, [sp, #12]
 8013d42:	2300      	movs	r3, #0
 8013d44:	9302      	str	r3, [sp, #8]
 8013d46:	2303      	movs	r3, #3
 8013d48:	9301      	str	r3, [sp, #4]
 8013d4a:	2304      	movs	r3, #4
 8013d4c:	9300      	str	r3, [sp, #0]
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	2204      	movs	r2, #4
 8013d52:	2120      	movs	r1, #32
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7ff fc03 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8013d5e:	7cfb      	ldrb	r3, [r7, #19]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d048      	beq.n	8013df6 <w25qxx_sector_erase_4k+0x652>
            {
                handle->debug_print("w25qxx: sector erase 4k failed.\n");                                   /* sector erase 4k failed */
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	695b      	ldr	r3, [r3, #20]
 8013d68:	4803      	ldr	r0, [pc, #12]	; (8013d78 <w25qxx_sector_erase_4k+0x5d4>)
 8013d6a:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	e089      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
 8013d70:	0802aecc 	.word	0x0802aecc
 8013d74:	0802a8d0 	.word	0x0802a8d0
 8013d78:	0802b118 	.word	0x0802b118
 8013d7c:	0802abdc 	.word	0x0802abdc
 8013d80:	0802a934 	.word	0x0802a934
 8013d84:	0802b13c 	.word	0x0802b13c
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	7f1b      	ldrb	r3, [r3, #28]
 8013d8c:	2b01      	cmp	r3, #1
 8013d8e:	d12c      	bne.n	8013dea <w25qxx_sector_erase_4k+0x646>
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	8b5b      	ldrh	r3, [r3, #26]
 8013d94:	f64e 7217 	movw	r2, #61207	; 0xef17
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	d926      	bls.n	8013dea <w25qxx_sector_erase_4k+0x646>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 4,
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8013da0:	2300      	movs	r3, #0
 8013da2:	9309      	str	r3, [sp, #36]	; 0x24
 8013da4:	2300      	movs	r3, #0
 8013da6:	9308      	str	r3, [sp, #32]
 8013da8:	2300      	movs	r3, #0
 8013daa:	9307      	str	r3, [sp, #28]
 8013dac:	2300      	movs	r3, #0
 8013dae:	9306      	str	r3, [sp, #24]
 8013db0:	2300      	movs	r3, #0
 8013db2:	9305      	str	r3, [sp, #20]
 8013db4:	2300      	movs	r3, #0
 8013db6:	9304      	str	r3, [sp, #16]
 8013db8:	2300      	movs	r3, #0
 8013dba:	9303      	str	r3, [sp, #12]
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	9302      	str	r3, [sp, #8]
 8013dc0:	2304      	movs	r3, #4
 8013dc2:	9301      	str	r3, [sp, #4]
 8013dc4:	2304      	movs	r3, #4
 8013dc6:	9300      	str	r3, [sp, #0]
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	2204      	movs	r2, #4
 8013dcc:	2120      	movs	r1, #32
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f7ff fbc6 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8013dd8:	7cfb      	ldrb	r3, [r7, #19]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d00b      	beq.n	8013df6 <w25qxx_sector_erase_4k+0x652>
            {
                handle->debug_print("w25qxx: sector erase 4k failed.\n");                                   /* sector erase 4k failed */
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	695b      	ldr	r3, [r3, #20]
 8013de2:	482a      	ldr	r0, [pc, #168]	; (8013e8c <w25qxx_sector_erase_4k+0x6e8>)
 8013de4:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8013de6:	2301      	movs	r3, #1
 8013de8:	e04c      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                      /* address mode is invalid */
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	695b      	ldr	r3, [r3, #20]
 8013dee:	4828      	ldr	r0, [pc, #160]	; (8013e90 <w25qxx_sector_erase_4k+0x6ec>)
 8013df0:	4798      	blx	r3
           
            return 5;                                                                                       /* return error */
 8013df2:	2305      	movs	r3, #5
 8013df4:	e046      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
        }
        
        timeout = 400;                                                                                      /* max 400 ms */
 8013df6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013dfa:	617b      	str	r3, [r7, #20]
        while (timeout != 0)                                                                                /* check timeout */
 8013dfc:	e033      	b.n	8013e66 <w25qxx_sector_erase_4k+0x6c2>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 4,
 8013dfe:	2304      	movs	r3, #4
 8013e00:	930a      	str	r3, [sp, #40]	; 0x28
 8013e02:	2301      	movs	r3, #1
 8013e04:	9309      	str	r3, [sp, #36]	; 0x24
 8013e06:	f107 0312 	add.w	r3, r7, #18
 8013e0a:	9308      	str	r3, [sp, #32]
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	9307      	str	r3, [sp, #28]
 8013e10:	2300      	movs	r3, #0
 8013e12:	9306      	str	r3, [sp, #24]
 8013e14:	2300      	movs	r3, #0
 8013e16:	9305      	str	r3, [sp, #20]
 8013e18:	2300      	movs	r3, #0
 8013e1a:	9304      	str	r3, [sp, #16]
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	9303      	str	r3, [sp, #12]
 8013e20:	2300      	movs	r3, #0
 8013e22:	9302      	str	r3, [sp, #8]
 8013e24:	2300      	movs	r3, #0
 8013e26:	9301      	str	r3, [sp, #4]
 8013e28:	2300      	movs	r3, #0
 8013e2a:	9300      	str	r3, [sp, #0]
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	2204      	movs	r2, #4
 8013e30:	2105      	movs	r1, #5
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f7ff fb94 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0,
                                          (uint8_t *)&status, 1, 4);                                        /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8013e3c:	7cfb      	ldrb	r3, [r7, #19]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d005      	beq.n	8013e4e <w25qxx_sector_erase_4k+0x6aa>
            {
                handle->debug_print("w25qxx: get status1 failed.\n");                                       /* get status1 failed */
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	695b      	ldr	r3, [r3, #20]
 8013e46:	4813      	ldr	r0, [pc, #76]	; (8013e94 <w25qxx_sector_erase_4k+0x6f0>)
 8013e48:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e01a      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
            }
            if ((status & 0x01) == 0x00)                                                                    /* check status */
 8013e4e:	7cbb      	ldrb	r3, [r7, #18]
 8013e50:	f003 0301 	and.w	r3, r3, #1
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00a      	beq.n	8013e6e <w25qxx_sector_erase_4k+0x6ca>
            {
                break;                                                                                      /* break */
            }
            timeout--;                                                                                      /* timeout-- */
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	3b01      	subs	r3, #1
 8013e5c:	617b      	str	r3, [r7, #20]
            handle->delay_ms(1);                                                                            /* delay 1 ms */
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	68db      	ldr	r3, [r3, #12]
 8013e62:	2001      	movs	r0, #1
 8013e64:	4798      	blx	r3
        while (timeout != 0)                                                                                /* check timeout */
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d1c8      	bne.n	8013dfe <w25qxx_sector_erase_4k+0x65a>
 8013e6c:	e000      	b.n	8013e70 <w25qxx_sector_erase_4k+0x6cc>
                break;                                                                                      /* break */
 8013e6e:	bf00      	nop
        }
        if (timeout == 0)
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d105      	bne.n	8013e82 <w25qxx_sector_erase_4k+0x6de>
        {
            handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                      /* sector erase 4k timeout */
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	695b      	ldr	r3, [r3, #20]
 8013e7a:	4807      	ldr	r0, [pc, #28]	; (8013e98 <w25qxx_sector_erase_4k+0x6f4>)
 8013e7c:	4798      	blx	r3
           
            return 6;                                                                                       /* return error */
 8013e7e:	2306      	movs	r3, #6
 8013e80:	e000      	b.n	8013e84 <w25qxx_sector_erase_4k+0x6e0>
        }
    }
    
    return 0;                                                                                               /* success return 0 */
 8013e82:	2300      	movs	r3, #0
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3718      	adds	r7, #24
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	0802b118 	.word	0x0802b118
 8013e90:	0802abdc 	.word	0x0802abdc
 8013e94:	0802a934 	.word	0x0802a934
 8013e98:	0802b13c 	.word	0x0802b13c

08013e9c <w25qxx_init>:
 *            - 7 reset failed
 *            - 8 set address mode failed
 * @note      none
 */
uint8_t w25qxx_init(w25qxx_handle_t *handle)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b092      	sub	sp, #72	; 0x48
 8013ea0:	af0c      	add	r7, sp, #48	; 0x30
 8013ea2:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t buf[4];
    uint8_t out[2];
    uint16_t id;
    
    if (handle == NULL)                                                                    /* check handle */
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d102      	bne.n	8013eb0 <w25qxx_init+0x14>
    {
        return 2;                                                                          /* return error */
 8013eaa:	2302      	movs	r3, #2
 8013eac:	f000 bc0e 	b.w	80146cc <w25qxx_init+0x830>
    }
    if (handle->debug_print == NULL)                                                       /* check debug_print */
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	695b      	ldr	r3, [r3, #20]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d102      	bne.n	8013ebe <w25qxx_init+0x22>
    {
        return 3;                                                                          /* return error */
 8013eb8:	2303      	movs	r3, #3
 8013eba:	f000 bc07 	b.w	80146cc <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_init == NULL)                                                     /* check spi_qspi_init */
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d105      	bne.n	8013ed2 <w25qxx_init+0x36>
    {
        handle->debug_print("w25qxx: spi_qspi_init is null.\n");                           /* spi_qspi_init is null */
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	695b      	ldr	r3, [r3, #20]
 8013eca:	489e      	ldr	r0, [pc, #632]	; (8014144 <w25qxx_init+0x2a8>)
 8013ecc:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8013ece:	2303      	movs	r3, #3
 8013ed0:	e3fc      	b.n	80146cc <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_deinit == NULL)                                                   /* check spi_qspi_deinit */
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d105      	bne.n	8013ee6 <w25qxx_init+0x4a>
    {
        handle->debug_print("w25qxx: spi_qspi_deinit is null.\n");                         /* spi_qspi_deinit is null */
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	695b      	ldr	r3, [r3, #20]
 8013ede:	489a      	ldr	r0, [pc, #616]	; (8014148 <w25qxx_init+0x2ac>)
 8013ee0:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8013ee2:	2303      	movs	r3, #3
 8013ee4:	e3f2      	b.n	80146cc <w25qxx_init+0x830>
    }
    if (handle->spi_qspi_write_read == NULL)                                               /* check spi_qspi_write_read */
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	689b      	ldr	r3, [r3, #8]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d105      	bne.n	8013efa <w25qxx_init+0x5e>
    {
        handle->debug_print("w25qxx: spi_qspi_write_read is null.\n");                     /* spi_qspi_write_read is null */
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	695b      	ldr	r3, [r3, #20]
 8013ef2:	4896      	ldr	r0, [pc, #600]	; (801414c <w25qxx_init+0x2b0>)
 8013ef4:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8013ef6:	2303      	movs	r3, #3
 8013ef8:	e3e8      	b.n	80146cc <w25qxx_init+0x830>
    }
    if (handle->delay_us == NULL)                                                          /* check delay_us */
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	691b      	ldr	r3, [r3, #16]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d105      	bne.n	8013f0e <w25qxx_init+0x72>
    {
        handle->debug_print("w25qxx: delay_us is null.\n");                                /* delay_us is null */
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	695b      	ldr	r3, [r3, #20]
 8013f06:	4892      	ldr	r0, [pc, #584]	; (8014150 <w25qxx_init+0x2b4>)
 8013f08:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8013f0a:	2303      	movs	r3, #3
 8013f0c:	e3de      	b.n	80146cc <w25qxx_init+0x830>
    }
    if (handle->delay_ms == NULL)                                                          /* check delay_ms */
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	68db      	ldr	r3, [r3, #12]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d105      	bne.n	8013f22 <w25qxx_init+0x86>
    {
        handle->debug_print("w25qxx: delay_ms is null.\n");                                /* delay_ms is null */
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	695b      	ldr	r3, [r3, #20]
 8013f1a:	488e      	ldr	r0, [pc, #568]	; (8014154 <w25qxx_init+0x2b8>)
 8013f1c:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8013f1e:	2303      	movs	r3, #3
 8013f20:	e3d4      	b.n	80146cc <w25qxx_init+0x830>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                          /* spi interface */
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f040 81d1 	bne.w	80142d0 <w25qxx_init+0x434>
    {
        res = handle->spi_qspi_init();                                                     /* spi init */
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	4798      	blx	r3
 8013f34:	4603      	mov	r3, r0
 8013f36:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                      /* check result */
 8013f38:	7dfb      	ldrb	r3, [r7, #23]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d005      	beq.n	8013f4a <w25qxx_init+0xae>
        {
            handle->debug_print("w25qxx: spi init failed.\n");                             /* spi init failed */
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	695b      	ldr	r3, [r3, #20]
 8013f42:	4885      	ldr	r0, [pc, #532]	; (8014158 <w25qxx_init+0x2bc>)
 8013f44:	4798      	blx	r3
           
            return 1;                                                                      /* return error */
 8013f46:	2301      	movs	r3, #1
 8013f48:	e3c0      	b.n	80146cc <w25qxx_init+0x830>
        }
        if (handle->dual_quad_spi_enable != 0)                                             /* enable dual quad spi */
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	7fdb      	ldrb	r3, [r3, #31]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	f000 8110 	beq.w	8014174 <w25qxx_init+0x2d8>
        {
            res = a_w25qxx_qspi_write_read(handle,
 8013f54:	2301      	movs	r3, #1
 8013f56:	930a      	str	r3, [sp, #40]	; 0x28
 8013f58:	2301      	movs	r3, #1
 8013f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8013f5c:	f107 030a 	add.w	r3, r7, #10
 8013f60:	9308      	str	r3, [sp, #32]
 8013f62:	2300      	movs	r3, #0
 8013f64:	9307      	str	r3, [sp, #28]
 8013f66:	2300      	movs	r3, #0
 8013f68:	9306      	str	r3, [sp, #24]
 8013f6a:	2318      	movs	r3, #24
 8013f6c:	9305      	str	r3, [sp, #20]
 8013f6e:	2300      	movs	r3, #0
 8013f70:	9304      	str	r3, [sp, #16]
 8013f72:	2300      	movs	r3, #0
 8013f74:	9303      	str	r3, [sp, #12]
 8013f76:	2300      	movs	r3, #0
 8013f78:	9302      	str	r3, [sp, #8]
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	9301      	str	r3, [sp, #4]
 8013f7e:	2300      	movs	r3, #0
 8013f80:	9300      	str	r3, [sp, #0]
 8013f82:	2300      	movs	r3, #0
 8013f84:	2201      	movs	r2, #1
 8013f86:	21ab      	movs	r1, #171	; 0xab
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f7ff fae9 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_RELEASE_POWER_DOWN, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           3 * 8, NULL, 0x00,
                                          (uint8_t *)&id, 1, 1);                           /* spi write read */
            if (res != 0)                                                                  /* check result */
 8013f92:	7dfb      	ldrb	r3, [r7, #23]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d008      	beq.n	8013faa <w25qxx_init+0x10e>
            {
                handle->debug_print("w25qxx: release power down failed.\n");               /* release power down failed */
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	695b      	ldr	r3, [r3, #20]
 8013f9c:	486f      	ldr	r0, [pc, #444]	; (801415c <w25qxx_init+0x2c0>)
 8013f9e:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	685b      	ldr	r3, [r3, #4]
 8013fa4:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	e390      	b.n	80146cc <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 8013faa:	2300      	movs	r3, #0
 8013fac:	930a      	str	r3, [sp, #40]	; 0x28
 8013fae:	2300      	movs	r3, #0
 8013fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	9308      	str	r3, [sp, #32]
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	9307      	str	r3, [sp, #28]
 8013fba:	2300      	movs	r3, #0
 8013fbc:	9306      	str	r3, [sp, #24]
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	9305      	str	r3, [sp, #20]
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	9304      	str	r3, [sp, #16]
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	9303      	str	r3, [sp, #12]
 8013fca:	2300      	movs	r3, #0
 8013fcc:	9302      	str	r3, [sp, #8]
 8013fce:	2300      	movs	r3, #0
 8013fd0:	9301      	str	r3, [sp, #4]
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	2201      	movs	r2, #1
 8013fda:	2166      	movs	r1, #102	; 0x66
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7ff fabf 	bl	8013560 <a_w25qxx_qspi_write_read>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_ENABLE_RESET, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8013fe6:	7dfb      	ldrb	r3, [r7, #23]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d008      	beq.n	8013ffe <w25qxx_init+0x162>
            {
                handle->debug_print("w25qxx: enable reset failed.\n");                     /* enable reset failed */
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	695b      	ldr	r3, [r3, #20]
 8013ff0:	485b      	ldr	r0, [pc, #364]	; (8014160 <w25qxx_init+0x2c4>)
 8013ff2:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 8013ffa:	2307      	movs	r3, #7
 8013ffc:	e366      	b.n	80146cc <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 8013ffe:	2300      	movs	r3, #0
 8014000:	930a      	str	r3, [sp, #40]	; 0x28
 8014002:	2300      	movs	r3, #0
 8014004:	9309      	str	r3, [sp, #36]	; 0x24
 8014006:	2300      	movs	r3, #0
 8014008:	9308      	str	r3, [sp, #32]
 801400a:	2300      	movs	r3, #0
 801400c:	9307      	str	r3, [sp, #28]
 801400e:	2300      	movs	r3, #0
 8014010:	9306      	str	r3, [sp, #24]
 8014012:	2300      	movs	r3, #0
 8014014:	9305      	str	r3, [sp, #20]
 8014016:	2300      	movs	r3, #0
 8014018:	9304      	str	r3, [sp, #16]
 801401a:	2300      	movs	r3, #0
 801401c:	9303      	str	r3, [sp, #12]
 801401e:	2300      	movs	r3, #0
 8014020:	9302      	str	r3, [sp, #8]
 8014022:	2300      	movs	r3, #0
 8014024:	9301      	str	r3, [sp, #4]
 8014026:	2300      	movs	r3, #0
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	2300      	movs	r3, #0
 801402c:	2201      	movs	r2, #1
 801402e:	2199      	movs	r1, #153	; 0x99
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f7ff fa95 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014036:	4603      	mov	r3, r0
 8014038:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_RESET_DEVICE, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 801403a:	7dfb      	ldrb	r3, [r7, #23]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d008      	beq.n	8014052 <w25qxx_init+0x1b6>
            {
                handle->debug_print("w25qxx: reset device failed.\n");                     /* reset device failed */
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	695b      	ldr	r3, [r3, #20]
 8014044:	4847      	ldr	r0, [pc, #284]	; (8014164 <w25qxx_init+0x2c8>)
 8014046:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 801404e:	2307      	movs	r3, #7
 8014050:	e33c      	b.n	80146cc <w25qxx_init+0x830>
            }
            handle->delay_ms(10);                                                          /* delay 10 ms */
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	68db      	ldr	r3, [r3, #12]
 8014056:	200a      	movs	r0, #10
 8014058:	4798      	blx	r3
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_MANUFACTURER, 1,
 801405a:	2301      	movs	r3, #1
 801405c:	930a      	str	r3, [sp, #40]	; 0x28
 801405e:	2302      	movs	r3, #2
 8014060:	9309      	str	r3, [sp, #36]	; 0x24
 8014062:	f107 030c 	add.w	r3, r7, #12
 8014066:	9308      	str	r3, [sp, #32]
 8014068:	2300      	movs	r3, #0
 801406a:	9307      	str	r3, [sp, #28]
 801406c:	2300      	movs	r3, #0
 801406e:	9306      	str	r3, [sp, #24]
 8014070:	2300      	movs	r3, #0
 8014072:	9305      	str	r3, [sp, #20]
 8014074:	2300      	movs	r3, #0
 8014076:	9304      	str	r3, [sp, #16]
 8014078:	2300      	movs	r3, #0
 801407a:	9303      	str	r3, [sp, #12]
 801407c:	2300      	movs	r3, #0
 801407e:	9302      	str	r3, [sp, #8]
 8014080:	2303      	movs	r3, #3
 8014082:	9301      	str	r3, [sp, #4]
 8014084:	2301      	movs	r3, #1
 8014086:	9300      	str	r3, [sp, #0]
 8014088:	2300      	movs	r3, #0
 801408a:	2201      	movs	r2, #1
 801408c:	2190      	movs	r1, #144	; 0x90
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f7ff fa66 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014094:	4603      	mov	r3, r0
 8014096:	75fb      	strb	r3, [r7, #23]
                                           0x00000000, 1, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                          (uint8_t *)out, 2, 1);                           /* qspi write read */
            if (res != 0)                                                                  /* check result */
 8014098:	7dfb      	ldrb	r3, [r7, #23]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d008      	beq.n	80140b0 <w25qxx_init+0x214>
            {
                handle->debug_print("w25qxx: get manufacturer device id failed.\n");       /* get manufacturer device id failed */
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	695b      	ldr	r3, [r3, #20]
 80140a2:	4831      	ldr	r0, [pc, #196]	; (8014168 <w25qxx_init+0x2cc>)
 80140a4:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 80140ac:	2301      	movs	r3, #1
 80140ae:	e30d      	b.n	80146cc <w25qxx_init+0x830>
            }
            id = (uint16_t)out[0] << 8 | out[1];                                           /* set id */
 80140b0:	7b3b      	ldrb	r3, [r7, #12]
 80140b2:	021b      	lsls	r3, r3, #8
 80140b4:	b21a      	sxth	r2, r3
 80140b6:	7b7b      	ldrb	r3, [r7, #13]
 80140b8:	b21b      	sxth	r3, r3
 80140ba:	4313      	orrs	r3, r2
 80140bc:	b21b      	sxth	r3, r3
 80140be:	b29b      	uxth	r3, r3
 80140c0:	817b      	strh	r3, [r7, #10]
            if (id != handle->type)                                                        /* check id */
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	8b5a      	ldrh	r2, [r3, #26]
 80140c6:	897b      	ldrh	r3, [r7, #10]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d008      	beq.n	80140de <w25qxx_init+0x242>
            {
                handle->debug_print("w25qxx: id is invalid.\n");                           /* id is invalid */
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	695b      	ldr	r3, [r3, #20]
 80140d0:	4826      	ldr	r0, [pc, #152]	; (801416c <w25qxx_init+0x2d0>)
 80140d2:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	4798      	blx	r3
                
                return 6;                                                                  /* return error */
 80140da:	2306      	movs	r3, #6
 80140dc:	e2f6      	b.n	80146cc <w25qxx_init+0x830>
            }
            if (handle->type >= W25Q256)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	8b5b      	ldrh	r3, [r3, #26]
 80140e2:	f64e 7217 	movw	r2, #61207	; 0xef17
 80140e6:	4293      	cmp	r3, r2
 80140e8:	f240 82e9 	bls.w	80146be <w25qxx_init+0x822>
            {
                res = a_w25qxx_qspi_write_read(handle, 0xE9, 1,
 80140ec:	2300      	movs	r3, #0
 80140ee:	930a      	str	r3, [sp, #40]	; 0x28
 80140f0:	2300      	movs	r3, #0
 80140f2:	9309      	str	r3, [sp, #36]	; 0x24
 80140f4:	2300      	movs	r3, #0
 80140f6:	9308      	str	r3, [sp, #32]
 80140f8:	2300      	movs	r3, #0
 80140fa:	9307      	str	r3, [sp, #28]
 80140fc:	2300      	movs	r3, #0
 80140fe:	9306      	str	r3, [sp, #24]
 8014100:	2300      	movs	r3, #0
 8014102:	9305      	str	r3, [sp, #20]
 8014104:	2300      	movs	r3, #0
 8014106:	9304      	str	r3, [sp, #16]
 8014108:	2300      	movs	r3, #0
 801410a:	9303      	str	r3, [sp, #12]
 801410c:	2300      	movs	r3, #0
 801410e:	9302      	str	r3, [sp, #8]
 8014110:	2300      	movs	r3, #0
 8014112:	9301      	str	r3, [sp, #4]
 8014114:	2300      	movs	r3, #0
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	2300      	movs	r3, #0
 801411a:	2201      	movs	r2, #1
 801411c:	21e9      	movs	r1, #233	; 0xe9
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7ff fa1e 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014124:	4603      	mov	r3, r0
 8014126:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0, 0,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0, 0);                                /* qspi write read */
                if (res != 0)                                                              /* check result */
 8014128:	7dfb      	ldrb	r3, [r7, #23]
 801412a:	2b00      	cmp	r3, #0
 801412c:	f000 82c7 	beq.w	80146be <w25qxx_init+0x822>
                {
                    handle->debug_print("w25qxx: enter 3 byte mode failed.\n");            /* enter 3 byte mode failed */
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	695b      	ldr	r3, [r3, #20]
 8014134:	480e      	ldr	r0, [pc, #56]	; (8014170 <w25qxx_init+0x2d4>)
 8014136:	4798      	blx	r3
                    (void)handle->spi_qspi_deinit();                                       /** deinit */
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	685b      	ldr	r3, [r3, #4]
 801413c:	4798      	blx	r3
                    
                    return 1;                                                              /* return error */
 801413e:	2301      	movs	r3, #1
 8014140:	e2c4      	b.n	80146cc <w25qxx_init+0x830>
 8014142:	bf00      	nop
 8014144:	0802b290 	.word	0x0802b290
 8014148:	0802b2b0 	.word	0x0802b2b0
 801414c:	0802b2d4 	.word	0x0802b2d4
 8014150:	0802b2fc 	.word	0x0802b2fc
 8014154:	0802b318 	.word	0x0802b318
 8014158:	0802b334 	.word	0x0802b334
 801415c:	0802ab20 	.word	0x0802ab20
 8014160:	0802ad78 	.word	0x0802ad78
 8014164:	0802ad98 	.word	0x0802ad98
 8014168:	0802ab44 	.word	0x0802ab44
 801416c:	0802b350 	.word	0x0802b350
 8014170:	0802b368 	.word	0x0802b368
                }
            }
        }
        else                                                                               /* single spi */
        {
            buf[0] = W25QXX_COMMAND_RELEASE_POWER_DOWN;                                    /* release power down command */
 8014174:	23ab      	movs	r3, #171	; 0xab
 8014176:	743b      	strb	r3, [r7, #16]
            buf[1] = 0xFF;                                                                 /* dummy */
 8014178:	23ff      	movs	r3, #255	; 0xff
 801417a:	747b      	strb	r3, [r7, #17]
            buf[2] = 0xFF;                                                                 /* dummy */
 801417c:	23ff      	movs	r3, #255	; 0xff
 801417e:	74bb      	strb	r3, [r7, #18]
            buf[3] = 0xFF;                                                                 /* dummy */
 8014180:	23ff      	movs	r3, #255	; 0xff
 8014182:	74fb      	strb	r3, [r7, #19]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4,
 8014184:	f107 030a 	add.w	r3, r7, #10
 8014188:	f107 0110 	add.w	r1, r7, #16
 801418c:	2201      	movs	r2, #1
 801418e:	9200      	str	r2, [sp, #0]
 8014190:	2204      	movs	r2, #4
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f7ff f9b8 	bl	8013508 <a_w25qxx_spi_write_read>
 8014198:	4603      	mov	r3, r0
 801419a:	75fb      	strb	r3, [r7, #23]
                                         (uint8_t *)&id, 1);                               /* spi write read */
            if (res != 0)                                                                  /* check result */
 801419c:	7dfb      	ldrb	r3, [r7, #23]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d008      	beq.n	80141b4 <w25qxx_init+0x318>
            {
                handle->debug_print("w25qxx: release power down failed.\n");               /* release power down failed */
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	695b      	ldr	r3, [r3, #20]
 80141a6:	4891      	ldr	r0, [pc, #580]	; (80143ec <w25qxx_init+0x550>)
 80141a8:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 80141b0:	2301      	movs	r3, #1
 80141b2:	e28b      	b.n	80146cc <w25qxx_init+0x830>
            }
            buf[0] = W25QXX_COMMAND_ENABLE_RESET;                                          /* enable reset command */
 80141b4:	2366      	movs	r3, #102	; 0x66
 80141b6:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);             /* spi write read */
 80141b8:	f107 0110 	add.w	r1, r7, #16
 80141bc:	2300      	movs	r3, #0
 80141be:	9300      	str	r3, [sp, #0]
 80141c0:	2300      	movs	r3, #0
 80141c2:	2201      	movs	r2, #1
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f7ff f99f 	bl	8013508 <a_w25qxx_spi_write_read>
 80141ca:	4603      	mov	r3, r0
 80141cc:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                  /* check result */
 80141ce:	7dfb      	ldrb	r3, [r7, #23]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d008      	beq.n	80141e6 <w25qxx_init+0x34a>
            {
                handle->debug_print("w25qxx: enable reset failed.\n");                     /* enable reset failed */
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	695b      	ldr	r3, [r3, #20]
 80141d8:	4885      	ldr	r0, [pc, #532]	; (80143f0 <w25qxx_init+0x554>)
 80141da:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 80141e2:	2307      	movs	r3, #7
 80141e4:	e272      	b.n	80146cc <w25qxx_init+0x830>
            }
            buf[0] = W25QXX_COMMAND_RESET_DEVICE;                                          /* reset device command */
 80141e6:	2399      	movs	r3, #153	; 0x99
 80141e8:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);             /* spi write read */
 80141ea:	f107 0110 	add.w	r1, r7, #16
 80141ee:	2300      	movs	r3, #0
 80141f0:	9300      	str	r3, [sp, #0]
 80141f2:	2300      	movs	r3, #0
 80141f4:	2201      	movs	r2, #1
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7ff f986 	bl	8013508 <a_w25qxx_spi_write_read>
 80141fc:	4603      	mov	r3, r0
 80141fe:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                  /* check result */
 8014200:	7dfb      	ldrb	r3, [r7, #23]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d008      	beq.n	8014218 <w25qxx_init+0x37c>
            {
                handle->debug_print("w25qxx: reset device failed.\n");                     /* reset device failed */
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	695b      	ldr	r3, [r3, #20]
 801420a:	487a      	ldr	r0, [pc, #488]	; (80143f4 <w25qxx_init+0x558>)
 801420c:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	4798      	blx	r3
                
                return 7;                                                                  /* return error */
 8014214:	2307      	movs	r3, #7
 8014216:	e259      	b.n	80146cc <w25qxx_init+0x830>
            }
            handle->delay_ms(10);                                                          /* delay 10 ms */
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	200a      	movs	r0, #10
 801421e:	4798      	blx	r3
            buf[0] = W25QXX_COMMAND_READ_MANUFACTURER;                                     /* read manufacturer command */
 8014220:	2390      	movs	r3, #144	; 0x90
 8014222:	743b      	strb	r3, [r7, #16]
            buf[1] = 0x00;                                                                 /* dummy */
 8014224:	2300      	movs	r3, #0
 8014226:	747b      	strb	r3, [r7, #17]
            buf[2] = 0x00;                                                                 /* dummy */
 8014228:	2300      	movs	r3, #0
 801422a:	74bb      	strb	r3, [r7, #18]
            buf[3] = 0x00;                                                                 /* dummy */
 801422c:	2300      	movs	r3, #0
 801422e:	74fb      	strb	r3, [r7, #19]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4,
 8014230:	f107 030c 	add.w	r3, r7, #12
 8014234:	f107 0110 	add.w	r1, r7, #16
 8014238:	2202      	movs	r2, #2
 801423a:	9200      	str	r2, [sp, #0]
 801423c:	2204      	movs	r2, #4
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f7ff f962 	bl	8013508 <a_w25qxx_spi_write_read>
 8014244:	4603      	mov	r3, r0
 8014246:	75fb      	strb	r3, [r7, #23]
                                         (uint8_t *)out, 2);                               /* spi write read */
            if (res != 0)                                                                  /* check result */
 8014248:	7dfb      	ldrb	r3, [r7, #23]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d008      	beq.n	8014260 <w25qxx_init+0x3c4>
            {
                handle->debug_print("w25qxx: get manufacturer device id failed.\n");       /* get manufacturer device id failed */
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	695b      	ldr	r3, [r3, #20]
 8014252:	4869      	ldr	r0, [pc, #420]	; (80143f8 <w25qxx_init+0x55c>)
 8014254:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	4798      	blx	r3
                
                return 4;                                                                  /* return error */
 801425c:	2304      	movs	r3, #4
 801425e:	e235      	b.n	80146cc <w25qxx_init+0x830>
            }
            id = (uint16_t)out[0] << 8 | out[1];                                           /* set id */
 8014260:	7b3b      	ldrb	r3, [r7, #12]
 8014262:	021b      	lsls	r3, r3, #8
 8014264:	b21a      	sxth	r2, r3
 8014266:	7b7b      	ldrb	r3, [r7, #13]
 8014268:	b21b      	sxth	r3, r3
 801426a:	4313      	orrs	r3, r2
 801426c:	b21b      	sxth	r3, r3
 801426e:	b29b      	uxth	r3, r3
 8014270:	817b      	strh	r3, [r7, #10]
            if (id != handle->type)                                                        /* check id */
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	8b5a      	ldrh	r2, [r3, #26]
 8014276:	897b      	ldrh	r3, [r7, #10]
 8014278:	429a      	cmp	r2, r3
 801427a:	d008      	beq.n	801428e <w25qxx_init+0x3f2>
            {
                handle->debug_print("w25qxx: id is invalid.\n");                           /* id is invalid */
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	695b      	ldr	r3, [r3, #20]
 8014280:	485e      	ldr	r0, [pc, #376]	; (80143fc <w25qxx_init+0x560>)
 8014282:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	685b      	ldr	r3, [r3, #4]
 8014288:	4798      	blx	r3
                
                return 6;                                                                  /* return error */
 801428a:	2306      	movs	r3, #6
 801428c:	e21e      	b.n	80146cc <w25qxx_init+0x830>
            }
            if (handle->type >= W25Q256)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	8b5b      	ldrh	r3, [r3, #26]
 8014292:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014296:	4293      	cmp	r3, r2
 8014298:	f240 8211 	bls.w	80146be <w25qxx_init+0x822>
            {
                buf[0] = 0xE9;                                                             /* 3 byte mode */
 801429c:	23e9      	movs	r3, #233	; 0xe9
 801429e:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);         /* spi write read */
 80142a0:	f107 0110 	add.w	r1, r7, #16
 80142a4:	2300      	movs	r3, #0
 80142a6:	9300      	str	r3, [sp, #0]
 80142a8:	2300      	movs	r3, #0
 80142aa:	2201      	movs	r2, #1
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f7ff f92b 	bl	8013508 <a_w25qxx_spi_write_read>
 80142b2:	4603      	mov	r3, r0
 80142b4:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                              /* check result */
 80142b6:	7dfb      	ldrb	r3, [r7, #23]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	f000 8200 	beq.w	80146be <w25qxx_init+0x822>
                {
                    handle->debug_print("w25qxx: set address mode failed.\n");             /* set address mode failed */
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	695b      	ldr	r3, [r3, #20]
 80142c2:	484f      	ldr	r0, [pc, #316]	; (8014400 <w25qxx_init+0x564>)
 80142c4:	4798      	blx	r3
                    (void)handle->spi_qspi_deinit();                                       /** deinit */
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	4798      	blx	r3
                    
                    return 8;                                                              /* return error */
 80142cc:	2308      	movs	r3, #8
 80142ce:	e1fd      	b.n	80146cc <w25qxx_init+0x830>
            }
        }
    }
    else
    {
        res = handle->spi_qspi_init();                                                     /* qspi init */
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4798      	blx	r3
 80142d6:	4603      	mov	r3, r0
 80142d8:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                      /* check result */
 80142da:	7dfb      	ldrb	r3, [r7, #23]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d005      	beq.n	80142ec <w25qxx_init+0x450>
        {
            handle->debug_print("w25qxx: qspi init failed.\n");                            /* qspi init failed */
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	695b      	ldr	r3, [r3, #20]
 80142e4:	4847      	ldr	r0, [pc, #284]	; (8014404 <w25qxx_init+0x568>)
 80142e6:	4798      	blx	r3
           
            return 1;                                                                      /* return error */
 80142e8:	2301      	movs	r3, #1
 80142ea:	e1ef      	b.n	80146cc <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 80142ec:	2301      	movs	r3, #1
 80142ee:	930a      	str	r3, [sp, #40]	; 0x28
 80142f0:	2301      	movs	r3, #1
 80142f2:	9309      	str	r3, [sp, #36]	; 0x24
 80142f4:	f107 030a 	add.w	r3, r7, #10
 80142f8:	9308      	str	r3, [sp, #32]
 80142fa:	2300      	movs	r3, #0
 80142fc:	9307      	str	r3, [sp, #28]
 80142fe:	2300      	movs	r3, #0
 8014300:	9306      	str	r3, [sp, #24]
 8014302:	2318      	movs	r3, #24
 8014304:	9305      	str	r3, [sp, #20]
 8014306:	2300      	movs	r3, #0
 8014308:	9304      	str	r3, [sp, #16]
 801430a:	2300      	movs	r3, #0
 801430c:	9303      	str	r3, [sp, #12]
 801430e:	2300      	movs	r3, #0
 8014310:	9302      	str	r3, [sp, #8]
 8014312:	2300      	movs	r3, #0
 8014314:	9301      	str	r3, [sp, #4]
 8014316:	2300      	movs	r3, #0
 8014318:	9300      	str	r3, [sp, #0]
 801431a:	2300      	movs	r3, #0
 801431c:	2201      	movs	r2, #1
 801431e:	21ab      	movs	r1, #171	; 0xab
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f7ff f91d 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014326:	4603      	mov	r3, r0
 8014328:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_RELEASE_POWER_DOWN, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       3 * 8, NULL, 0x00,
                                      (uint8_t *)&id, 1, 1);                               /* spi write read */
        if (res != 0)                                                                      /* check result */
 801432a:	7dfb      	ldrb	r3, [r7, #23]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d008      	beq.n	8014342 <w25qxx_init+0x4a6>
        {
            handle->debug_print("w25qxx: release power down failed.\n");                   /* release power down failed */
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	695b      	ldr	r3, [r3, #20]
 8014334:	482d      	ldr	r0, [pc, #180]	; (80143ec <w25qxx_init+0x550>)
 8014336:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	685b      	ldr	r3, [r3, #4]
 801433c:	4798      	blx	r3
            
            return 1;                                                                      /* return error */
 801433e:	2301      	movs	r3, #1
 8014340:	e1c4      	b.n	80146cc <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 8014342:	2300      	movs	r3, #0
 8014344:	930a      	str	r3, [sp, #40]	; 0x28
 8014346:	2300      	movs	r3, #0
 8014348:	9309      	str	r3, [sp, #36]	; 0x24
 801434a:	2300      	movs	r3, #0
 801434c:	9308      	str	r3, [sp, #32]
 801434e:	2300      	movs	r3, #0
 8014350:	9307      	str	r3, [sp, #28]
 8014352:	2300      	movs	r3, #0
 8014354:	9306      	str	r3, [sp, #24]
 8014356:	2300      	movs	r3, #0
 8014358:	9305      	str	r3, [sp, #20]
 801435a:	2300      	movs	r3, #0
 801435c:	9304      	str	r3, [sp, #16]
 801435e:	2300      	movs	r3, #0
 8014360:	9303      	str	r3, [sp, #12]
 8014362:	2300      	movs	r3, #0
 8014364:	9302      	str	r3, [sp, #8]
 8014366:	2300      	movs	r3, #0
 8014368:	9301      	str	r3, [sp, #4]
 801436a:	2300      	movs	r3, #0
 801436c:	9300      	str	r3, [sp, #0]
 801436e:	2300      	movs	r3, #0
 8014370:	2201      	movs	r2, #1
 8014372:	2166      	movs	r1, #102	; 0x66
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f7ff f8f3 	bl	8013560 <a_w25qxx_qspi_write_read>
 801437a:	4603      	mov	r3, r0
 801437c:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_ENABLE_RESET, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 801437e:	7dfb      	ldrb	r3, [r7, #23]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d008      	beq.n	8014396 <w25qxx_init+0x4fa>
        {
            handle->debug_print("w25qxx: enable reset failed.\n");                         /* enable reset failed */
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	695b      	ldr	r3, [r3, #20]
 8014388:	4819      	ldr	r0, [pc, #100]	; (80143f0 <w25qxx_init+0x554>)
 801438a:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	685b      	ldr	r3, [r3, #4]
 8014390:	4798      	blx	r3
            
            return 7;                                                                      /* return error */
 8014392:	2307      	movs	r3, #7
 8014394:	e19a      	b.n	80146cc <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle,
 8014396:	2300      	movs	r3, #0
 8014398:	930a      	str	r3, [sp, #40]	; 0x28
 801439a:	2300      	movs	r3, #0
 801439c:	9309      	str	r3, [sp, #36]	; 0x24
 801439e:	2300      	movs	r3, #0
 80143a0:	9308      	str	r3, [sp, #32]
 80143a2:	2300      	movs	r3, #0
 80143a4:	9307      	str	r3, [sp, #28]
 80143a6:	2300      	movs	r3, #0
 80143a8:	9306      	str	r3, [sp, #24]
 80143aa:	2300      	movs	r3, #0
 80143ac:	9305      	str	r3, [sp, #20]
 80143ae:	2300      	movs	r3, #0
 80143b0:	9304      	str	r3, [sp, #16]
 80143b2:	2300      	movs	r3, #0
 80143b4:	9303      	str	r3, [sp, #12]
 80143b6:	2300      	movs	r3, #0
 80143b8:	9302      	str	r3, [sp, #8]
 80143ba:	2300      	movs	r3, #0
 80143bc:	9301      	str	r3, [sp, #4]
 80143be:	2300      	movs	r3, #0
 80143c0:	9300      	str	r3, [sp, #0]
 80143c2:	2300      	movs	r3, #0
 80143c4:	2201      	movs	r2, #1
 80143c6:	2199      	movs	r1, #153	; 0x99
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f7ff f8c9 	bl	8013560 <a_w25qxx_qspi_write_read>
 80143ce:	4603      	mov	r3, r0
 80143d0:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_RESET_DEVICE, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 80143d2:	7dfb      	ldrb	r3, [r7, #23]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d017      	beq.n	8014408 <w25qxx_init+0x56c>
        {
            handle->debug_print("w25qxx: reset device failed.\n");                         /* reset device failed */
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	695b      	ldr	r3, [r3, #20]
 80143dc:	4805      	ldr	r0, [pc, #20]	; (80143f4 <w25qxx_init+0x558>)
 80143de:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	685b      	ldr	r3, [r3, #4]
 80143e4:	4798      	blx	r3
            
            return 7;                                                                      /* return error */
 80143e6:	2307      	movs	r3, #7
 80143e8:	e170      	b.n	80146cc <w25qxx_init+0x830>
 80143ea:	bf00      	nop
 80143ec:	0802ab20 	.word	0x0802ab20
 80143f0:	0802ad78 	.word	0x0802ad78
 80143f4:	0802ad98 	.word	0x0802ad98
 80143f8:	0802ab44 	.word	0x0802ab44
 80143fc:	0802b350 	.word	0x0802b350
 8014400:	0802a8ac 	.word	0x0802a8ac
 8014404:	0802b38c 	.word	0x0802b38c
        }
        handle->delay_ms(10);                                                              /* delay 10 ms */
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	68db      	ldr	r3, [r3, #12]
 801440c:	200a      	movs	r0, #10
 801440e:	4798      	blx	r3
        res = a_w25qxx_qspi_write_read(handle,
 8014410:	2301      	movs	r3, #1
 8014412:	930a      	str	r3, [sp, #40]	; 0x28
 8014414:	2301      	movs	r3, #1
 8014416:	9309      	str	r3, [sp, #36]	; 0x24
 8014418:	f107 0316 	add.w	r3, r7, #22
 801441c:	9308      	str	r3, [sp, #32]
 801441e:	2300      	movs	r3, #0
 8014420:	9307      	str	r3, [sp, #28]
 8014422:	2300      	movs	r3, #0
 8014424:	9306      	str	r3, [sp, #24]
 8014426:	2300      	movs	r3, #0
 8014428:	9305      	str	r3, [sp, #20]
 801442a:	2300      	movs	r3, #0
 801442c:	9304      	str	r3, [sp, #16]
 801442e:	2300      	movs	r3, #0
 8014430:	9303      	str	r3, [sp, #12]
 8014432:	2300      	movs	r3, #0
 8014434:	9302      	str	r3, [sp, #8]
 8014436:	2300      	movs	r3, #0
 8014438:	9301      	str	r3, [sp, #4]
 801443a:	2300      	movs	r3, #0
 801443c:	9300      	str	r3, [sp, #0]
 801443e:	2300      	movs	r3, #0
 8014440:	2201      	movs	r2, #1
 8014442:	2135      	movs	r1, #53	; 0x35
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f7ff f88b 	bl	8013560 <a_w25qxx_qspi_write_read>
 801444a:	4603      	mov	r3, r0
 801444c:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_READ_STATUS_REG2, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                      (uint8_t *)&status, 1, 1);                           /* spi write read */
        if (res != 0)                                                                      /* check result */
 801444e:	7dfb      	ldrb	r3, [r7, #23]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d008      	beq.n	8014466 <w25qxx_init+0x5ca>
        {
            handle->debug_print("w25qxx: read status 2 failed.\n");                        /* read status 2 failed */
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	695b      	ldr	r3, [r3, #20]
 8014458:	489e      	ldr	r0, [pc, #632]	; (80146d4 <w25qxx_init+0x838>)
 801445a:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8014462:	2305      	movs	r3, #5
 8014464:	e132      	b.n	80146cc <w25qxx_init+0x830>
        }
        if ((status & 0x02) == 0)                                                          /* check status */
 8014466:	7dbb      	ldrb	r3, [r7, #22]
 8014468:	f003 0302 	and.w	r3, r3, #2
 801446c:	2b00      	cmp	r3, #0
 801446e:	d153      	bne.n	8014518 <w25qxx_init+0x67c>
        {
            res = a_w25qxx_qspi_write_read(handle,
 8014470:	2300      	movs	r3, #0
 8014472:	930a      	str	r3, [sp, #40]	; 0x28
 8014474:	2300      	movs	r3, #0
 8014476:	9309      	str	r3, [sp, #36]	; 0x24
 8014478:	2300      	movs	r3, #0
 801447a:	9308      	str	r3, [sp, #32]
 801447c:	2300      	movs	r3, #0
 801447e:	9307      	str	r3, [sp, #28]
 8014480:	2300      	movs	r3, #0
 8014482:	9306      	str	r3, [sp, #24]
 8014484:	2300      	movs	r3, #0
 8014486:	9305      	str	r3, [sp, #20]
 8014488:	2300      	movs	r3, #0
 801448a:	9304      	str	r3, [sp, #16]
 801448c:	2300      	movs	r3, #0
 801448e:	9303      	str	r3, [sp, #12]
 8014490:	2300      	movs	r3, #0
 8014492:	9302      	str	r3, [sp, #8]
 8014494:	2300      	movs	r3, #0
 8014496:	9301      	str	r3, [sp, #4]
 8014498:	2300      	movs	r3, #0
 801449a:	9300      	str	r3, [sp, #0]
 801449c:	2300      	movs	r3, #0
 801449e:	2201      	movs	r2, #1
 80144a0:	2150      	movs	r1, #80	; 0x50
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7ff f85c 	bl	8013560 <a_w25qxx_qspi_write_read>
 80144a8:	4603      	mov	r3, r0
 80144aa:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_VOLATILE_SR_WRITE_ENABLE, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 80144ac:	7dfb      	ldrb	r3, [r7, #23]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d008      	beq.n	80144c4 <w25qxx_init+0x628>
            {
                handle->debug_print("w25qxx: set sr write enable failed.\n");              /* set sr write enable failed */
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	695b      	ldr	r3, [r3, #20]
 80144b6:	4888      	ldr	r0, [pc, #544]	; (80146d8 <w25qxx_init+0x83c>)
 80144b8:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	685b      	ldr	r3, [r3, #4]
 80144be:	4798      	blx	r3
                
                return 5;                                                                  /* return error */
 80144c0:	2305      	movs	r3, #5
 80144c2:	e103      	b.n	80146cc <w25qxx_init+0x830>
            }
            res = a_w25qxx_qspi_write_read(handle,
 80144c4:	2300      	movs	r3, #0
 80144c6:	930a      	str	r3, [sp, #40]	; 0x28
 80144c8:	2300      	movs	r3, #0
 80144ca:	9309      	str	r3, [sp, #36]	; 0x24
 80144cc:	2300      	movs	r3, #0
 80144ce:	9308      	str	r3, [sp, #32]
 80144d0:	2300      	movs	r3, #0
 80144d2:	9307      	str	r3, [sp, #28]
 80144d4:	2300      	movs	r3, #0
 80144d6:	9306      	str	r3, [sp, #24]
 80144d8:	2300      	movs	r3, #0
 80144da:	9305      	str	r3, [sp, #20]
 80144dc:	2300      	movs	r3, #0
 80144de:	9304      	str	r3, [sp, #16]
 80144e0:	2300      	movs	r3, #0
 80144e2:	9303      	str	r3, [sp, #12]
 80144e4:	2300      	movs	r3, #0
 80144e6:	9302      	str	r3, [sp, #8]
 80144e8:	2300      	movs	r3, #0
 80144ea:	9301      	str	r3, [sp, #4]
 80144ec:	2300      	movs	r3, #0
 80144ee:	9300      	str	r3, [sp, #0]
 80144f0:	2300      	movs	r3, #0
 80144f2:	2201      	movs	r2, #1
 80144f4:	2131      	movs	r1, #49	; 0x31
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f7ff f832 	bl	8013560 <a_w25qxx_qspi_write_read>
 80144fc:	4603      	mov	r3, r0
 80144fe:	75fb      	strb	r3, [r7, #23]
                                           W25QXX_COMMAND_WRITE_STATUS_REG2, 1,
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                              /* spi write read */
            if (res != 0)                                                                  /* check result */
 8014500:	7dfb      	ldrb	r3, [r7, #23]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d008      	beq.n	8014518 <w25qxx_init+0x67c>
            {
                handle->debug_print("w25qxx: write status 2 failed.\n");                   /* write status 2 failed */
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	695b      	ldr	r3, [r3, #20]
 801450a:	4874      	ldr	r0, [pc, #464]	; (80146dc <w25qxx_init+0x840>)
 801450c:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	4798      	blx	r3
                
                return 5;                                                                  /* return error */
 8014514:	2305      	movs	r3, #5
 8014516:	e0d9      	b.n	80146cc <w25qxx_init+0x830>
            }
        }
        res = a_w25qxx_qspi_write_read(handle,
 8014518:	2300      	movs	r3, #0
 801451a:	930a      	str	r3, [sp, #40]	; 0x28
 801451c:	2300      	movs	r3, #0
 801451e:	9309      	str	r3, [sp, #36]	; 0x24
 8014520:	2300      	movs	r3, #0
 8014522:	9308      	str	r3, [sp, #32]
 8014524:	2300      	movs	r3, #0
 8014526:	9307      	str	r3, [sp, #28]
 8014528:	2300      	movs	r3, #0
 801452a:	9306      	str	r3, [sp, #24]
 801452c:	2300      	movs	r3, #0
 801452e:	9305      	str	r3, [sp, #20]
 8014530:	2300      	movs	r3, #0
 8014532:	9304      	str	r3, [sp, #16]
 8014534:	2300      	movs	r3, #0
 8014536:	9303      	str	r3, [sp, #12]
 8014538:	2300      	movs	r3, #0
 801453a:	9302      	str	r3, [sp, #8]
 801453c:	2300      	movs	r3, #0
 801453e:	9301      	str	r3, [sp, #4]
 8014540:	2300      	movs	r3, #0
 8014542:	9300      	str	r3, [sp, #0]
 8014544:	2300      	movs	r3, #0
 8014546:	2201      	movs	r2, #1
 8014548:	2138      	movs	r1, #56	; 0x38
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f7ff f808 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014550:	4603      	mov	r3, r0
 8014552:	75fb      	strb	r3, [r7, #23]
                                       W25QXX_COMMAND_ENTER_QSPI_MODE, 1,
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                  /* spi write read */
        if (res != 0)                                                                      /* check result */
 8014554:	7dfb      	ldrb	r3, [r7, #23]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d008      	beq.n	801456c <w25qxx_init+0x6d0>
        {
            handle->debug_print("w25qxx: enter qspi failed.\n");                           /* enter qspi failed */
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	695b      	ldr	r3, [r3, #20]
 801455e:	4860      	ldr	r0, [pc, #384]	; (80146e0 <w25qxx_init+0x844>)
 8014560:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 8014568:	2305      	movs	r3, #5
 801456a:	e0af      	b.n	80146cc <w25qxx_init+0x830>
        }
        handle->delay_ms(10);                                                              /* delay 10 ms */
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	200a      	movs	r0, #10
 8014572:	4798      	blx	r3
        buf[0] = 3 << 4;                                                                   /* set 8 read dummy */
 8014574:	2330      	movs	r3, #48	; 0x30
 8014576:	743b      	strb	r3, [r7, #16]
        handle->param = buf[0];                                                            /* set param */
 8014578:	7c3a      	ldrb	r2, [r7, #16]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	775a      	strb	r2, [r3, #29]
        handle->dummy = 8;                                                                 /* set dummy */
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2208      	movs	r2, #8
 8014582:	779a      	strb	r2, [r3, #30]
        res = a_w25qxx_qspi_write_read(handle, 0xC0, 4,
 8014584:	2304      	movs	r3, #4
 8014586:	930a      	str	r3, [sp, #40]	; 0x28
 8014588:	2300      	movs	r3, #0
 801458a:	9309      	str	r3, [sp, #36]	; 0x24
 801458c:	2300      	movs	r3, #0
 801458e:	9308      	str	r3, [sp, #32]
 8014590:	2301      	movs	r3, #1
 8014592:	9307      	str	r3, [sp, #28]
 8014594:	f107 0310 	add.w	r3, r7, #16
 8014598:	9306      	str	r3, [sp, #24]
 801459a:	2300      	movs	r3, #0
 801459c:	9305      	str	r3, [sp, #20]
 801459e:	2300      	movs	r3, #0
 80145a0:	9304      	str	r3, [sp, #16]
 80145a2:	2300      	movs	r3, #0
 80145a4:	9303      	str	r3, [sp, #12]
 80145a6:	2300      	movs	r3, #0
 80145a8:	9302      	str	r3, [sp, #8]
 80145aa:	2300      	movs	r3, #0
 80145ac:	9301      	str	r3, [sp, #4]
 80145ae:	2300      	movs	r3, #0
 80145b0:	9300      	str	r3, [sp, #0]
 80145b2:	2300      	movs	r3, #0
 80145b4:	2204      	movs	r2, #4
 80145b6:	21c0      	movs	r1, #192	; 0xc0
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7fe ffd1 	bl	8013560 <a_w25qxx_qspi_write_read>
 80145be:	4603      	mov	r3, r0
 80145c0:	75fb      	strb	r3, [r7, #23]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, (uint8_t *)buf, 1,
                                       NULL, 0x00, 4);                                     /* qspi write read */
        if (res != 0)                                                                      /* check result */
 80145c2:	7dfb      	ldrb	r3, [r7, #23]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d008      	beq.n	80145da <w25qxx_init+0x73e>
        {
            handle->debug_print("w25qxx: set read parameters failed.\n");                  /* set read parameters failed */
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	695b      	ldr	r3, [r3, #20]
 80145cc:	4845      	ldr	r0, [pc, #276]	; (80146e4 <w25qxx_init+0x848>)
 80145ce:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	4798      	blx	r3
            
            return 5;                                                                      /* return error */
 80145d6:	2305      	movs	r3, #5
 80145d8:	e078      	b.n	80146cc <w25qxx_init+0x830>
        }
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_MANUFACTURER, 4,
 80145da:	2304      	movs	r3, #4
 80145dc:	930a      	str	r3, [sp, #40]	; 0x28
 80145de:	2302      	movs	r3, #2
 80145e0:	9309      	str	r3, [sp, #36]	; 0x24
 80145e2:	f107 030c 	add.w	r3, r7, #12
 80145e6:	9308      	str	r3, [sp, #32]
 80145e8:	2300      	movs	r3, #0
 80145ea:	9307      	str	r3, [sp, #28]
 80145ec:	2300      	movs	r3, #0
 80145ee:	9306      	str	r3, [sp, #24]
 80145f0:	2300      	movs	r3, #0
 80145f2:	9305      	str	r3, [sp, #20]
 80145f4:	2300      	movs	r3, #0
 80145f6:	9304      	str	r3, [sp, #16]
 80145f8:	2300      	movs	r3, #0
 80145fa:	9303      	str	r3, [sp, #12]
 80145fc:	2300      	movs	r3, #0
 80145fe:	9302      	str	r3, [sp, #8]
 8014600:	2303      	movs	r3, #3
 8014602:	9301      	str	r3, [sp, #4]
 8014604:	2304      	movs	r3, #4
 8014606:	9300      	str	r3, [sp, #0]
 8014608:	2300      	movs	r3, #0
 801460a:	2204      	movs	r2, #4
 801460c:	2190      	movs	r1, #144	; 0x90
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f7fe ffa6 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014614:	4603      	mov	r3, r0
 8014616:	75fb      	strb	r3, [r7, #23]
                                       0x00000000, 4, 3,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                      (uint8_t *)out, 2, 4);                               /* qspi write read */
        if (res != 0)                                                                      /* check result */
 8014618:	7dfb      	ldrb	r3, [r7, #23]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d008      	beq.n	8014630 <w25qxx_init+0x794>
        {
            handle->debug_print("w25qxx: get manufacturer device id failed.\n");           /* get manufacturer device id failed */
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	695b      	ldr	r3, [r3, #20]
 8014622:	4831      	ldr	r0, [pc, #196]	; (80146e8 <w25qxx_init+0x84c>)
 8014624:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	4798      	blx	r3
            
            return 1;                                                                      /* return error */
 801462c:	2301      	movs	r3, #1
 801462e:	e04d      	b.n	80146cc <w25qxx_init+0x830>
        }
        id = (uint16_t)out[0] << 8 | out[1];                                               /* set id */
 8014630:	7b3b      	ldrb	r3, [r7, #12]
 8014632:	021b      	lsls	r3, r3, #8
 8014634:	b21a      	sxth	r2, r3
 8014636:	7b7b      	ldrb	r3, [r7, #13]
 8014638:	b21b      	sxth	r3, r3
 801463a:	4313      	orrs	r3, r2
 801463c:	b21b      	sxth	r3, r3
 801463e:	b29b      	uxth	r3, r3
 8014640:	817b      	strh	r3, [r7, #10]
        if (id != handle->type)                                                            /* check id */
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	8b5a      	ldrh	r2, [r3, #26]
 8014646:	897b      	ldrh	r3, [r7, #10]
 8014648:	429a      	cmp	r2, r3
 801464a:	d008      	beq.n	801465e <w25qxx_init+0x7c2>
        {
            handle->debug_print("w25qxx: id is invalid.\n");                               /* id is invalid */
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	695b      	ldr	r3, [r3, #20]
 8014650:	4826      	ldr	r0, [pc, #152]	; (80146ec <w25qxx_init+0x850>)
 8014652:	4798      	blx	r3
            (void)handle->spi_qspi_deinit();                                               /** deinit */
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	4798      	blx	r3
            
            return 6;                                                                      /* return error */
 801465a:	2306      	movs	r3, #6
 801465c:	e036      	b.n	80146cc <w25qxx_init+0x830>
        }
        if (handle->type >= W25Q256)
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	8b5b      	ldrh	r3, [r3, #26]
 8014662:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014666:	4293      	cmp	r3, r2
 8014668:	d929      	bls.n	80146be <w25qxx_init+0x822>
        {
            res = a_w25qxx_qspi_write_read(handle, 0xE9, 4,
 801466a:	2300      	movs	r3, #0
 801466c:	930a      	str	r3, [sp, #40]	; 0x28
 801466e:	2300      	movs	r3, #0
 8014670:	9309      	str	r3, [sp, #36]	; 0x24
 8014672:	2300      	movs	r3, #0
 8014674:	9308      	str	r3, [sp, #32]
 8014676:	2300      	movs	r3, #0
 8014678:	9307      	str	r3, [sp, #28]
 801467a:	2300      	movs	r3, #0
 801467c:	9306      	str	r3, [sp, #24]
 801467e:	2300      	movs	r3, #0
 8014680:	9305      	str	r3, [sp, #20]
 8014682:	2300      	movs	r3, #0
 8014684:	9304      	str	r3, [sp, #16]
 8014686:	2300      	movs	r3, #0
 8014688:	9303      	str	r3, [sp, #12]
 801468a:	2300      	movs	r3, #0
 801468c:	9302      	str	r3, [sp, #8]
 801468e:	2300      	movs	r3, #0
 8014690:	9301      	str	r3, [sp, #4]
 8014692:	2300      	movs	r3, #0
 8014694:	9300      	str	r3, [sp, #0]
 8014696:	2300      	movs	r3, #0
 8014698:	2204      	movs	r2, #4
 801469a:	21e9      	movs	r1, #233	; 0xe9
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7fe ff5f 	bl	8013560 <a_w25qxx_qspi_write_read>
 80146a2:	4603      	mov	r3, r0
 80146a4:	75fb      	strb	r3, [r7, #23]
                                           0x00000000, 0, 0,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0, 0);                                    /* qspi write read */
            if (res != 0)                                                                  /* check result */
 80146a6:	7dfb      	ldrb	r3, [r7, #23]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d008      	beq.n	80146be <w25qxx_init+0x822>
            {
                handle->debug_print("w25qxx: enter 3 byte mode failed.\n");                /* enter 3 byte mode failed */
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	695b      	ldr	r3, [r3, #20]
 80146b0:	480f      	ldr	r0, [pc, #60]	; (80146f0 <w25qxx_init+0x854>)
 80146b2:	4798      	blx	r3
                (void)handle->spi_qspi_deinit();                                           /** deinit */
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	4798      	blx	r3
                
                return 1;                                                                  /* return error */
 80146ba:	2301      	movs	r3, #1
 80146bc:	e006      	b.n	80146cc <w25qxx_init+0x830>
            }
        }
    }
    handle->address_mode = W25QXX_ADDRESS_MODE_3_BYTE;                                     /* set address mode */
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2200      	movs	r2, #0
 80146c2:	771a      	strb	r2, [r3, #28]
    handle->inited = 1;                                                                    /* initialize inited */
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2201      	movs	r2, #1
 80146c8:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                              /* success return 0 */
 80146ca:	2300      	movs	r3, #0
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	3718      	adds	r7, #24
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}
 80146d4:	0802b3a8 	.word	0x0802b3a8
 80146d8:	0802b3c8 	.word	0x0802b3c8
 80146dc:	0802b3f0 	.word	0x0802b3f0
 80146e0:	0802b410 	.word	0x0802b410
 80146e4:	0802acf8 	.word	0x0802acf8
 80146e8:	0802ab44 	.word	0x0802ab44
 80146ec:	0802b350 	.word	0x0802b350
 80146f0:	0802b368 	.word	0x0802b368

080146f4 <w25qxx_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t w25qxx_deinit(w25qxx_handle_t *handle)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b090      	sub	sp, #64	; 0x40
 80146f8:	af0c      	add	r7, sp, #48	; 0x30
 80146fa:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[1];
    
    if (handle == NULL)                                                            /* check handle */
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d101      	bne.n	8014706 <w25qxx_deinit+0x12>
    {
        return 2;                                                                  /* return error */
 8014702:	2302      	movs	r3, #2
 8014704:	e0ac      	b.n	8014860 <w25qxx_deinit+0x16c>
    }   
    if (handle->inited != 1)                                                       /* check handle initialization */
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	7e1b      	ldrb	r3, [r3, #24]
 801470a:	2b01      	cmp	r3, #1
 801470c:	d001      	beq.n	8014712 <w25qxx_deinit+0x1e>
    {
        return 3;                                                                  /* return error */
 801470e:	2303      	movs	r3, #3
 8014710:	e0a6      	b.n	8014860 <w25qxx_deinit+0x16c>
    }

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                  /* spi interface */
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d140      	bne.n	801479e <w25qxx_deinit+0xaa>
    {
        if (handle->dual_quad_spi_enable != 0)                                     /* enable dual quad spi */
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	7fdb      	ldrb	r3, [r3, #31]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d026      	beq.n	8014772 <w25qxx_deinit+0x7e>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_POWER_DOWN, 1,
 8014724:	2300      	movs	r3, #0
 8014726:	930a      	str	r3, [sp, #40]	; 0x28
 8014728:	2300      	movs	r3, #0
 801472a:	9309      	str	r3, [sp, #36]	; 0x24
 801472c:	2300      	movs	r3, #0
 801472e:	9308      	str	r3, [sp, #32]
 8014730:	2300      	movs	r3, #0
 8014732:	9307      	str	r3, [sp, #28]
 8014734:	2300      	movs	r3, #0
 8014736:	9306      	str	r3, [sp, #24]
 8014738:	2300      	movs	r3, #0
 801473a:	9305      	str	r3, [sp, #20]
 801473c:	2300      	movs	r3, #0
 801473e:	9304      	str	r3, [sp, #16]
 8014740:	2300      	movs	r3, #0
 8014742:	9303      	str	r3, [sp, #12]
 8014744:	2300      	movs	r3, #0
 8014746:	9302      	str	r3, [sp, #8]
 8014748:	2300      	movs	r3, #0
 801474a:	9301      	str	r3, [sp, #4]
 801474c:	2300      	movs	r3, #0
 801474e:	9300      	str	r3, [sp, #0]
 8014750:	2300      	movs	r3, #0
 8014752:	2201      	movs	r2, #1
 8014754:	21b9      	movs	r1, #185	; 0xb9
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f7fe ff02 	bl	8013560 <a_w25qxx_qspi_write_read>
 801475c:	4603      	mov	r3, r0
 801475e:	73fb      	strb	r3, [r7, #15]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0);                         /* spi write read */
            if (res != 0)                                                          /* check result */
 8014760:	7bfb      	ldrb	r3, [r7, #15]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d06d      	beq.n	8014842 <w25qxx_deinit+0x14e>
            {
                handle->debug_print("w25qxx: power down failed.\n");               /* power down failed */
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	695b      	ldr	r3, [r3, #20]
 801476a:	483f      	ldr	r0, [pc, #252]	; (8014868 <w25qxx_deinit+0x174>)
 801476c:	4798      	blx	r3
               
                return 4;                                                          /* return error */
 801476e:	2304      	movs	r3, #4
 8014770:	e076      	b.n	8014860 <w25qxx_deinit+0x16c>
            }
        }
        else                                                                       /* single spi */
        {
            buf[0] = W25QXX_COMMAND_POWER_DOWN;                                    /* power down command */
 8014772:	23b9      	movs	r3, #185	; 0xb9
 8014774:	733b      	strb	r3, [r7, #12]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf,
 8014776:	f107 010c 	add.w	r1, r7, #12
 801477a:	2300      	movs	r3, #0
 801477c:	9300      	str	r3, [sp, #0]
 801477e:	2300      	movs	r3, #0
 8014780:	2201      	movs	r2, #1
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f7fe fec0 	bl	8013508 <a_w25qxx_spi_write_read>
 8014788:	4603      	mov	r3, r0
 801478a:	73fb      	strb	r3, [r7, #15]
                                          1, NULL, 0);                             /* spi write read */
            if (res != 0)                                                          /* check result */
 801478c:	7bfb      	ldrb	r3, [r7, #15]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d057      	beq.n	8014842 <w25qxx_deinit+0x14e>
            {
                handle->debug_print("w25qxx: power down failed.\n");               /* power down failed */
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	695b      	ldr	r3, [r3, #20]
 8014796:	4834      	ldr	r0, [pc, #208]	; (8014868 <w25qxx_deinit+0x174>)
 8014798:	4798      	blx	r3
               
                return 4;                                                          /* return error */
 801479a:	2304      	movs	r3, #4
 801479c:	e060      	b.n	8014860 <w25qxx_deinit+0x16c>
            }
        }
    }
    else                                                                           /* qspi interface */
    {
        res = a_w25qxx_qspi_write_read(handle, 0xFF, 4,
 801479e:	2300      	movs	r3, #0
 80147a0:	930a      	str	r3, [sp, #40]	; 0x28
 80147a2:	2300      	movs	r3, #0
 80147a4:	9309      	str	r3, [sp, #36]	; 0x24
 80147a6:	2300      	movs	r3, #0
 80147a8:	9308      	str	r3, [sp, #32]
 80147aa:	2300      	movs	r3, #0
 80147ac:	9307      	str	r3, [sp, #28]
 80147ae:	2300      	movs	r3, #0
 80147b0:	9306      	str	r3, [sp, #24]
 80147b2:	2300      	movs	r3, #0
 80147b4:	9305      	str	r3, [sp, #20]
 80147b6:	2300      	movs	r3, #0
 80147b8:	9304      	str	r3, [sp, #16]
 80147ba:	2300      	movs	r3, #0
 80147bc:	9303      	str	r3, [sp, #12]
 80147be:	2300      	movs	r3, #0
 80147c0:	9302      	str	r3, [sp, #8]
 80147c2:	2300      	movs	r3, #0
 80147c4:	9301      	str	r3, [sp, #4]
 80147c6:	2300      	movs	r3, #0
 80147c8:	9300      	str	r3, [sp, #0]
 80147ca:	2300      	movs	r3, #0
 80147cc:	2204      	movs	r2, #4
 80147ce:	21ff      	movs	r1, #255	; 0xff
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7fe fec5 	bl	8013560 <a_w25qxx_qspi_write_read>
 80147d6:	4603      	mov	r3, r0
 80147d8:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                       NULL, 0x00, 0);                             /* spi write read */
        if (res != 0)                                                              /* check result */
 80147da:	7bfb      	ldrb	r3, [r7, #15]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d005      	beq.n	80147ec <w25qxx_deinit+0xf8>
        {
            handle->debug_print("w25qxx: exit qspi mode failed.\n");               /* exit qspi mode failed */
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	695b      	ldr	r3, [r3, #20]
 80147e4:	4821      	ldr	r0, [pc, #132]	; (801486c <w25qxx_deinit+0x178>)
 80147e6:	4798      	blx	r3
           
            return 1;                                                              /* return error */
 80147e8:	2301      	movs	r3, #1
 80147ea:	e039      	b.n	8014860 <w25qxx_deinit+0x16c>
        }
        handle->delay_ms(10);                                                      /* delay 10 ms */
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	68db      	ldr	r3, [r3, #12]
 80147f0:	200a      	movs	r0, #10
 80147f2:	4798      	blx	r3
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_POWER_DOWN, 1,
 80147f4:	2300      	movs	r3, #0
 80147f6:	930a      	str	r3, [sp, #40]	; 0x28
 80147f8:	2300      	movs	r3, #0
 80147fa:	9309      	str	r3, [sp, #36]	; 0x24
 80147fc:	2300      	movs	r3, #0
 80147fe:	9308      	str	r3, [sp, #32]
 8014800:	2300      	movs	r3, #0
 8014802:	9307      	str	r3, [sp, #28]
 8014804:	2300      	movs	r3, #0
 8014806:	9306      	str	r3, [sp, #24]
 8014808:	2300      	movs	r3, #0
 801480a:	9305      	str	r3, [sp, #20]
 801480c:	2300      	movs	r3, #0
 801480e:	9304      	str	r3, [sp, #16]
 8014810:	2300      	movs	r3, #0
 8014812:	9303      	str	r3, [sp, #12]
 8014814:	2300      	movs	r3, #0
 8014816:	9302      	str	r3, [sp, #8]
 8014818:	2300      	movs	r3, #0
 801481a:	9301      	str	r3, [sp, #4]
 801481c:	2300      	movs	r3, #0
 801481e:	9300      	str	r3, [sp, #0]
 8014820:	2300      	movs	r3, #0
 8014822:	2201      	movs	r2, #1
 8014824:	21b9      	movs	r1, #185	; 0xb9
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f7fe fe9a 	bl	8013560 <a_w25qxx_qspi_write_read>
 801482c:	4603      	mov	r3, r0
 801482e:	73fb      	strb	r3, [r7, #15]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0, NULL, 0x00,
                                       NULL, 0x00, 0);                             /* spi write read */
        if (res != 0)                                                              /* check result */
 8014830:	7bfb      	ldrb	r3, [r7, #15]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d005      	beq.n	8014842 <w25qxx_deinit+0x14e>
        {
            handle->debug_print("w25qxx: power down failed.\n");                   /* power down failed */
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	695b      	ldr	r3, [r3, #20]
 801483a:	480b      	ldr	r0, [pc, #44]	; (8014868 <w25qxx_deinit+0x174>)
 801483c:	4798      	blx	r3
           
            return 4;                                                              /* return error */
 801483e:	2304      	movs	r3, #4
 8014840:	e00e      	b.n	8014860 <w25qxx_deinit+0x16c>
        }
    }
    res = handle->spi_qspi_deinit();                                               /* qspi deinit */
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	685b      	ldr	r3, [r3, #4]
 8014846:	4798      	blx	r3
 8014848:	4603      	mov	r3, r0
 801484a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 801484c:	7bfb      	ldrb	r3, [r7, #15]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d005      	beq.n	801485e <w25qxx_deinit+0x16a>
    {
        handle->debug_print("w25qxx: spi or qspi deinit failed.\n");               /* spi or qspi deinit failed */
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	695b      	ldr	r3, [r3, #20]
 8014856:	4806      	ldr	r0, [pc, #24]	; (8014870 <w25qxx_deinit+0x17c>)
 8014858:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 801485a:	2301      	movs	r3, #1
 801485c:	e000      	b.n	8014860 <w25qxx_deinit+0x16c>
    }
    
    return 0;                                                                      /* success return 0 */
 801485e:	2300      	movs	r3, #0
}
 8014860:	4618      	mov	r0, r3
 8014862:	3710      	adds	r7, #16
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}
 8014868:	0802aae4 	.word	0x0802aae4
 801486c:	0802ab00 	.word	0x0802ab00
 8014870:	0802b42c 	.word	0x0802b42c

08014874 <w25qxx_read>:
 *             - 3 handle is not initialized
 *             - 4 address mode is invalid
 * @note       none
 */
uint8_t w25qxx_read(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b092      	sub	sp, #72	; 0x48
 8014878:	af0c      	add	r7, sp, #48	; 0x30
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	607a      	str	r2, [r7, #4]
 8014880:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t buf[6];
    
    if (handle == NULL)                                                                                   /* check handle */
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d101      	bne.n	801488c <w25qxx_read+0x18>
    {
        return 2;                                                                                         /* return error */
 8014888:	2302      	movs	r3, #2
 801488a:	e22c      	b.n	8014ce6 <w25qxx_read+0x472>
    }   
    if (handle->inited != 1)                                                                              /* check handle initialization */
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	7e1b      	ldrb	r3, [r3, #24]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d001      	beq.n	8014898 <w25qxx_read+0x24>
    {
        return 3;                                                                                         /* return error */
 8014894:	2303      	movs	r3, #3
 8014896:	e226      	b.n	8014ce6 <w25qxx_read+0x472>
    }
    
    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                         /* spi interface */
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	f040 8162 	bne.w	8014b68 <w25qxx_read+0x2f4>
    {
        if (handle->dual_quad_spi_enable != 0)                                                            /* enable dual quad spi */
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	7fdb      	ldrb	r3, [r3, #31]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	f000 80be 	beq.w	8014a2a <w25qxx_read+0x1b6>
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	7f1b      	ldrb	r3, [r3, #28]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	f040 8081 	bne.w	80149ba <w25qxx_read+0x146>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	8b5b      	ldrh	r3, [r3, #26]
 80148bc:	f64e 7217 	movw	r2, #61207	; 0xef17
 80148c0:	4293      	cmp	r3, r2
 80148c2:	d952      	bls.n	801496a <w25qxx_read+0xf6>
                {
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 80148c4:	2300      	movs	r3, #0
 80148c6:	930a      	str	r3, [sp, #40]	; 0x28
 80148c8:	2300      	movs	r3, #0
 80148ca:	9309      	str	r3, [sp, #36]	; 0x24
 80148cc:	2300      	movs	r3, #0
 80148ce:	9308      	str	r3, [sp, #32]
 80148d0:	2300      	movs	r3, #0
 80148d2:	9307      	str	r3, [sp, #28]
 80148d4:	2300      	movs	r3, #0
 80148d6:	9306      	str	r3, [sp, #24]
 80148d8:	2300      	movs	r3, #0
 80148da:	9305      	str	r3, [sp, #20]
 80148dc:	2300      	movs	r3, #0
 80148de:	9304      	str	r3, [sp, #16]
 80148e0:	2300      	movs	r3, #0
 80148e2:	9303      	str	r3, [sp, #12]
 80148e4:	2300      	movs	r3, #0
 80148e6:	9302      	str	r3, [sp, #8]
 80148e8:	2300      	movs	r3, #0
 80148ea:	9301      	str	r3, [sp, #4]
 80148ec:	2300      	movs	r3, #0
 80148ee:	9300      	str	r3, [sp, #0]
 80148f0:	2300      	movs	r3, #0
 80148f2:	2201      	movs	r2, #1
 80148f4:	2106      	movs	r1, #6
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f7fe fe32 	bl	8013560 <a_w25qxx_qspi_write_read>
 80148fc:	4603      	mov	r3, r0
 80148fe:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                     /* qspi write read */
                    if (res != 0)                                                                         /* check result */
 8014900:	7dfb      	ldrb	r3, [r7, #23]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d005      	beq.n	8014912 <w25qxx_read+0x9e>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	695b      	ldr	r3, [r3, #20]
 801490a:	4893      	ldr	r0, [pc, #588]	; (8014b58 <w25qxx_read+0x2e4>)
 801490c:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 801490e:	2301      	movs	r3, #1
 8014910:	e1e9      	b.n	8014ce6 <w25qxx_read+0x472>
                    }
                    buf[0] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	0e1b      	lsrs	r3, r3, #24
 8014916:	b2db      	uxtb	r3, r3
 8014918:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 801491a:	2301      	movs	r3, #1
 801491c:	930a      	str	r3, [sp, #40]	; 0x28
 801491e:	2300      	movs	r3, #0
 8014920:	9309      	str	r3, [sp, #36]	; 0x24
 8014922:	2300      	movs	r3, #0
 8014924:	9308      	str	r3, [sp, #32]
 8014926:	2301      	movs	r3, #1
 8014928:	9307      	str	r3, [sp, #28]
 801492a:	f107 0310 	add.w	r3, r7, #16
 801492e:	9306      	str	r3, [sp, #24]
 8014930:	2300      	movs	r3, #0
 8014932:	9305      	str	r3, [sp, #20]
 8014934:	2300      	movs	r3, #0
 8014936:	9304      	str	r3, [sp, #16]
 8014938:	2300      	movs	r3, #0
 801493a:	9303      	str	r3, [sp, #12]
 801493c:	2300      	movs	r3, #0
 801493e:	9302      	str	r3, [sp, #8]
 8014940:	2300      	movs	r3, #0
 8014942:	9301      	str	r3, [sp, #4]
 8014944:	2300      	movs	r3, #0
 8014946:	9300      	str	r3, [sp, #0]
 8014948:	2300      	movs	r3, #0
 801494a:	2201      	movs	r2, #1
 801494c:	21c5      	movs	r1, #197	; 0xc5
 801494e:	68f8      	ldr	r0, [r7, #12]
 8014950:	f7fe fe06 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014954:	4603      	mov	r3, r0
 8014956:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                        /* spi write read */
                    if (res != 0)                                                                         /* check result */
 8014958:	7dfb      	ldrb	r3, [r7, #23]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d005      	beq.n	801496a <w25qxx_read+0xf6>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	695b      	ldr	r3, [r3, #20]
 8014962:	487e      	ldr	r0, [pc, #504]	; (8014b5c <w25qxx_read+0x2e8>)
 8014964:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8014966:	2301      	movs	r3, #1
 8014968:	e1bd      	b.n	8014ce6 <w25qxx_read+0x472>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 801496a:	2301      	movs	r3, #1
 801496c:	930a      	str	r3, [sp, #40]	; 0x28
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	9309      	str	r3, [sp, #36]	; 0x24
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	9308      	str	r3, [sp, #32]
 8014976:	2300      	movs	r3, #0
 8014978:	9307      	str	r3, [sp, #28]
 801497a:	2300      	movs	r3, #0
 801497c:	9306      	str	r3, [sp, #24]
 801497e:	2308      	movs	r3, #8
 8014980:	9305      	str	r3, [sp, #20]
 8014982:	2300      	movs	r3, #0
 8014984:	9304      	str	r3, [sp, #16]
 8014986:	2300      	movs	r3, #0
 8014988:	9303      	str	r3, [sp, #12]
 801498a:	2300      	movs	r3, #0
 801498c:	9302      	str	r3, [sp, #8]
 801498e:	2303      	movs	r3, #3
 8014990:	9301      	str	r3, [sp, #4]
 8014992:	2301      	movs	r3, #1
 8014994:	9300      	str	r3, [sp, #0]
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	2201      	movs	r2, #1
 801499a:	210b      	movs	r1, #11
 801499c:	68f8      	ldr	r0, [r7, #12]
 801499e:	f7fe fddf 	bl	8013560 <a_w25qxx_qspi_write_read>
 80149a2:	4603      	mov	r3, r0
 80149a4:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,                                             /* spi write */
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 80149a6:	7dfb      	ldrb	r3, [r7, #23]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	f000 819b 	beq.w	8014ce4 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	695b      	ldr	r3, [r3, #20]
 80149b2:	486b      	ldr	r0, [pc, #428]	; (8014b60 <w25qxx_read+0x2ec>)
 80149b4:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 80149b6:	2301      	movs	r3, #1
 80149b8:	e195      	b.n	8014ce6 <w25qxx_read+0x472>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	7f1b      	ldrb	r3, [r3, #28]
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d12d      	bne.n	8014a1e <w25qxx_read+0x1aa>
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	8b5b      	ldrh	r3, [r3, #26]
 80149c6:	f64e 7217 	movw	r2, #61207	; 0xef17
 80149ca:	4293      	cmp	r3, r2
 80149cc:	d927      	bls.n	8014a1e <w25qxx_read+0x1aa>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 80149ce:	2301      	movs	r3, #1
 80149d0:	930a      	str	r3, [sp, #40]	; 0x28
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	9309      	str	r3, [sp, #36]	; 0x24
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	9308      	str	r3, [sp, #32]
 80149da:	2300      	movs	r3, #0
 80149dc:	9307      	str	r3, [sp, #28]
 80149de:	2300      	movs	r3, #0
 80149e0:	9306      	str	r3, [sp, #24]
 80149e2:	2308      	movs	r3, #8
 80149e4:	9305      	str	r3, [sp, #20]
 80149e6:	2300      	movs	r3, #0
 80149e8:	9304      	str	r3, [sp, #16]
 80149ea:	2300      	movs	r3, #0
 80149ec:	9303      	str	r3, [sp, #12]
 80149ee:	2300      	movs	r3, #0
 80149f0:	9302      	str	r3, [sp, #8]
 80149f2:	2304      	movs	r3, #4
 80149f4:	9301      	str	r3, [sp, #4]
 80149f6:	2301      	movs	r3, #1
 80149f8:	9300      	str	r3, [sp, #0]
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	2201      	movs	r2, #1
 80149fe:	210b      	movs	r1, #11
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f7fe fdad 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014a06:	4603      	mov	r3, r0
 8014a08:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,                                             /* spi write */
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8014a0a:	7dfb      	ldrb	r3, [r7, #23]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f000 8169 	beq.w	8014ce4 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	695b      	ldr	r3, [r3, #20]
 8014a16:	4852      	ldr	r0, [pc, #328]	; (8014b60 <w25qxx_read+0x2ec>)
 8014a18:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	e163      	b.n	8014ce6 <w25qxx_read+0x472>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	695b      	ldr	r3, [r3, #20]
 8014a22:	4850      	ldr	r0, [pc, #320]	; (8014b64 <w25qxx_read+0x2f0>)
 8014a24:	4798      	blx	r3
               
                return 4;                                                                                 /* return error */
 8014a26:	2304      	movs	r3, #4
 8014a28:	e15d      	b.n	8014ce6 <w25qxx_read+0x472>
            }
        }
        else                                                                                              /* single spi */
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	7f1b      	ldrb	r3, [r3, #28]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d159      	bne.n	8014ae6 <w25qxx_read+0x272>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	8b5b      	ldrh	r3, [r3, #26]
 8014a36:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014a3a:	4293      	cmp	r3, r2
 8014a3c:	d92f      	bls.n	8014a9e <w25qxx_read+0x22a>
                {
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                 /* write enable command */
 8014a3e:	2306      	movs	r3, #6
 8014a40:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                    /* spi write read */
 8014a42:	f107 0110 	add.w	r1, r7, #16
 8014a46:	2300      	movs	r3, #0
 8014a48:	9300      	str	r3, [sp, #0]
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	68f8      	ldr	r0, [r7, #12]
 8014a50:	f7fe fd5a 	bl	8013508 <a_w25qxx_spi_write_read>
 8014a54:	4603      	mov	r3, r0
 8014a56:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 8014a58:	7dfb      	ldrb	r3, [r7, #23]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d005      	beq.n	8014a6a <w25qxx_read+0x1f6>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	695b      	ldr	r3, [r3, #20]
 8014a62:	483d      	ldr	r0, [pc, #244]	; (8014b58 <w25qxx_read+0x2e4>)
 8014a64:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8014a66:	2301      	movs	r3, #1
 8014a68:	e13d      	b.n	8014ce6 <w25qxx_read+0x472>
                    }
                    buf[0] = 0xC5;                                                                        /* write extended addr register command */
 8014a6a:	23c5      	movs	r3, #197	; 0xc5
 8014a6c:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	0e1b      	lsrs	r3, r3, #24
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                    /* spi write read */
 8014a76:	f107 0110 	add.w	r1, r7, #16
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	9300      	str	r3, [sp, #0]
 8014a7e:	2300      	movs	r3, #0
 8014a80:	2202      	movs	r2, #2
 8014a82:	68f8      	ldr	r0, [r7, #12]
 8014a84:	f7fe fd40 	bl	8013508 <a_w25qxx_spi_write_read>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 8014a8c:	7dfb      	ldrb	r3, [r7, #23]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d005      	beq.n	8014a9e <w25qxx_read+0x22a>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	695b      	ldr	r3, [r3, #20]
 8014a96:	4831      	ldr	r0, [pc, #196]	; (8014b5c <w25qxx_read+0x2e8>)
 8014a98:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	e123      	b.n	8014ce6 <w25qxx_read+0x472>
                    }
                }
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 8014a9e:	230b      	movs	r3, #11
 8014aa0:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	0c1b      	lsrs	r3, r3, #16
 8014aa6:	b2db      	uxtb	r3, r3
 8014aa8:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	0a1b      	lsrs	r3, r3, #8
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	b2db      	uxtb	r3, r3
 8014ab6:	74fb      	strb	r3, [r7, #19]
                buf[4] = 0x00;                                                                            /* dummy */
 8014ab8:	2300      	movs	r3, #0
 8014aba:	753b      	strb	r3, [r7, #20]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, (uint8_t *)data, (uint32_t)len); /* spi write read */
 8014abc:	f107 0110 	add.w	r1, r7, #16
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	9300      	str	r3, [sp, #0]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2205      	movs	r2, #5
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f7fe fd1d 	bl	8013508 <a_w25qxx_spi_write_read>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8014ad2:	7dfb      	ldrb	r3, [r7, #23]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	f000 8105 	beq.w	8014ce4 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	695b      	ldr	r3, [r3, #20]
 8014ade:	4820      	ldr	r0, [pc, #128]	; (8014b60 <w25qxx_read+0x2ec>)
 8014ae0:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	e0ff      	b.n	8014ce6 <w25qxx_read+0x472>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	7f1b      	ldrb	r3, [r3, #28]
 8014aea:	2b01      	cmp	r3, #1
 8014aec:	d12d      	bne.n	8014b4a <w25qxx_read+0x2d6>
                    && (handle->type >= W25Q256))                                                         /* check address mode */
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	8b5b      	ldrh	r3, [r3, #26]
 8014af2:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014af6:	4293      	cmp	r3, r2
 8014af8:	d927      	bls.n	8014b4a <w25qxx_read+0x2d6>
            {
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 8014afa:	230b      	movs	r3, #11
 8014afc:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	0e1b      	lsrs	r3, r3, #24
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	0c1b      	lsrs	r3, r3, #16
 8014b0a:	b2db      	uxtb	r3, r3
 8014b0c:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	0a1b      	lsrs	r3, r3, #8
 8014b12:	b2db      	uxtb	r3, r3
 8014b14:	74fb      	strb	r3, [r7, #19]
                buf[4] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	b2db      	uxtb	r3, r3
 8014b1a:	753b      	strb	r3, [r7, #20]
                buf[5] = 0x00;                                                                            /* dummy */
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	757b      	strb	r3, [r7, #21]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 6, (uint8_t *)data, (uint32_t)len); /* spi write read */
 8014b20:	f107 0110 	add.w	r1, r7, #16
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	9300      	str	r3, [sp, #0]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2206      	movs	r2, #6
 8014b2c:	68f8      	ldr	r0, [r7, #12]
 8014b2e:	f7fe fceb 	bl	8013508 <a_w25qxx_spi_write_read>
 8014b32:	4603      	mov	r3, r0
 8014b34:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8014b36:	7dfb      	ldrb	r3, [r7, #23]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	f000 80d3 	beq.w	8014ce4 <w25qxx_read+0x470>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	695b      	ldr	r3, [r3, #20]
 8014b42:	4807      	ldr	r0, [pc, #28]	; (8014b60 <w25qxx_read+0x2ec>)
 8014b44:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014b46:	2301      	movs	r3, #1
 8014b48:	e0cd      	b.n	8014ce6 <w25qxx_read+0x472>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	695b      	ldr	r3, [r3, #20]
 8014b4e:	4805      	ldr	r0, [pc, #20]	; (8014b64 <w25qxx_read+0x2f0>)
 8014b50:	4798      	blx	r3
               
                return 4;                                                                                 /* return error */
 8014b52:	2304      	movs	r3, #4
 8014b54:	e0c7      	b.n	8014ce6 <w25qxx_read+0x472>
 8014b56:	bf00      	nop
 8014b58:	0802a8d0 	.word	0x0802a8d0
 8014b5c:	0802aecc 	.word	0x0802aecc
 8014b60:	0802af50 	.word	0x0802af50
 8014b64:	0802abdc 	.word	0x0802abdc
            }
        }
    }
    else                                                                                                  /* qspi interface */
    {
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                           /* 3 address mode */
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	7f1b      	ldrb	r3, [r3, #28]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	f040 8081 	bne.w	8014c74 <w25qxx_read+0x400>
        {
            if (handle->type >= W25Q256)                                                                  /* >128Mb */
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	8b5b      	ldrh	r3, [r3, #26]
 8014b76:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014b7a:	4293      	cmp	r3, r2
 8014b7c:	d952      	bls.n	8014c24 <w25qxx_read+0x3b0>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8014b7e:	2300      	movs	r3, #0
 8014b80:	930a      	str	r3, [sp, #40]	; 0x28
 8014b82:	2300      	movs	r3, #0
 8014b84:	9309      	str	r3, [sp, #36]	; 0x24
 8014b86:	2300      	movs	r3, #0
 8014b88:	9308      	str	r3, [sp, #32]
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	9307      	str	r3, [sp, #28]
 8014b8e:	2300      	movs	r3, #0
 8014b90:	9306      	str	r3, [sp, #24]
 8014b92:	2300      	movs	r3, #0
 8014b94:	9305      	str	r3, [sp, #20]
 8014b96:	2300      	movs	r3, #0
 8014b98:	9304      	str	r3, [sp, #16]
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	9303      	str	r3, [sp, #12]
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	9302      	str	r3, [sp, #8]
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	9301      	str	r3, [sp, #4]
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	9300      	str	r3, [sp, #0]
 8014baa:	2300      	movs	r3, #0
 8014bac:	2204      	movs	r2, #4
 8014bae:	2106      	movs	r1, #6
 8014bb0:	68f8      	ldr	r0, [r7, #12]
 8014bb2:	f7fe fcd5 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                         /* qspi write read */
                if (res != 0)                                                                             /* check result */
 8014bba:	7dfb      	ldrb	r3, [r7, #23]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d005      	beq.n	8014bcc <w25qxx_read+0x358>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                /* write enable failed */
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	695b      	ldr	r3, [r3, #20]
 8014bc4:	484a      	ldr	r0, [pc, #296]	; (8014cf0 <w25qxx_read+0x47c>)
 8014bc6:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014bc8:	2301      	movs	r3, #1
 8014bca:	e08c      	b.n	8014ce6 <w25qxx_read+0x472>
                }
                buf[0] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	0e1b      	lsrs	r3, r3, #24
 8014bd0:	b2db      	uxtb	r3, r3
 8014bd2:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8014bd4:	2304      	movs	r3, #4
 8014bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8014bd8:	2300      	movs	r3, #0
 8014bda:	9309      	str	r3, [sp, #36]	; 0x24
 8014bdc:	2300      	movs	r3, #0
 8014bde:	9308      	str	r3, [sp, #32]
 8014be0:	2301      	movs	r3, #1
 8014be2:	9307      	str	r3, [sp, #28]
 8014be4:	f107 0310 	add.w	r3, r7, #16
 8014be8:	9306      	str	r3, [sp, #24]
 8014bea:	2300      	movs	r3, #0
 8014bec:	9305      	str	r3, [sp, #20]
 8014bee:	2300      	movs	r3, #0
 8014bf0:	9304      	str	r3, [sp, #16]
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	9303      	str	r3, [sp, #12]
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	9302      	str	r3, [sp, #8]
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	9301      	str	r3, [sp, #4]
 8014bfe:	2300      	movs	r3, #0
 8014c00:	9300      	str	r3, [sp, #0]
 8014c02:	2300      	movs	r3, #0
 8014c04:	2204      	movs	r2, #4
 8014c06:	21c5      	movs	r1, #197	; 0xc5
 8014c08:	68f8      	ldr	r0, [r7, #12]
 8014c0a:	f7fe fca9 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                            /* spi write read */
                if (res != 0)                                                                             /* check result */
 8014c12:	7dfb      	ldrb	r3, [r7, #23]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d005      	beq.n	8014c24 <w25qxx_read+0x3b0>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                /* write extended addr register failed */
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	695b      	ldr	r3, [r3, #20]
 8014c1c:	4835      	ldr	r0, [pc, #212]	; (8014cf4 <w25qxx_read+0x480>)
 8014c1e:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014c20:	2301      	movs	r3, #1
 8014c22:	e060      	b.n	8014ce6 <w25qxx_read+0x472>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	7f9b      	ldrb	r3, [r3, #30]
 8014c28:	2204      	movs	r2, #4
 8014c2a:	920a      	str	r2, [sp, #40]	; 0x28
 8014c2c:	683a      	ldr	r2, [r7, #0]
 8014c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	9208      	str	r2, [sp, #32]
 8014c34:	2200      	movs	r2, #0
 8014c36:	9207      	str	r2, [sp, #28]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	9206      	str	r2, [sp, #24]
 8014c3c:	9305      	str	r3, [sp, #20]
 8014c3e:	2300      	movs	r3, #0
 8014c40:	9304      	str	r3, [sp, #16]
 8014c42:	2300      	movs	r3, #0
 8014c44:	9303      	str	r3, [sp, #12]
 8014c46:	2300      	movs	r3, #0
 8014c48:	9302      	str	r3, [sp, #8]
 8014c4a:	2303      	movs	r3, #3
 8014c4c:	9301      	str	r3, [sp, #4]
 8014c4e:	2304      	movs	r3, #4
 8014c50:	9300      	str	r3, [sp, #0]
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	2204      	movs	r2, #4
 8014c56:	210b      	movs	r1, #11
 8014c58:	68f8      	ldr	r0, [r7, #12]
 8014c5a:	f7fe fc81 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 8014c62:	7dfb      	ldrb	r3, [r7, #23]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d03d      	beq.n	8014ce4 <w25qxx_read+0x470>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	695b      	ldr	r3, [r3, #20]
 8014c6c:	4822      	ldr	r0, [pc, #136]	; (8014cf8 <w25qxx_read+0x484>)
 8014c6e:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8014c70:	2301      	movs	r3, #1
 8014c72:	e038      	b.n	8014ce6 <w25qxx_read+0x472>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	7f1b      	ldrb	r3, [r3, #28]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d12d      	bne.n	8014cd8 <w25qxx_read+0x464>
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	8b5b      	ldrh	r3, [r3, #26]
 8014c80:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014c84:	4293      	cmp	r3, r2
 8014c86:	d927      	bls.n	8014cd8 <w25qxx_read+0x464>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	7f9b      	ldrb	r3, [r3, #30]
 8014c8c:	2204      	movs	r2, #4
 8014c8e:	920a      	str	r2, [sp, #40]	; 0x28
 8014c90:	683a      	ldr	r2, [r7, #0]
 8014c92:	9209      	str	r2, [sp, #36]	; 0x24
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	9208      	str	r2, [sp, #32]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	9207      	str	r2, [sp, #28]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	9206      	str	r2, [sp, #24]
 8014ca0:	9305      	str	r3, [sp, #20]
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	9304      	str	r3, [sp, #16]
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	9303      	str	r3, [sp, #12]
 8014caa:	2300      	movs	r3, #0
 8014cac:	9302      	str	r3, [sp, #8]
 8014cae:	2304      	movs	r3, #4
 8014cb0:	9301      	str	r3, [sp, #4]
 8014cb2:	2304      	movs	r3, #4
 8014cb4:	9300      	str	r3, [sp, #0]
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	2204      	movs	r2, #4
 8014cba:	210b      	movs	r1, #11
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f7fe fc4f 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 8014cc6:	7dfb      	ldrb	r3, [r7, #23]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00b      	beq.n	8014ce4 <w25qxx_read+0x470>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	695b      	ldr	r3, [r3, #20]
 8014cd0:	4809      	ldr	r0, [pc, #36]	; (8014cf8 <w25qxx_read+0x484>)
 8014cd2:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	e006      	b.n	8014ce6 <w25qxx_read+0x472>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                    /* address mode is invalid */
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	695b      	ldr	r3, [r3, #20]
 8014cdc:	4807      	ldr	r0, [pc, #28]	; (8014cfc <w25qxx_read+0x488>)
 8014cde:	4798      	blx	r3
           
            return 4;                                                                                     /* return error */
 8014ce0:	2304      	movs	r3, #4
 8014ce2:	e000      	b.n	8014ce6 <w25qxx_read+0x472>
        }
    }
    
    return 0;                                                                                             /* success return 0 */
 8014ce4:	2300      	movs	r3, #0
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3718      	adds	r7, #24
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	0802a8d0 	.word	0x0802a8d0
 8014cf4:	0802aecc 	.word	0x0802aecc
 8014cf8:	0802af50 	.word	0x0802af50
 8014cfc:	0802abdc 	.word	0x0802abdc

08014d00 <a_w25qxx_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_w25qxx_read(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b092      	sub	sp, #72	; 0x48
 8014d04:	af0c      	add	r7, sp, #48	; 0x30
 8014d06:	60f8      	str	r0, [r7, #12]
 8014d08:	60b9      	str	r1, [r7, #8]
 8014d0a:	607a      	str	r2, [r7, #4]
 8014d0c:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t buf[6];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                         /* spi interface */
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	f040 8161 	bne.w	8014fdc <a_w25qxx_read+0x2dc>
    {
        if (handle->dual_quad_spi_enable != 0)                                                            /* enable dual quad spi */
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	7fdb      	ldrb	r3, [r3, #31]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	f000 80be 	beq.w	8014ea0 <a_w25qxx_read+0x1a0>
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	7f1b      	ldrb	r3, [r3, #28]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	f040 8081 	bne.w	8014e30 <a_w25qxx_read+0x130>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	8b5b      	ldrh	r3, [r3, #26]
 8014d32:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014d36:	4293      	cmp	r3, r2
 8014d38:	d952      	bls.n	8014de0 <a_w25qxx_read+0xe0>
                {
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8014d3e:	2300      	movs	r3, #0
 8014d40:	9309      	str	r3, [sp, #36]	; 0x24
 8014d42:	2300      	movs	r3, #0
 8014d44:	9308      	str	r3, [sp, #32]
 8014d46:	2300      	movs	r3, #0
 8014d48:	9307      	str	r3, [sp, #28]
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	9306      	str	r3, [sp, #24]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	9305      	str	r3, [sp, #20]
 8014d52:	2300      	movs	r3, #0
 8014d54:	9304      	str	r3, [sp, #16]
 8014d56:	2300      	movs	r3, #0
 8014d58:	9303      	str	r3, [sp, #12]
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	9302      	str	r3, [sp, #8]
 8014d5e:	2300      	movs	r3, #0
 8014d60:	9301      	str	r3, [sp, #4]
 8014d62:	2300      	movs	r3, #0
 8014d64:	9300      	str	r3, [sp, #0]
 8014d66:	2300      	movs	r3, #0
 8014d68:	2201      	movs	r2, #1
 8014d6a:	2106      	movs	r1, #6
 8014d6c:	68f8      	ldr	r0, [r7, #12]
 8014d6e:	f7fe fbf7 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014d72:	4603      	mov	r3, r0
 8014d74:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                     /* qspi write read */
                    if (res != 0)                                                                         /* check result */
 8014d76:	7dfb      	ldrb	r3, [r7, #23]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d005      	beq.n	8014d88 <a_w25qxx_read+0x88>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	695b      	ldr	r3, [r3, #20]
 8014d80:	4892      	ldr	r0, [pc, #584]	; (8014fcc <a_w25qxx_read+0x2cc>)
 8014d82:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8014d84:	2301      	movs	r3, #1
 8014d86:	e1e8      	b.n	801515a <a_w25qxx_read+0x45a>
                    }
                    buf[0] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	0e1b      	lsrs	r3, r3, #24
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 8014d90:	2301      	movs	r3, #1
 8014d92:	930a      	str	r3, [sp, #40]	; 0x28
 8014d94:	2300      	movs	r3, #0
 8014d96:	9309      	str	r3, [sp, #36]	; 0x24
 8014d98:	2300      	movs	r3, #0
 8014d9a:	9308      	str	r3, [sp, #32]
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	9307      	str	r3, [sp, #28]
 8014da0:	f107 0310 	add.w	r3, r7, #16
 8014da4:	9306      	str	r3, [sp, #24]
 8014da6:	2300      	movs	r3, #0
 8014da8:	9305      	str	r3, [sp, #20]
 8014daa:	2300      	movs	r3, #0
 8014dac:	9304      	str	r3, [sp, #16]
 8014dae:	2300      	movs	r3, #0
 8014db0:	9303      	str	r3, [sp, #12]
 8014db2:	2300      	movs	r3, #0
 8014db4:	9302      	str	r3, [sp, #8]
 8014db6:	2300      	movs	r3, #0
 8014db8:	9301      	str	r3, [sp, #4]
 8014dba:	2300      	movs	r3, #0
 8014dbc:	9300      	str	r3, [sp, #0]
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	2201      	movs	r2, #1
 8014dc2:	21c5      	movs	r1, #197	; 0xc5
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	f7fe fbcb 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	75fb      	strb	r3, [r7, #23]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                        /* spi write read */
                    if (res != 0)                                                                         /* check result */
 8014dce:	7dfb      	ldrb	r3, [r7, #23]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d005      	beq.n	8014de0 <a_w25qxx_read+0xe0>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	695b      	ldr	r3, [r3, #20]
 8014dd8:	487d      	ldr	r0, [pc, #500]	; (8014fd0 <a_w25qxx_read+0x2d0>)
 8014dda:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8014ddc:	2301      	movs	r3, #1
 8014dde:	e1bc      	b.n	801515a <a_w25qxx_read+0x45a>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 8014de0:	2301      	movs	r3, #1
 8014de2:	930a      	str	r3, [sp, #40]	; 0x28
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	9309      	str	r3, [sp, #36]	; 0x24
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	9308      	str	r3, [sp, #32]
 8014dec:	2300      	movs	r3, #0
 8014dee:	9307      	str	r3, [sp, #28]
 8014df0:	2300      	movs	r3, #0
 8014df2:	9306      	str	r3, [sp, #24]
 8014df4:	2308      	movs	r3, #8
 8014df6:	9305      	str	r3, [sp, #20]
 8014df8:	2300      	movs	r3, #0
 8014dfa:	9304      	str	r3, [sp, #16]
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	9303      	str	r3, [sp, #12]
 8014e00:	2300      	movs	r3, #0
 8014e02:	9302      	str	r3, [sp, #8]
 8014e04:	2303      	movs	r3, #3
 8014e06:	9301      	str	r3, [sp, #4]
 8014e08:	2301      	movs	r3, #1
 8014e0a:	9300      	str	r3, [sp, #0]
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	2201      	movs	r2, #1
 8014e10:	210b      	movs	r1, #11
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	f7fe fba4 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8014e1c:	7dfb      	ldrb	r3, [r7, #23]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	f000 819a 	beq.w	8015158 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	695b      	ldr	r3, [r3, #20]
 8014e28:	486a      	ldr	r0, [pc, #424]	; (8014fd4 <a_w25qxx_read+0x2d4>)
 8014e2a:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	e194      	b.n	801515a <a_w25qxx_read+0x45a>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	7f1b      	ldrb	r3, [r3, #28]
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d12d      	bne.n	8014e94 <a_w25qxx_read+0x194>
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	8b5b      	ldrh	r3, [r3, #26]
 8014e3c:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014e40:	4293      	cmp	r3, r2
 8014e42:	d927      	bls.n	8014e94 <a_w25qxx_read+0x194>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 1,
 8014e44:	2301      	movs	r3, #1
 8014e46:	930a      	str	r3, [sp, #40]	; 0x28
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	9308      	str	r3, [sp, #32]
 8014e50:	2300      	movs	r3, #0
 8014e52:	9307      	str	r3, [sp, #28]
 8014e54:	2300      	movs	r3, #0
 8014e56:	9306      	str	r3, [sp, #24]
 8014e58:	2308      	movs	r3, #8
 8014e5a:	9305      	str	r3, [sp, #20]
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	9304      	str	r3, [sp, #16]
 8014e60:	2300      	movs	r3, #0
 8014e62:	9303      	str	r3, [sp, #12]
 8014e64:	2300      	movs	r3, #0
 8014e66:	9302      	str	r3, [sp, #8]
 8014e68:	2304      	movs	r3, #4
 8014e6a:	9301      	str	r3, [sp, #4]
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	9300      	str	r3, [sp, #0]
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	2201      	movs	r2, #1
 8014e74:	210b      	movs	r1, #11
 8014e76:	68f8      	ldr	r0, [r7, #12]
 8014e78:	f7fe fb72 	bl	8013560 <a_w25qxx_qspi_write_read>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	75fb      	strb	r3, [r7, #23]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               8, NULL, 0x00,
                                               data, len, 1);                                             /* spi write read */
                if (res != 0)                                                                             /* check result */
 8014e80:	7dfb      	ldrb	r3, [r7, #23]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	f000 8168 	beq.w	8015158 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	695b      	ldr	r3, [r3, #20]
 8014e8c:	4851      	ldr	r0, [pc, #324]	; (8014fd4 <a_w25qxx_read+0x2d4>)
 8014e8e:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014e90:	2301      	movs	r3, #1
 8014e92:	e162      	b.n	801515a <a_w25qxx_read+0x45a>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	695b      	ldr	r3, [r3, #20]
 8014e98:	484f      	ldr	r0, [pc, #316]	; (8014fd8 <a_w25qxx_read+0x2d8>)
 8014e9a:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	e15c      	b.n	801515a <a_w25qxx_read+0x45a>
            }
        }
        else
        {
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                       /* 3 address mode */
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	7f1b      	ldrb	r3, [r3, #28]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d159      	bne.n	8014f5c <a_w25qxx_read+0x25c>
            {
                if (handle->type >= W25Q256)                                                              /* >128Mb */
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	8b5b      	ldrh	r3, [r3, #26]
 8014eac:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014eb0:	4293      	cmp	r3, r2
 8014eb2:	d92f      	bls.n	8014f14 <a_w25qxx_read+0x214>
                {
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                 /* write enable command */
 8014eb4:	2306      	movs	r3, #6
 8014eb6:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                    /* spi write read */
 8014eb8:	f107 0110 	add.w	r1, r7, #16
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f7fe fb1f 	bl	8013508 <a_w25qxx_spi_write_read>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 8014ece:	7dfb      	ldrb	r3, [r7, #23]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d005      	beq.n	8014ee0 <a_w25qxx_read+0x1e0>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                            /* write enable failed */
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	695b      	ldr	r3, [r3, #20]
 8014ed8:	483c      	ldr	r0, [pc, #240]	; (8014fcc <a_w25qxx_read+0x2cc>)
 8014eda:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8014edc:	2301      	movs	r3, #1
 8014ede:	e13c      	b.n	801515a <a_w25qxx_read+0x45a>
                    }
                    buf[0] = 0xC5;                                                                        /* write extended addr register command */
 8014ee0:	23c5      	movs	r3, #197	; 0xc5
 8014ee2:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                         /* 31 - 24 bits */
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	0e1b      	lsrs	r3, r3, #24
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                    /* spi write read */
 8014eec:	f107 0110 	add.w	r1, r7, #16
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	9300      	str	r3, [sp, #0]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	2202      	movs	r2, #2
 8014ef8:	68f8      	ldr	r0, [r7, #12]
 8014efa:	f7fe fb05 	bl	8013508 <a_w25qxx_spi_write_read>
 8014efe:	4603      	mov	r3, r0
 8014f00:	75fb      	strb	r3, [r7, #23]
                    if (res != 0)                                                                         /* check result */
 8014f02:	7dfb      	ldrb	r3, [r7, #23]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d005      	beq.n	8014f14 <a_w25qxx_read+0x214>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");            /* write extended addr register failed */
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	695b      	ldr	r3, [r3, #20]
 8014f0c:	4830      	ldr	r0, [pc, #192]	; (8014fd0 <a_w25qxx_read+0x2d0>)
 8014f0e:	4798      	blx	r3
                       
                        return 1;                                                                         /* return error */
 8014f10:	2301      	movs	r3, #1
 8014f12:	e122      	b.n	801515a <a_w25qxx_read+0x45a>
                    }
                }
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 8014f14:	230b      	movs	r3, #11
 8014f16:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	0c1b      	lsrs	r3, r3, #16
 8014f1c:	b2db      	uxtb	r3, r3
 8014f1e:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	0a1b      	lsrs	r3, r3, #8
 8014f24:	b2db      	uxtb	r3, r3
 8014f26:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	74fb      	strb	r3, [r7, #19]
                buf[4] = 0x00;                                                                            /* dummy */
 8014f2e:	2300      	movs	r3, #0
 8014f30:	753b      	strb	r3, [r7, #20]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, (uint8_t *)data, (uint32_t)len); /* spi write read */
 8014f32:	f107 0110 	add.w	r1, r7, #16
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	9300      	str	r3, [sp, #0]
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2205      	movs	r2, #5
 8014f3e:	68f8      	ldr	r0, [r7, #12]
 8014f40:	f7fe fae2 	bl	8013508 <a_w25qxx_spi_write_read>
 8014f44:	4603      	mov	r3, r0
 8014f46:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8014f48:	7dfb      	ldrb	r3, [r7, #23]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	f000 8104 	beq.w	8015158 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	695b      	ldr	r3, [r3, #20]
 8014f54:	481f      	ldr	r0, [pc, #124]	; (8014fd4 <a_w25qxx_read+0x2d4>)
 8014f56:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014f58:	2301      	movs	r3, #1
 8014f5a:	e0fe      	b.n	801515a <a_w25qxx_read+0x45a>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))   /* check address mode */
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	7f1b      	ldrb	r3, [r3, #28]
 8014f60:	2b01      	cmp	r3, #1
 8014f62:	d12d      	bne.n	8014fc0 <a_w25qxx_read+0x2c0>
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	8b5b      	ldrh	r3, [r3, #26]
 8014f68:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	d927      	bls.n	8014fc0 <a_w25qxx_read+0x2c0>
            {
                buf[0] = W25QXX_COMMAND_FAST_READ;                                                        /* fast read command */
 8014f70:	230b      	movs	r3, #11
 8014f72:	743b      	strb	r3, [r7, #16]
                buf[1] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	0e1b      	lsrs	r3, r3, #24
 8014f78:	b2db      	uxtb	r3, r3
 8014f7a:	747b      	strb	r3, [r7, #17]
                buf[2] = (addr >> 16) & 0xFF;                                                             /* 23 - 16 bits */
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	0c1b      	lsrs	r3, r3, #16
 8014f80:	b2db      	uxtb	r3, r3
 8014f82:	74bb      	strb	r3, [r7, #18]
                buf[3] = (addr >> 8) & 0xFF;                                                              /* 15 - 8  bits */
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	0a1b      	lsrs	r3, r3, #8
 8014f88:	b2db      	uxtb	r3, r3
 8014f8a:	74fb      	strb	r3, [r7, #19]
                buf[4] = (addr >> 0) & 0xFF;                                                              /* 7 - 0 bits */
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	b2db      	uxtb	r3, r3
 8014f90:	753b      	strb	r3, [r7, #20]
                buf[5] = 0x00;                                                                            /* dummy */
 8014f92:	2300      	movs	r3, #0
 8014f94:	757b      	strb	r3, [r7, #21]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 6, (uint8_t *)data, (uint32_t)len); /* spi write read */
 8014f96:	f107 0110 	add.w	r1, r7, #16
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	9300      	str	r3, [sp, #0]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2206      	movs	r2, #6
 8014fa2:	68f8      	ldr	r0, [r7, #12]
 8014fa4:	f7fe fab0 	bl	8013508 <a_w25qxx_spi_write_read>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	75fb      	strb	r3, [r7, #23]
                if (res != 0)                                                                             /* check result */
 8014fac:	7dfb      	ldrb	r3, [r7, #23]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f000 80d2 	beq.w	8015158 <a_w25qxx_read+0x458>
                {
                    handle->debug_print("w25qxx: fast read failed.\n");                                   /* fast read failed */
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	695b      	ldr	r3, [r3, #20]
 8014fb8:	4806      	ldr	r0, [pc, #24]	; (8014fd4 <a_w25qxx_read+0x2d4>)
 8014fba:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	e0cc      	b.n	801515a <a_w25qxx_read+0x45a>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                /* address mode is invalid */
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	695b      	ldr	r3, [r3, #20]
 8014fc4:	4804      	ldr	r0, [pc, #16]	; (8014fd8 <a_w25qxx_read+0x2d8>)
 8014fc6:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e0c6      	b.n	801515a <a_w25qxx_read+0x45a>
 8014fcc:	0802a8d0 	.word	0x0802a8d0
 8014fd0:	0802aecc 	.word	0x0802aecc
 8014fd4:	0802af50 	.word	0x0802af50
 8014fd8:	0802abdc 	.word	0x0802abdc
            }
        }
    }
    else                                                                                                  /* qspi interface */
    {
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                           /* 3 address mode */
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	7f1b      	ldrb	r3, [r3, #28]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	f040 8081 	bne.w	80150e8 <a_w25qxx_read+0x3e8>
        {
            if (handle->type >= W25Q256)                                                                  /* >128Mb */
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	8b5b      	ldrh	r3, [r3, #26]
 8014fea:	f64e 7217 	movw	r2, #61207	; 0xef17
 8014fee:	4293      	cmp	r3, r2
 8014ff0:	d952      	bls.n	8015098 <a_w25qxx_read+0x398>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	9308      	str	r3, [sp, #32]
 8014ffe:	2300      	movs	r3, #0
 8015000:	9307      	str	r3, [sp, #28]
 8015002:	2300      	movs	r3, #0
 8015004:	9306      	str	r3, [sp, #24]
 8015006:	2300      	movs	r3, #0
 8015008:	9305      	str	r3, [sp, #20]
 801500a:	2300      	movs	r3, #0
 801500c:	9304      	str	r3, [sp, #16]
 801500e:	2300      	movs	r3, #0
 8015010:	9303      	str	r3, [sp, #12]
 8015012:	2300      	movs	r3, #0
 8015014:	9302      	str	r3, [sp, #8]
 8015016:	2300      	movs	r3, #0
 8015018:	9301      	str	r3, [sp, #4]
 801501a:	2300      	movs	r3, #0
 801501c:	9300      	str	r3, [sp, #0]
 801501e:	2300      	movs	r3, #0
 8015020:	2204      	movs	r2, #4
 8015022:	2106      	movs	r1, #6
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f7fe fa9b 	bl	8013560 <a_w25qxx_qspi_write_read>
 801502a:	4603      	mov	r3, r0
 801502c:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                         /* qspi write read */
                if (res != 0)                                                                             /* check result */
 801502e:	7dfb      	ldrb	r3, [r7, #23]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d005      	beq.n	8015040 <a_w25qxx_read+0x340>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                /* write enable failed */
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	695b      	ldr	r3, [r3, #20]
 8015038:	484a      	ldr	r0, [pc, #296]	; (8015164 <a_w25qxx_read+0x464>)
 801503a:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 801503c:	2301      	movs	r3, #1
 801503e:	e08c      	b.n	801515a <a_w25qxx_read+0x45a>
                }
                buf[0] = (addr >> 24) & 0xFF;                                                             /* 31 - 24 bits */
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	0e1b      	lsrs	r3, r3, #24
 8015044:	b2db      	uxtb	r3, r3
 8015046:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8015048:	2304      	movs	r3, #4
 801504a:	930a      	str	r3, [sp, #40]	; 0x28
 801504c:	2300      	movs	r3, #0
 801504e:	9309      	str	r3, [sp, #36]	; 0x24
 8015050:	2300      	movs	r3, #0
 8015052:	9308      	str	r3, [sp, #32]
 8015054:	2301      	movs	r3, #1
 8015056:	9307      	str	r3, [sp, #28]
 8015058:	f107 0310 	add.w	r3, r7, #16
 801505c:	9306      	str	r3, [sp, #24]
 801505e:	2300      	movs	r3, #0
 8015060:	9305      	str	r3, [sp, #20]
 8015062:	2300      	movs	r3, #0
 8015064:	9304      	str	r3, [sp, #16]
 8015066:	2300      	movs	r3, #0
 8015068:	9303      	str	r3, [sp, #12]
 801506a:	2300      	movs	r3, #0
 801506c:	9302      	str	r3, [sp, #8]
 801506e:	2300      	movs	r3, #0
 8015070:	9301      	str	r3, [sp, #4]
 8015072:	2300      	movs	r3, #0
 8015074:	9300      	str	r3, [sp, #0]
 8015076:	2300      	movs	r3, #0
 8015078:	2204      	movs	r2, #4
 801507a:	21c5      	movs	r1, #197	; 0xc5
 801507c:	68f8      	ldr	r0, [r7, #12]
 801507e:	f7fe fa6f 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015082:	4603      	mov	r3, r0
 8015084:	75fb      	strb	r3, [r7, #23]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                            /* spi write read */
                if (res != 0)                                                                             /* check result */
 8015086:	7dfb      	ldrb	r3, [r7, #23]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d005      	beq.n	8015098 <a_w25qxx_read+0x398>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                /* write extended addr register failed */
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	695b      	ldr	r3, [r3, #20]
 8015090:	4835      	ldr	r0, [pc, #212]	; (8015168 <a_w25qxx_read+0x468>)
 8015092:	4798      	blx	r3
                   
                    return 1;                                                                             /* return error */
 8015094:	2301      	movs	r3, #1
 8015096:	e060      	b.n	801515a <a_w25qxx_read+0x45a>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	7f9b      	ldrb	r3, [r3, #30]
 801509c:	2204      	movs	r2, #4
 801509e:	920a      	str	r2, [sp, #40]	; 0x28
 80150a0:	683a      	ldr	r2, [r7, #0]
 80150a2:	9209      	str	r2, [sp, #36]	; 0x24
 80150a4:	687a      	ldr	r2, [r7, #4]
 80150a6:	9208      	str	r2, [sp, #32]
 80150a8:	2200      	movs	r2, #0
 80150aa:	9207      	str	r2, [sp, #28]
 80150ac:	2200      	movs	r2, #0
 80150ae:	9206      	str	r2, [sp, #24]
 80150b0:	9305      	str	r3, [sp, #20]
 80150b2:	2300      	movs	r3, #0
 80150b4:	9304      	str	r3, [sp, #16]
 80150b6:	2300      	movs	r3, #0
 80150b8:	9303      	str	r3, [sp, #12]
 80150ba:	2300      	movs	r3, #0
 80150bc:	9302      	str	r3, [sp, #8]
 80150be:	2303      	movs	r3, #3
 80150c0:	9301      	str	r3, [sp, #4]
 80150c2:	2304      	movs	r3, #4
 80150c4:	9300      	str	r3, [sp, #0]
 80150c6:	68bb      	ldr	r3, [r7, #8]
 80150c8:	2204      	movs	r2, #4
 80150ca:	210b      	movs	r1, #11
 80150cc:	68f8      	ldr	r0, [r7, #12]
 80150ce:	f7fe fa47 	bl	8013560 <a_w25qxx_qspi_write_read>
 80150d2:	4603      	mov	r3, r0
 80150d4:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 80150d6:	7dfb      	ldrb	r3, [r7, #23]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d03d      	beq.n	8015158 <a_w25qxx_read+0x458>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	695b      	ldr	r3, [r3, #20]
 80150e0:	4822      	ldr	r0, [pc, #136]	; (801516c <a_w25qxx_read+0x46c>)
 80150e2:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 80150e4:	2301      	movs	r3, #1
 80150e6:	e038      	b.n	801515a <a_w25qxx_read+0x45a>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	7f1b      	ldrb	r3, [r3, #28]
 80150ec:	2b01      	cmp	r3, #1
 80150ee:	d12d      	bne.n	801514c <a_w25qxx_read+0x44c>
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	8b5b      	ldrh	r3, [r3, #26]
 80150f4:	f64e 7217 	movw	r2, #61207	; 0xef17
 80150f8:	4293      	cmp	r3, r2
 80150fa:	d927      	bls.n	801514c <a_w25qxx_read+0x44c>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_FAST_READ, 4,
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	7f9b      	ldrb	r3, [r3, #30]
 8015100:	2204      	movs	r2, #4
 8015102:	920a      	str	r2, [sp, #40]	; 0x28
 8015104:	683a      	ldr	r2, [r7, #0]
 8015106:	9209      	str	r2, [sp, #36]	; 0x24
 8015108:	687a      	ldr	r2, [r7, #4]
 801510a:	9208      	str	r2, [sp, #32]
 801510c:	2200      	movs	r2, #0
 801510e:	9207      	str	r2, [sp, #28]
 8015110:	2200      	movs	r2, #0
 8015112:	9206      	str	r2, [sp, #24]
 8015114:	9305      	str	r3, [sp, #20]
 8015116:	2300      	movs	r3, #0
 8015118:	9304      	str	r3, [sp, #16]
 801511a:	2300      	movs	r3, #0
 801511c:	9303      	str	r3, [sp, #12]
 801511e:	2300      	movs	r3, #0
 8015120:	9302      	str	r3, [sp, #8]
 8015122:	2304      	movs	r3, #4
 8015124:	9301      	str	r3, [sp, #4]
 8015126:	2304      	movs	r3, #4
 8015128:	9300      	str	r3, [sp, #0]
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	2204      	movs	r2, #4
 801512e:	210b      	movs	r1, #11
 8015130:	68f8      	ldr	r0, [r7, #12]
 8015132:	f7fe fa15 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015136:	4603      	mov	r3, r0
 8015138:	75fb      	strb	r3, [r7, #23]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           handle->dummy, NULL, 0x00,                                     /* spi write */
                                           data, len, 4);                                                 /* spi write read */
            if (res != 0)                                                                                 /* check result */
 801513a:	7dfb      	ldrb	r3, [r7, #23]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d00b      	beq.n	8015158 <a_w25qxx_read+0x458>
            {
                handle->debug_print("w25qxx: fast read failed.\n");                                       /* fast read failed */
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	695b      	ldr	r3, [r3, #20]
 8015144:	4809      	ldr	r0, [pc, #36]	; (801516c <a_w25qxx_read+0x46c>)
 8015146:	4798      	blx	r3
               
                return 1;                                                                                 /* return error */
 8015148:	2301      	movs	r3, #1
 801514a:	e006      	b.n	801515a <a_w25qxx_read+0x45a>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                    /* address mode is invalid */
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	695b      	ldr	r3, [r3, #20]
 8015150:	4807      	ldr	r0, [pc, #28]	; (8015170 <a_w25qxx_read+0x470>)
 8015152:	4798      	blx	r3
           
            return 1;                                                                                     /* return error */
 8015154:	2301      	movs	r3, #1
 8015156:	e000      	b.n	801515a <a_w25qxx_read+0x45a>
        }
    }
    
    return 0;                                                                                             /* success return 0 */
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	3718      	adds	r7, #24
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	0802a8d0 	.word	0x0802a8d0
 8015168:	0802aecc 	.word	0x0802aecc
 801516c:	0802af50 	.word	0x0802af50
 8015170:	0802abdc 	.word	0x0802abdc

08015174 <a_w25qxx_erase_sector>:
 *            - 0 success
 *            - 1 sector erase failed
 * @note      none
 */
static uint8_t a_w25qxx_erase_sector(w25qxx_handle_t *handle, uint32_t addr)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b092      	sub	sp, #72	; 0x48
 8015178:	af0c      	add	r7, sp, #48	; 0x30
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t status;
    uint32_t timeout;
    uint8_t buf[5];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                           /* spi interface */
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015184:	2b00      	cmp	r3, #0
 8015186:	f040 8217 	bne.w	80155b8 <a_w25qxx_erase_sector+0x444>
    {
        if (handle->dual_quad_spi_enable != 0)                                                              /* enable dual quad spi */
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	7fdb      	ldrb	r3, [r3, #31]
 801518e:	2b00      	cmp	r3, #0
 8015190:	f000 8129 	beq.w	80153e6 <a_w25qxx_erase_sector+0x272>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8015194:	2300      	movs	r3, #0
 8015196:	930a      	str	r3, [sp, #40]	; 0x28
 8015198:	2300      	movs	r3, #0
 801519a:	9309      	str	r3, [sp, #36]	; 0x24
 801519c:	2300      	movs	r3, #0
 801519e:	9308      	str	r3, [sp, #32]
 80151a0:	2300      	movs	r3, #0
 80151a2:	9307      	str	r3, [sp, #28]
 80151a4:	2300      	movs	r3, #0
 80151a6:	9306      	str	r3, [sp, #24]
 80151a8:	2300      	movs	r3, #0
 80151aa:	9305      	str	r3, [sp, #20]
 80151ac:	2300      	movs	r3, #0
 80151ae:	9304      	str	r3, [sp, #16]
 80151b0:	2300      	movs	r3, #0
 80151b2:	9303      	str	r3, [sp, #12]
 80151b4:	2300      	movs	r3, #0
 80151b6:	9302      	str	r3, [sp, #8]
 80151b8:	2300      	movs	r3, #0
 80151ba:	9301      	str	r3, [sp, #4]
 80151bc:	2300      	movs	r3, #0
 80151be:	9300      	str	r3, [sp, #0]
 80151c0:	2300      	movs	r3, #0
 80151c2:	2201      	movs	r2, #1
 80151c4:	2106      	movs	r1, #6
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f7fe f9ca 	bl	8013560 <a_w25qxx_qspi_write_read>
 80151cc:	4603      	mov	r3, r0
 80151ce:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* qspi write read */
            if (res != 0)                                                                                   /* check result */
 80151d0:	7cfb      	ldrb	r3, [r7, #19]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d005      	beq.n	80151e2 <a_w25qxx_erase_sector+0x6e>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	695b      	ldr	r3, [r3, #20]
 80151da:	48a0      	ldr	r0, [pc, #640]	; (801545c <a_w25qxx_erase_sector+0x2e8>)
 80151dc:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80151de:	2301      	movs	r3, #1
 80151e0:	e320      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	7f1b      	ldrb	r3, [r3, #28]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d17f      	bne.n	80152ea <a_w25qxx_erase_sector+0x176>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	8b5b      	ldrh	r3, [r3, #26]
 80151ee:	f64e 7217 	movw	r2, #61207	; 0xef17
 80151f2:	4293      	cmp	r3, r2
 80151f4:	d952      	bls.n	801529c <a_w25qxx_erase_sector+0x128>
                {
                    buf[0] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	0e1b      	lsrs	r3, r3, #24
 80151fa:	b2db      	uxtb	r3, r3
 80151fc:	733b      	strb	r3, [r7, #12]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 80151fe:	2301      	movs	r3, #1
 8015200:	930a      	str	r3, [sp, #40]	; 0x28
 8015202:	2300      	movs	r3, #0
 8015204:	9309      	str	r3, [sp, #36]	; 0x24
 8015206:	2300      	movs	r3, #0
 8015208:	9308      	str	r3, [sp, #32]
 801520a:	2301      	movs	r3, #1
 801520c:	9307      	str	r3, [sp, #28]
 801520e:	f107 030c 	add.w	r3, r7, #12
 8015212:	9306      	str	r3, [sp, #24]
 8015214:	2300      	movs	r3, #0
 8015216:	9305      	str	r3, [sp, #20]
 8015218:	2300      	movs	r3, #0
 801521a:	9304      	str	r3, [sp, #16]
 801521c:	2300      	movs	r3, #0
 801521e:	9303      	str	r3, [sp, #12]
 8015220:	2300      	movs	r3, #0
 8015222:	9302      	str	r3, [sp, #8]
 8015224:	2300      	movs	r3, #0
 8015226:	9301      	str	r3, [sp, #4]
 8015228:	2300      	movs	r3, #0
 801522a:	9300      	str	r3, [sp, #0]
 801522c:	2300      	movs	r3, #0
 801522e:	2201      	movs	r2, #1
 8015230:	21c5      	movs	r1, #197	; 0xc5
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	f7fe f994 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015238:	4603      	mov	r3, r0
 801523a:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                          /* spi write read */
                    if (res != 0)                                                                           /* check result */
 801523c:	7cfb      	ldrb	r3, [r7, #19]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d005      	beq.n	801524e <a_w25qxx_erase_sector+0xda>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	695b      	ldr	r3, [r3, #20]
 8015246:	4886      	ldr	r0, [pc, #536]	; (8015460 <a_w25qxx_erase_sector+0x2ec>)
 8015248:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 801524a:	2301      	movs	r3, #1
 801524c:	e2ea      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                    }
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 801524e:	2300      	movs	r3, #0
 8015250:	930a      	str	r3, [sp, #40]	; 0x28
 8015252:	2300      	movs	r3, #0
 8015254:	9309      	str	r3, [sp, #36]	; 0x24
 8015256:	2300      	movs	r3, #0
 8015258:	9308      	str	r3, [sp, #32]
 801525a:	2300      	movs	r3, #0
 801525c:	9307      	str	r3, [sp, #28]
 801525e:	2300      	movs	r3, #0
 8015260:	9306      	str	r3, [sp, #24]
 8015262:	2300      	movs	r3, #0
 8015264:	9305      	str	r3, [sp, #20]
 8015266:	2300      	movs	r3, #0
 8015268:	9304      	str	r3, [sp, #16]
 801526a:	2300      	movs	r3, #0
 801526c:	9303      	str	r3, [sp, #12]
 801526e:	2300      	movs	r3, #0
 8015270:	9302      	str	r3, [sp, #8]
 8015272:	2300      	movs	r3, #0
 8015274:	9301      	str	r3, [sp, #4]
 8015276:	2300      	movs	r3, #0
 8015278:	9300      	str	r3, [sp, #0]
 801527a:	2300      	movs	r3, #0
 801527c:	2201      	movs	r2, #1
 801527e:	2106      	movs	r1, #6
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f7fe f96d 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015286:	4603      	mov	r3, r0
 8015288:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                       /* qspi write read */
                    if (res != 0)                                                                           /* check result */
 801528a:	7cfb      	ldrb	r3, [r7, #19]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d005      	beq.n	801529c <a_w25qxx_erase_sector+0x128>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	695b      	ldr	r3, [r3, #20]
 8015294:	4871      	ldr	r0, [pc, #452]	; (801545c <a_w25qxx_erase_sector+0x2e8>)
 8015296:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8015298:	2301      	movs	r3, #1
 801529a:	e2c3      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 1,
 801529c:	2300      	movs	r3, #0
 801529e:	930a      	str	r3, [sp, #40]	; 0x28
 80152a0:	2300      	movs	r3, #0
 80152a2:	9309      	str	r3, [sp, #36]	; 0x24
 80152a4:	2300      	movs	r3, #0
 80152a6:	9308      	str	r3, [sp, #32]
 80152a8:	2300      	movs	r3, #0
 80152aa:	9307      	str	r3, [sp, #28]
 80152ac:	2300      	movs	r3, #0
 80152ae:	9306      	str	r3, [sp, #24]
 80152b0:	2300      	movs	r3, #0
 80152b2:	9305      	str	r3, [sp, #20]
 80152b4:	2300      	movs	r3, #0
 80152b6:	9304      	str	r3, [sp, #16]
 80152b8:	2300      	movs	r3, #0
 80152ba:	9303      	str	r3, [sp, #12]
 80152bc:	2300      	movs	r3, #0
 80152be:	9302      	str	r3, [sp, #8]
 80152c0:	2303      	movs	r3, #3
 80152c2:	9301      	str	r3, [sp, #4]
 80152c4:	2301      	movs	r3, #1
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	2201      	movs	r2, #1
 80152cc:	2120      	movs	r1, #32
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f7fe f946 	bl	8013560 <a_w25qxx_qspi_write_read>
 80152d4:	4603      	mov	r3, r0
 80152d6:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* spi write read */
                if (res != 0)                                                                               /* check result */
 80152d8:	7cfb      	ldrb	r3, [r7, #19]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d03c      	beq.n	8015358 <a_w25qxx_erase_sector+0x1e4>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	695b      	ldr	r3, [r3, #20]
 80152e2:	4860      	ldr	r0, [pc, #384]	; (8015464 <a_w25qxx_erase_sector+0x2f0>)
 80152e4:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80152e6:	2301      	movs	r3, #1
 80152e8:	e29c      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	7f1b      	ldrb	r3, [r3, #28]
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d12c      	bne.n	801534c <a_w25qxx_erase_sector+0x1d8>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	8b5b      	ldrh	r3, [r3, #26]
 80152f6:	f64e 7217 	movw	r2, #61207	; 0xef17
 80152fa:	4293      	cmp	r3, r2
 80152fc:	d926      	bls.n	801534c <a_w25qxx_erase_sector+0x1d8>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 1,
 80152fe:	2300      	movs	r3, #0
 8015300:	930a      	str	r3, [sp, #40]	; 0x28
 8015302:	2300      	movs	r3, #0
 8015304:	9309      	str	r3, [sp, #36]	; 0x24
 8015306:	2300      	movs	r3, #0
 8015308:	9308      	str	r3, [sp, #32]
 801530a:	2300      	movs	r3, #0
 801530c:	9307      	str	r3, [sp, #28]
 801530e:	2300      	movs	r3, #0
 8015310:	9306      	str	r3, [sp, #24]
 8015312:	2300      	movs	r3, #0
 8015314:	9305      	str	r3, [sp, #20]
 8015316:	2300      	movs	r3, #0
 8015318:	9304      	str	r3, [sp, #16]
 801531a:	2300      	movs	r3, #0
 801531c:	9303      	str	r3, [sp, #12]
 801531e:	2300      	movs	r3, #0
 8015320:	9302      	str	r3, [sp, #8]
 8015322:	2304      	movs	r3, #4
 8015324:	9301      	str	r3, [sp, #4]
 8015326:	2301      	movs	r3, #1
 8015328:	9300      	str	r3, [sp, #0]
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	2201      	movs	r2, #1
 801532e:	2120      	movs	r1, #32
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f7fe f915 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015336:	4603      	mov	r3, r0
 8015338:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* spi write read */
                if (res != 0)                                                                               /* check result */
 801533a:	7cfb      	ldrb	r3, [r7, #19]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d00b      	beq.n	8015358 <a_w25qxx_erase_sector+0x1e4>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	695b      	ldr	r3, [r3, #20]
 8015344:	4847      	ldr	r0, [pc, #284]	; (8015464 <a_w25qxx_erase_sector+0x2f0>)
 8015346:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015348:	2301      	movs	r3, #1
 801534a:	e26b      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	695b      	ldr	r3, [r3, #20]
 8015350:	4845      	ldr	r0, [pc, #276]	; (8015468 <a_w25qxx_erase_sector+0x2f4>)
 8015352:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015354:	2301      	movs	r3, #1
 8015356:	e265      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
            }
            
            timeout = 400;                                                                                  /* max 400 ms */
 8015358:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801535c:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 801535e:	e033      	b.n	80153c8 <a_w25qxx_erase_sector+0x254>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 1,
 8015360:	2301      	movs	r3, #1
 8015362:	930a      	str	r3, [sp, #40]	; 0x28
 8015364:	2301      	movs	r3, #1
 8015366:	9309      	str	r3, [sp, #36]	; 0x24
 8015368:	f107 0312 	add.w	r3, r7, #18
 801536c:	9308      	str	r3, [sp, #32]
 801536e:	2300      	movs	r3, #0
 8015370:	9307      	str	r3, [sp, #28]
 8015372:	2300      	movs	r3, #0
 8015374:	9306      	str	r3, [sp, #24]
 8015376:	2300      	movs	r3, #0
 8015378:	9305      	str	r3, [sp, #20]
 801537a:	2300      	movs	r3, #0
 801537c:	9304      	str	r3, [sp, #16]
 801537e:	2300      	movs	r3, #0
 8015380:	9303      	str	r3, [sp, #12]
 8015382:	2300      	movs	r3, #0
 8015384:	9302      	str	r3, [sp, #8]
 8015386:	2300      	movs	r3, #0
 8015388:	9301      	str	r3, [sp, #4]
 801538a:	2300      	movs	r3, #0
 801538c:	9300      	str	r3, [sp, #0]
 801538e:	2300      	movs	r3, #0
 8015390:	2201      	movs	r2, #1
 8015392:	2105      	movs	r1, #5
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f7fe f8e3 	bl	8013560 <a_w25qxx_qspi_write_read>
 801539a:	4603      	mov	r3, r0
 801539c:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0,
                                              (uint8_t *)&status, 1, 1);                                    /* spi write read */
                if (res != 0)                                                                               /* check result */
 801539e:	7cfb      	ldrb	r3, [r7, #19]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d005      	beq.n	80153b0 <a_w25qxx_erase_sector+0x23c>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	695b      	ldr	r3, [r3, #20]
 80153a8:	4830      	ldr	r0, [pc, #192]	; (801546c <a_w25qxx_erase_sector+0x2f8>)
 80153aa:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80153ac:	2301      	movs	r3, #1
 80153ae:	e239      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 80153b0:	7cbb      	ldrb	r3, [r7, #18]
 80153b2:	f003 0301 	and.w	r3, r3, #1
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d00a      	beq.n	80153d0 <a_w25qxx_erase_sector+0x25c>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	3b01      	subs	r3, #1
 80153be:	617b      	str	r3, [r7, #20]
                handle->delay_ms(1);                                                                        /* delay 1 ms */
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	68db      	ldr	r3, [r3, #12]
 80153c4:	2001      	movs	r0, #1
 80153c6:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d1c8      	bne.n	8015360 <a_w25qxx_erase_sector+0x1ec>
 80153ce:	e000      	b.n	80153d2 <a_w25qxx_erase_sector+0x25e>
                    break;                                                                                  /* break */
 80153d0:	bf00      	nop
            }
            if (timeout == 0)
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	f040 8224 	bne.w	8015822 <a_w25qxx_erase_sector+0x6ae>
            {
                handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                  /* sector erase 4k timeout */
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	695b      	ldr	r3, [r3, #20]
 80153de:	4824      	ldr	r0, [pc, #144]	; (8015470 <a_w25qxx_erase_sector+0x2fc>)
 80153e0:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80153e2:	2301      	movs	r3, #1
 80153e4:	e21e      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
            }
        }
        else                                                                                                /* single spi */
        {
            buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                           /* write enable command */
 80153e6:	2306      	movs	r3, #6
 80153e8:	733b      	strb	r3, [r7, #12]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                              /* spi write read */
 80153ea:	f107 010c 	add.w	r1, r7, #12
 80153ee:	2300      	movs	r3, #0
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	2300      	movs	r3, #0
 80153f4:	2201      	movs	r2, #1
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f7fe f886 	bl	8013508 <a_w25qxx_spi_write_read>
 80153fc:	4603      	mov	r3, r0
 80153fe:	74fb      	strb	r3, [r7, #19]
            if (res != 0)                                                                                   /* check result */
 8015400:	7cfb      	ldrb	r3, [r7, #19]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d005      	beq.n	8015412 <a_w25qxx_erase_sector+0x29e>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	695b      	ldr	r3, [r3, #20]
 801540a:	4814      	ldr	r0, [pc, #80]	; (801545c <a_w25qxx_erase_sector+0x2e8>)
 801540c:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 801540e:	2301      	movs	r3, #1
 8015410:	e208      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	7f1b      	ldrb	r3, [r3, #28]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d163      	bne.n	80154e2 <a_w25qxx_erase_sector+0x36e>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	8b5b      	ldrh	r3, [r3, #26]
 801541e:	f64e 7217 	movw	r2, #61207	; 0xef17
 8015422:	4293      	cmp	r3, r2
 8015424:	d93c      	bls.n	80154a0 <a_w25qxx_erase_sector+0x32c>
                {
                    buf[0] = 0xC5;                                                                          /* write extended addr register command */
 8015426:	23c5      	movs	r3, #197	; 0xc5
 8015428:	733b      	strb	r3, [r7, #12]
                    buf[1] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	0e1b      	lsrs	r3, r3, #24
 801542e:	b2db      	uxtb	r3, r3
 8015430:	737b      	strb	r3, [r7, #13]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                      /* spi write read */
 8015432:	f107 010c 	add.w	r1, r7, #12
 8015436:	2300      	movs	r3, #0
 8015438:	9300      	str	r3, [sp, #0]
 801543a:	2300      	movs	r3, #0
 801543c:	2202      	movs	r2, #2
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f7fe f862 	bl	8013508 <a_w25qxx_spi_write_read>
 8015444:	4603      	mov	r3, r0
 8015446:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8015448:	7cfb      	ldrb	r3, [r7, #19]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d012      	beq.n	8015474 <a_w25qxx_erase_sector+0x300>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	695b      	ldr	r3, [r3, #20]
 8015452:	4803      	ldr	r0, [pc, #12]	; (8015460 <a_w25qxx_erase_sector+0x2ec>)
 8015454:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8015456:	2301      	movs	r3, #1
 8015458:	e1e4      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
 801545a:	bf00      	nop
 801545c:	0802a8d0 	.word	0x0802a8d0
 8015460:	0802aecc 	.word	0x0802aecc
 8015464:	0802b118 	.word	0x0802b118
 8015468:	0802abdc 	.word	0x0802abdc
 801546c:	0802a934 	.word	0x0802a934
 8015470:	0802b13c 	.word	0x0802b13c
                    }
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                   /* write enable command */
 8015474:	2306      	movs	r3, #6
 8015476:	733b      	strb	r3, [r7, #12]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                      /* spi write read */
 8015478:	f107 010c 	add.w	r1, r7, #12
 801547c:	2300      	movs	r3, #0
 801547e:	9300      	str	r3, [sp, #0]
 8015480:	2300      	movs	r3, #0
 8015482:	2201      	movs	r2, #1
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f7fe f83f 	bl	8013508 <a_w25qxx_spi_write_read>
 801548a:	4603      	mov	r3, r0
 801548c:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 801548e:	7cfb      	ldrb	r3, [r7, #19]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d005      	beq.n	80154a0 <a_w25qxx_erase_sector+0x32c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	695b      	ldr	r3, [r3, #20]
 8015498:	489d      	ldr	r0, [pc, #628]	; (8015710 <a_w25qxx_erase_sector+0x59c>)
 801549a:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 801549c:	2301      	movs	r3, #1
 801549e:	e1c1      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                    }
                }
                buf[0] = W25QXX_COMMAND_SECTOR_ERASE_4K;                                                    /* sector erase 4k command */
 80154a0:	2320      	movs	r3, #32
 80154a2:	733b      	strb	r3, [r7, #12]
                buf[1] = (addr >> 16) & 0xFF;                                                               /* 23 - 16 bits */
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	0c1b      	lsrs	r3, r3, #16
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	737b      	strb	r3, [r7, #13]
                buf[2] = (addr >> 8) & 0xFF;                                                                /* 15 - 8  bits */
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	0a1b      	lsrs	r3, r3, #8
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	73bb      	strb	r3, [r7, #14]
                buf[3] = (addr >> 0) & 0xFF;                                                                /* 7 - 0 bits */
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	73fb      	strb	r3, [r7, #15]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 4, NULL, 0);                          /* spi write read */
 80154ba:	f107 010c 	add.w	r1, r7, #12
 80154be:	2300      	movs	r3, #0
 80154c0:	9300      	str	r3, [sp, #0]
 80154c2:	2300      	movs	r3, #0
 80154c4:	2204      	movs	r2, #4
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f7fe f81e 	bl	8013508 <a_w25qxx_spi_write_read>
 80154cc:	4603      	mov	r3, r0
 80154ce:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 80154d0:	7cfb      	ldrb	r3, [r7, #19]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d03a      	beq.n	801554c <a_w25qxx_erase_sector+0x3d8>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	695b      	ldr	r3, [r3, #20]
 80154da:	488e      	ldr	r0, [pc, #568]	; (8015714 <a_w25qxx_erase_sector+0x5a0>)
 80154dc:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80154de:	2301      	movs	r3, #1
 80154e0:	e1a0      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	7f1b      	ldrb	r3, [r3, #28]
 80154e6:	2b01      	cmp	r3, #1
 80154e8:	d12a      	bne.n	8015540 <a_w25qxx_erase_sector+0x3cc>
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	8b5b      	ldrh	r3, [r3, #26]
 80154ee:	f64e 7217 	movw	r2, #61207	; 0xef17
 80154f2:	4293      	cmp	r3, r2
 80154f4:	d924      	bls.n	8015540 <a_w25qxx_erase_sector+0x3cc>
            {
                buf[0] = W25QXX_COMMAND_SECTOR_ERASE_4K;                                                    /* sector erase 4k command */
 80154f6:	2320      	movs	r3, #32
 80154f8:	733b      	strb	r3, [r7, #12]
                buf[1] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	0e1b      	lsrs	r3, r3, #24
 80154fe:	b2db      	uxtb	r3, r3
 8015500:	737b      	strb	r3, [r7, #13]
                buf[2] = (addr >> 16) & 0xFF;                                                               /* 23 - 16 bits */
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	0c1b      	lsrs	r3, r3, #16
 8015506:	b2db      	uxtb	r3, r3
 8015508:	73bb      	strb	r3, [r7, #14]
                buf[3] = (addr >> 8) & 0xFF;                                                                /* 15 - 8  bits */
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	0a1b      	lsrs	r3, r3, #8
 801550e:	b2db      	uxtb	r3, r3
 8015510:	73fb      	strb	r3, [r7, #15]
                buf[4] = (addr >> 0) & 0xFF;                                                                /* 7 - 0 bits */
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	b2db      	uxtb	r3, r3
 8015516:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 5, NULL, 0);                          /* spi write read */
 8015518:	f107 010c 	add.w	r1, r7, #12
 801551c:	2300      	movs	r3, #0
 801551e:	9300      	str	r3, [sp, #0]
 8015520:	2300      	movs	r3, #0
 8015522:	2205      	movs	r2, #5
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f7fd ffef 	bl	8013508 <a_w25qxx_spi_write_read>
 801552a:	4603      	mov	r3, r0
 801552c:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 801552e:	7cfb      	ldrb	r3, [r7, #19]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d00b      	beq.n	801554c <a_w25qxx_erase_sector+0x3d8>
                {
                    handle->debug_print("w25qxx: sector erase 4k failed.\n");                               /* sector erase 4k failed */
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	695b      	ldr	r3, [r3, #20]
 8015538:	4876      	ldr	r0, [pc, #472]	; (8015714 <a_w25qxx_erase_sector+0x5a0>)
 801553a:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 801553c:	2301      	movs	r3, #1
 801553e:	e171      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	695b      	ldr	r3, [r3, #20]
 8015544:	4874      	ldr	r0, [pc, #464]	; (8015718 <a_w25qxx_erase_sector+0x5a4>)
 8015546:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015548:	2301      	movs	r3, #1
 801554a:	e16b      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
            }
            
            timeout = 400;                                                                                  /* max 400 ms */
 801554c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015550:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 8015552:	e022      	b.n	801559a <a_w25qxx_erase_sector+0x426>
            {
                buf[0] = W25QXX_COMMAND_READ_STATUS_REG1;                                                   /* read status1 command */
 8015554:	2305      	movs	r3, #5
 8015556:	733b      	strb	r3, [r7, #12]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, (uint8_t *)&status, 1);            /* spi write read */
 8015558:	f107 0312 	add.w	r3, r7, #18
 801555c:	f107 010c 	add.w	r1, r7, #12
 8015560:	2201      	movs	r2, #1
 8015562:	9200      	str	r2, [sp, #0]
 8015564:	2201      	movs	r2, #1
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f7fd ffce 	bl	8013508 <a_w25qxx_spi_write_read>
 801556c:	4603      	mov	r3, r0
 801556e:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8015570:	7cfb      	ldrb	r3, [r7, #19]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d005      	beq.n	8015582 <a_w25qxx_erase_sector+0x40e>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	695b      	ldr	r3, [r3, #20]
 801557a:	4868      	ldr	r0, [pc, #416]	; (801571c <a_w25qxx_erase_sector+0x5a8>)
 801557c:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 801557e:	2301      	movs	r3, #1
 8015580:	e150      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8015582:	7cbb      	ldrb	r3, [r7, #18]
 8015584:	f003 0301 	and.w	r3, r3, #1
 8015588:	2b00      	cmp	r3, #0
 801558a:	d00a      	beq.n	80155a2 <a_w25qxx_erase_sector+0x42e>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	3b01      	subs	r3, #1
 8015590:	617b      	str	r3, [r7, #20]
                handle->delay_ms(1);                                                                        /* delay 1 ms */
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	68db      	ldr	r3, [r3, #12]
 8015596:	2001      	movs	r0, #1
 8015598:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 801559a:	697b      	ldr	r3, [r7, #20]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d1d9      	bne.n	8015554 <a_w25qxx_erase_sector+0x3e0>
 80155a0:	e000      	b.n	80155a4 <a_w25qxx_erase_sector+0x430>
                    break;                                                                                  /* break */
 80155a2:	bf00      	nop
            }
            if (timeout == 0)
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	f040 813b 	bne.w	8015822 <a_w25qxx_erase_sector+0x6ae>
            {
                handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                  /* sector erase 4k timeout */
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	695b      	ldr	r3, [r3, #20]
 80155b0:	485b      	ldr	r0, [pc, #364]	; (8015720 <a_w25qxx_erase_sector+0x5ac>)
 80155b2:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80155b4:	2301      	movs	r3, #1
 80155b6:	e135      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
            }
        }
    }
    else
    {
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 80155b8:	2300      	movs	r3, #0
 80155ba:	930a      	str	r3, [sp, #40]	; 0x28
 80155bc:	2300      	movs	r3, #0
 80155be:	9309      	str	r3, [sp, #36]	; 0x24
 80155c0:	2300      	movs	r3, #0
 80155c2:	9308      	str	r3, [sp, #32]
 80155c4:	2300      	movs	r3, #0
 80155c6:	9307      	str	r3, [sp, #28]
 80155c8:	2300      	movs	r3, #0
 80155ca:	9306      	str	r3, [sp, #24]
 80155cc:	2300      	movs	r3, #0
 80155ce:	9305      	str	r3, [sp, #20]
 80155d0:	2300      	movs	r3, #0
 80155d2:	9304      	str	r3, [sp, #16]
 80155d4:	2300      	movs	r3, #0
 80155d6:	9303      	str	r3, [sp, #12]
 80155d8:	2300      	movs	r3, #0
 80155da:	9302      	str	r3, [sp, #8]
 80155dc:	2300      	movs	r3, #0
 80155de:	9301      	str	r3, [sp, #4]
 80155e0:	2300      	movs	r3, #0
 80155e2:	9300      	str	r3, [sp, #0]
 80155e4:	2300      	movs	r3, #0
 80155e6:	2204      	movs	r2, #4
 80155e8:	2106      	movs	r1, #6
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f7fd ffb8 	bl	8013560 <a_w25qxx_qspi_write_read>
 80155f0:	4603      	mov	r3, r0
 80155f2:	74fb      	strb	r3, [r7, #19]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                                   /* qspi write read */
        if (res != 0)                                                                                       /* check result */
 80155f4:	7cfb      	ldrb	r3, [r7, #19]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d005      	beq.n	8015606 <a_w25qxx_erase_sector+0x492>
        {
            handle->debug_print("w25qxx: write enable failed.\n");                                          /* write enable failed */
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	695b      	ldr	r3, [r3, #20]
 80155fe:	4844      	ldr	r0, [pc, #272]	; (8015710 <a_w25qxx_erase_sector+0x59c>)
 8015600:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8015602:	2301      	movs	r3, #1
 8015604:	e10e      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
        }
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                             /* 3 address mode */
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	7f1b      	ldrb	r3, [r3, #28]
 801560a:	2b00      	cmp	r3, #0
 801560c:	f040 808c 	bne.w	8015728 <a_w25qxx_erase_sector+0x5b4>
        {
            if (handle->type >= W25Q256)                                                                    /* >128Mb */
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	8b5b      	ldrh	r3, [r3, #26]
 8015614:	f64e 7217 	movw	r2, #61207	; 0xef17
 8015618:	4293      	cmp	r3, r2
 801561a:	d952      	bls.n	80156c2 <a_w25qxx_erase_sector+0x54e>
            {
                buf[0] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	0e1b      	lsrs	r3, r3, #24
 8015620:	b2db      	uxtb	r3, r3
 8015622:	733b      	strb	r3, [r7, #12]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8015624:	2304      	movs	r3, #4
 8015626:	930a      	str	r3, [sp, #40]	; 0x28
 8015628:	2300      	movs	r3, #0
 801562a:	9309      	str	r3, [sp, #36]	; 0x24
 801562c:	2300      	movs	r3, #0
 801562e:	9308      	str	r3, [sp, #32]
 8015630:	2301      	movs	r3, #1
 8015632:	9307      	str	r3, [sp, #28]
 8015634:	f107 030c 	add.w	r3, r7, #12
 8015638:	9306      	str	r3, [sp, #24]
 801563a:	2300      	movs	r3, #0
 801563c:	9305      	str	r3, [sp, #20]
 801563e:	2300      	movs	r3, #0
 8015640:	9304      	str	r3, [sp, #16]
 8015642:	2300      	movs	r3, #0
 8015644:	9303      	str	r3, [sp, #12]
 8015646:	2300      	movs	r3, #0
 8015648:	9302      	str	r3, [sp, #8]
 801564a:	2300      	movs	r3, #0
 801564c:	9301      	str	r3, [sp, #4]
 801564e:	2300      	movs	r3, #0
 8015650:	9300      	str	r3, [sp, #0]
 8015652:	2300      	movs	r3, #0
 8015654:	2204      	movs	r2, #4
 8015656:	21c5      	movs	r1, #197	; 0xc5
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f7fd ff81 	bl	8013560 <a_w25qxx_qspi_write_read>
 801565e:	4603      	mov	r3, r0
 8015660:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8015662:	7cfb      	ldrb	r3, [r7, #19]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d005      	beq.n	8015674 <a_w25qxx_erase_sector+0x500>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                  /* write extended addr register failed */
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	695b      	ldr	r3, [r3, #20]
 801566c:	482d      	ldr	r0, [pc, #180]	; (8015724 <a_w25qxx_erase_sector+0x5b0>)
 801566e:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015670:	2301      	movs	r3, #1
 8015672:	e0d7      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8015674:	2300      	movs	r3, #0
 8015676:	930a      	str	r3, [sp, #40]	; 0x28
 8015678:	2300      	movs	r3, #0
 801567a:	9309      	str	r3, [sp, #36]	; 0x24
 801567c:	2300      	movs	r3, #0
 801567e:	9308      	str	r3, [sp, #32]
 8015680:	2300      	movs	r3, #0
 8015682:	9307      	str	r3, [sp, #28]
 8015684:	2300      	movs	r3, #0
 8015686:	9306      	str	r3, [sp, #24]
 8015688:	2300      	movs	r3, #0
 801568a:	9305      	str	r3, [sp, #20]
 801568c:	2300      	movs	r3, #0
 801568e:	9304      	str	r3, [sp, #16]
 8015690:	2300      	movs	r3, #0
 8015692:	9303      	str	r3, [sp, #12]
 8015694:	2300      	movs	r3, #0
 8015696:	9302      	str	r3, [sp, #8]
 8015698:	2300      	movs	r3, #0
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	2300      	movs	r3, #0
 801569e:	9300      	str	r3, [sp, #0]
 80156a0:	2300      	movs	r3, #0
 80156a2:	2204      	movs	r2, #4
 80156a4:	2106      	movs	r1, #6
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f7fd ff5a 	bl	8013560 <a_w25qxx_qspi_write_read>
 80156ac:	4603      	mov	r3, r0
 80156ae:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* qspi write read */
                if (res != 0)                                                                               /* check result */
 80156b0:	7cfb      	ldrb	r3, [r7, #19]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d005      	beq.n	80156c2 <a_w25qxx_erase_sector+0x54e>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                  /* write enable failed */
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	695b      	ldr	r3, [r3, #20]
 80156ba:	4815      	ldr	r0, [pc, #84]	; (8015710 <a_w25qxx_erase_sector+0x59c>)
 80156bc:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80156be:	2301      	movs	r3, #1
 80156c0:	e0b0      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 4,
 80156c2:	2300      	movs	r3, #0
 80156c4:	930a      	str	r3, [sp, #40]	; 0x28
 80156c6:	2300      	movs	r3, #0
 80156c8:	9309      	str	r3, [sp, #36]	; 0x24
 80156ca:	2300      	movs	r3, #0
 80156cc:	9308      	str	r3, [sp, #32]
 80156ce:	2300      	movs	r3, #0
 80156d0:	9307      	str	r3, [sp, #28]
 80156d2:	2300      	movs	r3, #0
 80156d4:	9306      	str	r3, [sp, #24]
 80156d6:	2300      	movs	r3, #0
 80156d8:	9305      	str	r3, [sp, #20]
 80156da:	2300      	movs	r3, #0
 80156dc:	9304      	str	r3, [sp, #16]
 80156de:	2300      	movs	r3, #0
 80156e0:	9303      	str	r3, [sp, #12]
 80156e2:	2300      	movs	r3, #0
 80156e4:	9302      	str	r3, [sp, #8]
 80156e6:	2303      	movs	r3, #3
 80156e8:	9301      	str	r3, [sp, #4]
 80156ea:	2304      	movs	r3, #4
 80156ec:	9300      	str	r3, [sp, #0]
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	2204      	movs	r2, #4
 80156f2:	2120      	movs	r1, #32
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7fd ff33 	bl	8013560 <a_w25qxx_qspi_write_read>
 80156fa:	4603      	mov	r3, r0
 80156fc:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* spi write read */
            if (res != 0)                                                                                   /* check result */
 80156fe:	7cfb      	ldrb	r3, [r7, #19]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d048      	beq.n	8015796 <a_w25qxx_erase_sector+0x622>
            {
                handle->debug_print("w25qxx: sector erase 4k failed.\n");                                   /* sector erase 4k failed */
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	695b      	ldr	r3, [r3, #20]
 8015708:	4802      	ldr	r0, [pc, #8]	; (8015714 <a_w25qxx_erase_sector+0x5a0>)
 801570a:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 801570c:	2301      	movs	r3, #1
 801570e:	e089      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
 8015710:	0802a8d0 	.word	0x0802a8d0
 8015714:	0802b118 	.word	0x0802b118
 8015718:	0802abdc 	.word	0x0802abdc
 801571c:	0802a934 	.word	0x0802a934
 8015720:	0802b13c 	.word	0x0802b13c
 8015724:	0802aecc 	.word	0x0802aecc
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	7f1b      	ldrb	r3, [r3, #28]
 801572c:	2b01      	cmp	r3, #1
 801572e:	d12c      	bne.n	801578a <a_w25qxx_erase_sector+0x616>
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	8b5b      	ldrh	r3, [r3, #26]
 8015734:	f64e 7217 	movw	r2, #61207	; 0xef17
 8015738:	4293      	cmp	r3, r2
 801573a:	d926      	bls.n	801578a <a_w25qxx_erase_sector+0x616>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_SECTOR_ERASE_4K, 4,
 801573c:	2300      	movs	r3, #0
 801573e:	930a      	str	r3, [sp, #40]	; 0x28
 8015740:	2300      	movs	r3, #0
 8015742:	9309      	str	r3, [sp, #36]	; 0x24
 8015744:	2300      	movs	r3, #0
 8015746:	9308      	str	r3, [sp, #32]
 8015748:	2300      	movs	r3, #0
 801574a:	9307      	str	r3, [sp, #28]
 801574c:	2300      	movs	r3, #0
 801574e:	9306      	str	r3, [sp, #24]
 8015750:	2300      	movs	r3, #0
 8015752:	9305      	str	r3, [sp, #20]
 8015754:	2300      	movs	r3, #0
 8015756:	9304      	str	r3, [sp, #16]
 8015758:	2300      	movs	r3, #0
 801575a:	9303      	str	r3, [sp, #12]
 801575c:	2300      	movs	r3, #0
 801575e:	9302      	str	r3, [sp, #8]
 8015760:	2304      	movs	r3, #4
 8015762:	9301      	str	r3, [sp, #4]
 8015764:	2304      	movs	r3, #4
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	2204      	movs	r2, #4
 801576c:	2120      	movs	r1, #32
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f7fd fef6 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015774:	4603      	mov	r3, r0
 8015776:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8015778:	7cfb      	ldrb	r3, [r7, #19]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d00b      	beq.n	8015796 <a_w25qxx_erase_sector+0x622>
            {
                handle->debug_print("w25qxx: sector erase 4k failed.\n");                                   /* sector erase 4k failed */
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	695b      	ldr	r3, [r3, #20]
 8015782:	482a      	ldr	r0, [pc, #168]	; (801582c <a_w25qxx_erase_sector+0x6b8>)
 8015784:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015786:	2301      	movs	r3, #1
 8015788:	e04c      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                      /* address mode is invalid */
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	695b      	ldr	r3, [r3, #20]
 801578e:	4828      	ldr	r0, [pc, #160]	; (8015830 <a_w25qxx_erase_sector+0x6bc>)
 8015790:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8015792:	2301      	movs	r3, #1
 8015794:	e046      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
        }
        
        timeout = 400;                                                                                      /* max 400 ms */
 8015796:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801579a:	617b      	str	r3, [r7, #20]
        while (timeout != 0)                                                                                /* check timeout */
 801579c:	e033      	b.n	8015806 <a_w25qxx_erase_sector+0x692>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 4,
 801579e:	2304      	movs	r3, #4
 80157a0:	930a      	str	r3, [sp, #40]	; 0x28
 80157a2:	2301      	movs	r3, #1
 80157a4:	9309      	str	r3, [sp, #36]	; 0x24
 80157a6:	f107 0312 	add.w	r3, r7, #18
 80157aa:	9308      	str	r3, [sp, #32]
 80157ac:	2300      	movs	r3, #0
 80157ae:	9307      	str	r3, [sp, #28]
 80157b0:	2300      	movs	r3, #0
 80157b2:	9306      	str	r3, [sp, #24]
 80157b4:	2300      	movs	r3, #0
 80157b6:	9305      	str	r3, [sp, #20]
 80157b8:	2300      	movs	r3, #0
 80157ba:	9304      	str	r3, [sp, #16]
 80157bc:	2300      	movs	r3, #0
 80157be:	9303      	str	r3, [sp, #12]
 80157c0:	2300      	movs	r3, #0
 80157c2:	9302      	str	r3, [sp, #8]
 80157c4:	2300      	movs	r3, #0
 80157c6:	9301      	str	r3, [sp, #4]
 80157c8:	2300      	movs	r3, #0
 80157ca:	9300      	str	r3, [sp, #0]
 80157cc:	2300      	movs	r3, #0
 80157ce:	2204      	movs	r2, #4
 80157d0:	2105      	movs	r1, #5
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f7fd fec4 	bl	8013560 <a_w25qxx_qspi_write_read>
 80157d8:	4603      	mov	r3, r0
 80157da:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0,
                                          (uint8_t *)&status, 1, 4);                                        /* spi write read */
            if (res != 0)                                                                                   /* check result */
 80157dc:	7cfb      	ldrb	r3, [r7, #19]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d005      	beq.n	80157ee <a_w25qxx_erase_sector+0x67a>
            {
                handle->debug_print("w25qxx: get status1 failed.\n");                                       /* get status1 failed */
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	695b      	ldr	r3, [r3, #20]
 80157e6:	4813      	ldr	r0, [pc, #76]	; (8015834 <a_w25qxx_erase_sector+0x6c0>)
 80157e8:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80157ea:	2301      	movs	r3, #1
 80157ec:	e01a      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
            }
            if ((status & 0x01) == 0x00)                                                                    /* check status */
 80157ee:	7cbb      	ldrb	r3, [r7, #18]
 80157f0:	f003 0301 	and.w	r3, r3, #1
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d00a      	beq.n	801580e <a_w25qxx_erase_sector+0x69a>
            {
                break;                                                                                      /* break */
            }
            timeout--;                                                                                      /* timeout-- */
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	3b01      	subs	r3, #1
 80157fc:	617b      	str	r3, [r7, #20]
            handle->delay_ms(1);                                                                            /* delay 1 ms */
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	2001      	movs	r0, #1
 8015804:	4798      	blx	r3
        while (timeout != 0)                                                                                /* check timeout */
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d1c8      	bne.n	801579e <a_w25qxx_erase_sector+0x62a>
 801580c:	e000      	b.n	8015810 <a_w25qxx_erase_sector+0x69c>
                break;                                                                                      /* break */
 801580e:	bf00      	nop
        }
        if (timeout == 0)
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d105      	bne.n	8015822 <a_w25qxx_erase_sector+0x6ae>
        {
            handle->debug_print("w25qxx: sector erase 4k timeout.\n");                                      /* sector erase 4k timeout */
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	695b      	ldr	r3, [r3, #20]
 801581a:	4807      	ldr	r0, [pc, #28]	; (8015838 <a_w25qxx_erase_sector+0x6c4>)
 801581c:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 801581e:	2301      	movs	r3, #1
 8015820:	e000      	b.n	8015824 <a_w25qxx_erase_sector+0x6b0>
        }
    }
    
    return 0;                                                                                               /* success return 0 */
 8015822:	2300      	movs	r3, #0
}
 8015824:	4618      	mov	r0, r3
 8015826:	3718      	adds	r7, #24
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	0802b118 	.word	0x0802b118
 8015830:	0802abdc 	.word	0x0802abdc
 8015834:	0802a934 	.word	0x0802a934
 8015838:	0802b13c 	.word	0x0802b13c

0801583c <a_w25qxx_page_program>:
 *            - 0 success
 *            - 1 page program failed
 * @note      none
 */
static uint8_t a_w25qxx_page_program(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint16_t len)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b092      	sub	sp, #72	; 0x48
 8015840:	af0c      	add	r7, sp, #48	; 0x30
 8015842:	60f8      	str	r0, [r7, #12]
 8015844:	60b9      	str	r1, [r7, #8]
 8015846:	607a      	str	r2, [r7, #4]
 8015848:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t status;
    uint32_t timeout;
    uint8_t buf[2];

    if (handle->spi_qspi == W25QXX_INTERFACE_SPI)                                                           /* spi interface */
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015850:	2b00      	cmp	r3, #0
 8015852:	f040 823b 	bne.w	8015ccc <a_w25qxx_page_program+0x490>
    {
        if (handle->dual_quad_spi_enable != 0)                                                              /* enable dual quad spi */
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	7fdb      	ldrb	r3, [r3, #31]
 801585a:	2b00      	cmp	r3, #0
 801585c:	f000 8129 	beq.w	8015ab2 <a_w25qxx_page_program+0x276>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 8015860:	2300      	movs	r3, #0
 8015862:	930a      	str	r3, [sp, #40]	; 0x28
 8015864:	2300      	movs	r3, #0
 8015866:	9309      	str	r3, [sp, #36]	; 0x24
 8015868:	2300      	movs	r3, #0
 801586a:	9308      	str	r3, [sp, #32]
 801586c:	2300      	movs	r3, #0
 801586e:	9307      	str	r3, [sp, #28]
 8015870:	2300      	movs	r3, #0
 8015872:	9306      	str	r3, [sp, #24]
 8015874:	2300      	movs	r3, #0
 8015876:	9305      	str	r3, [sp, #20]
 8015878:	2300      	movs	r3, #0
 801587a:	9304      	str	r3, [sp, #16]
 801587c:	2300      	movs	r3, #0
 801587e:	9303      	str	r3, [sp, #12]
 8015880:	2300      	movs	r3, #0
 8015882:	9302      	str	r3, [sp, #8]
 8015884:	2300      	movs	r3, #0
 8015886:	9301      	str	r3, [sp, #4]
 8015888:	2300      	movs	r3, #0
 801588a:	9300      	str	r3, [sp, #0]
 801588c:	2300      	movs	r3, #0
 801588e:	2201      	movs	r2, #1
 8015890:	2106      	movs	r1, #6
 8015892:	68f8      	ldr	r0, [r7, #12]
 8015894:	f7fd fe64 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015898:	4603      	mov	r3, r0
 801589a:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0x00, NULL, 0x00,
                                           NULL, 0x00, 0x00);                                               /* qspi write read */
            if (res != 0)                                                                                   /* check result */
 801589c:	7cfb      	ldrb	r3, [r7, #19]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d005      	beq.n	80158ae <a_w25qxx_page_program+0x72>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	695b      	ldr	r3, [r3, #20]
 80158a6:	48a0      	ldr	r0, [pc, #640]	; (8015b28 <a_w25qxx_page_program+0x2ec>)
 80158a8:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 80158aa:	2301      	movs	r3, #1
 80158ac:	e345      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	7f1b      	ldrb	r3, [r3, #28]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d17f      	bne.n	80159b6 <a_w25qxx_page_program+0x17a>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	8b5b      	ldrh	r3, [r3, #26]
 80158ba:	f64e 7217 	movw	r2, #61207	; 0xef17
 80158be:	4293      	cmp	r3, r2
 80158c0:	d952      	bls.n	8015968 <a_w25qxx_page_program+0x12c>
                {
                    buf[0] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	0e1b      	lsrs	r3, r3, #24
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_qspi_write_read(handle, 0xC5, 1,
 80158ca:	2301      	movs	r3, #1
 80158cc:	930a      	str	r3, [sp, #40]	; 0x28
 80158ce:	2300      	movs	r3, #0
 80158d0:	9309      	str	r3, [sp, #36]	; 0x24
 80158d2:	2300      	movs	r3, #0
 80158d4:	9308      	str	r3, [sp, #32]
 80158d6:	2301      	movs	r3, #1
 80158d8:	9307      	str	r3, [sp, #28]
 80158da:	f107 0310 	add.w	r3, r7, #16
 80158de:	9306      	str	r3, [sp, #24]
 80158e0:	2300      	movs	r3, #0
 80158e2:	9305      	str	r3, [sp, #20]
 80158e4:	2300      	movs	r3, #0
 80158e6:	9304      	str	r3, [sp, #16]
 80158e8:	2300      	movs	r3, #0
 80158ea:	9303      	str	r3, [sp, #12]
 80158ec:	2300      	movs	r3, #0
 80158ee:	9302      	str	r3, [sp, #8]
 80158f0:	2300      	movs	r3, #0
 80158f2:	9301      	str	r3, [sp, #4]
 80158f4:	2300      	movs	r3, #0
 80158f6:	9300      	str	r3, [sp, #0]
 80158f8:	2300      	movs	r3, #0
 80158fa:	2201      	movs	r2, #1
 80158fc:	21c5      	movs	r1, #197	; 0xc5
 80158fe:	68f8      	ldr	r0, [r7, #12]
 8015900:	f7fd fe2e 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015904:	4603      	mov	r3, r0
 8015906:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0, (uint8_t *)buf, 0x01,
                                                   NULL, 0x00, 1);                                          /* spi write read */
                    if (res != 0)                                                                           /* check result */
 8015908:	7cfb      	ldrb	r3, [r7, #19]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d005      	beq.n	801591a <a_w25qxx_page_program+0xde>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	695b      	ldr	r3, [r3, #20]
 8015912:	4886      	ldr	r0, [pc, #536]	; (8015b2c <a_w25qxx_page_program+0x2f0>)
 8015914:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8015916:	2301      	movs	r3, #1
 8015918:	e30f      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                    }
                    res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 1,
 801591a:	2300      	movs	r3, #0
 801591c:	930a      	str	r3, [sp, #40]	; 0x28
 801591e:	2300      	movs	r3, #0
 8015920:	9309      	str	r3, [sp, #36]	; 0x24
 8015922:	2300      	movs	r3, #0
 8015924:	9308      	str	r3, [sp, #32]
 8015926:	2300      	movs	r3, #0
 8015928:	9307      	str	r3, [sp, #28]
 801592a:	2300      	movs	r3, #0
 801592c:	9306      	str	r3, [sp, #24]
 801592e:	2300      	movs	r3, #0
 8015930:	9305      	str	r3, [sp, #20]
 8015932:	2300      	movs	r3, #0
 8015934:	9304      	str	r3, [sp, #16]
 8015936:	2300      	movs	r3, #0
 8015938:	9303      	str	r3, [sp, #12]
 801593a:	2300      	movs	r3, #0
 801593c:	9302      	str	r3, [sp, #8]
 801593e:	2300      	movs	r3, #0
 8015940:	9301      	str	r3, [sp, #4]
 8015942:	2300      	movs	r3, #0
 8015944:	9300      	str	r3, [sp, #0]
 8015946:	2300      	movs	r3, #0
 8015948:	2201      	movs	r2, #1
 801594a:	2106      	movs	r1, #6
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f7fd fe07 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015952:	4603      	mov	r3, r0
 8015954:	74fb      	strb	r3, [r7, #19]
                                                   0x00000000, 0x00, 0x00,
                                                   0x00000000, 0x00, 0x00,
                                                   0x00, NULL, 0x00,
                                                   NULL, 0x00, 0x00);                                       /* qspi write read */
                    if (res != 0)                                                                           /* check result */
 8015956:	7cfb      	ldrb	r3, [r7, #19]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d005      	beq.n	8015968 <a_w25qxx_page_program+0x12c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	695b      	ldr	r3, [r3, #20]
 8015960:	4871      	ldr	r0, [pc, #452]	; (8015b28 <a_w25qxx_page_program+0x2ec>)
 8015962:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8015964:	2301      	movs	r3, #1
 8015966:	e2e8      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                    }
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 1,
 8015968:	887b      	ldrh	r3, [r7, #2]
 801596a:	2201      	movs	r2, #1
 801596c:	920a      	str	r2, [sp, #40]	; 0x28
 801596e:	2200      	movs	r2, #0
 8015970:	9209      	str	r2, [sp, #36]	; 0x24
 8015972:	2200      	movs	r2, #0
 8015974:	9208      	str	r2, [sp, #32]
 8015976:	9307      	str	r3, [sp, #28]
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	9306      	str	r3, [sp, #24]
 801597c:	2300      	movs	r3, #0
 801597e:	9305      	str	r3, [sp, #20]
 8015980:	2300      	movs	r3, #0
 8015982:	9304      	str	r3, [sp, #16]
 8015984:	2300      	movs	r3, #0
 8015986:	9303      	str	r3, [sp, #12]
 8015988:	2300      	movs	r3, #0
 801598a:	9302      	str	r3, [sp, #8]
 801598c:	2303      	movs	r3, #3
 801598e:	9301      	str	r3, [sp, #4]
 8015990:	2301      	movs	r3, #1
 8015992:	9300      	str	r3, [sp, #0]
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	2201      	movs	r2, #1
 8015998:	2102      	movs	r1, #2
 801599a:	68f8      	ldr	r0, [r7, #12]
 801599c:	f7fd fde0 	bl	8013560 <a_w25qxx_qspi_write_read>
 80159a0:	4603      	mov	r3, r0
 80159a2:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 3,
                                               0x00000000, 0x00, 0x00,
                                               0, data, len,
                                               NULL, 0x00, 1);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 80159a4:	7cfb      	ldrb	r3, [r7, #19]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d03c      	beq.n	8015a24 <a_w25qxx_page_program+0x1e8>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	695b      	ldr	r3, [r3, #20]
 80159ae:	4860      	ldr	r0, [pc, #384]	; (8015b30 <a_w25qxx_page_program+0x2f4>)
 80159b0:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 80159b2:	2301      	movs	r3, #1
 80159b4:	e2c1      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	7f1b      	ldrb	r3, [r3, #28]
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d12c      	bne.n	8015a18 <a_w25qxx_page_program+0x1dc>
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	8b5b      	ldrh	r3, [r3, #26]
 80159c2:	f64e 7217 	movw	r2, #61207	; 0xef17
 80159c6:	4293      	cmp	r3, r2
 80159c8:	d926      	bls.n	8015a18 <a_w25qxx_page_program+0x1dc>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 1,
 80159ca:	887b      	ldrh	r3, [r7, #2]
 80159cc:	2201      	movs	r2, #1
 80159ce:	920a      	str	r2, [sp, #40]	; 0x28
 80159d0:	2200      	movs	r2, #0
 80159d2:	9209      	str	r2, [sp, #36]	; 0x24
 80159d4:	2200      	movs	r2, #0
 80159d6:	9208      	str	r2, [sp, #32]
 80159d8:	9307      	str	r3, [sp, #28]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	9306      	str	r3, [sp, #24]
 80159de:	2300      	movs	r3, #0
 80159e0:	9305      	str	r3, [sp, #20]
 80159e2:	2300      	movs	r3, #0
 80159e4:	9304      	str	r3, [sp, #16]
 80159e6:	2300      	movs	r3, #0
 80159e8:	9303      	str	r3, [sp, #12]
 80159ea:	2300      	movs	r3, #0
 80159ec:	9302      	str	r3, [sp, #8]
 80159ee:	2304      	movs	r3, #4
 80159f0:	9301      	str	r3, [sp, #4]
 80159f2:	2301      	movs	r3, #1
 80159f4:	9300      	str	r3, [sp, #0]
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	2201      	movs	r2, #1
 80159fa:	2102      	movs	r1, #2
 80159fc:	68f8      	ldr	r0, [r7, #12]
 80159fe:	f7fd fdaf 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015a02:	4603      	mov	r3, r0
 8015a04:	74fb      	strb	r3, [r7, #19]
                                               addr, 1, 4,
                                               0x00000000, 0x00, 0x00,
                                               0, data, len,
                                               NULL, 0x00, 1);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8015a06:	7cfb      	ldrb	r3, [r7, #19]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d00b      	beq.n	8015a24 <a_w25qxx_page_program+0x1e8>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	695b      	ldr	r3, [r3, #20]
 8015a10:	4847      	ldr	r0, [pc, #284]	; (8015b30 <a_w25qxx_page_program+0x2f4>)
 8015a12:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015a14:	2301      	movs	r3, #1
 8015a16:	e290      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	695b      	ldr	r3, [r3, #20]
 8015a1c:	4845      	ldr	r0, [pc, #276]	; (8015b34 <a_w25qxx_page_program+0x2f8>)
 8015a1e:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015a20:	2301      	movs	r3, #1
 8015a22:	e28a      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
            
            timeout = 3 * 100;                                                                              /* max 3 ms */
 8015a24:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8015a28:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 8015a2a:	e033      	b.n	8015a94 <a_w25qxx_page_program+0x258>
            {
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 1,
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8015a30:	2301      	movs	r3, #1
 8015a32:	9309      	str	r3, [sp, #36]	; 0x24
 8015a34:	f107 0312 	add.w	r3, r7, #18
 8015a38:	9308      	str	r3, [sp, #32]
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	9307      	str	r3, [sp, #28]
 8015a3e:	2300      	movs	r3, #0
 8015a40:	9306      	str	r3, [sp, #24]
 8015a42:	2300      	movs	r3, #0
 8015a44:	9305      	str	r3, [sp, #20]
 8015a46:	2300      	movs	r3, #0
 8015a48:	9304      	str	r3, [sp, #16]
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	9303      	str	r3, [sp, #12]
 8015a4e:	2300      	movs	r3, #0
 8015a50:	9302      	str	r3, [sp, #8]
 8015a52:	2300      	movs	r3, #0
 8015a54:	9301      	str	r3, [sp, #4]
 8015a56:	2300      	movs	r3, #0
 8015a58:	9300      	str	r3, [sp, #0]
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	2201      	movs	r2, #1
 8015a5e:	2105      	movs	r1, #5
 8015a60:	68f8      	ldr	r0, [r7, #12]
 8015a62:	f7fd fd7d 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015a66:	4603      	mov	r3, r0
 8015a68:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, NULL, 0,
                                              (uint8_t *)&status, 1, 1);                                    /* spi write read */
                if (res != 0)                                                                               /* check result */
 8015a6a:	7cfb      	ldrb	r3, [r7, #19]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d005      	beq.n	8015a7c <a_w25qxx_page_program+0x240>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	695b      	ldr	r3, [r3, #20]
 8015a74:	482e      	ldr	r0, [pc, #184]	; (8015b30 <a_w25qxx_page_program+0x2f4>)
 8015a76:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015a78:	2301      	movs	r3, #1
 8015a7a:	e25e      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8015a7c:	7cbb      	ldrb	r3, [r7, #18]
 8015a7e:	f003 0301 	and.w	r3, r3, #1
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d00a      	beq.n	8015a9c <a_w25qxx_page_program+0x260>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	3b01      	subs	r3, #1
 8015a8a:	617b      	str	r3, [r7, #20]
                handle->delay_us(10);                                                                       /* delay 10 us */
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	691b      	ldr	r3, [r3, #16]
 8015a90:	200a      	movs	r0, #10
 8015a92:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d1c8      	bne.n	8015a2c <a_w25qxx_page_program+0x1f0>
 8015a9a:	e000      	b.n	8015a9e <a_w25qxx_page_program+0x262>
                    break;                                                                                  /* break */
 8015a9c:	bf00      	nop
            }
            if (timeout == 0)
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	f040 8249 	bne.w	8015f38 <a_w25qxx_page_program+0x6fc>
            {
                handle->debug_print("w25qxx: page program timeout.\n");                                     /* page program timeout */
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	695b      	ldr	r3, [r3, #20]
 8015aaa:	4823      	ldr	r0, [pc, #140]	; (8015b38 <a_w25qxx_page_program+0x2fc>)
 8015aac:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015aae:	2301      	movs	r3, #1
 8015ab0:	e243      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
        }
        else                                                                                                /* single spi */
        {
            buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                           /* write enable command */
 8015ab2:	2306      	movs	r3, #6
 8015ab4:	743b      	strb	r3, [r7, #16]
            res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                              /* spi write read */
 8015ab6:	f107 0110 	add.w	r1, r7, #16
 8015aba:	2300      	movs	r3, #0
 8015abc:	9300      	str	r3, [sp, #0]
 8015abe:	2300      	movs	r3, #0
 8015ac0:	2201      	movs	r2, #1
 8015ac2:	68f8      	ldr	r0, [r7, #12]
 8015ac4:	f7fd fd20 	bl	8013508 <a_w25qxx_spi_write_read>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	74fb      	strb	r3, [r7, #19]
            if (res != 0)                                                                                   /* check result */
 8015acc:	7cfb      	ldrb	r3, [r7, #19]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d005      	beq.n	8015ade <a_w25qxx_page_program+0x2a2>
            {
                handle->debug_print("w25qxx: write enable failed.\n");                                      /* write enable failed */
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	695b      	ldr	r3, [r3, #20]
 8015ad6:	4814      	ldr	r0, [pc, #80]	; (8015b28 <a_w25qxx_page_program+0x2ec>)
 8015ad8:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015ada:	2301      	movs	r3, #1
 8015adc:	e22d      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
            if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                         /* 3 address mode */
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	7f1b      	ldrb	r3, [r3, #28]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d173      	bne.n	8015bce <a_w25qxx_page_program+0x392>
            {
                if (handle->type >= W25Q256)                                                                /* >128Mb */
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	8b5b      	ldrh	r3, [r3, #26]
 8015aea:	f64e 7217 	movw	r2, #61207	; 0xef17
 8015aee:	4293      	cmp	r3, r2
 8015af0:	d93a      	bls.n	8015b68 <a_w25qxx_page_program+0x32c>
                {
                    buf[0] = 0xC5;                                                                          /* write extended addr register command */
 8015af2:	23c5      	movs	r3, #197	; 0xc5
 8015af4:	743b      	strb	r3, [r7, #16]
                    buf[1] = (addr >> 24) & 0xFF;                                                           /* 31 - 24 bits */
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	0e1b      	lsrs	r3, r3, #24
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	747b      	strb	r3, [r7, #17]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 2, NULL, 0);                      /* spi write read */
 8015afe:	f107 0110 	add.w	r1, r7, #16
 8015b02:	2300      	movs	r3, #0
 8015b04:	9300      	str	r3, [sp, #0]
 8015b06:	2300      	movs	r3, #0
 8015b08:	2202      	movs	r2, #2
 8015b0a:	68f8      	ldr	r0, [r7, #12]
 8015b0c:	f7fd fcfc 	bl	8013508 <a_w25qxx_spi_write_read>
 8015b10:	4603      	mov	r3, r0
 8015b12:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8015b14:	7cfb      	ldrb	r3, [r7, #19]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d010      	beq.n	8015b3c <a_w25qxx_page_program+0x300>
                    {
                        handle->debug_print("w25qxx: write extended addr register failed.\n");              /* write extended addr register failed */
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	695b      	ldr	r3, [r3, #20]
 8015b1e:	4803      	ldr	r0, [pc, #12]	; (8015b2c <a_w25qxx_page_program+0x2f0>)
 8015b20:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8015b22:	2301      	movs	r3, #1
 8015b24:	e209      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
 8015b26:	bf00      	nop
 8015b28:	0802a8d0 	.word	0x0802a8d0
 8015b2c:	0802aecc 	.word	0x0802aecc
 8015b30:	0802b090 	.word	0x0802b090
 8015b34:	0802abdc 	.word	0x0802abdc
 8015b38:	0802b0b0 	.word	0x0802b0b0
                    }
                    buf[0] = W25QXX_COMMAND_WRITE_ENABLE;                                                   /* write enable command */
 8015b3c:	2306      	movs	r3, #6
 8015b3e:	743b      	strb	r3, [r7, #16]
                    res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, NULL, 0);                      /* spi write read */
 8015b40:	f107 0110 	add.w	r1, r7, #16
 8015b44:	2300      	movs	r3, #0
 8015b46:	9300      	str	r3, [sp, #0]
 8015b48:	2300      	movs	r3, #0
 8015b4a:	2201      	movs	r2, #1
 8015b4c:	68f8      	ldr	r0, [r7, #12]
 8015b4e:	f7fd fcdb 	bl	8013508 <a_w25qxx_spi_write_read>
 8015b52:	4603      	mov	r3, r0
 8015b54:	74fb      	strb	r3, [r7, #19]
                    if (res != 0)                                                                           /* check result */
 8015b56:	7cfb      	ldrb	r3, [r7, #19]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d005      	beq.n	8015b68 <a_w25qxx_page_program+0x32c>
                    {
                        handle->debug_print("w25qxx: write enable failed.\n");                              /* write enable failed */
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	695b      	ldr	r3, [r3, #20]
 8015b60:	489d      	ldr	r0, [pc, #628]	; (8015dd8 <a_w25qxx_page_program+0x59c>)
 8015b62:	4798      	blx	r3
                       
                        return 1;                                                                           /* return error */
 8015b64:	2301      	movs	r3, #1
 8015b66:	e1e8      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                    }
                }
                handle->buf[0] = W25QXX_COMMAND_PAGE_PROGRAM;                                               /* page program command */
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	2202      	movs	r2, #2
 8015b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                handle->buf[1] = (addr >> 16) & 0xFF;                                                       /* 23 - 16 bits */
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	0c1b      	lsrs	r3, r3, #16
 8015b74:	b2da      	uxtb	r2, r3
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                handle->buf[2] = (addr >> 8) & 0xFF;                                                        /* 15 - 8  bits */
 8015b7c:	68bb      	ldr	r3, [r7, #8]
 8015b7e:	0a1b      	lsrs	r3, r3, #8
 8015b80:	b2da      	uxtb	r2, r3
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                handle->buf[3] = (addr >> 0) & 0xFF;                                                        /* 7 - 0 bits */
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	b2da      	uxtb	r2, r3
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                memcpy(&handle->buf[4], data, len);                                                         /* copy data */
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	3325      	adds	r3, #37	; 0x25
 8015b96:	887a      	ldrh	r2, [r7, #2]
 8015b98:	6879      	ldr	r1, [r7, #4]
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f010 fdbc 	bl	8026718 <memcpy>
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)handle->buf, 4 + len, NULL, 0);            /* spi write read */
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8015ba6:	887b      	ldrh	r3, [r7, #2]
 8015ba8:	3304      	adds	r3, #4
 8015baa:	461a      	mov	r2, r3
 8015bac:	2300      	movs	r3, #0
 8015bae:	9300      	str	r3, [sp, #0]
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	68f8      	ldr	r0, [r7, #12]
 8015bb4:	f7fd fca8 	bl	8013508 <a_w25qxx_spi_write_read>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8015bbc:	7cfb      	ldrb	r3, [r7, #19]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d04e      	beq.n	8015c60 <a_w25qxx_page_program+0x424>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	695b      	ldr	r3, [r3, #20]
 8015bc6:	4885      	ldr	r0, [pc, #532]	; (8015ddc <a_w25qxx_page_program+0x5a0>)
 8015bc8:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015bca:	2301      	movs	r3, #1
 8015bcc:	e1b5      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                }
            }
            else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE)
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	7f1b      	ldrb	r3, [r3, #28]
 8015bd2:	2b01      	cmp	r3, #1
 8015bd4:	d13e      	bne.n	8015c54 <a_w25qxx_page_program+0x418>
                     && (handle->type >= W25Q256))                                                          /* 4 address mode */
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	8b5b      	ldrh	r3, [r3, #26]
 8015bda:	f64e 7217 	movw	r2, #61207	; 0xef17
 8015bde:	4293      	cmp	r3, r2
 8015be0:	d938      	bls.n	8015c54 <a_w25qxx_page_program+0x418>
            {
                handle->buf[0] = W25QXX_COMMAND_PAGE_PROGRAM;                                               /* page program command */
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	2202      	movs	r2, #2
 8015be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                handle->buf[1] = (addr >> 24) & 0xFF;                                                       /* 31 - 24 bits */
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	0e1b      	lsrs	r3, r3, #24
 8015bee:	b2da      	uxtb	r2, r3
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                handle->buf[2] = (addr >> 16) & 0xFF;                                                       /* 23 - 16 bits */
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	0c1b      	lsrs	r3, r3, #16
 8015bfa:	b2da      	uxtb	r2, r3
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                handle->buf[3] = (addr >> 8) & 0xFF;                                                        /* 15 - 8  bits */
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	0a1b      	lsrs	r3, r3, #8
 8015c06:	b2da      	uxtb	r2, r3
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                handle->buf[4] = (addr >> 0) & 0xFF;                                                        /* 7 - 0 bits */
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	b2da      	uxtb	r2, r3
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                memcpy(&handle->buf[5], data, len);                                                         /* copy data */
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	3326      	adds	r3, #38	; 0x26
 8015c1c:	887a      	ldrh	r2, [r7, #2]
 8015c1e:	6879      	ldr	r1, [r7, #4]
 8015c20:	4618      	mov	r0, r3
 8015c22:	f010 fd79 	bl	8026718 <memcpy>
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)handle->buf, 5 + len, NULL, 0);            /* spi write read */
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8015c2c:	887b      	ldrh	r3, [r7, #2]
 8015c2e:	3305      	adds	r3, #5
 8015c30:	461a      	mov	r2, r3
 8015c32:	2300      	movs	r3, #0
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	2300      	movs	r3, #0
 8015c38:	68f8      	ldr	r0, [r7, #12]
 8015c3a:	f7fd fc65 	bl	8013508 <a_w25qxx_spi_write_read>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8015c42:	7cfb      	ldrb	r3, [r7, #19]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00b      	beq.n	8015c60 <a_w25qxx_page_program+0x424>
                {
                    handle->debug_print("w25qxx: page program failed.\n");                                  /* page program failed */
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	695b      	ldr	r3, [r3, #20]
 8015c4c:	4863      	ldr	r0, [pc, #396]	; (8015ddc <a_w25qxx_page_program+0x5a0>)
 8015c4e:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015c50:	2301      	movs	r3, #1
 8015c52:	e172      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                }
            }
            else
            {
                handle->debug_print("w25qxx: address mode is invalid.\n");                                  /* address mode is invalid */
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	695b      	ldr	r3, [r3, #20]
 8015c58:	4861      	ldr	r0, [pc, #388]	; (8015de0 <a_w25qxx_page_program+0x5a4>)
 8015c5a:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	e16c      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
            
            timeout = 3 * 100;                                                                              /* max 3 ms */
 8015c60:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8015c64:	617b      	str	r3, [r7, #20]
            while (timeout != 0)                                                                            /* check timeout */
 8015c66:	e022      	b.n	8015cae <a_w25qxx_page_program+0x472>
            {
                buf[0] = W25QXX_COMMAND_READ_STATUS_REG1;                                                   /* read status1 command */
 8015c68:	2305      	movs	r3, #5
 8015c6a:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_spi_write_read(handle, (uint8_t *)buf, 1, (uint8_t *)&status, 1);            /* spi write read */
 8015c6c:	f107 0312 	add.w	r3, r7, #18
 8015c70:	f107 0110 	add.w	r1, r7, #16
 8015c74:	2201      	movs	r2, #1
 8015c76:	9200      	str	r2, [sp, #0]
 8015c78:	2201      	movs	r2, #1
 8015c7a:	68f8      	ldr	r0, [r7, #12]
 8015c7c:	f7fd fc44 	bl	8013508 <a_w25qxx_spi_write_read>
 8015c80:	4603      	mov	r3, r0
 8015c82:	74fb      	strb	r3, [r7, #19]
                if (res != 0)                                                                               /* check result */
 8015c84:	7cfb      	ldrb	r3, [r7, #19]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d005      	beq.n	8015c96 <a_w25qxx_page_program+0x45a>
                {
                    handle->debug_print("w25qxx: get status1 failed.\n");                                   /* get status1 failed */
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	695b      	ldr	r3, [r3, #20]
 8015c8e:	4855      	ldr	r0, [pc, #340]	; (8015de4 <a_w25qxx_page_program+0x5a8>)
 8015c90:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015c92:	2301      	movs	r3, #1
 8015c94:	e151      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                }
                if ((status & 0x01) == 0x00)                                                                /* check status */
 8015c96:	7cbb      	ldrb	r3, [r7, #18]
 8015c98:	f003 0301 	and.w	r3, r3, #1
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d00a      	beq.n	8015cb6 <a_w25qxx_page_program+0x47a>
                {
                    break;                                                                                  /* break */
                }
                timeout--;                                                                                  /* timeout-- */
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	3b01      	subs	r3, #1
 8015ca4:	617b      	str	r3, [r7, #20]
                handle->delay_us(10);                                                                       /* delay 10 us */
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	691b      	ldr	r3, [r3, #16]
 8015caa:	200a      	movs	r0, #10
 8015cac:	4798      	blx	r3
            while (timeout != 0)                                                                            /* check timeout */
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d1d9      	bne.n	8015c68 <a_w25qxx_page_program+0x42c>
 8015cb4:	e000      	b.n	8015cb8 <a_w25qxx_page_program+0x47c>
                    break;                                                                                  /* break */
 8015cb6:	bf00      	nop
            }
            if (timeout == 0)
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f040 813c 	bne.w	8015f38 <a_w25qxx_page_program+0x6fc>
            {
                handle->debug_print("w25qxx: page program timeout.\n");                                     /* page program timeout */
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	695b      	ldr	r3, [r3, #20]
 8015cc4:	4848      	ldr	r0, [pc, #288]	; (8015de8 <a_w25qxx_page_program+0x5ac>)
 8015cc6:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015cc8:	2301      	movs	r3, #1
 8015cca:	e136      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
        }
    }
    else
    {
        res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8015ccc:	2300      	movs	r3, #0
 8015cce:	930a      	str	r3, [sp, #40]	; 0x28
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	9308      	str	r3, [sp, #32]
 8015cd8:	2300      	movs	r3, #0
 8015cda:	9307      	str	r3, [sp, #28]
 8015cdc:	2300      	movs	r3, #0
 8015cde:	9306      	str	r3, [sp, #24]
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	9305      	str	r3, [sp, #20]
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	9304      	str	r3, [sp, #16]
 8015ce8:	2300      	movs	r3, #0
 8015cea:	9303      	str	r3, [sp, #12]
 8015cec:	2300      	movs	r3, #0
 8015cee:	9302      	str	r3, [sp, #8]
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	9301      	str	r3, [sp, #4]
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	9300      	str	r3, [sp, #0]
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	2204      	movs	r2, #4
 8015cfc:	2106      	movs	r1, #6
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	f7fd fc2e 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015d04:	4603      	mov	r3, r0
 8015d06:	74fb      	strb	r3, [r7, #19]
                                       0x00000000, 0x00, 0x00,
                                       0x00000000, 0x00, 0x00,
                                       0x00, NULL, 0x00,
                                       NULL, 0x00, 0x00);                                                   /* qspi write read */
        if (res != 0)                                                                                       /* check result */
 8015d08:	7cfb      	ldrb	r3, [r7, #19]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d005      	beq.n	8015d1a <a_w25qxx_page_program+0x4de>
        {
            handle->debug_print("w25qxx: write enable failed.\n");                                          /* write enable failed */
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	695b      	ldr	r3, [r3, #20]
 8015d12:	4831      	ldr	r0, [pc, #196]	; (8015dd8 <a_w25qxx_page_program+0x59c>)
 8015d14:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8015d16:	2301      	movs	r3, #1
 8015d18:	e10f      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
        }
        if (handle->address_mode == W25QXX_ADDRESS_MODE_3_BYTE)                                             /* 3 address mode */
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	7f1b      	ldrb	r3, [r3, #28]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	f040 808d 	bne.w	8015e3e <a_w25qxx_page_program+0x602>
        {
            if (handle->type >= W25Q256)                                                                    /* >128Mb */
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	8b5b      	ldrh	r3, [r3, #26]
 8015d28:	f64e 7217 	movw	r2, #61207	; 0xef17
 8015d2c:	4293      	cmp	r3, r2
 8015d2e:	d95f      	bls.n	8015df0 <a_w25qxx_page_program+0x5b4>
            {
                buf[0] = (addr >> 24) & 0xFF;                                                               /* 31 - 24 bits */
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	0e1b      	lsrs	r3, r3, #24
 8015d34:	b2db      	uxtb	r3, r3
 8015d36:	743b      	strb	r3, [r7, #16]
                res = a_w25qxx_qspi_write_read(handle, 0xC5, 4,
 8015d38:	2304      	movs	r3, #4
 8015d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8015d40:	2300      	movs	r3, #0
 8015d42:	9308      	str	r3, [sp, #32]
 8015d44:	2301      	movs	r3, #1
 8015d46:	9307      	str	r3, [sp, #28]
 8015d48:	f107 0310 	add.w	r3, r7, #16
 8015d4c:	9306      	str	r3, [sp, #24]
 8015d4e:	2300      	movs	r3, #0
 8015d50:	9305      	str	r3, [sp, #20]
 8015d52:	2300      	movs	r3, #0
 8015d54:	9304      	str	r3, [sp, #16]
 8015d56:	2300      	movs	r3, #0
 8015d58:	9303      	str	r3, [sp, #12]
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	9302      	str	r3, [sp, #8]
 8015d5e:	2300      	movs	r3, #0
 8015d60:	9301      	str	r3, [sp, #4]
 8015d62:	2300      	movs	r3, #0
 8015d64:	9300      	str	r3, [sp, #0]
 8015d66:	2300      	movs	r3, #0
 8015d68:	2204      	movs	r2, #4
 8015d6a:	21c5      	movs	r1, #197	; 0xc5
 8015d6c:	68f8      	ldr	r0, [r7, #12]
 8015d6e:	f7fd fbf7 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015d72:	4603      	mov	r3, r0
 8015d74:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0, (uint8_t *)buf, 0x01,
                                               NULL, 0x00, 4);                                              /* spi write read */
                if (res != 0)                                                                               /* check result */
 8015d76:	7cfb      	ldrb	r3, [r7, #19]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d005      	beq.n	8015d88 <a_w25qxx_page_program+0x54c>
                {
                    handle->debug_print("w25qxx: write extended addr register failed.\n");                  /* write extended addr register failed */
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	695b      	ldr	r3, [r3, #20]
 8015d80:	481a      	ldr	r0, [pc, #104]	; (8015dec <a_w25qxx_page_program+0x5b0>)
 8015d82:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015d84:	2301      	movs	r3, #1
 8015d86:	e0d8      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
                }
                res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_WRITE_ENABLE, 4,
 8015d88:	2300      	movs	r3, #0
 8015d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8015d90:	2300      	movs	r3, #0
 8015d92:	9308      	str	r3, [sp, #32]
 8015d94:	2300      	movs	r3, #0
 8015d96:	9307      	str	r3, [sp, #28]
 8015d98:	2300      	movs	r3, #0
 8015d9a:	9306      	str	r3, [sp, #24]
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	9305      	str	r3, [sp, #20]
 8015da0:	2300      	movs	r3, #0
 8015da2:	9304      	str	r3, [sp, #16]
 8015da4:	2300      	movs	r3, #0
 8015da6:	9303      	str	r3, [sp, #12]
 8015da8:	2300      	movs	r3, #0
 8015daa:	9302      	str	r3, [sp, #8]
 8015dac:	2300      	movs	r3, #0
 8015dae:	9301      	str	r3, [sp, #4]
 8015db0:	2300      	movs	r3, #0
 8015db2:	9300      	str	r3, [sp, #0]
 8015db4:	2300      	movs	r3, #0
 8015db6:	2204      	movs	r2, #4
 8015db8:	2106      	movs	r1, #6
 8015dba:	68f8      	ldr	r0, [r7, #12]
 8015dbc:	f7fd fbd0 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	74fb      	strb	r3, [r7, #19]
                                               0x00000000, 0x00, 0x00,
                                               0x00000000, 0x00, 0x00,
                                               0x00, NULL, 0x00,
                                               NULL, 0x00, 0x00);                                           /* qspi write read */
                if (res != 0)                                                                               /* check result */
 8015dc4:	7cfb      	ldrb	r3, [r7, #19]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d012      	beq.n	8015df0 <a_w25qxx_page_program+0x5b4>
                {
                    handle->debug_print("w25qxx: write enable failed.\n");                                  /* write enable failed */
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	695b      	ldr	r3, [r3, #20]
 8015dce:	4802      	ldr	r0, [pc, #8]	; (8015dd8 <a_w25qxx_page_program+0x59c>)
 8015dd0:	4798      	blx	r3
                   
                    return 1;                                                                               /* return error */
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	e0b1      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
 8015dd6:	bf00      	nop
 8015dd8:	0802a8d0 	.word	0x0802a8d0
 8015ddc:	0802b090 	.word	0x0802b090
 8015de0:	0802abdc 	.word	0x0802abdc
 8015de4:	0802a934 	.word	0x0802a934
 8015de8:	0802b0b0 	.word	0x0802b0b0
 8015dec:	0802aecc 	.word	0x0802aecc
                }
            }
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 4,
 8015df0:	887b      	ldrh	r3, [r7, #2]
 8015df2:	2204      	movs	r2, #4
 8015df4:	920a      	str	r2, [sp, #40]	; 0x28
 8015df6:	2200      	movs	r2, #0
 8015df8:	9209      	str	r2, [sp, #36]	; 0x24
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	9208      	str	r2, [sp, #32]
 8015dfe:	9307      	str	r3, [sp, #28]
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	9306      	str	r3, [sp, #24]
 8015e04:	2300      	movs	r3, #0
 8015e06:	9305      	str	r3, [sp, #20]
 8015e08:	2300      	movs	r3, #0
 8015e0a:	9304      	str	r3, [sp, #16]
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	9303      	str	r3, [sp, #12]
 8015e10:	2300      	movs	r3, #0
 8015e12:	9302      	str	r3, [sp, #8]
 8015e14:	2303      	movs	r3, #3
 8015e16:	9301      	str	r3, [sp, #4]
 8015e18:	2304      	movs	r3, #4
 8015e1a:	9300      	str	r3, [sp, #0]
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	2204      	movs	r2, #4
 8015e20:	2102      	movs	r1, #2
 8015e22:	68f8      	ldr	r0, [r7, #12]
 8015e24:	f7fd fb9c 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 3,
                                           0x00000000, 0x00, 0x00,
                                           0, data, len,
                                           NULL, 0x00, 4);                                                  /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8015e2c:	7cfb      	ldrb	r3, [r7, #19]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d03c      	beq.n	8015eac <a_w25qxx_page_program+0x670>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	695b      	ldr	r3, [r3, #20]
 8015e36:	4843      	ldr	r0, [pc, #268]	; (8015f44 <a_w25qxx_page_program+0x708>)
 8015e38:	4798      	blx	r3
               
                  return 1;                                                                                 /* return error */
 8015e3a:	2301      	movs	r3, #1
 8015e3c:	e07d      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
        }
        else if ((handle->address_mode == W25QXX_ADDRESS_MODE_4_BYTE) && (handle->type >= W25Q256))
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	7f1b      	ldrb	r3, [r3, #28]
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d12c      	bne.n	8015ea0 <a_w25qxx_page_program+0x664>
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	8b5b      	ldrh	r3, [r3, #26]
 8015e4a:	f64e 7217 	movw	r2, #61207	; 0xef17
 8015e4e:	4293      	cmp	r3, r2
 8015e50:	d926      	bls.n	8015ea0 <a_w25qxx_page_program+0x664>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_PAGE_PROGRAM, 4,
 8015e52:	887b      	ldrh	r3, [r7, #2]
 8015e54:	2204      	movs	r2, #4
 8015e56:	920a      	str	r2, [sp, #40]	; 0x28
 8015e58:	2200      	movs	r2, #0
 8015e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	9208      	str	r2, [sp, #32]
 8015e60:	9307      	str	r3, [sp, #28]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	9306      	str	r3, [sp, #24]
 8015e66:	2300      	movs	r3, #0
 8015e68:	9305      	str	r3, [sp, #20]
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	9304      	str	r3, [sp, #16]
 8015e6e:	2300      	movs	r3, #0
 8015e70:	9303      	str	r3, [sp, #12]
 8015e72:	2300      	movs	r3, #0
 8015e74:	9302      	str	r3, [sp, #8]
 8015e76:	2304      	movs	r3, #4
 8015e78:	9301      	str	r3, [sp, #4]
 8015e7a:	2304      	movs	r3, #4
 8015e7c:	9300      	str	r3, [sp, #0]
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	2204      	movs	r2, #4
 8015e82:	2102      	movs	r1, #2
 8015e84:	68f8      	ldr	r0, [r7, #12]
 8015e86:	f7fd fb6b 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	74fb      	strb	r3, [r7, #19]
                                           addr, 4, 4,
                                           0x00000000, 0x00, 0x00,
                                           0, data, len,
                                           NULL, 0x00, 4);                                                  /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8015e8e:	7cfb      	ldrb	r3, [r7, #19]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d00b      	beq.n	8015eac <a_w25qxx_page_program+0x670>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	695b      	ldr	r3, [r3, #20]
 8015e98:	482a      	ldr	r0, [pc, #168]	; (8015f44 <a_w25qxx_page_program+0x708>)
 8015e9a:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	e04c      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
        }
        else
        {
            handle->debug_print("w25qxx: address mode is invalid.\n");                                      /* address mode is invalid */
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	695b      	ldr	r3, [r3, #20]
 8015ea4:	4828      	ldr	r0, [pc, #160]	; (8015f48 <a_w25qxx_page_program+0x70c>)
 8015ea6:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8015ea8:	2301      	movs	r3, #1
 8015eaa:	e046      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
        }
        
        timeout = 3 * 100;                                                                                  /* max 3 ms */
 8015eac:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8015eb0:	617b      	str	r3, [r7, #20]
        while (timeout != 0)                                                                                /* check timeout */
 8015eb2:	e033      	b.n	8015f1c <a_w25qxx_page_program+0x6e0>
        {
            res = a_w25qxx_qspi_write_read(handle, W25QXX_COMMAND_READ_STATUS_REG1, 4,
 8015eb4:	2304      	movs	r3, #4
 8015eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8015eb8:	2301      	movs	r3, #1
 8015eba:	9309      	str	r3, [sp, #36]	; 0x24
 8015ebc:	f107 0312 	add.w	r3, r7, #18
 8015ec0:	9308      	str	r3, [sp, #32]
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	9307      	str	r3, [sp, #28]
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	9306      	str	r3, [sp, #24]
 8015eca:	2300      	movs	r3, #0
 8015ecc:	9305      	str	r3, [sp, #20]
 8015ece:	2300      	movs	r3, #0
 8015ed0:	9304      	str	r3, [sp, #16]
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	9303      	str	r3, [sp, #12]
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	9302      	str	r3, [sp, #8]
 8015eda:	2300      	movs	r3, #0
 8015edc:	9301      	str	r3, [sp, #4]
 8015ede:	2300      	movs	r3, #0
 8015ee0:	9300      	str	r3, [sp, #0]
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	2204      	movs	r2, #4
 8015ee6:	2105      	movs	r1, #5
 8015ee8:	68f8      	ldr	r0, [r7, #12]
 8015eea:	f7fd fb39 	bl	8013560 <a_w25qxx_qspi_write_read>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	74fb      	strb	r3, [r7, #19]
                                           0x00000000, 0x00, 0x00,
                                           0x00000000, 0x00, 0x00,
                                           0, NULL, 0,
                                          (uint8_t *)&status, 1, 4);                                        /* spi write read */
            if (res != 0)                                                                                   /* check result */
 8015ef2:	7cfb      	ldrb	r3, [r7, #19]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d005      	beq.n	8015f04 <a_w25qxx_page_program+0x6c8>
            {
                handle->debug_print("w25qxx: page program failed.\n");                                      /* page program failed */
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	695b      	ldr	r3, [r3, #20]
 8015efc:	4811      	ldr	r0, [pc, #68]	; (8015f44 <a_w25qxx_page_program+0x708>)
 8015efe:	4798      	blx	r3
               
                return 1;                                                                                   /* return error */
 8015f00:	2301      	movs	r3, #1
 8015f02:	e01a      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
            }
            if ((status & 0x01) == 0x00)                                                                    /* check status */
 8015f04:	7cbb      	ldrb	r3, [r7, #18]
 8015f06:	f003 0301 	and.w	r3, r3, #1
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d00a      	beq.n	8015f24 <a_w25qxx_page_program+0x6e8>
            {
                break;                                                                                      /* break */
            }
            timeout--;                                                                                      /* timeout-- */
 8015f0e:	697b      	ldr	r3, [r7, #20]
 8015f10:	3b01      	subs	r3, #1
 8015f12:	617b      	str	r3, [r7, #20]
            handle->delay_us(10);                                                                           /* delay 10 us */
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	691b      	ldr	r3, [r3, #16]
 8015f18:	200a      	movs	r0, #10
 8015f1a:	4798      	blx	r3
        while (timeout != 0)                                                                                /* check timeout */
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d1c8      	bne.n	8015eb4 <a_w25qxx_page_program+0x678>
 8015f22:	e000      	b.n	8015f26 <a_w25qxx_page_program+0x6ea>
                break;                                                                                      /* break */
 8015f24:	bf00      	nop
        }
        if (timeout == 0)
 8015f26:	697b      	ldr	r3, [r7, #20]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d105      	bne.n	8015f38 <a_w25qxx_page_program+0x6fc>
        {
            handle->debug_print("w25qxx: page program timeout.\n");                                         /* page program timeout */
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	695b      	ldr	r3, [r3, #20]
 8015f30:	4806      	ldr	r0, [pc, #24]	; (8015f4c <a_w25qxx_page_program+0x710>)
 8015f32:	4798      	blx	r3
           
            return 1;                                                                                       /* return error */
 8015f34:	2301      	movs	r3, #1
 8015f36:	e000      	b.n	8015f3a <a_w25qxx_page_program+0x6fe>
        }
    }
    
    return 0;                                                                                               /* success return 0 */
 8015f38:	2300      	movs	r3, #0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3718      	adds	r7, #24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	0802b090 	.word	0x0802b090
 8015f48:	0802abdc 	.word	0x0802abdc
 8015f4c:	0802b0b0 	.word	0x0802b0b0

08015f50 <a_w25qxx_write_no_check>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_w25qxx_write_no_check(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b086      	sub	sp, #24
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	607a      	str	r2, [r7, #4]
 8015f5c:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint16_t page_remain;
    
    page_remain = 256 - addr % 256;                                         /* get remain */
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	b29b      	uxth	r3, r3
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	b29b      	uxth	r3, r3
 8015f66:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015f6a:	82fb      	strh	r3, [r7, #22]
    if (len <= page_remain)                                                 /* check length */
 8015f6c:	8afb      	ldrh	r3, [r7, #22]
 8015f6e:	683a      	ldr	r2, [r7, #0]
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d801      	bhi.n	8015f78 <a_w25qxx_write_no_check+0x28>
    {
        page_remain = (uint16_t)len;                                        /* page remain */
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	82fb      	strh	r3, [r7, #22]
    }
    while( 1)                                                               /* loop */
    { 
        res = a_w25qxx_page_program(handle, addr, data, page_remain);       /* page program */
 8015f78:	8afb      	ldrh	r3, [r7, #22]
 8015f7a:	687a      	ldr	r2, [r7, #4]
 8015f7c:	68b9      	ldr	r1, [r7, #8]
 8015f7e:	68f8      	ldr	r0, [r7, #12]
 8015f80:	f7ff fc5c 	bl	801583c <a_w25qxx_page_program>
 8015f84:	4603      	mov	r3, r0
 8015f86:	757b      	strb	r3, [r7, #21]
        if (res != 0)
 8015f88:	7d7b      	ldrb	r3, [r7, #21]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d005      	beq.n	8015f9a <a_w25qxx_write_no_check+0x4a>
        {
            handle->debug_print("w25qxx: page program failed.\n");          /* page program failed */
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	695b      	ldr	r3, [r3, #20]
 8015f92:	4812      	ldr	r0, [pc, #72]	; (8015fdc <a_w25qxx_write_no_check+0x8c>)
 8015f94:	4798      	blx	r3
           
            return 1;                                                       /* return error */
 8015f96:	2301      	movs	r3, #1
 8015f98:	e01c      	b.n	8015fd4 <a_w25qxx_write_no_check+0x84>
        }
        if (len == page_remain)                                             /* check length */
 8015f9a:	8afb      	ldrh	r3, [r7, #22]
 8015f9c:	683a      	ldr	r2, [r7, #0]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d016      	beq.n	8015fd0 <a_w25qxx_write_no_check+0x80>
        {
            break;                                                          /* break loop */
        }
        else
        {
            data += page_remain;                                            /* data + page_remain */
 8015fa2:	8afb      	ldrh	r3, [r7, #22]
 8015fa4:	687a      	ldr	r2, [r7, #4]
 8015fa6:	4413      	add	r3, r2
 8015fa8:	607b      	str	r3, [r7, #4]
            addr += page_remain;                                            /* address + page_remain */
 8015faa:	8afb      	ldrh	r3, [r7, #22]
 8015fac:	68ba      	ldr	r2, [r7, #8]
 8015fae:	4413      	add	r3, r2
 8015fb0:	60bb      	str	r3, [r7, #8]
            len -= page_remain;                                             /* length - page_remain */
 8015fb2:	8afb      	ldrh	r3, [r7, #22]
 8015fb4:	683a      	ldr	r2, [r7, #0]
 8015fb6:	1ad3      	subs	r3, r2, r3
 8015fb8:	603b      	str	r3, [r7, #0]
            if (len > 256)                                                  /* check length */
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fc0:	d903      	bls.n	8015fca <a_w25qxx_write_no_check+0x7a>
            {
                page_remain = 256;                                          /* set page remain */
 8015fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015fc6:	82fb      	strh	r3, [r7, #22]
 8015fc8:	e7d6      	b.n	8015f78 <a_w25qxx_write_no_check+0x28>
            }
            else
            {
                page_remain = (uint16_t)len;                                /* set length */
 8015fca:	683b      	ldr	r3, [r7, #0]
 8015fcc:	82fb      	strh	r3, [r7, #22]
        res = a_w25qxx_page_program(handle, addr, data, page_remain);       /* page program */
 8015fce:	e7d3      	b.n	8015f78 <a_w25qxx_write_no_check+0x28>
            break;                                                          /* break loop */
 8015fd0:	bf00      	nop
            }
        }
    }
    
    return 0;                                                               /* success return 0 */
 8015fd2:	2300      	movs	r3, #0
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3718      	adds	r7, #24
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	0802b090 	.word	0x0802b090

08015fe0 <w25qxx_write>:
 *            - 4 read failed
 *            - 5 erase sector failed
 * @note      none
 */
uint8_t w25qxx_write(w25qxx_handle_t *handle, uint32_t addr, uint8_t *data, uint32_t len)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b08a      	sub	sp, #40	; 0x28
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	60b9      	str	r1, [r7, #8]
 8015fea:	607a      	str	r2, [r7, #4]
 8015fec:	603b      	str	r3, [r7, #0]
    uint32_t sec_pos;
    uint32_t sec_off;
    uint32_t sec_remain;
    uint32_t i;
    
    if (handle == NULL)                                                                        /* check handle */
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d101      	bne.n	8015ff8 <w25qxx_write+0x18>
    {
        return 2;                                                                              /* return error */
 8015ff4:	2302      	movs	r3, #2
 8015ff6:	e0b3      	b.n	8016160 <w25qxx_write+0x180>
    }   
    if (handle->inited != 1)                                                                   /* check handle initialization */
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	7e1b      	ldrb	r3, [r3, #24]
 8015ffc:	2b01      	cmp	r3, #1
 8015ffe:	d001      	beq.n	8016004 <w25qxx_write+0x24>
    {
        return 3;                                                                              /* return error */
 8016000:	2303      	movs	r3, #3
 8016002:	e0ad      	b.n	8016160 <w25qxx_write+0x180>
    }

    sec_pos = addr / 4096;                                                                     /* get sector position */
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	0b1b      	lsrs	r3, r3, #12
 8016008:	627b      	str	r3, [r7, #36]	; 0x24
    sec_off = addr % 4096;                                                                     /* get sector offset */
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016010:	623b      	str	r3, [r7, #32]
    sec_remain = 4096 - sec_off;                                                               /* get sector remain */
 8016012:	6a3b      	ldr	r3, [r7, #32]
 8016014:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8016018:	61fb      	str	r3, [r7, #28]
    if (len <= sec_remain)                                                                     /* check length */
 801601a:	683a      	ldr	r2, [r7, #0]
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	429a      	cmp	r2, r3
 8016020:	d801      	bhi.n	8016026 <w25qxx_write+0x46>
    {
        sec_remain = len;                                                                      /* set remain */
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	61fb      	str	r3, [r7, #28]
    }
    while(1)                                                                                   /* loop */
    {    
        res = a_w25qxx_read(handle, sec_pos * 4096, handle->buf_4k, 4096);                     /* read 4k data */
 8016026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016028:	0319      	lsls	r1, r3, #12
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	f203 1227 	addw	r2, r3, #295	; 0x127
 8016030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f7fe fe63 	bl	8014d00 <a_w25qxx_read>
 801603a:	4603      	mov	r3, r0
 801603c:	75fb      	strb	r3, [r7, #23]
        if (res != 0)
 801603e:	7dfb      	ldrb	r3, [r7, #23]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d005      	beq.n	8016050 <w25qxx_write+0x70>
        {
            handle->debug_print("w25qxx: read failed.\n");                                     /* read failed */
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	695b      	ldr	r3, [r3, #20]
 8016048:	4847      	ldr	r0, [pc, #284]	; (8016168 <w25qxx_write+0x188>)
 801604a:	4798      	blx	r3
           
            return 4;                                                                          /* return error */
 801604c:	2304      	movs	r3, #4
 801604e:	e087      	b.n	8016160 <w25qxx_write+0x180>
        }
        for (i = 0; i< sec_remain; i++)                                                        /* sec_remain length */
 8016050:	2300      	movs	r3, #0
 8016052:	61bb      	str	r3, [r7, #24]
 8016054:	e00b      	b.n	801606e <w25qxx_write+0x8e>
        {
            if (handle->buf_4k[sec_off + i] != 0xFF)                                           /* check 0xFF */
 8016056:	6a3a      	ldr	r2, [r7, #32]
 8016058:	69bb      	ldr	r3, [r7, #24]
 801605a:	4413      	add	r3, r2
 801605c:	68fa      	ldr	r2, [r7, #12]
 801605e:	4413      	add	r3, r2
 8016060:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8016064:	2bff      	cmp	r3, #255	; 0xff
 8016066:	d107      	bne.n	8016078 <w25qxx_write+0x98>
        for (i = 0; i< sec_remain; i++)                                                        /* sec_remain length */
 8016068:	69bb      	ldr	r3, [r7, #24]
 801606a:	3301      	adds	r3, #1
 801606c:	61bb      	str	r3, [r7, #24]
 801606e:	69ba      	ldr	r2, [r7, #24]
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	429a      	cmp	r2, r3
 8016074:	d3ef      	bcc.n	8016056 <w25qxx_write+0x76>
 8016076:	e000      	b.n	801607a <w25qxx_write+0x9a>
            {
                break;                                                                         /* break loop */
 8016078:	bf00      	nop
            }
        }
        if (i < sec_remain)                                                                    /* not all is 0xFF */
 801607a:	69ba      	ldr	r2, [r7, #24]
 801607c:	69fb      	ldr	r3, [r7, #28]
 801607e:	429a      	cmp	r2, r3
 8016080:	d23b      	bcs.n	80160fa <w25qxx_write+0x11a>
        {
            res = a_w25qxx_erase_sector(handle, sec_pos * 4096);                               /* erase sector */
 8016082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016084:	031b      	lsls	r3, r3, #12
 8016086:	4619      	mov	r1, r3
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	f7ff f873 	bl	8015174 <a_w25qxx_erase_sector>
 801608e:	4603      	mov	r3, r0
 8016090:	75fb      	strb	r3, [r7, #23]
            if (res != 0)
 8016092:	7dfb      	ldrb	r3, [r7, #23]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d005      	beq.n	80160a4 <w25qxx_write+0xc4>
            {
                handle->debug_print("w25qxx: erase sector failed.\n");                         /* erase sector failed */
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	695b      	ldr	r3, [r3, #20]
 801609c:	4833      	ldr	r0, [pc, #204]	; (801616c <w25qxx_write+0x18c>)
 801609e:	4798      	blx	r3
               
                return 5;                                                                      /* return error */
 80160a0:	2305      	movs	r3, #5
 80160a2:	e05d      	b.n	8016160 <w25qxx_write+0x180>
            }
            for (i = 0; i<sec_remain; i++)                                                     /* sec_remain length */
 80160a4:	2300      	movs	r3, #0
 80160a6:	61bb      	str	r3, [r7, #24]
 80160a8:	e00e      	b.n	80160c8 <w25qxx_write+0xe8>
            {
                handle->buf_4k[i + sec_off] = data[i];                                         /* copy data */
 80160aa:	687a      	ldr	r2, [r7, #4]
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	441a      	add	r2, r3
 80160b0:	69b9      	ldr	r1, [r7, #24]
 80160b2:	6a3b      	ldr	r3, [r7, #32]
 80160b4:	440b      	add	r3, r1
 80160b6:	7811      	ldrb	r1, [r2, #0]
 80160b8:	68fa      	ldr	r2, [r7, #12]
 80160ba:	4413      	add	r3, r2
 80160bc:	460a      	mov	r2, r1
 80160be:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
            for (i = 0; i<sec_remain; i++)                                                     /* sec_remain length */
 80160c2:	69bb      	ldr	r3, [r7, #24]
 80160c4:	3301      	adds	r3, #1
 80160c6:	61bb      	str	r3, [r7, #24]
 80160c8:	69ba      	ldr	r2, [r7, #24]
 80160ca:	69fb      	ldr	r3, [r7, #28]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d3ec      	bcc.n	80160aa <w25qxx_write+0xca>
            }
            res = a_w25qxx_write_no_check(handle, sec_pos * 4096, handle->buf_4k, 4096);       /* write data no check */
 80160d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160d2:	0319      	lsls	r1, r3, #12
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f203 1227 	addw	r2, r3, #295	; 0x127
 80160da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80160de:	68f8      	ldr	r0, [r7, #12]
 80160e0:	f7ff ff36 	bl	8015f50 <a_w25qxx_write_no_check>
 80160e4:	4603      	mov	r3, r0
 80160e6:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                      /* check result */
 80160e8:	7dfb      	ldrb	r3, [r7, #23]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d016      	beq.n	801611c <w25qxx_write+0x13c>
            {
                handle->debug_print("w25qxx: write failed.\n");                                /* write failed */
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	695b      	ldr	r3, [r3, #20]
 80160f2:	481f      	ldr	r0, [pc, #124]	; (8016170 <w25qxx_write+0x190>)
 80160f4:	4798      	blx	r3
               
                return 1;                                                                      /* return error */
 80160f6:	2301      	movs	r3, #1
 80160f8:	e032      	b.n	8016160 <w25qxx_write+0x180>
            }
        }
        else
        {
            res = a_w25qxx_write_no_check(handle, addr, data, sec_remain);                     /* write data */
 80160fa:	69fb      	ldr	r3, [r7, #28]
 80160fc:	687a      	ldr	r2, [r7, #4]
 80160fe:	68b9      	ldr	r1, [r7, #8]
 8016100:	68f8      	ldr	r0, [r7, #12]
 8016102:	f7ff ff25 	bl	8015f50 <a_w25qxx_write_no_check>
 8016106:	4603      	mov	r3, r0
 8016108:	75fb      	strb	r3, [r7, #23]
            if (res != 0)                                                                      /* check result */
 801610a:	7dfb      	ldrb	r3, [r7, #23]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d005      	beq.n	801611c <w25qxx_write+0x13c>
            {
                handle->debug_print("w25qxx: write failed.\n");                                /* write failed */
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	695b      	ldr	r3, [r3, #20]
 8016114:	4816      	ldr	r0, [pc, #88]	; (8016170 <w25qxx_write+0x190>)
 8016116:	4798      	blx	r3
               
                return 1;                                                                      /* return error */
 8016118:	2301      	movs	r3, #1
 801611a:	e021      	b.n	8016160 <w25qxx_write+0x180>
            }
        }    
        if (len == sec_remain)                                                                 /* check length length*/
 801611c:	683a      	ldr	r2, [r7, #0]
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	429a      	cmp	r2, r3
 8016122:	d01b      	beq.n	801615c <w25qxx_write+0x17c>
        {
            break;                                                                             /* break loop */
        }
        else
        {
            sec_pos++;                                                                         /* sector++ */
 8016124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016126:	3301      	adds	r3, #1
 8016128:	627b      	str	r3, [r7, #36]	; 0x24
            sec_off = 0;                                                                       /* set offset */
 801612a:	2300      	movs	r3, #0
 801612c:	623b      	str	r3, [r7, #32]
            data += sec_remain;                                                                /* data + remain */
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	69fb      	ldr	r3, [r7, #28]
 8016132:	4413      	add	r3, r2
 8016134:	607b      	str	r3, [r7, #4]
            addr += sec_remain;                                                                /* addr + remain */
 8016136:	68ba      	ldr	r2, [r7, #8]
 8016138:	69fb      	ldr	r3, [r7, #28]
 801613a:	4413      	add	r3, r2
 801613c:	60bb      	str	r3, [r7, #8]
            len -= sec_remain;                                                                 /* len - remain */
 801613e:	683a      	ldr	r2, [r7, #0]
 8016140:	69fb      	ldr	r3, [r7, #28]
 8016142:	1ad3      	subs	r3, r2, r3
 8016144:	603b      	str	r3, [r7, #0]
            if (len > 4096)                                                                    /* check length */
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801614c:	d903      	bls.n	8016156 <w25qxx_write+0x176>
            {
                sec_remain = 4096;                                                             /* set 4096 */
 801614e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016152:	61fb      	str	r3, [r7, #28]
 8016154:	e767      	b.n	8016026 <w25qxx_write+0x46>
            }
            else
            {
                sec_remain = len;                                                              /* set length */
 8016156:	683b      	ldr	r3, [r7, #0]
 8016158:	61fb      	str	r3, [r7, #28]
        res = a_w25qxx_read(handle, sec_pos * 4096, handle->buf_4k, 4096);                     /* read 4k data */
 801615a:	e764      	b.n	8016026 <w25qxx_write+0x46>
            break;                                                                             /* break loop */
 801615c:	bf00      	nop
            }
        }
    }
    
    return 0;                                                                                  /* success return 0 */
 801615e:	2300      	movs	r3, #0
}
 8016160:	4618      	mov	r0, r3
 8016162:	3728      	adds	r7, #40	; 0x28
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}
 8016168:	0802b450 	.word	0x0802b450
 801616c:	0802b468 	.word	0x0802b468
 8016170:	0802b488 	.word	0x0802b488

08016174 <Sock_ClearAll>:
	memset(sock->txBuff, 	0U, sizeof(sock->txBuff));		// set the buffer zero

}


void Sock_ClearAll(Socket *sock){
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
	sock->id				= 0xFF;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	22ff      	movs	r2, #255	; 0xff
 8016180:	70da      	strb	r2, [r3, #3]
	sock->srcPort			= 0U;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2200      	movs	r2, #0
 8016186:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 801618a:	2200      	movs	r2, #0
 801618c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	sock->destPort 			= 0U;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	2200      	movs	r2, #0
 8016194:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8016198:	2200      	movs	r2, #0
 801619a:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
	sock->flag				= 0U;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	2200      	movs	r2, #0
 80161a2:	745a      	strb	r2, [r3, #17]
	sock->protocol			= 0U;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2200      	movs	r2, #0
 80161a8:	741a      	strb	r2, [r3, #16]
	sock->status			= 0U;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2200      	movs	r2, #0
 80161ae:	701a      	strb	r2, [r3, #0]
	sock->kpAlvTime			= 0U;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	2200      	movs	r2, #0
 80161b4:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 80161b8:	2200      	movs	r2, #0
 80161ba:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	sock->rxBuffSize 		= 0U;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	2200      	movs	r2, #0
 80161c2:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 80161c6:	2200      	movs	r2, #0
 80161c8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
	sock->txBuffSize		= 0U;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2200      	movs	r2, #0
 80161d0:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
 80161d4:	2200      	movs	r2, #0
 80161d6:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	sock->intr.val 			= 0;
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	2200      	movs	r2, #0
 80161de:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
	sock->isConnected 		= 0;
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2200      	movs	r2, #0
 80161e6:	711a      	strb	r2, [r3, #4]
	sock->rqstType 			= 0;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2200      	movs	r2, #0
 80161ec:	749a      	strb	r2, [r3, #18]
	memset(sock->mac, 		0U, sizeof(sock->mac));
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	330a      	adds	r3, #10
 80161f2:	2206      	movs	r2, #6
 80161f4:	2100      	movs	r1, #0
 80161f6:	4618      	mov	r0, r3
 80161f8:	f010 fa9c 	bl	8026734 <memset>
	memset(sock->destIP, 		0U, sizeof(sock->destIP));
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	3306      	adds	r3, #6
 8016200:	2204      	movs	r2, #4
 8016202:	2100      	movs	r1, #0
 8016204:	4618      	mov	r0, r3
 8016206:	f010 fa95 	bl	8026734 <memset>
	memset(sock->rxBuff, 	0U, sizeof(sock->rxBuff));		// set the buffer zero
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	3313      	adds	r3, #19
 801620e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016212:	2100      	movs	r1, #0
 8016214:	4618      	mov	r0, r3
 8016216:	f010 fa8d 	bl	8026734 <memset>
	memset(sock->txBuff, 	0U, sizeof(sock->txBuff));		// set the buffer zero
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f203 137b 	addw	r3, r3, #379	; 0x17b
 8016220:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016224:	2100      	movs	r1, #0
 8016226:	4618      	mov	r0, r3
 8016228:	f010 fa84 	bl	8026734 <memset>
}
 801622c:	bf00      	nop
 801622e:	3708      	adds	r7, #8
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}

08016234 <W5500_SetMaxSegmentSize>:
}

/*
 * Set max segment size for a socket
 * */
void W5500_SetMaxSegmentSize(uint8_t sockId, uint16_t size){
 8016234:	b580      	push	{r7, lr}
 8016236:	b082      	sub	sp, #8
 8016238:	af00      	add	r7, sp, #0
 801623a:	4603      	mov	r3, r0
 801623c:	460a      	mov	r2, r1
 801623e:	71fb      	strb	r3, [r7, #7]
 8016240:	4613      	mov	r3, r2
 8016242:	80bb      	strh	r3, [r7, #4]
	setSn_MSSR(sockId, size);
 8016244:	79fb      	ldrb	r3, [r7, #7]
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	3301      	adds	r3, #1
 801624a:	00db      	lsls	r3, r3, #3
 801624c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8016250:	461a      	mov	r2, r3
 8016252:	88bb      	ldrh	r3, [r7, #4]
 8016254:	0a1b      	lsrs	r3, r3, #8
 8016256:	b29b      	uxth	r3, r3
 8016258:	b2db      	uxtb	r3, r3
 801625a:	4619      	mov	r1, r3
 801625c:	4610      	mov	r0, r2
 801625e:	f000 f849 	bl	80162f4 <WIZCHIP_WRITE>
 8016262:	79fb      	ldrb	r3, [r7, #7]
 8016264:	009b      	lsls	r3, r3, #2
 8016266:	3301      	adds	r3, #1
 8016268:	00db      	lsls	r3, r3, #3
 801626a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 801626e:	461a      	mov	r2, r3
 8016270:	88bb      	ldrh	r3, [r7, #4]
 8016272:	b2db      	uxtb	r3, r3
 8016274:	4619      	mov	r1, r3
 8016276:	4610      	mov	r0, r2
 8016278:	f000 f83c 	bl	80162f4 <WIZCHIP_WRITE>
}
 801627c:	bf00      	nop
 801627e:	3708      	adds	r7, #8
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8016284:	b480      	push	{r7}
 8016286:	af00      	add	r7, sp, #0
 8016288:	bf00      	nop
 801628a:	46bd      	mov	sp, r7
 801628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016290:	4770      	bx	lr

08016292 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8016292:	b480      	push	{r7}
 8016294:	af00      	add	r7, sp, #0
 8016296:	bf00      	nop
 8016298:	46bd      	mov	sp, r7
 801629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629e:	4770      	bx	lr

080162a0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80162a0:	b480      	push	{r7}
 80162a2:	af00      	add	r7, sp, #0
 80162a4:	bf00      	nop
 80162a6:	46bd      	mov	sp, r7
 80162a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ac:	4770      	bx	lr

080162ae <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80162ae:	b480      	push	{r7}
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	bf00      	nop
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr

080162bc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80162bc:	b480      	push	{r7}
 80162be:	b083      	sub	sp, #12
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	781b      	ldrb	r3, [r3, #0]
 80162c8:	b2db      	uxtb	r3, r3
 80162ca:	4618      	mov	r0, r3
 80162cc:	370c      	adds	r7, #12
 80162ce:	46bd      	mov	sp, r7
 80162d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d4:	4770      	bx	lr

080162d6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80162d6:	b480      	push	{r7}
 80162d8:	b083      	sub	sp, #12
 80162da:	af00      	add	r7, sp, #0
 80162dc:	6078      	str	r0, [r7, #4]
 80162de:	460b      	mov	r3, r1
 80162e0:	70fb      	strb	r3, [r7, #3]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	78fa      	ldrb	r2, [r7, #3]
 80162e6:	701a      	strb	r2, [r3, #0]
 80162e8:	bf00      	nop
 80162ea:	370c      	adds	r7, #12
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr

080162f4 <WIZCHIP_WRITE>:
   WIZCHIP_CRITICAL_EXIT();
   return ret;
}

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b084      	sub	sp, #16
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	460b      	mov	r3, r1
 80162fe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8016300:	4b22      	ldr	r3, [pc, #136]	; (801638c <WIZCHIP_WRITE+0x98>)
 8016302:	68db      	ldr	r3, [r3, #12]
 8016304:	4798      	blx	r3
   WIZCHIP.CS._select();
 8016306:	4b21      	ldr	r3, [pc, #132]	; (801638c <WIZCHIP_WRITE+0x98>)
 8016308:	695b      	ldr	r3, [r3, #20]
 801630a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f043 0304 	orr.w	r3, r3, #4
 8016312:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8016314:	4b1d      	ldr	r3, [pc, #116]	; (801638c <WIZCHIP_WRITE+0x98>)
 8016316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016318:	2b00      	cmp	r3, #0
 801631a:	d119      	bne.n	8016350 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801631c:	4b1b      	ldr	r3, [pc, #108]	; (801638c <WIZCHIP_WRITE+0x98>)
 801631e:	6a1b      	ldr	r3, [r3, #32]
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	0c12      	lsrs	r2, r2, #16
 8016324:	b2d2      	uxtb	r2, r2
 8016326:	4610      	mov	r0, r2
 8016328:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801632a:	4b18      	ldr	r3, [pc, #96]	; (801638c <WIZCHIP_WRITE+0x98>)
 801632c:	6a1b      	ldr	r3, [r3, #32]
 801632e:	687a      	ldr	r2, [r7, #4]
 8016330:	0a12      	lsrs	r2, r2, #8
 8016332:	b2d2      	uxtb	r2, r2
 8016334:	4610      	mov	r0, r2
 8016336:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8016338:	4b14      	ldr	r3, [pc, #80]	; (801638c <WIZCHIP_WRITE+0x98>)
 801633a:	6a1b      	ldr	r3, [r3, #32]
 801633c:	687a      	ldr	r2, [r7, #4]
 801633e:	b2d2      	uxtb	r2, r2
 8016340:	4610      	mov	r0, r2
 8016342:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8016344:	4b11      	ldr	r3, [pc, #68]	; (801638c <WIZCHIP_WRITE+0x98>)
 8016346:	6a1b      	ldr	r3, [r3, #32]
 8016348:	78fa      	ldrb	r2, [r7, #3]
 801634a:	4610      	mov	r0, r2
 801634c:	4798      	blx	r3
 801634e:	e013      	b.n	8016378 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	0c1b      	lsrs	r3, r3, #16
 8016354:	b2db      	uxtb	r3, r3
 8016356:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	0a1b      	lsrs	r3, r3, #8
 801635c:	b2db      	uxtb	r3, r3
 801635e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	b2db      	uxtb	r3, r3
 8016364:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8016366:	78fb      	ldrb	r3, [r7, #3]
 8016368:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 801636a:	4b08      	ldr	r3, [pc, #32]	; (801638c <WIZCHIP_WRITE+0x98>)
 801636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801636e:	f107 020c 	add.w	r2, r7, #12
 8016372:	2104      	movs	r1, #4
 8016374:	4610      	mov	r0, r2
 8016376:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8016378:	4b04      	ldr	r3, [pc, #16]	; (801638c <WIZCHIP_WRITE+0x98>)
 801637a:	699b      	ldr	r3, [r3, #24]
 801637c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801637e:	4b03      	ldr	r3, [pc, #12]	; (801638c <WIZCHIP_WRITE+0x98>)
 8016380:	691b      	ldr	r3, [r3, #16]
 8016382:	4798      	blx	r3
}
 8016384:	bf00      	nop
 8016386:	3710      	adds	r7, #16
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	2400026c 	.word	0x2400026c

08016390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8016390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80163c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8016394:	f7f7 f9fc 	bl	800d790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8016398:	480c      	ldr	r0, [pc, #48]	; (80163cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801639a:	490d      	ldr	r1, [pc, #52]	; (80163d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801639c:	4a0d      	ldr	r2, [pc, #52]	; (80163d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801639e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80163a0:	e002      	b.n	80163a8 <LoopCopyDataInit>

080163a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80163a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80163a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80163a6:	3304      	adds	r3, #4

080163a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80163a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80163aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80163ac:	d3f9      	bcc.n	80163a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80163ae:	4a0a      	ldr	r2, [pc, #40]	; (80163d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80163b0:	4c0a      	ldr	r4, [pc, #40]	; (80163dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80163b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80163b4:	e001      	b.n	80163ba <LoopFillZerobss>

080163b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80163b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80163b8:	3204      	adds	r2, #4

080163ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80163ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80163bc:	d3fb      	bcc.n	80163b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80163be:	f010 f97f 	bl	80266c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80163c2:	f7f4 ff57 	bl	800b274 <main>
  bx  lr
 80163c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80163c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80163cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80163d0:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 80163d4:	0802d1c0 	.word	0x0802d1c0
  ldr r2, =_sbss
 80163d8:	24000478 	.word	0x24000478
  ldr r4, =_ebss
 80163dc:	24006034 	.word	0x24006034

080163e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80163e0:	e7fe      	b.n	80163e0 <ADC3_IRQHandler>
	...

080163e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80163ea:	2003      	movs	r0, #3
 80163ec:	f002 f95e 	bl	80186ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80163f0:	f008 fd84 	bl	801eefc <HAL_RCC_GetSysClockFreq>
 80163f4:	4602      	mov	r2, r0
 80163f6:	4b15      	ldr	r3, [pc, #84]	; (801644c <HAL_Init+0x68>)
 80163f8:	699b      	ldr	r3, [r3, #24]
 80163fa:	0a1b      	lsrs	r3, r3, #8
 80163fc:	f003 030f 	and.w	r3, r3, #15
 8016400:	4913      	ldr	r1, [pc, #76]	; (8016450 <HAL_Init+0x6c>)
 8016402:	5ccb      	ldrb	r3, [r1, r3]
 8016404:	f003 031f 	and.w	r3, r3, #31
 8016408:	fa22 f303 	lsr.w	r3, r2, r3
 801640c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801640e:	4b0f      	ldr	r3, [pc, #60]	; (801644c <HAL_Init+0x68>)
 8016410:	699b      	ldr	r3, [r3, #24]
 8016412:	f003 030f 	and.w	r3, r3, #15
 8016416:	4a0e      	ldr	r2, [pc, #56]	; (8016450 <HAL_Init+0x6c>)
 8016418:	5cd3      	ldrb	r3, [r2, r3]
 801641a:	f003 031f 	and.w	r3, r3, #31
 801641e:	687a      	ldr	r2, [r7, #4]
 8016420:	fa22 f303 	lsr.w	r3, r2, r3
 8016424:	4a0b      	ldr	r2, [pc, #44]	; (8016454 <HAL_Init+0x70>)
 8016426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8016428:	4a0b      	ldr	r2, [pc, #44]	; (8016458 <HAL_Init+0x74>)
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801642e:	200f      	movs	r0, #15
 8016430:	f000 f814 	bl	801645c <HAL_InitTick>
 8016434:	4603      	mov	r3, r0
 8016436:	2b00      	cmp	r3, #0
 8016438:	d001      	beq.n	801643e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801643a:	2301      	movs	r3, #1
 801643c:	e002      	b.n	8016444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801643e:	f7f5 ff21 	bl	800c284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8016442:	2300      	movs	r3, #0
}
 8016444:	4618      	mov	r0, r3
 8016446:	3708      	adds	r7, #8
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}
 801644c:	58024400 	.word	0x58024400
 8016450:	0802b4d4 	.word	0x0802b4d4
 8016454:	24000028 	.word	0x24000028
 8016458:	24000024 	.word	0x24000024

0801645c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b082      	sub	sp, #8
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8016464:	4b15      	ldr	r3, [pc, #84]	; (80164bc <HAL_InitTick+0x60>)
 8016466:	781b      	ldrb	r3, [r3, #0]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d101      	bne.n	8016470 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801646c:	2301      	movs	r3, #1
 801646e:	e021      	b.n	80164b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8016470:	4b13      	ldr	r3, [pc, #76]	; (80164c0 <HAL_InitTick+0x64>)
 8016472:	681a      	ldr	r2, [r3, #0]
 8016474:	4b11      	ldr	r3, [pc, #68]	; (80164bc <HAL_InitTick+0x60>)
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	4619      	mov	r1, r3
 801647a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801647e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016482:	fbb2 f3f3 	udiv	r3, r2, r3
 8016486:	4618      	mov	r0, r3
 8016488:	f002 f951 	bl	801872e <HAL_SYSTICK_Config>
 801648c:	4603      	mov	r3, r0
 801648e:	2b00      	cmp	r3, #0
 8016490:	d001      	beq.n	8016496 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8016492:	2301      	movs	r3, #1
 8016494:	e00e      	b.n	80164b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	2b0f      	cmp	r3, #15
 801649a:	d80a      	bhi.n	80164b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801649c:	2200      	movs	r2, #0
 801649e:	6879      	ldr	r1, [r7, #4]
 80164a0:	f04f 30ff 	mov.w	r0, #4294967295
 80164a4:	f002 f90d 	bl	80186c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80164a8:	4a06      	ldr	r2, [pc, #24]	; (80164c4 <HAL_InitTick+0x68>)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80164ae:	2300      	movs	r3, #0
 80164b0:	e000      	b.n	80164b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80164b2:	2301      	movs	r3, #1
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	3708      	adds	r7, #8
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}
 80164bc:	240002a0 	.word	0x240002a0
 80164c0:	24000024 	.word	0x24000024
 80164c4:	2400029c 	.word	0x2400029c

080164c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80164c8:	b480      	push	{r7}
 80164ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80164cc:	4b06      	ldr	r3, [pc, #24]	; (80164e8 <HAL_IncTick+0x20>)
 80164ce:	781b      	ldrb	r3, [r3, #0]
 80164d0:	461a      	mov	r2, r3
 80164d2:	4b06      	ldr	r3, [pc, #24]	; (80164ec <HAL_IncTick+0x24>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	4413      	add	r3, r2
 80164d8:	4a04      	ldr	r2, [pc, #16]	; (80164ec <HAL_IncTick+0x24>)
 80164da:	6013      	str	r3, [r2, #0]
}
 80164dc:	bf00      	nop
 80164de:	46bd      	mov	sp, r7
 80164e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	240002a0 	.word	0x240002a0
 80164ec:	24006004 	.word	0x24006004

080164f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80164f0:	b480      	push	{r7}
 80164f2:	af00      	add	r7, sp, #0
  return uwTick;
 80164f4:	4b03      	ldr	r3, [pc, #12]	; (8016504 <HAL_GetTick+0x14>)
 80164f6:	681b      	ldr	r3, [r3, #0]
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	46bd      	mov	sp, r7
 80164fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016500:	4770      	bx	lr
 8016502:	bf00      	nop
 8016504:	24006004 	.word	0x24006004

08016508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b084      	sub	sp, #16
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8016510:	f7ff ffee 	bl	80164f0 <HAL_GetTick>
 8016514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016520:	d005      	beq.n	801652e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8016522:	4b0a      	ldr	r3, [pc, #40]	; (801654c <HAL_Delay+0x44>)
 8016524:	781b      	ldrb	r3, [r3, #0]
 8016526:	461a      	mov	r2, r3
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	4413      	add	r3, r2
 801652c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801652e:	bf00      	nop
 8016530:	f7ff ffde 	bl	80164f0 <HAL_GetTick>
 8016534:	4602      	mov	r2, r0
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	1ad3      	subs	r3, r2, r3
 801653a:	68fa      	ldr	r2, [r7, #12]
 801653c:	429a      	cmp	r2, r3
 801653e:	d8f7      	bhi.n	8016530 <HAL_Delay+0x28>
  {
  }
}
 8016540:	bf00      	nop
 8016542:	bf00      	nop
 8016544:	3710      	adds	r7, #16
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	bf00      	nop
 801654c:	240002a0 	.word	0x240002a0

08016550 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8016550:	b480      	push	{r7}
 8016552:	b083      	sub	sp, #12
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
 8016558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	689b      	ldr	r3, [r3, #8]
 801655e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	431a      	orrs	r2, r3
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	609a      	str	r2, [r3, #8]
}
 801656a:	bf00      	nop
 801656c:	370c      	adds	r7, #12
 801656e:	46bd      	mov	sp, r7
 8016570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016574:	4770      	bx	lr

08016576 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8016576:	b480      	push	{r7}
 8016578:	b083      	sub	sp, #12
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
 801657e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	689b      	ldr	r3, [r3, #8]
 8016584:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	431a      	orrs	r2, r3
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	609a      	str	r2, [r3, #8]
}
 8016590:	bf00      	nop
 8016592:	370c      	adds	r7, #12
 8016594:	46bd      	mov	sp, r7
 8016596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659a:	4770      	bx	lr

0801659c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801659c:	b480      	push	{r7}
 801659e:	b083      	sub	sp, #12
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	689b      	ldr	r3, [r3, #8]
 80165a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	370c      	adds	r7, #12
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr

080165b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80165b8:	b480      	push	{r7}
 80165ba:	b087      	sub	sp, #28
 80165bc:	af00      	add	r7, sp, #0
 80165be:	60f8      	str	r0, [r7, #12]
 80165c0:	60b9      	str	r1, [r7, #8]
 80165c2:	607a      	str	r2, [r7, #4]
 80165c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	3360      	adds	r3, #96	; 0x60
 80165ca:	461a      	mov	r2, r3
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	4413      	add	r3, r2
 80165d2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	4a10      	ldr	r2, [pc, #64]	; (8016618 <LL_ADC_SetOffset+0x60>)
 80165d8:	4293      	cmp	r3, r2
 80165da:	d10b      	bne.n	80165f4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	4313      	orrs	r3, r2
 80165ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80165f2:	e00b      	b.n	801660c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8016602:	683b      	ldr	r3, [r7, #0]
 8016604:	430b      	orrs	r3, r1
 8016606:	431a      	orrs	r2, r3
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	601a      	str	r2, [r3, #0]
}
 801660c:	bf00      	nop
 801660e:	371c      	adds	r7, #28
 8016610:	46bd      	mov	sp, r7
 8016612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016616:	4770      	bx	lr
 8016618:	58026000 	.word	0x58026000

0801661c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 801661c:	b480      	push	{r7}
 801661e:	b085      	sub	sp, #20
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
 8016624:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	3360      	adds	r3, #96	; 0x60
 801662a:	461a      	mov	r2, r3
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	009b      	lsls	r3, r3, #2
 8016630:	4413      	add	r3, r2
 8016632:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 801663c:	4618      	mov	r0, r3
 801663e:	3714      	adds	r7, #20
 8016640:	46bd      	mov	sp, r7
 8016642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016646:	4770      	bx	lr

08016648 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8016648:	b480      	push	{r7}
 801664a:	b085      	sub	sp, #20
 801664c:	af00      	add	r7, sp, #0
 801664e:	60f8      	str	r0, [r7, #12]
 8016650:	60b9      	str	r1, [r7, #8]
 8016652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	691b      	ldr	r3, [r3, #16]
 8016658:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	f003 031f 	and.w	r3, r3, #31
 8016662:	6879      	ldr	r1, [r7, #4]
 8016664:	fa01 f303 	lsl.w	r3, r1, r3
 8016668:	431a      	orrs	r2, r3
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	611a      	str	r2, [r3, #16]
}
 801666e:	bf00      	nop
 8016670:	3714      	adds	r7, #20
 8016672:	46bd      	mov	sp, r7
 8016674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016678:	4770      	bx	lr
	...

0801667c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 801667c:	b480      	push	{r7}
 801667e:	b087      	sub	sp, #28
 8016680:	af00      	add	r7, sp, #0
 8016682:	60f8      	str	r0, [r7, #12]
 8016684:	60b9      	str	r1, [r7, #8]
 8016686:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	4a0c      	ldr	r2, [pc, #48]	; (80166bc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 801668c:	4293      	cmp	r3, r2
 801668e:	d00e      	beq.n	80166ae <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	3360      	adds	r3, #96	; 0x60
 8016694:	461a      	mov	r2, r3
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	009b      	lsls	r3, r3, #2
 801669a:	4413      	add	r3, r2
 801669c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	431a      	orrs	r2, r3
 80166aa:	697b      	ldr	r3, [r7, #20]
 80166ac:	601a      	str	r2, [r3, #0]
  }
}
 80166ae:	bf00      	nop
 80166b0:	371c      	adds	r7, #28
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr
 80166ba:	bf00      	nop
 80166bc:	58026000 	.word	0x58026000

080166c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80166c0:	b480      	push	{r7}
 80166c2:	b087      	sub	sp, #28
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
 80166ca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	4a0c      	ldr	r2, [pc, #48]	; (8016700 <LL_ADC_SetOffsetSaturation+0x40>)
 80166d0:	4293      	cmp	r3, r2
 80166d2:	d10e      	bne.n	80166f2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	3360      	adds	r3, #96	; 0x60
 80166d8:	461a      	mov	r2, r3
 80166da:	68bb      	ldr	r3, [r7, #8]
 80166dc:	009b      	lsls	r3, r3, #2
 80166de:	4413      	add	r3, r2
 80166e0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80166e2:	697b      	ldr	r3, [r7, #20]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	431a      	orrs	r2, r3
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80166f2:	bf00      	nop
 80166f4:	371c      	adds	r7, #28
 80166f6:	46bd      	mov	sp, r7
 80166f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fc:	4770      	bx	lr
 80166fe:	bf00      	nop
 8016700:	58026000 	.word	0x58026000

08016704 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8016704:	b480      	push	{r7}
 8016706:	b087      	sub	sp, #28
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	4a0c      	ldr	r2, [pc, #48]	; (8016744 <LL_ADC_SetOffsetSign+0x40>)
 8016714:	4293      	cmp	r3, r2
 8016716:	d10e      	bne.n	8016736 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	3360      	adds	r3, #96	; 0x60
 801671c:	461a      	mov	r2, r3
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	009b      	lsls	r3, r3, #2
 8016722:	4413      	add	r3, r2
 8016724:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8016726:	697b      	ldr	r3, [r7, #20]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	431a      	orrs	r2, r3
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8016736:	bf00      	nop
 8016738:	371c      	adds	r7, #28
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr
 8016742:	bf00      	nop
 8016744:	58026000 	.word	0x58026000

08016748 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8016748:	b480      	push	{r7}
 801674a:	b087      	sub	sp, #28
 801674c:	af00      	add	r7, sp, #0
 801674e:	60f8      	str	r0, [r7, #12]
 8016750:	60b9      	str	r1, [r7, #8]
 8016752:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	3360      	adds	r3, #96	; 0x60
 8016758:	461a      	mov	r2, r3
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	009b      	lsls	r3, r3, #2
 801675e:	4413      	add	r3, r2
 8016760:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	4a0c      	ldr	r2, [pc, #48]	; (8016798 <LL_ADC_SetOffsetState+0x50>)
 8016766:	4293      	cmp	r3, r2
 8016768:	d108      	bne.n	801677c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	431a      	orrs	r2, r3
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 801677a:	e007      	b.n	801678c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	431a      	orrs	r2, r3
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	601a      	str	r2, [r3, #0]
}
 801678c:	bf00      	nop
 801678e:	371c      	adds	r7, #28
 8016790:	46bd      	mov	sp, r7
 8016792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016796:	4770      	bx	lr
 8016798:	58026000 	.word	0x58026000

0801679c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801679c:	b480      	push	{r7}
 801679e:	b083      	sub	sp, #12
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d101      	bne.n	80167b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80167b0:	2301      	movs	r3, #1
 80167b2:	e000      	b.n	80167b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80167b4:	2300      	movs	r3, #0
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	370c      	adds	r7, #12
 80167ba:	46bd      	mov	sp, r7
 80167bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c0:	4770      	bx	lr

080167c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80167c2:	b480      	push	{r7}
 80167c4:	b087      	sub	sp, #28
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	60f8      	str	r0, [r7, #12]
 80167ca:	60b9      	str	r1, [r7, #8]
 80167cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	3330      	adds	r3, #48	; 0x30
 80167d2:	461a      	mov	r2, r3
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	0a1b      	lsrs	r3, r3, #8
 80167d8:	009b      	lsls	r3, r3, #2
 80167da:	f003 030c 	and.w	r3, r3, #12
 80167de:	4413      	add	r3, r2
 80167e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	f003 031f 	and.w	r3, r3, #31
 80167ec:	211f      	movs	r1, #31
 80167ee:	fa01 f303 	lsl.w	r3, r1, r3
 80167f2:	43db      	mvns	r3, r3
 80167f4:	401a      	ands	r2, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	0e9b      	lsrs	r3, r3, #26
 80167fa:	f003 011f 	and.w	r1, r3, #31
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	f003 031f 	and.w	r3, r3, #31
 8016804:	fa01 f303 	lsl.w	r3, r1, r3
 8016808:	431a      	orrs	r2, r3
 801680a:	697b      	ldr	r3, [r7, #20]
 801680c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 801680e:	bf00      	nop
 8016810:	371c      	adds	r7, #28
 8016812:	46bd      	mov	sp, r7
 8016814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016818:	4770      	bx	lr

0801681a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 801681a:	b480      	push	{r7}
 801681c:	b087      	sub	sp, #28
 801681e:	af00      	add	r7, sp, #0
 8016820:	60f8      	str	r0, [r7, #12]
 8016822:	60b9      	str	r1, [r7, #8]
 8016824:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	3314      	adds	r3, #20
 801682a:	461a      	mov	r2, r3
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	0e5b      	lsrs	r3, r3, #25
 8016830:	009b      	lsls	r3, r3, #2
 8016832:	f003 0304 	and.w	r3, r3, #4
 8016836:	4413      	add	r3, r2
 8016838:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	0d1b      	lsrs	r3, r3, #20
 8016842:	f003 031f 	and.w	r3, r3, #31
 8016846:	2107      	movs	r1, #7
 8016848:	fa01 f303 	lsl.w	r3, r1, r3
 801684c:	43db      	mvns	r3, r3
 801684e:	401a      	ands	r2, r3
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	0d1b      	lsrs	r3, r3, #20
 8016854:	f003 031f 	and.w	r3, r3, #31
 8016858:	6879      	ldr	r1, [r7, #4]
 801685a:	fa01 f303 	lsl.w	r3, r1, r3
 801685e:	431a      	orrs	r2, r3
 8016860:	697b      	ldr	r3, [r7, #20]
 8016862:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8016864:	bf00      	nop
 8016866:	371c      	adds	r7, #28
 8016868:	46bd      	mov	sp, r7
 801686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686e:	4770      	bx	lr

08016870 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8016870:	b480      	push	{r7}
 8016872:	b085      	sub	sp, #20
 8016874:	af00      	add	r7, sp, #0
 8016876:	60f8      	str	r0, [r7, #12]
 8016878:	60b9      	str	r1, [r7, #8]
 801687a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	4a1a      	ldr	r2, [pc, #104]	; (80168e8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8016880:	4293      	cmp	r3, r2
 8016882:	d115      	bne.n	80168b0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016890:	43db      	mvns	r3, r3
 8016892:	401a      	ands	r2, r3
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f003 0318 	and.w	r3, r3, #24
 801689a:	4914      	ldr	r1, [pc, #80]	; (80168ec <LL_ADC_SetChannelSingleDiff+0x7c>)
 801689c:	40d9      	lsrs	r1, r3
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	400b      	ands	r3, r1
 80168a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168a6:	431a      	orrs	r2, r3
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80168ae:	e014      	b.n	80168da <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168bc:	43db      	mvns	r3, r3
 80168be:	401a      	ands	r2, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f003 0318 	and.w	r3, r3, #24
 80168c6:	4909      	ldr	r1, [pc, #36]	; (80168ec <LL_ADC_SetChannelSingleDiff+0x7c>)
 80168c8:	40d9      	lsrs	r1, r3
 80168ca:	68bb      	ldr	r3, [r7, #8]
 80168cc:	400b      	ands	r3, r1
 80168ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168d2:	431a      	orrs	r2, r3
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80168da:	bf00      	nop
 80168dc:	3714      	adds	r7, #20
 80168de:	46bd      	mov	sp, r7
 80168e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e4:	4770      	bx	lr
 80168e6:	bf00      	nop
 80168e8:	58026000 	.word	0x58026000
 80168ec:	000fffff 	.word	0x000fffff

080168f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80168f0:	b480      	push	{r7}
 80168f2:	b083      	sub	sp, #12
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	689b      	ldr	r3, [r3, #8]
 80168fc:	f003 031f 	and.w	r3, r3, #31
}
 8016900:	4618      	mov	r0, r3
 8016902:	370c      	adds	r7, #12
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801690c:	b480      	push	{r7}
 801690e:	b083      	sub	sp, #12
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	689b      	ldr	r3, [r3, #8]
 8016918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 801691c:	4618      	mov	r0, r3
 801691e:	370c      	adds	r7, #12
 8016920:	46bd      	mov	sp, r7
 8016922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016926:	4770      	bx	lr

08016928 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8016928:	b480      	push	{r7}
 801692a:	b083      	sub	sp, #12
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	689a      	ldr	r2, [r3, #8]
 8016934:	4b04      	ldr	r3, [pc, #16]	; (8016948 <LL_ADC_DisableDeepPowerDown+0x20>)
 8016936:	4013      	ands	r3, r2
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	6093      	str	r3, [r2, #8]
}
 801693c:	bf00      	nop
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr
 8016948:	5fffffc0 	.word	0x5fffffc0

0801694c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 801694c:	b480      	push	{r7}
 801694e:	b083      	sub	sp, #12
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	689b      	ldr	r3, [r3, #8]
 8016958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801695c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016960:	d101      	bne.n	8016966 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8016962:	2301      	movs	r3, #1
 8016964:	e000      	b.n	8016968 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8016966:	2300      	movs	r3, #0
}
 8016968:	4618      	mov	r0, r3
 801696a:	370c      	adds	r7, #12
 801696c:	46bd      	mov	sp, r7
 801696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016972:	4770      	bx	lr

08016974 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8016974:	b480      	push	{r7}
 8016976:	b083      	sub	sp, #12
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	689a      	ldr	r2, [r3, #8]
 8016980:	4b05      	ldr	r3, [pc, #20]	; (8016998 <LL_ADC_EnableInternalRegulator+0x24>)
 8016982:	4013      	ands	r3, r2
 8016984:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 801698c:	bf00      	nop
 801698e:	370c      	adds	r7, #12
 8016990:	46bd      	mov	sp, r7
 8016992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016996:	4770      	bx	lr
 8016998:	6fffffc0 	.word	0x6fffffc0

0801699c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 801699c:	b480      	push	{r7}
 801699e:	b083      	sub	sp, #12
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	689b      	ldr	r3, [r3, #8]
 80169a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80169ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80169b0:	d101      	bne.n	80169b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80169b2:	2301      	movs	r3, #1
 80169b4:	e000      	b.n	80169b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80169b6:	2300      	movs	r3, #0
}
 80169b8:	4618      	mov	r0, r3
 80169ba:	370c      	adds	r7, #12
 80169bc:	46bd      	mov	sp, r7
 80169be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c2:	4770      	bx	lr

080169c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80169c4:	b480      	push	{r7}
 80169c6:	b083      	sub	sp, #12
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	689a      	ldr	r2, [r3, #8]
 80169d0:	4b05      	ldr	r3, [pc, #20]	; (80169e8 <LL_ADC_Enable+0x24>)
 80169d2:	4013      	ands	r3, r2
 80169d4:	f043 0201 	orr.w	r2, r3, #1
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80169dc:	bf00      	nop
 80169de:	370c      	adds	r7, #12
 80169e0:	46bd      	mov	sp, r7
 80169e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e6:	4770      	bx	lr
 80169e8:	7fffffc0 	.word	0x7fffffc0

080169ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80169ec:	b480      	push	{r7}
 80169ee:	b083      	sub	sp, #12
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	689a      	ldr	r2, [r3, #8]
 80169f8:	4b05      	ldr	r3, [pc, #20]	; (8016a10 <LL_ADC_Disable+0x24>)
 80169fa:	4013      	ands	r3, r2
 80169fc:	f043 0202 	orr.w	r2, r3, #2
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8016a04:	bf00      	nop
 8016a06:	370c      	adds	r7, #12
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0e:	4770      	bx	lr
 8016a10:	7fffffc0 	.word	0x7fffffc0

08016a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8016a14:	b480      	push	{r7}
 8016a16:	b083      	sub	sp, #12
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	689b      	ldr	r3, [r3, #8]
 8016a20:	f003 0301 	and.w	r3, r3, #1
 8016a24:	2b01      	cmp	r3, #1
 8016a26:	d101      	bne.n	8016a2c <LL_ADC_IsEnabled+0x18>
 8016a28:	2301      	movs	r3, #1
 8016a2a:	e000      	b.n	8016a2e <LL_ADC_IsEnabled+0x1a>
 8016a2c:	2300      	movs	r3, #0
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	370c      	adds	r7, #12
 8016a32:	46bd      	mov	sp, r7
 8016a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a38:	4770      	bx	lr

08016a3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8016a3a:	b480      	push	{r7}
 8016a3c:	b083      	sub	sp, #12
 8016a3e:	af00      	add	r7, sp, #0
 8016a40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	689b      	ldr	r3, [r3, #8]
 8016a46:	f003 0302 	and.w	r3, r3, #2
 8016a4a:	2b02      	cmp	r3, #2
 8016a4c:	d101      	bne.n	8016a52 <LL_ADC_IsDisableOngoing+0x18>
 8016a4e:	2301      	movs	r3, #1
 8016a50:	e000      	b.n	8016a54 <LL_ADC_IsDisableOngoing+0x1a>
 8016a52:	2300      	movs	r3, #0
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	370c      	adds	r7, #12
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5e:	4770      	bx	lr

08016a60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8016a60:	b480      	push	{r7}
 8016a62:	b083      	sub	sp, #12
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	689a      	ldr	r2, [r3, #8]
 8016a6c:	4b05      	ldr	r3, [pc, #20]	; (8016a84 <LL_ADC_REG_StartConversion+0x24>)
 8016a6e:	4013      	ands	r3, r2
 8016a70:	f043 0204 	orr.w	r2, r3, #4
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8016a78:	bf00      	nop
 8016a7a:	370c      	adds	r7, #12
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a82:	4770      	bx	lr
 8016a84:	7fffffc0 	.word	0x7fffffc0

08016a88 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	689a      	ldr	r2, [r3, #8]
 8016a94:	4b05      	ldr	r3, [pc, #20]	; (8016aac <LL_ADC_REG_StopConversion+0x24>)
 8016a96:	4013      	ands	r3, r2
 8016a98:	f043 0210 	orr.w	r2, r3, #16
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8016aa0:	bf00      	nop
 8016aa2:	370c      	adds	r7, #12
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aaa:	4770      	bx	lr
 8016aac:	7fffffc0 	.word	0x7fffffc0

08016ab0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8016ab0:	b480      	push	{r7}
 8016ab2:	b083      	sub	sp, #12
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	689b      	ldr	r3, [r3, #8]
 8016abc:	f003 0304 	and.w	r3, r3, #4
 8016ac0:	2b04      	cmp	r3, #4
 8016ac2:	d101      	bne.n	8016ac8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8016ac4:	2301      	movs	r3, #1
 8016ac6:	e000      	b.n	8016aca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8016ac8:	2300      	movs	r3, #0
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	370c      	adds	r7, #12
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad4:	4770      	bx	lr
	...

08016ad8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8016ad8:	b480      	push	{r7}
 8016ada:	b083      	sub	sp, #12
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	689a      	ldr	r2, [r3, #8]
 8016ae4:	4b05      	ldr	r3, [pc, #20]	; (8016afc <LL_ADC_INJ_StopConversion+0x24>)
 8016ae6:	4013      	ands	r3, r2
 8016ae8:	f043 0220 	orr.w	r2, r3, #32
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8016af0:	bf00      	nop
 8016af2:	370c      	adds	r7, #12
 8016af4:	46bd      	mov	sp, r7
 8016af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afa:	4770      	bx	lr
 8016afc:	7fffffc0 	.word	0x7fffffc0

08016b00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8016b00:	b480      	push	{r7}
 8016b02:	b083      	sub	sp, #12
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	689b      	ldr	r3, [r3, #8]
 8016b0c:	f003 0308 	and.w	r3, r3, #8
 8016b10:	2b08      	cmp	r3, #8
 8016b12:	d101      	bne.n	8016b18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8016b14:	2301      	movs	r3, #1
 8016b16:	e000      	b.n	8016b1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8016b18:	2300      	movs	r3, #0
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	370c      	adds	r7, #12
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b24:	4770      	bx	lr
	...

08016b28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8016b28:	b590      	push	{r4, r7, lr}
 8016b2a:	b089      	sub	sp, #36	; 0x24
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016b30:	2300      	movs	r3, #0
 8016b32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8016b34:	2300      	movs	r3, #0
 8016b36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d101      	bne.n	8016b42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8016b3e:	2301      	movs	r3, #1
 8016b40:	e1ee      	b.n	8016f20 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	691b      	ldr	r3, [r3, #16]
 8016b46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d109      	bne.n	8016b64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f7f5 fbb5 	bl	800c2c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	2200      	movs	r2, #0
 8016b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7ff feef 	bl	801694c <LL_ADC_IsDeepPowerDownEnabled>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d004      	beq.n	8016b7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7ff fed5 	bl	8016928 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7ff ff0a 	bl	801699c <LL_ADC_IsInternalRegulatorEnabled>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d114      	bne.n	8016bb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	4618      	mov	r0, r3
 8016b94:	f7ff feee 	bl	8016974 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016b98:	4b8e      	ldr	r3, [pc, #568]	; (8016dd4 <HAL_ADC_Init+0x2ac>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	099b      	lsrs	r3, r3, #6
 8016b9e:	4a8e      	ldr	r2, [pc, #568]	; (8016dd8 <HAL_ADC_Init+0x2b0>)
 8016ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8016ba4:	099b      	lsrs	r3, r3, #6
 8016ba6:	3301      	adds	r3, #1
 8016ba8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8016baa:	e002      	b.n	8016bb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8016bac:	68bb      	ldr	r3, [r7, #8]
 8016bae:	3b01      	subs	r3, #1
 8016bb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d1f9      	bne.n	8016bac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7ff feed 	bl	801699c <LL_ADC_IsInternalRegulatorEnabled>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d10d      	bne.n	8016be4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016bcc:	f043 0210 	orr.w	r2, r3, #16
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bd8:	f043 0201 	orr.w	r2, r3, #1
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8016be0:	2301      	movs	r3, #1
 8016be2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	4618      	mov	r0, r3
 8016bea:	f7ff ff61 	bl	8016ab0 <LL_ADC_REG_IsConversionOngoing>
 8016bee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016bf4:	f003 0310 	and.w	r3, r3, #16
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f040 8188 	bne.w	8016f0e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	f040 8184 	bne.w	8016f0e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8016c0e:	f043 0202 	orr.w	r2, r3, #2
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7ff fefa 	bl	8016a14 <LL_ADC_IsEnabled>
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d136      	bne.n	8016c94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	4a6c      	ldr	r2, [pc, #432]	; (8016ddc <HAL_ADC_Init+0x2b4>)
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	d004      	beq.n	8016c3a <HAL_ADC_Init+0x112>
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	4a6a      	ldr	r2, [pc, #424]	; (8016de0 <HAL_ADC_Init+0x2b8>)
 8016c36:	4293      	cmp	r3, r2
 8016c38:	d10e      	bne.n	8016c58 <HAL_ADC_Init+0x130>
 8016c3a:	4868      	ldr	r0, [pc, #416]	; (8016ddc <HAL_ADC_Init+0x2b4>)
 8016c3c:	f7ff feea 	bl	8016a14 <LL_ADC_IsEnabled>
 8016c40:	4604      	mov	r4, r0
 8016c42:	4867      	ldr	r0, [pc, #412]	; (8016de0 <HAL_ADC_Init+0x2b8>)
 8016c44:	f7ff fee6 	bl	8016a14 <LL_ADC_IsEnabled>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	4323      	orrs	r3, r4
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	bf0c      	ite	eq
 8016c50:	2301      	moveq	r3, #1
 8016c52:	2300      	movne	r3, #0
 8016c54:	b2db      	uxtb	r3, r3
 8016c56:	e008      	b.n	8016c6a <HAL_ADC_Init+0x142>
 8016c58:	4862      	ldr	r0, [pc, #392]	; (8016de4 <HAL_ADC_Init+0x2bc>)
 8016c5a:	f7ff fedb 	bl	8016a14 <LL_ADC_IsEnabled>
 8016c5e:	4603      	mov	r3, r0
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	bf0c      	ite	eq
 8016c64:	2301      	moveq	r3, #1
 8016c66:	2300      	movne	r3, #0
 8016c68:	b2db      	uxtb	r3, r3
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d012      	beq.n	8016c94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	4a5a      	ldr	r2, [pc, #360]	; (8016ddc <HAL_ADC_Init+0x2b4>)
 8016c74:	4293      	cmp	r3, r2
 8016c76:	d004      	beq.n	8016c82 <HAL_ADC_Init+0x15a>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	4a58      	ldr	r2, [pc, #352]	; (8016de0 <HAL_ADC_Init+0x2b8>)
 8016c7e:	4293      	cmp	r3, r2
 8016c80:	d101      	bne.n	8016c86 <HAL_ADC_Init+0x15e>
 8016c82:	4a59      	ldr	r2, [pc, #356]	; (8016de8 <HAL_ADC_Init+0x2c0>)
 8016c84:	e000      	b.n	8016c88 <HAL_ADC_Init+0x160>
 8016c86:	4a59      	ldr	r2, [pc, #356]	; (8016dec <HAL_ADC_Init+0x2c4>)
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	685b      	ldr	r3, [r3, #4]
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	4610      	mov	r0, r2
 8016c90:	f7ff fc5e 	bl	8016550 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	4a52      	ldr	r2, [pc, #328]	; (8016de4 <HAL_ADC_Init+0x2bc>)
 8016c9a:	4293      	cmp	r3, r2
 8016c9c:	d129      	bne.n	8016cf2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	7e5b      	ldrb	r3, [r3, #25]
 8016ca2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8016ca8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8016cae:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	689b      	ldr	r3, [r3, #8]
 8016cb4:	2b08      	cmp	r3, #8
 8016cb6:	d013      	beq.n	8016ce0 <HAL_ADC_Init+0x1b8>
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	689b      	ldr	r3, [r3, #8]
 8016cbc:	2b0c      	cmp	r3, #12
 8016cbe:	d00d      	beq.n	8016cdc <HAL_ADC_Init+0x1b4>
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	689b      	ldr	r3, [r3, #8]
 8016cc4:	2b1c      	cmp	r3, #28
 8016cc6:	d007      	beq.n	8016cd8 <HAL_ADC_Init+0x1b0>
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	689b      	ldr	r3, [r3, #8]
 8016ccc:	2b18      	cmp	r3, #24
 8016cce:	d101      	bne.n	8016cd4 <HAL_ADC_Init+0x1ac>
 8016cd0:	2318      	movs	r3, #24
 8016cd2:	e006      	b.n	8016ce2 <HAL_ADC_Init+0x1ba>
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	e004      	b.n	8016ce2 <HAL_ADC_Init+0x1ba>
 8016cd8:	2310      	movs	r3, #16
 8016cda:	e002      	b.n	8016ce2 <HAL_ADC_Init+0x1ba>
 8016cdc:	2308      	movs	r3, #8
 8016cde:	e000      	b.n	8016ce2 <HAL_ADC_Init+0x1ba>
 8016ce0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8016ce2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016cea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8016cec:	4313      	orrs	r3, r2
 8016cee:	61bb      	str	r3, [r7, #24]
 8016cf0:	e00e      	b.n	8016d10 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	7e5b      	ldrb	r3, [r3, #25]
 8016cf6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8016cfc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8016d02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016d0a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8016d0c:	4313      	orrs	r3, r2
 8016d0e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016d16:	2b01      	cmp	r3, #1
 8016d18:	d106      	bne.n	8016d28 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d1e:	3b01      	subs	r3, #1
 8016d20:	045b      	lsls	r3, r3, #17
 8016d22:	69ba      	ldr	r2, [r7, #24]
 8016d24:	4313      	orrs	r3, r2
 8016d26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d009      	beq.n	8016d44 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8016d3e:	69ba      	ldr	r2, [r7, #24]
 8016d40:	4313      	orrs	r3, r2
 8016d42:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4a26      	ldr	r2, [pc, #152]	; (8016de4 <HAL_ADC_Init+0x2bc>)
 8016d4a:	4293      	cmp	r3, r2
 8016d4c:	d115      	bne.n	8016d7a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	68da      	ldr	r2, [r3, #12]
 8016d54:	4b26      	ldr	r3, [pc, #152]	; (8016df0 <HAL_ADC_Init+0x2c8>)
 8016d56:	4013      	ands	r3, r2
 8016d58:	687a      	ldr	r2, [r7, #4]
 8016d5a:	6812      	ldr	r2, [r2, #0]
 8016d5c:	69b9      	ldr	r1, [r7, #24]
 8016d5e:	430b      	orrs	r3, r1
 8016d60:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	691b      	ldr	r3, [r3, #16]
 8016d68:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	430a      	orrs	r2, r1
 8016d76:	611a      	str	r2, [r3, #16]
 8016d78:	e009      	b.n	8016d8e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	68da      	ldr	r2, [r3, #12]
 8016d80:	4b1c      	ldr	r3, [pc, #112]	; (8016df4 <HAL_ADC_Init+0x2cc>)
 8016d82:	4013      	ands	r3, r2
 8016d84:	687a      	ldr	r2, [r7, #4]
 8016d86:	6812      	ldr	r2, [r2, #0]
 8016d88:	69b9      	ldr	r1, [r7, #24]
 8016d8a:	430b      	orrs	r3, r1
 8016d8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7ff fe8c 	bl	8016ab0 <LL_ADC_REG_IsConversionOngoing>
 8016d98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f7ff feae 	bl	8016b00 <LL_ADC_INJ_IsConversionOngoing>
 8016da4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016da6:	693b      	ldr	r3, [r7, #16]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	f040 808e 	bne.w	8016eca <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	f040 808a 	bne.w	8016eca <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	4a0a      	ldr	r2, [pc, #40]	; (8016de4 <HAL_ADC_Init+0x2bc>)
 8016dbc:	4293      	cmp	r3, r2
 8016dbe:	d11b      	bne.n	8016df8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	7e1b      	ldrb	r3, [r3, #24]
 8016dc4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016dcc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8016dce:	4313      	orrs	r3, r2
 8016dd0:	61bb      	str	r3, [r7, #24]
 8016dd2:	e018      	b.n	8016e06 <HAL_ADC_Init+0x2de>
 8016dd4:	24000024 	.word	0x24000024
 8016dd8:	053e2d63 	.word	0x053e2d63
 8016ddc:	40022000 	.word	0x40022000
 8016de0:	40022100 	.word	0x40022100
 8016de4:	58026000 	.word	0x58026000
 8016de8:	40022300 	.word	0x40022300
 8016dec:	58026300 	.word	0x58026300
 8016df0:	fff04007 	.word	0xfff04007
 8016df4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	7e1b      	ldrb	r3, [r3, #24]
 8016dfc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8016e02:	4313      	orrs	r3, r2
 8016e04:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	68da      	ldr	r2, [r3, #12]
 8016e0c:	4b46      	ldr	r3, [pc, #280]	; (8016f28 <HAL_ADC_Init+0x400>)
 8016e0e:	4013      	ands	r3, r2
 8016e10:	687a      	ldr	r2, [r7, #4]
 8016e12:	6812      	ldr	r2, [r2, #0]
 8016e14:	69b9      	ldr	r1, [r7, #24]
 8016e16:	430b      	orrs	r3, r1
 8016e18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e20:	2b01      	cmp	r3, #1
 8016e22:	d137      	bne.n	8016e94 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e28:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	4a3f      	ldr	r2, [pc, #252]	; (8016f2c <HAL_ADC_Init+0x404>)
 8016e30:	4293      	cmp	r3, r2
 8016e32:	d116      	bne.n	8016e62 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	691a      	ldr	r2, [r3, #16]
 8016e3a:	4b3d      	ldr	r3, [pc, #244]	; (8016f30 <HAL_ADC_Init+0x408>)
 8016e3c:	4013      	ands	r3, r2
 8016e3e:	687a      	ldr	r2, [r7, #4]
 8016e40:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8016e42:	687a      	ldr	r2, [r7, #4]
 8016e44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8016e46:	4311      	orrs	r1, r2
 8016e48:	687a      	ldr	r2, [r7, #4]
 8016e4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8016e4c:	4311      	orrs	r1, r2
 8016e4e:	687a      	ldr	r2, [r7, #4]
 8016e50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8016e52:	430a      	orrs	r2, r1
 8016e54:	431a      	orrs	r2, r3
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f042 0201 	orr.w	r2, r2, #1
 8016e5e:	611a      	str	r2, [r3, #16]
 8016e60:	e020      	b.n	8016ea4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	691a      	ldr	r2, [r3, #16]
 8016e68:	4b32      	ldr	r3, [pc, #200]	; (8016f34 <HAL_ADC_Init+0x40c>)
 8016e6a:	4013      	ands	r3, r2
 8016e6c:	687a      	ldr	r2, [r7, #4]
 8016e6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8016e70:	3a01      	subs	r2, #1
 8016e72:	0411      	lsls	r1, r2, #16
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8016e78:	4311      	orrs	r1, r2
 8016e7a:	687a      	ldr	r2, [r7, #4]
 8016e7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8016e7e:	4311      	orrs	r1, r2
 8016e80:	687a      	ldr	r2, [r7, #4]
 8016e82:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8016e84:	430a      	orrs	r2, r1
 8016e86:	431a      	orrs	r2, r3
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	f042 0201 	orr.w	r2, r2, #1
 8016e90:	611a      	str	r2, [r3, #16]
 8016e92:	e007      	b.n	8016ea4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	691a      	ldr	r2, [r3, #16]
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	f022 0201 	bic.w	r2, r2, #1
 8016ea2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	691b      	ldr	r3, [r3, #16]
 8016eaa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	430a      	orrs	r2, r1
 8016eb8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	4a1b      	ldr	r2, [pc, #108]	; (8016f2c <HAL_ADC_Init+0x404>)
 8016ec0:	4293      	cmp	r3, r2
 8016ec2:	d002      	beq.n	8016eca <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8016ec4:	6878      	ldr	r0, [r7, #4]
 8016ec6:	f001 f909 	bl	80180dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	691b      	ldr	r3, [r3, #16]
 8016ece:	2b01      	cmp	r3, #1
 8016ed0:	d10c      	bne.n	8016eec <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ed8:	f023 010f 	bic.w	r1, r3, #15
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	69db      	ldr	r3, [r3, #28]
 8016ee0:	1e5a      	subs	r2, r3, #1
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	430a      	orrs	r2, r1
 8016ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8016eea:	e007      	b.n	8016efc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	f022 020f 	bic.w	r2, r2, #15
 8016efa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f00:	f023 0303 	bic.w	r3, r3, #3
 8016f04:	f043 0201 	orr.w	r2, r3, #1
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	661a      	str	r2, [r3, #96]	; 0x60
 8016f0c:	e007      	b.n	8016f1e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f12:	f043 0210 	orr.w	r2, r3, #16
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8016f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3724      	adds	r7, #36	; 0x24
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd90      	pop	{r4, r7, pc}
 8016f28:	ffffbffc 	.word	0xffffbffc
 8016f2c:	58026000 	.word	0x58026000
 8016f30:	fc00f81f 	.word	0xfc00f81f
 8016f34:	fc00f81e 	.word	0xfc00f81e

08016f38 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b086      	sub	sp, #24
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	4a5c      	ldr	r2, [pc, #368]	; (80170b8 <HAL_ADC_Start+0x180>)
 8016f46:	4293      	cmp	r3, r2
 8016f48:	d004      	beq.n	8016f54 <HAL_ADC_Start+0x1c>
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	4a5b      	ldr	r2, [pc, #364]	; (80170bc <HAL_ADC_Start+0x184>)
 8016f50:	4293      	cmp	r3, r2
 8016f52:	d101      	bne.n	8016f58 <HAL_ADC_Start+0x20>
 8016f54:	4b5a      	ldr	r3, [pc, #360]	; (80170c0 <HAL_ADC_Start+0x188>)
 8016f56:	e000      	b.n	8016f5a <HAL_ADC_Start+0x22>
 8016f58:	4b5a      	ldr	r3, [pc, #360]	; (80170c4 <HAL_ADC_Start+0x18c>)
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7ff fcc8 	bl	80168f0 <LL_ADC_GetMultimode>
 8016f60:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7ff fda2 	bl	8016ab0 <LL_ADC_REG_IsConversionOngoing>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	f040 809a 	bne.w	80170a8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8016f7a:	2b01      	cmp	r3, #1
 8016f7c:	d101      	bne.n	8016f82 <HAL_ADC_Start+0x4a>
 8016f7e:	2302      	movs	r3, #2
 8016f80:	e095      	b.n	80170ae <HAL_ADC_Start+0x176>
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	2201      	movs	r2, #1
 8016f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8016f8a:	6878      	ldr	r0, [r7, #4]
 8016f8c:	f000 ffbc 	bl	8017f08 <ADC_Enable>
 8016f90:	4603      	mov	r3, r0
 8016f92:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8016f94:	7dfb      	ldrb	r3, [r7, #23]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	f040 8081 	bne.w	801709e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8016fa0:	4b49      	ldr	r3, [pc, #292]	; (80170c8 <HAL_ADC_Start+0x190>)
 8016fa2:	4013      	ands	r3, r2
 8016fa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	4a42      	ldr	r2, [pc, #264]	; (80170bc <HAL_ADC_Start+0x184>)
 8016fb2:	4293      	cmp	r3, r2
 8016fb4:	d002      	beq.n	8016fbc <HAL_ADC_Start+0x84>
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	e000      	b.n	8016fbe <HAL_ADC_Start+0x86>
 8016fbc:	4b3e      	ldr	r3, [pc, #248]	; (80170b8 <HAL_ADC_Start+0x180>)
 8016fbe:	687a      	ldr	r2, [r7, #4]
 8016fc0:	6812      	ldr	r2, [r2, #0]
 8016fc2:	4293      	cmp	r3, r2
 8016fc4:	d002      	beq.n	8016fcc <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016fc6:	693b      	ldr	r3, [r7, #16]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d105      	bne.n	8016fd8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fd0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016fe4:	d106      	bne.n	8016ff4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016fea:	f023 0206 	bic.w	r2, r3, #6
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	665a      	str	r2, [r3, #100]	; 0x64
 8016ff2:	e002      	b.n	8016ffa <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	221c      	movs	r2, #28
 8017000:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	2200      	movs	r2, #0
 8017006:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	4a2b      	ldr	r2, [pc, #172]	; (80170bc <HAL_ADC_Start+0x184>)
 8017010:	4293      	cmp	r3, r2
 8017012:	d002      	beq.n	801701a <HAL_ADC_Start+0xe2>
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	e000      	b.n	801701c <HAL_ADC_Start+0xe4>
 801701a:	4b27      	ldr	r3, [pc, #156]	; (80170b8 <HAL_ADC_Start+0x180>)
 801701c:	687a      	ldr	r2, [r7, #4]
 801701e:	6812      	ldr	r2, [r2, #0]
 8017020:	4293      	cmp	r3, r2
 8017022:	d008      	beq.n	8017036 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d005      	beq.n	8017036 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	2b05      	cmp	r3, #5
 801702e:	d002      	beq.n	8017036 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	2b09      	cmp	r3, #9
 8017034:	d114      	bne.n	8017060 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	68db      	ldr	r3, [r3, #12]
 801703c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017040:	2b00      	cmp	r3, #0
 8017042:	d007      	beq.n	8017054 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017048:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801704c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	4618      	mov	r0, r3
 801705a:	f7ff fd01 	bl	8016a60 <LL_ADC_REG_StartConversion>
 801705e:	e025      	b.n	80170ac <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017064:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	4a12      	ldr	r2, [pc, #72]	; (80170bc <HAL_ADC_Start+0x184>)
 8017072:	4293      	cmp	r3, r2
 8017074:	d002      	beq.n	801707c <HAL_ADC_Start+0x144>
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	e000      	b.n	801707e <HAL_ADC_Start+0x146>
 801707c:	4b0e      	ldr	r3, [pc, #56]	; (80170b8 <HAL_ADC_Start+0x180>)
 801707e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	68db      	ldr	r3, [r3, #12]
 8017084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017088:	2b00      	cmp	r3, #0
 801708a:	d00f      	beq.n	80170ac <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017090:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8017094:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	661a      	str	r2, [r3, #96]	; 0x60
 801709c:	e006      	b.n	80170ac <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	2200      	movs	r2, #0
 80170a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80170a6:	e001      	b.n	80170ac <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80170a8:	2302      	movs	r3, #2
 80170aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80170ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80170ae:	4618      	mov	r0, r3
 80170b0:	3718      	adds	r7, #24
 80170b2:	46bd      	mov	sp, r7
 80170b4:	bd80      	pop	{r7, pc}
 80170b6:	bf00      	nop
 80170b8:	40022000 	.word	0x40022000
 80170bc:	40022100 	.word	0x40022100
 80170c0:	40022300 	.word	0x40022300
 80170c4:	58026300 	.word	0x58026300
 80170c8:	fffff0fe 	.word	0xfffff0fe

080170cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b084      	sub	sp, #16
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80170da:	2b01      	cmp	r3, #1
 80170dc:	d101      	bne.n	80170e2 <HAL_ADC_Stop+0x16>
 80170de:	2302      	movs	r3, #2
 80170e0:	e021      	b.n	8017126 <HAL_ADC_Stop+0x5a>
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2201      	movs	r2, #1
 80170e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80170ea:	2103      	movs	r1, #3
 80170ec:	6878      	ldr	r0, [r7, #4]
 80170ee:	f000 fe4f 	bl	8017d90 <ADC_ConversionStop>
 80170f2:	4603      	mov	r3, r0
 80170f4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80170f6:	7bfb      	ldrb	r3, [r7, #15]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d10f      	bne.n	801711c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80170fc:	6878      	ldr	r0, [r7, #4]
 80170fe:	f000 ff8d 	bl	801801c <ADC_Disable>
 8017102:	4603      	mov	r3, r0
 8017104:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8017106:	7bfb      	ldrb	r3, [r7, #15]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d107      	bne.n	801711c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017110:	4b07      	ldr	r3, [pc, #28]	; (8017130 <HAL_ADC_Stop+0x64>)
 8017112:	4013      	ands	r3, r2
 8017114:	f043 0201 	orr.w	r2, r3, #1
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2200      	movs	r2, #0
 8017120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8017124:	7bfb      	ldrb	r3, [r7, #15]
}
 8017126:	4618      	mov	r0, r3
 8017128:	3710      	adds	r7, #16
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	ffffeefe 	.word	0xffffeefe

08017134 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b088      	sub	sp, #32
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
 801713c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	4a72      	ldr	r2, [pc, #456]	; (801730c <HAL_ADC_PollForConversion+0x1d8>)
 8017144:	4293      	cmp	r3, r2
 8017146:	d004      	beq.n	8017152 <HAL_ADC_PollForConversion+0x1e>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	4a70      	ldr	r2, [pc, #448]	; (8017310 <HAL_ADC_PollForConversion+0x1dc>)
 801714e:	4293      	cmp	r3, r2
 8017150:	d101      	bne.n	8017156 <HAL_ADC_PollForConversion+0x22>
 8017152:	4b70      	ldr	r3, [pc, #448]	; (8017314 <HAL_ADC_PollForConversion+0x1e0>)
 8017154:	e000      	b.n	8017158 <HAL_ADC_PollForConversion+0x24>
 8017156:	4b70      	ldr	r3, [pc, #448]	; (8017318 <HAL_ADC_PollForConversion+0x1e4>)
 8017158:	4618      	mov	r0, r3
 801715a:	f7ff fbc9 	bl	80168f0 <LL_ADC_GetMultimode>
 801715e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	695b      	ldr	r3, [r3, #20]
 8017164:	2b08      	cmp	r3, #8
 8017166:	d102      	bne.n	801716e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8017168:	2308      	movs	r3, #8
 801716a:	61fb      	str	r3, [r7, #28]
 801716c:	e037      	b.n	80171de <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d005      	beq.n	8017180 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	2b05      	cmp	r3, #5
 8017178:	d002      	beq.n	8017180 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801717a:	697b      	ldr	r3, [r7, #20]
 801717c:	2b09      	cmp	r3, #9
 801717e:	d111      	bne.n	80171a4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	68db      	ldr	r3, [r3, #12]
 8017186:	f003 0301 	and.w	r3, r3, #1
 801718a:	2b00      	cmp	r3, #0
 801718c:	d007      	beq.n	801719e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017192:	f043 0220 	orr.w	r2, r3, #32
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 801719a:	2301      	movs	r3, #1
 801719c:	e0b1      	b.n	8017302 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801719e:	2304      	movs	r3, #4
 80171a0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80171a2:	e01c      	b.n	80171de <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	4a58      	ldr	r2, [pc, #352]	; (801730c <HAL_ADC_PollForConversion+0x1d8>)
 80171aa:	4293      	cmp	r3, r2
 80171ac:	d004      	beq.n	80171b8 <HAL_ADC_PollForConversion+0x84>
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	4a57      	ldr	r2, [pc, #348]	; (8017310 <HAL_ADC_PollForConversion+0x1dc>)
 80171b4:	4293      	cmp	r3, r2
 80171b6:	d101      	bne.n	80171bc <HAL_ADC_PollForConversion+0x88>
 80171b8:	4b56      	ldr	r3, [pc, #344]	; (8017314 <HAL_ADC_PollForConversion+0x1e0>)
 80171ba:	e000      	b.n	80171be <HAL_ADC_PollForConversion+0x8a>
 80171bc:	4b56      	ldr	r3, [pc, #344]	; (8017318 <HAL_ADC_PollForConversion+0x1e4>)
 80171be:	4618      	mov	r0, r3
 80171c0:	f7ff fba4 	bl	801690c <LL_ADC_GetMultiDMATransfer>
 80171c4:	4603      	mov	r3, r0
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d007      	beq.n	80171da <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80171ce:	f043 0220 	orr.w	r2, r3, #32
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80171d6:	2301      	movs	r3, #1
 80171d8:	e093      	b.n	8017302 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80171da:	2304      	movs	r3, #4
 80171dc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80171de:	f7ff f987 	bl	80164f0 <HAL_GetTick>
 80171e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80171e4:	e021      	b.n	801722a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171ec:	d01d      	beq.n	801722a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80171ee:	f7ff f97f 	bl	80164f0 <HAL_GetTick>
 80171f2:	4602      	mov	r2, r0
 80171f4:	693b      	ldr	r3, [r7, #16]
 80171f6:	1ad3      	subs	r3, r2, r3
 80171f8:	683a      	ldr	r2, [r7, #0]
 80171fa:	429a      	cmp	r2, r3
 80171fc:	d302      	bcc.n	8017204 <HAL_ADC_PollForConversion+0xd0>
 80171fe:	683b      	ldr	r3, [r7, #0]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d112      	bne.n	801722a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	681a      	ldr	r2, [r3, #0]
 801720a:	69fb      	ldr	r3, [r7, #28]
 801720c:	4013      	ands	r3, r2
 801720e:	2b00      	cmp	r3, #0
 8017210:	d10b      	bne.n	801722a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017216:	f043 0204 	orr.w	r2, r3, #4
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	2200      	movs	r2, #0
 8017222:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8017226:	2303      	movs	r3, #3
 8017228:	e06b      	b.n	8017302 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	681a      	ldr	r2, [r3, #0]
 8017230:	69fb      	ldr	r3, [r7, #28]
 8017232:	4013      	ands	r3, r2
 8017234:	2b00      	cmp	r3, #0
 8017236:	d0d6      	beq.n	80171e6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801723c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	4618      	mov	r0, r3
 801724a:	f7ff faa7 	bl	801679c <LL_ADC_REG_IsTriggerSourceSWStart>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d01c      	beq.n	801728e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	7e5b      	ldrb	r3, [r3, #25]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d118      	bne.n	801728e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	f003 0308 	and.w	r3, r3, #8
 8017266:	2b08      	cmp	r3, #8
 8017268:	d111      	bne.n	801728e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801726e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801727a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801727e:	2b00      	cmp	r3, #0
 8017280:	d105      	bne.n	801728e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017286:	f043 0201 	orr.w	r2, r3, #1
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	4a1f      	ldr	r2, [pc, #124]	; (8017310 <HAL_ADC_PollForConversion+0x1dc>)
 8017294:	4293      	cmp	r3, r2
 8017296:	d002      	beq.n	801729e <HAL_ADC_PollForConversion+0x16a>
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	e000      	b.n	80172a0 <HAL_ADC_PollForConversion+0x16c>
 801729e:	4b1b      	ldr	r3, [pc, #108]	; (801730c <HAL_ADC_PollForConversion+0x1d8>)
 80172a0:	687a      	ldr	r2, [r7, #4]
 80172a2:	6812      	ldr	r2, [r2, #0]
 80172a4:	4293      	cmp	r3, r2
 80172a6:	d008      	beq.n	80172ba <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80172a8:	697b      	ldr	r3, [r7, #20]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d005      	beq.n	80172ba <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	2b05      	cmp	r3, #5
 80172b2:	d002      	beq.n	80172ba <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	2b09      	cmp	r3, #9
 80172b8:	d104      	bne.n	80172c4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	61bb      	str	r3, [r7, #24]
 80172c2:	e00c      	b.n	80172de <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	4a11      	ldr	r2, [pc, #68]	; (8017310 <HAL_ADC_PollForConversion+0x1dc>)
 80172ca:	4293      	cmp	r3, r2
 80172cc:	d002      	beq.n	80172d4 <HAL_ADC_PollForConversion+0x1a0>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	e000      	b.n	80172d6 <HAL_ADC_PollForConversion+0x1a2>
 80172d4:	4b0d      	ldr	r3, [pc, #52]	; (801730c <HAL_ADC_PollForConversion+0x1d8>)
 80172d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	68db      	ldr	r3, [r3, #12]
 80172dc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80172de:	69fb      	ldr	r3, [r7, #28]
 80172e0:	2b08      	cmp	r3, #8
 80172e2:	d104      	bne.n	80172ee <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	2208      	movs	r2, #8
 80172ea:	601a      	str	r2, [r3, #0]
 80172ec:	e008      	b.n	8017300 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d103      	bne.n	8017300 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	220c      	movs	r2, #12
 80172fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8017300:	2300      	movs	r3, #0
}
 8017302:	4618      	mov	r0, r3
 8017304:	3720      	adds	r7, #32
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}
 801730a:	bf00      	nop
 801730c:	40022000 	.word	0x40022000
 8017310:	40022100 	.word	0x40022100
 8017314:	40022300 	.word	0x40022300
 8017318:	58026300 	.word	0x58026300

0801731c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801731c:	b480      	push	{r7}
 801731e:	b083      	sub	sp, #12
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801732a:	4618      	mov	r0, r3
 801732c:	370c      	adds	r7, #12
 801732e:	46bd      	mov	sp, r7
 8017330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017334:	4770      	bx	lr
	...

08017338 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8017338:	b590      	push	{r4, r7, lr}
 801733a:	b0b9      	sub	sp, #228	; 0xe4
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
 8017340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017342:	2300      	movs	r3, #0
 8017344:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8017348:	2300      	movs	r3, #0
 801734a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017352:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	68db      	ldr	r3, [r3, #12]
 8017358:	4ab3      	ldr	r2, [pc, #716]	; (8017628 <HAL_ADC_ConfigChannel+0x2f0>)
 801735a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017362:	2b01      	cmp	r3, #1
 8017364:	d102      	bne.n	801736c <HAL_ADC_ConfigChannel+0x34>
 8017366:	2302      	movs	r3, #2
 8017368:	f000 bcfa 	b.w	8017d60 <HAL_ADC_ConfigChannel+0xa28>
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2201      	movs	r2, #1
 8017370:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	4618      	mov	r0, r3
 801737a:	f7ff fb99 	bl	8016ab0 <LL_ADC_REG_IsConversionOngoing>
 801737e:	4603      	mov	r3, r0
 8017380:	2b00      	cmp	r3, #0
 8017382:	f040 84de 	bne.w	8017d42 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	4aa8      	ldr	r2, [pc, #672]	; (801762c <HAL_ADC_ConfigChannel+0x2f4>)
 801738c:	4293      	cmp	r3, r2
 801738e:	d033      	beq.n	80173f8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017398:	2b00      	cmp	r3, #0
 801739a:	d108      	bne.n	80173ae <HAL_ADC_ConfigChannel+0x76>
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	0e9b      	lsrs	r3, r3, #26
 80173a2:	f003 031f 	and.w	r3, r3, #31
 80173a6:	2201      	movs	r2, #1
 80173a8:	fa02 f303 	lsl.w	r3, r2, r3
 80173ac:	e01d      	b.n	80173ea <HAL_ADC_ConfigChannel+0xb2>
 80173ae:	683b      	ldr	r3, [r7, #0]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80173b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80173ba:	fa93 f3a3 	rbit	r3, r3
 80173be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 80173c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80173c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 80173ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d101      	bne.n	80173d6 <HAL_ADC_ConfigChannel+0x9e>
    return 32U;
 80173d2:	2320      	movs	r3, #32
 80173d4:	e004      	b.n	80173e0 <HAL_ADC_ConfigChannel+0xa8>
  return __builtin_clz(value);
 80173d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80173da:	fab3 f383 	clz	r3, r3
 80173de:	b2db      	uxtb	r3, r3
 80173e0:	f003 031f 	and.w	r3, r3, #31
 80173e4:	2201      	movs	r2, #1
 80173e6:	fa02 f303 	lsl.w	r3, r2, r3
 80173ea:	687a      	ldr	r2, [r7, #4]
 80173ec:	6812      	ldr	r2, [r2, #0]
 80173ee:	69d1      	ldr	r1, [r2, #28]
 80173f0:	687a      	ldr	r2, [r7, #4]
 80173f2:	6812      	ldr	r2, [r2, #0]
 80173f4:	430b      	orrs	r3, r1
 80173f6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6818      	ldr	r0, [r3, #0]
 80173fc:	683b      	ldr	r3, [r7, #0]
 80173fe:	6859      	ldr	r1, [r3, #4]
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	461a      	mov	r2, r3
 8017406:	f7ff f9dc 	bl	80167c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	4618      	mov	r0, r3
 8017410:	f7ff fb4e 	bl	8016ab0 <LL_ADC_REG_IsConversionOngoing>
 8017414:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	4618      	mov	r0, r3
 801741e:	f7ff fb6f 	bl	8016b00 <LL_ADC_INJ_IsConversionOngoing>
 8017422:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8017426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801742a:	2b00      	cmp	r3, #0
 801742c:	f040 8270 	bne.w	8017910 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8017430:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017434:	2b00      	cmp	r3, #0
 8017436:	f040 826b 	bne.w	8017910 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6818      	ldr	r0, [r3, #0]
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	6819      	ldr	r1, [r3, #0]
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	689b      	ldr	r3, [r3, #8]
 8017446:	461a      	mov	r2, r3
 8017448:	f7ff f9e7 	bl	801681a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	4a76      	ldr	r2, [pc, #472]	; (801762c <HAL_ADC_ConfigChannel+0x2f4>)
 8017452:	4293      	cmp	r3, r2
 8017454:	d10d      	bne.n	8017472 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	695a      	ldr	r2, [r3, #20]
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	68db      	ldr	r3, [r3, #12]
 8017460:	08db      	lsrs	r3, r3, #3
 8017462:	f003 0303 	and.w	r3, r3, #3
 8017466:	005b      	lsls	r3, r3, #1
 8017468:	fa02 f303 	lsl.w	r3, r2, r3
 801746c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017470:	e032      	b.n	80174d8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8017472:	4b6f      	ldr	r3, [pc, #444]	; (8017630 <HAL_ADC_ConfigChannel+0x2f8>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801747a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801747e:	d10b      	bne.n	8017498 <HAL_ADC_ConfigChannel+0x160>
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	695a      	ldr	r2, [r3, #20]
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	68db      	ldr	r3, [r3, #12]
 801748a:	089b      	lsrs	r3, r3, #2
 801748c:	f003 0307 	and.w	r3, r3, #7
 8017490:	005b      	lsls	r3, r3, #1
 8017492:	fa02 f303 	lsl.w	r3, r2, r3
 8017496:	e01d      	b.n	80174d4 <HAL_ADC_ConfigChannel+0x19c>
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	68db      	ldr	r3, [r3, #12]
 801749e:	f003 0310 	and.w	r3, r3, #16
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d10b      	bne.n	80174be <HAL_ADC_ConfigChannel+0x186>
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	695a      	ldr	r2, [r3, #20]
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	68db      	ldr	r3, [r3, #12]
 80174b0:	089b      	lsrs	r3, r3, #2
 80174b2:	f003 0307 	and.w	r3, r3, #7
 80174b6:	005b      	lsls	r3, r3, #1
 80174b8:	fa02 f303 	lsl.w	r3, r2, r3
 80174bc:	e00a      	b.n	80174d4 <HAL_ADC_ConfigChannel+0x19c>
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	695a      	ldr	r2, [r3, #20]
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	68db      	ldr	r3, [r3, #12]
 80174c8:	089b      	lsrs	r3, r3, #2
 80174ca:	f003 0304 	and.w	r3, r3, #4
 80174ce:	005b      	lsls	r3, r3, #1
 80174d0:	fa02 f303 	lsl.w	r3, r2, r3
 80174d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	691b      	ldr	r3, [r3, #16]
 80174dc:	2b04      	cmp	r3, #4
 80174de:	d048      	beq.n	8017572 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	6818      	ldr	r0, [r3, #0]
 80174e4:	683b      	ldr	r3, [r7, #0]
 80174e6:	6919      	ldr	r1, [r3, #16]
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	681a      	ldr	r2, [r3, #0]
 80174ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80174f0:	f7ff f862 	bl	80165b8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	4a4c      	ldr	r2, [pc, #304]	; (801762c <HAL_ADC_ConfigChannel+0x2f4>)
 80174fa:	4293      	cmp	r3, r2
 80174fc:	d119      	bne.n	8017532 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	6818      	ldr	r0, [r3, #0]
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	6919      	ldr	r1, [r3, #16]
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	69db      	ldr	r3, [r3, #28]
 801750a:	461a      	mov	r2, r3
 801750c:	f7ff f8fa 	bl	8016704 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	6818      	ldr	r0, [r3, #0]
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	6919      	ldr	r1, [r3, #16]
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801751e:	2b01      	cmp	r3, #1
 8017520:	d102      	bne.n	8017528 <HAL_ADC_ConfigChannel+0x1f0>
 8017522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017526:	e000      	b.n	801752a <HAL_ADC_ConfigChannel+0x1f2>
 8017528:	2300      	movs	r3, #0
 801752a:	461a      	mov	r2, r3
 801752c:	f7ff f8c8 	bl	80166c0 <LL_ADC_SetOffsetSaturation>
 8017530:	e1ee      	b.n	8017910 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	6818      	ldr	r0, [r3, #0]
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	6919      	ldr	r1, [r3, #16]
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017540:	2b01      	cmp	r3, #1
 8017542:	d102      	bne.n	801754a <HAL_ADC_ConfigChannel+0x212>
 8017544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017548:	e000      	b.n	801754c <HAL_ADC_ConfigChannel+0x214>
 801754a:	2300      	movs	r3, #0
 801754c:	461a      	mov	r2, r3
 801754e:	f7ff f895 	bl	801667c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	6818      	ldr	r0, [r3, #0]
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	6919      	ldr	r1, [r3, #16]
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	7e1b      	ldrb	r3, [r3, #24]
 801755e:	2b01      	cmp	r3, #1
 8017560:	d102      	bne.n	8017568 <HAL_ADC_ConfigChannel+0x230>
 8017562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017566:	e000      	b.n	801756a <HAL_ADC_ConfigChannel+0x232>
 8017568:	2300      	movs	r3, #0
 801756a:	461a      	mov	r2, r3
 801756c:	f7ff f86c 	bl	8016648 <LL_ADC_SetDataRightShift>
 8017570:	e1ce      	b.n	8017910 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	4a2d      	ldr	r2, [pc, #180]	; (801762c <HAL_ADC_ConfigChannel+0x2f4>)
 8017578:	4293      	cmp	r3, r2
 801757a:	f040 8181 	bne.w	8017880 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2100      	movs	r1, #0
 8017584:	4618      	mov	r0, r3
 8017586:	f7ff f849 	bl	801661c <LL_ADC_GetOffsetChannel>
 801758a:	4603      	mov	r3, r0
 801758c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017590:	2b00      	cmp	r3, #0
 8017592:	d10a      	bne.n	80175aa <HAL_ADC_ConfigChannel+0x272>
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	2100      	movs	r1, #0
 801759a:	4618      	mov	r0, r3
 801759c:	f7ff f83e 	bl	801661c <LL_ADC_GetOffsetChannel>
 80175a0:	4603      	mov	r3, r0
 80175a2:	0e9b      	lsrs	r3, r3, #26
 80175a4:	f003 021f 	and.w	r2, r3, #31
 80175a8:	e01e      	b.n	80175e8 <HAL_ADC_ConfigChannel+0x2b0>
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	2100      	movs	r1, #0
 80175b0:	4618      	mov	r0, r3
 80175b2:	f7ff f833 	bl	801661c <LL_ADC_GetOffsetChannel>
 80175b6:	4603      	mov	r3, r0
 80175b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80175bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80175c0:	fa93 f3a3 	rbit	r3, r3
 80175c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80175c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80175cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80175d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d101      	bne.n	80175dc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80175d8:	2320      	movs	r3, #32
 80175da:	e004      	b.n	80175e6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80175dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80175e0:	fab3 f383 	clz	r3, r3
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	461a      	mov	r2, r3
 80175e8:	683b      	ldr	r3, [r7, #0]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d105      	bne.n	8017600 <HAL_ADC_ConfigChannel+0x2c8>
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	0e9b      	lsrs	r3, r3, #26
 80175fa:	f003 031f 	and.w	r3, r3, #31
 80175fe:	e01e      	b.n	801763e <HAL_ADC_ConfigChannel+0x306>
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801760c:	fa93 f3a3 	rbit	r3, r3
 8017610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8017614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 801761c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017620:	2b00      	cmp	r3, #0
 8017622:	d107      	bne.n	8017634 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8017624:	2320      	movs	r3, #32
 8017626:	e00a      	b.n	801763e <HAL_ADC_ConfigChannel+0x306>
 8017628:	47ff0000 	.word	0x47ff0000
 801762c:	58026000 	.word	0x58026000
 8017630:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8017634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017638:	fab3 f383 	clz	r3, r3
 801763c:	b2db      	uxtb	r3, r3
 801763e:	429a      	cmp	r2, r3
 8017640:	d106      	bne.n	8017650 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	2200      	movs	r2, #0
 8017648:	2100      	movs	r1, #0
 801764a:	4618      	mov	r0, r3
 801764c:	f7ff f87c 	bl	8016748 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	2101      	movs	r1, #1
 8017656:	4618      	mov	r0, r3
 8017658:	f7fe ffe0 	bl	801661c <LL_ADC_GetOffsetChannel>
 801765c:	4603      	mov	r3, r0
 801765e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017662:	2b00      	cmp	r3, #0
 8017664:	d10a      	bne.n	801767c <HAL_ADC_ConfigChannel+0x344>
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	2101      	movs	r1, #1
 801766c:	4618      	mov	r0, r3
 801766e:	f7fe ffd5 	bl	801661c <LL_ADC_GetOffsetChannel>
 8017672:	4603      	mov	r3, r0
 8017674:	0e9b      	lsrs	r3, r3, #26
 8017676:	f003 021f 	and.w	r2, r3, #31
 801767a:	e01e      	b.n	80176ba <HAL_ADC_ConfigChannel+0x382>
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	2101      	movs	r1, #1
 8017682:	4618      	mov	r0, r3
 8017684:	f7fe ffca 	bl	801661c <LL_ADC_GetOffsetChannel>
 8017688:	4603      	mov	r3, r0
 801768a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801768e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017692:	fa93 f3a3 	rbit	r3, r3
 8017696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 801769a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801769e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80176a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d101      	bne.n	80176ae <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80176aa:	2320      	movs	r3, #32
 80176ac:	e004      	b.n	80176b8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80176ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80176b2:	fab3 f383 	clz	r3, r3
 80176b6:	b2db      	uxtb	r3, r3
 80176b8:	461a      	mov	r2, r3
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d105      	bne.n	80176d2 <HAL_ADC_ConfigChannel+0x39a>
 80176c6:	683b      	ldr	r3, [r7, #0]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	0e9b      	lsrs	r3, r3, #26
 80176cc:	f003 031f 	and.w	r3, r3, #31
 80176d0:	e018      	b.n	8017704 <HAL_ADC_ConfigChannel+0x3cc>
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80176da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80176de:	fa93 f3a3 	rbit	r3, r3
 80176e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80176e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80176ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80176ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d101      	bne.n	80176fa <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80176f6:	2320      	movs	r3, #32
 80176f8:	e004      	b.n	8017704 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80176fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80176fe:	fab3 f383 	clz	r3, r3
 8017702:	b2db      	uxtb	r3, r3
 8017704:	429a      	cmp	r2, r3
 8017706:	d106      	bne.n	8017716 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	2200      	movs	r2, #0
 801770e:	2101      	movs	r1, #1
 8017710:	4618      	mov	r0, r3
 8017712:	f7ff f819 	bl	8016748 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	2102      	movs	r1, #2
 801771c:	4618      	mov	r0, r3
 801771e:	f7fe ff7d 	bl	801661c <LL_ADC_GetOffsetChannel>
 8017722:	4603      	mov	r3, r0
 8017724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017728:	2b00      	cmp	r3, #0
 801772a:	d10a      	bne.n	8017742 <HAL_ADC_ConfigChannel+0x40a>
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	2102      	movs	r1, #2
 8017732:	4618      	mov	r0, r3
 8017734:	f7fe ff72 	bl	801661c <LL_ADC_GetOffsetChannel>
 8017738:	4603      	mov	r3, r0
 801773a:	0e9b      	lsrs	r3, r3, #26
 801773c:	f003 021f 	and.w	r2, r3, #31
 8017740:	e01e      	b.n	8017780 <HAL_ADC_ConfigChannel+0x448>
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	2102      	movs	r1, #2
 8017748:	4618      	mov	r0, r3
 801774a:	f7fe ff67 	bl	801661c <LL_ADC_GetOffsetChannel>
 801774e:	4603      	mov	r3, r0
 8017750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017758:	fa93 f3a3 	rbit	r3, r3
 801775c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8017760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8017768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801776c:	2b00      	cmp	r3, #0
 801776e:	d101      	bne.n	8017774 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8017770:	2320      	movs	r3, #32
 8017772:	e004      	b.n	801777e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8017774:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017778:	fab3 f383 	clz	r3, r3
 801777c:	b2db      	uxtb	r3, r3
 801777e:	461a      	mov	r2, r3
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017788:	2b00      	cmp	r3, #0
 801778a:	d105      	bne.n	8017798 <HAL_ADC_ConfigChannel+0x460>
 801778c:	683b      	ldr	r3, [r7, #0]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	0e9b      	lsrs	r3, r3, #26
 8017792:	f003 031f 	and.w	r3, r3, #31
 8017796:	e014      	b.n	80177c2 <HAL_ADC_ConfigChannel+0x48a>
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801779e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80177a0:	fa93 f3a3 	rbit	r3, r3
 80177a4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80177a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80177a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80177ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d101      	bne.n	80177b8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80177b4:	2320      	movs	r3, #32
 80177b6:	e004      	b.n	80177c2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80177b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80177bc:	fab3 f383 	clz	r3, r3
 80177c0:	b2db      	uxtb	r3, r3
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d106      	bne.n	80177d4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	2200      	movs	r2, #0
 80177cc:	2102      	movs	r1, #2
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7fe ffba 	bl	8016748 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	2103      	movs	r1, #3
 80177da:	4618      	mov	r0, r3
 80177dc:	f7fe ff1e 	bl	801661c <LL_ADC_GetOffsetChannel>
 80177e0:	4603      	mov	r3, r0
 80177e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d10a      	bne.n	8017800 <HAL_ADC_ConfigChannel+0x4c8>
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	2103      	movs	r1, #3
 80177f0:	4618      	mov	r0, r3
 80177f2:	f7fe ff13 	bl	801661c <LL_ADC_GetOffsetChannel>
 80177f6:	4603      	mov	r3, r0
 80177f8:	0e9b      	lsrs	r3, r3, #26
 80177fa:	f003 021f 	and.w	r2, r3, #31
 80177fe:	e017      	b.n	8017830 <HAL_ADC_ConfigChannel+0x4f8>
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	2103      	movs	r1, #3
 8017806:	4618      	mov	r0, r3
 8017808:	f7fe ff08 	bl	801661c <LL_ADC_GetOffsetChannel>
 801780c:	4603      	mov	r3, r0
 801780e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017812:	fa93 f3a3 	rbit	r3, r3
 8017816:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8017818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801781a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 801781c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801781e:	2b00      	cmp	r3, #0
 8017820:	d101      	bne.n	8017826 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8017822:	2320      	movs	r3, #32
 8017824:	e003      	b.n	801782e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8017826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017828:	fab3 f383 	clz	r3, r3
 801782c:	b2db      	uxtb	r3, r3
 801782e:	461a      	mov	r2, r3
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017838:	2b00      	cmp	r3, #0
 801783a:	d105      	bne.n	8017848 <HAL_ADC_ConfigChannel+0x510>
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	0e9b      	lsrs	r3, r3, #26
 8017842:	f003 031f 	and.w	r3, r3, #31
 8017846:	e011      	b.n	801786c <HAL_ADC_ConfigChannel+0x534>
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801784e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017850:	fa93 f3a3 	rbit	r3, r3
 8017854:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8017856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017858:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 801785a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801785c:	2b00      	cmp	r3, #0
 801785e:	d101      	bne.n	8017864 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8017860:	2320      	movs	r3, #32
 8017862:	e003      	b.n	801786c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8017864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017866:	fab3 f383 	clz	r3, r3
 801786a:	b2db      	uxtb	r3, r3
 801786c:	429a      	cmp	r2, r3
 801786e:	d14f      	bne.n	8017910 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	2200      	movs	r2, #0
 8017876:	2103      	movs	r1, #3
 8017878:	4618      	mov	r0, r3
 801787a:	f7fe ff65 	bl	8016748 <LL_ADC_SetOffsetState>
 801787e:	e047      	b.n	8017910 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	069b      	lsls	r3, r3, #26
 8017890:	429a      	cmp	r2, r3
 8017892:	d107      	bne.n	80178a4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80178a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80178aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	069b      	lsls	r3, r3, #26
 80178b4:	429a      	cmp	r2, r3
 80178b6:	d107      	bne.n	80178c8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80178c6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80178ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80178d2:	683b      	ldr	r3, [r7, #0]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	069b      	lsls	r3, r3, #26
 80178d8:	429a      	cmp	r2, r3
 80178da:	d107      	bne.n	80178ec <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80178ea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	069b      	lsls	r3, r3, #26
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d107      	bne.n	8017910 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801790e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	4618      	mov	r0, r3
 8017916:	f7ff f87d 	bl	8016a14 <LL_ADC_IsEnabled>
 801791a:	4603      	mov	r3, r0
 801791c:	2b00      	cmp	r3, #0
 801791e:	f040 8219 	bne.w	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	6818      	ldr	r0, [r3, #0]
 8017926:	683b      	ldr	r3, [r7, #0]
 8017928:	6819      	ldr	r1, [r3, #0]
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	68db      	ldr	r3, [r3, #12]
 801792e:	461a      	mov	r2, r3
 8017930:	f7fe ff9e 	bl	8016870 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	68db      	ldr	r3, [r3, #12]
 8017938:	4aa1      	ldr	r2, [pc, #644]	; (8017bc0 <HAL_ADC_ConfigChannel+0x888>)
 801793a:	4293      	cmp	r3, r2
 801793c:	f040 812e 	bne.w	8017b9c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801794c:	2b00      	cmp	r3, #0
 801794e:	d10b      	bne.n	8017968 <HAL_ADC_ConfigChannel+0x630>
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	0e9b      	lsrs	r3, r3, #26
 8017956:	3301      	adds	r3, #1
 8017958:	f003 031f 	and.w	r3, r3, #31
 801795c:	2b09      	cmp	r3, #9
 801795e:	bf94      	ite	ls
 8017960:	2301      	movls	r3, #1
 8017962:	2300      	movhi	r3, #0
 8017964:	b2db      	uxtb	r3, r3
 8017966:	e019      	b.n	801799c <HAL_ADC_ConfigChannel+0x664>
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801796e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017970:	fa93 f3a3 	rbit	r3, r3
 8017974:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8017976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017978:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 801797a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801797c:	2b00      	cmp	r3, #0
 801797e:	d101      	bne.n	8017984 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8017980:	2320      	movs	r3, #32
 8017982:	e003      	b.n	801798c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8017984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017986:	fab3 f383 	clz	r3, r3
 801798a:	b2db      	uxtb	r3, r3
 801798c:	3301      	adds	r3, #1
 801798e:	f003 031f 	and.w	r3, r3, #31
 8017992:	2b09      	cmp	r3, #9
 8017994:	bf94      	ite	ls
 8017996:	2301      	movls	r3, #1
 8017998:	2300      	movhi	r3, #0
 801799a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801799c:	2b00      	cmp	r3, #0
 801799e:	d079      	beq.n	8017a94 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d107      	bne.n	80179bc <HAL_ADC_ConfigChannel+0x684>
 80179ac:	683b      	ldr	r3, [r7, #0]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	0e9b      	lsrs	r3, r3, #26
 80179b2:	3301      	adds	r3, #1
 80179b4:	069b      	lsls	r3, r3, #26
 80179b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80179ba:	e015      	b.n	80179e8 <HAL_ADC_ConfigChannel+0x6b0>
 80179bc:	683b      	ldr	r3, [r7, #0]
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80179c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80179c4:	fa93 f3a3 	rbit	r3, r3
 80179c8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80179ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80179cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80179ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d101      	bne.n	80179d8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80179d4:	2320      	movs	r3, #32
 80179d6:	e003      	b.n	80179e0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80179d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179da:	fab3 f383 	clz	r3, r3
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	3301      	adds	r3, #1
 80179e2:	069b      	lsls	r3, r3, #26
 80179e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d109      	bne.n	8017a08 <HAL_ADC_ConfigChannel+0x6d0>
 80179f4:	683b      	ldr	r3, [r7, #0]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	0e9b      	lsrs	r3, r3, #26
 80179fa:	3301      	adds	r3, #1
 80179fc:	f003 031f 	and.w	r3, r3, #31
 8017a00:	2101      	movs	r1, #1
 8017a02:	fa01 f303 	lsl.w	r3, r1, r3
 8017a06:	e017      	b.n	8017a38 <HAL_ADC_ConfigChannel+0x700>
 8017a08:	683b      	ldr	r3, [r7, #0]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a10:	fa93 f3a3 	rbit	r3, r3
 8017a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8017a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a18:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8017a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d101      	bne.n	8017a24 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8017a20:	2320      	movs	r3, #32
 8017a22:	e003      	b.n	8017a2c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8017a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a26:	fab3 f383 	clz	r3, r3
 8017a2a:	b2db      	uxtb	r3, r3
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	f003 031f 	and.w	r3, r3, #31
 8017a32:	2101      	movs	r1, #1
 8017a34:	fa01 f303 	lsl.w	r3, r1, r3
 8017a38:	ea42 0103 	orr.w	r1, r2, r3
 8017a3c:	683b      	ldr	r3, [r7, #0]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d10a      	bne.n	8017a5e <HAL_ADC_ConfigChannel+0x726>
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	0e9b      	lsrs	r3, r3, #26
 8017a4e:	3301      	adds	r3, #1
 8017a50:	f003 021f 	and.w	r2, r3, #31
 8017a54:	4613      	mov	r3, r2
 8017a56:	005b      	lsls	r3, r3, #1
 8017a58:	4413      	add	r3, r2
 8017a5a:	051b      	lsls	r3, r3, #20
 8017a5c:	e018      	b.n	8017a90 <HAL_ADC_ConfigChannel+0x758>
 8017a5e:	683b      	ldr	r3, [r7, #0]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a66:	fa93 f3a3 	rbit	r3, r3
 8017a6a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8017a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8017a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d101      	bne.n	8017a7a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8017a76:	2320      	movs	r3, #32
 8017a78:	e003      	b.n	8017a82 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8017a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a7c:	fab3 f383 	clz	r3, r3
 8017a80:	b2db      	uxtb	r3, r3
 8017a82:	3301      	adds	r3, #1
 8017a84:	f003 021f 	and.w	r2, r3, #31
 8017a88:	4613      	mov	r3, r2
 8017a8a:	005b      	lsls	r3, r3, #1
 8017a8c:	4413      	add	r3, r2
 8017a8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8017a90:	430b      	orrs	r3, r1
 8017a92:	e07e      	b.n	8017b92 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d107      	bne.n	8017ab0 <HAL_ADC_ConfigChannel+0x778>
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	0e9b      	lsrs	r3, r3, #26
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	069b      	lsls	r3, r3, #26
 8017aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8017aae:	e015      	b.n	8017adc <HAL_ADC_ConfigChannel+0x7a4>
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ab8:	fa93 f3a3 	rbit	r3, r3
 8017abc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8017abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8017ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d101      	bne.n	8017acc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8017ac8:	2320      	movs	r3, #32
 8017aca:	e003      	b.n	8017ad4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8017acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ace:	fab3 f383 	clz	r3, r3
 8017ad2:	b2db      	uxtb	r3, r3
 8017ad4:	3301      	adds	r3, #1
 8017ad6:	069b      	lsls	r3, r3, #26
 8017ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d109      	bne.n	8017afc <HAL_ADC_ConfigChannel+0x7c4>
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	0e9b      	lsrs	r3, r3, #26
 8017aee:	3301      	adds	r3, #1
 8017af0:	f003 031f 	and.w	r3, r3, #31
 8017af4:	2101      	movs	r1, #1
 8017af6:	fa01 f303 	lsl.w	r3, r1, r3
 8017afa:	e017      	b.n	8017b2c <HAL_ADC_ConfigChannel+0x7f4>
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017b02:	69fb      	ldr	r3, [r7, #28]
 8017b04:	fa93 f3a3 	rbit	r3, r3
 8017b08:	61bb      	str	r3, [r7, #24]
  return result;
 8017b0a:	69bb      	ldr	r3, [r7, #24]
 8017b0c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8017b0e:	6a3b      	ldr	r3, [r7, #32]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d101      	bne.n	8017b18 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8017b14:	2320      	movs	r3, #32
 8017b16:	e003      	b.n	8017b20 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8017b18:	6a3b      	ldr	r3, [r7, #32]
 8017b1a:	fab3 f383 	clz	r3, r3
 8017b1e:	b2db      	uxtb	r3, r3
 8017b20:	3301      	adds	r3, #1
 8017b22:	f003 031f 	and.w	r3, r3, #31
 8017b26:	2101      	movs	r1, #1
 8017b28:	fa01 f303 	lsl.w	r3, r1, r3
 8017b2c:	ea42 0103 	orr.w	r1, r2, r3
 8017b30:	683b      	ldr	r3, [r7, #0]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d10d      	bne.n	8017b58 <HAL_ADC_ConfigChannel+0x820>
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	0e9b      	lsrs	r3, r3, #26
 8017b42:	3301      	adds	r3, #1
 8017b44:	f003 021f 	and.w	r2, r3, #31
 8017b48:	4613      	mov	r3, r2
 8017b4a:	005b      	lsls	r3, r3, #1
 8017b4c:	4413      	add	r3, r2
 8017b4e:	3b1e      	subs	r3, #30
 8017b50:	051b      	lsls	r3, r3, #20
 8017b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017b56:	e01b      	b.n	8017b90 <HAL_ADC_ConfigChannel+0x858>
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	fa93 f3a3 	rbit	r3, r3
 8017b64:	60fb      	str	r3, [r7, #12]
  return result;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d101      	bne.n	8017b74 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8017b70:	2320      	movs	r3, #32
 8017b72:	e003      	b.n	8017b7c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8017b74:	697b      	ldr	r3, [r7, #20]
 8017b76:	fab3 f383 	clz	r3, r3
 8017b7a:	b2db      	uxtb	r3, r3
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	f003 021f 	and.w	r2, r3, #31
 8017b82:	4613      	mov	r3, r2
 8017b84:	005b      	lsls	r3, r3, #1
 8017b86:	4413      	add	r3, r2
 8017b88:	3b1e      	subs	r3, #30
 8017b8a:	051b      	lsls	r3, r3, #20
 8017b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8017b90:	430b      	orrs	r3, r1
 8017b92:	683a      	ldr	r2, [r7, #0]
 8017b94:	6892      	ldr	r2, [r2, #8]
 8017b96:	4619      	mov	r1, r3
 8017b98:	f7fe fe3f 	bl	801681a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	f280 80d7 	bge.w	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	4a06      	ldr	r2, [pc, #24]	; (8017bc4 <HAL_ADC_ConfigChannel+0x88c>)
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d004      	beq.n	8017bba <HAL_ADC_ConfigChannel+0x882>
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	4a04      	ldr	r2, [pc, #16]	; (8017bc8 <HAL_ADC_ConfigChannel+0x890>)
 8017bb6:	4293      	cmp	r3, r2
 8017bb8:	d10a      	bne.n	8017bd0 <HAL_ADC_ConfigChannel+0x898>
 8017bba:	4b04      	ldr	r3, [pc, #16]	; (8017bcc <HAL_ADC_ConfigChannel+0x894>)
 8017bbc:	e009      	b.n	8017bd2 <HAL_ADC_ConfigChannel+0x89a>
 8017bbe:	bf00      	nop
 8017bc0:	47ff0000 	.word	0x47ff0000
 8017bc4:	40022000 	.word	0x40022000
 8017bc8:	40022100 	.word	0x40022100
 8017bcc:	40022300 	.word	0x40022300
 8017bd0:	4b65      	ldr	r3, [pc, #404]	; (8017d68 <HAL_ADC_ConfigChannel+0xa30>)
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7fe fce2 	bl	801659c <LL_ADC_GetCommonPathInternalCh>
 8017bd8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	4a62      	ldr	r2, [pc, #392]	; (8017d6c <HAL_ADC_ConfigChannel+0xa34>)
 8017be2:	4293      	cmp	r3, r2
 8017be4:	d004      	beq.n	8017bf0 <HAL_ADC_ConfigChannel+0x8b8>
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	4a61      	ldr	r2, [pc, #388]	; (8017d70 <HAL_ADC_ConfigChannel+0xa38>)
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d10e      	bne.n	8017c0e <HAL_ADC_ConfigChannel+0x8d6>
 8017bf0:	485e      	ldr	r0, [pc, #376]	; (8017d6c <HAL_ADC_ConfigChannel+0xa34>)
 8017bf2:	f7fe ff0f 	bl	8016a14 <LL_ADC_IsEnabled>
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	485d      	ldr	r0, [pc, #372]	; (8017d70 <HAL_ADC_ConfigChannel+0xa38>)
 8017bfa:	f7fe ff0b 	bl	8016a14 <LL_ADC_IsEnabled>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	4323      	orrs	r3, r4
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	bf0c      	ite	eq
 8017c06:	2301      	moveq	r3, #1
 8017c08:	2300      	movne	r3, #0
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	e008      	b.n	8017c20 <HAL_ADC_ConfigChannel+0x8e8>
 8017c0e:	4859      	ldr	r0, [pc, #356]	; (8017d74 <HAL_ADC_ConfigChannel+0xa3c>)
 8017c10:	f7fe ff00 	bl	8016a14 <LL_ADC_IsEnabled>
 8017c14:	4603      	mov	r3, r0
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	bf0c      	ite	eq
 8017c1a:	2301      	moveq	r3, #1
 8017c1c:	2300      	movne	r3, #0
 8017c1e:	b2db      	uxtb	r3, r3
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	f000 8084 	beq.w	8017d2e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	4a53      	ldr	r2, [pc, #332]	; (8017d78 <HAL_ADC_ConfigChannel+0xa40>)
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	d132      	bne.n	8017c96 <HAL_ADC_ConfigChannel+0x95e>
 8017c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d12c      	bne.n	8017c96 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	4a4c      	ldr	r2, [pc, #304]	; (8017d74 <HAL_ADC_ConfigChannel+0xa3c>)
 8017c42:	4293      	cmp	r3, r2
 8017c44:	f040 8086 	bne.w	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	4a47      	ldr	r2, [pc, #284]	; (8017d6c <HAL_ADC_ConfigChannel+0xa34>)
 8017c4e:	4293      	cmp	r3, r2
 8017c50:	d004      	beq.n	8017c5c <HAL_ADC_ConfigChannel+0x924>
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	4a46      	ldr	r2, [pc, #280]	; (8017d70 <HAL_ADC_ConfigChannel+0xa38>)
 8017c58:	4293      	cmp	r3, r2
 8017c5a:	d101      	bne.n	8017c60 <HAL_ADC_ConfigChannel+0x928>
 8017c5c:	4a47      	ldr	r2, [pc, #284]	; (8017d7c <HAL_ADC_ConfigChannel+0xa44>)
 8017c5e:	e000      	b.n	8017c62 <HAL_ADC_ConfigChannel+0x92a>
 8017c60:	4a41      	ldr	r2, [pc, #260]	; (8017d68 <HAL_ADC_ConfigChannel+0xa30>)
 8017c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017c66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017c6a:	4619      	mov	r1, r3
 8017c6c:	4610      	mov	r0, r2
 8017c6e:	f7fe fc82 	bl	8016576 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8017c72:	4b43      	ldr	r3, [pc, #268]	; (8017d80 <HAL_ADC_ConfigChannel+0xa48>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	099b      	lsrs	r3, r3, #6
 8017c78:	4a42      	ldr	r2, [pc, #264]	; (8017d84 <HAL_ADC_ConfigChannel+0xa4c>)
 8017c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8017c7e:	099b      	lsrs	r3, r3, #6
 8017c80:	3301      	adds	r3, #1
 8017c82:	005b      	lsls	r3, r3, #1
 8017c84:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8017c86:	e002      	b.n	8017c8e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	3b01      	subs	r3, #1
 8017c8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d1f9      	bne.n	8017c88 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8017c94:	e05e      	b.n	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	4a3b      	ldr	r2, [pc, #236]	; (8017d88 <HAL_ADC_ConfigChannel+0xa50>)
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d120      	bne.n	8017ce2 <HAL_ADC_ConfigChannel+0x9aa>
 8017ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d11a      	bne.n	8017ce2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	4a30      	ldr	r2, [pc, #192]	; (8017d74 <HAL_ADC_ConfigChannel+0xa3c>)
 8017cb2:	4293      	cmp	r3, r2
 8017cb4:	d14e      	bne.n	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4a2c      	ldr	r2, [pc, #176]	; (8017d6c <HAL_ADC_ConfigChannel+0xa34>)
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	d004      	beq.n	8017cca <HAL_ADC_ConfigChannel+0x992>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4a2a      	ldr	r2, [pc, #168]	; (8017d70 <HAL_ADC_ConfigChannel+0xa38>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d101      	bne.n	8017cce <HAL_ADC_ConfigChannel+0x996>
 8017cca:	4a2c      	ldr	r2, [pc, #176]	; (8017d7c <HAL_ADC_ConfigChannel+0xa44>)
 8017ccc:	e000      	b.n	8017cd0 <HAL_ADC_ConfigChannel+0x998>
 8017cce:	4a26      	ldr	r2, [pc, #152]	; (8017d68 <HAL_ADC_ConfigChannel+0xa30>)
 8017cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017cd8:	4619      	mov	r1, r3
 8017cda:	4610      	mov	r0, r2
 8017cdc:	f7fe fc4b 	bl	8016576 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8017ce0:	e038      	b.n	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	4a29      	ldr	r2, [pc, #164]	; (8017d8c <HAL_ADC_ConfigChannel+0xa54>)
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d133      	bne.n	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
 8017cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d12d      	bne.n	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	4a1d      	ldr	r2, [pc, #116]	; (8017d74 <HAL_ADC_ConfigChannel+0xa3c>)
 8017cfe:	4293      	cmp	r3, r2
 8017d00:	d128      	bne.n	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	4a19      	ldr	r2, [pc, #100]	; (8017d6c <HAL_ADC_ConfigChannel+0xa34>)
 8017d08:	4293      	cmp	r3, r2
 8017d0a:	d004      	beq.n	8017d16 <HAL_ADC_ConfigChannel+0x9de>
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	4a17      	ldr	r2, [pc, #92]	; (8017d70 <HAL_ADC_ConfigChannel+0xa38>)
 8017d12:	4293      	cmp	r3, r2
 8017d14:	d101      	bne.n	8017d1a <HAL_ADC_ConfigChannel+0x9e2>
 8017d16:	4a19      	ldr	r2, [pc, #100]	; (8017d7c <HAL_ADC_ConfigChannel+0xa44>)
 8017d18:	e000      	b.n	8017d1c <HAL_ADC_ConfigChannel+0x9e4>
 8017d1a:	4a13      	ldr	r2, [pc, #76]	; (8017d68 <HAL_ADC_ConfigChannel+0xa30>)
 8017d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017d24:	4619      	mov	r1, r3
 8017d26:	4610      	mov	r0, r2
 8017d28:	f7fe fc25 	bl	8016576 <LL_ADC_SetCommonPathInternalCh>
 8017d2c:	e012      	b.n	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017d32:	f043 0220 	orr.w	r2, r3, #32
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8017d3a:	2301      	movs	r3, #1
 8017d3c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017d40:	e008      	b.n	8017d54 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017d46:	f043 0220 	orr.w	r2, r3, #32
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8017d4e:	2301      	movs	r3, #1
 8017d50:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2200      	movs	r2, #0
 8017d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8017d5c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	37e4      	adds	r7, #228	; 0xe4
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd90      	pop	{r4, r7, pc}
 8017d68:	58026300 	.word	0x58026300
 8017d6c:	40022000 	.word	0x40022000
 8017d70:	40022100 	.word	0x40022100
 8017d74:	58026000 	.word	0x58026000
 8017d78:	c7520000 	.word	0xc7520000
 8017d7c:	40022300 	.word	0x40022300
 8017d80:	24000024 	.word	0x24000024
 8017d84:	053e2d63 	.word	0x053e2d63
 8017d88:	c3210000 	.word	0xc3210000
 8017d8c:	cb840000 	.word	0xcb840000

08017d90 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b088      	sub	sp, #32
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
 8017d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8017d9e:	683b      	ldr	r3, [r7, #0]
 8017da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fe fe82 	bl	8016ab0 <LL_ADC_REG_IsConversionOngoing>
 8017dac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	4618      	mov	r0, r3
 8017db4:	f7fe fea4 	bl	8016b00 <LL_ADC_INJ_IsConversionOngoing>
 8017db8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8017dba:	693b      	ldr	r3, [r7, #16]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d103      	bne.n	8017dc8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	f000 8098 	beq.w	8017ef8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	68db      	ldr	r3, [r3, #12]
 8017dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d02a      	beq.n	8017e2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	7e5b      	ldrb	r3, [r3, #25]
 8017dda:	2b01      	cmp	r3, #1
 8017ddc:	d126      	bne.n	8017e2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	7e1b      	ldrb	r3, [r3, #24]
 8017de2:	2b01      	cmp	r3, #1
 8017de4:	d122      	bne.n	8017e2c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8017de6:	2301      	movs	r3, #1
 8017de8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8017dea:	e014      	b.n	8017e16 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8017dec:	69fb      	ldr	r3, [r7, #28]
 8017dee:	4a45      	ldr	r2, [pc, #276]	; (8017f04 <ADC_ConversionStop+0x174>)
 8017df0:	4293      	cmp	r3, r2
 8017df2:	d90d      	bls.n	8017e10 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017df8:	f043 0210 	orr.w	r2, r3, #16
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017e04:	f043 0201 	orr.w	r2, r3, #1
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	e074      	b.n	8017efa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	3301      	adds	r3, #1
 8017e14:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e20:	2b40      	cmp	r3, #64	; 0x40
 8017e22:	d1e3      	bne.n	8017dec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	2240      	movs	r2, #64	; 0x40
 8017e2a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8017e2c:	69bb      	ldr	r3, [r7, #24]
 8017e2e:	2b02      	cmp	r3, #2
 8017e30:	d014      	beq.n	8017e5c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7fe fe3a 	bl	8016ab0 <LL_ADC_REG_IsConversionOngoing>
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d00c      	beq.n	8017e5c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	4618      	mov	r0, r3
 8017e48:	f7fe fdf7 	bl	8016a3a <LL_ADC_IsDisableOngoing>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d104      	bne.n	8017e5c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7fe fe16 	bl	8016a88 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8017e5c:	69bb      	ldr	r3, [r7, #24]
 8017e5e:	2b01      	cmp	r3, #1
 8017e60:	d014      	beq.n	8017e8c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	4618      	mov	r0, r3
 8017e68:	f7fe fe4a 	bl	8016b00 <LL_ADC_INJ_IsConversionOngoing>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d00c      	beq.n	8017e8c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7fe fddf 	bl	8016a3a <LL_ADC_IsDisableOngoing>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d104      	bne.n	8017e8c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	4618      	mov	r0, r3
 8017e88:	f7fe fe26 	bl	8016ad8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8017e8c:	69bb      	ldr	r3, [r7, #24]
 8017e8e:	2b02      	cmp	r3, #2
 8017e90:	d005      	beq.n	8017e9e <ADC_ConversionStop+0x10e>
 8017e92:	69bb      	ldr	r3, [r7, #24]
 8017e94:	2b03      	cmp	r3, #3
 8017e96:	d105      	bne.n	8017ea4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8017e98:	230c      	movs	r3, #12
 8017e9a:	617b      	str	r3, [r7, #20]
        break;
 8017e9c:	e005      	b.n	8017eaa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8017e9e:	2308      	movs	r3, #8
 8017ea0:	617b      	str	r3, [r7, #20]
        break;
 8017ea2:	e002      	b.n	8017eaa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8017ea4:	2304      	movs	r3, #4
 8017ea6:	617b      	str	r3, [r7, #20]
        break;
 8017ea8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8017eaa:	f7fe fb21 	bl	80164f0 <HAL_GetTick>
 8017eae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8017eb0:	e01b      	b.n	8017eea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8017eb2:	f7fe fb1d 	bl	80164f0 <HAL_GetTick>
 8017eb6:	4602      	mov	r2, r0
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	1ad3      	subs	r3, r2, r3
 8017ebc:	2b05      	cmp	r3, #5
 8017ebe:	d914      	bls.n	8017eea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	689a      	ldr	r2, [r3, #8]
 8017ec6:	697b      	ldr	r3, [r7, #20]
 8017ec8:	4013      	ands	r3, r2
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d00d      	beq.n	8017eea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017ed2:	f043 0210 	orr.w	r2, r3, #16
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017ede:	f043 0201 	orr.w	r2, r3, #1
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	e007      	b.n	8017efa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	689a      	ldr	r2, [r3, #8]
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	4013      	ands	r3, r2
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d1dc      	bne.n	8017eb2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8017ef8:	2300      	movs	r3, #0
}
 8017efa:	4618      	mov	r0, r3
 8017efc:	3720      	adds	r7, #32
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}
 8017f02:	bf00      	nop
 8017f04:	000cdbff 	.word	0x000cdbff

08017f08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b084      	sub	sp, #16
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7fe fd7d 	bl	8016a14 <LL_ADC_IsEnabled>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d16e      	bne.n	8017ffe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	689a      	ldr	r2, [r3, #8]
 8017f26:	4b38      	ldr	r3, [pc, #224]	; (8018008 <ADC_Enable+0x100>)
 8017f28:	4013      	ands	r3, r2
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d00d      	beq.n	8017f4a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017f32:	f043 0210 	orr.w	r2, r3, #16
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f3e:	f043 0201 	orr.w	r2, r3, #1
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8017f46:	2301      	movs	r3, #1
 8017f48:	e05a      	b.n	8018000 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f7fe fd38 	bl	80169c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8017f54:	f7fe facc 	bl	80164f0 <HAL_GetTick>
 8017f58:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	4a2b      	ldr	r2, [pc, #172]	; (801800c <ADC_Enable+0x104>)
 8017f60:	4293      	cmp	r3, r2
 8017f62:	d004      	beq.n	8017f6e <ADC_Enable+0x66>
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	4a29      	ldr	r2, [pc, #164]	; (8018010 <ADC_Enable+0x108>)
 8017f6a:	4293      	cmp	r3, r2
 8017f6c:	d101      	bne.n	8017f72 <ADC_Enable+0x6a>
 8017f6e:	4b29      	ldr	r3, [pc, #164]	; (8018014 <ADC_Enable+0x10c>)
 8017f70:	e000      	b.n	8017f74 <ADC_Enable+0x6c>
 8017f72:	4b29      	ldr	r3, [pc, #164]	; (8018018 <ADC_Enable+0x110>)
 8017f74:	4618      	mov	r0, r3
 8017f76:	f7fe fcbb 	bl	80168f0 <LL_ADC_GetMultimode>
 8017f7a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	4a23      	ldr	r2, [pc, #140]	; (8018010 <ADC_Enable+0x108>)
 8017f82:	4293      	cmp	r3, r2
 8017f84:	d002      	beq.n	8017f8c <ADC_Enable+0x84>
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	e000      	b.n	8017f8e <ADC_Enable+0x86>
 8017f8c:	4b1f      	ldr	r3, [pc, #124]	; (801800c <ADC_Enable+0x104>)
 8017f8e:	687a      	ldr	r2, [r7, #4]
 8017f90:	6812      	ldr	r2, [r2, #0]
 8017f92:	4293      	cmp	r3, r2
 8017f94:	d02c      	beq.n	8017ff0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8017f96:	68bb      	ldr	r3, [r7, #8]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d130      	bne.n	8017ffe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017f9c:	e028      	b.n	8017ff0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7fe fd36 	bl	8016a14 <LL_ADC_IsEnabled>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d104      	bne.n	8017fb8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7fe fd06 	bl	80169c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8017fb8:	f7fe fa9a 	bl	80164f0 <HAL_GetTick>
 8017fbc:	4602      	mov	r2, r0
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	1ad3      	subs	r3, r2, r3
 8017fc2:	2b02      	cmp	r3, #2
 8017fc4:	d914      	bls.n	8017ff0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	f003 0301 	and.w	r3, r3, #1
 8017fd0:	2b01      	cmp	r3, #1
 8017fd2:	d00d      	beq.n	8017ff0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017fd8:	f043 0210 	orr.w	r2, r3, #16
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017fe4:	f043 0201 	orr.w	r2, r3, #1
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8017fec:	2301      	movs	r3, #1
 8017fee:	e007      	b.n	8018000 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	f003 0301 	and.w	r3, r3, #1
 8017ffa:	2b01      	cmp	r3, #1
 8017ffc:	d1cf      	bne.n	8017f9e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8017ffe:	2300      	movs	r3, #0
}
 8018000:	4618      	mov	r0, r3
 8018002:	3710      	adds	r7, #16
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}
 8018008:	8000003f 	.word	0x8000003f
 801800c:	40022000 	.word	0x40022000
 8018010:	40022100 	.word	0x40022100
 8018014:	40022300 	.word	0x40022300
 8018018:	58026300 	.word	0x58026300

0801801c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b084      	sub	sp, #16
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	4618      	mov	r0, r3
 801802a:	f7fe fd06 	bl	8016a3a <LL_ADC_IsDisableOngoing>
 801802e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	4618      	mov	r0, r3
 8018036:	f7fe fced 	bl	8016a14 <LL_ADC_IsEnabled>
 801803a:	4603      	mov	r3, r0
 801803c:	2b00      	cmp	r3, #0
 801803e:	d047      	beq.n	80180d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d144      	bne.n	80180d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	689b      	ldr	r3, [r3, #8]
 801804c:	f003 030d 	and.w	r3, r3, #13
 8018050:	2b01      	cmp	r3, #1
 8018052:	d10c      	bne.n	801806e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	4618      	mov	r0, r3
 801805a:	f7fe fcc7 	bl	80169ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	2203      	movs	r2, #3
 8018064:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8018066:	f7fe fa43 	bl	80164f0 <HAL_GetTick>
 801806a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801806c:	e029      	b.n	80180c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018072:	f043 0210 	orr.w	r2, r3, #16
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801807e:	f043 0201 	orr.w	r2, r3, #1
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8018086:	2301      	movs	r3, #1
 8018088:	e023      	b.n	80180d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801808a:	f7fe fa31 	bl	80164f0 <HAL_GetTick>
 801808e:	4602      	mov	r2, r0
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	1ad3      	subs	r3, r2, r3
 8018094:	2b02      	cmp	r3, #2
 8018096:	d914      	bls.n	80180c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	689b      	ldr	r3, [r3, #8]
 801809e:	f003 0301 	and.w	r3, r3, #1
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d00d      	beq.n	80180c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180aa:	f043 0210 	orr.w	r2, r3, #16
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80180b6:	f043 0201 	orr.w	r2, r3, #1
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80180be:	2301      	movs	r3, #1
 80180c0:	e007      	b.n	80180d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	689b      	ldr	r3, [r3, #8]
 80180c8:	f003 0301 	and.w	r3, r3, #1
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d1dc      	bne.n	801808a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80180d0:	2300      	movs	r3, #0
}
 80180d2:	4618      	mov	r0, r3
 80180d4:	3710      	adds	r7, #16
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}
	...

080180dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	4a6b      	ldr	r2, [pc, #428]	; (8018298 <ADC_ConfigureBoostMode+0x1bc>)
 80180ea:	4293      	cmp	r3, r2
 80180ec:	d004      	beq.n	80180f8 <ADC_ConfigureBoostMode+0x1c>
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	4a6a      	ldr	r2, [pc, #424]	; (801829c <ADC_ConfigureBoostMode+0x1c0>)
 80180f4:	4293      	cmp	r3, r2
 80180f6:	d109      	bne.n	801810c <ADC_ConfigureBoostMode+0x30>
 80180f8:	4b69      	ldr	r3, [pc, #420]	; (80182a0 <ADC_ConfigureBoostMode+0x1c4>)
 80180fa:	689b      	ldr	r3, [r3, #8]
 80180fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8018100:	2b00      	cmp	r3, #0
 8018102:	bf14      	ite	ne
 8018104:	2301      	movne	r3, #1
 8018106:	2300      	moveq	r3, #0
 8018108:	b2db      	uxtb	r3, r3
 801810a:	e008      	b.n	801811e <ADC_ConfigureBoostMode+0x42>
 801810c:	4b65      	ldr	r3, [pc, #404]	; (80182a4 <ADC_ConfigureBoostMode+0x1c8>)
 801810e:	689b      	ldr	r3, [r3, #8]
 8018110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8018114:	2b00      	cmp	r3, #0
 8018116:	bf14      	ite	ne
 8018118:	2301      	movne	r3, #1
 801811a:	2300      	moveq	r3, #0
 801811c:	b2db      	uxtb	r3, r3
 801811e:	2b00      	cmp	r3, #0
 8018120:	d01c      	beq.n	801815c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8018122:	f007 f865 	bl	801f1f0 <HAL_RCC_GetHCLKFreq>
 8018126:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	685b      	ldr	r3, [r3, #4]
 801812c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8018130:	d010      	beq.n	8018154 <ADC_ConfigureBoostMode+0x78>
 8018132:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8018136:	d871      	bhi.n	801821c <ADC_ConfigureBoostMode+0x140>
 8018138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801813c:	d002      	beq.n	8018144 <ADC_ConfigureBoostMode+0x68>
 801813e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018142:	d16b      	bne.n	801821c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	685b      	ldr	r3, [r3, #4]
 8018148:	0c1b      	lsrs	r3, r3, #16
 801814a:	68fa      	ldr	r2, [r7, #12]
 801814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018150:	60fb      	str	r3, [r7, #12]
        break;
 8018152:	e066      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	089b      	lsrs	r3, r3, #2
 8018158:	60fb      	str	r3, [r7, #12]
        break;
 801815a:	e062      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 801815c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8018160:	f007 ff9c 	bl	802009c <HAL_RCCEx_GetPeriphCLKFreq>
 8018164:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	685b      	ldr	r3, [r3, #4]
 801816a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 801816e:	d051      	beq.n	8018214 <ADC_ConfigureBoostMode+0x138>
 8018170:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8018174:	d854      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 8018176:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 801817a:	d047      	beq.n	801820c <ADC_ConfigureBoostMode+0x130>
 801817c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8018180:	d84e      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 8018182:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8018186:	d03d      	beq.n	8018204 <ADC_ConfigureBoostMode+0x128>
 8018188:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 801818c:	d848      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 801818e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018192:	d033      	beq.n	80181fc <ADC_ConfigureBoostMode+0x120>
 8018194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018198:	d842      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 801819a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 801819e:	d029      	beq.n	80181f4 <ADC_ConfigureBoostMode+0x118>
 80181a0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80181a4:	d83c      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 80181a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80181aa:	d01a      	beq.n	80181e2 <ADC_ConfigureBoostMode+0x106>
 80181ac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80181b0:	d836      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 80181b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80181b6:	d014      	beq.n	80181e2 <ADC_ConfigureBoostMode+0x106>
 80181b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80181bc:	d830      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 80181be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80181c2:	d00e      	beq.n	80181e2 <ADC_ConfigureBoostMode+0x106>
 80181c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80181c8:	d82a      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 80181ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80181ce:	d008      	beq.n	80181e2 <ADC_ConfigureBoostMode+0x106>
 80181d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80181d4:	d824      	bhi.n	8018220 <ADC_ConfigureBoostMode+0x144>
 80181d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80181da:	d002      	beq.n	80181e2 <ADC_ConfigureBoostMode+0x106>
 80181dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80181e0:	d11e      	bne.n	8018220 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	685b      	ldr	r3, [r3, #4]
 80181e6:	0c9b      	lsrs	r3, r3, #18
 80181e8:	005b      	lsls	r3, r3, #1
 80181ea:	68fa      	ldr	r2, [r7, #12]
 80181ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80181f0:	60fb      	str	r3, [r7, #12]
        break;
 80181f2:	e016      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	091b      	lsrs	r3, r3, #4
 80181f8:	60fb      	str	r3, [r7, #12]
        break;
 80181fa:	e012      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	095b      	lsrs	r3, r3, #5
 8018200:	60fb      	str	r3, [r7, #12]
        break;
 8018202:	e00e      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	099b      	lsrs	r3, r3, #6
 8018208:	60fb      	str	r3, [r7, #12]
        break;
 801820a:	e00a      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	09db      	lsrs	r3, r3, #7
 8018210:	60fb      	str	r3, [r7, #12]
        break;
 8018212:	e006      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	0a1b      	lsrs	r3, r3, #8
 8018218:	60fb      	str	r3, [r7, #12]
        break;
 801821a:	e002      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
        break;
 801821c:	bf00      	nop
 801821e:	e000      	b.n	8018222 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8018220:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	085b      	lsrs	r3, r3, #1
 8018226:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	4a1f      	ldr	r2, [pc, #124]	; (80182a8 <ADC_ConfigureBoostMode+0x1cc>)
 801822c:	4293      	cmp	r3, r2
 801822e:	d808      	bhi.n	8018242 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	689a      	ldr	r2, [r3, #8]
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801823e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8018240:	e025      	b.n	801828e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	4a19      	ldr	r2, [pc, #100]	; (80182ac <ADC_ConfigureBoostMode+0x1d0>)
 8018246:	4293      	cmp	r3, r2
 8018248:	d80a      	bhi.n	8018260 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	689b      	ldr	r3, [r3, #8]
 8018250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801825c:	609a      	str	r2, [r3, #8]
}
 801825e:	e016      	b.n	801828e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	4a13      	ldr	r2, [pc, #76]	; (80182b0 <ADC_ConfigureBoostMode+0x1d4>)
 8018264:	4293      	cmp	r3, r2
 8018266:	d80a      	bhi.n	801827e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	689b      	ldr	r3, [r3, #8]
 801826e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801827a:	609a      	str	r2, [r3, #8]
}
 801827c:	e007      	b.n	801828e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	689a      	ldr	r2, [r3, #8]
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801828c:	609a      	str	r2, [r3, #8]
}
 801828e:	bf00      	nop
 8018290:	3710      	adds	r7, #16
 8018292:	46bd      	mov	sp, r7
 8018294:	bd80      	pop	{r7, pc}
 8018296:	bf00      	nop
 8018298:	40022000 	.word	0x40022000
 801829c:	40022100 	.word	0x40022100
 80182a0:	40022300 	.word	0x40022300
 80182a4:	58026300 	.word	0x58026300
 80182a8:	005f5e10 	.word	0x005f5e10
 80182ac:	00bebc20 	.word	0x00bebc20
 80182b0:	017d7840 	.word	0x017d7840

080182b4 <LL_ADC_IsEnabled>:
{
 80182b4:	b480      	push	{r7}
 80182b6:	b083      	sub	sp, #12
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	689b      	ldr	r3, [r3, #8]
 80182c0:	f003 0301 	and.w	r3, r3, #1
 80182c4:	2b01      	cmp	r3, #1
 80182c6:	d101      	bne.n	80182cc <LL_ADC_IsEnabled+0x18>
 80182c8:	2301      	movs	r3, #1
 80182ca:	e000      	b.n	80182ce <LL_ADC_IsEnabled+0x1a>
 80182cc:	2300      	movs	r3, #0
}
 80182ce:	4618      	mov	r0, r3
 80182d0:	370c      	adds	r7, #12
 80182d2:	46bd      	mov	sp, r7
 80182d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d8:	4770      	bx	lr

080182da <LL_ADC_REG_IsConversionOngoing>:
{
 80182da:	b480      	push	{r7}
 80182dc:	b083      	sub	sp, #12
 80182de:	af00      	add	r7, sp, #0
 80182e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	689b      	ldr	r3, [r3, #8]
 80182e6:	f003 0304 	and.w	r3, r3, #4
 80182ea:	2b04      	cmp	r3, #4
 80182ec:	d101      	bne.n	80182f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80182ee:	2301      	movs	r3, #1
 80182f0:	e000      	b.n	80182f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80182f2:	2300      	movs	r3, #0
}
 80182f4:	4618      	mov	r0, r3
 80182f6:	370c      	adds	r7, #12
 80182f8:	46bd      	mov	sp, r7
 80182fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fe:	4770      	bx	lr

08018300 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8018300:	b590      	push	{r4, r7, lr}
 8018302:	b0a3      	sub	sp, #140	; 0x8c
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
 8018308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801830a:	2300      	movs	r3, #0
 801830c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018316:	2b01      	cmp	r3, #1
 8018318:	d101      	bne.n	801831e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801831a:	2302      	movs	r3, #2
 801831c:	e0c1      	b.n	80184a2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	2201      	movs	r2, #1
 8018322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8018326:	2300      	movs	r3, #0
 8018328:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 801832a:	2300      	movs	r3, #0
 801832c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	4a5e      	ldr	r2, [pc, #376]	; (80184ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8018334:	4293      	cmp	r3, r2
 8018336:	d102      	bne.n	801833e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8018338:	4b5d      	ldr	r3, [pc, #372]	; (80184b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801833a:	60fb      	str	r3, [r7, #12]
 801833c:	e001      	b.n	8018342 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801833e:	2300      	movs	r3, #0
 8018340:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d10b      	bne.n	8018360 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801834c:	f043 0220 	orr.w	r2, r3, #32
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2200      	movs	r2, #0
 8018358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 801835c:	2301      	movs	r3, #1
 801835e:	e0a0      	b.n	80184a2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	4618      	mov	r0, r3
 8018364:	f7ff ffb9 	bl	80182da <LL_ADC_REG_IsConversionOngoing>
 8018368:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	4618      	mov	r0, r3
 8018372:	f7ff ffb2 	bl	80182da <LL_ADC_REG_IsConversionOngoing>
 8018376:	4603      	mov	r3, r0
 8018378:	2b00      	cmp	r3, #0
 801837a:	f040 8081 	bne.w	8018480 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801837e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018382:	2b00      	cmp	r3, #0
 8018384:	d17c      	bne.n	8018480 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	4a48      	ldr	r2, [pc, #288]	; (80184ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 801838c:	4293      	cmp	r3, r2
 801838e:	d004      	beq.n	801839a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	4a46      	ldr	r2, [pc, #280]	; (80184b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8018396:	4293      	cmp	r3, r2
 8018398:	d101      	bne.n	801839e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801839a:	4b46      	ldr	r3, [pc, #280]	; (80184b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 801839c:	e000      	b.n	80183a0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 801839e:	4b46      	ldr	r3, [pc, #280]	; (80184b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80183a0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d039      	beq.n	801841e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80183aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80183ac:	689b      	ldr	r3, [r3, #8]
 80183ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	685b      	ldr	r3, [r3, #4]
 80183b6:	431a      	orrs	r2, r3
 80183b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80183ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	4a3a      	ldr	r2, [pc, #232]	; (80184ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80183c2:	4293      	cmp	r3, r2
 80183c4:	d004      	beq.n	80183d0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	4a39      	ldr	r2, [pc, #228]	; (80184b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80183cc:	4293      	cmp	r3, r2
 80183ce:	d10e      	bne.n	80183ee <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80183d0:	4836      	ldr	r0, [pc, #216]	; (80184ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80183d2:	f7ff ff6f 	bl	80182b4 <LL_ADC_IsEnabled>
 80183d6:	4604      	mov	r4, r0
 80183d8:	4835      	ldr	r0, [pc, #212]	; (80184b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80183da:	f7ff ff6b 	bl	80182b4 <LL_ADC_IsEnabled>
 80183de:	4603      	mov	r3, r0
 80183e0:	4323      	orrs	r3, r4
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	bf0c      	ite	eq
 80183e6:	2301      	moveq	r3, #1
 80183e8:	2300      	movne	r3, #0
 80183ea:	b2db      	uxtb	r3, r3
 80183ec:	e008      	b.n	8018400 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80183ee:	4833      	ldr	r0, [pc, #204]	; (80184bc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80183f0:	f7ff ff60 	bl	80182b4 <LL_ADC_IsEnabled>
 80183f4:	4603      	mov	r3, r0
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	bf0c      	ite	eq
 80183fa:	2301      	moveq	r3, #1
 80183fc:	2300      	movne	r3, #0
 80183fe:	b2db      	uxtb	r3, r3
 8018400:	2b00      	cmp	r3, #0
 8018402:	d047      	beq.n	8018494 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8018404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018406:	689a      	ldr	r2, [r3, #8]
 8018408:	4b2d      	ldr	r3, [pc, #180]	; (80184c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801840a:	4013      	ands	r3, r2
 801840c:	683a      	ldr	r2, [r7, #0]
 801840e:	6811      	ldr	r1, [r2, #0]
 8018410:	683a      	ldr	r2, [r7, #0]
 8018412:	6892      	ldr	r2, [r2, #8]
 8018414:	430a      	orrs	r2, r1
 8018416:	431a      	orrs	r2, r3
 8018418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801841a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801841c:	e03a      	b.n	8018494 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 801841e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018420:	689b      	ldr	r3, [r3, #8]
 8018422:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8018426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018428:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	4a1f      	ldr	r2, [pc, #124]	; (80184ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8018430:	4293      	cmp	r3, r2
 8018432:	d004      	beq.n	801843e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	4a1d      	ldr	r2, [pc, #116]	; (80184b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801843a:	4293      	cmp	r3, r2
 801843c:	d10e      	bne.n	801845c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 801843e:	481b      	ldr	r0, [pc, #108]	; (80184ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8018440:	f7ff ff38 	bl	80182b4 <LL_ADC_IsEnabled>
 8018444:	4604      	mov	r4, r0
 8018446:	481a      	ldr	r0, [pc, #104]	; (80184b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8018448:	f7ff ff34 	bl	80182b4 <LL_ADC_IsEnabled>
 801844c:	4603      	mov	r3, r0
 801844e:	4323      	orrs	r3, r4
 8018450:	2b00      	cmp	r3, #0
 8018452:	bf0c      	ite	eq
 8018454:	2301      	moveq	r3, #1
 8018456:	2300      	movne	r3, #0
 8018458:	b2db      	uxtb	r3, r3
 801845a:	e008      	b.n	801846e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 801845c:	4817      	ldr	r0, [pc, #92]	; (80184bc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 801845e:	f7ff ff29 	bl	80182b4 <LL_ADC_IsEnabled>
 8018462:	4603      	mov	r3, r0
 8018464:	2b00      	cmp	r3, #0
 8018466:	bf0c      	ite	eq
 8018468:	2301      	moveq	r3, #1
 801846a:	2300      	movne	r3, #0
 801846c:	b2db      	uxtb	r3, r3
 801846e:	2b00      	cmp	r3, #0
 8018470:	d010      	beq.n	8018494 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8018472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018474:	689a      	ldr	r2, [r3, #8]
 8018476:	4b12      	ldr	r3, [pc, #72]	; (80184c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8018478:	4013      	ands	r3, r2
 801847a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801847c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801847e:	e009      	b.n	8018494 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018484:	f043 0220 	orr.w	r2, r3, #32
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 801848c:	2301      	movs	r3, #1
 801848e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8018492:	e000      	b.n	8018496 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8018494:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	2200      	movs	r2, #0
 801849a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 801849e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80184a2:	4618      	mov	r0, r3
 80184a4:	378c      	adds	r7, #140	; 0x8c
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bd90      	pop	{r4, r7, pc}
 80184aa:	bf00      	nop
 80184ac:	40022000 	.word	0x40022000
 80184b0:	40022100 	.word	0x40022100
 80184b4:	40022300 	.word	0x40022300
 80184b8:	58026300 	.word	0x58026300
 80184bc:	58026000 	.word	0x58026000
 80184c0:	fffff0e0 	.word	0xfffff0e0

080184c4 <__NVIC_SetPriorityGrouping>:
{
 80184c4:	b480      	push	{r7}
 80184c6:	b085      	sub	sp, #20
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f003 0307 	and.w	r3, r3, #7
 80184d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80184d4:	4b0b      	ldr	r3, [pc, #44]	; (8018504 <__NVIC_SetPriorityGrouping+0x40>)
 80184d6:	68db      	ldr	r3, [r3, #12]
 80184d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80184da:	68ba      	ldr	r2, [r7, #8]
 80184dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80184e0:	4013      	ands	r3, r2
 80184e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80184e8:	68bb      	ldr	r3, [r7, #8]
 80184ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80184ec:	4b06      	ldr	r3, [pc, #24]	; (8018508 <__NVIC_SetPriorityGrouping+0x44>)
 80184ee:	4313      	orrs	r3, r2
 80184f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80184f2:	4a04      	ldr	r2, [pc, #16]	; (8018504 <__NVIC_SetPriorityGrouping+0x40>)
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	60d3      	str	r3, [r2, #12]
}
 80184f8:	bf00      	nop
 80184fa:	3714      	adds	r7, #20
 80184fc:	46bd      	mov	sp, r7
 80184fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018502:	4770      	bx	lr
 8018504:	e000ed00 	.word	0xe000ed00
 8018508:	05fa0000 	.word	0x05fa0000

0801850c <__NVIC_GetPriorityGrouping>:
{
 801850c:	b480      	push	{r7}
 801850e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018510:	4b04      	ldr	r3, [pc, #16]	; (8018524 <__NVIC_GetPriorityGrouping+0x18>)
 8018512:	68db      	ldr	r3, [r3, #12]
 8018514:	0a1b      	lsrs	r3, r3, #8
 8018516:	f003 0307 	and.w	r3, r3, #7
}
 801851a:	4618      	mov	r0, r3
 801851c:	46bd      	mov	sp, r7
 801851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018522:	4770      	bx	lr
 8018524:	e000ed00 	.word	0xe000ed00

08018528 <__NVIC_EnableIRQ>:
{
 8018528:	b480      	push	{r7}
 801852a:	b083      	sub	sp, #12
 801852c:	af00      	add	r7, sp, #0
 801852e:	4603      	mov	r3, r0
 8018530:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018536:	2b00      	cmp	r3, #0
 8018538:	db0b      	blt.n	8018552 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801853a:	88fb      	ldrh	r3, [r7, #6]
 801853c:	f003 021f 	and.w	r2, r3, #31
 8018540:	4907      	ldr	r1, [pc, #28]	; (8018560 <__NVIC_EnableIRQ+0x38>)
 8018542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018546:	095b      	lsrs	r3, r3, #5
 8018548:	2001      	movs	r0, #1
 801854a:	fa00 f202 	lsl.w	r2, r0, r2
 801854e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018552:	bf00      	nop
 8018554:	370c      	adds	r7, #12
 8018556:	46bd      	mov	sp, r7
 8018558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855c:	4770      	bx	lr
 801855e:	bf00      	nop
 8018560:	e000e100 	.word	0xe000e100

08018564 <__NVIC_DisableIRQ>:
{
 8018564:	b480      	push	{r7}
 8018566:	b083      	sub	sp, #12
 8018568:	af00      	add	r7, sp, #0
 801856a:	4603      	mov	r3, r0
 801856c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801856e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018572:	2b00      	cmp	r3, #0
 8018574:	db12      	blt.n	801859c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018576:	88fb      	ldrh	r3, [r7, #6]
 8018578:	f003 021f 	and.w	r2, r3, #31
 801857c:	490a      	ldr	r1, [pc, #40]	; (80185a8 <__NVIC_DisableIRQ+0x44>)
 801857e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018582:	095b      	lsrs	r3, r3, #5
 8018584:	2001      	movs	r0, #1
 8018586:	fa00 f202 	lsl.w	r2, r0, r2
 801858a:	3320      	adds	r3, #32
 801858c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8018590:	f3bf 8f4f 	dsb	sy
}
 8018594:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018596:	f3bf 8f6f 	isb	sy
}
 801859a:	bf00      	nop
}
 801859c:	bf00      	nop
 801859e:	370c      	adds	r7, #12
 80185a0:	46bd      	mov	sp, r7
 80185a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a6:	4770      	bx	lr
 80185a8:	e000e100 	.word	0xe000e100

080185ac <__NVIC_SetPriority>:
{
 80185ac:	b480      	push	{r7}
 80185ae:	b083      	sub	sp, #12
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	4603      	mov	r3, r0
 80185b4:	6039      	str	r1, [r7, #0]
 80185b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80185b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	db0a      	blt.n	80185d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80185c0:	683b      	ldr	r3, [r7, #0]
 80185c2:	b2da      	uxtb	r2, r3
 80185c4:	490c      	ldr	r1, [pc, #48]	; (80185f8 <__NVIC_SetPriority+0x4c>)
 80185c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80185ca:	0112      	lsls	r2, r2, #4
 80185cc:	b2d2      	uxtb	r2, r2
 80185ce:	440b      	add	r3, r1
 80185d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80185d4:	e00a      	b.n	80185ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80185d6:	683b      	ldr	r3, [r7, #0]
 80185d8:	b2da      	uxtb	r2, r3
 80185da:	4908      	ldr	r1, [pc, #32]	; (80185fc <__NVIC_SetPriority+0x50>)
 80185dc:	88fb      	ldrh	r3, [r7, #6]
 80185de:	f003 030f 	and.w	r3, r3, #15
 80185e2:	3b04      	subs	r3, #4
 80185e4:	0112      	lsls	r2, r2, #4
 80185e6:	b2d2      	uxtb	r2, r2
 80185e8:	440b      	add	r3, r1
 80185ea:	761a      	strb	r2, [r3, #24]
}
 80185ec:	bf00      	nop
 80185ee:	370c      	adds	r7, #12
 80185f0:	46bd      	mov	sp, r7
 80185f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f6:	4770      	bx	lr
 80185f8:	e000e100 	.word	0xe000e100
 80185fc:	e000ed00 	.word	0xe000ed00

08018600 <NVIC_EncodePriority>:
{
 8018600:	b480      	push	{r7}
 8018602:	b089      	sub	sp, #36	; 0x24
 8018604:	af00      	add	r7, sp, #0
 8018606:	60f8      	str	r0, [r7, #12]
 8018608:	60b9      	str	r1, [r7, #8]
 801860a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	f003 0307 	and.w	r3, r3, #7
 8018612:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018614:	69fb      	ldr	r3, [r7, #28]
 8018616:	f1c3 0307 	rsb	r3, r3, #7
 801861a:	2b04      	cmp	r3, #4
 801861c:	bf28      	it	cs
 801861e:	2304      	movcs	r3, #4
 8018620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018622:	69fb      	ldr	r3, [r7, #28]
 8018624:	3304      	adds	r3, #4
 8018626:	2b06      	cmp	r3, #6
 8018628:	d902      	bls.n	8018630 <NVIC_EncodePriority+0x30>
 801862a:	69fb      	ldr	r3, [r7, #28]
 801862c:	3b03      	subs	r3, #3
 801862e:	e000      	b.n	8018632 <NVIC_EncodePriority+0x32>
 8018630:	2300      	movs	r3, #0
 8018632:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018634:	f04f 32ff 	mov.w	r2, #4294967295
 8018638:	69bb      	ldr	r3, [r7, #24]
 801863a:	fa02 f303 	lsl.w	r3, r2, r3
 801863e:	43da      	mvns	r2, r3
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	401a      	ands	r2, r3
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018648:	f04f 31ff 	mov.w	r1, #4294967295
 801864c:	697b      	ldr	r3, [r7, #20]
 801864e:	fa01 f303 	lsl.w	r3, r1, r3
 8018652:	43d9      	mvns	r1, r3
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018658:	4313      	orrs	r3, r2
}
 801865a:	4618      	mov	r0, r3
 801865c:	3724      	adds	r7, #36	; 0x24
 801865e:	46bd      	mov	sp, r7
 8018660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018664:	4770      	bx	lr
	...

08018668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b082      	sub	sp, #8
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	3b01      	subs	r3, #1
 8018674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018678:	d301      	bcc.n	801867e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801867a:	2301      	movs	r3, #1
 801867c:	e00f      	b.n	801869e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801867e:	4a0a      	ldr	r2, [pc, #40]	; (80186a8 <SysTick_Config+0x40>)
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	3b01      	subs	r3, #1
 8018684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018686:	210f      	movs	r1, #15
 8018688:	f04f 30ff 	mov.w	r0, #4294967295
 801868c:	f7ff ff8e 	bl	80185ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018690:	4b05      	ldr	r3, [pc, #20]	; (80186a8 <SysTick_Config+0x40>)
 8018692:	2200      	movs	r2, #0
 8018694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018696:	4b04      	ldr	r3, [pc, #16]	; (80186a8 <SysTick_Config+0x40>)
 8018698:	2207      	movs	r2, #7
 801869a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801869c:	2300      	movs	r3, #0
}
 801869e:	4618      	mov	r0, r3
 80186a0:	3708      	adds	r7, #8
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}
 80186a6:	bf00      	nop
 80186a8:	e000e010 	.word	0xe000e010

080186ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b082      	sub	sp, #8
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80186b4:	6878      	ldr	r0, [r7, #4]
 80186b6:	f7ff ff05 	bl	80184c4 <__NVIC_SetPriorityGrouping>
}
 80186ba:	bf00      	nop
 80186bc:	3708      	adds	r7, #8
 80186be:	46bd      	mov	sp, r7
 80186c0:	bd80      	pop	{r7, pc}

080186c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80186c2:	b580      	push	{r7, lr}
 80186c4:	b086      	sub	sp, #24
 80186c6:	af00      	add	r7, sp, #0
 80186c8:	4603      	mov	r3, r0
 80186ca:	60b9      	str	r1, [r7, #8]
 80186cc:	607a      	str	r2, [r7, #4]
 80186ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80186d0:	f7ff ff1c 	bl	801850c <__NVIC_GetPriorityGrouping>
 80186d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80186d6:	687a      	ldr	r2, [r7, #4]
 80186d8:	68b9      	ldr	r1, [r7, #8]
 80186da:	6978      	ldr	r0, [r7, #20]
 80186dc:	f7ff ff90 	bl	8018600 <NVIC_EncodePriority>
 80186e0:	4602      	mov	r2, r0
 80186e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80186e6:	4611      	mov	r1, r2
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7ff ff5f 	bl	80185ac <__NVIC_SetPriority>
}
 80186ee:	bf00      	nop
 80186f0:	3718      	adds	r7, #24
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd80      	pop	{r7, pc}

080186f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80186f6:	b580      	push	{r7, lr}
 80186f8:	b082      	sub	sp, #8
 80186fa:	af00      	add	r7, sp, #0
 80186fc:	4603      	mov	r3, r0
 80186fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018704:	4618      	mov	r0, r3
 8018706:	f7ff ff0f 	bl	8018528 <__NVIC_EnableIRQ>
}
 801870a:	bf00      	nop
 801870c:	3708      	adds	r7, #8
 801870e:	46bd      	mov	sp, r7
 8018710:	bd80      	pop	{r7, pc}

08018712 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8018712:	b580      	push	{r7, lr}
 8018714:	b082      	sub	sp, #8
 8018716:	af00      	add	r7, sp, #0
 8018718:	4603      	mov	r3, r0
 801871a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801871c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018720:	4618      	mov	r0, r3
 8018722:	f7ff ff1f 	bl	8018564 <__NVIC_DisableIRQ>
}
 8018726:	bf00      	nop
 8018728:	3708      	adds	r7, #8
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}

0801872e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801872e:	b580      	push	{r7, lr}
 8018730:	b082      	sub	sp, #8
 8018732:	af00      	add	r7, sp, #0
 8018734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	f7ff ff96 	bl	8018668 <SysTick_Config>
 801873c:	4603      	mov	r3, r0
}
 801873e:	4618      	mov	r0, r3
 8018740:	3708      	adds	r7, #8
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
	...

08018748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b086      	sub	sp, #24
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8018750:	f7fd fece 	bl	80164f0 <HAL_GetTick>
 8018754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d101      	bne.n	8018760 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801875c:	2301      	movs	r3, #1
 801875e:	e314      	b.n	8018d8a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	4a66      	ldr	r2, [pc, #408]	; (8018900 <HAL_DMA_Init+0x1b8>)
 8018766:	4293      	cmp	r3, r2
 8018768:	d04a      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	4a65      	ldr	r2, [pc, #404]	; (8018904 <HAL_DMA_Init+0x1bc>)
 8018770:	4293      	cmp	r3, r2
 8018772:	d045      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	4a63      	ldr	r2, [pc, #396]	; (8018908 <HAL_DMA_Init+0x1c0>)
 801877a:	4293      	cmp	r3, r2
 801877c:	d040      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	4a62      	ldr	r2, [pc, #392]	; (801890c <HAL_DMA_Init+0x1c4>)
 8018784:	4293      	cmp	r3, r2
 8018786:	d03b      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	4a60      	ldr	r2, [pc, #384]	; (8018910 <HAL_DMA_Init+0x1c8>)
 801878e:	4293      	cmp	r3, r2
 8018790:	d036      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	4a5f      	ldr	r2, [pc, #380]	; (8018914 <HAL_DMA_Init+0x1cc>)
 8018798:	4293      	cmp	r3, r2
 801879a:	d031      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	4a5d      	ldr	r2, [pc, #372]	; (8018918 <HAL_DMA_Init+0x1d0>)
 80187a2:	4293      	cmp	r3, r2
 80187a4:	d02c      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	4a5c      	ldr	r2, [pc, #368]	; (801891c <HAL_DMA_Init+0x1d4>)
 80187ac:	4293      	cmp	r3, r2
 80187ae:	d027      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	4a5a      	ldr	r2, [pc, #360]	; (8018920 <HAL_DMA_Init+0x1d8>)
 80187b6:	4293      	cmp	r3, r2
 80187b8:	d022      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	4a59      	ldr	r2, [pc, #356]	; (8018924 <HAL_DMA_Init+0x1dc>)
 80187c0:	4293      	cmp	r3, r2
 80187c2:	d01d      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	4a57      	ldr	r2, [pc, #348]	; (8018928 <HAL_DMA_Init+0x1e0>)
 80187ca:	4293      	cmp	r3, r2
 80187cc:	d018      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	4a56      	ldr	r2, [pc, #344]	; (801892c <HAL_DMA_Init+0x1e4>)
 80187d4:	4293      	cmp	r3, r2
 80187d6:	d013      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	4a54      	ldr	r2, [pc, #336]	; (8018930 <HAL_DMA_Init+0x1e8>)
 80187de:	4293      	cmp	r3, r2
 80187e0:	d00e      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	4a53      	ldr	r2, [pc, #332]	; (8018934 <HAL_DMA_Init+0x1ec>)
 80187e8:	4293      	cmp	r3, r2
 80187ea:	d009      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	4a51      	ldr	r2, [pc, #324]	; (8018938 <HAL_DMA_Init+0x1f0>)
 80187f2:	4293      	cmp	r3, r2
 80187f4:	d004      	beq.n	8018800 <HAL_DMA_Init+0xb8>
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	4a50      	ldr	r2, [pc, #320]	; (801893c <HAL_DMA_Init+0x1f4>)
 80187fc:	4293      	cmp	r3, r2
 80187fe:	d101      	bne.n	8018804 <HAL_DMA_Init+0xbc>
 8018800:	2301      	movs	r3, #1
 8018802:	e000      	b.n	8018806 <HAL_DMA_Init+0xbe>
 8018804:	2300      	movs	r3, #0
 8018806:	2b00      	cmp	r3, #0
 8018808:	f000 813c 	beq.w	8018a84 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	2202      	movs	r2, #2
 8018810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	2200      	movs	r2, #0
 8018818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	4a37      	ldr	r2, [pc, #220]	; (8018900 <HAL_DMA_Init+0x1b8>)
 8018822:	4293      	cmp	r3, r2
 8018824:	d04a      	beq.n	80188bc <HAL_DMA_Init+0x174>
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	4a36      	ldr	r2, [pc, #216]	; (8018904 <HAL_DMA_Init+0x1bc>)
 801882c:	4293      	cmp	r3, r2
 801882e:	d045      	beq.n	80188bc <HAL_DMA_Init+0x174>
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	4a34      	ldr	r2, [pc, #208]	; (8018908 <HAL_DMA_Init+0x1c0>)
 8018836:	4293      	cmp	r3, r2
 8018838:	d040      	beq.n	80188bc <HAL_DMA_Init+0x174>
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	4a33      	ldr	r2, [pc, #204]	; (801890c <HAL_DMA_Init+0x1c4>)
 8018840:	4293      	cmp	r3, r2
 8018842:	d03b      	beq.n	80188bc <HAL_DMA_Init+0x174>
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	4a31      	ldr	r2, [pc, #196]	; (8018910 <HAL_DMA_Init+0x1c8>)
 801884a:	4293      	cmp	r3, r2
 801884c:	d036      	beq.n	80188bc <HAL_DMA_Init+0x174>
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	4a30      	ldr	r2, [pc, #192]	; (8018914 <HAL_DMA_Init+0x1cc>)
 8018854:	4293      	cmp	r3, r2
 8018856:	d031      	beq.n	80188bc <HAL_DMA_Init+0x174>
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	4a2e      	ldr	r2, [pc, #184]	; (8018918 <HAL_DMA_Init+0x1d0>)
 801885e:	4293      	cmp	r3, r2
 8018860:	d02c      	beq.n	80188bc <HAL_DMA_Init+0x174>
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	4a2d      	ldr	r2, [pc, #180]	; (801891c <HAL_DMA_Init+0x1d4>)
 8018868:	4293      	cmp	r3, r2
 801886a:	d027      	beq.n	80188bc <HAL_DMA_Init+0x174>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	4a2b      	ldr	r2, [pc, #172]	; (8018920 <HAL_DMA_Init+0x1d8>)
 8018872:	4293      	cmp	r3, r2
 8018874:	d022      	beq.n	80188bc <HAL_DMA_Init+0x174>
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	4a2a      	ldr	r2, [pc, #168]	; (8018924 <HAL_DMA_Init+0x1dc>)
 801887c:	4293      	cmp	r3, r2
 801887e:	d01d      	beq.n	80188bc <HAL_DMA_Init+0x174>
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	4a28      	ldr	r2, [pc, #160]	; (8018928 <HAL_DMA_Init+0x1e0>)
 8018886:	4293      	cmp	r3, r2
 8018888:	d018      	beq.n	80188bc <HAL_DMA_Init+0x174>
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	4a27      	ldr	r2, [pc, #156]	; (801892c <HAL_DMA_Init+0x1e4>)
 8018890:	4293      	cmp	r3, r2
 8018892:	d013      	beq.n	80188bc <HAL_DMA_Init+0x174>
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	4a25      	ldr	r2, [pc, #148]	; (8018930 <HAL_DMA_Init+0x1e8>)
 801889a:	4293      	cmp	r3, r2
 801889c:	d00e      	beq.n	80188bc <HAL_DMA_Init+0x174>
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	4a24      	ldr	r2, [pc, #144]	; (8018934 <HAL_DMA_Init+0x1ec>)
 80188a4:	4293      	cmp	r3, r2
 80188a6:	d009      	beq.n	80188bc <HAL_DMA_Init+0x174>
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	4a22      	ldr	r2, [pc, #136]	; (8018938 <HAL_DMA_Init+0x1f0>)
 80188ae:	4293      	cmp	r3, r2
 80188b0:	d004      	beq.n	80188bc <HAL_DMA_Init+0x174>
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	4a21      	ldr	r2, [pc, #132]	; (801893c <HAL_DMA_Init+0x1f4>)
 80188b8:	4293      	cmp	r3, r2
 80188ba:	d108      	bne.n	80188ce <HAL_DMA_Init+0x186>
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	681a      	ldr	r2, [r3, #0]
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	f022 0201 	bic.w	r2, r2, #1
 80188ca:	601a      	str	r2, [r3, #0]
 80188cc:	e007      	b.n	80188de <HAL_DMA_Init+0x196>
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	681a      	ldr	r2, [r3, #0]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	f022 0201 	bic.w	r2, r2, #1
 80188dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80188de:	e02f      	b.n	8018940 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80188e0:	f7fd fe06 	bl	80164f0 <HAL_GetTick>
 80188e4:	4602      	mov	r2, r0
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	1ad3      	subs	r3, r2, r3
 80188ea:	2b05      	cmp	r3, #5
 80188ec:	d928      	bls.n	8018940 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2220      	movs	r2, #32
 80188f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	2203      	movs	r2, #3
 80188f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80188fc:	2301      	movs	r3, #1
 80188fe:	e244      	b.n	8018d8a <HAL_DMA_Init+0x642>
 8018900:	40020010 	.word	0x40020010
 8018904:	40020028 	.word	0x40020028
 8018908:	40020040 	.word	0x40020040
 801890c:	40020058 	.word	0x40020058
 8018910:	40020070 	.word	0x40020070
 8018914:	40020088 	.word	0x40020088
 8018918:	400200a0 	.word	0x400200a0
 801891c:	400200b8 	.word	0x400200b8
 8018920:	40020410 	.word	0x40020410
 8018924:	40020428 	.word	0x40020428
 8018928:	40020440 	.word	0x40020440
 801892c:	40020458 	.word	0x40020458
 8018930:	40020470 	.word	0x40020470
 8018934:	40020488 	.word	0x40020488
 8018938:	400204a0 	.word	0x400204a0
 801893c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	f003 0301 	and.w	r3, r3, #1
 801894a:	2b00      	cmp	r3, #0
 801894c:	d1c8      	bne.n	80188e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018956:	697a      	ldr	r2, [r7, #20]
 8018958:	4b84      	ldr	r3, [pc, #528]	; (8018b6c <HAL_DMA_Init+0x424>)
 801895a:	4013      	ands	r3, r2
 801895c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8018966:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	691b      	ldr	r3, [r3, #16]
 801896c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018972:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	699b      	ldr	r3, [r3, #24]
 8018978:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801897e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6a1b      	ldr	r3, [r3, #32]
 8018984:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8018986:	697a      	ldr	r2, [r7, #20]
 8018988:	4313      	orrs	r3, r2
 801898a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018990:	2b04      	cmp	r3, #4
 8018992:	d107      	bne.n	80189a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801899c:	4313      	orrs	r3, r2
 801899e:	697a      	ldr	r2, [r7, #20]
 80189a0:	4313      	orrs	r3, r2
 80189a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	2b28      	cmp	r3, #40	; 0x28
 80189aa:	d903      	bls.n	80189b4 <HAL_DMA_Init+0x26c>
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	685b      	ldr	r3, [r3, #4]
 80189b0:	2b2e      	cmp	r3, #46	; 0x2e
 80189b2:	d91f      	bls.n	80189f4 <HAL_DMA_Init+0x2ac>
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	685b      	ldr	r3, [r3, #4]
 80189b8:	2b3e      	cmp	r3, #62	; 0x3e
 80189ba:	d903      	bls.n	80189c4 <HAL_DMA_Init+0x27c>
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	685b      	ldr	r3, [r3, #4]
 80189c0:	2b42      	cmp	r3, #66	; 0x42
 80189c2:	d917      	bls.n	80189f4 <HAL_DMA_Init+0x2ac>
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	685b      	ldr	r3, [r3, #4]
 80189c8:	2b46      	cmp	r3, #70	; 0x46
 80189ca:	d903      	bls.n	80189d4 <HAL_DMA_Init+0x28c>
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	685b      	ldr	r3, [r3, #4]
 80189d0:	2b48      	cmp	r3, #72	; 0x48
 80189d2:	d90f      	bls.n	80189f4 <HAL_DMA_Init+0x2ac>
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	685b      	ldr	r3, [r3, #4]
 80189d8:	2b4e      	cmp	r3, #78	; 0x4e
 80189da:	d903      	bls.n	80189e4 <HAL_DMA_Init+0x29c>
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	685b      	ldr	r3, [r3, #4]
 80189e0:	2b52      	cmp	r3, #82	; 0x52
 80189e2:	d907      	bls.n	80189f4 <HAL_DMA_Init+0x2ac>
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	685b      	ldr	r3, [r3, #4]
 80189e8:	2b73      	cmp	r3, #115	; 0x73
 80189ea:	d905      	bls.n	80189f8 <HAL_DMA_Init+0x2b0>
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	685b      	ldr	r3, [r3, #4]
 80189f0:	2b77      	cmp	r3, #119	; 0x77
 80189f2:	d801      	bhi.n	80189f8 <HAL_DMA_Init+0x2b0>
 80189f4:	2301      	movs	r3, #1
 80189f6:	e000      	b.n	80189fa <HAL_DMA_Init+0x2b2>
 80189f8:	2300      	movs	r3, #0
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d003      	beq.n	8018a06 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80189fe:	697b      	ldr	r3, [r7, #20]
 8018a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018a04:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	697a      	ldr	r2, [r7, #20]
 8018a0c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	695b      	ldr	r3, [r3, #20]
 8018a14:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018a16:	697b      	ldr	r3, [r7, #20]
 8018a18:	f023 0307 	bic.w	r3, r3, #7
 8018a1c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a22:	697a      	ldr	r2, [r7, #20]
 8018a24:	4313      	orrs	r3, r2
 8018a26:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a2c:	2b04      	cmp	r3, #4
 8018a2e:	d117      	bne.n	8018a60 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a34:	697a      	ldr	r2, [r7, #20]
 8018a36:	4313      	orrs	r3, r2
 8018a38:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d00e      	beq.n	8018a60 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018a42:	6878      	ldr	r0, [r7, #4]
 8018a44:	f002 fb3c 	bl	801b0c0 <DMA_CheckFifoParam>
 8018a48:	4603      	mov	r3, r0
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d008      	beq.n	8018a60 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	2240      	movs	r2, #64	; 0x40
 8018a52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2201      	movs	r2, #1
 8018a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8018a5c:	2301      	movs	r3, #1
 8018a5e:	e194      	b.n	8018d8a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	697a      	ldr	r2, [r7, #20]
 8018a66:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018a68:	6878      	ldr	r0, [r7, #4]
 8018a6a:	f002 fa77 	bl	801af5c <DMA_CalcBaseAndBitshift>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a76:	f003 031f 	and.w	r3, r3, #31
 8018a7a:	223f      	movs	r2, #63	; 0x3f
 8018a7c:	409a      	lsls	r2, r3
 8018a7e:	68bb      	ldr	r3, [r7, #8]
 8018a80:	609a      	str	r2, [r3, #8]
 8018a82:	e0ca      	b.n	8018c1a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	4a39      	ldr	r2, [pc, #228]	; (8018b70 <HAL_DMA_Init+0x428>)
 8018a8a:	4293      	cmp	r3, r2
 8018a8c:	d022      	beq.n	8018ad4 <HAL_DMA_Init+0x38c>
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	4a38      	ldr	r2, [pc, #224]	; (8018b74 <HAL_DMA_Init+0x42c>)
 8018a94:	4293      	cmp	r3, r2
 8018a96:	d01d      	beq.n	8018ad4 <HAL_DMA_Init+0x38c>
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	4a36      	ldr	r2, [pc, #216]	; (8018b78 <HAL_DMA_Init+0x430>)
 8018a9e:	4293      	cmp	r3, r2
 8018aa0:	d018      	beq.n	8018ad4 <HAL_DMA_Init+0x38c>
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	4a35      	ldr	r2, [pc, #212]	; (8018b7c <HAL_DMA_Init+0x434>)
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	d013      	beq.n	8018ad4 <HAL_DMA_Init+0x38c>
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	4a33      	ldr	r2, [pc, #204]	; (8018b80 <HAL_DMA_Init+0x438>)
 8018ab2:	4293      	cmp	r3, r2
 8018ab4:	d00e      	beq.n	8018ad4 <HAL_DMA_Init+0x38c>
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	4a32      	ldr	r2, [pc, #200]	; (8018b84 <HAL_DMA_Init+0x43c>)
 8018abc:	4293      	cmp	r3, r2
 8018abe:	d009      	beq.n	8018ad4 <HAL_DMA_Init+0x38c>
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	4a30      	ldr	r2, [pc, #192]	; (8018b88 <HAL_DMA_Init+0x440>)
 8018ac6:	4293      	cmp	r3, r2
 8018ac8:	d004      	beq.n	8018ad4 <HAL_DMA_Init+0x38c>
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	4a2f      	ldr	r2, [pc, #188]	; (8018b8c <HAL_DMA_Init+0x444>)
 8018ad0:	4293      	cmp	r3, r2
 8018ad2:	d101      	bne.n	8018ad8 <HAL_DMA_Init+0x390>
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	e000      	b.n	8018ada <HAL_DMA_Init+0x392>
 8018ad8:	2300      	movs	r3, #0
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	f000 8094 	beq.w	8018c08 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	4a22      	ldr	r2, [pc, #136]	; (8018b70 <HAL_DMA_Init+0x428>)
 8018ae6:	4293      	cmp	r3, r2
 8018ae8:	d021      	beq.n	8018b2e <HAL_DMA_Init+0x3e6>
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	4a21      	ldr	r2, [pc, #132]	; (8018b74 <HAL_DMA_Init+0x42c>)
 8018af0:	4293      	cmp	r3, r2
 8018af2:	d01c      	beq.n	8018b2e <HAL_DMA_Init+0x3e6>
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	4a1f      	ldr	r2, [pc, #124]	; (8018b78 <HAL_DMA_Init+0x430>)
 8018afa:	4293      	cmp	r3, r2
 8018afc:	d017      	beq.n	8018b2e <HAL_DMA_Init+0x3e6>
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	4a1e      	ldr	r2, [pc, #120]	; (8018b7c <HAL_DMA_Init+0x434>)
 8018b04:	4293      	cmp	r3, r2
 8018b06:	d012      	beq.n	8018b2e <HAL_DMA_Init+0x3e6>
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	4a1c      	ldr	r2, [pc, #112]	; (8018b80 <HAL_DMA_Init+0x438>)
 8018b0e:	4293      	cmp	r3, r2
 8018b10:	d00d      	beq.n	8018b2e <HAL_DMA_Init+0x3e6>
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	4a1b      	ldr	r2, [pc, #108]	; (8018b84 <HAL_DMA_Init+0x43c>)
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	d008      	beq.n	8018b2e <HAL_DMA_Init+0x3e6>
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	4a19      	ldr	r2, [pc, #100]	; (8018b88 <HAL_DMA_Init+0x440>)
 8018b22:	4293      	cmp	r3, r2
 8018b24:	d003      	beq.n	8018b2e <HAL_DMA_Init+0x3e6>
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	4a18      	ldr	r2, [pc, #96]	; (8018b8c <HAL_DMA_Init+0x444>)
 8018b2c:	4293      	cmp	r3, r2
 8018b2e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2202      	movs	r2, #2
 8018b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8018b48:	697a      	ldr	r2, [r7, #20]
 8018b4a:	4b11      	ldr	r3, [pc, #68]	; (8018b90 <HAL_DMA_Init+0x448>)
 8018b4c:	4013      	ands	r3, r2
 8018b4e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	689b      	ldr	r3, [r3, #8]
 8018b54:	2b40      	cmp	r3, #64	; 0x40
 8018b56:	d01d      	beq.n	8018b94 <HAL_DMA_Init+0x44c>
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	689b      	ldr	r3, [r3, #8]
 8018b5c:	2b80      	cmp	r3, #128	; 0x80
 8018b5e:	d102      	bne.n	8018b66 <HAL_DMA_Init+0x41e>
 8018b60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018b64:	e017      	b.n	8018b96 <HAL_DMA_Init+0x44e>
 8018b66:	2300      	movs	r3, #0
 8018b68:	e015      	b.n	8018b96 <HAL_DMA_Init+0x44e>
 8018b6a:	bf00      	nop
 8018b6c:	fe10803f 	.word	0xfe10803f
 8018b70:	58025408 	.word	0x58025408
 8018b74:	5802541c 	.word	0x5802541c
 8018b78:	58025430 	.word	0x58025430
 8018b7c:	58025444 	.word	0x58025444
 8018b80:	58025458 	.word	0x58025458
 8018b84:	5802546c 	.word	0x5802546c
 8018b88:	58025480 	.word	0x58025480
 8018b8c:	58025494 	.word	0x58025494
 8018b90:	fffe000f 	.word	0xfffe000f
 8018b94:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8018b96:	687a      	ldr	r2, [r7, #4]
 8018b98:	68d2      	ldr	r2, [r2, #12]
 8018b9a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8018b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	691b      	ldr	r3, [r3, #16]
 8018ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8018ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	695b      	ldr	r3, [r3, #20]
 8018baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8018bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	699b      	ldr	r3, [r3, #24]
 8018bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8018bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	69db      	ldr	r3, [r3, #28]
 8018bba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8018bbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	6a1b      	ldr	r3, [r3, #32]
 8018bc2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8018bc4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8018bc6:	697a      	ldr	r2, [r7, #20]
 8018bc8:	4313      	orrs	r3, r2
 8018bca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	697a      	ldr	r2, [r7, #20]
 8018bd2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	461a      	mov	r2, r3
 8018bda:	4b6e      	ldr	r3, [pc, #440]	; (8018d94 <HAL_DMA_Init+0x64c>)
 8018bdc:	4413      	add	r3, r2
 8018bde:	4a6e      	ldr	r2, [pc, #440]	; (8018d98 <HAL_DMA_Init+0x650>)
 8018be0:	fba2 2303 	umull	r2, r3, r2, r3
 8018be4:	091b      	lsrs	r3, r3, #4
 8018be6:	009a      	lsls	r2, r3, #2
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018bec:	6878      	ldr	r0, [r7, #4]
 8018bee:	f002 f9b5 	bl	801af5c <DMA_CalcBaseAndBitshift>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bfa:	f003 031f 	and.w	r3, r3, #31
 8018bfe:	2201      	movs	r2, #1
 8018c00:	409a      	lsls	r2, r3
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	605a      	str	r2, [r3, #4]
 8018c06:	e008      	b.n	8018c1a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	2240      	movs	r2, #64	; 0x40
 8018c0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	2203      	movs	r2, #3
 8018c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8018c16:	2301      	movs	r3, #1
 8018c18:	e0b7      	b.n	8018d8a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	4a5f      	ldr	r2, [pc, #380]	; (8018d9c <HAL_DMA_Init+0x654>)
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d072      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	4a5d      	ldr	r2, [pc, #372]	; (8018da0 <HAL_DMA_Init+0x658>)
 8018c2a:	4293      	cmp	r3, r2
 8018c2c:	d06d      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	4a5c      	ldr	r2, [pc, #368]	; (8018da4 <HAL_DMA_Init+0x65c>)
 8018c34:	4293      	cmp	r3, r2
 8018c36:	d068      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	4a5a      	ldr	r2, [pc, #360]	; (8018da8 <HAL_DMA_Init+0x660>)
 8018c3e:	4293      	cmp	r3, r2
 8018c40:	d063      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	4a59      	ldr	r2, [pc, #356]	; (8018dac <HAL_DMA_Init+0x664>)
 8018c48:	4293      	cmp	r3, r2
 8018c4a:	d05e      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	4a57      	ldr	r2, [pc, #348]	; (8018db0 <HAL_DMA_Init+0x668>)
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d059      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	4a56      	ldr	r2, [pc, #344]	; (8018db4 <HAL_DMA_Init+0x66c>)
 8018c5c:	4293      	cmp	r3, r2
 8018c5e:	d054      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	4a54      	ldr	r2, [pc, #336]	; (8018db8 <HAL_DMA_Init+0x670>)
 8018c66:	4293      	cmp	r3, r2
 8018c68:	d04f      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	4a53      	ldr	r2, [pc, #332]	; (8018dbc <HAL_DMA_Init+0x674>)
 8018c70:	4293      	cmp	r3, r2
 8018c72:	d04a      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	4a51      	ldr	r2, [pc, #324]	; (8018dc0 <HAL_DMA_Init+0x678>)
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	d045      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	4a50      	ldr	r2, [pc, #320]	; (8018dc4 <HAL_DMA_Init+0x67c>)
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d040      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	4a4e      	ldr	r2, [pc, #312]	; (8018dc8 <HAL_DMA_Init+0x680>)
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	d03b      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4a4d      	ldr	r2, [pc, #308]	; (8018dcc <HAL_DMA_Init+0x684>)
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	d036      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	4a4b      	ldr	r2, [pc, #300]	; (8018dd0 <HAL_DMA_Init+0x688>)
 8018ca2:	4293      	cmp	r3, r2
 8018ca4:	d031      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4a4a      	ldr	r2, [pc, #296]	; (8018dd4 <HAL_DMA_Init+0x68c>)
 8018cac:	4293      	cmp	r3, r2
 8018cae:	d02c      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4a48      	ldr	r2, [pc, #288]	; (8018dd8 <HAL_DMA_Init+0x690>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d027      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	4a47      	ldr	r2, [pc, #284]	; (8018ddc <HAL_DMA_Init+0x694>)
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	d022      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	4a45      	ldr	r2, [pc, #276]	; (8018de0 <HAL_DMA_Init+0x698>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d01d      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	4a44      	ldr	r2, [pc, #272]	; (8018de4 <HAL_DMA_Init+0x69c>)
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	d018      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	4a42      	ldr	r2, [pc, #264]	; (8018de8 <HAL_DMA_Init+0x6a0>)
 8018cde:	4293      	cmp	r3, r2
 8018ce0:	d013      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4a41      	ldr	r2, [pc, #260]	; (8018dec <HAL_DMA_Init+0x6a4>)
 8018ce8:	4293      	cmp	r3, r2
 8018cea:	d00e      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	4a3f      	ldr	r2, [pc, #252]	; (8018df0 <HAL_DMA_Init+0x6a8>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d009      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4a3e      	ldr	r2, [pc, #248]	; (8018df4 <HAL_DMA_Init+0x6ac>)
 8018cfc:	4293      	cmp	r3, r2
 8018cfe:	d004      	beq.n	8018d0a <HAL_DMA_Init+0x5c2>
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	4a3c      	ldr	r2, [pc, #240]	; (8018df8 <HAL_DMA_Init+0x6b0>)
 8018d06:	4293      	cmp	r3, r2
 8018d08:	d101      	bne.n	8018d0e <HAL_DMA_Init+0x5c6>
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	e000      	b.n	8018d10 <HAL_DMA_Init+0x5c8>
 8018d0e:	2300      	movs	r3, #0
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d032      	beq.n	8018d7a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8018d14:	6878      	ldr	r0, [r7, #4]
 8018d16:	f002 fa4f 	bl	801b1b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	689b      	ldr	r3, [r3, #8]
 8018d1e:	2b80      	cmp	r3, #128	; 0x80
 8018d20:	d102      	bne.n	8018d28 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	2200      	movs	r2, #0
 8018d26:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	685a      	ldr	r2, [r3, #4]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018d30:	b2d2      	uxtb	r2, r2
 8018d32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d38:	687a      	ldr	r2, [r7, #4]
 8018d3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8018d3c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	685b      	ldr	r3, [r3, #4]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d010      	beq.n	8018d68 <HAL_DMA_Init+0x620>
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	685b      	ldr	r3, [r3, #4]
 8018d4a:	2b08      	cmp	r3, #8
 8018d4c:	d80c      	bhi.n	8018d68 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f002 facc 	bl	801b2ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018d58:	2200      	movs	r2, #0
 8018d5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d60:	687a      	ldr	r2, [r7, #4]
 8018d62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8018d64:	605a      	str	r2, [r3, #4]
 8018d66:	e008      	b.n	8018d7a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	2200      	movs	r2, #0
 8018d72:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	2200      	movs	r2, #0
 8018d78:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2201      	movs	r2, #1
 8018d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018d88:	2300      	movs	r3, #0
}
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	3718      	adds	r7, #24
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}
 8018d92:	bf00      	nop
 8018d94:	a7fdabf8 	.word	0xa7fdabf8
 8018d98:	cccccccd 	.word	0xcccccccd
 8018d9c:	40020010 	.word	0x40020010
 8018da0:	40020028 	.word	0x40020028
 8018da4:	40020040 	.word	0x40020040
 8018da8:	40020058 	.word	0x40020058
 8018dac:	40020070 	.word	0x40020070
 8018db0:	40020088 	.word	0x40020088
 8018db4:	400200a0 	.word	0x400200a0
 8018db8:	400200b8 	.word	0x400200b8
 8018dbc:	40020410 	.word	0x40020410
 8018dc0:	40020428 	.word	0x40020428
 8018dc4:	40020440 	.word	0x40020440
 8018dc8:	40020458 	.word	0x40020458
 8018dcc:	40020470 	.word	0x40020470
 8018dd0:	40020488 	.word	0x40020488
 8018dd4:	400204a0 	.word	0x400204a0
 8018dd8:	400204b8 	.word	0x400204b8
 8018ddc:	58025408 	.word	0x58025408
 8018de0:	5802541c 	.word	0x5802541c
 8018de4:	58025430 	.word	0x58025430
 8018de8:	58025444 	.word	0x58025444
 8018dec:	58025458 	.word	0x58025458
 8018df0:	5802546c 	.word	0x5802546c
 8018df4:	58025480 	.word	0x58025480
 8018df8:	58025494 	.word	0x58025494

08018dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b086      	sub	sp, #24
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	60f8      	str	r0, [r7, #12]
 8018e04:	60b9      	str	r1, [r7, #8]
 8018e06:	607a      	str	r2, [r7, #4]
 8018e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d101      	bne.n	8018e18 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8018e14:	2301      	movs	r3, #1
 8018e16:	e226      	b.n	8019266 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018e1e:	2b01      	cmp	r3, #1
 8018e20:	d101      	bne.n	8018e26 <HAL_DMA_Start_IT+0x2a>
 8018e22:	2302      	movs	r3, #2
 8018e24:	e21f      	b.n	8019266 <HAL_DMA_Start_IT+0x46a>
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	2201      	movs	r2, #1
 8018e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018e34:	b2db      	uxtb	r3, r3
 8018e36:	2b01      	cmp	r3, #1
 8018e38:	f040 820a 	bne.w	8019250 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	2202      	movs	r2, #2
 8018e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	2200      	movs	r2, #0
 8018e48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	4a68      	ldr	r2, [pc, #416]	; (8018ff0 <HAL_DMA_Start_IT+0x1f4>)
 8018e50:	4293      	cmp	r3, r2
 8018e52:	d04a      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	4a66      	ldr	r2, [pc, #408]	; (8018ff4 <HAL_DMA_Start_IT+0x1f8>)
 8018e5a:	4293      	cmp	r3, r2
 8018e5c:	d045      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	4a65      	ldr	r2, [pc, #404]	; (8018ff8 <HAL_DMA_Start_IT+0x1fc>)
 8018e64:	4293      	cmp	r3, r2
 8018e66:	d040      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	4a63      	ldr	r2, [pc, #396]	; (8018ffc <HAL_DMA_Start_IT+0x200>)
 8018e6e:	4293      	cmp	r3, r2
 8018e70:	d03b      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	4a62      	ldr	r2, [pc, #392]	; (8019000 <HAL_DMA_Start_IT+0x204>)
 8018e78:	4293      	cmp	r3, r2
 8018e7a:	d036      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	4a60      	ldr	r2, [pc, #384]	; (8019004 <HAL_DMA_Start_IT+0x208>)
 8018e82:	4293      	cmp	r3, r2
 8018e84:	d031      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	4a5f      	ldr	r2, [pc, #380]	; (8019008 <HAL_DMA_Start_IT+0x20c>)
 8018e8c:	4293      	cmp	r3, r2
 8018e8e:	d02c      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	4a5d      	ldr	r2, [pc, #372]	; (801900c <HAL_DMA_Start_IT+0x210>)
 8018e96:	4293      	cmp	r3, r2
 8018e98:	d027      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	4a5c      	ldr	r2, [pc, #368]	; (8019010 <HAL_DMA_Start_IT+0x214>)
 8018ea0:	4293      	cmp	r3, r2
 8018ea2:	d022      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	4a5a      	ldr	r2, [pc, #360]	; (8019014 <HAL_DMA_Start_IT+0x218>)
 8018eaa:	4293      	cmp	r3, r2
 8018eac:	d01d      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	4a59      	ldr	r2, [pc, #356]	; (8019018 <HAL_DMA_Start_IT+0x21c>)
 8018eb4:	4293      	cmp	r3, r2
 8018eb6:	d018      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	4a57      	ldr	r2, [pc, #348]	; (801901c <HAL_DMA_Start_IT+0x220>)
 8018ebe:	4293      	cmp	r3, r2
 8018ec0:	d013      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	4a56      	ldr	r2, [pc, #344]	; (8019020 <HAL_DMA_Start_IT+0x224>)
 8018ec8:	4293      	cmp	r3, r2
 8018eca:	d00e      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	4a54      	ldr	r2, [pc, #336]	; (8019024 <HAL_DMA_Start_IT+0x228>)
 8018ed2:	4293      	cmp	r3, r2
 8018ed4:	d009      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	4a53      	ldr	r2, [pc, #332]	; (8019028 <HAL_DMA_Start_IT+0x22c>)
 8018edc:	4293      	cmp	r3, r2
 8018ede:	d004      	beq.n	8018eea <HAL_DMA_Start_IT+0xee>
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	4a51      	ldr	r2, [pc, #324]	; (801902c <HAL_DMA_Start_IT+0x230>)
 8018ee6:	4293      	cmp	r3, r2
 8018ee8:	d108      	bne.n	8018efc <HAL_DMA_Start_IT+0x100>
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	681a      	ldr	r2, [r3, #0]
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	f022 0201 	bic.w	r2, r2, #1
 8018ef8:	601a      	str	r2, [r3, #0]
 8018efa:	e007      	b.n	8018f0c <HAL_DMA_Start_IT+0x110>
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	681a      	ldr	r2, [r3, #0]
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	f022 0201 	bic.w	r2, r2, #1
 8018f0a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	687a      	ldr	r2, [r7, #4]
 8018f10:	68b9      	ldr	r1, [r7, #8]
 8018f12:	68f8      	ldr	r0, [r7, #12]
 8018f14:	f001 fe76 	bl	801ac04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	4a34      	ldr	r2, [pc, #208]	; (8018ff0 <HAL_DMA_Start_IT+0x1f4>)
 8018f1e:	4293      	cmp	r3, r2
 8018f20:	d04a      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	4a33      	ldr	r2, [pc, #204]	; (8018ff4 <HAL_DMA_Start_IT+0x1f8>)
 8018f28:	4293      	cmp	r3, r2
 8018f2a:	d045      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	4a31      	ldr	r2, [pc, #196]	; (8018ff8 <HAL_DMA_Start_IT+0x1fc>)
 8018f32:	4293      	cmp	r3, r2
 8018f34:	d040      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	4a30      	ldr	r2, [pc, #192]	; (8018ffc <HAL_DMA_Start_IT+0x200>)
 8018f3c:	4293      	cmp	r3, r2
 8018f3e:	d03b      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	4a2e      	ldr	r2, [pc, #184]	; (8019000 <HAL_DMA_Start_IT+0x204>)
 8018f46:	4293      	cmp	r3, r2
 8018f48:	d036      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	4a2d      	ldr	r2, [pc, #180]	; (8019004 <HAL_DMA_Start_IT+0x208>)
 8018f50:	4293      	cmp	r3, r2
 8018f52:	d031      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	4a2b      	ldr	r2, [pc, #172]	; (8019008 <HAL_DMA_Start_IT+0x20c>)
 8018f5a:	4293      	cmp	r3, r2
 8018f5c:	d02c      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	4a2a      	ldr	r2, [pc, #168]	; (801900c <HAL_DMA_Start_IT+0x210>)
 8018f64:	4293      	cmp	r3, r2
 8018f66:	d027      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	4a28      	ldr	r2, [pc, #160]	; (8019010 <HAL_DMA_Start_IT+0x214>)
 8018f6e:	4293      	cmp	r3, r2
 8018f70:	d022      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	4a27      	ldr	r2, [pc, #156]	; (8019014 <HAL_DMA_Start_IT+0x218>)
 8018f78:	4293      	cmp	r3, r2
 8018f7a:	d01d      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	4a25      	ldr	r2, [pc, #148]	; (8019018 <HAL_DMA_Start_IT+0x21c>)
 8018f82:	4293      	cmp	r3, r2
 8018f84:	d018      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	4a24      	ldr	r2, [pc, #144]	; (801901c <HAL_DMA_Start_IT+0x220>)
 8018f8c:	4293      	cmp	r3, r2
 8018f8e:	d013      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	4a22      	ldr	r2, [pc, #136]	; (8019020 <HAL_DMA_Start_IT+0x224>)
 8018f96:	4293      	cmp	r3, r2
 8018f98:	d00e      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	4a21      	ldr	r2, [pc, #132]	; (8019024 <HAL_DMA_Start_IT+0x228>)
 8018fa0:	4293      	cmp	r3, r2
 8018fa2:	d009      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	4a1f      	ldr	r2, [pc, #124]	; (8019028 <HAL_DMA_Start_IT+0x22c>)
 8018faa:	4293      	cmp	r3, r2
 8018fac:	d004      	beq.n	8018fb8 <HAL_DMA_Start_IT+0x1bc>
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	4a1e      	ldr	r2, [pc, #120]	; (801902c <HAL_DMA_Start_IT+0x230>)
 8018fb4:	4293      	cmp	r3, r2
 8018fb6:	d101      	bne.n	8018fbc <HAL_DMA_Start_IT+0x1c0>
 8018fb8:	2301      	movs	r3, #1
 8018fba:	e000      	b.n	8018fbe <HAL_DMA_Start_IT+0x1c2>
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d036      	beq.n	8019030 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	f023 021e 	bic.w	r2, r3, #30
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	f042 0216 	orr.w	r2, r2, #22
 8018fd4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d03e      	beq.n	801905c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	681a      	ldr	r2, [r3, #0]
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	f042 0208 	orr.w	r2, r2, #8
 8018fec:	601a      	str	r2, [r3, #0]
 8018fee:	e035      	b.n	801905c <HAL_DMA_Start_IT+0x260>
 8018ff0:	40020010 	.word	0x40020010
 8018ff4:	40020028 	.word	0x40020028
 8018ff8:	40020040 	.word	0x40020040
 8018ffc:	40020058 	.word	0x40020058
 8019000:	40020070 	.word	0x40020070
 8019004:	40020088 	.word	0x40020088
 8019008:	400200a0 	.word	0x400200a0
 801900c:	400200b8 	.word	0x400200b8
 8019010:	40020410 	.word	0x40020410
 8019014:	40020428 	.word	0x40020428
 8019018:	40020440 	.word	0x40020440
 801901c:	40020458 	.word	0x40020458
 8019020:	40020470 	.word	0x40020470
 8019024:	40020488 	.word	0x40020488
 8019028:	400204a0 	.word	0x400204a0
 801902c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	f023 020e 	bic.w	r2, r3, #14
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	f042 020a 	orr.w	r2, r2, #10
 8019042:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019048:	2b00      	cmp	r3, #0
 801904a:	d007      	beq.n	801905c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	681a      	ldr	r2, [r3, #0]
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	f042 0204 	orr.w	r2, r2, #4
 801905a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	4a83      	ldr	r2, [pc, #524]	; (8019270 <HAL_DMA_Start_IT+0x474>)
 8019062:	4293      	cmp	r3, r2
 8019064:	d072      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	4a82      	ldr	r2, [pc, #520]	; (8019274 <HAL_DMA_Start_IT+0x478>)
 801906c:	4293      	cmp	r3, r2
 801906e:	d06d      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	4a80      	ldr	r2, [pc, #512]	; (8019278 <HAL_DMA_Start_IT+0x47c>)
 8019076:	4293      	cmp	r3, r2
 8019078:	d068      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	4a7f      	ldr	r2, [pc, #508]	; (801927c <HAL_DMA_Start_IT+0x480>)
 8019080:	4293      	cmp	r3, r2
 8019082:	d063      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	4a7d      	ldr	r2, [pc, #500]	; (8019280 <HAL_DMA_Start_IT+0x484>)
 801908a:	4293      	cmp	r3, r2
 801908c:	d05e      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	4a7c      	ldr	r2, [pc, #496]	; (8019284 <HAL_DMA_Start_IT+0x488>)
 8019094:	4293      	cmp	r3, r2
 8019096:	d059      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	4a7a      	ldr	r2, [pc, #488]	; (8019288 <HAL_DMA_Start_IT+0x48c>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	d054      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	4a79      	ldr	r2, [pc, #484]	; (801928c <HAL_DMA_Start_IT+0x490>)
 80190a8:	4293      	cmp	r3, r2
 80190aa:	d04f      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	4a77      	ldr	r2, [pc, #476]	; (8019290 <HAL_DMA_Start_IT+0x494>)
 80190b2:	4293      	cmp	r3, r2
 80190b4:	d04a      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4a76      	ldr	r2, [pc, #472]	; (8019294 <HAL_DMA_Start_IT+0x498>)
 80190bc:	4293      	cmp	r3, r2
 80190be:	d045      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	4a74      	ldr	r2, [pc, #464]	; (8019298 <HAL_DMA_Start_IT+0x49c>)
 80190c6:	4293      	cmp	r3, r2
 80190c8:	d040      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	4a73      	ldr	r2, [pc, #460]	; (801929c <HAL_DMA_Start_IT+0x4a0>)
 80190d0:	4293      	cmp	r3, r2
 80190d2:	d03b      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	4a71      	ldr	r2, [pc, #452]	; (80192a0 <HAL_DMA_Start_IT+0x4a4>)
 80190da:	4293      	cmp	r3, r2
 80190dc:	d036      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	4a70      	ldr	r2, [pc, #448]	; (80192a4 <HAL_DMA_Start_IT+0x4a8>)
 80190e4:	4293      	cmp	r3, r2
 80190e6:	d031      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	4a6e      	ldr	r2, [pc, #440]	; (80192a8 <HAL_DMA_Start_IT+0x4ac>)
 80190ee:	4293      	cmp	r3, r2
 80190f0:	d02c      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	4a6d      	ldr	r2, [pc, #436]	; (80192ac <HAL_DMA_Start_IT+0x4b0>)
 80190f8:	4293      	cmp	r3, r2
 80190fa:	d027      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	4a6b      	ldr	r2, [pc, #428]	; (80192b0 <HAL_DMA_Start_IT+0x4b4>)
 8019102:	4293      	cmp	r3, r2
 8019104:	d022      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	4a6a      	ldr	r2, [pc, #424]	; (80192b4 <HAL_DMA_Start_IT+0x4b8>)
 801910c:	4293      	cmp	r3, r2
 801910e:	d01d      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	4a68      	ldr	r2, [pc, #416]	; (80192b8 <HAL_DMA_Start_IT+0x4bc>)
 8019116:	4293      	cmp	r3, r2
 8019118:	d018      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	4a67      	ldr	r2, [pc, #412]	; (80192bc <HAL_DMA_Start_IT+0x4c0>)
 8019120:	4293      	cmp	r3, r2
 8019122:	d013      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	4a65      	ldr	r2, [pc, #404]	; (80192c0 <HAL_DMA_Start_IT+0x4c4>)
 801912a:	4293      	cmp	r3, r2
 801912c:	d00e      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	4a64      	ldr	r2, [pc, #400]	; (80192c4 <HAL_DMA_Start_IT+0x4c8>)
 8019134:	4293      	cmp	r3, r2
 8019136:	d009      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	4a62      	ldr	r2, [pc, #392]	; (80192c8 <HAL_DMA_Start_IT+0x4cc>)
 801913e:	4293      	cmp	r3, r2
 8019140:	d004      	beq.n	801914c <HAL_DMA_Start_IT+0x350>
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4a61      	ldr	r2, [pc, #388]	; (80192cc <HAL_DMA_Start_IT+0x4d0>)
 8019148:	4293      	cmp	r3, r2
 801914a:	d101      	bne.n	8019150 <HAL_DMA_Start_IT+0x354>
 801914c:	2301      	movs	r3, #1
 801914e:	e000      	b.n	8019152 <HAL_DMA_Start_IT+0x356>
 8019150:	2300      	movs	r3, #0
 8019152:	2b00      	cmp	r3, #0
 8019154:	d01a      	beq.n	801918c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019160:	2b00      	cmp	r3, #0
 8019162:	d007      	beq.n	8019174 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019168:	681a      	ldr	r2, [r3, #0]
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801916e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019172:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019178:	2b00      	cmp	r3, #0
 801917a:	d007      	beq.n	801918c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019180:	681a      	ldr	r2, [r3, #0]
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801918a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	4a37      	ldr	r2, [pc, #220]	; (8019270 <HAL_DMA_Start_IT+0x474>)
 8019192:	4293      	cmp	r3, r2
 8019194:	d04a      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	4a36      	ldr	r2, [pc, #216]	; (8019274 <HAL_DMA_Start_IT+0x478>)
 801919c:	4293      	cmp	r3, r2
 801919e:	d045      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	4a34      	ldr	r2, [pc, #208]	; (8019278 <HAL_DMA_Start_IT+0x47c>)
 80191a6:	4293      	cmp	r3, r2
 80191a8:	d040      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	4a33      	ldr	r2, [pc, #204]	; (801927c <HAL_DMA_Start_IT+0x480>)
 80191b0:	4293      	cmp	r3, r2
 80191b2:	d03b      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	4a31      	ldr	r2, [pc, #196]	; (8019280 <HAL_DMA_Start_IT+0x484>)
 80191ba:	4293      	cmp	r3, r2
 80191bc:	d036      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	4a30      	ldr	r2, [pc, #192]	; (8019284 <HAL_DMA_Start_IT+0x488>)
 80191c4:	4293      	cmp	r3, r2
 80191c6:	d031      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	4a2e      	ldr	r2, [pc, #184]	; (8019288 <HAL_DMA_Start_IT+0x48c>)
 80191ce:	4293      	cmp	r3, r2
 80191d0:	d02c      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	4a2d      	ldr	r2, [pc, #180]	; (801928c <HAL_DMA_Start_IT+0x490>)
 80191d8:	4293      	cmp	r3, r2
 80191da:	d027      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	4a2b      	ldr	r2, [pc, #172]	; (8019290 <HAL_DMA_Start_IT+0x494>)
 80191e2:	4293      	cmp	r3, r2
 80191e4:	d022      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	4a2a      	ldr	r2, [pc, #168]	; (8019294 <HAL_DMA_Start_IT+0x498>)
 80191ec:	4293      	cmp	r3, r2
 80191ee:	d01d      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	4a28      	ldr	r2, [pc, #160]	; (8019298 <HAL_DMA_Start_IT+0x49c>)
 80191f6:	4293      	cmp	r3, r2
 80191f8:	d018      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	4a27      	ldr	r2, [pc, #156]	; (801929c <HAL_DMA_Start_IT+0x4a0>)
 8019200:	4293      	cmp	r3, r2
 8019202:	d013      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	4a25      	ldr	r2, [pc, #148]	; (80192a0 <HAL_DMA_Start_IT+0x4a4>)
 801920a:	4293      	cmp	r3, r2
 801920c:	d00e      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	4a24      	ldr	r2, [pc, #144]	; (80192a4 <HAL_DMA_Start_IT+0x4a8>)
 8019214:	4293      	cmp	r3, r2
 8019216:	d009      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	4a22      	ldr	r2, [pc, #136]	; (80192a8 <HAL_DMA_Start_IT+0x4ac>)
 801921e:	4293      	cmp	r3, r2
 8019220:	d004      	beq.n	801922c <HAL_DMA_Start_IT+0x430>
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	4a21      	ldr	r2, [pc, #132]	; (80192ac <HAL_DMA_Start_IT+0x4b0>)
 8019228:	4293      	cmp	r3, r2
 801922a:	d108      	bne.n	801923e <HAL_DMA_Start_IT+0x442>
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	681a      	ldr	r2, [r3, #0]
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	f042 0201 	orr.w	r2, r2, #1
 801923a:	601a      	str	r2, [r3, #0]
 801923c:	e012      	b.n	8019264 <HAL_DMA_Start_IT+0x468>
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	681a      	ldr	r2, [r3, #0]
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	f042 0201 	orr.w	r2, r2, #1
 801924c:	601a      	str	r2, [r3, #0]
 801924e:	e009      	b.n	8019264 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019256:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	2200      	movs	r2, #0
 801925c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8019260:	2301      	movs	r3, #1
 8019262:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8019264:	7dfb      	ldrb	r3, [r7, #23]
}
 8019266:	4618      	mov	r0, r3
 8019268:	3718      	adds	r7, #24
 801926a:	46bd      	mov	sp, r7
 801926c:	bd80      	pop	{r7, pc}
 801926e:	bf00      	nop
 8019270:	40020010 	.word	0x40020010
 8019274:	40020028 	.word	0x40020028
 8019278:	40020040 	.word	0x40020040
 801927c:	40020058 	.word	0x40020058
 8019280:	40020070 	.word	0x40020070
 8019284:	40020088 	.word	0x40020088
 8019288:	400200a0 	.word	0x400200a0
 801928c:	400200b8 	.word	0x400200b8
 8019290:	40020410 	.word	0x40020410
 8019294:	40020428 	.word	0x40020428
 8019298:	40020440 	.word	0x40020440
 801929c:	40020458 	.word	0x40020458
 80192a0:	40020470 	.word	0x40020470
 80192a4:	40020488 	.word	0x40020488
 80192a8:	400204a0 	.word	0x400204a0
 80192ac:	400204b8 	.word	0x400204b8
 80192b0:	58025408 	.word	0x58025408
 80192b4:	5802541c 	.word	0x5802541c
 80192b8:	58025430 	.word	0x58025430
 80192bc:	58025444 	.word	0x58025444
 80192c0:	58025458 	.word	0x58025458
 80192c4:	5802546c 	.word	0x5802546c
 80192c8:	58025480 	.word	0x58025480
 80192cc:	58025494 	.word	0x58025494

080192d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b086      	sub	sp, #24
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80192d8:	f7fd f90a 	bl	80164f0 <HAL_GetTick>
 80192dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d101      	bne.n	80192e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80192e4:	2301      	movs	r3, #1
 80192e6:	e2dc      	b.n	80198a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80192ee:	b2db      	uxtb	r3, r3
 80192f0:	2b02      	cmp	r3, #2
 80192f2:	d008      	beq.n	8019306 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2280      	movs	r2, #128	; 0x80
 80192f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	2200      	movs	r2, #0
 80192fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8019302:	2301      	movs	r3, #1
 8019304:	e2cd      	b.n	80198a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	4a76      	ldr	r2, [pc, #472]	; (80194e4 <HAL_DMA_Abort+0x214>)
 801930c:	4293      	cmp	r3, r2
 801930e:	d04a      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	4a74      	ldr	r2, [pc, #464]	; (80194e8 <HAL_DMA_Abort+0x218>)
 8019316:	4293      	cmp	r3, r2
 8019318:	d045      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	4a73      	ldr	r2, [pc, #460]	; (80194ec <HAL_DMA_Abort+0x21c>)
 8019320:	4293      	cmp	r3, r2
 8019322:	d040      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	4a71      	ldr	r2, [pc, #452]	; (80194f0 <HAL_DMA_Abort+0x220>)
 801932a:	4293      	cmp	r3, r2
 801932c:	d03b      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	4a70      	ldr	r2, [pc, #448]	; (80194f4 <HAL_DMA_Abort+0x224>)
 8019334:	4293      	cmp	r3, r2
 8019336:	d036      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	4a6e      	ldr	r2, [pc, #440]	; (80194f8 <HAL_DMA_Abort+0x228>)
 801933e:	4293      	cmp	r3, r2
 8019340:	d031      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	4a6d      	ldr	r2, [pc, #436]	; (80194fc <HAL_DMA_Abort+0x22c>)
 8019348:	4293      	cmp	r3, r2
 801934a:	d02c      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	4a6b      	ldr	r2, [pc, #428]	; (8019500 <HAL_DMA_Abort+0x230>)
 8019352:	4293      	cmp	r3, r2
 8019354:	d027      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	4a6a      	ldr	r2, [pc, #424]	; (8019504 <HAL_DMA_Abort+0x234>)
 801935c:	4293      	cmp	r3, r2
 801935e:	d022      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	4a68      	ldr	r2, [pc, #416]	; (8019508 <HAL_DMA_Abort+0x238>)
 8019366:	4293      	cmp	r3, r2
 8019368:	d01d      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	4a67      	ldr	r2, [pc, #412]	; (801950c <HAL_DMA_Abort+0x23c>)
 8019370:	4293      	cmp	r3, r2
 8019372:	d018      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	4a65      	ldr	r2, [pc, #404]	; (8019510 <HAL_DMA_Abort+0x240>)
 801937a:	4293      	cmp	r3, r2
 801937c:	d013      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	4a64      	ldr	r2, [pc, #400]	; (8019514 <HAL_DMA_Abort+0x244>)
 8019384:	4293      	cmp	r3, r2
 8019386:	d00e      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	4a62      	ldr	r2, [pc, #392]	; (8019518 <HAL_DMA_Abort+0x248>)
 801938e:	4293      	cmp	r3, r2
 8019390:	d009      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	4a61      	ldr	r2, [pc, #388]	; (801951c <HAL_DMA_Abort+0x24c>)
 8019398:	4293      	cmp	r3, r2
 801939a:	d004      	beq.n	80193a6 <HAL_DMA_Abort+0xd6>
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	4a5f      	ldr	r2, [pc, #380]	; (8019520 <HAL_DMA_Abort+0x250>)
 80193a2:	4293      	cmp	r3, r2
 80193a4:	d101      	bne.n	80193aa <HAL_DMA_Abort+0xda>
 80193a6:	2301      	movs	r3, #1
 80193a8:	e000      	b.n	80193ac <HAL_DMA_Abort+0xdc>
 80193aa:	2300      	movs	r3, #0
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d013      	beq.n	80193d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	681a      	ldr	r2, [r3, #0]
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	f022 021e 	bic.w	r2, r2, #30
 80193be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	695a      	ldr	r2, [r3, #20]
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80193ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	617b      	str	r3, [r7, #20]
 80193d6:	e00a      	b.n	80193ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	681a      	ldr	r2, [r3, #0]
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	f022 020e 	bic.w	r2, r2, #14
 80193e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	4a3c      	ldr	r2, [pc, #240]	; (80194e4 <HAL_DMA_Abort+0x214>)
 80193f4:	4293      	cmp	r3, r2
 80193f6:	d072      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	4a3a      	ldr	r2, [pc, #232]	; (80194e8 <HAL_DMA_Abort+0x218>)
 80193fe:	4293      	cmp	r3, r2
 8019400:	d06d      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	4a39      	ldr	r2, [pc, #228]	; (80194ec <HAL_DMA_Abort+0x21c>)
 8019408:	4293      	cmp	r3, r2
 801940a:	d068      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	4a37      	ldr	r2, [pc, #220]	; (80194f0 <HAL_DMA_Abort+0x220>)
 8019412:	4293      	cmp	r3, r2
 8019414:	d063      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	4a36      	ldr	r2, [pc, #216]	; (80194f4 <HAL_DMA_Abort+0x224>)
 801941c:	4293      	cmp	r3, r2
 801941e:	d05e      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	4a34      	ldr	r2, [pc, #208]	; (80194f8 <HAL_DMA_Abort+0x228>)
 8019426:	4293      	cmp	r3, r2
 8019428:	d059      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	4a33      	ldr	r2, [pc, #204]	; (80194fc <HAL_DMA_Abort+0x22c>)
 8019430:	4293      	cmp	r3, r2
 8019432:	d054      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	4a31      	ldr	r2, [pc, #196]	; (8019500 <HAL_DMA_Abort+0x230>)
 801943a:	4293      	cmp	r3, r2
 801943c:	d04f      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	4a30      	ldr	r2, [pc, #192]	; (8019504 <HAL_DMA_Abort+0x234>)
 8019444:	4293      	cmp	r3, r2
 8019446:	d04a      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	4a2e      	ldr	r2, [pc, #184]	; (8019508 <HAL_DMA_Abort+0x238>)
 801944e:	4293      	cmp	r3, r2
 8019450:	d045      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	4a2d      	ldr	r2, [pc, #180]	; (801950c <HAL_DMA_Abort+0x23c>)
 8019458:	4293      	cmp	r3, r2
 801945a:	d040      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	4a2b      	ldr	r2, [pc, #172]	; (8019510 <HAL_DMA_Abort+0x240>)
 8019462:	4293      	cmp	r3, r2
 8019464:	d03b      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	4a2a      	ldr	r2, [pc, #168]	; (8019514 <HAL_DMA_Abort+0x244>)
 801946c:	4293      	cmp	r3, r2
 801946e:	d036      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	4a28      	ldr	r2, [pc, #160]	; (8019518 <HAL_DMA_Abort+0x248>)
 8019476:	4293      	cmp	r3, r2
 8019478:	d031      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	4a27      	ldr	r2, [pc, #156]	; (801951c <HAL_DMA_Abort+0x24c>)
 8019480:	4293      	cmp	r3, r2
 8019482:	d02c      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	4a25      	ldr	r2, [pc, #148]	; (8019520 <HAL_DMA_Abort+0x250>)
 801948a:	4293      	cmp	r3, r2
 801948c:	d027      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	4a24      	ldr	r2, [pc, #144]	; (8019524 <HAL_DMA_Abort+0x254>)
 8019494:	4293      	cmp	r3, r2
 8019496:	d022      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	4a22      	ldr	r2, [pc, #136]	; (8019528 <HAL_DMA_Abort+0x258>)
 801949e:	4293      	cmp	r3, r2
 80194a0:	d01d      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	4a21      	ldr	r2, [pc, #132]	; (801952c <HAL_DMA_Abort+0x25c>)
 80194a8:	4293      	cmp	r3, r2
 80194aa:	d018      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	4a1f      	ldr	r2, [pc, #124]	; (8019530 <HAL_DMA_Abort+0x260>)
 80194b2:	4293      	cmp	r3, r2
 80194b4:	d013      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	4a1e      	ldr	r2, [pc, #120]	; (8019534 <HAL_DMA_Abort+0x264>)
 80194bc:	4293      	cmp	r3, r2
 80194be:	d00e      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	4a1c      	ldr	r2, [pc, #112]	; (8019538 <HAL_DMA_Abort+0x268>)
 80194c6:	4293      	cmp	r3, r2
 80194c8:	d009      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	4a1b      	ldr	r2, [pc, #108]	; (801953c <HAL_DMA_Abort+0x26c>)
 80194d0:	4293      	cmp	r3, r2
 80194d2:	d004      	beq.n	80194de <HAL_DMA_Abort+0x20e>
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	4a19      	ldr	r2, [pc, #100]	; (8019540 <HAL_DMA_Abort+0x270>)
 80194da:	4293      	cmp	r3, r2
 80194dc:	d132      	bne.n	8019544 <HAL_DMA_Abort+0x274>
 80194de:	2301      	movs	r3, #1
 80194e0:	e031      	b.n	8019546 <HAL_DMA_Abort+0x276>
 80194e2:	bf00      	nop
 80194e4:	40020010 	.word	0x40020010
 80194e8:	40020028 	.word	0x40020028
 80194ec:	40020040 	.word	0x40020040
 80194f0:	40020058 	.word	0x40020058
 80194f4:	40020070 	.word	0x40020070
 80194f8:	40020088 	.word	0x40020088
 80194fc:	400200a0 	.word	0x400200a0
 8019500:	400200b8 	.word	0x400200b8
 8019504:	40020410 	.word	0x40020410
 8019508:	40020428 	.word	0x40020428
 801950c:	40020440 	.word	0x40020440
 8019510:	40020458 	.word	0x40020458
 8019514:	40020470 	.word	0x40020470
 8019518:	40020488 	.word	0x40020488
 801951c:	400204a0 	.word	0x400204a0
 8019520:	400204b8 	.word	0x400204b8
 8019524:	58025408 	.word	0x58025408
 8019528:	5802541c 	.word	0x5802541c
 801952c:	58025430 	.word	0x58025430
 8019530:	58025444 	.word	0x58025444
 8019534:	58025458 	.word	0x58025458
 8019538:	5802546c 	.word	0x5802546c
 801953c:	58025480 	.word	0x58025480
 8019540:	58025494 	.word	0x58025494
 8019544:	2300      	movs	r3, #0
 8019546:	2b00      	cmp	r3, #0
 8019548:	d007      	beq.n	801955a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801954e:	681a      	ldr	r2, [r3, #0]
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019558:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	4a6d      	ldr	r2, [pc, #436]	; (8019714 <HAL_DMA_Abort+0x444>)
 8019560:	4293      	cmp	r3, r2
 8019562:	d04a      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	4a6b      	ldr	r2, [pc, #428]	; (8019718 <HAL_DMA_Abort+0x448>)
 801956a:	4293      	cmp	r3, r2
 801956c:	d045      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	4a6a      	ldr	r2, [pc, #424]	; (801971c <HAL_DMA_Abort+0x44c>)
 8019574:	4293      	cmp	r3, r2
 8019576:	d040      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	4a68      	ldr	r2, [pc, #416]	; (8019720 <HAL_DMA_Abort+0x450>)
 801957e:	4293      	cmp	r3, r2
 8019580:	d03b      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	4a67      	ldr	r2, [pc, #412]	; (8019724 <HAL_DMA_Abort+0x454>)
 8019588:	4293      	cmp	r3, r2
 801958a:	d036      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	4a65      	ldr	r2, [pc, #404]	; (8019728 <HAL_DMA_Abort+0x458>)
 8019592:	4293      	cmp	r3, r2
 8019594:	d031      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	4a64      	ldr	r2, [pc, #400]	; (801972c <HAL_DMA_Abort+0x45c>)
 801959c:	4293      	cmp	r3, r2
 801959e:	d02c      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	4a62      	ldr	r2, [pc, #392]	; (8019730 <HAL_DMA_Abort+0x460>)
 80195a6:	4293      	cmp	r3, r2
 80195a8:	d027      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	4a61      	ldr	r2, [pc, #388]	; (8019734 <HAL_DMA_Abort+0x464>)
 80195b0:	4293      	cmp	r3, r2
 80195b2:	d022      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	4a5f      	ldr	r2, [pc, #380]	; (8019738 <HAL_DMA_Abort+0x468>)
 80195ba:	4293      	cmp	r3, r2
 80195bc:	d01d      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	4a5e      	ldr	r2, [pc, #376]	; (801973c <HAL_DMA_Abort+0x46c>)
 80195c4:	4293      	cmp	r3, r2
 80195c6:	d018      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	4a5c      	ldr	r2, [pc, #368]	; (8019740 <HAL_DMA_Abort+0x470>)
 80195ce:	4293      	cmp	r3, r2
 80195d0:	d013      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	4a5b      	ldr	r2, [pc, #364]	; (8019744 <HAL_DMA_Abort+0x474>)
 80195d8:	4293      	cmp	r3, r2
 80195da:	d00e      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	4a59      	ldr	r2, [pc, #356]	; (8019748 <HAL_DMA_Abort+0x478>)
 80195e2:	4293      	cmp	r3, r2
 80195e4:	d009      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	4a58      	ldr	r2, [pc, #352]	; (801974c <HAL_DMA_Abort+0x47c>)
 80195ec:	4293      	cmp	r3, r2
 80195ee:	d004      	beq.n	80195fa <HAL_DMA_Abort+0x32a>
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	4a56      	ldr	r2, [pc, #344]	; (8019750 <HAL_DMA_Abort+0x480>)
 80195f6:	4293      	cmp	r3, r2
 80195f8:	d108      	bne.n	801960c <HAL_DMA_Abort+0x33c>
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	681a      	ldr	r2, [r3, #0]
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	f022 0201 	bic.w	r2, r2, #1
 8019608:	601a      	str	r2, [r3, #0]
 801960a:	e007      	b.n	801961c <HAL_DMA_Abort+0x34c>
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	681a      	ldr	r2, [r3, #0]
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	f022 0201 	bic.w	r2, r2, #1
 801961a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801961c:	e013      	b.n	8019646 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801961e:	f7fc ff67 	bl	80164f0 <HAL_GetTick>
 8019622:	4602      	mov	r2, r0
 8019624:	693b      	ldr	r3, [r7, #16]
 8019626:	1ad3      	subs	r3, r2, r3
 8019628:	2b05      	cmp	r3, #5
 801962a:	d90c      	bls.n	8019646 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	2220      	movs	r2, #32
 8019630:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	2203      	movs	r2, #3
 8019636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	2200      	movs	r2, #0
 801963e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8019642:	2301      	movs	r3, #1
 8019644:	e12d      	b.n	80198a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	f003 0301 	and.w	r3, r3, #1
 801964e:	2b00      	cmp	r3, #0
 8019650:	d1e5      	bne.n	801961e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	4a2f      	ldr	r2, [pc, #188]	; (8019714 <HAL_DMA_Abort+0x444>)
 8019658:	4293      	cmp	r3, r2
 801965a:	d04a      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	4a2d      	ldr	r2, [pc, #180]	; (8019718 <HAL_DMA_Abort+0x448>)
 8019662:	4293      	cmp	r3, r2
 8019664:	d045      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	4a2c      	ldr	r2, [pc, #176]	; (801971c <HAL_DMA_Abort+0x44c>)
 801966c:	4293      	cmp	r3, r2
 801966e:	d040      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	4a2a      	ldr	r2, [pc, #168]	; (8019720 <HAL_DMA_Abort+0x450>)
 8019676:	4293      	cmp	r3, r2
 8019678:	d03b      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	4a29      	ldr	r2, [pc, #164]	; (8019724 <HAL_DMA_Abort+0x454>)
 8019680:	4293      	cmp	r3, r2
 8019682:	d036      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	4a27      	ldr	r2, [pc, #156]	; (8019728 <HAL_DMA_Abort+0x458>)
 801968a:	4293      	cmp	r3, r2
 801968c:	d031      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	4a26      	ldr	r2, [pc, #152]	; (801972c <HAL_DMA_Abort+0x45c>)
 8019694:	4293      	cmp	r3, r2
 8019696:	d02c      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	4a24      	ldr	r2, [pc, #144]	; (8019730 <HAL_DMA_Abort+0x460>)
 801969e:	4293      	cmp	r3, r2
 80196a0:	d027      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	4a23      	ldr	r2, [pc, #140]	; (8019734 <HAL_DMA_Abort+0x464>)
 80196a8:	4293      	cmp	r3, r2
 80196aa:	d022      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	4a21      	ldr	r2, [pc, #132]	; (8019738 <HAL_DMA_Abort+0x468>)
 80196b2:	4293      	cmp	r3, r2
 80196b4:	d01d      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	4a20      	ldr	r2, [pc, #128]	; (801973c <HAL_DMA_Abort+0x46c>)
 80196bc:	4293      	cmp	r3, r2
 80196be:	d018      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	4a1e      	ldr	r2, [pc, #120]	; (8019740 <HAL_DMA_Abort+0x470>)
 80196c6:	4293      	cmp	r3, r2
 80196c8:	d013      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	4a1d      	ldr	r2, [pc, #116]	; (8019744 <HAL_DMA_Abort+0x474>)
 80196d0:	4293      	cmp	r3, r2
 80196d2:	d00e      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	4a1b      	ldr	r2, [pc, #108]	; (8019748 <HAL_DMA_Abort+0x478>)
 80196da:	4293      	cmp	r3, r2
 80196dc:	d009      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	4a1a      	ldr	r2, [pc, #104]	; (801974c <HAL_DMA_Abort+0x47c>)
 80196e4:	4293      	cmp	r3, r2
 80196e6:	d004      	beq.n	80196f2 <HAL_DMA_Abort+0x422>
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	4a18      	ldr	r2, [pc, #96]	; (8019750 <HAL_DMA_Abort+0x480>)
 80196ee:	4293      	cmp	r3, r2
 80196f0:	d101      	bne.n	80196f6 <HAL_DMA_Abort+0x426>
 80196f2:	2301      	movs	r3, #1
 80196f4:	e000      	b.n	80196f8 <HAL_DMA_Abort+0x428>
 80196f6:	2300      	movs	r3, #0
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d02b      	beq.n	8019754 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019700:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019706:	f003 031f 	and.w	r3, r3, #31
 801970a:	223f      	movs	r2, #63	; 0x3f
 801970c:	409a      	lsls	r2, r3
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	609a      	str	r2, [r3, #8]
 8019712:	e02a      	b.n	801976a <HAL_DMA_Abort+0x49a>
 8019714:	40020010 	.word	0x40020010
 8019718:	40020028 	.word	0x40020028
 801971c:	40020040 	.word	0x40020040
 8019720:	40020058 	.word	0x40020058
 8019724:	40020070 	.word	0x40020070
 8019728:	40020088 	.word	0x40020088
 801972c:	400200a0 	.word	0x400200a0
 8019730:	400200b8 	.word	0x400200b8
 8019734:	40020410 	.word	0x40020410
 8019738:	40020428 	.word	0x40020428
 801973c:	40020440 	.word	0x40020440
 8019740:	40020458 	.word	0x40020458
 8019744:	40020470 	.word	0x40020470
 8019748:	40020488 	.word	0x40020488
 801974c:	400204a0 	.word	0x400204a0
 8019750:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019758:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801975e:	f003 031f 	and.w	r3, r3, #31
 8019762:	2201      	movs	r2, #1
 8019764:	409a      	lsls	r2, r3
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	4a4f      	ldr	r2, [pc, #316]	; (80198ac <HAL_DMA_Abort+0x5dc>)
 8019770:	4293      	cmp	r3, r2
 8019772:	d072      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	4a4d      	ldr	r2, [pc, #308]	; (80198b0 <HAL_DMA_Abort+0x5e0>)
 801977a:	4293      	cmp	r3, r2
 801977c:	d06d      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	4a4c      	ldr	r2, [pc, #304]	; (80198b4 <HAL_DMA_Abort+0x5e4>)
 8019784:	4293      	cmp	r3, r2
 8019786:	d068      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	4a4a      	ldr	r2, [pc, #296]	; (80198b8 <HAL_DMA_Abort+0x5e8>)
 801978e:	4293      	cmp	r3, r2
 8019790:	d063      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	4a49      	ldr	r2, [pc, #292]	; (80198bc <HAL_DMA_Abort+0x5ec>)
 8019798:	4293      	cmp	r3, r2
 801979a:	d05e      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	4a47      	ldr	r2, [pc, #284]	; (80198c0 <HAL_DMA_Abort+0x5f0>)
 80197a2:	4293      	cmp	r3, r2
 80197a4:	d059      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	4a46      	ldr	r2, [pc, #280]	; (80198c4 <HAL_DMA_Abort+0x5f4>)
 80197ac:	4293      	cmp	r3, r2
 80197ae:	d054      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	4a44      	ldr	r2, [pc, #272]	; (80198c8 <HAL_DMA_Abort+0x5f8>)
 80197b6:	4293      	cmp	r3, r2
 80197b8:	d04f      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	4a43      	ldr	r2, [pc, #268]	; (80198cc <HAL_DMA_Abort+0x5fc>)
 80197c0:	4293      	cmp	r3, r2
 80197c2:	d04a      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	4a41      	ldr	r2, [pc, #260]	; (80198d0 <HAL_DMA_Abort+0x600>)
 80197ca:	4293      	cmp	r3, r2
 80197cc:	d045      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	4a40      	ldr	r2, [pc, #256]	; (80198d4 <HAL_DMA_Abort+0x604>)
 80197d4:	4293      	cmp	r3, r2
 80197d6:	d040      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	4a3e      	ldr	r2, [pc, #248]	; (80198d8 <HAL_DMA_Abort+0x608>)
 80197de:	4293      	cmp	r3, r2
 80197e0:	d03b      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	4a3d      	ldr	r2, [pc, #244]	; (80198dc <HAL_DMA_Abort+0x60c>)
 80197e8:	4293      	cmp	r3, r2
 80197ea:	d036      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	4a3b      	ldr	r2, [pc, #236]	; (80198e0 <HAL_DMA_Abort+0x610>)
 80197f2:	4293      	cmp	r3, r2
 80197f4:	d031      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	4a3a      	ldr	r2, [pc, #232]	; (80198e4 <HAL_DMA_Abort+0x614>)
 80197fc:	4293      	cmp	r3, r2
 80197fe:	d02c      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	4a38      	ldr	r2, [pc, #224]	; (80198e8 <HAL_DMA_Abort+0x618>)
 8019806:	4293      	cmp	r3, r2
 8019808:	d027      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	4a37      	ldr	r2, [pc, #220]	; (80198ec <HAL_DMA_Abort+0x61c>)
 8019810:	4293      	cmp	r3, r2
 8019812:	d022      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	4a35      	ldr	r2, [pc, #212]	; (80198f0 <HAL_DMA_Abort+0x620>)
 801981a:	4293      	cmp	r3, r2
 801981c:	d01d      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	4a34      	ldr	r2, [pc, #208]	; (80198f4 <HAL_DMA_Abort+0x624>)
 8019824:	4293      	cmp	r3, r2
 8019826:	d018      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	4a32      	ldr	r2, [pc, #200]	; (80198f8 <HAL_DMA_Abort+0x628>)
 801982e:	4293      	cmp	r3, r2
 8019830:	d013      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	4a31      	ldr	r2, [pc, #196]	; (80198fc <HAL_DMA_Abort+0x62c>)
 8019838:	4293      	cmp	r3, r2
 801983a:	d00e      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	4a2f      	ldr	r2, [pc, #188]	; (8019900 <HAL_DMA_Abort+0x630>)
 8019842:	4293      	cmp	r3, r2
 8019844:	d009      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	4a2e      	ldr	r2, [pc, #184]	; (8019904 <HAL_DMA_Abort+0x634>)
 801984c:	4293      	cmp	r3, r2
 801984e:	d004      	beq.n	801985a <HAL_DMA_Abort+0x58a>
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	4a2c      	ldr	r2, [pc, #176]	; (8019908 <HAL_DMA_Abort+0x638>)
 8019856:	4293      	cmp	r3, r2
 8019858:	d101      	bne.n	801985e <HAL_DMA_Abort+0x58e>
 801985a:	2301      	movs	r3, #1
 801985c:	e000      	b.n	8019860 <HAL_DMA_Abort+0x590>
 801985e:	2300      	movs	r3, #0
 8019860:	2b00      	cmp	r3, #0
 8019862:	d015      	beq.n	8019890 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019868:	687a      	ldr	r2, [r7, #4]
 801986a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801986c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019872:	2b00      	cmp	r3, #0
 8019874:	d00c      	beq.n	8019890 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801987a:	681a      	ldr	r2, [r3, #0]
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019884:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801988a:	687a      	ldr	r2, [r7, #4]
 801988c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801988e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	2201      	movs	r2, #1
 8019894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2200      	movs	r2, #0
 801989c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80198a0:	2300      	movs	r3, #0
}
 80198a2:	4618      	mov	r0, r3
 80198a4:	3718      	adds	r7, #24
 80198a6:	46bd      	mov	sp, r7
 80198a8:	bd80      	pop	{r7, pc}
 80198aa:	bf00      	nop
 80198ac:	40020010 	.word	0x40020010
 80198b0:	40020028 	.word	0x40020028
 80198b4:	40020040 	.word	0x40020040
 80198b8:	40020058 	.word	0x40020058
 80198bc:	40020070 	.word	0x40020070
 80198c0:	40020088 	.word	0x40020088
 80198c4:	400200a0 	.word	0x400200a0
 80198c8:	400200b8 	.word	0x400200b8
 80198cc:	40020410 	.word	0x40020410
 80198d0:	40020428 	.word	0x40020428
 80198d4:	40020440 	.word	0x40020440
 80198d8:	40020458 	.word	0x40020458
 80198dc:	40020470 	.word	0x40020470
 80198e0:	40020488 	.word	0x40020488
 80198e4:	400204a0 	.word	0x400204a0
 80198e8:	400204b8 	.word	0x400204b8
 80198ec:	58025408 	.word	0x58025408
 80198f0:	5802541c 	.word	0x5802541c
 80198f4:	58025430 	.word	0x58025430
 80198f8:	58025444 	.word	0x58025444
 80198fc:	58025458 	.word	0x58025458
 8019900:	5802546c 	.word	0x5802546c
 8019904:	58025480 	.word	0x58025480
 8019908:	58025494 	.word	0x58025494

0801990c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b084      	sub	sp, #16
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d101      	bne.n	801991e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801991a:	2301      	movs	r3, #1
 801991c:	e205      	b.n	8019d2a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019924:	b2db      	uxtb	r3, r3
 8019926:	2b02      	cmp	r3, #2
 8019928:	d004      	beq.n	8019934 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	2280      	movs	r2, #128	; 0x80
 801992e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8019930:	2301      	movs	r3, #1
 8019932:	e1fa      	b.n	8019d2a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	4a8c      	ldr	r2, [pc, #560]	; (8019b6c <HAL_DMA_Abort_IT+0x260>)
 801993a:	4293      	cmp	r3, r2
 801993c:	d04a      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	4a8b      	ldr	r2, [pc, #556]	; (8019b70 <HAL_DMA_Abort_IT+0x264>)
 8019944:	4293      	cmp	r3, r2
 8019946:	d045      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	4a89      	ldr	r2, [pc, #548]	; (8019b74 <HAL_DMA_Abort_IT+0x268>)
 801994e:	4293      	cmp	r3, r2
 8019950:	d040      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	4a88      	ldr	r2, [pc, #544]	; (8019b78 <HAL_DMA_Abort_IT+0x26c>)
 8019958:	4293      	cmp	r3, r2
 801995a:	d03b      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	4a86      	ldr	r2, [pc, #536]	; (8019b7c <HAL_DMA_Abort_IT+0x270>)
 8019962:	4293      	cmp	r3, r2
 8019964:	d036      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	4a85      	ldr	r2, [pc, #532]	; (8019b80 <HAL_DMA_Abort_IT+0x274>)
 801996c:	4293      	cmp	r3, r2
 801996e:	d031      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	4a83      	ldr	r2, [pc, #524]	; (8019b84 <HAL_DMA_Abort_IT+0x278>)
 8019976:	4293      	cmp	r3, r2
 8019978:	d02c      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	4a82      	ldr	r2, [pc, #520]	; (8019b88 <HAL_DMA_Abort_IT+0x27c>)
 8019980:	4293      	cmp	r3, r2
 8019982:	d027      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	4a80      	ldr	r2, [pc, #512]	; (8019b8c <HAL_DMA_Abort_IT+0x280>)
 801998a:	4293      	cmp	r3, r2
 801998c:	d022      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	4a7f      	ldr	r2, [pc, #508]	; (8019b90 <HAL_DMA_Abort_IT+0x284>)
 8019994:	4293      	cmp	r3, r2
 8019996:	d01d      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	4a7d      	ldr	r2, [pc, #500]	; (8019b94 <HAL_DMA_Abort_IT+0x288>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d018      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	4a7c      	ldr	r2, [pc, #496]	; (8019b98 <HAL_DMA_Abort_IT+0x28c>)
 80199a8:	4293      	cmp	r3, r2
 80199aa:	d013      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	4a7a      	ldr	r2, [pc, #488]	; (8019b9c <HAL_DMA_Abort_IT+0x290>)
 80199b2:	4293      	cmp	r3, r2
 80199b4:	d00e      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	4a79      	ldr	r2, [pc, #484]	; (8019ba0 <HAL_DMA_Abort_IT+0x294>)
 80199bc:	4293      	cmp	r3, r2
 80199be:	d009      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	4a77      	ldr	r2, [pc, #476]	; (8019ba4 <HAL_DMA_Abort_IT+0x298>)
 80199c6:	4293      	cmp	r3, r2
 80199c8:	d004      	beq.n	80199d4 <HAL_DMA_Abort_IT+0xc8>
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	4a76      	ldr	r2, [pc, #472]	; (8019ba8 <HAL_DMA_Abort_IT+0x29c>)
 80199d0:	4293      	cmp	r3, r2
 80199d2:	d101      	bne.n	80199d8 <HAL_DMA_Abort_IT+0xcc>
 80199d4:	2301      	movs	r3, #1
 80199d6:	e000      	b.n	80199da <HAL_DMA_Abort_IT+0xce>
 80199d8:	2300      	movs	r3, #0
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d065      	beq.n	8019aaa <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	2204      	movs	r2, #4
 80199e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	4a60      	ldr	r2, [pc, #384]	; (8019b6c <HAL_DMA_Abort_IT+0x260>)
 80199ec:	4293      	cmp	r3, r2
 80199ee:	d04a      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	4a5e      	ldr	r2, [pc, #376]	; (8019b70 <HAL_DMA_Abort_IT+0x264>)
 80199f6:	4293      	cmp	r3, r2
 80199f8:	d045      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	4a5d      	ldr	r2, [pc, #372]	; (8019b74 <HAL_DMA_Abort_IT+0x268>)
 8019a00:	4293      	cmp	r3, r2
 8019a02:	d040      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	4a5b      	ldr	r2, [pc, #364]	; (8019b78 <HAL_DMA_Abort_IT+0x26c>)
 8019a0a:	4293      	cmp	r3, r2
 8019a0c:	d03b      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	4a5a      	ldr	r2, [pc, #360]	; (8019b7c <HAL_DMA_Abort_IT+0x270>)
 8019a14:	4293      	cmp	r3, r2
 8019a16:	d036      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	4a58      	ldr	r2, [pc, #352]	; (8019b80 <HAL_DMA_Abort_IT+0x274>)
 8019a1e:	4293      	cmp	r3, r2
 8019a20:	d031      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	4a57      	ldr	r2, [pc, #348]	; (8019b84 <HAL_DMA_Abort_IT+0x278>)
 8019a28:	4293      	cmp	r3, r2
 8019a2a:	d02c      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	4a55      	ldr	r2, [pc, #340]	; (8019b88 <HAL_DMA_Abort_IT+0x27c>)
 8019a32:	4293      	cmp	r3, r2
 8019a34:	d027      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	4a54      	ldr	r2, [pc, #336]	; (8019b8c <HAL_DMA_Abort_IT+0x280>)
 8019a3c:	4293      	cmp	r3, r2
 8019a3e:	d022      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	4a52      	ldr	r2, [pc, #328]	; (8019b90 <HAL_DMA_Abort_IT+0x284>)
 8019a46:	4293      	cmp	r3, r2
 8019a48:	d01d      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	4a51      	ldr	r2, [pc, #324]	; (8019b94 <HAL_DMA_Abort_IT+0x288>)
 8019a50:	4293      	cmp	r3, r2
 8019a52:	d018      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	4a4f      	ldr	r2, [pc, #316]	; (8019b98 <HAL_DMA_Abort_IT+0x28c>)
 8019a5a:	4293      	cmp	r3, r2
 8019a5c:	d013      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	4a4e      	ldr	r2, [pc, #312]	; (8019b9c <HAL_DMA_Abort_IT+0x290>)
 8019a64:	4293      	cmp	r3, r2
 8019a66:	d00e      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	4a4c      	ldr	r2, [pc, #304]	; (8019ba0 <HAL_DMA_Abort_IT+0x294>)
 8019a6e:	4293      	cmp	r3, r2
 8019a70:	d009      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	4a4b      	ldr	r2, [pc, #300]	; (8019ba4 <HAL_DMA_Abort_IT+0x298>)
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	d004      	beq.n	8019a86 <HAL_DMA_Abort_IT+0x17a>
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	4a49      	ldr	r2, [pc, #292]	; (8019ba8 <HAL_DMA_Abort_IT+0x29c>)
 8019a82:	4293      	cmp	r3, r2
 8019a84:	d108      	bne.n	8019a98 <HAL_DMA_Abort_IT+0x18c>
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	681a      	ldr	r2, [r3, #0]
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	f022 0201 	bic.w	r2, r2, #1
 8019a94:	601a      	str	r2, [r3, #0]
 8019a96:	e147      	b.n	8019d28 <HAL_DMA_Abort_IT+0x41c>
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	681a      	ldr	r2, [r3, #0]
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	f022 0201 	bic.w	r2, r2, #1
 8019aa6:	601a      	str	r2, [r3, #0]
 8019aa8:	e13e      	b.n	8019d28 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	681a      	ldr	r2, [r3, #0]
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	f022 020e 	bic.w	r2, r2, #14
 8019ab8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	4a2b      	ldr	r2, [pc, #172]	; (8019b6c <HAL_DMA_Abort_IT+0x260>)
 8019ac0:	4293      	cmp	r3, r2
 8019ac2:	d04a      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	4a29      	ldr	r2, [pc, #164]	; (8019b70 <HAL_DMA_Abort_IT+0x264>)
 8019aca:	4293      	cmp	r3, r2
 8019acc:	d045      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	4a28      	ldr	r2, [pc, #160]	; (8019b74 <HAL_DMA_Abort_IT+0x268>)
 8019ad4:	4293      	cmp	r3, r2
 8019ad6:	d040      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	4a26      	ldr	r2, [pc, #152]	; (8019b78 <HAL_DMA_Abort_IT+0x26c>)
 8019ade:	4293      	cmp	r3, r2
 8019ae0:	d03b      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	4a25      	ldr	r2, [pc, #148]	; (8019b7c <HAL_DMA_Abort_IT+0x270>)
 8019ae8:	4293      	cmp	r3, r2
 8019aea:	d036      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	4a23      	ldr	r2, [pc, #140]	; (8019b80 <HAL_DMA_Abort_IT+0x274>)
 8019af2:	4293      	cmp	r3, r2
 8019af4:	d031      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	4a22      	ldr	r2, [pc, #136]	; (8019b84 <HAL_DMA_Abort_IT+0x278>)
 8019afc:	4293      	cmp	r3, r2
 8019afe:	d02c      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	4a20      	ldr	r2, [pc, #128]	; (8019b88 <HAL_DMA_Abort_IT+0x27c>)
 8019b06:	4293      	cmp	r3, r2
 8019b08:	d027      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	4a1f      	ldr	r2, [pc, #124]	; (8019b8c <HAL_DMA_Abort_IT+0x280>)
 8019b10:	4293      	cmp	r3, r2
 8019b12:	d022      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	4a1d      	ldr	r2, [pc, #116]	; (8019b90 <HAL_DMA_Abort_IT+0x284>)
 8019b1a:	4293      	cmp	r3, r2
 8019b1c:	d01d      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	4a1c      	ldr	r2, [pc, #112]	; (8019b94 <HAL_DMA_Abort_IT+0x288>)
 8019b24:	4293      	cmp	r3, r2
 8019b26:	d018      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	4a1a      	ldr	r2, [pc, #104]	; (8019b98 <HAL_DMA_Abort_IT+0x28c>)
 8019b2e:	4293      	cmp	r3, r2
 8019b30:	d013      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	4a19      	ldr	r2, [pc, #100]	; (8019b9c <HAL_DMA_Abort_IT+0x290>)
 8019b38:	4293      	cmp	r3, r2
 8019b3a:	d00e      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	4a17      	ldr	r2, [pc, #92]	; (8019ba0 <HAL_DMA_Abort_IT+0x294>)
 8019b42:	4293      	cmp	r3, r2
 8019b44:	d009      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	4a16      	ldr	r2, [pc, #88]	; (8019ba4 <HAL_DMA_Abort_IT+0x298>)
 8019b4c:	4293      	cmp	r3, r2
 8019b4e:	d004      	beq.n	8019b5a <HAL_DMA_Abort_IT+0x24e>
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	4a14      	ldr	r2, [pc, #80]	; (8019ba8 <HAL_DMA_Abort_IT+0x29c>)
 8019b56:	4293      	cmp	r3, r2
 8019b58:	d128      	bne.n	8019bac <HAL_DMA_Abort_IT+0x2a0>
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	681a      	ldr	r2, [r3, #0]
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	f022 0201 	bic.w	r2, r2, #1
 8019b68:	601a      	str	r2, [r3, #0]
 8019b6a:	e027      	b.n	8019bbc <HAL_DMA_Abort_IT+0x2b0>
 8019b6c:	40020010 	.word	0x40020010
 8019b70:	40020028 	.word	0x40020028
 8019b74:	40020040 	.word	0x40020040
 8019b78:	40020058 	.word	0x40020058
 8019b7c:	40020070 	.word	0x40020070
 8019b80:	40020088 	.word	0x40020088
 8019b84:	400200a0 	.word	0x400200a0
 8019b88:	400200b8 	.word	0x400200b8
 8019b8c:	40020410 	.word	0x40020410
 8019b90:	40020428 	.word	0x40020428
 8019b94:	40020440 	.word	0x40020440
 8019b98:	40020458 	.word	0x40020458
 8019b9c:	40020470 	.word	0x40020470
 8019ba0:	40020488 	.word	0x40020488
 8019ba4:	400204a0 	.word	0x400204a0
 8019ba8:	400204b8 	.word	0x400204b8
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	681a      	ldr	r2, [r3, #0]
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	f022 0201 	bic.w	r2, r2, #1
 8019bba:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	4a5c      	ldr	r2, [pc, #368]	; (8019d34 <HAL_DMA_Abort_IT+0x428>)
 8019bc2:	4293      	cmp	r3, r2
 8019bc4:	d072      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	4a5b      	ldr	r2, [pc, #364]	; (8019d38 <HAL_DMA_Abort_IT+0x42c>)
 8019bcc:	4293      	cmp	r3, r2
 8019bce:	d06d      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	4a59      	ldr	r2, [pc, #356]	; (8019d3c <HAL_DMA_Abort_IT+0x430>)
 8019bd6:	4293      	cmp	r3, r2
 8019bd8:	d068      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	4a58      	ldr	r2, [pc, #352]	; (8019d40 <HAL_DMA_Abort_IT+0x434>)
 8019be0:	4293      	cmp	r3, r2
 8019be2:	d063      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	4a56      	ldr	r2, [pc, #344]	; (8019d44 <HAL_DMA_Abort_IT+0x438>)
 8019bea:	4293      	cmp	r3, r2
 8019bec:	d05e      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	4a55      	ldr	r2, [pc, #340]	; (8019d48 <HAL_DMA_Abort_IT+0x43c>)
 8019bf4:	4293      	cmp	r3, r2
 8019bf6:	d059      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	4a53      	ldr	r2, [pc, #332]	; (8019d4c <HAL_DMA_Abort_IT+0x440>)
 8019bfe:	4293      	cmp	r3, r2
 8019c00:	d054      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	4a52      	ldr	r2, [pc, #328]	; (8019d50 <HAL_DMA_Abort_IT+0x444>)
 8019c08:	4293      	cmp	r3, r2
 8019c0a:	d04f      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	4a50      	ldr	r2, [pc, #320]	; (8019d54 <HAL_DMA_Abort_IT+0x448>)
 8019c12:	4293      	cmp	r3, r2
 8019c14:	d04a      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	4a4f      	ldr	r2, [pc, #316]	; (8019d58 <HAL_DMA_Abort_IT+0x44c>)
 8019c1c:	4293      	cmp	r3, r2
 8019c1e:	d045      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	4a4d      	ldr	r2, [pc, #308]	; (8019d5c <HAL_DMA_Abort_IT+0x450>)
 8019c26:	4293      	cmp	r3, r2
 8019c28:	d040      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	4a4c      	ldr	r2, [pc, #304]	; (8019d60 <HAL_DMA_Abort_IT+0x454>)
 8019c30:	4293      	cmp	r3, r2
 8019c32:	d03b      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	4a4a      	ldr	r2, [pc, #296]	; (8019d64 <HAL_DMA_Abort_IT+0x458>)
 8019c3a:	4293      	cmp	r3, r2
 8019c3c:	d036      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	4a49      	ldr	r2, [pc, #292]	; (8019d68 <HAL_DMA_Abort_IT+0x45c>)
 8019c44:	4293      	cmp	r3, r2
 8019c46:	d031      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	4a47      	ldr	r2, [pc, #284]	; (8019d6c <HAL_DMA_Abort_IT+0x460>)
 8019c4e:	4293      	cmp	r3, r2
 8019c50:	d02c      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	4a46      	ldr	r2, [pc, #280]	; (8019d70 <HAL_DMA_Abort_IT+0x464>)
 8019c58:	4293      	cmp	r3, r2
 8019c5a:	d027      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	4a44      	ldr	r2, [pc, #272]	; (8019d74 <HAL_DMA_Abort_IT+0x468>)
 8019c62:	4293      	cmp	r3, r2
 8019c64:	d022      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	4a43      	ldr	r2, [pc, #268]	; (8019d78 <HAL_DMA_Abort_IT+0x46c>)
 8019c6c:	4293      	cmp	r3, r2
 8019c6e:	d01d      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	4a41      	ldr	r2, [pc, #260]	; (8019d7c <HAL_DMA_Abort_IT+0x470>)
 8019c76:	4293      	cmp	r3, r2
 8019c78:	d018      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	4a40      	ldr	r2, [pc, #256]	; (8019d80 <HAL_DMA_Abort_IT+0x474>)
 8019c80:	4293      	cmp	r3, r2
 8019c82:	d013      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	4a3e      	ldr	r2, [pc, #248]	; (8019d84 <HAL_DMA_Abort_IT+0x478>)
 8019c8a:	4293      	cmp	r3, r2
 8019c8c:	d00e      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	4a3d      	ldr	r2, [pc, #244]	; (8019d88 <HAL_DMA_Abort_IT+0x47c>)
 8019c94:	4293      	cmp	r3, r2
 8019c96:	d009      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	4a3b      	ldr	r2, [pc, #236]	; (8019d8c <HAL_DMA_Abort_IT+0x480>)
 8019c9e:	4293      	cmp	r3, r2
 8019ca0:	d004      	beq.n	8019cac <HAL_DMA_Abort_IT+0x3a0>
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	4a3a      	ldr	r2, [pc, #232]	; (8019d90 <HAL_DMA_Abort_IT+0x484>)
 8019ca8:	4293      	cmp	r3, r2
 8019caa:	d101      	bne.n	8019cb0 <HAL_DMA_Abort_IT+0x3a4>
 8019cac:	2301      	movs	r3, #1
 8019cae:	e000      	b.n	8019cb2 <HAL_DMA_Abort_IT+0x3a6>
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d028      	beq.n	8019d08 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019cba:	681a      	ldr	r2, [r3, #0]
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019cc4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cd0:	f003 031f 	and.w	r3, r3, #31
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	409a      	lsls	r2, r3
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019ce0:	687a      	ldr	r2, [r7, #4]
 8019ce2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019ce4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d00c      	beq.n	8019d08 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cf2:	681a      	ldr	r2, [r3, #0]
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019cfc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d02:	687a      	ldr	r2, [r7, #4]
 8019d04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8019d06:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	2201      	movs	r2, #1
 8019d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	2200      	movs	r2, #0
 8019d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d003      	beq.n	8019d28 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019d24:	6878      	ldr	r0, [r7, #4]
 8019d26:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8019d28:	2300      	movs	r3, #0
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	3710      	adds	r7, #16
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bd80      	pop	{r7, pc}
 8019d32:	bf00      	nop
 8019d34:	40020010 	.word	0x40020010
 8019d38:	40020028 	.word	0x40020028
 8019d3c:	40020040 	.word	0x40020040
 8019d40:	40020058 	.word	0x40020058
 8019d44:	40020070 	.word	0x40020070
 8019d48:	40020088 	.word	0x40020088
 8019d4c:	400200a0 	.word	0x400200a0
 8019d50:	400200b8 	.word	0x400200b8
 8019d54:	40020410 	.word	0x40020410
 8019d58:	40020428 	.word	0x40020428
 8019d5c:	40020440 	.word	0x40020440
 8019d60:	40020458 	.word	0x40020458
 8019d64:	40020470 	.word	0x40020470
 8019d68:	40020488 	.word	0x40020488
 8019d6c:	400204a0 	.word	0x400204a0
 8019d70:	400204b8 	.word	0x400204b8
 8019d74:	58025408 	.word	0x58025408
 8019d78:	5802541c 	.word	0x5802541c
 8019d7c:	58025430 	.word	0x58025430
 8019d80:	58025444 	.word	0x58025444
 8019d84:	58025458 	.word	0x58025458
 8019d88:	5802546c 	.word	0x5802546c
 8019d8c:	58025480 	.word	0x58025480
 8019d90:	58025494 	.word	0x58025494

08019d94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b08a      	sub	sp, #40	; 0x28
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8019da0:	4b67      	ldr	r3, [pc, #412]	; (8019f40 <HAL_DMA_IRQHandler+0x1ac>)
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	4a67      	ldr	r2, [pc, #412]	; (8019f44 <HAL_DMA_IRQHandler+0x1b0>)
 8019da6:	fba2 2303 	umull	r2, r3, r2, r3
 8019daa:	0a9b      	lsrs	r3, r3, #10
 8019dac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019db2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019db8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8019dba:	6a3b      	ldr	r3, [r7, #32]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8019dc0:	69fb      	ldr	r3, [r7, #28]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	4a5f      	ldr	r2, [pc, #380]	; (8019f48 <HAL_DMA_IRQHandler+0x1b4>)
 8019dcc:	4293      	cmp	r3, r2
 8019dce:	d04a      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	4a5d      	ldr	r2, [pc, #372]	; (8019f4c <HAL_DMA_IRQHandler+0x1b8>)
 8019dd6:	4293      	cmp	r3, r2
 8019dd8:	d045      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	4a5c      	ldr	r2, [pc, #368]	; (8019f50 <HAL_DMA_IRQHandler+0x1bc>)
 8019de0:	4293      	cmp	r3, r2
 8019de2:	d040      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	4a5a      	ldr	r2, [pc, #360]	; (8019f54 <HAL_DMA_IRQHandler+0x1c0>)
 8019dea:	4293      	cmp	r3, r2
 8019dec:	d03b      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	4a59      	ldr	r2, [pc, #356]	; (8019f58 <HAL_DMA_IRQHandler+0x1c4>)
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d036      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	4a57      	ldr	r2, [pc, #348]	; (8019f5c <HAL_DMA_IRQHandler+0x1c8>)
 8019dfe:	4293      	cmp	r3, r2
 8019e00:	d031      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	4a56      	ldr	r2, [pc, #344]	; (8019f60 <HAL_DMA_IRQHandler+0x1cc>)
 8019e08:	4293      	cmp	r3, r2
 8019e0a:	d02c      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	4a54      	ldr	r2, [pc, #336]	; (8019f64 <HAL_DMA_IRQHandler+0x1d0>)
 8019e12:	4293      	cmp	r3, r2
 8019e14:	d027      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	4a53      	ldr	r2, [pc, #332]	; (8019f68 <HAL_DMA_IRQHandler+0x1d4>)
 8019e1c:	4293      	cmp	r3, r2
 8019e1e:	d022      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	4a51      	ldr	r2, [pc, #324]	; (8019f6c <HAL_DMA_IRQHandler+0x1d8>)
 8019e26:	4293      	cmp	r3, r2
 8019e28:	d01d      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	4a50      	ldr	r2, [pc, #320]	; (8019f70 <HAL_DMA_IRQHandler+0x1dc>)
 8019e30:	4293      	cmp	r3, r2
 8019e32:	d018      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	4a4e      	ldr	r2, [pc, #312]	; (8019f74 <HAL_DMA_IRQHandler+0x1e0>)
 8019e3a:	4293      	cmp	r3, r2
 8019e3c:	d013      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	4a4d      	ldr	r2, [pc, #308]	; (8019f78 <HAL_DMA_IRQHandler+0x1e4>)
 8019e44:	4293      	cmp	r3, r2
 8019e46:	d00e      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	4a4b      	ldr	r2, [pc, #300]	; (8019f7c <HAL_DMA_IRQHandler+0x1e8>)
 8019e4e:	4293      	cmp	r3, r2
 8019e50:	d009      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	4a4a      	ldr	r2, [pc, #296]	; (8019f80 <HAL_DMA_IRQHandler+0x1ec>)
 8019e58:	4293      	cmp	r3, r2
 8019e5a:	d004      	beq.n	8019e66 <HAL_DMA_IRQHandler+0xd2>
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	4a48      	ldr	r2, [pc, #288]	; (8019f84 <HAL_DMA_IRQHandler+0x1f0>)
 8019e62:	4293      	cmp	r3, r2
 8019e64:	d101      	bne.n	8019e6a <HAL_DMA_IRQHandler+0xd6>
 8019e66:	2301      	movs	r3, #1
 8019e68:	e000      	b.n	8019e6c <HAL_DMA_IRQHandler+0xd8>
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	f000 842b 	beq.w	801a6c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e76:	f003 031f 	and.w	r3, r3, #31
 8019e7a:	2208      	movs	r2, #8
 8019e7c:	409a      	lsls	r2, r3
 8019e7e:	69bb      	ldr	r3, [r7, #24]
 8019e80:	4013      	ands	r3, r2
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	f000 80a2 	beq.w	8019fcc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	4a2e      	ldr	r2, [pc, #184]	; (8019f48 <HAL_DMA_IRQHandler+0x1b4>)
 8019e8e:	4293      	cmp	r3, r2
 8019e90:	d04a      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	4a2d      	ldr	r2, [pc, #180]	; (8019f4c <HAL_DMA_IRQHandler+0x1b8>)
 8019e98:	4293      	cmp	r3, r2
 8019e9a:	d045      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	4a2b      	ldr	r2, [pc, #172]	; (8019f50 <HAL_DMA_IRQHandler+0x1bc>)
 8019ea2:	4293      	cmp	r3, r2
 8019ea4:	d040      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	4a2a      	ldr	r2, [pc, #168]	; (8019f54 <HAL_DMA_IRQHandler+0x1c0>)
 8019eac:	4293      	cmp	r3, r2
 8019eae:	d03b      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	4a28      	ldr	r2, [pc, #160]	; (8019f58 <HAL_DMA_IRQHandler+0x1c4>)
 8019eb6:	4293      	cmp	r3, r2
 8019eb8:	d036      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	4a27      	ldr	r2, [pc, #156]	; (8019f5c <HAL_DMA_IRQHandler+0x1c8>)
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	d031      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	4a25      	ldr	r2, [pc, #148]	; (8019f60 <HAL_DMA_IRQHandler+0x1cc>)
 8019eca:	4293      	cmp	r3, r2
 8019ecc:	d02c      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	4a24      	ldr	r2, [pc, #144]	; (8019f64 <HAL_DMA_IRQHandler+0x1d0>)
 8019ed4:	4293      	cmp	r3, r2
 8019ed6:	d027      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	4a22      	ldr	r2, [pc, #136]	; (8019f68 <HAL_DMA_IRQHandler+0x1d4>)
 8019ede:	4293      	cmp	r3, r2
 8019ee0:	d022      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	4a21      	ldr	r2, [pc, #132]	; (8019f6c <HAL_DMA_IRQHandler+0x1d8>)
 8019ee8:	4293      	cmp	r3, r2
 8019eea:	d01d      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	4a1f      	ldr	r2, [pc, #124]	; (8019f70 <HAL_DMA_IRQHandler+0x1dc>)
 8019ef2:	4293      	cmp	r3, r2
 8019ef4:	d018      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	4a1e      	ldr	r2, [pc, #120]	; (8019f74 <HAL_DMA_IRQHandler+0x1e0>)
 8019efc:	4293      	cmp	r3, r2
 8019efe:	d013      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	4a1c      	ldr	r2, [pc, #112]	; (8019f78 <HAL_DMA_IRQHandler+0x1e4>)
 8019f06:	4293      	cmp	r3, r2
 8019f08:	d00e      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	4a1b      	ldr	r2, [pc, #108]	; (8019f7c <HAL_DMA_IRQHandler+0x1e8>)
 8019f10:	4293      	cmp	r3, r2
 8019f12:	d009      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	4a19      	ldr	r2, [pc, #100]	; (8019f80 <HAL_DMA_IRQHandler+0x1ec>)
 8019f1a:	4293      	cmp	r3, r2
 8019f1c:	d004      	beq.n	8019f28 <HAL_DMA_IRQHandler+0x194>
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	4a18      	ldr	r2, [pc, #96]	; (8019f84 <HAL_DMA_IRQHandler+0x1f0>)
 8019f24:	4293      	cmp	r3, r2
 8019f26:	d12f      	bne.n	8019f88 <HAL_DMA_IRQHandler+0x1f4>
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f003 0304 	and.w	r3, r3, #4
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	bf14      	ite	ne
 8019f36:	2301      	movne	r3, #1
 8019f38:	2300      	moveq	r3, #0
 8019f3a:	b2db      	uxtb	r3, r3
 8019f3c:	e02e      	b.n	8019f9c <HAL_DMA_IRQHandler+0x208>
 8019f3e:	bf00      	nop
 8019f40:	24000024 	.word	0x24000024
 8019f44:	1b4e81b5 	.word	0x1b4e81b5
 8019f48:	40020010 	.word	0x40020010
 8019f4c:	40020028 	.word	0x40020028
 8019f50:	40020040 	.word	0x40020040
 8019f54:	40020058 	.word	0x40020058
 8019f58:	40020070 	.word	0x40020070
 8019f5c:	40020088 	.word	0x40020088
 8019f60:	400200a0 	.word	0x400200a0
 8019f64:	400200b8 	.word	0x400200b8
 8019f68:	40020410 	.word	0x40020410
 8019f6c:	40020428 	.word	0x40020428
 8019f70:	40020440 	.word	0x40020440
 8019f74:	40020458 	.word	0x40020458
 8019f78:	40020470 	.word	0x40020470
 8019f7c:	40020488 	.word	0x40020488
 8019f80:	400204a0 	.word	0x400204a0
 8019f84:	400204b8 	.word	0x400204b8
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	f003 0308 	and.w	r3, r3, #8
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	bf14      	ite	ne
 8019f96:	2301      	movne	r3, #1
 8019f98:	2300      	moveq	r3, #0
 8019f9a:	b2db      	uxtb	r3, r3
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d015      	beq.n	8019fcc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	681a      	ldr	r2, [r3, #0]
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	f022 0204 	bic.w	r2, r2, #4
 8019fae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fb4:	f003 031f 	and.w	r3, r3, #31
 8019fb8:	2208      	movs	r2, #8
 8019fba:	409a      	lsls	r2, r3
 8019fbc:	6a3b      	ldr	r3, [r7, #32]
 8019fbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fc4:	f043 0201 	orr.w	r2, r3, #1
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fd0:	f003 031f 	and.w	r3, r3, #31
 8019fd4:	69ba      	ldr	r2, [r7, #24]
 8019fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8019fda:	f003 0301 	and.w	r3, r3, #1
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d06e      	beq.n	801a0c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	4a69      	ldr	r2, [pc, #420]	; (801a18c <HAL_DMA_IRQHandler+0x3f8>)
 8019fe8:	4293      	cmp	r3, r2
 8019fea:	d04a      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	4a67      	ldr	r2, [pc, #412]	; (801a190 <HAL_DMA_IRQHandler+0x3fc>)
 8019ff2:	4293      	cmp	r3, r2
 8019ff4:	d045      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	4a66      	ldr	r2, [pc, #408]	; (801a194 <HAL_DMA_IRQHandler+0x400>)
 8019ffc:	4293      	cmp	r3, r2
 8019ffe:	d040      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	4a64      	ldr	r2, [pc, #400]	; (801a198 <HAL_DMA_IRQHandler+0x404>)
 801a006:	4293      	cmp	r3, r2
 801a008:	d03b      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	4a63      	ldr	r2, [pc, #396]	; (801a19c <HAL_DMA_IRQHandler+0x408>)
 801a010:	4293      	cmp	r3, r2
 801a012:	d036      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	4a61      	ldr	r2, [pc, #388]	; (801a1a0 <HAL_DMA_IRQHandler+0x40c>)
 801a01a:	4293      	cmp	r3, r2
 801a01c:	d031      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	4a60      	ldr	r2, [pc, #384]	; (801a1a4 <HAL_DMA_IRQHandler+0x410>)
 801a024:	4293      	cmp	r3, r2
 801a026:	d02c      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	4a5e      	ldr	r2, [pc, #376]	; (801a1a8 <HAL_DMA_IRQHandler+0x414>)
 801a02e:	4293      	cmp	r3, r2
 801a030:	d027      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	4a5d      	ldr	r2, [pc, #372]	; (801a1ac <HAL_DMA_IRQHandler+0x418>)
 801a038:	4293      	cmp	r3, r2
 801a03a:	d022      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	4a5b      	ldr	r2, [pc, #364]	; (801a1b0 <HAL_DMA_IRQHandler+0x41c>)
 801a042:	4293      	cmp	r3, r2
 801a044:	d01d      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	4a5a      	ldr	r2, [pc, #360]	; (801a1b4 <HAL_DMA_IRQHandler+0x420>)
 801a04c:	4293      	cmp	r3, r2
 801a04e:	d018      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	4a58      	ldr	r2, [pc, #352]	; (801a1b8 <HAL_DMA_IRQHandler+0x424>)
 801a056:	4293      	cmp	r3, r2
 801a058:	d013      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	4a57      	ldr	r2, [pc, #348]	; (801a1bc <HAL_DMA_IRQHandler+0x428>)
 801a060:	4293      	cmp	r3, r2
 801a062:	d00e      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	4a55      	ldr	r2, [pc, #340]	; (801a1c0 <HAL_DMA_IRQHandler+0x42c>)
 801a06a:	4293      	cmp	r3, r2
 801a06c:	d009      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	4a54      	ldr	r2, [pc, #336]	; (801a1c4 <HAL_DMA_IRQHandler+0x430>)
 801a074:	4293      	cmp	r3, r2
 801a076:	d004      	beq.n	801a082 <HAL_DMA_IRQHandler+0x2ee>
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	4a52      	ldr	r2, [pc, #328]	; (801a1c8 <HAL_DMA_IRQHandler+0x434>)
 801a07e:	4293      	cmp	r3, r2
 801a080:	d10a      	bne.n	801a098 <HAL_DMA_IRQHandler+0x304>
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	695b      	ldr	r3, [r3, #20]
 801a088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	bf14      	ite	ne
 801a090:	2301      	movne	r3, #1
 801a092:	2300      	moveq	r3, #0
 801a094:	b2db      	uxtb	r3, r3
 801a096:	e003      	b.n	801a0a0 <HAL_DMA_IRQHandler+0x30c>
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	2300      	movs	r3, #0
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d00d      	beq.n	801a0c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0a8:	f003 031f 	and.w	r3, r3, #31
 801a0ac:	2201      	movs	r2, #1
 801a0ae:	409a      	lsls	r2, r3
 801a0b0:	6a3b      	ldr	r3, [r7, #32]
 801a0b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0b8:	f043 0202 	orr.w	r2, r3, #2
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0c4:	f003 031f 	and.w	r3, r3, #31
 801a0c8:	2204      	movs	r2, #4
 801a0ca:	409a      	lsls	r2, r3
 801a0cc:	69bb      	ldr	r3, [r7, #24]
 801a0ce:	4013      	ands	r3, r2
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	f000 808f 	beq.w	801a1f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	4a2c      	ldr	r2, [pc, #176]	; (801a18c <HAL_DMA_IRQHandler+0x3f8>)
 801a0dc:	4293      	cmp	r3, r2
 801a0de:	d04a      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	4a2a      	ldr	r2, [pc, #168]	; (801a190 <HAL_DMA_IRQHandler+0x3fc>)
 801a0e6:	4293      	cmp	r3, r2
 801a0e8:	d045      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	4a29      	ldr	r2, [pc, #164]	; (801a194 <HAL_DMA_IRQHandler+0x400>)
 801a0f0:	4293      	cmp	r3, r2
 801a0f2:	d040      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	4a27      	ldr	r2, [pc, #156]	; (801a198 <HAL_DMA_IRQHandler+0x404>)
 801a0fa:	4293      	cmp	r3, r2
 801a0fc:	d03b      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	4a26      	ldr	r2, [pc, #152]	; (801a19c <HAL_DMA_IRQHandler+0x408>)
 801a104:	4293      	cmp	r3, r2
 801a106:	d036      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	4a24      	ldr	r2, [pc, #144]	; (801a1a0 <HAL_DMA_IRQHandler+0x40c>)
 801a10e:	4293      	cmp	r3, r2
 801a110:	d031      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	4a23      	ldr	r2, [pc, #140]	; (801a1a4 <HAL_DMA_IRQHandler+0x410>)
 801a118:	4293      	cmp	r3, r2
 801a11a:	d02c      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	4a21      	ldr	r2, [pc, #132]	; (801a1a8 <HAL_DMA_IRQHandler+0x414>)
 801a122:	4293      	cmp	r3, r2
 801a124:	d027      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	4a20      	ldr	r2, [pc, #128]	; (801a1ac <HAL_DMA_IRQHandler+0x418>)
 801a12c:	4293      	cmp	r3, r2
 801a12e:	d022      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	4a1e      	ldr	r2, [pc, #120]	; (801a1b0 <HAL_DMA_IRQHandler+0x41c>)
 801a136:	4293      	cmp	r3, r2
 801a138:	d01d      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	4a1d      	ldr	r2, [pc, #116]	; (801a1b4 <HAL_DMA_IRQHandler+0x420>)
 801a140:	4293      	cmp	r3, r2
 801a142:	d018      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	4a1b      	ldr	r2, [pc, #108]	; (801a1b8 <HAL_DMA_IRQHandler+0x424>)
 801a14a:	4293      	cmp	r3, r2
 801a14c:	d013      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	4a1a      	ldr	r2, [pc, #104]	; (801a1bc <HAL_DMA_IRQHandler+0x428>)
 801a154:	4293      	cmp	r3, r2
 801a156:	d00e      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	4a18      	ldr	r2, [pc, #96]	; (801a1c0 <HAL_DMA_IRQHandler+0x42c>)
 801a15e:	4293      	cmp	r3, r2
 801a160:	d009      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	4a17      	ldr	r2, [pc, #92]	; (801a1c4 <HAL_DMA_IRQHandler+0x430>)
 801a168:	4293      	cmp	r3, r2
 801a16a:	d004      	beq.n	801a176 <HAL_DMA_IRQHandler+0x3e2>
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	4a15      	ldr	r2, [pc, #84]	; (801a1c8 <HAL_DMA_IRQHandler+0x434>)
 801a172:	4293      	cmp	r3, r2
 801a174:	d12a      	bne.n	801a1cc <HAL_DMA_IRQHandler+0x438>
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	f003 0302 	and.w	r3, r3, #2
 801a180:	2b00      	cmp	r3, #0
 801a182:	bf14      	ite	ne
 801a184:	2301      	movne	r3, #1
 801a186:	2300      	moveq	r3, #0
 801a188:	b2db      	uxtb	r3, r3
 801a18a:	e023      	b.n	801a1d4 <HAL_DMA_IRQHandler+0x440>
 801a18c:	40020010 	.word	0x40020010
 801a190:	40020028 	.word	0x40020028
 801a194:	40020040 	.word	0x40020040
 801a198:	40020058 	.word	0x40020058
 801a19c:	40020070 	.word	0x40020070
 801a1a0:	40020088 	.word	0x40020088
 801a1a4:	400200a0 	.word	0x400200a0
 801a1a8:	400200b8 	.word	0x400200b8
 801a1ac:	40020410 	.word	0x40020410
 801a1b0:	40020428 	.word	0x40020428
 801a1b4:	40020440 	.word	0x40020440
 801a1b8:	40020458 	.word	0x40020458
 801a1bc:	40020470 	.word	0x40020470
 801a1c0:	40020488 	.word	0x40020488
 801a1c4:	400204a0 	.word	0x400204a0
 801a1c8:	400204b8 	.word	0x400204b8
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d00d      	beq.n	801a1f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a1dc:	f003 031f 	and.w	r3, r3, #31
 801a1e0:	2204      	movs	r2, #4
 801a1e2:	409a      	lsls	r2, r3
 801a1e4:	6a3b      	ldr	r3, [r7, #32]
 801a1e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a1ec:	f043 0204 	orr.w	r2, r3, #4
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a1f8:	f003 031f 	and.w	r3, r3, #31
 801a1fc:	2210      	movs	r2, #16
 801a1fe:	409a      	lsls	r2, r3
 801a200:	69bb      	ldr	r3, [r7, #24]
 801a202:	4013      	ands	r3, r2
 801a204:	2b00      	cmp	r3, #0
 801a206:	f000 80a6 	beq.w	801a356 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4a85      	ldr	r2, [pc, #532]	; (801a424 <HAL_DMA_IRQHandler+0x690>)
 801a210:	4293      	cmp	r3, r2
 801a212:	d04a      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	4a83      	ldr	r2, [pc, #524]	; (801a428 <HAL_DMA_IRQHandler+0x694>)
 801a21a:	4293      	cmp	r3, r2
 801a21c:	d045      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	4a82      	ldr	r2, [pc, #520]	; (801a42c <HAL_DMA_IRQHandler+0x698>)
 801a224:	4293      	cmp	r3, r2
 801a226:	d040      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	4a80      	ldr	r2, [pc, #512]	; (801a430 <HAL_DMA_IRQHandler+0x69c>)
 801a22e:	4293      	cmp	r3, r2
 801a230:	d03b      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	4a7f      	ldr	r2, [pc, #508]	; (801a434 <HAL_DMA_IRQHandler+0x6a0>)
 801a238:	4293      	cmp	r3, r2
 801a23a:	d036      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	4a7d      	ldr	r2, [pc, #500]	; (801a438 <HAL_DMA_IRQHandler+0x6a4>)
 801a242:	4293      	cmp	r3, r2
 801a244:	d031      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	4a7c      	ldr	r2, [pc, #496]	; (801a43c <HAL_DMA_IRQHandler+0x6a8>)
 801a24c:	4293      	cmp	r3, r2
 801a24e:	d02c      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	4a7a      	ldr	r2, [pc, #488]	; (801a440 <HAL_DMA_IRQHandler+0x6ac>)
 801a256:	4293      	cmp	r3, r2
 801a258:	d027      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	4a79      	ldr	r2, [pc, #484]	; (801a444 <HAL_DMA_IRQHandler+0x6b0>)
 801a260:	4293      	cmp	r3, r2
 801a262:	d022      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	4a77      	ldr	r2, [pc, #476]	; (801a448 <HAL_DMA_IRQHandler+0x6b4>)
 801a26a:	4293      	cmp	r3, r2
 801a26c:	d01d      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	4a76      	ldr	r2, [pc, #472]	; (801a44c <HAL_DMA_IRQHandler+0x6b8>)
 801a274:	4293      	cmp	r3, r2
 801a276:	d018      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	4a74      	ldr	r2, [pc, #464]	; (801a450 <HAL_DMA_IRQHandler+0x6bc>)
 801a27e:	4293      	cmp	r3, r2
 801a280:	d013      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	4a73      	ldr	r2, [pc, #460]	; (801a454 <HAL_DMA_IRQHandler+0x6c0>)
 801a288:	4293      	cmp	r3, r2
 801a28a:	d00e      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	4a71      	ldr	r2, [pc, #452]	; (801a458 <HAL_DMA_IRQHandler+0x6c4>)
 801a292:	4293      	cmp	r3, r2
 801a294:	d009      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	4a70      	ldr	r2, [pc, #448]	; (801a45c <HAL_DMA_IRQHandler+0x6c8>)
 801a29c:	4293      	cmp	r3, r2
 801a29e:	d004      	beq.n	801a2aa <HAL_DMA_IRQHandler+0x516>
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	4a6e      	ldr	r2, [pc, #440]	; (801a460 <HAL_DMA_IRQHandler+0x6cc>)
 801a2a6:	4293      	cmp	r3, r2
 801a2a8:	d10a      	bne.n	801a2c0 <HAL_DMA_IRQHandler+0x52c>
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	f003 0308 	and.w	r3, r3, #8
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	bf14      	ite	ne
 801a2b8:	2301      	movne	r3, #1
 801a2ba:	2300      	moveq	r3, #0
 801a2bc:	b2db      	uxtb	r3, r3
 801a2be:	e009      	b.n	801a2d4 <HAL_DMA_IRQHandler+0x540>
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	f003 0304 	and.w	r3, r3, #4
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	bf14      	ite	ne
 801a2ce:	2301      	movne	r3, #1
 801a2d0:	2300      	moveq	r3, #0
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d03e      	beq.n	801a356 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2dc:	f003 031f 	and.w	r3, r3, #31
 801a2e0:	2210      	movs	r2, #16
 801a2e2:	409a      	lsls	r2, r3
 801a2e4:	6a3b      	ldr	r3, [r7, #32]
 801a2e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d018      	beq.n	801a328 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a300:	2b00      	cmp	r3, #0
 801a302:	d108      	bne.n	801a316 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d024      	beq.n	801a356 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a310:	6878      	ldr	r0, [r7, #4]
 801a312:	4798      	blx	r3
 801a314:	e01f      	b.n	801a356 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d01b      	beq.n	801a356 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a322:	6878      	ldr	r0, [r7, #4]
 801a324:	4798      	blx	r3
 801a326:	e016      	b.n	801a356 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a332:	2b00      	cmp	r3, #0
 801a334:	d107      	bne.n	801a346 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	681a      	ldr	r2, [r3, #0]
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	f022 0208 	bic.w	r2, r2, #8
 801a344:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d003      	beq.n	801a356 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a352:	6878      	ldr	r0, [r7, #4]
 801a354:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a35a:	f003 031f 	and.w	r3, r3, #31
 801a35e:	2220      	movs	r2, #32
 801a360:	409a      	lsls	r2, r3
 801a362:	69bb      	ldr	r3, [r7, #24]
 801a364:	4013      	ands	r3, r2
 801a366:	2b00      	cmp	r3, #0
 801a368:	f000 8110 	beq.w	801a58c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	4a2c      	ldr	r2, [pc, #176]	; (801a424 <HAL_DMA_IRQHandler+0x690>)
 801a372:	4293      	cmp	r3, r2
 801a374:	d04a      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	4a2b      	ldr	r2, [pc, #172]	; (801a428 <HAL_DMA_IRQHandler+0x694>)
 801a37c:	4293      	cmp	r3, r2
 801a37e:	d045      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	4a29      	ldr	r2, [pc, #164]	; (801a42c <HAL_DMA_IRQHandler+0x698>)
 801a386:	4293      	cmp	r3, r2
 801a388:	d040      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	4a28      	ldr	r2, [pc, #160]	; (801a430 <HAL_DMA_IRQHandler+0x69c>)
 801a390:	4293      	cmp	r3, r2
 801a392:	d03b      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	4a26      	ldr	r2, [pc, #152]	; (801a434 <HAL_DMA_IRQHandler+0x6a0>)
 801a39a:	4293      	cmp	r3, r2
 801a39c:	d036      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	4a25      	ldr	r2, [pc, #148]	; (801a438 <HAL_DMA_IRQHandler+0x6a4>)
 801a3a4:	4293      	cmp	r3, r2
 801a3a6:	d031      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	4a23      	ldr	r2, [pc, #140]	; (801a43c <HAL_DMA_IRQHandler+0x6a8>)
 801a3ae:	4293      	cmp	r3, r2
 801a3b0:	d02c      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	4a22      	ldr	r2, [pc, #136]	; (801a440 <HAL_DMA_IRQHandler+0x6ac>)
 801a3b8:	4293      	cmp	r3, r2
 801a3ba:	d027      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	4a20      	ldr	r2, [pc, #128]	; (801a444 <HAL_DMA_IRQHandler+0x6b0>)
 801a3c2:	4293      	cmp	r3, r2
 801a3c4:	d022      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	4a1f      	ldr	r2, [pc, #124]	; (801a448 <HAL_DMA_IRQHandler+0x6b4>)
 801a3cc:	4293      	cmp	r3, r2
 801a3ce:	d01d      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	4a1d      	ldr	r2, [pc, #116]	; (801a44c <HAL_DMA_IRQHandler+0x6b8>)
 801a3d6:	4293      	cmp	r3, r2
 801a3d8:	d018      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	4a1c      	ldr	r2, [pc, #112]	; (801a450 <HAL_DMA_IRQHandler+0x6bc>)
 801a3e0:	4293      	cmp	r3, r2
 801a3e2:	d013      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	4a1a      	ldr	r2, [pc, #104]	; (801a454 <HAL_DMA_IRQHandler+0x6c0>)
 801a3ea:	4293      	cmp	r3, r2
 801a3ec:	d00e      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	4a19      	ldr	r2, [pc, #100]	; (801a458 <HAL_DMA_IRQHandler+0x6c4>)
 801a3f4:	4293      	cmp	r3, r2
 801a3f6:	d009      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	4a17      	ldr	r2, [pc, #92]	; (801a45c <HAL_DMA_IRQHandler+0x6c8>)
 801a3fe:	4293      	cmp	r3, r2
 801a400:	d004      	beq.n	801a40c <HAL_DMA_IRQHandler+0x678>
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	4a16      	ldr	r2, [pc, #88]	; (801a460 <HAL_DMA_IRQHandler+0x6cc>)
 801a408:	4293      	cmp	r3, r2
 801a40a:	d12b      	bne.n	801a464 <HAL_DMA_IRQHandler+0x6d0>
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	f003 0310 	and.w	r3, r3, #16
 801a416:	2b00      	cmp	r3, #0
 801a418:	bf14      	ite	ne
 801a41a:	2301      	movne	r3, #1
 801a41c:	2300      	moveq	r3, #0
 801a41e:	b2db      	uxtb	r3, r3
 801a420:	e02a      	b.n	801a478 <HAL_DMA_IRQHandler+0x6e4>
 801a422:	bf00      	nop
 801a424:	40020010 	.word	0x40020010
 801a428:	40020028 	.word	0x40020028
 801a42c:	40020040 	.word	0x40020040
 801a430:	40020058 	.word	0x40020058
 801a434:	40020070 	.word	0x40020070
 801a438:	40020088 	.word	0x40020088
 801a43c:	400200a0 	.word	0x400200a0
 801a440:	400200b8 	.word	0x400200b8
 801a444:	40020410 	.word	0x40020410
 801a448:	40020428 	.word	0x40020428
 801a44c:	40020440 	.word	0x40020440
 801a450:	40020458 	.word	0x40020458
 801a454:	40020470 	.word	0x40020470
 801a458:	40020488 	.word	0x40020488
 801a45c:	400204a0 	.word	0x400204a0
 801a460:	400204b8 	.word	0x400204b8
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	f003 0302 	and.w	r3, r3, #2
 801a46e:	2b00      	cmp	r3, #0
 801a470:	bf14      	ite	ne
 801a472:	2301      	movne	r3, #1
 801a474:	2300      	moveq	r3, #0
 801a476:	b2db      	uxtb	r3, r3
 801a478:	2b00      	cmp	r3, #0
 801a47a:	f000 8087 	beq.w	801a58c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a482:	f003 031f 	and.w	r3, r3, #31
 801a486:	2220      	movs	r2, #32
 801a488:	409a      	lsls	r2, r3
 801a48a:	6a3b      	ldr	r3, [r7, #32]
 801a48c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801a494:	b2db      	uxtb	r3, r3
 801a496:	2b04      	cmp	r3, #4
 801a498:	d139      	bne.n	801a50e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	681a      	ldr	r2, [r3, #0]
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	f022 0216 	bic.w	r2, r2, #22
 801a4a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	695a      	ldr	r2, [r3, #20]
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a4b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d103      	bne.n	801a4ca <HAL_DMA_IRQHandler+0x736>
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d007      	beq.n	801a4da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	681a      	ldr	r2, [r3, #0]
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	f022 0208 	bic.w	r2, r2, #8
 801a4d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a4de:	f003 031f 	and.w	r3, r3, #31
 801a4e2:	223f      	movs	r2, #63	; 0x3f
 801a4e4:	409a      	lsls	r2, r3
 801a4e6:	6a3b      	ldr	r3, [r7, #32]
 801a4e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	2201      	movs	r2, #1
 801a4ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	f000 834a 	beq.w	801ab98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a508:	6878      	ldr	r0, [r7, #4]
 801a50a:	4798      	blx	r3
          }
          return;
 801a50c:	e344      	b.n	801ab98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d018      	beq.n	801a54e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a526:	2b00      	cmp	r3, #0
 801a528:	d108      	bne.n	801a53c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d02c      	beq.n	801a58c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a536:	6878      	ldr	r0, [r7, #4]
 801a538:	4798      	blx	r3
 801a53a:	e027      	b.n	801a58c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a540:	2b00      	cmp	r3, #0
 801a542:	d023      	beq.n	801a58c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a548:	6878      	ldr	r0, [r7, #4]
 801a54a:	4798      	blx	r3
 801a54c:	e01e      	b.n	801a58c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d10f      	bne.n	801a57c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	681a      	ldr	r2, [r3, #0]
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	f022 0210 	bic.w	r2, r2, #16
 801a56a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	2201      	movs	r2, #1
 801a570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	2200      	movs	r2, #0
 801a578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a580:	2b00      	cmp	r3, #0
 801a582:	d003      	beq.n	801a58c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a588:	6878      	ldr	r0, [r7, #4]
 801a58a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a590:	2b00      	cmp	r3, #0
 801a592:	f000 8306 	beq.w	801aba2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a59a:	f003 0301 	and.w	r3, r3, #1
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	f000 8088 	beq.w	801a6b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	2204      	movs	r2, #4
 801a5a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	4a7a      	ldr	r2, [pc, #488]	; (801a79c <HAL_DMA_IRQHandler+0xa08>)
 801a5b2:	4293      	cmp	r3, r2
 801a5b4:	d04a      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	4a79      	ldr	r2, [pc, #484]	; (801a7a0 <HAL_DMA_IRQHandler+0xa0c>)
 801a5bc:	4293      	cmp	r3, r2
 801a5be:	d045      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	4a77      	ldr	r2, [pc, #476]	; (801a7a4 <HAL_DMA_IRQHandler+0xa10>)
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	d040      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	4a76      	ldr	r2, [pc, #472]	; (801a7a8 <HAL_DMA_IRQHandler+0xa14>)
 801a5d0:	4293      	cmp	r3, r2
 801a5d2:	d03b      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	4a74      	ldr	r2, [pc, #464]	; (801a7ac <HAL_DMA_IRQHandler+0xa18>)
 801a5da:	4293      	cmp	r3, r2
 801a5dc:	d036      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	4a73      	ldr	r2, [pc, #460]	; (801a7b0 <HAL_DMA_IRQHandler+0xa1c>)
 801a5e4:	4293      	cmp	r3, r2
 801a5e6:	d031      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	4a71      	ldr	r2, [pc, #452]	; (801a7b4 <HAL_DMA_IRQHandler+0xa20>)
 801a5ee:	4293      	cmp	r3, r2
 801a5f0:	d02c      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	4a70      	ldr	r2, [pc, #448]	; (801a7b8 <HAL_DMA_IRQHandler+0xa24>)
 801a5f8:	4293      	cmp	r3, r2
 801a5fa:	d027      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	4a6e      	ldr	r2, [pc, #440]	; (801a7bc <HAL_DMA_IRQHandler+0xa28>)
 801a602:	4293      	cmp	r3, r2
 801a604:	d022      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	4a6d      	ldr	r2, [pc, #436]	; (801a7c0 <HAL_DMA_IRQHandler+0xa2c>)
 801a60c:	4293      	cmp	r3, r2
 801a60e:	d01d      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	4a6b      	ldr	r2, [pc, #428]	; (801a7c4 <HAL_DMA_IRQHandler+0xa30>)
 801a616:	4293      	cmp	r3, r2
 801a618:	d018      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	4a6a      	ldr	r2, [pc, #424]	; (801a7c8 <HAL_DMA_IRQHandler+0xa34>)
 801a620:	4293      	cmp	r3, r2
 801a622:	d013      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	4a68      	ldr	r2, [pc, #416]	; (801a7cc <HAL_DMA_IRQHandler+0xa38>)
 801a62a:	4293      	cmp	r3, r2
 801a62c:	d00e      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	4a67      	ldr	r2, [pc, #412]	; (801a7d0 <HAL_DMA_IRQHandler+0xa3c>)
 801a634:	4293      	cmp	r3, r2
 801a636:	d009      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	4a65      	ldr	r2, [pc, #404]	; (801a7d4 <HAL_DMA_IRQHandler+0xa40>)
 801a63e:	4293      	cmp	r3, r2
 801a640:	d004      	beq.n	801a64c <HAL_DMA_IRQHandler+0x8b8>
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	4a64      	ldr	r2, [pc, #400]	; (801a7d8 <HAL_DMA_IRQHandler+0xa44>)
 801a648:	4293      	cmp	r3, r2
 801a64a:	d108      	bne.n	801a65e <HAL_DMA_IRQHandler+0x8ca>
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	681a      	ldr	r2, [r3, #0]
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	f022 0201 	bic.w	r2, r2, #1
 801a65a:	601a      	str	r2, [r3, #0]
 801a65c:	e007      	b.n	801a66e <HAL_DMA_IRQHandler+0x8da>
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	681a      	ldr	r2, [r3, #0]
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	f022 0201 	bic.w	r2, r2, #1
 801a66c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	3301      	adds	r3, #1
 801a672:	60fb      	str	r3, [r7, #12]
 801a674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a676:	429a      	cmp	r2, r3
 801a678:	d307      	bcc.n	801a68a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	f003 0301 	and.w	r3, r3, #1
 801a684:	2b00      	cmp	r3, #0
 801a686:	d1f2      	bne.n	801a66e <HAL_DMA_IRQHandler+0x8da>
 801a688:	e000      	b.n	801a68c <HAL_DMA_IRQHandler+0x8f8>
            break;
 801a68a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	f003 0301 	and.w	r3, r3, #1
 801a696:	2b00      	cmp	r3, #0
 801a698:	d004      	beq.n	801a6a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	2203      	movs	r2, #3
 801a69e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 801a6a2:	e003      	b.n	801a6ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	2201      	movs	r2, #1
 801a6a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	2200      	movs	r2, #0
 801a6b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	f000 8272 	beq.w	801aba2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a6c2:	6878      	ldr	r0, [r7, #4]
 801a6c4:	4798      	blx	r3
 801a6c6:	e26c      	b.n	801aba2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	4a43      	ldr	r2, [pc, #268]	; (801a7dc <HAL_DMA_IRQHandler+0xa48>)
 801a6ce:	4293      	cmp	r3, r2
 801a6d0:	d022      	beq.n	801a718 <HAL_DMA_IRQHandler+0x984>
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	4a42      	ldr	r2, [pc, #264]	; (801a7e0 <HAL_DMA_IRQHandler+0xa4c>)
 801a6d8:	4293      	cmp	r3, r2
 801a6da:	d01d      	beq.n	801a718 <HAL_DMA_IRQHandler+0x984>
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	4a40      	ldr	r2, [pc, #256]	; (801a7e4 <HAL_DMA_IRQHandler+0xa50>)
 801a6e2:	4293      	cmp	r3, r2
 801a6e4:	d018      	beq.n	801a718 <HAL_DMA_IRQHandler+0x984>
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	4a3f      	ldr	r2, [pc, #252]	; (801a7e8 <HAL_DMA_IRQHandler+0xa54>)
 801a6ec:	4293      	cmp	r3, r2
 801a6ee:	d013      	beq.n	801a718 <HAL_DMA_IRQHandler+0x984>
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	4a3d      	ldr	r2, [pc, #244]	; (801a7ec <HAL_DMA_IRQHandler+0xa58>)
 801a6f6:	4293      	cmp	r3, r2
 801a6f8:	d00e      	beq.n	801a718 <HAL_DMA_IRQHandler+0x984>
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	4a3c      	ldr	r2, [pc, #240]	; (801a7f0 <HAL_DMA_IRQHandler+0xa5c>)
 801a700:	4293      	cmp	r3, r2
 801a702:	d009      	beq.n	801a718 <HAL_DMA_IRQHandler+0x984>
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	4a3a      	ldr	r2, [pc, #232]	; (801a7f4 <HAL_DMA_IRQHandler+0xa60>)
 801a70a:	4293      	cmp	r3, r2
 801a70c:	d004      	beq.n	801a718 <HAL_DMA_IRQHandler+0x984>
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	4a39      	ldr	r2, [pc, #228]	; (801a7f8 <HAL_DMA_IRQHandler+0xa64>)
 801a714:	4293      	cmp	r3, r2
 801a716:	d101      	bne.n	801a71c <HAL_DMA_IRQHandler+0x988>
 801a718:	2301      	movs	r3, #1
 801a71a:	e000      	b.n	801a71e <HAL_DMA_IRQHandler+0x98a>
 801a71c:	2300      	movs	r3, #0
 801a71e:	2b00      	cmp	r3, #0
 801a720:	f000 823f 	beq.w	801aba2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a730:	f003 031f 	and.w	r3, r3, #31
 801a734:	2204      	movs	r2, #4
 801a736:	409a      	lsls	r2, r3
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	4013      	ands	r3, r2
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	f000 80cd 	beq.w	801a8dc <HAL_DMA_IRQHandler+0xb48>
 801a742:	693b      	ldr	r3, [r7, #16]
 801a744:	f003 0304 	and.w	r3, r3, #4
 801a748:	2b00      	cmp	r3, #0
 801a74a:	f000 80c7 	beq.w	801a8dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a752:	f003 031f 	and.w	r3, r3, #31
 801a756:	2204      	movs	r2, #4
 801a758:	409a      	lsls	r2, r3
 801a75a:	69fb      	ldr	r3, [r7, #28]
 801a75c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a75e:	693b      	ldr	r3, [r7, #16]
 801a760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a764:	2b00      	cmp	r3, #0
 801a766:	d049      	beq.n	801a7fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801a768:	693b      	ldr	r3, [r7, #16]
 801a76a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d109      	bne.n	801a786 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a776:	2b00      	cmp	r3, #0
 801a778:	f000 8210 	beq.w	801ab9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a780:	6878      	ldr	r0, [r7, #4]
 801a782:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a784:	e20a      	b.n	801ab9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	f000 8206 	beq.w	801ab9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a794:	6878      	ldr	r0, [r7, #4]
 801a796:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a798:	e200      	b.n	801ab9c <HAL_DMA_IRQHandler+0xe08>
 801a79a:	bf00      	nop
 801a79c:	40020010 	.word	0x40020010
 801a7a0:	40020028 	.word	0x40020028
 801a7a4:	40020040 	.word	0x40020040
 801a7a8:	40020058 	.word	0x40020058
 801a7ac:	40020070 	.word	0x40020070
 801a7b0:	40020088 	.word	0x40020088
 801a7b4:	400200a0 	.word	0x400200a0
 801a7b8:	400200b8 	.word	0x400200b8
 801a7bc:	40020410 	.word	0x40020410
 801a7c0:	40020428 	.word	0x40020428
 801a7c4:	40020440 	.word	0x40020440
 801a7c8:	40020458 	.word	0x40020458
 801a7cc:	40020470 	.word	0x40020470
 801a7d0:	40020488 	.word	0x40020488
 801a7d4:	400204a0 	.word	0x400204a0
 801a7d8:	400204b8 	.word	0x400204b8
 801a7dc:	58025408 	.word	0x58025408
 801a7e0:	5802541c 	.word	0x5802541c
 801a7e4:	58025430 	.word	0x58025430
 801a7e8:	58025444 	.word	0x58025444
 801a7ec:	58025458 	.word	0x58025458
 801a7f0:	5802546c 	.word	0x5802546c
 801a7f4:	58025480 	.word	0x58025480
 801a7f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801a7fc:	693b      	ldr	r3, [r7, #16]
 801a7fe:	f003 0320 	and.w	r3, r3, #32
 801a802:	2b00      	cmp	r3, #0
 801a804:	d160      	bne.n	801a8c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	4a8c      	ldr	r2, [pc, #560]	; (801aa3c <HAL_DMA_IRQHandler+0xca8>)
 801a80c:	4293      	cmp	r3, r2
 801a80e:	d04a      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	4a8a      	ldr	r2, [pc, #552]	; (801aa40 <HAL_DMA_IRQHandler+0xcac>)
 801a816:	4293      	cmp	r3, r2
 801a818:	d045      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	4a89      	ldr	r2, [pc, #548]	; (801aa44 <HAL_DMA_IRQHandler+0xcb0>)
 801a820:	4293      	cmp	r3, r2
 801a822:	d040      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	4a87      	ldr	r2, [pc, #540]	; (801aa48 <HAL_DMA_IRQHandler+0xcb4>)
 801a82a:	4293      	cmp	r3, r2
 801a82c:	d03b      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	4a86      	ldr	r2, [pc, #536]	; (801aa4c <HAL_DMA_IRQHandler+0xcb8>)
 801a834:	4293      	cmp	r3, r2
 801a836:	d036      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	4a84      	ldr	r2, [pc, #528]	; (801aa50 <HAL_DMA_IRQHandler+0xcbc>)
 801a83e:	4293      	cmp	r3, r2
 801a840:	d031      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	4a83      	ldr	r2, [pc, #524]	; (801aa54 <HAL_DMA_IRQHandler+0xcc0>)
 801a848:	4293      	cmp	r3, r2
 801a84a:	d02c      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	4a81      	ldr	r2, [pc, #516]	; (801aa58 <HAL_DMA_IRQHandler+0xcc4>)
 801a852:	4293      	cmp	r3, r2
 801a854:	d027      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	4a80      	ldr	r2, [pc, #512]	; (801aa5c <HAL_DMA_IRQHandler+0xcc8>)
 801a85c:	4293      	cmp	r3, r2
 801a85e:	d022      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	4a7e      	ldr	r2, [pc, #504]	; (801aa60 <HAL_DMA_IRQHandler+0xccc>)
 801a866:	4293      	cmp	r3, r2
 801a868:	d01d      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	4a7d      	ldr	r2, [pc, #500]	; (801aa64 <HAL_DMA_IRQHandler+0xcd0>)
 801a870:	4293      	cmp	r3, r2
 801a872:	d018      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	4a7b      	ldr	r2, [pc, #492]	; (801aa68 <HAL_DMA_IRQHandler+0xcd4>)
 801a87a:	4293      	cmp	r3, r2
 801a87c:	d013      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	4a7a      	ldr	r2, [pc, #488]	; (801aa6c <HAL_DMA_IRQHandler+0xcd8>)
 801a884:	4293      	cmp	r3, r2
 801a886:	d00e      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	4a78      	ldr	r2, [pc, #480]	; (801aa70 <HAL_DMA_IRQHandler+0xcdc>)
 801a88e:	4293      	cmp	r3, r2
 801a890:	d009      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	4a77      	ldr	r2, [pc, #476]	; (801aa74 <HAL_DMA_IRQHandler+0xce0>)
 801a898:	4293      	cmp	r3, r2
 801a89a:	d004      	beq.n	801a8a6 <HAL_DMA_IRQHandler+0xb12>
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	4a75      	ldr	r2, [pc, #468]	; (801aa78 <HAL_DMA_IRQHandler+0xce4>)
 801a8a2:	4293      	cmp	r3, r2
 801a8a4:	d108      	bne.n	801a8b8 <HAL_DMA_IRQHandler+0xb24>
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	681a      	ldr	r2, [r3, #0]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	f022 0208 	bic.w	r2, r2, #8
 801a8b4:	601a      	str	r2, [r3, #0]
 801a8b6:	e007      	b.n	801a8c8 <HAL_DMA_IRQHandler+0xb34>
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	681a      	ldr	r2, [r3, #0]
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	f022 0204 	bic.w	r2, r2, #4
 801a8c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	f000 8165 	beq.w	801ab9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8d6:	6878      	ldr	r0, [r7, #4]
 801a8d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a8da:	e15f      	b.n	801ab9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8e0:	f003 031f 	and.w	r3, r3, #31
 801a8e4:	2202      	movs	r2, #2
 801a8e6:	409a      	lsls	r2, r3
 801a8e8:	697b      	ldr	r3, [r7, #20]
 801a8ea:	4013      	ands	r3, r2
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	f000 80c5 	beq.w	801aa7c <HAL_DMA_IRQHandler+0xce8>
 801a8f2:	693b      	ldr	r3, [r7, #16]
 801a8f4:	f003 0302 	and.w	r3, r3, #2
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	f000 80bf 	beq.w	801aa7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a902:	f003 031f 	and.w	r3, r3, #31
 801a906:	2202      	movs	r2, #2
 801a908:	409a      	lsls	r2, r3
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a90e:	693b      	ldr	r3, [r7, #16]
 801a910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a914:	2b00      	cmp	r3, #0
 801a916:	d018      	beq.n	801a94a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801a918:	693b      	ldr	r3, [r7, #16]
 801a91a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d109      	bne.n	801a936 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a926:	2b00      	cmp	r3, #0
 801a928:	f000 813a 	beq.w	801aba0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a930:	6878      	ldr	r0, [r7, #4]
 801a932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a934:	e134      	b.n	801aba0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	f000 8130 	beq.w	801aba0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a944:	6878      	ldr	r0, [r7, #4]
 801a946:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a948:	e12a      	b.n	801aba0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801a94a:	693b      	ldr	r3, [r7, #16]
 801a94c:	f003 0320 	and.w	r3, r3, #32
 801a950:	2b00      	cmp	r3, #0
 801a952:	d168      	bne.n	801aa26 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	4a38      	ldr	r2, [pc, #224]	; (801aa3c <HAL_DMA_IRQHandler+0xca8>)
 801a95a:	4293      	cmp	r3, r2
 801a95c:	d04a      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	4a37      	ldr	r2, [pc, #220]	; (801aa40 <HAL_DMA_IRQHandler+0xcac>)
 801a964:	4293      	cmp	r3, r2
 801a966:	d045      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	4a35      	ldr	r2, [pc, #212]	; (801aa44 <HAL_DMA_IRQHandler+0xcb0>)
 801a96e:	4293      	cmp	r3, r2
 801a970:	d040      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	4a34      	ldr	r2, [pc, #208]	; (801aa48 <HAL_DMA_IRQHandler+0xcb4>)
 801a978:	4293      	cmp	r3, r2
 801a97a:	d03b      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	4a32      	ldr	r2, [pc, #200]	; (801aa4c <HAL_DMA_IRQHandler+0xcb8>)
 801a982:	4293      	cmp	r3, r2
 801a984:	d036      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4a31      	ldr	r2, [pc, #196]	; (801aa50 <HAL_DMA_IRQHandler+0xcbc>)
 801a98c:	4293      	cmp	r3, r2
 801a98e:	d031      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	4a2f      	ldr	r2, [pc, #188]	; (801aa54 <HAL_DMA_IRQHandler+0xcc0>)
 801a996:	4293      	cmp	r3, r2
 801a998:	d02c      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	4a2e      	ldr	r2, [pc, #184]	; (801aa58 <HAL_DMA_IRQHandler+0xcc4>)
 801a9a0:	4293      	cmp	r3, r2
 801a9a2:	d027      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	4a2c      	ldr	r2, [pc, #176]	; (801aa5c <HAL_DMA_IRQHandler+0xcc8>)
 801a9aa:	4293      	cmp	r3, r2
 801a9ac:	d022      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	4a2b      	ldr	r2, [pc, #172]	; (801aa60 <HAL_DMA_IRQHandler+0xccc>)
 801a9b4:	4293      	cmp	r3, r2
 801a9b6:	d01d      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	4a29      	ldr	r2, [pc, #164]	; (801aa64 <HAL_DMA_IRQHandler+0xcd0>)
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	d018      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	4a28      	ldr	r2, [pc, #160]	; (801aa68 <HAL_DMA_IRQHandler+0xcd4>)
 801a9c8:	4293      	cmp	r3, r2
 801a9ca:	d013      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	4a26      	ldr	r2, [pc, #152]	; (801aa6c <HAL_DMA_IRQHandler+0xcd8>)
 801a9d2:	4293      	cmp	r3, r2
 801a9d4:	d00e      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	4a25      	ldr	r2, [pc, #148]	; (801aa70 <HAL_DMA_IRQHandler+0xcdc>)
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	d009      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	4a23      	ldr	r2, [pc, #140]	; (801aa74 <HAL_DMA_IRQHandler+0xce0>)
 801a9e6:	4293      	cmp	r3, r2
 801a9e8:	d004      	beq.n	801a9f4 <HAL_DMA_IRQHandler+0xc60>
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	4a22      	ldr	r2, [pc, #136]	; (801aa78 <HAL_DMA_IRQHandler+0xce4>)
 801a9f0:	4293      	cmp	r3, r2
 801a9f2:	d108      	bne.n	801aa06 <HAL_DMA_IRQHandler+0xc72>
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	681a      	ldr	r2, [r3, #0]
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	f022 0214 	bic.w	r2, r2, #20
 801aa02:	601a      	str	r2, [r3, #0]
 801aa04:	e007      	b.n	801aa16 <HAL_DMA_IRQHandler+0xc82>
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	681a      	ldr	r2, [r3, #0]
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	f022 020a 	bic.w	r2, r2, #10
 801aa14:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	2201      	movs	r2, #1
 801aa1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	2200      	movs	r2, #0
 801aa22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	f000 80b8 	beq.w	801aba0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa34:	6878      	ldr	r0, [r7, #4]
 801aa36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801aa38:	e0b2      	b.n	801aba0 <HAL_DMA_IRQHandler+0xe0c>
 801aa3a:	bf00      	nop
 801aa3c:	40020010 	.word	0x40020010
 801aa40:	40020028 	.word	0x40020028
 801aa44:	40020040 	.word	0x40020040
 801aa48:	40020058 	.word	0x40020058
 801aa4c:	40020070 	.word	0x40020070
 801aa50:	40020088 	.word	0x40020088
 801aa54:	400200a0 	.word	0x400200a0
 801aa58:	400200b8 	.word	0x400200b8
 801aa5c:	40020410 	.word	0x40020410
 801aa60:	40020428 	.word	0x40020428
 801aa64:	40020440 	.word	0x40020440
 801aa68:	40020458 	.word	0x40020458
 801aa6c:	40020470 	.word	0x40020470
 801aa70:	40020488 	.word	0x40020488
 801aa74:	400204a0 	.word	0x400204a0
 801aa78:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa80:	f003 031f 	and.w	r3, r3, #31
 801aa84:	2208      	movs	r2, #8
 801aa86:	409a      	lsls	r2, r3
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	4013      	ands	r3, r2
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	f000 8088 	beq.w	801aba2 <HAL_DMA_IRQHandler+0xe0e>
 801aa92:	693b      	ldr	r3, [r7, #16]
 801aa94:	f003 0308 	and.w	r3, r3, #8
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	f000 8082 	beq.w	801aba2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	4a41      	ldr	r2, [pc, #260]	; (801aba8 <HAL_DMA_IRQHandler+0xe14>)
 801aaa4:	4293      	cmp	r3, r2
 801aaa6:	d04a      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	4a3f      	ldr	r2, [pc, #252]	; (801abac <HAL_DMA_IRQHandler+0xe18>)
 801aaae:	4293      	cmp	r3, r2
 801aab0:	d045      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	4a3e      	ldr	r2, [pc, #248]	; (801abb0 <HAL_DMA_IRQHandler+0xe1c>)
 801aab8:	4293      	cmp	r3, r2
 801aaba:	d040      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	4a3c      	ldr	r2, [pc, #240]	; (801abb4 <HAL_DMA_IRQHandler+0xe20>)
 801aac2:	4293      	cmp	r3, r2
 801aac4:	d03b      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	4a3b      	ldr	r2, [pc, #236]	; (801abb8 <HAL_DMA_IRQHandler+0xe24>)
 801aacc:	4293      	cmp	r3, r2
 801aace:	d036      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	4a39      	ldr	r2, [pc, #228]	; (801abbc <HAL_DMA_IRQHandler+0xe28>)
 801aad6:	4293      	cmp	r3, r2
 801aad8:	d031      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	4a38      	ldr	r2, [pc, #224]	; (801abc0 <HAL_DMA_IRQHandler+0xe2c>)
 801aae0:	4293      	cmp	r3, r2
 801aae2:	d02c      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	4a36      	ldr	r2, [pc, #216]	; (801abc4 <HAL_DMA_IRQHandler+0xe30>)
 801aaea:	4293      	cmp	r3, r2
 801aaec:	d027      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	4a35      	ldr	r2, [pc, #212]	; (801abc8 <HAL_DMA_IRQHandler+0xe34>)
 801aaf4:	4293      	cmp	r3, r2
 801aaf6:	d022      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	4a33      	ldr	r2, [pc, #204]	; (801abcc <HAL_DMA_IRQHandler+0xe38>)
 801aafe:	4293      	cmp	r3, r2
 801ab00:	d01d      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	4a32      	ldr	r2, [pc, #200]	; (801abd0 <HAL_DMA_IRQHandler+0xe3c>)
 801ab08:	4293      	cmp	r3, r2
 801ab0a:	d018      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	4a30      	ldr	r2, [pc, #192]	; (801abd4 <HAL_DMA_IRQHandler+0xe40>)
 801ab12:	4293      	cmp	r3, r2
 801ab14:	d013      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	4a2f      	ldr	r2, [pc, #188]	; (801abd8 <HAL_DMA_IRQHandler+0xe44>)
 801ab1c:	4293      	cmp	r3, r2
 801ab1e:	d00e      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	4a2d      	ldr	r2, [pc, #180]	; (801abdc <HAL_DMA_IRQHandler+0xe48>)
 801ab26:	4293      	cmp	r3, r2
 801ab28:	d009      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	4a2c      	ldr	r2, [pc, #176]	; (801abe0 <HAL_DMA_IRQHandler+0xe4c>)
 801ab30:	4293      	cmp	r3, r2
 801ab32:	d004      	beq.n	801ab3e <HAL_DMA_IRQHandler+0xdaa>
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	4a2a      	ldr	r2, [pc, #168]	; (801abe4 <HAL_DMA_IRQHandler+0xe50>)
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	d108      	bne.n	801ab50 <HAL_DMA_IRQHandler+0xdbc>
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	681a      	ldr	r2, [r3, #0]
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	f022 021c 	bic.w	r2, r2, #28
 801ab4c:	601a      	str	r2, [r3, #0]
 801ab4e:	e007      	b.n	801ab60 <HAL_DMA_IRQHandler+0xdcc>
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	681a      	ldr	r2, [r3, #0]
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	f022 020e 	bic.w	r2, r2, #14
 801ab5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab64:	f003 031f 	and.w	r3, r3, #31
 801ab68:	2201      	movs	r2, #1
 801ab6a:	409a      	lsls	r2, r3
 801ab6c:	69fb      	ldr	r3, [r7, #28]
 801ab6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	2201      	movs	r2, #1
 801ab74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	2201      	movs	r2, #1
 801ab7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	2200      	movs	r2, #0
 801ab82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d009      	beq.n	801aba2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab92:	6878      	ldr	r0, [r7, #4]
 801ab94:	4798      	blx	r3
 801ab96:	e004      	b.n	801aba2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801ab98:	bf00      	nop
 801ab9a:	e002      	b.n	801aba2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ab9c:	bf00      	nop
 801ab9e:	e000      	b.n	801aba2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801aba0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801aba2:	3728      	adds	r7, #40	; 0x28
 801aba4:	46bd      	mov	sp, r7
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	40020010 	.word	0x40020010
 801abac:	40020028 	.word	0x40020028
 801abb0:	40020040 	.word	0x40020040
 801abb4:	40020058 	.word	0x40020058
 801abb8:	40020070 	.word	0x40020070
 801abbc:	40020088 	.word	0x40020088
 801abc0:	400200a0 	.word	0x400200a0
 801abc4:	400200b8 	.word	0x400200b8
 801abc8:	40020410 	.word	0x40020410
 801abcc:	40020428 	.word	0x40020428
 801abd0:	40020440 	.word	0x40020440
 801abd4:	40020458 	.word	0x40020458
 801abd8:	40020470 	.word	0x40020470
 801abdc:	40020488 	.word	0x40020488
 801abe0:	400204a0 	.word	0x400204a0
 801abe4:	400204b8 	.word	0x400204b8

0801abe8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801abe8:	b480      	push	{r7}
 801abea:	b083      	sub	sp, #12
 801abec:	af00      	add	r7, sp, #0
 801abee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801abf6:	b2db      	uxtb	r3, r3
}
 801abf8:	4618      	mov	r0, r3
 801abfa:	370c      	adds	r7, #12
 801abfc:	46bd      	mov	sp, r7
 801abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac02:	4770      	bx	lr

0801ac04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801ac04:	b480      	push	{r7}
 801ac06:	b087      	sub	sp, #28
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	60f8      	str	r0, [r7, #12]
 801ac0c:	60b9      	str	r1, [r7, #8]
 801ac0e:	607a      	str	r2, [r7, #4]
 801ac10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ac16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ac1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	4a84      	ldr	r2, [pc, #528]	; (801ae34 <DMA_SetConfig+0x230>)
 801ac24:	4293      	cmp	r3, r2
 801ac26:	d072      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	4a82      	ldr	r2, [pc, #520]	; (801ae38 <DMA_SetConfig+0x234>)
 801ac2e:	4293      	cmp	r3, r2
 801ac30:	d06d      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	4a81      	ldr	r2, [pc, #516]	; (801ae3c <DMA_SetConfig+0x238>)
 801ac38:	4293      	cmp	r3, r2
 801ac3a:	d068      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	4a7f      	ldr	r2, [pc, #508]	; (801ae40 <DMA_SetConfig+0x23c>)
 801ac42:	4293      	cmp	r3, r2
 801ac44:	d063      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4a7e      	ldr	r2, [pc, #504]	; (801ae44 <DMA_SetConfig+0x240>)
 801ac4c:	4293      	cmp	r3, r2
 801ac4e:	d05e      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	4a7c      	ldr	r2, [pc, #496]	; (801ae48 <DMA_SetConfig+0x244>)
 801ac56:	4293      	cmp	r3, r2
 801ac58:	d059      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	4a7b      	ldr	r2, [pc, #492]	; (801ae4c <DMA_SetConfig+0x248>)
 801ac60:	4293      	cmp	r3, r2
 801ac62:	d054      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	4a79      	ldr	r2, [pc, #484]	; (801ae50 <DMA_SetConfig+0x24c>)
 801ac6a:	4293      	cmp	r3, r2
 801ac6c:	d04f      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	4a78      	ldr	r2, [pc, #480]	; (801ae54 <DMA_SetConfig+0x250>)
 801ac74:	4293      	cmp	r3, r2
 801ac76:	d04a      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	4a76      	ldr	r2, [pc, #472]	; (801ae58 <DMA_SetConfig+0x254>)
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	d045      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	4a75      	ldr	r2, [pc, #468]	; (801ae5c <DMA_SetConfig+0x258>)
 801ac88:	4293      	cmp	r3, r2
 801ac8a:	d040      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	4a73      	ldr	r2, [pc, #460]	; (801ae60 <DMA_SetConfig+0x25c>)
 801ac92:	4293      	cmp	r3, r2
 801ac94:	d03b      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	4a72      	ldr	r2, [pc, #456]	; (801ae64 <DMA_SetConfig+0x260>)
 801ac9c:	4293      	cmp	r3, r2
 801ac9e:	d036      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	4a70      	ldr	r2, [pc, #448]	; (801ae68 <DMA_SetConfig+0x264>)
 801aca6:	4293      	cmp	r3, r2
 801aca8:	d031      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	4a6f      	ldr	r2, [pc, #444]	; (801ae6c <DMA_SetConfig+0x268>)
 801acb0:	4293      	cmp	r3, r2
 801acb2:	d02c      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	4a6d      	ldr	r2, [pc, #436]	; (801ae70 <DMA_SetConfig+0x26c>)
 801acba:	4293      	cmp	r3, r2
 801acbc:	d027      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	4a6c      	ldr	r2, [pc, #432]	; (801ae74 <DMA_SetConfig+0x270>)
 801acc4:	4293      	cmp	r3, r2
 801acc6:	d022      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	4a6a      	ldr	r2, [pc, #424]	; (801ae78 <DMA_SetConfig+0x274>)
 801acce:	4293      	cmp	r3, r2
 801acd0:	d01d      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	4a69      	ldr	r2, [pc, #420]	; (801ae7c <DMA_SetConfig+0x278>)
 801acd8:	4293      	cmp	r3, r2
 801acda:	d018      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	4a67      	ldr	r2, [pc, #412]	; (801ae80 <DMA_SetConfig+0x27c>)
 801ace2:	4293      	cmp	r3, r2
 801ace4:	d013      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	4a66      	ldr	r2, [pc, #408]	; (801ae84 <DMA_SetConfig+0x280>)
 801acec:	4293      	cmp	r3, r2
 801acee:	d00e      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	4a64      	ldr	r2, [pc, #400]	; (801ae88 <DMA_SetConfig+0x284>)
 801acf6:	4293      	cmp	r3, r2
 801acf8:	d009      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	4a63      	ldr	r2, [pc, #396]	; (801ae8c <DMA_SetConfig+0x288>)
 801ad00:	4293      	cmp	r3, r2
 801ad02:	d004      	beq.n	801ad0e <DMA_SetConfig+0x10a>
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	4a61      	ldr	r2, [pc, #388]	; (801ae90 <DMA_SetConfig+0x28c>)
 801ad0a:	4293      	cmp	r3, r2
 801ad0c:	d101      	bne.n	801ad12 <DMA_SetConfig+0x10e>
 801ad0e:	2301      	movs	r3, #1
 801ad10:	e000      	b.n	801ad14 <DMA_SetConfig+0x110>
 801ad12:	2300      	movs	r3, #0
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d00d      	beq.n	801ad34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ad1c:	68fa      	ldr	r2, [r7, #12]
 801ad1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801ad20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d004      	beq.n	801ad34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad2e:	68fa      	ldr	r2, [r7, #12]
 801ad30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801ad32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	4a3e      	ldr	r2, [pc, #248]	; (801ae34 <DMA_SetConfig+0x230>)
 801ad3a:	4293      	cmp	r3, r2
 801ad3c:	d04a      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	4a3d      	ldr	r2, [pc, #244]	; (801ae38 <DMA_SetConfig+0x234>)
 801ad44:	4293      	cmp	r3, r2
 801ad46:	d045      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	4a3b      	ldr	r2, [pc, #236]	; (801ae3c <DMA_SetConfig+0x238>)
 801ad4e:	4293      	cmp	r3, r2
 801ad50:	d040      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	4a3a      	ldr	r2, [pc, #232]	; (801ae40 <DMA_SetConfig+0x23c>)
 801ad58:	4293      	cmp	r3, r2
 801ad5a:	d03b      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	4a38      	ldr	r2, [pc, #224]	; (801ae44 <DMA_SetConfig+0x240>)
 801ad62:	4293      	cmp	r3, r2
 801ad64:	d036      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	4a37      	ldr	r2, [pc, #220]	; (801ae48 <DMA_SetConfig+0x244>)
 801ad6c:	4293      	cmp	r3, r2
 801ad6e:	d031      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	4a35      	ldr	r2, [pc, #212]	; (801ae4c <DMA_SetConfig+0x248>)
 801ad76:	4293      	cmp	r3, r2
 801ad78:	d02c      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	4a34      	ldr	r2, [pc, #208]	; (801ae50 <DMA_SetConfig+0x24c>)
 801ad80:	4293      	cmp	r3, r2
 801ad82:	d027      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	4a32      	ldr	r2, [pc, #200]	; (801ae54 <DMA_SetConfig+0x250>)
 801ad8a:	4293      	cmp	r3, r2
 801ad8c:	d022      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	4a31      	ldr	r2, [pc, #196]	; (801ae58 <DMA_SetConfig+0x254>)
 801ad94:	4293      	cmp	r3, r2
 801ad96:	d01d      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	4a2f      	ldr	r2, [pc, #188]	; (801ae5c <DMA_SetConfig+0x258>)
 801ad9e:	4293      	cmp	r3, r2
 801ada0:	d018      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	4a2e      	ldr	r2, [pc, #184]	; (801ae60 <DMA_SetConfig+0x25c>)
 801ada8:	4293      	cmp	r3, r2
 801adaa:	d013      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	4a2c      	ldr	r2, [pc, #176]	; (801ae64 <DMA_SetConfig+0x260>)
 801adb2:	4293      	cmp	r3, r2
 801adb4:	d00e      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	4a2b      	ldr	r2, [pc, #172]	; (801ae68 <DMA_SetConfig+0x264>)
 801adbc:	4293      	cmp	r3, r2
 801adbe:	d009      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	4a29      	ldr	r2, [pc, #164]	; (801ae6c <DMA_SetConfig+0x268>)
 801adc6:	4293      	cmp	r3, r2
 801adc8:	d004      	beq.n	801add4 <DMA_SetConfig+0x1d0>
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	4a28      	ldr	r2, [pc, #160]	; (801ae70 <DMA_SetConfig+0x26c>)
 801add0:	4293      	cmp	r3, r2
 801add2:	d101      	bne.n	801add8 <DMA_SetConfig+0x1d4>
 801add4:	2301      	movs	r3, #1
 801add6:	e000      	b.n	801adda <DMA_SetConfig+0x1d6>
 801add8:	2300      	movs	r3, #0
 801adda:	2b00      	cmp	r3, #0
 801addc:	d05a      	beq.n	801ae94 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ade2:	f003 031f 	and.w	r3, r3, #31
 801ade6:	223f      	movs	r2, #63	; 0x3f
 801ade8:	409a      	lsls	r2, r3
 801adea:	697b      	ldr	r3, [r7, #20]
 801adec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	681a      	ldr	r2, [r3, #0]
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801adfc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	683a      	ldr	r2, [r7, #0]
 801ae04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	689b      	ldr	r3, [r3, #8]
 801ae0a:	2b40      	cmp	r3, #64	; 0x40
 801ae0c:	d108      	bne.n	801ae20 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	687a      	ldr	r2, [r7, #4]
 801ae14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	68ba      	ldr	r2, [r7, #8]
 801ae1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801ae1e:	e087      	b.n	801af30 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	68ba      	ldr	r2, [r7, #8]
 801ae26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	687a      	ldr	r2, [r7, #4]
 801ae2e:	60da      	str	r2, [r3, #12]
}
 801ae30:	e07e      	b.n	801af30 <DMA_SetConfig+0x32c>
 801ae32:	bf00      	nop
 801ae34:	40020010 	.word	0x40020010
 801ae38:	40020028 	.word	0x40020028
 801ae3c:	40020040 	.word	0x40020040
 801ae40:	40020058 	.word	0x40020058
 801ae44:	40020070 	.word	0x40020070
 801ae48:	40020088 	.word	0x40020088
 801ae4c:	400200a0 	.word	0x400200a0
 801ae50:	400200b8 	.word	0x400200b8
 801ae54:	40020410 	.word	0x40020410
 801ae58:	40020428 	.word	0x40020428
 801ae5c:	40020440 	.word	0x40020440
 801ae60:	40020458 	.word	0x40020458
 801ae64:	40020470 	.word	0x40020470
 801ae68:	40020488 	.word	0x40020488
 801ae6c:	400204a0 	.word	0x400204a0
 801ae70:	400204b8 	.word	0x400204b8
 801ae74:	58025408 	.word	0x58025408
 801ae78:	5802541c 	.word	0x5802541c
 801ae7c:	58025430 	.word	0x58025430
 801ae80:	58025444 	.word	0x58025444
 801ae84:	58025458 	.word	0x58025458
 801ae88:	5802546c 	.word	0x5802546c
 801ae8c:	58025480 	.word	0x58025480
 801ae90:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	4a28      	ldr	r2, [pc, #160]	; (801af3c <DMA_SetConfig+0x338>)
 801ae9a:	4293      	cmp	r3, r2
 801ae9c:	d022      	beq.n	801aee4 <DMA_SetConfig+0x2e0>
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	4a27      	ldr	r2, [pc, #156]	; (801af40 <DMA_SetConfig+0x33c>)
 801aea4:	4293      	cmp	r3, r2
 801aea6:	d01d      	beq.n	801aee4 <DMA_SetConfig+0x2e0>
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	4a25      	ldr	r2, [pc, #148]	; (801af44 <DMA_SetConfig+0x340>)
 801aeae:	4293      	cmp	r3, r2
 801aeb0:	d018      	beq.n	801aee4 <DMA_SetConfig+0x2e0>
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	4a24      	ldr	r2, [pc, #144]	; (801af48 <DMA_SetConfig+0x344>)
 801aeb8:	4293      	cmp	r3, r2
 801aeba:	d013      	beq.n	801aee4 <DMA_SetConfig+0x2e0>
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	4a22      	ldr	r2, [pc, #136]	; (801af4c <DMA_SetConfig+0x348>)
 801aec2:	4293      	cmp	r3, r2
 801aec4:	d00e      	beq.n	801aee4 <DMA_SetConfig+0x2e0>
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	4a21      	ldr	r2, [pc, #132]	; (801af50 <DMA_SetConfig+0x34c>)
 801aecc:	4293      	cmp	r3, r2
 801aece:	d009      	beq.n	801aee4 <DMA_SetConfig+0x2e0>
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	4a1f      	ldr	r2, [pc, #124]	; (801af54 <DMA_SetConfig+0x350>)
 801aed6:	4293      	cmp	r3, r2
 801aed8:	d004      	beq.n	801aee4 <DMA_SetConfig+0x2e0>
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	4a1e      	ldr	r2, [pc, #120]	; (801af58 <DMA_SetConfig+0x354>)
 801aee0:	4293      	cmp	r3, r2
 801aee2:	d101      	bne.n	801aee8 <DMA_SetConfig+0x2e4>
 801aee4:	2301      	movs	r3, #1
 801aee6:	e000      	b.n	801aeea <DMA_SetConfig+0x2e6>
 801aee8:	2300      	movs	r3, #0
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d020      	beq.n	801af30 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aef2:	f003 031f 	and.w	r3, r3, #31
 801aef6:	2201      	movs	r2, #1
 801aef8:	409a      	lsls	r2, r3
 801aefa:	693b      	ldr	r3, [r7, #16]
 801aefc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	683a      	ldr	r2, [r7, #0]
 801af04:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	689b      	ldr	r3, [r3, #8]
 801af0a:	2b40      	cmp	r3, #64	; 0x40
 801af0c:	d108      	bne.n	801af20 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	687a      	ldr	r2, [r7, #4]
 801af14:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	68ba      	ldr	r2, [r7, #8]
 801af1c:	60da      	str	r2, [r3, #12]
}
 801af1e:	e007      	b.n	801af30 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	68ba      	ldr	r2, [r7, #8]
 801af26:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	687a      	ldr	r2, [r7, #4]
 801af2e:	60da      	str	r2, [r3, #12]
}
 801af30:	bf00      	nop
 801af32:	371c      	adds	r7, #28
 801af34:	46bd      	mov	sp, r7
 801af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3a:	4770      	bx	lr
 801af3c:	58025408 	.word	0x58025408
 801af40:	5802541c 	.word	0x5802541c
 801af44:	58025430 	.word	0x58025430
 801af48:	58025444 	.word	0x58025444
 801af4c:	58025458 	.word	0x58025458
 801af50:	5802546c 	.word	0x5802546c
 801af54:	58025480 	.word	0x58025480
 801af58:	58025494 	.word	0x58025494

0801af5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801af5c:	b480      	push	{r7}
 801af5e:	b085      	sub	sp, #20
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	4a42      	ldr	r2, [pc, #264]	; (801b074 <DMA_CalcBaseAndBitshift+0x118>)
 801af6a:	4293      	cmp	r3, r2
 801af6c:	d04a      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	4a41      	ldr	r2, [pc, #260]	; (801b078 <DMA_CalcBaseAndBitshift+0x11c>)
 801af74:	4293      	cmp	r3, r2
 801af76:	d045      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	4a3f      	ldr	r2, [pc, #252]	; (801b07c <DMA_CalcBaseAndBitshift+0x120>)
 801af7e:	4293      	cmp	r3, r2
 801af80:	d040      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	4a3e      	ldr	r2, [pc, #248]	; (801b080 <DMA_CalcBaseAndBitshift+0x124>)
 801af88:	4293      	cmp	r3, r2
 801af8a:	d03b      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	4a3c      	ldr	r2, [pc, #240]	; (801b084 <DMA_CalcBaseAndBitshift+0x128>)
 801af92:	4293      	cmp	r3, r2
 801af94:	d036      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	4a3b      	ldr	r2, [pc, #236]	; (801b088 <DMA_CalcBaseAndBitshift+0x12c>)
 801af9c:	4293      	cmp	r3, r2
 801af9e:	d031      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	4a39      	ldr	r2, [pc, #228]	; (801b08c <DMA_CalcBaseAndBitshift+0x130>)
 801afa6:	4293      	cmp	r3, r2
 801afa8:	d02c      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	4a38      	ldr	r2, [pc, #224]	; (801b090 <DMA_CalcBaseAndBitshift+0x134>)
 801afb0:	4293      	cmp	r3, r2
 801afb2:	d027      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	4a36      	ldr	r2, [pc, #216]	; (801b094 <DMA_CalcBaseAndBitshift+0x138>)
 801afba:	4293      	cmp	r3, r2
 801afbc:	d022      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	4a35      	ldr	r2, [pc, #212]	; (801b098 <DMA_CalcBaseAndBitshift+0x13c>)
 801afc4:	4293      	cmp	r3, r2
 801afc6:	d01d      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	4a33      	ldr	r2, [pc, #204]	; (801b09c <DMA_CalcBaseAndBitshift+0x140>)
 801afce:	4293      	cmp	r3, r2
 801afd0:	d018      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	4a32      	ldr	r2, [pc, #200]	; (801b0a0 <DMA_CalcBaseAndBitshift+0x144>)
 801afd8:	4293      	cmp	r3, r2
 801afda:	d013      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	4a30      	ldr	r2, [pc, #192]	; (801b0a4 <DMA_CalcBaseAndBitshift+0x148>)
 801afe2:	4293      	cmp	r3, r2
 801afe4:	d00e      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	4a2f      	ldr	r2, [pc, #188]	; (801b0a8 <DMA_CalcBaseAndBitshift+0x14c>)
 801afec:	4293      	cmp	r3, r2
 801afee:	d009      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	4a2d      	ldr	r2, [pc, #180]	; (801b0ac <DMA_CalcBaseAndBitshift+0x150>)
 801aff6:	4293      	cmp	r3, r2
 801aff8:	d004      	beq.n	801b004 <DMA_CalcBaseAndBitshift+0xa8>
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	4a2c      	ldr	r2, [pc, #176]	; (801b0b0 <DMA_CalcBaseAndBitshift+0x154>)
 801b000:	4293      	cmp	r3, r2
 801b002:	d101      	bne.n	801b008 <DMA_CalcBaseAndBitshift+0xac>
 801b004:	2301      	movs	r3, #1
 801b006:	e000      	b.n	801b00a <DMA_CalcBaseAndBitshift+0xae>
 801b008:	2300      	movs	r3, #0
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d024      	beq.n	801b058 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	b2db      	uxtb	r3, r3
 801b014:	3b10      	subs	r3, #16
 801b016:	4a27      	ldr	r2, [pc, #156]	; (801b0b4 <DMA_CalcBaseAndBitshift+0x158>)
 801b018:	fba2 2303 	umull	r2, r3, r2, r3
 801b01c:	091b      	lsrs	r3, r3, #4
 801b01e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	f003 0307 	and.w	r3, r3, #7
 801b026:	4a24      	ldr	r2, [pc, #144]	; (801b0b8 <DMA_CalcBaseAndBitshift+0x15c>)
 801b028:	5cd3      	ldrb	r3, [r2, r3]
 801b02a:	461a      	mov	r2, r3
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	2b03      	cmp	r3, #3
 801b034:	d908      	bls.n	801b048 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	461a      	mov	r2, r3
 801b03c:	4b1f      	ldr	r3, [pc, #124]	; (801b0bc <DMA_CalcBaseAndBitshift+0x160>)
 801b03e:	4013      	ands	r3, r2
 801b040:	1d1a      	adds	r2, r3, #4
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	659a      	str	r2, [r3, #88]	; 0x58
 801b046:	e00d      	b.n	801b064 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	461a      	mov	r2, r3
 801b04e:	4b1b      	ldr	r3, [pc, #108]	; (801b0bc <DMA_CalcBaseAndBitshift+0x160>)
 801b050:	4013      	ands	r3, r2
 801b052:	687a      	ldr	r2, [r7, #4]
 801b054:	6593      	str	r3, [r2, #88]	; 0x58
 801b056:	e005      	b.n	801b064 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801b068:	4618      	mov	r0, r3
 801b06a:	3714      	adds	r7, #20
 801b06c:	46bd      	mov	sp, r7
 801b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b072:	4770      	bx	lr
 801b074:	40020010 	.word	0x40020010
 801b078:	40020028 	.word	0x40020028
 801b07c:	40020040 	.word	0x40020040
 801b080:	40020058 	.word	0x40020058
 801b084:	40020070 	.word	0x40020070
 801b088:	40020088 	.word	0x40020088
 801b08c:	400200a0 	.word	0x400200a0
 801b090:	400200b8 	.word	0x400200b8
 801b094:	40020410 	.word	0x40020410
 801b098:	40020428 	.word	0x40020428
 801b09c:	40020440 	.word	0x40020440
 801b0a0:	40020458 	.word	0x40020458
 801b0a4:	40020470 	.word	0x40020470
 801b0a8:	40020488 	.word	0x40020488
 801b0ac:	400204a0 	.word	0x400204a0
 801b0b0:	400204b8 	.word	0x400204b8
 801b0b4:	aaaaaaab 	.word	0xaaaaaaab
 801b0b8:	0802b4e4 	.word	0x0802b4e4
 801b0bc:	fffffc00 	.word	0xfffffc00

0801b0c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801b0c0:	b480      	push	{r7}
 801b0c2:	b085      	sub	sp, #20
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b0c8:	2300      	movs	r3, #0
 801b0ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	699b      	ldr	r3, [r3, #24]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d120      	bne.n	801b116 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0d8:	2b03      	cmp	r3, #3
 801b0da:	d858      	bhi.n	801b18e <DMA_CheckFifoParam+0xce>
 801b0dc:	a201      	add	r2, pc, #4	; (adr r2, 801b0e4 <DMA_CheckFifoParam+0x24>)
 801b0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0e2:	bf00      	nop
 801b0e4:	0801b0f5 	.word	0x0801b0f5
 801b0e8:	0801b107 	.word	0x0801b107
 801b0ec:	0801b0f5 	.word	0x0801b0f5
 801b0f0:	0801b18f 	.word	0x0801b18f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d048      	beq.n	801b192 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801b100:	2301      	movs	r3, #1
 801b102:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b104:	e045      	b.n	801b192 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b10a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801b10e:	d142      	bne.n	801b196 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801b110:	2301      	movs	r3, #1
 801b112:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b114:	e03f      	b.n	801b196 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	699b      	ldr	r3, [r3, #24]
 801b11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b11e:	d123      	bne.n	801b168 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b124:	2b03      	cmp	r3, #3
 801b126:	d838      	bhi.n	801b19a <DMA_CheckFifoParam+0xda>
 801b128:	a201      	add	r2, pc, #4	; (adr r2, 801b130 <DMA_CheckFifoParam+0x70>)
 801b12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b12e:	bf00      	nop
 801b130:	0801b141 	.word	0x0801b141
 801b134:	0801b147 	.word	0x0801b147
 801b138:	0801b141 	.word	0x0801b141
 801b13c:	0801b159 	.word	0x0801b159
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801b140:	2301      	movs	r3, #1
 801b142:	73fb      	strb	r3, [r7, #15]
        break;
 801b144:	e030      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b14a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d025      	beq.n	801b19e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801b152:	2301      	movs	r3, #1
 801b154:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b156:	e022      	b.n	801b19e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b15c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801b160:	d11f      	bne.n	801b1a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801b162:	2301      	movs	r3, #1
 801b164:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b166:	e01c      	b.n	801b1a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b16c:	2b02      	cmp	r3, #2
 801b16e:	d902      	bls.n	801b176 <DMA_CheckFifoParam+0xb6>
 801b170:	2b03      	cmp	r3, #3
 801b172:	d003      	beq.n	801b17c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801b174:	e018      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801b176:	2301      	movs	r3, #1
 801b178:	73fb      	strb	r3, [r7, #15]
        break;
 801b17a:	e015      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801b184:	2b00      	cmp	r3, #0
 801b186:	d00e      	beq.n	801b1a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801b188:	2301      	movs	r3, #1
 801b18a:	73fb      	strb	r3, [r7, #15]
    break;
 801b18c:	e00b      	b.n	801b1a6 <DMA_CheckFifoParam+0xe6>
        break;
 801b18e:	bf00      	nop
 801b190:	e00a      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>
        break;
 801b192:	bf00      	nop
 801b194:	e008      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>
        break;
 801b196:	bf00      	nop
 801b198:	e006      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>
        break;
 801b19a:	bf00      	nop
 801b19c:	e004      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>
        break;
 801b19e:	bf00      	nop
 801b1a0:	e002      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>
        break;
 801b1a2:	bf00      	nop
 801b1a4:	e000      	b.n	801b1a8 <DMA_CheckFifoParam+0xe8>
    break;
 801b1a6:	bf00      	nop
    }
  }

  return status;
 801b1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	3714      	adds	r7, #20
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1b4:	4770      	bx	lr
 801b1b6:	bf00      	nop

0801b1b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b1b8:	b480      	push	{r7}
 801b1ba:	b085      	sub	sp, #20
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	4a38      	ldr	r2, [pc, #224]	; (801b2ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801b1cc:	4293      	cmp	r3, r2
 801b1ce:	d022      	beq.n	801b216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	4a36      	ldr	r2, [pc, #216]	; (801b2b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801b1d6:	4293      	cmp	r3, r2
 801b1d8:	d01d      	beq.n	801b216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	4a35      	ldr	r2, [pc, #212]	; (801b2b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801b1e0:	4293      	cmp	r3, r2
 801b1e2:	d018      	beq.n	801b216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	4a33      	ldr	r2, [pc, #204]	; (801b2b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801b1ea:	4293      	cmp	r3, r2
 801b1ec:	d013      	beq.n	801b216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	4a32      	ldr	r2, [pc, #200]	; (801b2bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801b1f4:	4293      	cmp	r3, r2
 801b1f6:	d00e      	beq.n	801b216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	4a30      	ldr	r2, [pc, #192]	; (801b2c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801b1fe:	4293      	cmp	r3, r2
 801b200:	d009      	beq.n	801b216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	4a2f      	ldr	r2, [pc, #188]	; (801b2c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801b208:	4293      	cmp	r3, r2
 801b20a:	d004      	beq.n	801b216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	4a2d      	ldr	r2, [pc, #180]	; (801b2c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801b212:	4293      	cmp	r3, r2
 801b214:	d101      	bne.n	801b21a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801b216:	2301      	movs	r3, #1
 801b218:	e000      	b.n	801b21c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801b21a:	2300      	movs	r3, #0
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d01a      	beq.n	801b256 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	b2db      	uxtb	r3, r3
 801b226:	3b08      	subs	r3, #8
 801b228:	4a28      	ldr	r2, [pc, #160]	; (801b2cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801b22a:	fba2 2303 	umull	r2, r3, r2, r3
 801b22e:	091b      	lsrs	r3, r3, #4
 801b230:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801b232:	68fa      	ldr	r2, [r7, #12]
 801b234:	4b26      	ldr	r3, [pc, #152]	; (801b2d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801b236:	4413      	add	r3, r2
 801b238:	009b      	lsls	r3, r3, #2
 801b23a:	461a      	mov	r2, r3
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	4a24      	ldr	r2, [pc, #144]	; (801b2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801b244:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	f003 031f 	and.w	r3, r3, #31
 801b24c:	2201      	movs	r2, #1
 801b24e:	409a      	lsls	r2, r3
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801b254:	e024      	b.n	801b2a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	b2db      	uxtb	r3, r3
 801b25c:	3b10      	subs	r3, #16
 801b25e:	4a1e      	ldr	r2, [pc, #120]	; (801b2d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801b260:	fba2 2303 	umull	r2, r3, r2, r3
 801b264:	091b      	lsrs	r3, r3, #4
 801b266:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801b268:	68bb      	ldr	r3, [r7, #8]
 801b26a:	4a1c      	ldr	r2, [pc, #112]	; (801b2dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801b26c:	4293      	cmp	r3, r2
 801b26e:	d806      	bhi.n	801b27e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801b270:	68bb      	ldr	r3, [r7, #8]
 801b272:	4a1b      	ldr	r2, [pc, #108]	; (801b2e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801b274:	4293      	cmp	r3, r2
 801b276:	d902      	bls.n	801b27e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	3308      	adds	r3, #8
 801b27c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801b27e:	68fa      	ldr	r2, [r7, #12]
 801b280:	4b18      	ldr	r3, [pc, #96]	; (801b2e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801b282:	4413      	add	r3, r2
 801b284:	009b      	lsls	r3, r3, #2
 801b286:	461a      	mov	r2, r3
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	4a16      	ldr	r2, [pc, #88]	; (801b2e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801b290:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	f003 031f 	and.w	r3, r3, #31
 801b298:	2201      	movs	r2, #1
 801b29a:	409a      	lsls	r2, r3
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	669a      	str	r2, [r3, #104]	; 0x68
}
 801b2a0:	bf00      	nop
 801b2a2:	3714      	adds	r7, #20
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2aa:	4770      	bx	lr
 801b2ac:	58025408 	.word	0x58025408
 801b2b0:	5802541c 	.word	0x5802541c
 801b2b4:	58025430 	.word	0x58025430
 801b2b8:	58025444 	.word	0x58025444
 801b2bc:	58025458 	.word	0x58025458
 801b2c0:	5802546c 	.word	0x5802546c
 801b2c4:	58025480 	.word	0x58025480
 801b2c8:	58025494 	.word	0x58025494
 801b2cc:	cccccccd 	.word	0xcccccccd
 801b2d0:	16009600 	.word	0x16009600
 801b2d4:	58025880 	.word	0x58025880
 801b2d8:	aaaaaaab 	.word	0xaaaaaaab
 801b2dc:	400204b8 	.word	0x400204b8
 801b2e0:	4002040f 	.word	0x4002040f
 801b2e4:	10008200 	.word	0x10008200
 801b2e8:	40020880 	.word	0x40020880

0801b2ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b2ec:	b480      	push	{r7}
 801b2ee:	b085      	sub	sp, #20
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	685b      	ldr	r3, [r3, #4]
 801b2f8:	b2db      	uxtb	r3, r3
 801b2fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d04a      	beq.n	801b398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	2b08      	cmp	r3, #8
 801b306:	d847      	bhi.n	801b398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	4a25      	ldr	r2, [pc, #148]	; (801b3a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801b30e:	4293      	cmp	r3, r2
 801b310:	d022      	beq.n	801b358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	4a24      	ldr	r2, [pc, #144]	; (801b3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801b318:	4293      	cmp	r3, r2
 801b31a:	d01d      	beq.n	801b358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	4a22      	ldr	r2, [pc, #136]	; (801b3ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801b322:	4293      	cmp	r3, r2
 801b324:	d018      	beq.n	801b358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	4a21      	ldr	r2, [pc, #132]	; (801b3b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801b32c:	4293      	cmp	r3, r2
 801b32e:	d013      	beq.n	801b358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	4a1f      	ldr	r2, [pc, #124]	; (801b3b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801b336:	4293      	cmp	r3, r2
 801b338:	d00e      	beq.n	801b358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	4a1e      	ldr	r2, [pc, #120]	; (801b3b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801b340:	4293      	cmp	r3, r2
 801b342:	d009      	beq.n	801b358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	4a1c      	ldr	r2, [pc, #112]	; (801b3bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801b34a:	4293      	cmp	r3, r2
 801b34c:	d004      	beq.n	801b358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	4a1b      	ldr	r2, [pc, #108]	; (801b3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801b354:	4293      	cmp	r3, r2
 801b356:	d101      	bne.n	801b35c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801b358:	2301      	movs	r3, #1
 801b35a:	e000      	b.n	801b35e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801b35c:	2300      	movs	r3, #0
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d00a      	beq.n	801b378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801b362:	68fa      	ldr	r2, [r7, #12]
 801b364:	4b17      	ldr	r3, [pc, #92]	; (801b3c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801b366:	4413      	add	r3, r2
 801b368:	009b      	lsls	r3, r3, #2
 801b36a:	461a      	mov	r2, r3
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	4a15      	ldr	r2, [pc, #84]	; (801b3c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801b374:	671a      	str	r2, [r3, #112]	; 0x70
 801b376:	e009      	b.n	801b38c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b378:	68fa      	ldr	r2, [r7, #12]
 801b37a:	4b14      	ldr	r3, [pc, #80]	; (801b3cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801b37c:	4413      	add	r3, r2
 801b37e:	009b      	lsls	r3, r3, #2
 801b380:	461a      	mov	r2, r3
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	4a11      	ldr	r2, [pc, #68]	; (801b3d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801b38a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	3b01      	subs	r3, #1
 801b390:	2201      	movs	r2, #1
 801b392:	409a      	lsls	r2, r3
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 801b398:	bf00      	nop
 801b39a:	3714      	adds	r7, #20
 801b39c:	46bd      	mov	sp, r7
 801b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a2:	4770      	bx	lr
 801b3a4:	58025408 	.word	0x58025408
 801b3a8:	5802541c 	.word	0x5802541c
 801b3ac:	58025430 	.word	0x58025430
 801b3b0:	58025444 	.word	0x58025444
 801b3b4:	58025458 	.word	0x58025458
 801b3b8:	5802546c 	.word	0x5802546c
 801b3bc:	58025480 	.word	0x58025480
 801b3c0:	58025494 	.word	0x58025494
 801b3c4:	1600963f 	.word	0x1600963f
 801b3c8:	58025940 	.word	0x58025940
 801b3cc:	1000823f 	.word	0x1000823f
 801b3d0:	40020940 	.word	0x40020940

0801b3d4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b08a      	sub	sp, #40	; 0x28
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	60f8      	str	r0, [r7, #12]
 801b3dc:	60b9      	str	r1, [r7, #8]
 801b3de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 801b3e0:	68bb      	ldr	r3, [r7, #8]
 801b3e2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 801b3e8:	2308      	movs	r3, #8
 801b3ea:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b3ec:	4b2e      	ldr	r3, [pc, #184]	; (801b4a8 <HAL_FLASH_Program+0xd4>)
 801b3ee:	7d1b      	ldrb	r3, [r3, #20]
 801b3f0:	2b01      	cmp	r3, #1
 801b3f2:	d101      	bne.n	801b3f8 <HAL_FLASH_Program+0x24>
 801b3f4:	2302      	movs	r3, #2
 801b3f6:	e053      	b.n	801b4a0 <HAL_FLASH_Program+0xcc>
 801b3f8:	4b2b      	ldr	r3, [pc, #172]	; (801b4a8 <HAL_FLASH_Program+0xd4>)
 801b3fa:	2201      	movs	r2, #1
 801b3fc:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 801b3fe:	68bb      	ldr	r3, [r7, #8]
 801b400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b404:	d315      	bcc.n	801b432 <HAL_FLASH_Program+0x5e>
 801b406:	68bb      	ldr	r3, [r7, #8]
 801b408:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 801b40c:	d211      	bcs.n	801b432 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 801b40e:	2301      	movs	r3, #1
 801b410:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b412:	4b25      	ldr	r3, [pc, #148]	; (801b4a8 <HAL_FLASH_Program+0xd4>)
 801b414:	2200      	movs	r2, #0
 801b416:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 801b418:	6979      	ldr	r1, [r7, #20]
 801b41a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b41e:	f000 f88d 	bl	801b53c <FLASH_WaitForLastOperation>
 801b422:	4603      	mov	r3, r0
 801b424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 801b428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d002      	beq.n	801b436 <HAL_FLASH_Program+0x62>
 801b430:	e031      	b.n	801b496 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 801b432:	2301      	movs	r3, #1
 801b434:	e034      	b.n	801b4a0 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 801b436:	4b1d      	ldr	r3, [pc, #116]	; (801b4ac <HAL_FLASH_Program+0xd8>)
 801b438:	68db      	ldr	r3, [r3, #12]
 801b43a:	4a1c      	ldr	r2, [pc, #112]	; (801b4ac <HAL_FLASH_Program+0xd8>)
 801b43c:	f043 0302 	orr.w	r3, r3, #2
 801b440:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 801b442:	f3bf 8f6f 	isb	sy
}
 801b446:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 801b448:	f3bf 8f4f 	dsb	sy
}
 801b44c:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 801b44e:	69fb      	ldr	r3, [r7, #28]
 801b450:	681a      	ldr	r2, [r3, #0]
 801b452:	6a3b      	ldr	r3, [r7, #32]
 801b454:	601a      	str	r2, [r3, #0]
        dest_addr++;
 801b456:	6a3b      	ldr	r3, [r7, #32]
 801b458:	3304      	adds	r3, #4
 801b45a:	623b      	str	r3, [r7, #32]
        src_addr++;
 801b45c:	69fb      	ldr	r3, [r7, #28]
 801b45e:	3304      	adds	r3, #4
 801b460:	61fb      	str	r3, [r7, #28]
        row_index--;
 801b462:	7efb      	ldrb	r3, [r7, #27]
 801b464:	3b01      	subs	r3, #1
 801b466:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 801b468:	7efb      	ldrb	r3, [r7, #27]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d1ef      	bne.n	801b44e <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 801b46e:	f3bf 8f6f 	isb	sy
}
 801b472:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 801b474:	f3bf 8f4f 	dsb	sy
}
 801b478:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 801b47a:	6979      	ldr	r1, [r7, #20]
 801b47c:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b480:	f000 f85c 	bl	801b53c <FLASH_WaitForLastOperation>
 801b484:	4603      	mov	r3, r0
 801b486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 801b48a:	4b08      	ldr	r3, [pc, #32]	; (801b4ac <HAL_FLASH_Program+0xd8>)
 801b48c:	68db      	ldr	r3, [r3, #12]
 801b48e:	4a07      	ldr	r2, [pc, #28]	; (801b4ac <HAL_FLASH_Program+0xd8>)
 801b490:	f023 0302 	bic.w	r3, r3, #2
 801b494:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b496:	4b04      	ldr	r3, [pc, #16]	; (801b4a8 <HAL_FLASH_Program+0xd4>)
 801b498:	2200      	movs	r2, #0
 801b49a:	751a      	strb	r2, [r3, #20]

  return status;
 801b49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	3728      	adds	r7, #40	; 0x28
 801b4a4:	46bd      	mov	sp, r7
 801b4a6:	bd80      	pop	{r7, pc}
 801b4a8:	24006008 	.word	0x24006008
 801b4ac:	52002000 	.word	0x52002000

0801b4b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b4b0:	b480      	push	{r7}
 801b4b2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 801b4b4:	4b0c      	ldr	r3, [pc, #48]	; (801b4e8 <HAL_FLASH_Unlock+0x38>)
 801b4b6:	68db      	ldr	r3, [r3, #12]
 801b4b8:	f003 0301 	and.w	r3, r3, #1
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d00d      	beq.n	801b4dc <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 801b4c0:	4b09      	ldr	r3, [pc, #36]	; (801b4e8 <HAL_FLASH_Unlock+0x38>)
 801b4c2:	4a0a      	ldr	r2, [pc, #40]	; (801b4ec <HAL_FLASH_Unlock+0x3c>)
 801b4c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 801b4c6:	4b08      	ldr	r3, [pc, #32]	; (801b4e8 <HAL_FLASH_Unlock+0x38>)
 801b4c8:	4a09      	ldr	r2, [pc, #36]	; (801b4f0 <HAL_FLASH_Unlock+0x40>)
 801b4ca:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 801b4cc:	4b06      	ldr	r3, [pc, #24]	; (801b4e8 <HAL_FLASH_Unlock+0x38>)
 801b4ce:	68db      	ldr	r3, [r3, #12]
 801b4d0:	f003 0301 	and.w	r3, r3, #1
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d001      	beq.n	801b4dc <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 801b4d8:	2301      	movs	r3, #1
 801b4da:	e000      	b.n	801b4de <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 801b4dc:	2300      	movs	r3, #0
}
 801b4de:	4618      	mov	r0, r3
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e6:	4770      	bx	lr
 801b4e8:	52002000 	.word	0x52002000
 801b4ec:	45670123 	.word	0x45670123
 801b4f0:	cdef89ab 	.word	0xcdef89ab

0801b4f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b4f4:	b480      	push	{r7}
 801b4f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 801b4f8:	4b09      	ldr	r3, [pc, #36]	; (801b520 <HAL_FLASH_Lock+0x2c>)
 801b4fa:	68db      	ldr	r3, [r3, #12]
 801b4fc:	4a08      	ldr	r2, [pc, #32]	; (801b520 <HAL_FLASH_Lock+0x2c>)
 801b4fe:	f043 0301 	orr.w	r3, r3, #1
 801b502:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 801b504:	4b06      	ldr	r3, [pc, #24]	; (801b520 <HAL_FLASH_Lock+0x2c>)
 801b506:	68db      	ldr	r3, [r3, #12]
 801b508:	f003 0301 	and.w	r3, r3, #1
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d101      	bne.n	801b514 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 801b510:	2301      	movs	r3, #1
 801b512:	e000      	b.n	801b516 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 801b514:	2300      	movs	r3, #0
}
 801b516:	4618      	mov	r0, r3
 801b518:	46bd      	mov	sp, r7
 801b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b51e:	4770      	bx	lr
 801b520:	52002000 	.word	0x52002000

0801b524 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 801b524:	b480      	push	{r7}
 801b526:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 801b528:	4b03      	ldr	r3, [pc, #12]	; (801b538 <HAL_FLASH_GetError+0x14>)
 801b52a:	699b      	ldr	r3, [r3, #24]
}
 801b52c:	4618      	mov	r0, r3
 801b52e:	46bd      	mov	sp, r7
 801b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b534:	4770      	bx	lr
 801b536:	bf00      	nop
 801b538:	24006008 	.word	0x24006008

0801b53c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b086      	sub	sp, #24
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 801b546:	2304      	movs	r3, #4
 801b548:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 801b54a:	2300      	movs	r3, #0
 801b54c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801b54e:	f7fa ffcf 	bl	80164f0 <HAL_GetTick>
 801b552:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 801b554:	e010      	b.n	801b578 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b55c:	d00c      	beq.n	801b578 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801b55e:	f7fa ffc7 	bl	80164f0 <HAL_GetTick>
 801b562:	4602      	mov	r2, r0
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	1ad3      	subs	r3, r2, r3
 801b568:	687a      	ldr	r2, [r7, #4]
 801b56a:	429a      	cmp	r2, r3
 801b56c:	d302      	bcc.n	801b574 <FLASH_WaitForLastOperation+0x38>
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d101      	bne.n	801b578 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801b574:	2303      	movs	r3, #3
 801b576:	e02d      	b.n	801b5d4 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 801b578:	4b18      	ldr	r3, [pc, #96]	; (801b5dc <FLASH_WaitForLastOperation+0xa0>)
 801b57a:	691a      	ldr	r2, [r3, #16]
 801b57c:	693b      	ldr	r3, [r7, #16]
 801b57e:	4013      	ands	r3, r2
 801b580:	693a      	ldr	r2, [r7, #16]
 801b582:	429a      	cmp	r2, r3
 801b584:	d0e7      	beq.n	801b556 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 801b586:	683b      	ldr	r3, [r7, #0]
 801b588:	2b01      	cmp	r3, #1
 801b58a:	d104      	bne.n	801b596 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 801b58c:	4b13      	ldr	r3, [pc, #76]	; (801b5dc <FLASH_WaitForLastOperation+0xa0>)
 801b58e:	691a      	ldr	r2, [r3, #16]
 801b590:	4b13      	ldr	r3, [pc, #76]	; (801b5e0 <FLASH_WaitForLastOperation+0xa4>)
 801b592:	4013      	ands	r3, r2
 801b594:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 801b596:	697b      	ldr	r3, [r7, #20]
 801b598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d00a      	beq.n	801b5b6 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 801b5a0:	4b10      	ldr	r3, [pc, #64]	; (801b5e4 <FLASH_WaitForLastOperation+0xa8>)
 801b5a2:	699a      	ldr	r2, [r3, #24]
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	4313      	orrs	r3, r2
 801b5a8:	4a0e      	ldr	r2, [pc, #56]	; (801b5e4 <FLASH_WaitForLastOperation+0xa8>)
 801b5aa:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 801b5ac:	4a0b      	ldr	r2, [pc, #44]	; (801b5dc <FLASH_WaitForLastOperation+0xa0>)
 801b5ae:	697b      	ldr	r3, [r7, #20]
 801b5b0:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 801b5b2:	2301      	movs	r3, #1
 801b5b4:	e00e      	b.n	801b5d4 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	2b01      	cmp	r3, #1
 801b5ba:	d10a      	bne.n	801b5d2 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 801b5bc:	4b07      	ldr	r3, [pc, #28]	; (801b5dc <FLASH_WaitForLastOperation+0xa0>)
 801b5be:	691b      	ldr	r3, [r3, #16]
 801b5c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b5c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b5c8:	d103      	bne.n	801b5d2 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 801b5ca:	4b04      	ldr	r3, [pc, #16]	; (801b5dc <FLASH_WaitForLastOperation+0xa0>)
 801b5cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801b5d0:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 801b5d2:	2300      	movs	r3, #0
}
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	3718      	adds	r7, #24
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	52002000 	.word	0x52002000
 801b5e0:	17ee0000 	.word	0x17ee0000
 801b5e4:	24006008 	.word	0x24006008

0801b5e8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b084      	sub	sp, #16
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	6078      	str	r0, [r7, #4]
 801b5f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b5f6:	4b3f      	ldr	r3, [pc, #252]	; (801b6f4 <HAL_FLASHEx_Erase+0x10c>)
 801b5f8:	7d1b      	ldrb	r3, [r3, #20]
 801b5fa:	2b01      	cmp	r3, #1
 801b5fc:	d101      	bne.n	801b602 <HAL_FLASHEx_Erase+0x1a>
 801b5fe:	2302      	movs	r3, #2
 801b600:	e074      	b.n	801b6ec <HAL_FLASHEx_Erase+0x104>
 801b602:	4b3c      	ldr	r3, [pc, #240]	; (801b6f4 <HAL_FLASHEx_Erase+0x10c>)
 801b604:	2201      	movs	r2, #1
 801b606:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b608:	4b3a      	ldr	r3, [pc, #232]	; (801b6f4 <HAL_FLASHEx_Erase+0x10c>)
 801b60a:	2200      	movs	r2, #0
 801b60c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	685b      	ldr	r3, [r3, #4]
 801b612:	f003 0301 	and.w	r3, r3, #1
 801b616:	2b00      	cmp	r3, #0
 801b618:	d009      	beq.n	801b62e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 801b61a:	2101      	movs	r1, #1
 801b61c:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b620:	f7ff ff8c 	bl	801b53c <FLASH_WaitForLastOperation>
 801b624:	4603      	mov	r3, r0
 801b626:	2b00      	cmp	r3, #0
 801b628:	d001      	beq.n	801b62e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 801b62a:	2301      	movs	r3, #1
 801b62c:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 801b62e:	7bfb      	ldrb	r3, [r7, #15]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d157      	bne.n	801b6e4 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	2b01      	cmp	r3, #1
 801b63a:	d11e      	bne.n	801b67a <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	691a      	ldr	r2, [r3, #16]
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	685b      	ldr	r3, [r3, #4]
 801b644:	4619      	mov	r1, r3
 801b646:	4610      	mov	r0, r2
 801b648:	f000 f85a 	bl	801b700 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	685b      	ldr	r3, [r3, #4]
 801b650:	f003 0301 	and.w	r3, r3, #1
 801b654:	2b00      	cmp	r3, #0
 801b656:	d045      	beq.n	801b6e4 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 801b658:	2101      	movs	r1, #1
 801b65a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b65e:	f7ff ff6d 	bl	801b53c <FLASH_WaitForLastOperation>
 801b662:	4603      	mov	r3, r0
 801b664:	2b00      	cmp	r3, #0
 801b666:	d001      	beq.n	801b66c <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 801b668:	2301      	movs	r3, #1
 801b66a:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 801b66c:	4b22      	ldr	r3, [pc, #136]	; (801b6f8 <HAL_FLASHEx_Erase+0x110>)
 801b66e:	68db      	ldr	r3, [r3, #12]
 801b670:	4a21      	ldr	r2, [pc, #132]	; (801b6f8 <HAL_FLASHEx_Erase+0x110>)
 801b672:	f023 0308 	bic.w	r3, r3, #8
 801b676:	60d3      	str	r3, [r2, #12]
 801b678:	e034      	b.n	801b6e4 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 801b67a:	683b      	ldr	r3, [r7, #0]
 801b67c:	f04f 32ff 	mov.w	r2, #4294967295
 801b680:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	689b      	ldr	r3, [r3, #8]
 801b686:	60bb      	str	r3, [r7, #8]
 801b688:	e024      	b.n	801b6d4 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	6859      	ldr	r1, [r3, #4]
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	691b      	ldr	r3, [r3, #16]
 801b692:	461a      	mov	r2, r3
 801b694:	68b8      	ldr	r0, [r7, #8]
 801b696:	f000 f857 	bl	801b748 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	685b      	ldr	r3, [r3, #4]
 801b69e:	f003 0301 	and.w	r3, r3, #1
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d00c      	beq.n	801b6c0 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 801b6a6:	2101      	movs	r1, #1
 801b6a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b6ac:	f7ff ff46 	bl	801b53c <FLASH_WaitForLastOperation>
 801b6b0:	4603      	mov	r3, r0
 801b6b2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 801b6b4:	4b10      	ldr	r3, [pc, #64]	; (801b6f8 <HAL_FLASHEx_Erase+0x110>)
 801b6b6:	68da      	ldr	r2, [r3, #12]
 801b6b8:	490f      	ldr	r1, [pc, #60]	; (801b6f8 <HAL_FLASHEx_Erase+0x110>)
 801b6ba:	4b10      	ldr	r3, [pc, #64]	; (801b6fc <HAL_FLASHEx_Erase+0x114>)
 801b6bc:	4013      	ands	r3, r2
 801b6be:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 801b6c0:	7bfb      	ldrb	r3, [r7, #15]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d003      	beq.n	801b6ce <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 801b6c6:	683b      	ldr	r3, [r7, #0]
 801b6c8:	68ba      	ldr	r2, [r7, #8]
 801b6ca:	601a      	str	r2, [r3, #0]
          break;
 801b6cc:	e00a      	b.n	801b6e4 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 801b6ce:	68bb      	ldr	r3, [r7, #8]
 801b6d0:	3301      	adds	r3, #1
 801b6d2:	60bb      	str	r3, [r7, #8]
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	68da      	ldr	r2, [r3, #12]
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	689b      	ldr	r3, [r3, #8]
 801b6dc:	4413      	add	r3, r2
 801b6de:	68ba      	ldr	r2, [r7, #8]
 801b6e0:	429a      	cmp	r2, r3
 801b6e2:	d3d2      	bcc.n	801b68a <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b6e4:	4b03      	ldr	r3, [pc, #12]	; (801b6f4 <HAL_FLASHEx_Erase+0x10c>)
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	751a      	strb	r2, [r3, #20]

  return status;
 801b6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	3710      	adds	r7, #16
 801b6f0:	46bd      	mov	sp, r7
 801b6f2:	bd80      	pop	{r7, pc}
 801b6f4:	24006008 	.word	0x24006008
 801b6f8:	52002000 	.word	0x52002000
 801b6fc:	fffff8fb 	.word	0xfffff8fb

0801b700 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 801b700:	b480      	push	{r7}
 801b702:	b083      	sub	sp, #12
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
 801b708:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801b70a:	683b      	ldr	r3, [r7, #0]
 801b70c:	f003 0301 	and.w	r3, r3, #1
 801b710:	2b00      	cmp	r3, #0
 801b712:	d011      	beq.n	801b738 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 801b714:	4b0b      	ldr	r3, [pc, #44]	; (801b744 <FLASH_MassErase+0x44>)
 801b716:	68db      	ldr	r3, [r3, #12]
 801b718:	4a0a      	ldr	r2, [pc, #40]	; (801b744 <FLASH_MassErase+0x44>)
 801b71a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 801b71e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 801b720:	4b08      	ldr	r3, [pc, #32]	; (801b744 <FLASH_MassErase+0x44>)
 801b722:	68da      	ldr	r2, [r3, #12]
 801b724:	4907      	ldr	r1, [pc, #28]	; (801b744 <FLASH_MassErase+0x44>)
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	4313      	orrs	r3, r2
 801b72a:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 801b72c:	4b05      	ldr	r3, [pc, #20]	; (801b744 <FLASH_MassErase+0x44>)
 801b72e:	68db      	ldr	r3, [r3, #12]
 801b730:	4a04      	ldr	r2, [pc, #16]	; (801b744 <FLASH_MassErase+0x44>)
 801b732:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 801b736:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 801b738:	bf00      	nop
 801b73a:	370c      	adds	r7, #12
 801b73c:	46bd      	mov	sp, r7
 801b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b742:	4770      	bx	lr
 801b744:	52002000 	.word	0x52002000

0801b748 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 801b748:	b480      	push	{r7}
 801b74a:	b085      	sub	sp, #20
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	60f8      	str	r0, [r7, #12]
 801b750:	60b9      	str	r1, [r7, #8]
 801b752:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801b754:	68bb      	ldr	r3, [r7, #8]
 801b756:	f003 0301 	and.w	r3, r3, #1
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d010      	beq.n	801b780 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 801b75e:	4b0b      	ldr	r3, [pc, #44]	; (801b78c <FLASH_Erase_Sector+0x44>)
 801b760:	68db      	ldr	r3, [r3, #12]
 801b762:	4a0a      	ldr	r2, [pc, #40]	; (801b78c <FLASH_Erase_Sector+0x44>)
 801b764:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 801b768:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 801b76a:	4b08      	ldr	r3, [pc, #32]	; (801b78c <FLASH_Erase_Sector+0x44>)
 801b76c:	68da      	ldr	r2, [r3, #12]
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	0219      	lsls	r1, r3, #8
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	430b      	orrs	r3, r1
 801b776:	4313      	orrs	r3, r2
 801b778:	4a04      	ldr	r2, [pc, #16]	; (801b78c <FLASH_Erase_Sector+0x44>)
 801b77a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 801b77e:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 801b780:	bf00      	nop
 801b782:	3714      	adds	r7, #20
 801b784:	46bd      	mov	sp, r7
 801b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b78a:	4770      	bx	lr
 801b78c:	52002000 	.word	0x52002000

0801b790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b790:	b480      	push	{r7}
 801b792:	b089      	sub	sp, #36	; 0x24
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
 801b798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801b79a:	2300      	movs	r3, #0
 801b79c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801b79e:	4b86      	ldr	r3, [pc, #536]	; (801b9b8 <HAL_GPIO_Init+0x228>)
 801b7a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b7a2:	e18c      	b.n	801babe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801b7a4:	683b      	ldr	r3, [r7, #0]
 801b7a6:	681a      	ldr	r2, [r3, #0]
 801b7a8:	2101      	movs	r1, #1
 801b7aa:	69fb      	ldr	r3, [r7, #28]
 801b7ac:	fa01 f303 	lsl.w	r3, r1, r3
 801b7b0:	4013      	ands	r3, r2
 801b7b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801b7b4:	693b      	ldr	r3, [r7, #16]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	f000 817e 	beq.w	801bab8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b7bc:	683b      	ldr	r3, [r7, #0]
 801b7be:	685b      	ldr	r3, [r3, #4]
 801b7c0:	f003 0303 	and.w	r3, r3, #3
 801b7c4:	2b01      	cmp	r3, #1
 801b7c6:	d005      	beq.n	801b7d4 <HAL_GPIO_Init+0x44>
 801b7c8:	683b      	ldr	r3, [r7, #0]
 801b7ca:	685b      	ldr	r3, [r3, #4]
 801b7cc:	f003 0303 	and.w	r3, r3, #3
 801b7d0:	2b02      	cmp	r3, #2
 801b7d2:	d130      	bne.n	801b836 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	689b      	ldr	r3, [r3, #8]
 801b7d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801b7da:	69fb      	ldr	r3, [r7, #28]
 801b7dc:	005b      	lsls	r3, r3, #1
 801b7de:	2203      	movs	r2, #3
 801b7e0:	fa02 f303 	lsl.w	r3, r2, r3
 801b7e4:	43db      	mvns	r3, r3
 801b7e6:	69ba      	ldr	r2, [r7, #24]
 801b7e8:	4013      	ands	r3, r2
 801b7ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b7ec:	683b      	ldr	r3, [r7, #0]
 801b7ee:	68da      	ldr	r2, [r3, #12]
 801b7f0:	69fb      	ldr	r3, [r7, #28]
 801b7f2:	005b      	lsls	r3, r3, #1
 801b7f4:	fa02 f303 	lsl.w	r3, r2, r3
 801b7f8:	69ba      	ldr	r2, [r7, #24]
 801b7fa:	4313      	orrs	r3, r2
 801b7fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	69ba      	ldr	r2, [r7, #24]
 801b802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	685b      	ldr	r3, [r3, #4]
 801b808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801b80a:	2201      	movs	r2, #1
 801b80c:	69fb      	ldr	r3, [r7, #28]
 801b80e:	fa02 f303 	lsl.w	r3, r2, r3
 801b812:	43db      	mvns	r3, r3
 801b814:	69ba      	ldr	r2, [r7, #24]
 801b816:	4013      	ands	r3, r2
 801b818:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b81a:	683b      	ldr	r3, [r7, #0]
 801b81c:	685b      	ldr	r3, [r3, #4]
 801b81e:	091b      	lsrs	r3, r3, #4
 801b820:	f003 0201 	and.w	r2, r3, #1
 801b824:	69fb      	ldr	r3, [r7, #28]
 801b826:	fa02 f303 	lsl.w	r3, r2, r3
 801b82a:	69ba      	ldr	r2, [r7, #24]
 801b82c:	4313      	orrs	r3, r2
 801b82e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	69ba      	ldr	r2, [r7, #24]
 801b834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b836:	683b      	ldr	r3, [r7, #0]
 801b838:	685b      	ldr	r3, [r3, #4]
 801b83a:	f003 0303 	and.w	r3, r3, #3
 801b83e:	2b03      	cmp	r3, #3
 801b840:	d017      	beq.n	801b872 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	68db      	ldr	r3, [r3, #12]
 801b846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801b848:	69fb      	ldr	r3, [r7, #28]
 801b84a:	005b      	lsls	r3, r3, #1
 801b84c:	2203      	movs	r2, #3
 801b84e:	fa02 f303 	lsl.w	r3, r2, r3
 801b852:	43db      	mvns	r3, r3
 801b854:	69ba      	ldr	r2, [r7, #24]
 801b856:	4013      	ands	r3, r2
 801b858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801b85a:	683b      	ldr	r3, [r7, #0]
 801b85c:	689a      	ldr	r2, [r3, #8]
 801b85e:	69fb      	ldr	r3, [r7, #28]
 801b860:	005b      	lsls	r3, r3, #1
 801b862:	fa02 f303 	lsl.w	r3, r2, r3
 801b866:	69ba      	ldr	r2, [r7, #24]
 801b868:	4313      	orrs	r3, r2
 801b86a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	69ba      	ldr	r2, [r7, #24]
 801b870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b872:	683b      	ldr	r3, [r7, #0]
 801b874:	685b      	ldr	r3, [r3, #4]
 801b876:	f003 0303 	and.w	r3, r3, #3
 801b87a:	2b02      	cmp	r3, #2
 801b87c:	d123      	bne.n	801b8c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801b87e:	69fb      	ldr	r3, [r7, #28]
 801b880:	08da      	lsrs	r2, r3, #3
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	3208      	adds	r2, #8
 801b886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b88a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801b88c:	69fb      	ldr	r3, [r7, #28]
 801b88e:	f003 0307 	and.w	r3, r3, #7
 801b892:	009b      	lsls	r3, r3, #2
 801b894:	220f      	movs	r2, #15
 801b896:	fa02 f303 	lsl.w	r3, r2, r3
 801b89a:	43db      	mvns	r3, r3
 801b89c:	69ba      	ldr	r2, [r7, #24]
 801b89e:	4013      	ands	r3, r2
 801b8a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801b8a2:	683b      	ldr	r3, [r7, #0]
 801b8a4:	691a      	ldr	r2, [r3, #16]
 801b8a6:	69fb      	ldr	r3, [r7, #28]
 801b8a8:	f003 0307 	and.w	r3, r3, #7
 801b8ac:	009b      	lsls	r3, r3, #2
 801b8ae:	fa02 f303 	lsl.w	r3, r2, r3
 801b8b2:	69ba      	ldr	r2, [r7, #24]
 801b8b4:	4313      	orrs	r3, r2
 801b8b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801b8b8:	69fb      	ldr	r3, [r7, #28]
 801b8ba:	08da      	lsrs	r2, r3, #3
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	3208      	adds	r2, #8
 801b8c0:	69b9      	ldr	r1, [r7, #24]
 801b8c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801b8cc:	69fb      	ldr	r3, [r7, #28]
 801b8ce:	005b      	lsls	r3, r3, #1
 801b8d0:	2203      	movs	r2, #3
 801b8d2:	fa02 f303 	lsl.w	r3, r2, r3
 801b8d6:	43db      	mvns	r3, r3
 801b8d8:	69ba      	ldr	r2, [r7, #24]
 801b8da:	4013      	ands	r3, r2
 801b8dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801b8de:	683b      	ldr	r3, [r7, #0]
 801b8e0:	685b      	ldr	r3, [r3, #4]
 801b8e2:	f003 0203 	and.w	r2, r3, #3
 801b8e6:	69fb      	ldr	r3, [r7, #28]
 801b8e8:	005b      	lsls	r3, r3, #1
 801b8ea:	fa02 f303 	lsl.w	r3, r2, r3
 801b8ee:	69ba      	ldr	r2, [r7, #24]
 801b8f0:	4313      	orrs	r3, r2
 801b8f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	69ba      	ldr	r2, [r7, #24]
 801b8f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801b8fa:	683b      	ldr	r3, [r7, #0]
 801b8fc:	685b      	ldr	r3, [r3, #4]
 801b8fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801b902:	2b00      	cmp	r3, #0
 801b904:	f000 80d8 	beq.w	801bab8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b908:	4b2c      	ldr	r3, [pc, #176]	; (801b9bc <HAL_GPIO_Init+0x22c>)
 801b90a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b90e:	4a2b      	ldr	r2, [pc, #172]	; (801b9bc <HAL_GPIO_Init+0x22c>)
 801b910:	f043 0302 	orr.w	r3, r3, #2
 801b914:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801b918:	4b28      	ldr	r3, [pc, #160]	; (801b9bc <HAL_GPIO_Init+0x22c>)
 801b91a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b91e:	f003 0302 	and.w	r3, r3, #2
 801b922:	60fb      	str	r3, [r7, #12]
 801b924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801b926:	4a26      	ldr	r2, [pc, #152]	; (801b9c0 <HAL_GPIO_Init+0x230>)
 801b928:	69fb      	ldr	r3, [r7, #28]
 801b92a:	089b      	lsrs	r3, r3, #2
 801b92c:	3302      	adds	r3, #2
 801b92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801b934:	69fb      	ldr	r3, [r7, #28]
 801b936:	f003 0303 	and.w	r3, r3, #3
 801b93a:	009b      	lsls	r3, r3, #2
 801b93c:	220f      	movs	r2, #15
 801b93e:	fa02 f303 	lsl.w	r3, r2, r3
 801b942:	43db      	mvns	r3, r3
 801b944:	69ba      	ldr	r2, [r7, #24]
 801b946:	4013      	ands	r3, r2
 801b948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	4a1d      	ldr	r2, [pc, #116]	; (801b9c4 <HAL_GPIO_Init+0x234>)
 801b94e:	4293      	cmp	r3, r2
 801b950:	d04a      	beq.n	801b9e8 <HAL_GPIO_Init+0x258>
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	4a1c      	ldr	r2, [pc, #112]	; (801b9c8 <HAL_GPIO_Init+0x238>)
 801b956:	4293      	cmp	r3, r2
 801b958:	d02b      	beq.n	801b9b2 <HAL_GPIO_Init+0x222>
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	4a1b      	ldr	r2, [pc, #108]	; (801b9cc <HAL_GPIO_Init+0x23c>)
 801b95e:	4293      	cmp	r3, r2
 801b960:	d025      	beq.n	801b9ae <HAL_GPIO_Init+0x21e>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	4a1a      	ldr	r2, [pc, #104]	; (801b9d0 <HAL_GPIO_Init+0x240>)
 801b966:	4293      	cmp	r3, r2
 801b968:	d01f      	beq.n	801b9aa <HAL_GPIO_Init+0x21a>
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	4a19      	ldr	r2, [pc, #100]	; (801b9d4 <HAL_GPIO_Init+0x244>)
 801b96e:	4293      	cmp	r3, r2
 801b970:	d019      	beq.n	801b9a6 <HAL_GPIO_Init+0x216>
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	4a18      	ldr	r2, [pc, #96]	; (801b9d8 <HAL_GPIO_Init+0x248>)
 801b976:	4293      	cmp	r3, r2
 801b978:	d013      	beq.n	801b9a2 <HAL_GPIO_Init+0x212>
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	4a17      	ldr	r2, [pc, #92]	; (801b9dc <HAL_GPIO_Init+0x24c>)
 801b97e:	4293      	cmp	r3, r2
 801b980:	d00d      	beq.n	801b99e <HAL_GPIO_Init+0x20e>
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	4a16      	ldr	r2, [pc, #88]	; (801b9e0 <HAL_GPIO_Init+0x250>)
 801b986:	4293      	cmp	r3, r2
 801b988:	d007      	beq.n	801b99a <HAL_GPIO_Init+0x20a>
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	4a15      	ldr	r2, [pc, #84]	; (801b9e4 <HAL_GPIO_Init+0x254>)
 801b98e:	4293      	cmp	r3, r2
 801b990:	d101      	bne.n	801b996 <HAL_GPIO_Init+0x206>
 801b992:	2309      	movs	r3, #9
 801b994:	e029      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b996:	230a      	movs	r3, #10
 801b998:	e027      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b99a:	2307      	movs	r3, #7
 801b99c:	e025      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b99e:	2306      	movs	r3, #6
 801b9a0:	e023      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b9a2:	2305      	movs	r3, #5
 801b9a4:	e021      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b9a6:	2304      	movs	r3, #4
 801b9a8:	e01f      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b9aa:	2303      	movs	r3, #3
 801b9ac:	e01d      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b9ae:	2302      	movs	r3, #2
 801b9b0:	e01b      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b9b2:	2301      	movs	r3, #1
 801b9b4:	e019      	b.n	801b9ea <HAL_GPIO_Init+0x25a>
 801b9b6:	bf00      	nop
 801b9b8:	58000080 	.word	0x58000080
 801b9bc:	58024400 	.word	0x58024400
 801b9c0:	58000400 	.word	0x58000400
 801b9c4:	58020000 	.word	0x58020000
 801b9c8:	58020400 	.word	0x58020400
 801b9cc:	58020800 	.word	0x58020800
 801b9d0:	58020c00 	.word	0x58020c00
 801b9d4:	58021000 	.word	0x58021000
 801b9d8:	58021400 	.word	0x58021400
 801b9dc:	58021800 	.word	0x58021800
 801b9e0:	58021c00 	.word	0x58021c00
 801b9e4:	58022400 	.word	0x58022400
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	69fa      	ldr	r2, [r7, #28]
 801b9ec:	f002 0203 	and.w	r2, r2, #3
 801b9f0:	0092      	lsls	r2, r2, #2
 801b9f2:	4093      	lsls	r3, r2
 801b9f4:	69ba      	ldr	r2, [r7, #24]
 801b9f6:	4313      	orrs	r3, r2
 801b9f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801b9fa:	4938      	ldr	r1, [pc, #224]	; (801badc <HAL_GPIO_Init+0x34c>)
 801b9fc:	69fb      	ldr	r3, [r7, #28]
 801b9fe:	089b      	lsrs	r3, r3, #2
 801ba00:	3302      	adds	r3, #2
 801ba02:	69ba      	ldr	r2, [r7, #24]
 801ba04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801ba08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ba10:	693b      	ldr	r3, [r7, #16]
 801ba12:	43db      	mvns	r3, r3
 801ba14:	69ba      	ldr	r2, [r7, #24]
 801ba16:	4013      	ands	r3, r2
 801ba18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ba1a:	683b      	ldr	r3, [r7, #0]
 801ba1c:	685b      	ldr	r3, [r3, #4]
 801ba1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d003      	beq.n	801ba2e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801ba26:	69ba      	ldr	r2, [r7, #24]
 801ba28:	693b      	ldr	r3, [r7, #16]
 801ba2a:	4313      	orrs	r3, r2
 801ba2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801ba2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ba32:	69bb      	ldr	r3, [r7, #24]
 801ba34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801ba36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ba3a:	685b      	ldr	r3, [r3, #4]
 801ba3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ba3e:	693b      	ldr	r3, [r7, #16]
 801ba40:	43db      	mvns	r3, r3
 801ba42:	69ba      	ldr	r2, [r7, #24]
 801ba44:	4013      	ands	r3, r2
 801ba46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ba48:	683b      	ldr	r3, [r7, #0]
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d003      	beq.n	801ba5c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801ba54:	69ba      	ldr	r2, [r7, #24]
 801ba56:	693b      	ldr	r3, [r7, #16]
 801ba58:	4313      	orrs	r3, r2
 801ba5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801ba5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ba60:	69bb      	ldr	r3, [r7, #24]
 801ba62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801ba64:	697b      	ldr	r3, [r7, #20]
 801ba66:	685b      	ldr	r3, [r3, #4]
 801ba68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ba6a:	693b      	ldr	r3, [r7, #16]
 801ba6c:	43db      	mvns	r3, r3
 801ba6e:	69ba      	ldr	r2, [r7, #24]
 801ba70:	4013      	ands	r3, r2
 801ba72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ba74:	683b      	ldr	r3, [r7, #0]
 801ba76:	685b      	ldr	r3, [r3, #4]
 801ba78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d003      	beq.n	801ba88 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801ba80:	69ba      	ldr	r2, [r7, #24]
 801ba82:	693b      	ldr	r3, [r7, #16]
 801ba84:	4313      	orrs	r3, r2
 801ba86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801ba88:	697b      	ldr	r3, [r7, #20]
 801ba8a:	69ba      	ldr	r2, [r7, #24]
 801ba8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ba94:	693b      	ldr	r3, [r7, #16]
 801ba96:	43db      	mvns	r3, r3
 801ba98:	69ba      	ldr	r2, [r7, #24]
 801ba9a:	4013      	ands	r3, r2
 801ba9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ba9e:	683b      	ldr	r3, [r7, #0]
 801baa0:	685b      	ldr	r3, [r3, #4]
 801baa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d003      	beq.n	801bab2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801baaa:	69ba      	ldr	r2, [r7, #24]
 801baac:	693b      	ldr	r3, [r7, #16]
 801baae:	4313      	orrs	r3, r2
 801bab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801bab2:	697b      	ldr	r3, [r7, #20]
 801bab4:	69ba      	ldr	r2, [r7, #24]
 801bab6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801bab8:	69fb      	ldr	r3, [r7, #28]
 801baba:	3301      	adds	r3, #1
 801babc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801babe:	683b      	ldr	r3, [r7, #0]
 801bac0:	681a      	ldr	r2, [r3, #0]
 801bac2:	69fb      	ldr	r3, [r7, #28]
 801bac4:	fa22 f303 	lsr.w	r3, r2, r3
 801bac8:	2b00      	cmp	r3, #0
 801baca:	f47f ae6b 	bne.w	801b7a4 <HAL_GPIO_Init+0x14>
  }
}
 801bace:	bf00      	nop
 801bad0:	bf00      	nop
 801bad2:	3724      	adds	r7, #36	; 0x24
 801bad4:	46bd      	mov	sp, r7
 801bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bada:	4770      	bx	lr
 801badc:	58000400 	.word	0x58000400

0801bae0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801bae0:	b480      	push	{r7}
 801bae2:	b087      	sub	sp, #28
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
 801bae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801baea:	2300      	movs	r3, #0
 801baec:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801baee:	4b72      	ldr	r3, [pc, #456]	; (801bcb8 <HAL_GPIO_DeInit+0x1d8>)
 801baf0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 801baf2:	e0d3      	b.n	801bc9c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 801baf4:	2201      	movs	r2, #1
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	fa02 f303 	lsl.w	r3, r2, r3
 801bafc:	683a      	ldr	r2, [r7, #0]
 801bafe:	4013      	ands	r3, r2
 801bb00:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	f000 80c6 	beq.w	801bc96 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 801bb0a:	4a6c      	ldr	r2, [pc, #432]	; (801bcbc <HAL_GPIO_DeInit+0x1dc>)
 801bb0c:	697b      	ldr	r3, [r7, #20]
 801bb0e:	089b      	lsrs	r3, r3, #2
 801bb10:	3302      	adds	r3, #2
 801bb12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bb16:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801bb18:	697b      	ldr	r3, [r7, #20]
 801bb1a:	f003 0303 	and.w	r3, r3, #3
 801bb1e:	009b      	lsls	r3, r3, #2
 801bb20:	220f      	movs	r2, #15
 801bb22:	fa02 f303 	lsl.w	r3, r2, r3
 801bb26:	68ba      	ldr	r2, [r7, #8]
 801bb28:	4013      	ands	r3, r2
 801bb2a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	4a64      	ldr	r2, [pc, #400]	; (801bcc0 <HAL_GPIO_DeInit+0x1e0>)
 801bb30:	4293      	cmp	r3, r2
 801bb32:	d031      	beq.n	801bb98 <HAL_GPIO_DeInit+0xb8>
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	4a63      	ldr	r2, [pc, #396]	; (801bcc4 <HAL_GPIO_DeInit+0x1e4>)
 801bb38:	4293      	cmp	r3, r2
 801bb3a:	d02b      	beq.n	801bb94 <HAL_GPIO_DeInit+0xb4>
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	4a62      	ldr	r2, [pc, #392]	; (801bcc8 <HAL_GPIO_DeInit+0x1e8>)
 801bb40:	4293      	cmp	r3, r2
 801bb42:	d025      	beq.n	801bb90 <HAL_GPIO_DeInit+0xb0>
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	4a61      	ldr	r2, [pc, #388]	; (801bccc <HAL_GPIO_DeInit+0x1ec>)
 801bb48:	4293      	cmp	r3, r2
 801bb4a:	d01f      	beq.n	801bb8c <HAL_GPIO_DeInit+0xac>
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	4a60      	ldr	r2, [pc, #384]	; (801bcd0 <HAL_GPIO_DeInit+0x1f0>)
 801bb50:	4293      	cmp	r3, r2
 801bb52:	d019      	beq.n	801bb88 <HAL_GPIO_DeInit+0xa8>
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	4a5f      	ldr	r2, [pc, #380]	; (801bcd4 <HAL_GPIO_DeInit+0x1f4>)
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	d013      	beq.n	801bb84 <HAL_GPIO_DeInit+0xa4>
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	4a5e      	ldr	r2, [pc, #376]	; (801bcd8 <HAL_GPIO_DeInit+0x1f8>)
 801bb60:	4293      	cmp	r3, r2
 801bb62:	d00d      	beq.n	801bb80 <HAL_GPIO_DeInit+0xa0>
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	4a5d      	ldr	r2, [pc, #372]	; (801bcdc <HAL_GPIO_DeInit+0x1fc>)
 801bb68:	4293      	cmp	r3, r2
 801bb6a:	d007      	beq.n	801bb7c <HAL_GPIO_DeInit+0x9c>
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	4a5c      	ldr	r2, [pc, #368]	; (801bce0 <HAL_GPIO_DeInit+0x200>)
 801bb70:	4293      	cmp	r3, r2
 801bb72:	d101      	bne.n	801bb78 <HAL_GPIO_DeInit+0x98>
 801bb74:	2309      	movs	r3, #9
 801bb76:	e010      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb78:	230a      	movs	r3, #10
 801bb7a:	e00e      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb7c:	2307      	movs	r3, #7
 801bb7e:	e00c      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb80:	2306      	movs	r3, #6
 801bb82:	e00a      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb84:	2305      	movs	r3, #5
 801bb86:	e008      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb88:	2304      	movs	r3, #4
 801bb8a:	e006      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb8c:	2303      	movs	r3, #3
 801bb8e:	e004      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb90:	2302      	movs	r3, #2
 801bb92:	e002      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb94:	2301      	movs	r3, #1
 801bb96:	e000      	b.n	801bb9a <HAL_GPIO_DeInit+0xba>
 801bb98:	2300      	movs	r3, #0
 801bb9a:	697a      	ldr	r2, [r7, #20]
 801bb9c:	f002 0203 	and.w	r2, r2, #3
 801bba0:	0092      	lsls	r2, r2, #2
 801bba2:	4093      	lsls	r3, r2
 801bba4:	68ba      	ldr	r2, [r7, #8]
 801bba6:	429a      	cmp	r2, r3
 801bba8:	d136      	bne.n	801bc18 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801bbaa:	693b      	ldr	r3, [r7, #16]
 801bbac:	681a      	ldr	r2, [r3, #0]
 801bbae:	68fb      	ldr	r3, [r7, #12]
 801bbb0:	43db      	mvns	r3, r3
 801bbb2:	401a      	ands	r2, r3
 801bbb4:	693b      	ldr	r3, [r7, #16]
 801bbb6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 801bbb8:	693b      	ldr	r3, [r7, #16]
 801bbba:	685a      	ldr	r2, [r3, #4]
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	43db      	mvns	r3, r3
 801bbc0:	401a      	ands	r2, r3
 801bbc2:	693b      	ldr	r3, [r7, #16]
 801bbc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801bbc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bbca:	685a      	ldr	r2, [r3, #4]
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	43db      	mvns	r3, r3
 801bbd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bbd4:	4013      	ands	r3, r2
 801bbd6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801bbd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bbdc:	681a      	ldr	r2, [r3, #0]
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	43db      	mvns	r3, r3
 801bbe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bbe6:	4013      	ands	r3, r2
 801bbe8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 801bbea:	697b      	ldr	r3, [r7, #20]
 801bbec:	f003 0303 	and.w	r3, r3, #3
 801bbf0:	009b      	lsls	r3, r3, #2
 801bbf2:	220f      	movs	r2, #15
 801bbf4:	fa02 f303 	lsl.w	r3, r2, r3
 801bbf8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801bbfa:	4a30      	ldr	r2, [pc, #192]	; (801bcbc <HAL_GPIO_DeInit+0x1dc>)
 801bbfc:	697b      	ldr	r3, [r7, #20]
 801bbfe:	089b      	lsrs	r3, r3, #2
 801bc00:	3302      	adds	r3, #2
 801bc02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801bc06:	68bb      	ldr	r3, [r7, #8]
 801bc08:	43da      	mvns	r2, r3
 801bc0a:	482c      	ldr	r0, [pc, #176]	; (801bcbc <HAL_GPIO_DeInit+0x1dc>)
 801bc0c:	697b      	ldr	r3, [r7, #20]
 801bc0e:	089b      	lsrs	r3, r3, #2
 801bc10:	400a      	ands	r2, r1
 801bc12:	3302      	adds	r3, #2
 801bc14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	681a      	ldr	r2, [r3, #0]
 801bc1c:	697b      	ldr	r3, [r7, #20]
 801bc1e:	005b      	lsls	r3, r3, #1
 801bc20:	2103      	movs	r1, #3
 801bc22:	fa01 f303 	lsl.w	r3, r1, r3
 801bc26:	431a      	orrs	r2, r3
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 801bc2c:	697b      	ldr	r3, [r7, #20]
 801bc2e:	08da      	lsrs	r2, r3, #3
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	3208      	adds	r2, #8
 801bc34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bc38:	697b      	ldr	r3, [r7, #20]
 801bc3a:	f003 0307 	and.w	r3, r3, #7
 801bc3e:	009b      	lsls	r3, r3, #2
 801bc40:	220f      	movs	r2, #15
 801bc42:	fa02 f303 	lsl.w	r3, r2, r3
 801bc46:	43db      	mvns	r3, r3
 801bc48:	697a      	ldr	r2, [r7, #20]
 801bc4a:	08d2      	lsrs	r2, r2, #3
 801bc4c:	4019      	ands	r1, r3
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	3208      	adds	r2, #8
 801bc52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	68da      	ldr	r2, [r3, #12]
 801bc5a:	697b      	ldr	r3, [r7, #20]
 801bc5c:	005b      	lsls	r3, r3, #1
 801bc5e:	2103      	movs	r1, #3
 801bc60:	fa01 f303 	lsl.w	r3, r1, r3
 801bc64:	43db      	mvns	r3, r3
 801bc66:	401a      	ands	r2, r3
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	685a      	ldr	r2, [r3, #4]
 801bc70:	2101      	movs	r1, #1
 801bc72:	697b      	ldr	r3, [r7, #20]
 801bc74:	fa01 f303 	lsl.w	r3, r1, r3
 801bc78:	43db      	mvns	r3, r3
 801bc7a:	401a      	ands	r2, r3
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	689a      	ldr	r2, [r3, #8]
 801bc84:	697b      	ldr	r3, [r7, #20]
 801bc86:	005b      	lsls	r3, r3, #1
 801bc88:	2103      	movs	r1, #3
 801bc8a:	fa01 f303 	lsl.w	r3, r1, r3
 801bc8e:	43db      	mvns	r3, r3
 801bc90:	401a      	ands	r2, r3
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	609a      	str	r2, [r3, #8]
    }

    position++;
 801bc96:	697b      	ldr	r3, [r7, #20]
 801bc98:	3301      	adds	r3, #1
 801bc9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 801bc9c:	683a      	ldr	r2, [r7, #0]
 801bc9e:	697b      	ldr	r3, [r7, #20]
 801bca0:	fa22 f303 	lsr.w	r3, r2, r3
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	f47f af25 	bne.w	801baf4 <HAL_GPIO_DeInit+0x14>
  }
}
 801bcaa:	bf00      	nop
 801bcac:	bf00      	nop
 801bcae:	371c      	adds	r7, #28
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb6:	4770      	bx	lr
 801bcb8:	58000080 	.word	0x58000080
 801bcbc:	58000400 	.word	0x58000400
 801bcc0:	58020000 	.word	0x58020000
 801bcc4:	58020400 	.word	0x58020400
 801bcc8:	58020800 	.word	0x58020800
 801bccc:	58020c00 	.word	0x58020c00
 801bcd0:	58021000 	.word	0x58021000
 801bcd4:	58021400 	.word	0x58021400
 801bcd8:	58021800 	.word	0x58021800
 801bcdc:	58021c00 	.word	0x58021c00
 801bce0:	58022400 	.word	0x58022400

0801bce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801bce4:	b480      	push	{r7}
 801bce6:	b085      	sub	sp, #20
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	6078      	str	r0, [r7, #4]
 801bcec:	460b      	mov	r3, r1
 801bcee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	691a      	ldr	r2, [r3, #16]
 801bcf4:	887b      	ldrh	r3, [r7, #2]
 801bcf6:	4013      	ands	r3, r2
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d002      	beq.n	801bd02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801bcfc:	2301      	movs	r3, #1
 801bcfe:	73fb      	strb	r3, [r7, #15]
 801bd00:	e001      	b.n	801bd06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801bd02:	2300      	movs	r3, #0
 801bd04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801bd06:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd08:	4618      	mov	r0, r3
 801bd0a:	3714      	adds	r7, #20
 801bd0c:	46bd      	mov	sp, r7
 801bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd12:	4770      	bx	lr

0801bd14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801bd14:	b480      	push	{r7}
 801bd16:	b083      	sub	sp, #12
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	6078      	str	r0, [r7, #4]
 801bd1c:	460b      	mov	r3, r1
 801bd1e:	807b      	strh	r3, [r7, #2]
 801bd20:	4613      	mov	r3, r2
 801bd22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801bd24:	787b      	ldrb	r3, [r7, #1]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d003      	beq.n	801bd32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801bd2a:	887a      	ldrh	r2, [r7, #2]
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801bd30:	e003      	b.n	801bd3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801bd32:	887b      	ldrh	r3, [r7, #2]
 801bd34:	041a      	lsls	r2, r3, #16
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	619a      	str	r2, [r3, #24]
}
 801bd3a:	bf00      	nop
 801bd3c:	370c      	adds	r7, #12
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd44:	4770      	bx	lr

0801bd46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801bd46:	b480      	push	{r7}
 801bd48:	b085      	sub	sp, #20
 801bd4a:	af00      	add	r7, sp, #0
 801bd4c:	6078      	str	r0, [r7, #4]
 801bd4e:	460b      	mov	r3, r1
 801bd50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	695b      	ldr	r3, [r3, #20]
 801bd56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801bd58:	887a      	ldrh	r2, [r7, #2]
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	4013      	ands	r3, r2
 801bd5e:	041a      	lsls	r2, r3, #16
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	43d9      	mvns	r1, r3
 801bd64:	887b      	ldrh	r3, [r7, #2]
 801bd66:	400b      	ands	r3, r1
 801bd68:	431a      	orrs	r2, r3
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	619a      	str	r2, [r3, #24]
}
 801bd6e:	bf00      	nop
 801bd70:	3714      	adds	r7, #20
 801bd72:	46bd      	mov	sp, r7
 801bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd78:	4770      	bx	lr

0801bd7a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801bd7a:	b580      	push	{r7, lr}
 801bd7c:	b082      	sub	sp, #8
 801bd7e:	af00      	add	r7, sp, #0
 801bd80:	4603      	mov	r3, r0
 801bd82:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 801bd84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bd88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801bd8c:	88fb      	ldrh	r3, [r7, #6]
 801bd8e:	4013      	ands	r3, r2
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d008      	beq.n	801bda6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801bd94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bd98:	88fb      	ldrh	r3, [r7, #6]
 801bd9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801bd9e:	88fb      	ldrh	r3, [r7, #6]
 801bda0:	4618      	mov	r0, r3
 801bda2:	f7e5 fbb3 	bl	800150c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 801bda6:	bf00      	nop
 801bda8:	3708      	adds	r7, #8
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd80      	pop	{r7, pc}
	...

0801bdb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b082      	sub	sp, #8
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d101      	bne.n	801bdc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801bdbe:	2301      	movs	r3, #1
 801bdc0:	e07f      	b.n	801bec2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801bdc8:	b2db      	uxtb	r3, r3
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d106      	bne.n	801bddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801bdd6:	6878      	ldr	r0, [r7, #4]
 801bdd8:	f7f0 fb02 	bl	800c3e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	2224      	movs	r2, #36	; 0x24
 801bde0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	681a      	ldr	r2, [r3, #0]
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	f022 0201 	bic.w	r2, r2, #1
 801bdf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	685a      	ldr	r2, [r3, #4]
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801be00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	689a      	ldr	r2, [r3, #8]
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801be10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	68db      	ldr	r3, [r3, #12]
 801be16:	2b01      	cmp	r3, #1
 801be18:	d107      	bne.n	801be2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	689a      	ldr	r2, [r3, #8]
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801be26:	609a      	str	r2, [r3, #8]
 801be28:	e006      	b.n	801be38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	689a      	ldr	r2, [r3, #8]
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801be36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	68db      	ldr	r3, [r3, #12]
 801be3c:	2b02      	cmp	r3, #2
 801be3e:	d104      	bne.n	801be4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801be48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	6859      	ldr	r1, [r3, #4]
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	681a      	ldr	r2, [r3, #0]
 801be54:	4b1d      	ldr	r3, [pc, #116]	; (801becc <HAL_I2C_Init+0x11c>)
 801be56:	430b      	orrs	r3, r1
 801be58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	68da      	ldr	r2, [r3, #12]
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801be68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	691a      	ldr	r2, [r3, #16]
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	695b      	ldr	r3, [r3, #20]
 801be72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	699b      	ldr	r3, [r3, #24]
 801be7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	430a      	orrs	r2, r1
 801be82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	69d9      	ldr	r1, [r3, #28]
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	6a1a      	ldr	r2, [r3, #32]
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	430a      	orrs	r2, r1
 801be92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	681a      	ldr	r2, [r3, #0]
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	f042 0201 	orr.w	r2, r2, #1
 801bea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	2200      	movs	r2, #0
 801bea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	2220      	movs	r2, #32
 801beae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	2200      	movs	r2, #0
 801beb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	2200      	movs	r2, #0
 801bebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801bec0:	2300      	movs	r3, #0
}
 801bec2:	4618      	mov	r0, r3
 801bec4:	3708      	adds	r7, #8
 801bec6:	46bd      	mov	sp, r7
 801bec8:	bd80      	pop	{r7, pc}
 801beca:	bf00      	nop
 801becc:	02008000 	.word	0x02008000

0801bed0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801bed0:	b580      	push	{r7, lr}
 801bed2:	b088      	sub	sp, #32
 801bed4:	af02      	add	r7, sp, #8
 801bed6:	60f8      	str	r0, [r7, #12]
 801bed8:	607a      	str	r2, [r7, #4]
 801beda:	461a      	mov	r2, r3
 801bedc:	460b      	mov	r3, r1
 801bede:	817b      	strh	r3, [r7, #10]
 801bee0:	4613      	mov	r3, r2
 801bee2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801beea:	b2db      	uxtb	r3, r3
 801beec:	2b20      	cmp	r3, #32
 801beee:	f040 80da 	bne.w	801c0a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bef8:	2b01      	cmp	r3, #1
 801befa:	d101      	bne.n	801bf00 <HAL_I2C_Master_Transmit+0x30>
 801befc:	2302      	movs	r3, #2
 801befe:	e0d3      	b.n	801c0a8 <HAL_I2C_Master_Transmit+0x1d8>
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	2201      	movs	r2, #1
 801bf04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801bf08:	f7fa faf2 	bl	80164f0 <HAL_GetTick>
 801bf0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801bf0e:	697b      	ldr	r3, [r7, #20]
 801bf10:	9300      	str	r3, [sp, #0]
 801bf12:	2319      	movs	r3, #25
 801bf14:	2201      	movs	r2, #1
 801bf16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801bf1a:	68f8      	ldr	r0, [r7, #12]
 801bf1c:	f001 fe6f 	bl	801dbfe <I2C_WaitOnFlagUntilTimeout>
 801bf20:	4603      	mov	r3, r0
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d001      	beq.n	801bf2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 801bf26:	2301      	movs	r3, #1
 801bf28:	e0be      	b.n	801c0a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801bf2a:	68fb      	ldr	r3, [r7, #12]
 801bf2c:	2221      	movs	r2, #33	; 0x21
 801bf2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	2210      	movs	r2, #16
 801bf36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bf3a:	68fb      	ldr	r3, [r7, #12]
 801bf3c:	2200      	movs	r2, #0
 801bf3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	687a      	ldr	r2, [r7, #4]
 801bf44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	893a      	ldrh	r2, [r7, #8]
 801bf4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bf56:	b29b      	uxth	r3, r3
 801bf58:	2bff      	cmp	r3, #255	; 0xff
 801bf5a:	d90e      	bls.n	801bf7a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	22ff      	movs	r2, #255	; 0xff
 801bf60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bf66:	b2da      	uxtb	r2, r3
 801bf68:	8979      	ldrh	r1, [r7, #10]
 801bf6a:	4b51      	ldr	r3, [pc, #324]	; (801c0b0 <HAL_I2C_Master_Transmit+0x1e0>)
 801bf6c:	9300      	str	r3, [sp, #0]
 801bf6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801bf72:	68f8      	ldr	r0, [r7, #12]
 801bf74:	f002 f866 	bl	801e044 <I2C_TransferConfig>
 801bf78:	e06c      	b.n	801c054 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bf7e:	b29a      	uxth	r2, r3
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bf88:	b2da      	uxtb	r2, r3
 801bf8a:	8979      	ldrh	r1, [r7, #10]
 801bf8c:	4b48      	ldr	r3, [pc, #288]	; (801c0b0 <HAL_I2C_Master_Transmit+0x1e0>)
 801bf8e:	9300      	str	r3, [sp, #0]
 801bf90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801bf94:	68f8      	ldr	r0, [r7, #12]
 801bf96:	f002 f855 	bl	801e044 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801bf9a:	e05b      	b.n	801c054 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801bf9c:	697a      	ldr	r2, [r7, #20]
 801bf9e:	6a39      	ldr	r1, [r7, #32]
 801bfa0:	68f8      	ldr	r0, [r7, #12]
 801bfa2:	f001 fe6c 	bl	801dc7e <I2C_WaitOnTXISFlagUntilTimeout>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d001      	beq.n	801bfb0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 801bfac:	2301      	movs	r3, #1
 801bfae:	e07b      	b.n	801c0a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801bfb0:	68fb      	ldr	r3, [r7, #12]
 801bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfb4:	781a      	ldrb	r2, [r3, #0]
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801bfbc:	68fb      	ldr	r3, [r7, #12]
 801bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfc0:	1c5a      	adds	r2, r3, #1
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bfca:	b29b      	uxth	r3, r3
 801bfcc:	3b01      	subs	r3, #1
 801bfce:	b29a      	uxth	r2, r3
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bfd8:	3b01      	subs	r3, #1
 801bfda:	b29a      	uxth	r2, r3
 801bfdc:	68fb      	ldr	r3, [r7, #12]
 801bfde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bfe4:	b29b      	uxth	r3, r3
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d034      	beq.n	801c054 <HAL_I2C_Master_Transmit+0x184>
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d130      	bne.n	801c054 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801bff2:	697b      	ldr	r3, [r7, #20]
 801bff4:	9300      	str	r3, [sp, #0]
 801bff6:	6a3b      	ldr	r3, [r7, #32]
 801bff8:	2200      	movs	r2, #0
 801bffa:	2180      	movs	r1, #128	; 0x80
 801bffc:	68f8      	ldr	r0, [r7, #12]
 801bffe:	f001 fdfe 	bl	801dbfe <I2C_WaitOnFlagUntilTimeout>
 801c002:	4603      	mov	r3, r0
 801c004:	2b00      	cmp	r3, #0
 801c006:	d001      	beq.n	801c00c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 801c008:	2301      	movs	r3, #1
 801c00a:	e04d      	b.n	801c0a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c010:	b29b      	uxth	r3, r3
 801c012:	2bff      	cmp	r3, #255	; 0xff
 801c014:	d90e      	bls.n	801c034 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	22ff      	movs	r2, #255	; 0xff
 801c01a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c020:	b2da      	uxtb	r2, r3
 801c022:	8979      	ldrh	r1, [r7, #10]
 801c024:	2300      	movs	r3, #0
 801c026:	9300      	str	r3, [sp, #0]
 801c028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c02c:	68f8      	ldr	r0, [r7, #12]
 801c02e:	f002 f809 	bl	801e044 <I2C_TransferConfig>
 801c032:	e00f      	b.n	801c054 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c038:	b29a      	uxth	r2, r3
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c042:	b2da      	uxtb	r2, r3
 801c044:	8979      	ldrh	r1, [r7, #10]
 801c046:	2300      	movs	r3, #0
 801c048:	9300      	str	r3, [sp, #0]
 801c04a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c04e:	68f8      	ldr	r0, [r7, #12]
 801c050:	f001 fff8 	bl	801e044 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c058:	b29b      	uxth	r3, r3
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d19e      	bne.n	801bf9c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c05e:	697a      	ldr	r2, [r7, #20]
 801c060:	6a39      	ldr	r1, [r7, #32]
 801c062:	68f8      	ldr	r0, [r7, #12]
 801c064:	f001 fe4b 	bl	801dcfe <I2C_WaitOnSTOPFlagUntilTimeout>
 801c068:	4603      	mov	r3, r0
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d001      	beq.n	801c072 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 801c06e:	2301      	movs	r3, #1
 801c070:	e01a      	b.n	801c0a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	2220      	movs	r2, #32
 801c078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	6859      	ldr	r1, [r3, #4]
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	681a      	ldr	r2, [r3, #0]
 801c084:	4b0b      	ldr	r3, [pc, #44]	; (801c0b4 <HAL_I2C_Master_Transmit+0x1e4>)
 801c086:	400b      	ands	r3, r1
 801c088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	2220      	movs	r2, #32
 801c08e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	2200      	movs	r2, #0
 801c096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	2200      	movs	r2, #0
 801c09e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	e000      	b.n	801c0a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 801c0a6:	2302      	movs	r3, #2
  }
}
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	3718      	adds	r7, #24
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bd80      	pop	{r7, pc}
 801c0b0:	80002000 	.word	0x80002000
 801c0b4:	fe00e800 	.word	0xfe00e800

0801c0b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801c0b8:	b580      	push	{r7, lr}
 801c0ba:	b088      	sub	sp, #32
 801c0bc:	af02      	add	r7, sp, #8
 801c0be:	60f8      	str	r0, [r7, #12]
 801c0c0:	607a      	str	r2, [r7, #4]
 801c0c2:	461a      	mov	r2, r3
 801c0c4:	460b      	mov	r3, r1
 801c0c6:	817b      	strh	r3, [r7, #10]
 801c0c8:	4613      	mov	r3, r2
 801c0ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c0d2:	b2db      	uxtb	r3, r3
 801c0d4:	2b20      	cmp	r3, #32
 801c0d6:	f040 80db 	bne.w	801c290 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c0e0:	2b01      	cmp	r3, #1
 801c0e2:	d101      	bne.n	801c0e8 <HAL_I2C_Master_Receive+0x30>
 801c0e4:	2302      	movs	r3, #2
 801c0e6:	e0d4      	b.n	801c292 <HAL_I2C_Master_Receive+0x1da>
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	2201      	movs	r2, #1
 801c0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801c0f0:	f7fa f9fe 	bl	80164f0 <HAL_GetTick>
 801c0f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801c0f6:	697b      	ldr	r3, [r7, #20]
 801c0f8:	9300      	str	r3, [sp, #0]
 801c0fa:	2319      	movs	r3, #25
 801c0fc:	2201      	movs	r2, #1
 801c0fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c102:	68f8      	ldr	r0, [r7, #12]
 801c104:	f001 fd7b 	bl	801dbfe <I2C_WaitOnFlagUntilTimeout>
 801c108:	4603      	mov	r3, r0
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d001      	beq.n	801c112 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801c10e:	2301      	movs	r3, #1
 801c110:	e0bf      	b.n	801c292 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	2222      	movs	r2, #34	; 0x22
 801c116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	2210      	movs	r2, #16
 801c11e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	2200      	movs	r2, #0
 801c126:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	687a      	ldr	r2, [r7, #4]
 801c12c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	893a      	ldrh	r2, [r7, #8]
 801c132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	2200      	movs	r2, #0
 801c138:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c13e:	b29b      	uxth	r3, r3
 801c140:	2bff      	cmp	r3, #255	; 0xff
 801c142:	d90e      	bls.n	801c162 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	22ff      	movs	r2, #255	; 0xff
 801c148:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c14e:	b2da      	uxtb	r2, r3
 801c150:	8979      	ldrh	r1, [r7, #10]
 801c152:	4b52      	ldr	r3, [pc, #328]	; (801c29c <HAL_I2C_Master_Receive+0x1e4>)
 801c154:	9300      	str	r3, [sp, #0]
 801c156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c15a:	68f8      	ldr	r0, [r7, #12]
 801c15c:	f001 ff72 	bl	801e044 <I2C_TransferConfig>
 801c160:	e06d      	b.n	801c23e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c166:	b29a      	uxth	r2, r3
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c170:	b2da      	uxtb	r2, r3
 801c172:	8979      	ldrh	r1, [r7, #10]
 801c174:	4b49      	ldr	r3, [pc, #292]	; (801c29c <HAL_I2C_Master_Receive+0x1e4>)
 801c176:	9300      	str	r3, [sp, #0]
 801c178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c17c:	68f8      	ldr	r0, [r7, #12]
 801c17e:	f001 ff61 	bl	801e044 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801c182:	e05c      	b.n	801c23e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c184:	697a      	ldr	r2, [r7, #20]
 801c186:	6a39      	ldr	r1, [r7, #32]
 801c188:	68f8      	ldr	r0, [r7, #12]
 801c18a:	f001 fdf5 	bl	801dd78 <I2C_WaitOnRXNEFlagUntilTimeout>
 801c18e:	4603      	mov	r3, r0
 801c190:	2b00      	cmp	r3, #0
 801c192:	d001      	beq.n	801c198 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 801c194:	2301      	movs	r3, #1
 801c196:	e07c      	b.n	801c292 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1a2:	b2d2      	uxtb	r2, r2
 801c1a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1aa:	1c5a      	adds	r2, r3, #1
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c1b4:	3b01      	subs	r3, #1
 801c1b6:	b29a      	uxth	r2, r3
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c1c0:	b29b      	uxth	r3, r3
 801c1c2:	3b01      	subs	r3, #1
 801c1c4:	b29a      	uxth	r2, r3
 801c1c6:	68fb      	ldr	r3, [r7, #12]
 801c1c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c1ce:	b29b      	uxth	r3, r3
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d034      	beq.n	801c23e <HAL_I2C_Master_Receive+0x186>
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d130      	bne.n	801c23e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801c1dc:	697b      	ldr	r3, [r7, #20]
 801c1de:	9300      	str	r3, [sp, #0]
 801c1e0:	6a3b      	ldr	r3, [r7, #32]
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	2180      	movs	r1, #128	; 0x80
 801c1e6:	68f8      	ldr	r0, [r7, #12]
 801c1e8:	f001 fd09 	bl	801dbfe <I2C_WaitOnFlagUntilTimeout>
 801c1ec:	4603      	mov	r3, r0
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d001      	beq.n	801c1f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801c1f2:	2301      	movs	r3, #1
 801c1f4:	e04d      	b.n	801c292 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c1fa:	b29b      	uxth	r3, r3
 801c1fc:	2bff      	cmp	r3, #255	; 0xff
 801c1fe:	d90e      	bls.n	801c21e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	22ff      	movs	r2, #255	; 0xff
 801c204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c20a:	b2da      	uxtb	r2, r3
 801c20c:	8979      	ldrh	r1, [r7, #10]
 801c20e:	2300      	movs	r3, #0
 801c210:	9300      	str	r3, [sp, #0]
 801c212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c216:	68f8      	ldr	r0, [r7, #12]
 801c218:	f001 ff14 	bl	801e044 <I2C_TransferConfig>
 801c21c:	e00f      	b.n	801c23e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c222:	b29a      	uxth	r2, r3
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c22c:	b2da      	uxtb	r2, r3
 801c22e:	8979      	ldrh	r1, [r7, #10]
 801c230:	2300      	movs	r3, #0
 801c232:	9300      	str	r3, [sp, #0]
 801c234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c238:	68f8      	ldr	r0, [r7, #12]
 801c23a:	f001 ff03 	bl	801e044 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c242:	b29b      	uxth	r3, r3
 801c244:	2b00      	cmp	r3, #0
 801c246:	d19d      	bne.n	801c184 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c248:	697a      	ldr	r2, [r7, #20]
 801c24a:	6a39      	ldr	r1, [r7, #32]
 801c24c:	68f8      	ldr	r0, [r7, #12]
 801c24e:	f001 fd56 	bl	801dcfe <I2C_WaitOnSTOPFlagUntilTimeout>
 801c252:	4603      	mov	r3, r0
 801c254:	2b00      	cmp	r3, #0
 801c256:	d001      	beq.n	801c25c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 801c258:	2301      	movs	r3, #1
 801c25a:	e01a      	b.n	801c292 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	2220      	movs	r2, #32
 801c262:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c264:	68fb      	ldr	r3, [r7, #12]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	6859      	ldr	r1, [r3, #4]
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	681a      	ldr	r2, [r3, #0]
 801c26e:	4b0c      	ldr	r3, [pc, #48]	; (801c2a0 <HAL_I2C_Master_Receive+0x1e8>)
 801c270:	400b      	ands	r3, r1
 801c272:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	2220      	movs	r2, #32
 801c278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	2200      	movs	r2, #0
 801c280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	2200      	movs	r2, #0
 801c288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c28c:	2300      	movs	r3, #0
 801c28e:	e000      	b.n	801c292 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 801c290:	2302      	movs	r3, #2
  }
}
 801c292:	4618      	mov	r0, r3
 801c294:	3718      	adds	r7, #24
 801c296:	46bd      	mov	sp, r7
 801c298:	bd80      	pop	{r7, pc}
 801c29a:	bf00      	nop
 801c29c:	80002400 	.word	0x80002400
 801c2a0:	fe00e800 	.word	0xfe00e800

0801c2a4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 801c2a4:	b580      	push	{r7, lr}
 801c2a6:	b088      	sub	sp, #32
 801c2a8:	af02      	add	r7, sp, #8
 801c2aa:	60f8      	str	r0, [r7, #12]
 801c2ac:	607a      	str	r2, [r7, #4]
 801c2ae:	461a      	mov	r2, r3
 801c2b0:	460b      	mov	r3, r1
 801c2b2:	817b      	strh	r3, [r7, #10]
 801c2b4:	4613      	mov	r3, r2
 801c2b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c2be:	b2db      	uxtb	r3, r3
 801c2c0:	2b20      	cmp	r3, #32
 801c2c2:	d153      	bne.n	801c36c <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	699b      	ldr	r3, [r3, #24]
 801c2ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c2ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c2d2:	d101      	bne.n	801c2d8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 801c2d4:	2302      	movs	r3, #2
 801c2d6:	e04a      	b.n	801c36e <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c2de:	2b01      	cmp	r3, #1
 801c2e0:	d101      	bne.n	801c2e6 <HAL_I2C_Master_Transmit_IT+0x42>
 801c2e2:	2302      	movs	r3, #2
 801c2e4:	e043      	b.n	801c36e <HAL_I2C_Master_Transmit_IT+0xca>
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	2201      	movs	r2, #1
 801c2ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	2221      	movs	r2, #33	; 0x21
 801c2f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	2210      	movs	r2, #16
 801c2fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801c2fe:	68fb      	ldr	r3, [r7, #12]
 801c300:	2200      	movs	r2, #0
 801c302:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	687a      	ldr	r2, [r7, #4]
 801c308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	893a      	ldrh	r2, [r7, #8]
 801c30e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801c310:	68fb      	ldr	r3, [r7, #12]
 801c312:	4a19      	ldr	r2, [pc, #100]	; (801c378 <HAL_I2C_Master_Transmit_IT+0xd4>)
 801c314:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	4a18      	ldr	r2, [pc, #96]	; (801c37c <HAL_I2C_Master_Transmit_IT+0xd8>)
 801c31a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c320:	b29b      	uxth	r3, r3
 801c322:	2bff      	cmp	r3, #255	; 0xff
 801c324:	d906      	bls.n	801c334 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	22ff      	movs	r2, #255	; 0xff
 801c32a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 801c32c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c330:	617b      	str	r3, [r7, #20]
 801c332:	e007      	b.n	801c344 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c338:	b29a      	uxth	r2, r3
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 801c33e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c342:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c348:	b2da      	uxtb	r2, r3
 801c34a:	8979      	ldrh	r1, [r7, #10]
 801c34c:	4b0c      	ldr	r3, [pc, #48]	; (801c380 <HAL_I2C_Master_Transmit_IT+0xdc>)
 801c34e:	9300      	str	r3, [sp, #0]
 801c350:	697b      	ldr	r3, [r7, #20]
 801c352:	68f8      	ldr	r0, [r7, #12]
 801c354:	f001 fe76 	bl	801e044 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	2200      	movs	r2, #0
 801c35c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801c360:	2101      	movs	r1, #1
 801c362:	68f8      	ldr	r0, [r7, #12]
 801c364:	f001 fea0 	bl	801e0a8 <I2C_Enable_IRQ>

    return HAL_OK;
 801c368:	2300      	movs	r3, #0
 801c36a:	e000      	b.n	801c36e <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 801c36c:	2302      	movs	r3, #2
  }
}
 801c36e:	4618      	mov	r0, r3
 801c370:	3718      	adds	r7, #24
 801c372:	46bd      	mov	sp, r7
 801c374:	bd80      	pop	{r7, pc}
 801c376:	bf00      	nop
 801c378:	ffff0000 	.word	0xffff0000
 801c37c:	0801c71f 	.word	0x0801c71f
 801c380:	80002000 	.word	0x80002000

0801c384 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 801c384:	b580      	push	{r7, lr}
 801c386:	b08a      	sub	sp, #40	; 0x28
 801c388:	af02      	add	r7, sp, #8
 801c38a:	60f8      	str	r0, [r7, #12]
 801c38c:	607a      	str	r2, [r7, #4]
 801c38e:	603b      	str	r3, [r7, #0]
 801c390:	460b      	mov	r3, r1
 801c392:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 801c394:	2300      	movs	r3, #0
 801c396:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c398:	68fb      	ldr	r3, [r7, #12]
 801c39a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c39e:	b2db      	uxtb	r3, r3
 801c3a0:	2b20      	cmp	r3, #32
 801c3a2:	f040 80ef 	bne.w	801c584 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	699b      	ldr	r3, [r3, #24]
 801c3ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c3b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c3b4:	d101      	bne.n	801c3ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 801c3b6:	2302      	movs	r3, #2
 801c3b8:	e0e5      	b.n	801c586 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c3c0:	2b01      	cmp	r3, #1
 801c3c2:	d101      	bne.n	801c3c8 <HAL_I2C_IsDeviceReady+0x44>
 801c3c4:	2302      	movs	r3, #2
 801c3c6:	e0de      	b.n	801c586 <HAL_I2C_IsDeviceReady+0x202>
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	2201      	movs	r2, #1
 801c3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	2224      	movs	r2, #36	; 0x24
 801c3d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	2200      	movs	r2, #0
 801c3dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	68db      	ldr	r3, [r3, #12]
 801c3e2:	2b01      	cmp	r3, #1
 801c3e4:	d105      	bne.n	801c3f2 <HAL_I2C_IsDeviceReady+0x6e>
 801c3e6:	897b      	ldrh	r3, [r7, #10]
 801c3e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801c3ec:	4b68      	ldr	r3, [pc, #416]	; (801c590 <HAL_I2C_IsDeviceReady+0x20c>)
 801c3ee:	4313      	orrs	r3, r2
 801c3f0:	e004      	b.n	801c3fc <HAL_I2C_IsDeviceReady+0x78>
 801c3f2:	897b      	ldrh	r3, [r7, #10]
 801c3f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c3f8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 801c3fc:	68fa      	ldr	r2, [r7, #12]
 801c3fe:	6812      	ldr	r2, [r2, #0]
 801c400:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 801c402:	f7fa f875 	bl	80164f0 <HAL_GetTick>
 801c406:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	699b      	ldr	r3, [r3, #24]
 801c40e:	f003 0320 	and.w	r3, r3, #32
 801c412:	2b20      	cmp	r3, #32
 801c414:	bf0c      	ite	eq
 801c416:	2301      	moveq	r3, #1
 801c418:	2300      	movne	r3, #0
 801c41a:	b2db      	uxtb	r3, r3
 801c41c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	699b      	ldr	r3, [r3, #24]
 801c424:	f003 0310 	and.w	r3, r3, #16
 801c428:	2b10      	cmp	r3, #16
 801c42a:	bf0c      	ite	eq
 801c42c:	2301      	moveq	r3, #1
 801c42e:	2300      	movne	r3, #0
 801c430:	b2db      	uxtb	r3, r3
 801c432:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 801c434:	e034      	b.n	801c4a0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 801c436:	683b      	ldr	r3, [r7, #0]
 801c438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c43c:	d01a      	beq.n	801c474 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801c43e:	f7fa f857 	bl	80164f0 <HAL_GetTick>
 801c442:	4602      	mov	r2, r0
 801c444:	69bb      	ldr	r3, [r7, #24]
 801c446:	1ad3      	subs	r3, r2, r3
 801c448:	683a      	ldr	r2, [r7, #0]
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d302      	bcc.n	801c454 <HAL_I2C_IsDeviceReady+0xd0>
 801c44e:	683b      	ldr	r3, [r7, #0]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d10f      	bne.n	801c474 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	2220      	movs	r2, #32
 801c458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c460:	f043 0220 	orr.w	r2, r3, #32
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	2200      	movs	r2, #0
 801c46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 801c470:	2301      	movs	r3, #1
 801c472:	e088      	b.n	801c586 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	699b      	ldr	r3, [r3, #24]
 801c47a:	f003 0320 	and.w	r3, r3, #32
 801c47e:	2b20      	cmp	r3, #32
 801c480:	bf0c      	ite	eq
 801c482:	2301      	moveq	r3, #1
 801c484:	2300      	movne	r3, #0
 801c486:	b2db      	uxtb	r3, r3
 801c488:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	699b      	ldr	r3, [r3, #24]
 801c490:	f003 0310 	and.w	r3, r3, #16
 801c494:	2b10      	cmp	r3, #16
 801c496:	bf0c      	ite	eq
 801c498:	2301      	moveq	r3, #1
 801c49a:	2300      	movne	r3, #0
 801c49c:	b2db      	uxtb	r3, r3
 801c49e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 801c4a0:	7ffb      	ldrb	r3, [r7, #31]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d102      	bne.n	801c4ac <HAL_I2C_IsDeviceReady+0x128>
 801c4a6:	7fbb      	ldrb	r3, [r7, #30]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d0c4      	beq.n	801c436 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	699b      	ldr	r3, [r3, #24]
 801c4b2:	f003 0310 	and.w	r3, r3, #16
 801c4b6:	2b10      	cmp	r3, #16
 801c4b8:	d01a      	beq.n	801c4f0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801c4ba:	69bb      	ldr	r3, [r7, #24]
 801c4bc:	9300      	str	r3, [sp, #0]
 801c4be:	683b      	ldr	r3, [r7, #0]
 801c4c0:	2200      	movs	r2, #0
 801c4c2:	2120      	movs	r1, #32
 801c4c4:	68f8      	ldr	r0, [r7, #12]
 801c4c6:	f001 fb9a 	bl	801dbfe <I2C_WaitOnFlagUntilTimeout>
 801c4ca:	4603      	mov	r3, r0
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d001      	beq.n	801c4d4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 801c4d0:	2301      	movs	r3, #1
 801c4d2:	e058      	b.n	801c586 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	2220      	movs	r2, #32
 801c4da:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	2220      	movs	r2, #32
 801c4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	e04a      	b.n	801c586 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801c4f0:	69bb      	ldr	r3, [r7, #24]
 801c4f2:	9300      	str	r3, [sp, #0]
 801c4f4:	683b      	ldr	r3, [r7, #0]
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	2120      	movs	r1, #32
 801c4fa:	68f8      	ldr	r0, [r7, #12]
 801c4fc:	f001 fb7f 	bl	801dbfe <I2C_WaitOnFlagUntilTimeout>
 801c500:	4603      	mov	r3, r0
 801c502:	2b00      	cmp	r3, #0
 801c504:	d001      	beq.n	801c50a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 801c506:	2301      	movs	r3, #1
 801c508:	e03d      	b.n	801c586 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	2210      	movs	r2, #16
 801c510:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	2220      	movs	r2, #32
 801c518:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 801c51a:	697b      	ldr	r3, [r7, #20]
 801c51c:	687a      	ldr	r2, [r7, #4]
 801c51e:	429a      	cmp	r2, r3
 801c520:	d118      	bne.n	801c554 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	685a      	ldr	r2, [r3, #4]
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c530:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801c532:	69bb      	ldr	r3, [r7, #24]
 801c534:	9300      	str	r3, [sp, #0]
 801c536:	683b      	ldr	r3, [r7, #0]
 801c538:	2200      	movs	r2, #0
 801c53a:	2120      	movs	r1, #32
 801c53c:	68f8      	ldr	r0, [r7, #12]
 801c53e:	f001 fb5e 	bl	801dbfe <I2C_WaitOnFlagUntilTimeout>
 801c542:	4603      	mov	r3, r0
 801c544:	2b00      	cmp	r3, #0
 801c546:	d001      	beq.n	801c54c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 801c548:	2301      	movs	r3, #1
 801c54a:	e01c      	b.n	801c586 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	2220      	movs	r2, #32
 801c552:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 801c554:	697b      	ldr	r3, [r7, #20]
 801c556:	3301      	adds	r3, #1
 801c558:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 801c55a:	697b      	ldr	r3, [r7, #20]
 801c55c:	687a      	ldr	r2, [r7, #4]
 801c55e:	429a      	cmp	r2, r3
 801c560:	f63f af3d 	bhi.w	801c3de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	2220      	movs	r2, #32
 801c568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c570:	f043 0220 	orr.w	r2, r3, #32
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	2200      	movs	r2, #0
 801c57c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801c580:	2301      	movs	r3, #1
 801c582:	e000      	b.n	801c586 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 801c584:	2302      	movs	r3, #2
  }
}
 801c586:	4618      	mov	r0, r3
 801c588:	3720      	adds	r7, #32
 801c58a:	46bd      	mov	sp, r7
 801c58c:	bd80      	pop	{r7, pc}
 801c58e:	bf00      	nop
 801c590:	02002000 	.word	0x02002000

0801c594 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b084      	sub	sp, #16
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	699b      	ldr	r3, [r3, #24]
 801c5a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d005      	beq.n	801c5c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5b8:	68ba      	ldr	r2, [r7, #8]
 801c5ba:	68f9      	ldr	r1, [r7, #12]
 801c5bc:	6878      	ldr	r0, [r7, #4]
 801c5be:	4798      	blx	r3
  }
}
 801c5c0:	bf00      	nop
 801c5c2:	3710      	adds	r7, #16
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bd80      	pop	{r7, pc}

0801c5c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b086      	sub	sp, #24
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	699b      	ldr	r3, [r3, #24]
 801c5d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801c5e0:	697b      	ldr	r3, [r7, #20]
 801c5e2:	0a1b      	lsrs	r3, r3, #8
 801c5e4:	f003 0301 	and.w	r3, r3, #1
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d010      	beq.n	801c60e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801c5ec:	693b      	ldr	r3, [r7, #16]
 801c5ee:	09db      	lsrs	r3, r3, #7
 801c5f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d00a      	beq.n	801c60e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c5fc:	f043 0201 	orr.w	r2, r3, #1
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c60c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 801c60e:	697b      	ldr	r3, [r7, #20]
 801c610:	0a9b      	lsrs	r3, r3, #10
 801c612:	f003 0301 	and.w	r3, r3, #1
 801c616:	2b00      	cmp	r3, #0
 801c618:	d010      	beq.n	801c63c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801c61a:	693b      	ldr	r3, [r7, #16]
 801c61c:	09db      	lsrs	r3, r3, #7
 801c61e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 801c622:	2b00      	cmp	r3, #0
 801c624:	d00a      	beq.n	801c63c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c62a:	f043 0208 	orr.w	r2, r3, #8
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c63a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801c63c:	697b      	ldr	r3, [r7, #20]
 801c63e:	0a5b      	lsrs	r3, r3, #9
 801c640:	f003 0301 	and.w	r3, r3, #1
 801c644:	2b00      	cmp	r3, #0
 801c646:	d010      	beq.n	801c66a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801c648:	693b      	ldr	r3, [r7, #16]
 801c64a:	09db      	lsrs	r3, r3, #7
 801c64c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801c650:	2b00      	cmp	r3, #0
 801c652:	d00a      	beq.n	801c66a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c658:	f043 0202 	orr.w	r2, r3, #2
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c668:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c66e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	f003 030b 	and.w	r3, r3, #11
 801c676:	2b00      	cmp	r3, #0
 801c678:	d003      	beq.n	801c682 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 801c67a:	68f9      	ldr	r1, [r7, #12]
 801c67c:	6878      	ldr	r0, [r7, #4]
 801c67e:	f001 f985 	bl	801d98c <I2C_ITError>
  }
}
 801c682:	bf00      	nop
 801c684:	3718      	adds	r7, #24
 801c686:	46bd      	mov	sp, r7
 801c688:	bd80      	pop	{r7, pc}

0801c68a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801c68a:	b480      	push	{r7}
 801c68c:	b083      	sub	sp, #12
 801c68e:	af00      	add	r7, sp, #0
 801c690:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801c692:	bf00      	nop
 801c694:	370c      	adds	r7, #12
 801c696:	46bd      	mov	sp, r7
 801c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c69c:	4770      	bx	lr

0801c69e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801c69e:	b480      	push	{r7}
 801c6a0:	b083      	sub	sp, #12
 801c6a2:	af00      	add	r7, sp, #0
 801c6a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801c6a6:	bf00      	nop
 801c6a8:	370c      	adds	r7, #12
 801c6aa:	46bd      	mov	sp, r7
 801c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6b0:	4770      	bx	lr

0801c6b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801c6b2:	b480      	push	{r7}
 801c6b4:	b083      	sub	sp, #12
 801c6b6:	af00      	add	r7, sp, #0
 801c6b8:	6078      	str	r0, [r7, #4]
 801c6ba:	460b      	mov	r3, r1
 801c6bc:	70fb      	strb	r3, [r7, #3]
 801c6be:	4613      	mov	r3, r2
 801c6c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801c6c2:	bf00      	nop
 801c6c4:	370c      	adds	r7, #12
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6cc:	4770      	bx	lr

0801c6ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801c6ce:	b480      	push	{r7}
 801c6d0:	b083      	sub	sp, #12
 801c6d2:	af00      	add	r7, sp, #0
 801c6d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 801c6d6:	bf00      	nop
 801c6d8:	370c      	adds	r7, #12
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e0:	4770      	bx	lr

0801c6e2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801c6e2:	b480      	push	{r7}
 801c6e4:	b083      	sub	sp, #12
 801c6e6:	af00      	add	r7, sp, #0
 801c6e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801c6ea:	bf00      	nop
 801c6ec:	370c      	adds	r7, #12
 801c6ee:	46bd      	mov	sp, r7
 801c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6f4:	4770      	bx	lr

0801c6f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801c6f6:	b480      	push	{r7}
 801c6f8:	b083      	sub	sp, #12
 801c6fa:	af00      	add	r7, sp, #0
 801c6fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801c6fe:	bf00      	nop
 801c700:	370c      	adds	r7, #12
 801c702:	46bd      	mov	sp, r7
 801c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c708:	4770      	bx	lr

0801c70a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801c70a:	b480      	push	{r7}
 801c70c:	b083      	sub	sp, #12
 801c70e:	af00      	add	r7, sp, #0
 801c710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801c712:	bf00      	nop
 801c714:	370c      	adds	r7, #12
 801c716:	46bd      	mov	sp, r7
 801c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c71c:	4770      	bx	lr

0801c71e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801c71e:	b580      	push	{r7, lr}
 801c720:	b088      	sub	sp, #32
 801c722:	af02      	add	r7, sp, #8
 801c724:	60f8      	str	r0, [r7, #12]
 801c726:	60b9      	str	r1, [r7, #8]
 801c728:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 801c72a:	68bb      	ldr	r3, [r7, #8]
 801c72c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c734:	2b01      	cmp	r3, #1
 801c736:	d101      	bne.n	801c73c <I2C_Master_ISR_IT+0x1e>
 801c738:	2302      	movs	r3, #2
 801c73a:	e114      	b.n	801c966 <I2C_Master_ISR_IT+0x248>
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	2201      	movs	r2, #1
 801c740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801c744:	697b      	ldr	r3, [r7, #20]
 801c746:	091b      	lsrs	r3, r3, #4
 801c748:	f003 0301 	and.w	r3, r3, #1
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d013      	beq.n	801c778 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	091b      	lsrs	r3, r3, #4
 801c754:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d00d      	beq.n	801c778 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	2210      	movs	r2, #16
 801c762:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c768:	f043 0204 	orr.w	r2, r3, #4
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801c770:	68f8      	ldr	r0, [r7, #12]
 801c772:	f001 fa02 	bl	801db7a <I2C_Flush_TXDR>
 801c776:	e0e1      	b.n	801c93c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801c778:	697b      	ldr	r3, [r7, #20]
 801c77a:	089b      	lsrs	r3, r3, #2
 801c77c:	f003 0301 	and.w	r3, r3, #1
 801c780:	2b00      	cmp	r3, #0
 801c782:	d023      	beq.n	801c7cc <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	089b      	lsrs	r3, r3, #2
 801c788:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d01d      	beq.n	801c7cc <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801c790:	697b      	ldr	r3, [r7, #20]
 801c792:	f023 0304 	bic.w	r3, r3, #4
 801c796:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	681b      	ldr	r3, [r3, #0]
 801c79c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7a2:	b2d2      	uxtb	r2, r2
 801c7a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7aa:	1c5a      	adds	r2, r3, #1
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c7b4:	3b01      	subs	r3, #1
 801c7b6:	b29a      	uxth	r2, r3
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c7c0:	b29b      	uxth	r3, r3
 801c7c2:	3b01      	subs	r3, #1
 801c7c4:	b29a      	uxth	r2, r3
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 801c7ca:	e0b7      	b.n	801c93c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801c7cc:	697b      	ldr	r3, [r7, #20]
 801c7ce:	085b      	lsrs	r3, r3, #1
 801c7d0:	f003 0301 	and.w	r3, r3, #1
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d01e      	beq.n	801c816 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	085b      	lsrs	r3, r3, #1
 801c7dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d018      	beq.n	801c816 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7e8:	781a      	ldrb	r2, [r3, #0]
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7f4:	1c5a      	adds	r2, r3, #1
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c7fe:	3b01      	subs	r3, #1
 801c800:	b29a      	uxth	r2, r3
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c80a:	b29b      	uxth	r3, r3
 801c80c:	3b01      	subs	r3, #1
 801c80e:	b29a      	uxth	r2, r3
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	855a      	strh	r2, [r3, #42]	; 0x2a
 801c814:	e092      	b.n	801c93c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801c816:	697b      	ldr	r3, [r7, #20]
 801c818:	09db      	lsrs	r3, r3, #7
 801c81a:	f003 0301 	and.w	r3, r3, #1
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d05d      	beq.n	801c8de <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	099b      	lsrs	r3, r3, #6
 801c826:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d057      	beq.n	801c8de <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c832:	b29b      	uxth	r3, r3
 801c834:	2b00      	cmp	r3, #0
 801c836:	d040      	beq.n	801c8ba <I2C_Master_ISR_IT+0x19c>
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d13c      	bne.n	801c8ba <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	685b      	ldr	r3, [r3, #4]
 801c846:	b29b      	uxth	r3, r3
 801c848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c84c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c852:	b29b      	uxth	r3, r3
 801c854:	2bff      	cmp	r3, #255	; 0xff
 801c856:	d90e      	bls.n	801c876 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	22ff      	movs	r2, #255	; 0xff
 801c85c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c862:	b2da      	uxtb	r2, r3
 801c864:	8a79      	ldrh	r1, [r7, #18]
 801c866:	2300      	movs	r3, #0
 801c868:	9300      	str	r3, [sp, #0]
 801c86a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c86e:	68f8      	ldr	r0, [r7, #12]
 801c870:	f001 fbe8 	bl	801e044 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c874:	e032      	b.n	801c8dc <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c87a:	b29a      	uxth	r2, r3
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801c888:	d00b      	beq.n	801c8a2 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c88e:	b2da      	uxtb	r2, r3
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c894:	8a79      	ldrh	r1, [r7, #18]
 801c896:	2000      	movs	r0, #0
 801c898:	9000      	str	r0, [sp, #0]
 801c89a:	68f8      	ldr	r0, [r7, #12]
 801c89c:	f001 fbd2 	bl	801e044 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c8a0:	e01c      	b.n	801c8dc <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8a6:	b2da      	uxtb	r2, r3
 801c8a8:	8a79      	ldrh	r1, [r7, #18]
 801c8aa:	2300      	movs	r3, #0
 801c8ac:	9300      	str	r3, [sp, #0]
 801c8ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c8b2:	68f8      	ldr	r0, [r7, #12]
 801c8b4:	f001 fbc6 	bl	801e044 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c8b8:	e010      	b.n	801c8dc <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	685b      	ldr	r3, [r3, #4]
 801c8c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c8c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c8c8:	d003      	beq.n	801c8d2 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801c8ca:	68f8      	ldr	r0, [r7, #12]
 801c8cc:	f000 fcaa 	bl	801d224 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c8d0:	e034      	b.n	801c93c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801c8d2:	2140      	movs	r1, #64	; 0x40
 801c8d4:	68f8      	ldr	r0, [r7, #12]
 801c8d6:	f001 f859 	bl	801d98c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c8da:	e02f      	b.n	801c93c <I2C_Master_ISR_IT+0x21e>
 801c8dc:	e02e      	b.n	801c93c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801c8de:	697b      	ldr	r3, [r7, #20]
 801c8e0:	099b      	lsrs	r3, r3, #6
 801c8e2:	f003 0301 	and.w	r3, r3, #1
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d028      	beq.n	801c93c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	099b      	lsrs	r3, r3, #6
 801c8ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d022      	beq.n	801c93c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c8fa:	b29b      	uxth	r3, r3
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d119      	bne.n	801c934 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	685b      	ldr	r3, [r3, #4]
 801c906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c90a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c90e:	d015      	beq.n	801c93c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801c918:	d108      	bne.n	801c92c <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	685a      	ldr	r2, [r3, #4]
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c928:	605a      	str	r2, [r3, #4]
 801c92a:	e007      	b.n	801c93c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801c92c:	68f8      	ldr	r0, [r7, #12]
 801c92e:	f000 fc79 	bl	801d224 <I2C_ITMasterSeqCplt>
 801c932:	e003      	b.n	801c93c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801c934:	2140      	movs	r1, #64	; 0x40
 801c936:	68f8      	ldr	r0, [r7, #12]
 801c938:	f001 f828 	bl	801d98c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801c93c:	697b      	ldr	r3, [r7, #20]
 801c93e:	095b      	lsrs	r3, r3, #5
 801c940:	f003 0301 	and.w	r3, r3, #1
 801c944:	2b00      	cmp	r3, #0
 801c946:	d009      	beq.n	801c95c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	095b      	lsrs	r3, r3, #5
 801c94c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801c950:	2b00      	cmp	r3, #0
 801c952:	d003      	beq.n	801c95c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 801c954:	6979      	ldr	r1, [r7, #20]
 801c956:	68f8      	ldr	r0, [r7, #12]
 801c958:	f000 fd00 	bl	801d35c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	2200      	movs	r2, #0
 801c960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801c964:	2300      	movs	r3, #0
}
 801c966:	4618      	mov	r0, r3
 801c968:	3718      	adds	r7, #24
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bd80      	pop	{r7, pc}

0801c96e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801c96e:	b580      	push	{r7, lr}
 801c970:	b086      	sub	sp, #24
 801c972:	af00      	add	r7, sp, #0
 801c974:	60f8      	str	r0, [r7, #12]
 801c976:	60b9      	str	r1, [r7, #8]
 801c978:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c97e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801c980:	68bb      	ldr	r3, [r7, #8]
 801c982:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c98a:	2b01      	cmp	r3, #1
 801c98c:	d101      	bne.n	801c992 <I2C_Slave_ISR_IT+0x24>
 801c98e:	2302      	movs	r3, #2
 801c990:	e0ec      	b.n	801cb6c <I2C_Slave_ISR_IT+0x1fe>
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	2201      	movs	r2, #1
 801c996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801c99a:	693b      	ldr	r3, [r7, #16]
 801c99c:	095b      	lsrs	r3, r3, #5
 801c99e:	f003 0301 	and.w	r3, r3, #1
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d009      	beq.n	801c9ba <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	095b      	lsrs	r3, r3, #5
 801c9aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d003      	beq.n	801c9ba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 801c9b2:	6939      	ldr	r1, [r7, #16]
 801c9b4:	68f8      	ldr	r0, [r7, #12]
 801c9b6:	f000 fd9b 	bl	801d4f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801c9ba:	693b      	ldr	r3, [r7, #16]
 801c9bc:	091b      	lsrs	r3, r3, #4
 801c9be:	f003 0301 	and.w	r3, r3, #1
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d04d      	beq.n	801ca62 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	091b      	lsrs	r3, r3, #4
 801c9ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d047      	beq.n	801ca62 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c9d6:	b29b      	uxth	r3, r3
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d128      	bne.n	801ca2e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c9e2:	b2db      	uxtb	r3, r3
 801c9e4:	2b28      	cmp	r3, #40	; 0x28
 801c9e6:	d108      	bne.n	801c9fa <I2C_Slave_ISR_IT+0x8c>
 801c9e8:	697b      	ldr	r3, [r7, #20]
 801c9ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c9ee:	d104      	bne.n	801c9fa <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801c9f0:	6939      	ldr	r1, [r7, #16]
 801c9f2:	68f8      	ldr	r0, [r7, #12]
 801c9f4:	f000 ff74 	bl	801d8e0 <I2C_ITListenCplt>
 801c9f8:	e032      	b.n	801ca60 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ca00:	b2db      	uxtb	r3, r3
 801ca02:	2b29      	cmp	r3, #41	; 0x29
 801ca04:	d10e      	bne.n	801ca24 <I2C_Slave_ISR_IT+0xb6>
 801ca06:	697b      	ldr	r3, [r7, #20]
 801ca08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ca0c:	d00a      	beq.n	801ca24 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	2210      	movs	r2, #16
 801ca14:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801ca16:	68f8      	ldr	r0, [r7, #12]
 801ca18:	f001 f8af 	bl	801db7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801ca1c:	68f8      	ldr	r0, [r7, #12]
 801ca1e:	f000 fc3e 	bl	801d29e <I2C_ITSlaveSeqCplt>
 801ca22:	e01d      	b.n	801ca60 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ca24:	68fb      	ldr	r3, [r7, #12]
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	2210      	movs	r2, #16
 801ca2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 801ca2c:	e096      	b.n	801cb5c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	2210      	movs	r2, #16
 801ca34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca3a:	f043 0204 	orr.w	r2, r3, #4
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801ca42:	697b      	ldr	r3, [r7, #20]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d004      	beq.n	801ca52 <I2C_Slave_ISR_IT+0xe4>
 801ca48:	697b      	ldr	r3, [r7, #20]
 801ca4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ca4e:	f040 8085 	bne.w	801cb5c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801ca52:	68fb      	ldr	r3, [r7, #12]
 801ca54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca56:	4619      	mov	r1, r3
 801ca58:	68f8      	ldr	r0, [r7, #12]
 801ca5a:	f000 ff97 	bl	801d98c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801ca5e:	e07d      	b.n	801cb5c <I2C_Slave_ISR_IT+0x1ee>
 801ca60:	e07c      	b.n	801cb5c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801ca62:	693b      	ldr	r3, [r7, #16]
 801ca64:	089b      	lsrs	r3, r3, #2
 801ca66:	f003 0301 	and.w	r3, r3, #1
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d030      	beq.n	801cad0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	089b      	lsrs	r3, r3, #2
 801ca72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d02a      	beq.n	801cad0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 801ca7a:	68fb      	ldr	r3, [r7, #12]
 801ca7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ca7e:	b29b      	uxth	r3, r3
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d018      	beq.n	801cab6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca8e:	b2d2      	uxtb	r2, r2
 801ca90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca96:	1c5a      	adds	r2, r3, #1
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801caa0:	3b01      	subs	r3, #1
 801caa2:	b29a      	uxth	r2, r3
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801caac:	b29b      	uxth	r3, r3
 801caae:	3b01      	subs	r3, #1
 801cab0:	b29a      	uxth	r2, r3
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801caba:	b29b      	uxth	r3, r3
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d14f      	bne.n	801cb60 <I2C_Slave_ISR_IT+0x1f2>
 801cac0:	697b      	ldr	r3, [r7, #20]
 801cac2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801cac6:	d04b      	beq.n	801cb60 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801cac8:	68f8      	ldr	r0, [r7, #12]
 801caca:	f000 fbe8 	bl	801d29e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 801cace:	e047      	b.n	801cb60 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801cad0:	693b      	ldr	r3, [r7, #16]
 801cad2:	08db      	lsrs	r3, r3, #3
 801cad4:	f003 0301 	and.w	r3, r3, #1
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d00a      	beq.n	801caf2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	08db      	lsrs	r3, r3, #3
 801cae0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d004      	beq.n	801caf2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801cae8:	6939      	ldr	r1, [r7, #16]
 801caea:	68f8      	ldr	r0, [r7, #12]
 801caec:	f000 fb16 	bl	801d11c <I2C_ITAddrCplt>
 801caf0:	e037      	b.n	801cb62 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801caf2:	693b      	ldr	r3, [r7, #16]
 801caf4:	085b      	lsrs	r3, r3, #1
 801caf6:	f003 0301 	and.w	r3, r3, #1
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d031      	beq.n	801cb62 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	085b      	lsrs	r3, r3, #1
 801cb02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d02b      	beq.n	801cb62 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cb0e:	b29b      	uxth	r3, r3
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d018      	beq.n	801cb46 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb18:	781a      	ldrb	r2, [r3, #0]
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb24:	1c5a      	adds	r2, r3, #1
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cb2e:	b29b      	uxth	r3, r3
 801cb30:	3b01      	subs	r3, #1
 801cb32:	b29a      	uxth	r2, r3
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801cb38:	68fb      	ldr	r3, [r7, #12]
 801cb3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cb3c:	3b01      	subs	r3, #1
 801cb3e:	b29a      	uxth	r2, r3
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	851a      	strh	r2, [r3, #40]	; 0x28
 801cb44:	e00d      	b.n	801cb62 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801cb46:	697b      	ldr	r3, [r7, #20]
 801cb48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cb4c:	d002      	beq.n	801cb54 <I2C_Slave_ISR_IT+0x1e6>
 801cb4e:	697b      	ldr	r3, [r7, #20]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d106      	bne.n	801cb62 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801cb54:	68f8      	ldr	r0, [r7, #12]
 801cb56:	f000 fba2 	bl	801d29e <I2C_ITSlaveSeqCplt>
 801cb5a:	e002      	b.n	801cb62 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 801cb5c:	bf00      	nop
 801cb5e:	e000      	b.n	801cb62 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 801cb60:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	2200      	movs	r2, #0
 801cb66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801cb6a:	2300      	movs	r3, #0
}
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	3718      	adds	r7, #24
 801cb70:	46bd      	mov	sp, r7
 801cb72:	bd80      	pop	{r7, pc}

0801cb74 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 801cb74:	b580      	push	{r7, lr}
 801cb76:	b088      	sub	sp, #32
 801cb78:	af02      	add	r7, sp, #8
 801cb7a:	60f8      	str	r0, [r7, #12]
 801cb7c:	60b9      	str	r1, [r7, #8]
 801cb7e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801cb86:	2b01      	cmp	r3, #1
 801cb88:	d101      	bne.n	801cb8e <I2C_Master_ISR_DMA+0x1a>
 801cb8a:	2302      	movs	r3, #2
 801cb8c:	e0e1      	b.n	801cd52 <I2C_Master_ISR_DMA+0x1de>
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	2201      	movs	r2, #1
 801cb92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801cb96:	68bb      	ldr	r3, [r7, #8]
 801cb98:	091b      	lsrs	r3, r3, #4
 801cb9a:	f003 0301 	and.w	r3, r3, #1
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d017      	beq.n	801cbd2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	091b      	lsrs	r3, r3, #4
 801cba6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d011      	beq.n	801cbd2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	2210      	movs	r2, #16
 801cbb4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbba:	f043 0204 	orr.w	r2, r3, #4
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801cbc2:	2120      	movs	r1, #32
 801cbc4:	68f8      	ldr	r0, [r7, #12]
 801cbc6:	f001 fa6f 	bl	801e0a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801cbca:	68f8      	ldr	r0, [r7, #12]
 801cbcc:	f000 ffd5 	bl	801db7a <I2C_Flush_TXDR>
 801cbd0:	e0ba      	b.n	801cd48 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801cbd2:	68bb      	ldr	r3, [r7, #8]
 801cbd4:	09db      	lsrs	r3, r3, #7
 801cbd6:	f003 0301 	and.w	r3, r3, #1
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d072      	beq.n	801ccc4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	099b      	lsrs	r3, r3, #6
 801cbe2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d06c      	beq.n	801ccc4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801cbea:	68fb      	ldr	r3, [r7, #12]
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	681a      	ldr	r2, [r3, #0]
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cbf8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cbfe:	b29b      	uxth	r3, r3
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d04e      	beq.n	801cca2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	685b      	ldr	r3, [r3, #4]
 801cc0a:	b29b      	uxth	r3, r3
 801cc0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cc10:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cc16:	b29b      	uxth	r3, r3
 801cc18:	2bff      	cmp	r3, #255	; 0xff
 801cc1a:	d906      	bls.n	801cc2a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	22ff      	movs	r2, #255	; 0xff
 801cc20:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 801cc22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801cc26:	617b      	str	r3, [r7, #20]
 801cc28:	e010      	b.n	801cc4c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801cc2a:	68fb      	ldr	r3, [r7, #12]
 801cc2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cc2e:	b29a      	uxth	r2, r3
 801cc30:	68fb      	ldr	r3, [r7, #12]
 801cc32:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801cc34:	68fb      	ldr	r3, [r7, #12]
 801cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801cc3c:	d003      	beq.n	801cc46 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc42:	617b      	str	r3, [r7, #20]
 801cc44:	e002      	b.n	801cc4c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801cc46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801cc4a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cc50:	b2da      	uxtb	r2, r3
 801cc52:	8a79      	ldrh	r1, [r7, #18]
 801cc54:	2300      	movs	r3, #0
 801cc56:	9300      	str	r3, [sp, #0]
 801cc58:	697b      	ldr	r3, [r7, #20]
 801cc5a:	68f8      	ldr	r0, [r7, #12]
 801cc5c:	f001 f9f2 	bl	801e044 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cc64:	b29a      	uxth	r2, r3
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cc6a:	1ad3      	subs	r3, r2, r3
 801cc6c:	b29a      	uxth	r2, r3
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801cc78:	b2db      	uxtb	r3, r3
 801cc7a:	2b22      	cmp	r3, #34	; 0x22
 801cc7c:	d108      	bne.n	801cc90 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	681a      	ldr	r2, [r3, #0]
 801cc84:	68fb      	ldr	r3, [r7, #12]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801cc8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801cc8e:	e05b      	b.n	801cd48 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	681a      	ldr	r2, [r3, #0]
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801cc9e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801cca0:	e052      	b.n	801cd48 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	685b      	ldr	r3, [r3, #4]
 801cca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ccac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801ccb0:	d003      	beq.n	801ccba <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801ccb2:	68f8      	ldr	r0, [r7, #12]
 801ccb4:	f000 fab6 	bl	801d224 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 801ccb8:	e046      	b.n	801cd48 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801ccba:	2140      	movs	r1, #64	; 0x40
 801ccbc:	68f8      	ldr	r0, [r7, #12]
 801ccbe:	f000 fe65 	bl	801d98c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801ccc2:	e041      	b.n	801cd48 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801ccc4:	68bb      	ldr	r3, [r7, #8]
 801ccc6:	099b      	lsrs	r3, r3, #6
 801ccc8:	f003 0301 	and.w	r3, r3, #1
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d029      	beq.n	801cd24 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	099b      	lsrs	r3, r3, #6
 801ccd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d023      	beq.n	801cd24 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cce0:	b29b      	uxth	r3, r3
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d119      	bne.n	801cd1a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	685b      	ldr	r3, [r3, #4]
 801ccec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ccf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801ccf4:	d027      	beq.n	801cd46 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ccfe:	d108      	bne.n	801cd12 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	685a      	ldr	r2, [r3, #4]
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801cd0e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801cd10:	e019      	b.n	801cd46 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801cd12:	68f8      	ldr	r0, [r7, #12]
 801cd14:	f000 fa86 	bl	801d224 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801cd18:	e015      	b.n	801cd46 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801cd1a:	2140      	movs	r1, #64	; 0x40
 801cd1c:	68f8      	ldr	r0, [r7, #12]
 801cd1e:	f000 fe35 	bl	801d98c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801cd22:	e010      	b.n	801cd46 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801cd24:	68bb      	ldr	r3, [r7, #8]
 801cd26:	095b      	lsrs	r3, r3, #5
 801cd28:	f003 0301 	and.w	r3, r3, #1
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d00b      	beq.n	801cd48 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	095b      	lsrs	r3, r3, #5
 801cd34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d005      	beq.n	801cd48 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801cd3c:	68b9      	ldr	r1, [r7, #8]
 801cd3e:	68f8      	ldr	r0, [r7, #12]
 801cd40:	f000 fb0c 	bl	801d35c <I2C_ITMasterCplt>
 801cd44:	e000      	b.n	801cd48 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 801cd46:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801cd50:	2300      	movs	r3, #0
}
 801cd52:	4618      	mov	r0, r3
 801cd54:	3718      	adds	r7, #24
 801cd56:	46bd      	mov	sp, r7
 801cd58:	bd80      	pop	{r7, pc}
	...

0801cd5c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801cd5c:	b580      	push	{r7, lr}
 801cd5e:	b088      	sub	sp, #32
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	60f8      	str	r0, [r7, #12]
 801cd64:	60b9      	str	r1, [r7, #8]
 801cd66:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd6c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801cd78:	2b01      	cmp	r3, #1
 801cd7a:	d101      	bne.n	801cd80 <I2C_Slave_ISR_DMA+0x24>
 801cd7c:	2302      	movs	r3, #2
 801cd7e:	e1c8      	b.n	801d112 <I2C_Slave_ISR_DMA+0x3b6>
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	2201      	movs	r2, #1
 801cd84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801cd88:	68bb      	ldr	r3, [r7, #8]
 801cd8a:	095b      	lsrs	r3, r3, #5
 801cd8c:	f003 0301 	and.w	r3, r3, #1
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d009      	beq.n	801cda8 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	095b      	lsrs	r3, r3, #5
 801cd98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d003      	beq.n	801cda8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 801cda0:	68b9      	ldr	r1, [r7, #8]
 801cda2:	68f8      	ldr	r0, [r7, #12]
 801cda4:	f000 fba4 	bl	801d4f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801cda8:	68bb      	ldr	r3, [r7, #8]
 801cdaa:	091b      	lsrs	r3, r3, #4
 801cdac:	f003 0301 	and.w	r3, r3, #1
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	f000 8199 	beq.w	801d0e8 <I2C_Slave_ISR_DMA+0x38c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	091b      	lsrs	r3, r3, #4
 801cdba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	f000 8192 	beq.w	801d0e8 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	0b9b      	lsrs	r3, r3, #14
 801cdc8:	f003 0301 	and.w	r3, r3, #1
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d106      	bne.n	801cdde <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	0bdb      	lsrs	r3, r3, #15
 801cdd4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	f000 817e 	beq.w	801d0da <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d07c      	beq.n	801cee0 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	0bdb      	lsrs	r3, r3, #15
 801cdea:	f003 0301 	and.w	r3, r3, #1
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d076      	beq.n	801cee0 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 801cdf2:	68fb      	ldr	r3, [r7, #12]
 801cdf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	4a8d      	ldr	r2, [pc, #564]	; (801d030 <I2C_Slave_ISR_DMA+0x2d4>)
 801cdfa:	4293      	cmp	r3, r2
 801cdfc:	d059      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	4a8b      	ldr	r2, [pc, #556]	; (801d034 <I2C_Slave_ISR_DMA+0x2d8>)
 801ce06:	4293      	cmp	r3, r2
 801ce08:	d053      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	4a89      	ldr	r2, [pc, #548]	; (801d038 <I2C_Slave_ISR_DMA+0x2dc>)
 801ce12:	4293      	cmp	r3, r2
 801ce14:	d04d      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	4a87      	ldr	r2, [pc, #540]	; (801d03c <I2C_Slave_ISR_DMA+0x2e0>)
 801ce1e:	4293      	cmp	r3, r2
 801ce20:	d047      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	4a85      	ldr	r2, [pc, #532]	; (801d040 <I2C_Slave_ISR_DMA+0x2e4>)
 801ce2a:	4293      	cmp	r3, r2
 801ce2c:	d041      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	4a83      	ldr	r2, [pc, #524]	; (801d044 <I2C_Slave_ISR_DMA+0x2e8>)
 801ce36:	4293      	cmp	r3, r2
 801ce38:	d03b      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce3a:	68fb      	ldr	r3, [r7, #12]
 801ce3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	4a81      	ldr	r2, [pc, #516]	; (801d048 <I2C_Slave_ISR_DMA+0x2ec>)
 801ce42:	4293      	cmp	r3, r2
 801ce44:	d035      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce4a:	681b      	ldr	r3, [r3, #0]
 801ce4c:	4a7f      	ldr	r2, [pc, #508]	; (801d04c <I2C_Slave_ISR_DMA+0x2f0>)
 801ce4e:	4293      	cmp	r3, r2
 801ce50:	d02f      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	4a7d      	ldr	r2, [pc, #500]	; (801d050 <I2C_Slave_ISR_DMA+0x2f4>)
 801ce5a:	4293      	cmp	r3, r2
 801ce5c:	d029      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	4a7b      	ldr	r2, [pc, #492]	; (801d054 <I2C_Slave_ISR_DMA+0x2f8>)
 801ce66:	4293      	cmp	r3, r2
 801ce68:	d023      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	4a79      	ldr	r2, [pc, #484]	; (801d058 <I2C_Slave_ISR_DMA+0x2fc>)
 801ce72:	4293      	cmp	r3, r2
 801ce74:	d01d      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	4a77      	ldr	r2, [pc, #476]	; (801d05c <I2C_Slave_ISR_DMA+0x300>)
 801ce7e:	4293      	cmp	r3, r2
 801ce80:	d017      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	4a75      	ldr	r2, [pc, #468]	; (801d060 <I2C_Slave_ISR_DMA+0x304>)
 801ce8a:	4293      	cmp	r3, r2
 801ce8c:	d011      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce8e:	68fb      	ldr	r3, [r7, #12]
 801ce90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	4a73      	ldr	r2, [pc, #460]	; (801d064 <I2C_Slave_ISR_DMA+0x308>)
 801ce96:	4293      	cmp	r3, r2
 801ce98:	d00b      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	4a71      	ldr	r2, [pc, #452]	; (801d068 <I2C_Slave_ISR_DMA+0x30c>)
 801cea2:	4293      	cmp	r3, r2
 801cea4:	d005      	beq.n	801ceb2 <I2C_Slave_ISR_DMA+0x156>
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	4a6f      	ldr	r2, [pc, #444]	; (801d06c <I2C_Slave_ISR_DMA+0x310>)
 801ceae:	4293      	cmp	r3, r2
 801ceb0:	d109      	bne.n	801cec6 <I2C_Slave_ISR_DMA+0x16a>
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	685b      	ldr	r3, [r3, #4]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	bf0c      	ite	eq
 801cebe:	2301      	moveq	r3, #1
 801cec0:	2300      	movne	r3, #0
 801cec2:	b2db      	uxtb	r3, r3
 801cec4:	e008      	b.n	801ced8 <I2C_Slave_ISR_DMA+0x17c>
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	685b      	ldr	r3, [r3, #4]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	bf0c      	ite	eq
 801ced2:	2301      	moveq	r3, #1
 801ced4:	2300      	movne	r3, #0
 801ced6:	b2db      	uxtb	r3, r3
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d001      	beq.n	801cee0 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 801cedc:	2301      	movs	r3, #1
 801cede:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d07c      	beq.n	801cfe2 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	0b9b      	lsrs	r3, r3, #14
 801ceec:	f003 0301 	and.w	r3, r3, #1
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d076      	beq.n	801cfe2 <I2C_Slave_ISR_DMA+0x286>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	4a4d      	ldr	r2, [pc, #308]	; (801d030 <I2C_Slave_ISR_DMA+0x2d4>)
 801cefc:	4293      	cmp	r3, r2
 801cefe:	d059      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	4a4b      	ldr	r2, [pc, #300]	; (801d034 <I2C_Slave_ISR_DMA+0x2d8>)
 801cf08:	4293      	cmp	r3, r2
 801cf0a:	d053      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	4a49      	ldr	r2, [pc, #292]	; (801d038 <I2C_Slave_ISR_DMA+0x2dc>)
 801cf14:	4293      	cmp	r3, r2
 801cf16:	d04d      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	4a47      	ldr	r2, [pc, #284]	; (801d03c <I2C_Slave_ISR_DMA+0x2e0>)
 801cf20:	4293      	cmp	r3, r2
 801cf22:	d047      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	4a45      	ldr	r2, [pc, #276]	; (801d040 <I2C_Slave_ISR_DMA+0x2e4>)
 801cf2c:	4293      	cmp	r3, r2
 801cf2e:	d041      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	4a43      	ldr	r2, [pc, #268]	; (801d044 <I2C_Slave_ISR_DMA+0x2e8>)
 801cf38:	4293      	cmp	r3, r2
 801cf3a:	d03b      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	4a41      	ldr	r2, [pc, #260]	; (801d048 <I2C_Slave_ISR_DMA+0x2ec>)
 801cf44:	4293      	cmp	r3, r2
 801cf46:	d035      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	4a3f      	ldr	r2, [pc, #252]	; (801d04c <I2C_Slave_ISR_DMA+0x2f0>)
 801cf50:	4293      	cmp	r3, r2
 801cf52:	d02f      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	4a3d      	ldr	r2, [pc, #244]	; (801d050 <I2C_Slave_ISR_DMA+0x2f4>)
 801cf5c:	4293      	cmp	r3, r2
 801cf5e:	d029      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	4a3b      	ldr	r2, [pc, #236]	; (801d054 <I2C_Slave_ISR_DMA+0x2f8>)
 801cf68:	4293      	cmp	r3, r2
 801cf6a:	d023      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf6c:	68fb      	ldr	r3, [r7, #12]
 801cf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf70:	681b      	ldr	r3, [r3, #0]
 801cf72:	4a39      	ldr	r2, [pc, #228]	; (801d058 <I2C_Slave_ISR_DMA+0x2fc>)
 801cf74:	4293      	cmp	r3, r2
 801cf76:	d01d      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	4a37      	ldr	r2, [pc, #220]	; (801d05c <I2C_Slave_ISR_DMA+0x300>)
 801cf80:	4293      	cmp	r3, r2
 801cf82:	d017      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	4a35      	ldr	r2, [pc, #212]	; (801d060 <I2C_Slave_ISR_DMA+0x304>)
 801cf8c:	4293      	cmp	r3, r2
 801cf8e:	d011      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	4a33      	ldr	r2, [pc, #204]	; (801d064 <I2C_Slave_ISR_DMA+0x308>)
 801cf98:	4293      	cmp	r3, r2
 801cf9a:	d00b      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	4a31      	ldr	r2, [pc, #196]	; (801d068 <I2C_Slave_ISR_DMA+0x30c>)
 801cfa4:	4293      	cmp	r3, r2
 801cfa6:	d005      	beq.n	801cfb4 <I2C_Slave_ISR_DMA+0x258>
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	4a2f      	ldr	r2, [pc, #188]	; (801d06c <I2C_Slave_ISR_DMA+0x310>)
 801cfb0:	4293      	cmp	r3, r2
 801cfb2:	d109      	bne.n	801cfc8 <I2C_Slave_ISR_DMA+0x26c>
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	685b      	ldr	r3, [r3, #4]
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	bf0c      	ite	eq
 801cfc0:	2301      	moveq	r3, #1
 801cfc2:	2300      	movne	r3, #0
 801cfc4:	b2db      	uxtb	r3, r3
 801cfc6:	e008      	b.n	801cfda <I2C_Slave_ISR_DMA+0x27e>
 801cfc8:	68fb      	ldr	r3, [r7, #12]
 801cfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	685b      	ldr	r3, [r3, #4]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	bf0c      	ite	eq
 801cfd4:	2301      	moveq	r3, #1
 801cfd6:	2300      	movne	r3, #0
 801cfd8:	b2db      	uxtb	r3, r3
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d001      	beq.n	801cfe2 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 801cfde:	2301      	movs	r3, #1
 801cfe0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801cfe2:	69fb      	ldr	r3, [r7, #28]
 801cfe4:	2b01      	cmp	r3, #1
 801cfe6:	d148      	bne.n	801d07a <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801cfee:	b2db      	uxtb	r3, r3
 801cff0:	2b28      	cmp	r3, #40	; 0x28
 801cff2:	d108      	bne.n	801d006 <I2C_Slave_ISR_DMA+0x2aa>
 801cff4:	69bb      	ldr	r3, [r7, #24]
 801cff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801cffa:	d104      	bne.n	801d006 <I2C_Slave_ISR_DMA+0x2aa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801cffc:	68b9      	ldr	r1, [r7, #8]
 801cffe:	68f8      	ldr	r0, [r7, #12]
 801d000:	f000 fc6e 	bl	801d8e0 <I2C_ITListenCplt>
 801d004:	e068      	b.n	801d0d8 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d00c:	b2db      	uxtb	r3, r3
 801d00e:	2b29      	cmp	r3, #41	; 0x29
 801d010:	d12e      	bne.n	801d070 <I2C_Slave_ISR_DMA+0x314>
 801d012:	69bb      	ldr	r3, [r7, #24]
 801d014:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d018:	d02a      	beq.n	801d070 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	2210      	movs	r2, #16
 801d020:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 801d022:	68f8      	ldr	r0, [r7, #12]
 801d024:	f000 fda9 	bl	801db7a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 801d028:	68f8      	ldr	r0, [r7, #12]
 801d02a:	f000 f938 	bl	801d29e <I2C_ITSlaveSeqCplt>
 801d02e:	e053      	b.n	801d0d8 <I2C_Slave_ISR_DMA+0x37c>
 801d030:	40020010 	.word	0x40020010
 801d034:	40020028 	.word	0x40020028
 801d038:	40020040 	.word	0x40020040
 801d03c:	40020058 	.word	0x40020058
 801d040:	40020070 	.word	0x40020070
 801d044:	40020088 	.word	0x40020088
 801d048:	400200a0 	.word	0x400200a0
 801d04c:	400200b8 	.word	0x400200b8
 801d050:	40020410 	.word	0x40020410
 801d054:	40020428 	.word	0x40020428
 801d058:	40020440 	.word	0x40020440
 801d05c:	40020458 	.word	0x40020458
 801d060:	40020470 	.word	0x40020470
 801d064:	40020488 	.word	0x40020488
 801d068:	400204a0 	.word	0x400204a0
 801d06c:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	2210      	movs	r2, #16
 801d076:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801d078:	e034      	b.n	801d0e4 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	2210      	movs	r2, #16
 801d080:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d086:	f043 0204 	orr.w	r2, r3, #4
 801d08a:	68fb      	ldr	r3, [r7, #12]
 801d08c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d094:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801d096:	69bb      	ldr	r3, [r7, #24]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d003      	beq.n	801d0a4 <I2C_Slave_ISR_DMA+0x348>
 801d09c:	69bb      	ldr	r3, [r7, #24]
 801d09e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d0a2:	d11f      	bne.n	801d0e4 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801d0a4:	7dfb      	ldrb	r3, [r7, #23]
 801d0a6:	2b21      	cmp	r3, #33	; 0x21
 801d0a8:	d002      	beq.n	801d0b0 <I2C_Slave_ISR_DMA+0x354>
 801d0aa:	7dfb      	ldrb	r3, [r7, #23]
 801d0ac:	2b29      	cmp	r3, #41	; 0x29
 801d0ae:	d103      	bne.n	801d0b8 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801d0b0:	68fb      	ldr	r3, [r7, #12]
 801d0b2:	2221      	movs	r2, #33	; 0x21
 801d0b4:	631a      	str	r2, [r3, #48]	; 0x30
 801d0b6:	e008      	b.n	801d0ca <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801d0b8:	7dfb      	ldrb	r3, [r7, #23]
 801d0ba:	2b22      	cmp	r3, #34	; 0x22
 801d0bc:	d002      	beq.n	801d0c4 <I2C_Slave_ISR_DMA+0x368>
 801d0be:	7dfb      	ldrb	r3, [r7, #23]
 801d0c0:	2b2a      	cmp	r3, #42	; 0x2a
 801d0c2:	d102      	bne.n	801d0ca <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	2222      	movs	r2, #34	; 0x22
 801d0c8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801d0ca:	68fb      	ldr	r3, [r7, #12]
 801d0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0ce:	4619      	mov	r1, r3
 801d0d0:	68f8      	ldr	r0, [r7, #12]
 801d0d2:	f000 fc5b 	bl	801d98c <I2C_ITError>
      if (treatdmanack == 1U)
 801d0d6:	e005      	b.n	801d0e4 <I2C_Slave_ISR_DMA+0x388>
 801d0d8:	e004      	b.n	801d0e4 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d0da:	68fb      	ldr	r3, [r7, #12]
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	2210      	movs	r2, #16
 801d0e0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801d0e2:	e011      	b.n	801d108 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 801d0e4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801d0e6:	e00f      	b.n	801d108 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801d0e8:	68bb      	ldr	r3, [r7, #8]
 801d0ea:	08db      	lsrs	r3, r3, #3
 801d0ec:	f003 0301 	and.w	r3, r3, #1
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d009      	beq.n	801d108 <I2C_Slave_ISR_DMA+0x3ac>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	08db      	lsrs	r3, r3, #3
 801d0f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d003      	beq.n	801d108 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801d100:	68b9      	ldr	r1, [r7, #8]
 801d102:	68f8      	ldr	r0, [r7, #12]
 801d104:	f000 f80a 	bl	801d11c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801d108:	68fb      	ldr	r3, [r7, #12]
 801d10a:	2200      	movs	r2, #0
 801d10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801d110:	2300      	movs	r3, #0
}
 801d112:	4618      	mov	r0, r3
 801d114:	3720      	adds	r7, #32
 801d116:	46bd      	mov	sp, r7
 801d118:	bd80      	pop	{r7, pc}
 801d11a:	bf00      	nop

0801d11c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801d11c:	b580      	push	{r7, lr}
 801d11e:	b084      	sub	sp, #16
 801d120:	af00      	add	r7, sp, #0
 801d122:	6078      	str	r0, [r7, #4]
 801d124:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d12c:	b2db      	uxtb	r3, r3
 801d12e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801d132:	2b28      	cmp	r3, #40	; 0x28
 801d134:	d16a      	bne.n	801d20c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	699b      	ldr	r3, [r3, #24]
 801d13c:	0c1b      	lsrs	r3, r3, #16
 801d13e:	b2db      	uxtb	r3, r3
 801d140:	f003 0301 	and.w	r3, r3, #1
 801d144:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	699b      	ldr	r3, [r3, #24]
 801d14c:	0c1b      	lsrs	r3, r3, #16
 801d14e:	b29b      	uxth	r3, r3
 801d150:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801d154:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	689b      	ldr	r3, [r3, #8]
 801d15c:	b29b      	uxth	r3, r3
 801d15e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d162:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	68db      	ldr	r3, [r3, #12]
 801d16a:	b29b      	uxth	r3, r3
 801d16c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801d170:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	68db      	ldr	r3, [r3, #12]
 801d176:	2b02      	cmp	r3, #2
 801d178:	d138      	bne.n	801d1ec <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 801d17a:	897b      	ldrh	r3, [r7, #10]
 801d17c:	09db      	lsrs	r3, r3, #7
 801d17e:	b29a      	uxth	r2, r3
 801d180:	89bb      	ldrh	r3, [r7, #12]
 801d182:	4053      	eors	r3, r2
 801d184:	b29b      	uxth	r3, r3
 801d186:	f003 0306 	and.w	r3, r3, #6
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d11c      	bne.n	801d1c8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 801d18e:	897b      	ldrh	r3, [r7, #10]
 801d190:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d196:	1c5a      	adds	r2, r3, #1
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d1a0:	2b02      	cmp	r3, #2
 801d1a2:	d13b      	bne.n	801d21c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	2208      	movs	r2, #8
 801d1b0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	2200      	movs	r2, #0
 801d1b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801d1ba:	89ba      	ldrh	r2, [r7, #12]
 801d1bc:	7bfb      	ldrb	r3, [r7, #15]
 801d1be:	4619      	mov	r1, r3
 801d1c0:	6878      	ldr	r0, [r7, #4]
 801d1c2:	f7ff fa76 	bl	801c6b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801d1c6:	e029      	b.n	801d21c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 801d1c8:	893b      	ldrh	r3, [r7, #8]
 801d1ca:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801d1cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801d1d0:	6878      	ldr	r0, [r7, #4]
 801d1d2:	f000 ffcd 	bl	801e170 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	2200      	movs	r2, #0
 801d1da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801d1de:	89ba      	ldrh	r2, [r7, #12]
 801d1e0:	7bfb      	ldrb	r3, [r7, #15]
 801d1e2:	4619      	mov	r1, r3
 801d1e4:	6878      	ldr	r0, [r7, #4]
 801d1e6:	f7ff fa64 	bl	801c6b2 <HAL_I2C_AddrCallback>
}
 801d1ea:	e017      	b.n	801d21c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801d1ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801d1f0:	6878      	ldr	r0, [r7, #4]
 801d1f2:	f000 ffbd 	bl	801e170 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	2200      	movs	r2, #0
 801d1fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801d1fe:	89ba      	ldrh	r2, [r7, #12]
 801d200:	7bfb      	ldrb	r3, [r7, #15]
 801d202:	4619      	mov	r1, r3
 801d204:	6878      	ldr	r0, [r7, #4]
 801d206:	f7ff fa54 	bl	801c6b2 <HAL_I2C_AddrCallback>
}
 801d20a:	e007      	b.n	801d21c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	2208      	movs	r2, #8
 801d212:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	2200      	movs	r2, #0
 801d218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 801d21c:	bf00      	nop
 801d21e:	3710      	adds	r7, #16
 801d220:	46bd      	mov	sp, r7
 801d222:	bd80      	pop	{r7, pc}

0801d224 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801d224:	b580      	push	{r7, lr}
 801d226:	b082      	sub	sp, #8
 801d228:	af00      	add	r7, sp, #0
 801d22a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	2200      	movs	r2, #0
 801d230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d23a:	b2db      	uxtb	r3, r3
 801d23c:	2b21      	cmp	r3, #33	; 0x21
 801d23e:	d115      	bne.n	801d26c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	2220      	movs	r2, #32
 801d244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	2211      	movs	r2, #17
 801d24c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	2200      	movs	r2, #0
 801d252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801d254:	2101      	movs	r1, #1
 801d256:	6878      	ldr	r0, [r7, #4]
 801d258:	f000 ff8a 	bl	801e170 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	2200      	movs	r2, #0
 801d260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801d264:	6878      	ldr	r0, [r7, #4]
 801d266:	f7e8 fecf 	bl	8006008 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801d26a:	e014      	b.n	801d296 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	2220      	movs	r2, #32
 801d270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	2212      	movs	r2, #18
 801d278:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	2200      	movs	r2, #0
 801d27e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801d280:	2102      	movs	r1, #2
 801d282:	6878      	ldr	r0, [r7, #4]
 801d284:	f000 ff74 	bl	801e170 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	2200      	movs	r2, #0
 801d28c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801d290:	6878      	ldr	r0, [r7, #4]
 801d292:	f7e8 fedb 	bl	800604c <HAL_I2C_MasterRxCpltCallback>
}
 801d296:	bf00      	nop
 801d298:	3708      	adds	r7, #8
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bd80      	pop	{r7, pc}

0801d29e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801d29e:	b580      	push	{r7, lr}
 801d2a0:	b084      	sub	sp, #16
 801d2a2:	af00      	add	r7, sp, #0
 801d2a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	2200      	movs	r2, #0
 801d2b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	0b9b      	lsrs	r3, r3, #14
 801d2ba:	f003 0301 	and.w	r3, r3, #1
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d008      	beq.n	801d2d4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	681a      	ldr	r2, [r3, #0]
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d2d0:	601a      	str	r2, [r3, #0]
 801d2d2:	e00d      	b.n	801d2f0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	0bdb      	lsrs	r3, r3, #15
 801d2d8:	f003 0301 	and.w	r3, r3, #1
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d007      	beq.n	801d2f0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	681a      	ldr	r2, [r3, #0]
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d2ee:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d2f6:	b2db      	uxtb	r3, r3
 801d2f8:	2b29      	cmp	r3, #41	; 0x29
 801d2fa:	d112      	bne.n	801d322 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	2228      	movs	r2, #40	; 0x28
 801d300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	2221      	movs	r2, #33	; 0x21
 801d308:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801d30a:	2101      	movs	r1, #1
 801d30c:	6878      	ldr	r0, [r7, #4]
 801d30e:	f000 ff2f 	bl	801e170 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	2200      	movs	r2, #0
 801d316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801d31a:	6878      	ldr	r0, [r7, #4]
 801d31c:	f7ff f9b5 	bl	801c68a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801d320:	e017      	b.n	801d352 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d328:	b2db      	uxtb	r3, r3
 801d32a:	2b2a      	cmp	r3, #42	; 0x2a
 801d32c:	d111      	bne.n	801d352 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	2228      	movs	r2, #40	; 0x28
 801d332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	2222      	movs	r2, #34	; 0x22
 801d33a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801d33c:	2102      	movs	r1, #2
 801d33e:	6878      	ldr	r0, [r7, #4]
 801d340:	f000 ff16 	bl	801e170 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	2200      	movs	r2, #0
 801d348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801d34c:	6878      	ldr	r0, [r7, #4]
 801d34e:	f7ff f9a6 	bl	801c69e <HAL_I2C_SlaveRxCpltCallback>
}
 801d352:	bf00      	nop
 801d354:	3710      	adds	r7, #16
 801d356:	46bd      	mov	sp, r7
 801d358:	bd80      	pop	{r7, pc}
	...

0801d35c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801d35c:	b580      	push	{r7, lr}
 801d35e:	b086      	sub	sp, #24
 801d360:	af00      	add	r7, sp, #0
 801d362:	6078      	str	r0, [r7, #4]
 801d364:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801d366:	683b      	ldr	r3, [r7, #0]
 801d368:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	2220      	movs	r2, #32
 801d370:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d378:	b2db      	uxtb	r3, r3
 801d37a:	2b21      	cmp	r3, #33	; 0x21
 801d37c:	d107      	bne.n	801d38e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801d37e:	2101      	movs	r1, #1
 801d380:	6878      	ldr	r0, [r7, #4]
 801d382:	f000 fef5 	bl	801e170 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	2211      	movs	r2, #17
 801d38a:	631a      	str	r2, [r3, #48]	; 0x30
 801d38c:	e00c      	b.n	801d3a8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d394:	b2db      	uxtb	r3, r3
 801d396:	2b22      	cmp	r3, #34	; 0x22
 801d398:	d106      	bne.n	801d3a8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801d39a:	2102      	movs	r1, #2
 801d39c:	6878      	ldr	r0, [r7, #4]
 801d39e:	f000 fee7 	bl	801e170 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	2212      	movs	r2, #18
 801d3a6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	6859      	ldr	r1, [r3, #4]
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	681a      	ldr	r2, [r3, #0]
 801d3b2:	4b4d      	ldr	r3, [pc, #308]	; (801d4e8 <I2C_ITMasterCplt+0x18c>)
 801d3b4:	400b      	ands	r3, r1
 801d3b6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	2200      	movs	r2, #0
 801d3bc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	4a4a      	ldr	r2, [pc, #296]	; (801d4ec <I2C_ITMasterCplt+0x190>)
 801d3c2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801d3c4:	697b      	ldr	r3, [r7, #20]
 801d3c6:	091b      	lsrs	r3, r3, #4
 801d3c8:	f003 0301 	and.w	r3, r3, #1
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d009      	beq.n	801d3e4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	2210      	movs	r2, #16
 801d3d6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d3dc:	f043 0204 	orr.w	r2, r3, #4
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d3ea:	b2db      	uxtb	r3, r3
 801d3ec:	2b60      	cmp	r3, #96	; 0x60
 801d3ee:	d10b      	bne.n	801d408 <I2C_ITMasterCplt+0xac>
 801d3f0:	697b      	ldr	r3, [r7, #20]
 801d3f2:	089b      	lsrs	r3, r3, #2
 801d3f4:	f003 0301 	and.w	r3, r3, #1
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d005      	beq.n	801d408 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d402:	b2db      	uxtb	r3, r3
 801d404:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801d406:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801d408:	6878      	ldr	r0, [r7, #4]
 801d40a:	f000 fbb6 	bl	801db7a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d412:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d41a:	b2db      	uxtb	r3, r3
 801d41c:	2b60      	cmp	r3, #96	; 0x60
 801d41e:	d002      	beq.n	801d426 <I2C_ITMasterCplt+0xca>
 801d420:	693b      	ldr	r3, [r7, #16]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d006      	beq.n	801d434 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d42a:	4619      	mov	r1, r3
 801d42c:	6878      	ldr	r0, [r7, #4]
 801d42e:	f000 faad 	bl	801d98c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801d432:	e054      	b.n	801d4de <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d43a:	b2db      	uxtb	r3, r3
 801d43c:	2b21      	cmp	r3, #33	; 0x21
 801d43e:	d124      	bne.n	801d48a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	2220      	movs	r2, #32
 801d444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	2200      	movs	r2, #0
 801d44c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d454:	b2db      	uxtb	r3, r3
 801d456:	2b40      	cmp	r3, #64	; 0x40
 801d458:	d10b      	bne.n	801d472 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	2200      	movs	r2, #0
 801d45e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	2200      	movs	r2, #0
 801d466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 801d46a:	6878      	ldr	r0, [r7, #4]
 801d46c:	f7ff f939 	bl	801c6e2 <HAL_I2C_MemTxCpltCallback>
}
 801d470:	e035      	b.n	801d4de <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	2200      	movs	r2, #0
 801d476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	2200      	movs	r2, #0
 801d47e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801d482:	6878      	ldr	r0, [r7, #4]
 801d484:	f7e8 fdc0 	bl	8006008 <HAL_I2C_MasterTxCpltCallback>
}
 801d488:	e029      	b.n	801d4de <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d490:	b2db      	uxtb	r3, r3
 801d492:	2b22      	cmp	r3, #34	; 0x22
 801d494:	d123      	bne.n	801d4de <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	2220      	movs	r2, #32
 801d49a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d4aa:	b2db      	uxtb	r3, r3
 801d4ac:	2b40      	cmp	r3, #64	; 0x40
 801d4ae:	d10b      	bne.n	801d4c8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	2200      	movs	r2, #0
 801d4b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	2200      	movs	r2, #0
 801d4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 801d4c0:	6878      	ldr	r0, [r7, #4]
 801d4c2:	f7ff f918 	bl	801c6f6 <HAL_I2C_MemRxCpltCallback>
}
 801d4c6:	e00a      	b.n	801d4de <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	2200      	movs	r2, #0
 801d4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801d4d8:	6878      	ldr	r0, [r7, #4]
 801d4da:	f7e8 fdb7 	bl	800604c <HAL_I2C_MasterRxCpltCallback>
}
 801d4de:	bf00      	nop
 801d4e0:	3718      	adds	r7, #24
 801d4e2:	46bd      	mov	sp, r7
 801d4e4:	bd80      	pop	{r7, pc}
 801d4e6:	bf00      	nop
 801d4e8:	fe00e800 	.word	0xfe00e800
 801d4ec:	ffff0000 	.word	0xffff0000

0801d4f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b086      	sub	sp, #24
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	6078      	str	r0, [r7, #4]
 801d4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801d502:	683b      	ldr	r3, [r7, #0]
 801d504:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d50c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	2220      	movs	r2, #32
 801d514:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801d516:	7bfb      	ldrb	r3, [r7, #15]
 801d518:	2b21      	cmp	r3, #33	; 0x21
 801d51a:	d002      	beq.n	801d522 <I2C_ITSlaveCplt+0x32>
 801d51c:	7bfb      	ldrb	r3, [r7, #15]
 801d51e:	2b29      	cmp	r3, #41	; 0x29
 801d520:	d108      	bne.n	801d534 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801d522:	f248 0101 	movw	r1, #32769	; 0x8001
 801d526:	6878      	ldr	r0, [r7, #4]
 801d528:	f000 fe22 	bl	801e170 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	2221      	movs	r2, #33	; 0x21
 801d530:	631a      	str	r2, [r3, #48]	; 0x30
 801d532:	e00d      	b.n	801d550 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801d534:	7bfb      	ldrb	r3, [r7, #15]
 801d536:	2b22      	cmp	r3, #34	; 0x22
 801d538:	d002      	beq.n	801d540 <I2C_ITSlaveCplt+0x50>
 801d53a:	7bfb      	ldrb	r3, [r7, #15]
 801d53c:	2b2a      	cmp	r3, #42	; 0x2a
 801d53e:	d107      	bne.n	801d550 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801d540:	f248 0102 	movw	r1, #32770	; 0x8002
 801d544:	6878      	ldr	r0, [r7, #4]
 801d546:	f000 fe13 	bl	801e170 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	2222      	movs	r2, #34	; 0x22
 801d54e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	685a      	ldr	r2, [r3, #4]
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	681b      	ldr	r3, [r3, #0]
 801d55a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801d55e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	681b      	ldr	r3, [r3, #0]
 801d564:	6859      	ldr	r1, [r3, #4]
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	681a      	ldr	r2, [r3, #0]
 801d56a:	4b80      	ldr	r3, [pc, #512]	; (801d76c <I2C_ITSlaveCplt+0x27c>)
 801d56c:	400b      	ands	r3, r1
 801d56e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801d570:	6878      	ldr	r0, [r7, #4]
 801d572:	f000 fb02 	bl	801db7a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801d576:	693b      	ldr	r3, [r7, #16]
 801d578:	0b9b      	lsrs	r3, r3, #14
 801d57a:	f003 0301 	and.w	r3, r3, #1
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d07a      	beq.n	801d678 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	681a      	ldr	r2, [r3, #0]
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d590:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d596:	2b00      	cmp	r3, #0
 801d598:	f000 8111 	beq.w	801d7be <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	4a73      	ldr	r2, [pc, #460]	; (801d770 <I2C_ITSlaveCplt+0x280>)
 801d5a4:	4293      	cmp	r3, r2
 801d5a6:	d059      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	4a71      	ldr	r2, [pc, #452]	; (801d774 <I2C_ITSlaveCplt+0x284>)
 801d5b0:	4293      	cmp	r3, r2
 801d5b2:	d053      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	4a6f      	ldr	r2, [pc, #444]	; (801d778 <I2C_ITSlaveCplt+0x288>)
 801d5bc:	4293      	cmp	r3, r2
 801d5be:	d04d      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	4a6d      	ldr	r2, [pc, #436]	; (801d77c <I2C_ITSlaveCplt+0x28c>)
 801d5c8:	4293      	cmp	r3, r2
 801d5ca:	d047      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	4a6b      	ldr	r2, [pc, #428]	; (801d780 <I2C_ITSlaveCplt+0x290>)
 801d5d4:	4293      	cmp	r3, r2
 801d5d6:	d041      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	4a69      	ldr	r2, [pc, #420]	; (801d784 <I2C_ITSlaveCplt+0x294>)
 801d5e0:	4293      	cmp	r3, r2
 801d5e2:	d03b      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	4a67      	ldr	r2, [pc, #412]	; (801d788 <I2C_ITSlaveCplt+0x298>)
 801d5ec:	4293      	cmp	r3, r2
 801d5ee:	d035      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	4a65      	ldr	r2, [pc, #404]	; (801d78c <I2C_ITSlaveCplt+0x29c>)
 801d5f8:	4293      	cmp	r3, r2
 801d5fa:	d02f      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	4a63      	ldr	r2, [pc, #396]	; (801d790 <I2C_ITSlaveCplt+0x2a0>)
 801d604:	4293      	cmp	r3, r2
 801d606:	d029      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	4a61      	ldr	r2, [pc, #388]	; (801d794 <I2C_ITSlaveCplt+0x2a4>)
 801d610:	4293      	cmp	r3, r2
 801d612:	d023      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	4a5f      	ldr	r2, [pc, #380]	; (801d798 <I2C_ITSlaveCplt+0x2a8>)
 801d61c:	4293      	cmp	r3, r2
 801d61e:	d01d      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	4a5d      	ldr	r2, [pc, #372]	; (801d79c <I2C_ITSlaveCplt+0x2ac>)
 801d628:	4293      	cmp	r3, r2
 801d62a:	d017      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	4a5b      	ldr	r2, [pc, #364]	; (801d7a0 <I2C_ITSlaveCplt+0x2b0>)
 801d634:	4293      	cmp	r3, r2
 801d636:	d011      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	4a59      	ldr	r2, [pc, #356]	; (801d7a4 <I2C_ITSlaveCplt+0x2b4>)
 801d640:	4293      	cmp	r3, r2
 801d642:	d00b      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	4a57      	ldr	r2, [pc, #348]	; (801d7a8 <I2C_ITSlaveCplt+0x2b8>)
 801d64c:	4293      	cmp	r3, r2
 801d64e:	d005      	beq.n	801d65c <I2C_ITSlaveCplt+0x16c>
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	4a55      	ldr	r2, [pc, #340]	; (801d7ac <I2C_ITSlaveCplt+0x2bc>)
 801d658:	4293      	cmp	r3, r2
 801d65a:	d105      	bne.n	801d668 <I2C_ITSlaveCplt+0x178>
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d660:	681b      	ldr	r3, [r3, #0]
 801d662:	685b      	ldr	r3, [r3, #4]
 801d664:	b29b      	uxth	r3, r3
 801d666:	e004      	b.n	801d672 <I2C_ITSlaveCplt+0x182>
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	685b      	ldr	r3, [r3, #4]
 801d670:	b29b      	uxth	r3, r3
 801d672:	687a      	ldr	r2, [r7, #4]
 801d674:	8553      	strh	r3, [r2, #42]	; 0x2a
 801d676:	e0a2      	b.n	801d7be <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801d678:	693b      	ldr	r3, [r7, #16]
 801d67a:	0bdb      	lsrs	r3, r3, #15
 801d67c:	f003 0301 	and.w	r3, r3, #1
 801d680:	2b00      	cmp	r3, #0
 801d682:	f000 809c 	beq.w	801d7be <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	681a      	ldr	r2, [r3, #0]
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d694:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	f000 808f 	beq.w	801d7be <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	4a32      	ldr	r2, [pc, #200]	; (801d770 <I2C_ITSlaveCplt+0x280>)
 801d6a8:	4293      	cmp	r3, r2
 801d6aa:	d059      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	4a30      	ldr	r2, [pc, #192]	; (801d774 <I2C_ITSlaveCplt+0x284>)
 801d6b4:	4293      	cmp	r3, r2
 801d6b6:	d053      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	4a2e      	ldr	r2, [pc, #184]	; (801d778 <I2C_ITSlaveCplt+0x288>)
 801d6c0:	4293      	cmp	r3, r2
 801d6c2:	d04d      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	4a2c      	ldr	r2, [pc, #176]	; (801d77c <I2C_ITSlaveCplt+0x28c>)
 801d6cc:	4293      	cmp	r3, r2
 801d6ce:	d047      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	4a2a      	ldr	r2, [pc, #168]	; (801d780 <I2C_ITSlaveCplt+0x290>)
 801d6d8:	4293      	cmp	r3, r2
 801d6da:	d041      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	4a28      	ldr	r2, [pc, #160]	; (801d784 <I2C_ITSlaveCplt+0x294>)
 801d6e4:	4293      	cmp	r3, r2
 801d6e6:	d03b      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	4a26      	ldr	r2, [pc, #152]	; (801d788 <I2C_ITSlaveCplt+0x298>)
 801d6f0:	4293      	cmp	r3, r2
 801d6f2:	d035      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	4a24      	ldr	r2, [pc, #144]	; (801d78c <I2C_ITSlaveCplt+0x29c>)
 801d6fc:	4293      	cmp	r3, r2
 801d6fe:	d02f      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	4a22      	ldr	r2, [pc, #136]	; (801d790 <I2C_ITSlaveCplt+0x2a0>)
 801d708:	4293      	cmp	r3, r2
 801d70a:	d029      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	4a20      	ldr	r2, [pc, #128]	; (801d794 <I2C_ITSlaveCplt+0x2a4>)
 801d714:	4293      	cmp	r3, r2
 801d716:	d023      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	4a1e      	ldr	r2, [pc, #120]	; (801d798 <I2C_ITSlaveCplt+0x2a8>)
 801d720:	4293      	cmp	r3, r2
 801d722:	d01d      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	4a1c      	ldr	r2, [pc, #112]	; (801d79c <I2C_ITSlaveCplt+0x2ac>)
 801d72c:	4293      	cmp	r3, r2
 801d72e:	d017      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	4a1a      	ldr	r2, [pc, #104]	; (801d7a0 <I2C_ITSlaveCplt+0x2b0>)
 801d738:	4293      	cmp	r3, r2
 801d73a:	d011      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	4a18      	ldr	r2, [pc, #96]	; (801d7a4 <I2C_ITSlaveCplt+0x2b4>)
 801d744:	4293      	cmp	r3, r2
 801d746:	d00b      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	4a16      	ldr	r2, [pc, #88]	; (801d7a8 <I2C_ITSlaveCplt+0x2b8>)
 801d750:	4293      	cmp	r3, r2
 801d752:	d005      	beq.n	801d760 <I2C_ITSlaveCplt+0x270>
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	4a14      	ldr	r2, [pc, #80]	; (801d7ac <I2C_ITSlaveCplt+0x2bc>)
 801d75c:	4293      	cmp	r3, r2
 801d75e:	d127      	bne.n	801d7b0 <I2C_ITSlaveCplt+0x2c0>
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	685b      	ldr	r3, [r3, #4]
 801d768:	b29b      	uxth	r3, r3
 801d76a:	e026      	b.n	801d7ba <I2C_ITSlaveCplt+0x2ca>
 801d76c:	fe00e800 	.word	0xfe00e800
 801d770:	40020010 	.word	0x40020010
 801d774:	40020028 	.word	0x40020028
 801d778:	40020040 	.word	0x40020040
 801d77c:	40020058 	.word	0x40020058
 801d780:	40020070 	.word	0x40020070
 801d784:	40020088 	.word	0x40020088
 801d788:	400200a0 	.word	0x400200a0
 801d78c:	400200b8 	.word	0x400200b8
 801d790:	40020410 	.word	0x40020410
 801d794:	40020428 	.word	0x40020428
 801d798:	40020440 	.word	0x40020440
 801d79c:	40020458 	.word	0x40020458
 801d7a0:	40020470 	.word	0x40020470
 801d7a4:	40020488 	.word	0x40020488
 801d7a8:	400204a0 	.word	0x400204a0
 801d7ac:	400204b8 	.word	0x400204b8
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	685b      	ldr	r3, [r3, #4]
 801d7b8:	b29b      	uxth	r3, r3
 801d7ba:	687a      	ldr	r2, [r7, #4]
 801d7bc:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801d7be:	697b      	ldr	r3, [r7, #20]
 801d7c0:	089b      	lsrs	r3, r3, #2
 801d7c2:	f003 0301 	and.w	r3, r3, #1
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d020      	beq.n	801d80c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801d7ca:	697b      	ldr	r3, [r7, #20]
 801d7cc:	f023 0304 	bic.w	r3, r3, #4
 801d7d0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7dc:	b2d2      	uxtb	r2, r2
 801d7de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7e4:	1c5a      	adds	r2, r3, #1
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d00c      	beq.n	801d80c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d7f6:	3b01      	subs	r3, #1
 801d7f8:	b29a      	uxth	r2, r3
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d802:	b29b      	uxth	r3, r3
 801d804:	3b01      	subs	r3, #1
 801d806:	b29a      	uxth	r2, r3
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d810:	b29b      	uxth	r3, r3
 801d812:	2b00      	cmp	r3, #0
 801d814:	d005      	beq.n	801d822 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d81a:	f043 0204 	orr.w	r2, r3, #4
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	2200      	movs	r2, #0
 801d826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	2200      	movs	r2, #0
 801d82e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d834:	2b00      	cmp	r3, #0
 801d836:	d010      	beq.n	801d85a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d83c:	4619      	mov	r1, r3
 801d83e:	6878      	ldr	r0, [r7, #4]
 801d840:	f000 f8a4 	bl	801d98c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d84a:	b2db      	uxtb	r3, r3
 801d84c:	2b28      	cmp	r3, #40	; 0x28
 801d84e:	d141      	bne.n	801d8d4 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801d850:	6979      	ldr	r1, [r7, #20]
 801d852:	6878      	ldr	r0, [r7, #4]
 801d854:	f000 f844 	bl	801d8e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801d858:	e03c      	b.n	801d8d4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d85e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d862:	d014      	beq.n	801d88e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 801d864:	6878      	ldr	r0, [r7, #4]
 801d866:	f7ff fd1a 	bl	801d29e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	4a1b      	ldr	r2, [pc, #108]	; (801d8dc <I2C_ITSlaveCplt+0x3ec>)
 801d86e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	2220      	movs	r2, #32
 801d874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	2200      	movs	r2, #0
 801d87c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	2200      	movs	r2, #0
 801d882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801d886:	6878      	ldr	r0, [r7, #4]
 801d888:	f7fe ff21 	bl	801c6ce <HAL_I2C_ListenCpltCallback>
}
 801d88c:	e022      	b.n	801d8d4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d894:	b2db      	uxtb	r3, r3
 801d896:	2b22      	cmp	r3, #34	; 0x22
 801d898:	d10e      	bne.n	801d8b8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	2220      	movs	r2, #32
 801d89e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	2200      	movs	r2, #0
 801d8a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	2200      	movs	r2, #0
 801d8ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801d8b0:	6878      	ldr	r0, [r7, #4]
 801d8b2:	f7fe fef4 	bl	801c69e <HAL_I2C_SlaveRxCpltCallback>
}
 801d8b6:	e00d      	b.n	801d8d4 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	2220      	movs	r2, #32
 801d8bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801d8ce:	6878      	ldr	r0, [r7, #4]
 801d8d0:	f7fe fedb 	bl	801c68a <HAL_I2C_SlaveTxCpltCallback>
}
 801d8d4:	bf00      	nop
 801d8d6:	3718      	adds	r7, #24
 801d8d8:	46bd      	mov	sp, r7
 801d8da:	bd80      	pop	{r7, pc}
 801d8dc:	ffff0000 	.word	0xffff0000

0801d8e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	b082      	sub	sp, #8
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	6078      	str	r0, [r7, #4]
 801d8e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	4a26      	ldr	r2, [pc, #152]	; (801d988 <I2C_ITListenCplt+0xa8>)
 801d8ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	2220      	movs	r2, #32
 801d8fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	2200      	movs	r2, #0
 801d902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	2200      	movs	r2, #0
 801d90a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801d90c:	683b      	ldr	r3, [r7, #0]
 801d90e:	089b      	lsrs	r3, r3, #2
 801d910:	f003 0301 	and.w	r3, r3, #1
 801d914:	2b00      	cmp	r3, #0
 801d916:	d022      	beq.n	801d95e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d922:	b2d2      	uxtb	r2, r2
 801d924:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d92a:	1c5a      	adds	r2, r3, #1
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d934:	2b00      	cmp	r3, #0
 801d936:	d012      	beq.n	801d95e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d93c:	3b01      	subs	r3, #1
 801d93e:	b29a      	uxth	r2, r3
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d948:	b29b      	uxth	r3, r3
 801d94a:	3b01      	subs	r3, #1
 801d94c:	b29a      	uxth	r2, r3
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d956:	f043 0204 	orr.w	r2, r3, #4
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801d95e:	f248 0103 	movw	r1, #32771	; 0x8003
 801d962:	6878      	ldr	r0, [r7, #4]
 801d964:	f000 fc04 	bl	801e170 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	2210      	movs	r2, #16
 801d96e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	2200      	movs	r2, #0
 801d974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	f7fe fea8 	bl	801c6ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801d97e:	bf00      	nop
 801d980:	3708      	adds	r7, #8
 801d982:	46bd      	mov	sp, r7
 801d984:	bd80      	pop	{r7, pc}
 801d986:	bf00      	nop
 801d988:	ffff0000 	.word	0xffff0000

0801d98c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801d98c:	b580      	push	{r7, lr}
 801d98e:	b084      	sub	sp, #16
 801d990:	af00      	add	r7, sp, #0
 801d992:	6078      	str	r0, [r7, #4]
 801d994:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d99c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	2200      	movs	r2, #0
 801d9a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	4a5d      	ldr	r2, [pc, #372]	; (801db20 <I2C_ITError+0x194>)
 801d9aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d9b6:	683b      	ldr	r3, [r7, #0]
 801d9b8:	431a      	orrs	r2, r3
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801d9be:	7bfb      	ldrb	r3, [r7, #15]
 801d9c0:	2b28      	cmp	r3, #40	; 0x28
 801d9c2:	d005      	beq.n	801d9d0 <I2C_ITError+0x44>
 801d9c4:	7bfb      	ldrb	r3, [r7, #15]
 801d9c6:	2b29      	cmp	r3, #41	; 0x29
 801d9c8:	d002      	beq.n	801d9d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801d9ca:	7bfb      	ldrb	r3, [r7, #15]
 801d9cc:	2b2a      	cmp	r3, #42	; 0x2a
 801d9ce:	d10b      	bne.n	801d9e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801d9d0:	2103      	movs	r1, #3
 801d9d2:	6878      	ldr	r0, [r7, #4]
 801d9d4:	f000 fbcc 	bl	801e170 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	2228      	movs	r2, #40	; 0x28
 801d9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	4a50      	ldr	r2, [pc, #320]	; (801db24 <I2C_ITError+0x198>)
 801d9e4:	635a      	str	r2, [r3, #52]	; 0x34
 801d9e6:	e011      	b.n	801da0c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801d9e8:	f248 0103 	movw	r1, #32771	; 0x8003
 801d9ec:	6878      	ldr	r0, [r7, #4]
 801d9ee:	f000 fbbf 	bl	801e170 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d9f8:	b2db      	uxtb	r3, r3
 801d9fa:	2b60      	cmp	r3, #96	; 0x60
 801d9fc:	d003      	beq.n	801da06 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	2220      	movs	r2, #32
 801da02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	2200      	movs	r2, #0
 801da0a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da10:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da16:	2b00      	cmp	r3, #0
 801da18:	d039      	beq.n	801da8e <I2C_ITError+0x102>
 801da1a:	68bb      	ldr	r3, [r7, #8]
 801da1c:	2b11      	cmp	r3, #17
 801da1e:	d002      	beq.n	801da26 <I2C_ITError+0x9a>
 801da20:	68bb      	ldr	r3, [r7, #8]
 801da22:	2b21      	cmp	r3, #33	; 0x21
 801da24:	d133      	bne.n	801da8e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801da30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801da34:	d107      	bne.n	801da46 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	681a      	ldr	r2, [r3, #0]
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801da44:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da4a:	4618      	mov	r0, r3
 801da4c:	f7fd f8cc 	bl	801abe8 <HAL_DMA_GetState>
 801da50:	4603      	mov	r3, r0
 801da52:	2b01      	cmp	r3, #1
 801da54:	d017      	beq.n	801da86 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da5a:	4a33      	ldr	r2, [pc, #204]	; (801db28 <I2C_ITError+0x19c>)
 801da5c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	2200      	movs	r2, #0
 801da62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da6a:	4618      	mov	r0, r3
 801da6c:	f7fb ff4e 	bl	801990c <HAL_DMA_Abort_IT>
 801da70:	4603      	mov	r3, r0
 801da72:	2b00      	cmp	r3, #0
 801da74:	d04d      	beq.n	801db12 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da7c:	687a      	ldr	r2, [r7, #4]
 801da7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801da80:	4610      	mov	r0, r2
 801da82:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801da84:	e045      	b.n	801db12 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801da86:	6878      	ldr	r0, [r7, #4]
 801da88:	f000 f850 	bl	801db2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801da8c:	e041      	b.n	801db12 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da92:	2b00      	cmp	r3, #0
 801da94:	d039      	beq.n	801db0a <I2C_ITError+0x17e>
 801da96:	68bb      	ldr	r3, [r7, #8]
 801da98:	2b12      	cmp	r3, #18
 801da9a:	d002      	beq.n	801daa2 <I2C_ITError+0x116>
 801da9c:	68bb      	ldr	r3, [r7, #8]
 801da9e:	2b22      	cmp	r3, #34	; 0x22
 801daa0:	d133      	bne.n	801db0a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801daac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dab0:	d107      	bne.n	801dac2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	681a      	ldr	r2, [r3, #0]
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801dac0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dac6:	4618      	mov	r0, r3
 801dac8:	f7fd f88e 	bl	801abe8 <HAL_DMA_GetState>
 801dacc:	4603      	mov	r3, r0
 801dace:	2b01      	cmp	r3, #1
 801dad0:	d017      	beq.n	801db02 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dad6:	4a14      	ldr	r2, [pc, #80]	; (801db28 <I2C_ITError+0x19c>)
 801dad8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	2200      	movs	r2, #0
 801dade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dae6:	4618      	mov	r0, r3
 801dae8:	f7fb ff10 	bl	801990c <HAL_DMA_Abort_IT>
 801daec:	4603      	mov	r3, r0
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d011      	beq.n	801db16 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801daf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801daf8:	687a      	ldr	r2, [r7, #4]
 801dafa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801dafc:	4610      	mov	r0, r2
 801dafe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801db00:	e009      	b.n	801db16 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801db02:	6878      	ldr	r0, [r7, #4]
 801db04:	f000 f812 	bl	801db2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801db08:	e005      	b.n	801db16 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801db0a:	6878      	ldr	r0, [r7, #4]
 801db0c:	f000 f80e 	bl	801db2c <I2C_TreatErrorCallback>
  }
}
 801db10:	e002      	b.n	801db18 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801db12:	bf00      	nop
 801db14:	e000      	b.n	801db18 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801db16:	bf00      	nop
}
 801db18:	bf00      	nop
 801db1a:	3710      	adds	r7, #16
 801db1c:	46bd      	mov	sp, r7
 801db1e:	bd80      	pop	{r7, pc}
 801db20:	ffff0000 	.word	0xffff0000
 801db24:	0801c96f 	.word	0x0801c96f
 801db28:	0801dbc3 	.word	0x0801dbc3

0801db2c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801db2c:	b580      	push	{r7, lr}
 801db2e:	b082      	sub	sp, #8
 801db30:	af00      	add	r7, sp, #0
 801db32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801db3a:	b2db      	uxtb	r3, r3
 801db3c:	2b60      	cmp	r3, #96	; 0x60
 801db3e:	d10e      	bne.n	801db5e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	2220      	movs	r2, #32
 801db44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	2200      	movs	r2, #0
 801db4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	2200      	movs	r2, #0
 801db52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801db56:	6878      	ldr	r0, [r7, #4]
 801db58:	f7fe fdd7 	bl	801c70a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801db5c:	e009      	b.n	801db72 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	2200      	movs	r2, #0
 801db62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	2200      	movs	r2, #0
 801db68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 801db6c:	6878      	ldr	r0, [r7, #4]
 801db6e:	f7e8 fa07 	bl	8005f80 <HAL_I2C_ErrorCallback>
}
 801db72:	bf00      	nop
 801db74:	3708      	adds	r7, #8
 801db76:	46bd      	mov	sp, r7
 801db78:	bd80      	pop	{r7, pc}

0801db7a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801db7a:	b480      	push	{r7}
 801db7c:	b083      	sub	sp, #12
 801db7e:	af00      	add	r7, sp, #0
 801db80:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	699b      	ldr	r3, [r3, #24]
 801db88:	f003 0302 	and.w	r3, r3, #2
 801db8c:	2b02      	cmp	r3, #2
 801db8e:	d103      	bne.n	801db98 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	2200      	movs	r2, #0
 801db96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	699b      	ldr	r3, [r3, #24]
 801db9e:	f003 0301 	and.w	r3, r3, #1
 801dba2:	2b01      	cmp	r3, #1
 801dba4:	d007      	beq.n	801dbb6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	699a      	ldr	r2, [r3, #24]
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	f042 0201 	orr.w	r2, r2, #1
 801dbb4:	619a      	str	r2, [r3, #24]
  }
}
 801dbb6:	bf00      	nop
 801dbb8:	370c      	adds	r7, #12
 801dbba:	46bd      	mov	sp, r7
 801dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbc0:	4770      	bx	lr

0801dbc2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801dbc2:	b580      	push	{r7, lr}
 801dbc4:	b084      	sub	sp, #16
 801dbc6:	af00      	add	r7, sp, #0
 801dbc8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d003      	beq.n	801dbe0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbdc:	2200      	movs	r2, #0
 801dbde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d003      	beq.n	801dbf0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801dbe8:	68fb      	ldr	r3, [r7, #12]
 801dbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dbec:	2200      	movs	r2, #0
 801dbee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 801dbf0:	68f8      	ldr	r0, [r7, #12]
 801dbf2:	f7ff ff9b 	bl	801db2c <I2C_TreatErrorCallback>
}
 801dbf6:	bf00      	nop
 801dbf8:	3710      	adds	r7, #16
 801dbfa:	46bd      	mov	sp, r7
 801dbfc:	bd80      	pop	{r7, pc}

0801dbfe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801dbfe:	b580      	push	{r7, lr}
 801dc00:	b084      	sub	sp, #16
 801dc02:	af00      	add	r7, sp, #0
 801dc04:	60f8      	str	r0, [r7, #12]
 801dc06:	60b9      	str	r1, [r7, #8]
 801dc08:	603b      	str	r3, [r7, #0]
 801dc0a:	4613      	mov	r3, r2
 801dc0c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801dc0e:	e022      	b.n	801dc56 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801dc10:	683b      	ldr	r3, [r7, #0]
 801dc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc16:	d01e      	beq.n	801dc56 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801dc18:	f7f8 fc6a 	bl	80164f0 <HAL_GetTick>
 801dc1c:	4602      	mov	r2, r0
 801dc1e:	69bb      	ldr	r3, [r7, #24]
 801dc20:	1ad3      	subs	r3, r2, r3
 801dc22:	683a      	ldr	r2, [r7, #0]
 801dc24:	429a      	cmp	r2, r3
 801dc26:	d302      	bcc.n	801dc2e <I2C_WaitOnFlagUntilTimeout+0x30>
 801dc28:	683b      	ldr	r3, [r7, #0]
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d113      	bne.n	801dc56 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801dc2e:	68fb      	ldr	r3, [r7, #12]
 801dc30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc32:	f043 0220 	orr.w	r2, r3, #32
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801dc3a:	68fb      	ldr	r3, [r7, #12]
 801dc3c:	2220      	movs	r2, #32
 801dc3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	2200      	movs	r2, #0
 801dc46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dc4a:	68fb      	ldr	r3, [r7, #12]
 801dc4c:	2200      	movs	r2, #0
 801dc4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801dc52:	2301      	movs	r3, #1
 801dc54:	e00f      	b.n	801dc76 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	699a      	ldr	r2, [r3, #24]
 801dc5c:	68bb      	ldr	r3, [r7, #8]
 801dc5e:	4013      	ands	r3, r2
 801dc60:	68ba      	ldr	r2, [r7, #8]
 801dc62:	429a      	cmp	r2, r3
 801dc64:	bf0c      	ite	eq
 801dc66:	2301      	moveq	r3, #1
 801dc68:	2300      	movne	r3, #0
 801dc6a:	b2db      	uxtb	r3, r3
 801dc6c:	461a      	mov	r2, r3
 801dc6e:	79fb      	ldrb	r3, [r7, #7]
 801dc70:	429a      	cmp	r2, r3
 801dc72:	d0cd      	beq.n	801dc10 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801dc74:	2300      	movs	r3, #0
}
 801dc76:	4618      	mov	r0, r3
 801dc78:	3710      	adds	r7, #16
 801dc7a:	46bd      	mov	sp, r7
 801dc7c:	bd80      	pop	{r7, pc}

0801dc7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801dc7e:	b580      	push	{r7, lr}
 801dc80:	b084      	sub	sp, #16
 801dc82:	af00      	add	r7, sp, #0
 801dc84:	60f8      	str	r0, [r7, #12]
 801dc86:	60b9      	str	r1, [r7, #8]
 801dc88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801dc8a:	e02c      	b.n	801dce6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801dc8c:	687a      	ldr	r2, [r7, #4]
 801dc8e:	68b9      	ldr	r1, [r7, #8]
 801dc90:	68f8      	ldr	r0, [r7, #12]
 801dc92:	f000 f8eb 	bl	801de6c <I2C_IsErrorOccurred>
 801dc96:	4603      	mov	r3, r0
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d001      	beq.n	801dca0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	e02a      	b.n	801dcf6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dca6:	d01e      	beq.n	801dce6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801dca8:	f7f8 fc22 	bl	80164f0 <HAL_GetTick>
 801dcac:	4602      	mov	r2, r0
 801dcae:	687b      	ldr	r3, [r7, #4]
 801dcb0:	1ad3      	subs	r3, r2, r3
 801dcb2:	68ba      	ldr	r2, [r7, #8]
 801dcb4:	429a      	cmp	r2, r3
 801dcb6:	d302      	bcc.n	801dcbe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801dcb8:	68bb      	ldr	r3, [r7, #8]
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d113      	bne.n	801dce6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dcc2:	f043 0220 	orr.w	r2, r3, #32
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	2220      	movs	r2, #32
 801dcce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	2200      	movs	r2, #0
 801dcde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801dce2:	2301      	movs	r3, #1
 801dce4:	e007      	b.n	801dcf6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	699b      	ldr	r3, [r3, #24]
 801dcec:	f003 0302 	and.w	r3, r3, #2
 801dcf0:	2b02      	cmp	r3, #2
 801dcf2:	d1cb      	bne.n	801dc8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801dcf4:	2300      	movs	r3, #0
}
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	3710      	adds	r7, #16
 801dcfa:	46bd      	mov	sp, r7
 801dcfc:	bd80      	pop	{r7, pc}

0801dcfe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801dcfe:	b580      	push	{r7, lr}
 801dd00:	b084      	sub	sp, #16
 801dd02:	af00      	add	r7, sp, #0
 801dd04:	60f8      	str	r0, [r7, #12]
 801dd06:	60b9      	str	r1, [r7, #8]
 801dd08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801dd0a:	e028      	b.n	801dd5e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801dd0c:	687a      	ldr	r2, [r7, #4]
 801dd0e:	68b9      	ldr	r1, [r7, #8]
 801dd10:	68f8      	ldr	r0, [r7, #12]
 801dd12:	f000 f8ab 	bl	801de6c <I2C_IsErrorOccurred>
 801dd16:	4603      	mov	r3, r0
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d001      	beq.n	801dd20 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801dd1c:	2301      	movs	r3, #1
 801dd1e:	e026      	b.n	801dd6e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801dd20:	f7f8 fbe6 	bl	80164f0 <HAL_GetTick>
 801dd24:	4602      	mov	r2, r0
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	1ad3      	subs	r3, r2, r3
 801dd2a:	68ba      	ldr	r2, [r7, #8]
 801dd2c:	429a      	cmp	r2, r3
 801dd2e:	d302      	bcc.n	801dd36 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801dd30:	68bb      	ldr	r3, [r7, #8]
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	d113      	bne.n	801dd5e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dd3a:	f043 0220 	orr.w	r2, r3, #32
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	2220      	movs	r2, #32
 801dd46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	2200      	movs	r2, #0
 801dd4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	2200      	movs	r2, #0
 801dd56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801dd5a:	2301      	movs	r3, #1
 801dd5c:	e007      	b.n	801dd6e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801dd5e:	68fb      	ldr	r3, [r7, #12]
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	699b      	ldr	r3, [r3, #24]
 801dd64:	f003 0320 	and.w	r3, r3, #32
 801dd68:	2b20      	cmp	r3, #32
 801dd6a:	d1cf      	bne.n	801dd0c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801dd6c:	2300      	movs	r3, #0
}
 801dd6e:	4618      	mov	r0, r3
 801dd70:	3710      	adds	r7, #16
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}
	...

0801dd78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801dd78:	b580      	push	{r7, lr}
 801dd7a:	b084      	sub	sp, #16
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	60f8      	str	r0, [r7, #12]
 801dd80:	60b9      	str	r1, [r7, #8]
 801dd82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801dd84:	e064      	b.n	801de50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801dd86:	687a      	ldr	r2, [r7, #4]
 801dd88:	68b9      	ldr	r1, [r7, #8]
 801dd8a:	68f8      	ldr	r0, [r7, #12]
 801dd8c:	f000 f86e 	bl	801de6c <I2C_IsErrorOccurred>
 801dd90:	4603      	mov	r3, r0
 801dd92:	2b00      	cmp	r3, #0
 801dd94:	d001      	beq.n	801dd9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801dd96:	2301      	movs	r3, #1
 801dd98:	e062      	b.n	801de60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801dd9a:	68fb      	ldr	r3, [r7, #12]
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	699b      	ldr	r3, [r3, #24]
 801dda0:	f003 0320 	and.w	r3, r3, #32
 801dda4:	2b20      	cmp	r3, #32
 801dda6:	d138      	bne.n	801de1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	699b      	ldr	r3, [r3, #24]
 801ddae:	f003 0304 	and.w	r3, r3, #4
 801ddb2:	2b04      	cmp	r3, #4
 801ddb4:	d105      	bne.n	801ddc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d001      	beq.n	801ddc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	e04e      	b.n	801de60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	699b      	ldr	r3, [r3, #24]
 801ddc8:	f003 0310 	and.w	r3, r3, #16
 801ddcc:	2b10      	cmp	r3, #16
 801ddce:	d107      	bne.n	801dde0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	2210      	movs	r2, #16
 801ddd6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801ddd8:	68fb      	ldr	r3, [r7, #12]
 801ddda:	2204      	movs	r2, #4
 801dddc:	645a      	str	r2, [r3, #68]	; 0x44
 801ddde:	e002      	b.n	801dde6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801dde0:	68fb      	ldr	r3, [r7, #12]
 801dde2:	2200      	movs	r2, #0
 801dde4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801dde6:	68fb      	ldr	r3, [r7, #12]
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	2220      	movs	r2, #32
 801ddec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	6859      	ldr	r1, [r3, #4]
 801ddf4:	68fb      	ldr	r3, [r7, #12]
 801ddf6:	681a      	ldr	r2, [r3, #0]
 801ddf8:	4b1b      	ldr	r3, [pc, #108]	; (801de68 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 801ddfa:	400b      	ands	r3, r1
 801ddfc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	2220      	movs	r2, #32
 801de02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801de06:	68fb      	ldr	r3, [r7, #12]
 801de08:	2200      	movs	r2, #0
 801de0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801de0e:	68fb      	ldr	r3, [r7, #12]
 801de10:	2200      	movs	r2, #0
 801de12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801de16:	2301      	movs	r3, #1
 801de18:	e022      	b.n	801de60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801de1a:	f7f8 fb69 	bl	80164f0 <HAL_GetTick>
 801de1e:	4602      	mov	r2, r0
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	1ad3      	subs	r3, r2, r3
 801de24:	68ba      	ldr	r2, [r7, #8]
 801de26:	429a      	cmp	r2, r3
 801de28:	d302      	bcc.n	801de30 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801de2a:	68bb      	ldr	r3, [r7, #8]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d10f      	bne.n	801de50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801de34:	f043 0220 	orr.w	r2, r3, #32
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	2220      	movs	r2, #32
 801de40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	2200      	movs	r2, #0
 801de48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801de4c:	2301      	movs	r3, #1
 801de4e:	e007      	b.n	801de60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	699b      	ldr	r3, [r3, #24]
 801de56:	f003 0304 	and.w	r3, r3, #4
 801de5a:	2b04      	cmp	r3, #4
 801de5c:	d193      	bne.n	801dd86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801de5e:	2300      	movs	r3, #0
}
 801de60:	4618      	mov	r0, r3
 801de62:	3710      	adds	r7, #16
 801de64:	46bd      	mov	sp, r7
 801de66:	bd80      	pop	{r7, pc}
 801de68:	fe00e800 	.word	0xfe00e800

0801de6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801de6c:	b580      	push	{r7, lr}
 801de6e:	b08a      	sub	sp, #40	; 0x28
 801de70:	af00      	add	r7, sp, #0
 801de72:	60f8      	str	r0, [r7, #12]
 801de74:	60b9      	str	r1, [r7, #8]
 801de76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801de78:	2300      	movs	r3, #0
 801de7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801de7e:	68fb      	ldr	r3, [r7, #12]
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	699b      	ldr	r3, [r3, #24]
 801de84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801de86:	2300      	movs	r3, #0
 801de88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801de8e:	69bb      	ldr	r3, [r7, #24]
 801de90:	f003 0310 	and.w	r3, r3, #16
 801de94:	2b00      	cmp	r3, #0
 801de96:	d075      	beq.n	801df84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	2210      	movs	r2, #16
 801de9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801dea0:	e056      	b.n	801df50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801dea2:	68bb      	ldr	r3, [r7, #8]
 801dea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dea8:	d052      	beq.n	801df50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801deaa:	f7f8 fb21 	bl	80164f0 <HAL_GetTick>
 801deae:	4602      	mov	r2, r0
 801deb0:	69fb      	ldr	r3, [r7, #28]
 801deb2:	1ad3      	subs	r3, r2, r3
 801deb4:	68ba      	ldr	r2, [r7, #8]
 801deb6:	429a      	cmp	r2, r3
 801deb8:	d302      	bcc.n	801dec0 <I2C_IsErrorOccurred+0x54>
 801deba:	68bb      	ldr	r3, [r7, #8]
 801debc:	2b00      	cmp	r3, #0
 801debe:	d147      	bne.n	801df50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	685b      	ldr	r3, [r3, #4]
 801dec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801deca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ded2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	699b      	ldr	r3, [r3, #24]
 801deda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801dede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dee2:	d12e      	bne.n	801df42 <I2C_IsErrorOccurred+0xd6>
 801dee4:	697b      	ldr	r3, [r7, #20]
 801dee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801deea:	d02a      	beq.n	801df42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 801deec:	7cfb      	ldrb	r3, [r7, #19]
 801deee:	2b20      	cmp	r3, #32
 801def0:	d027      	beq.n	801df42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	681b      	ldr	r3, [r3, #0]
 801def6:	685a      	ldr	r2, [r3, #4]
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801df00:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801df02:	f7f8 faf5 	bl	80164f0 <HAL_GetTick>
 801df06:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801df08:	e01b      	b.n	801df42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801df0a:	f7f8 faf1 	bl	80164f0 <HAL_GetTick>
 801df0e:	4602      	mov	r2, r0
 801df10:	69fb      	ldr	r3, [r7, #28]
 801df12:	1ad3      	subs	r3, r2, r3
 801df14:	2b19      	cmp	r3, #25
 801df16:	d914      	bls.n	801df42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801df18:	68fb      	ldr	r3, [r7, #12]
 801df1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801df1c:	f043 0220 	orr.w	r2, r3, #32
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	2220      	movs	r2, #32
 801df28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 801df2c:	68fb      	ldr	r3, [r7, #12]
 801df2e:	2200      	movs	r2, #0
 801df30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	2200      	movs	r2, #0
 801df38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 801df3c:	2301      	movs	r3, #1
 801df3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	699b      	ldr	r3, [r3, #24]
 801df48:	f003 0320 	and.w	r3, r3, #32
 801df4c:	2b20      	cmp	r3, #32
 801df4e:	d1dc      	bne.n	801df0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	699b      	ldr	r3, [r3, #24]
 801df56:	f003 0320 	and.w	r3, r3, #32
 801df5a:	2b20      	cmp	r3, #32
 801df5c:	d003      	beq.n	801df66 <I2C_IsErrorOccurred+0xfa>
 801df5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801df62:	2b00      	cmp	r3, #0
 801df64:	d09d      	beq.n	801dea2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801df66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d103      	bne.n	801df76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	2220      	movs	r2, #32
 801df74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801df76:	6a3b      	ldr	r3, [r7, #32]
 801df78:	f043 0304 	orr.w	r3, r3, #4
 801df7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801df7e:	2301      	movs	r3, #1
 801df80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	699b      	ldr	r3, [r3, #24]
 801df8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801df8c:	69bb      	ldr	r3, [r7, #24]
 801df8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801df92:	2b00      	cmp	r3, #0
 801df94:	d00b      	beq.n	801dfae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801df96:	6a3b      	ldr	r3, [r7, #32]
 801df98:	f043 0301 	orr.w	r3, r3, #1
 801df9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 801dfa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801dfa8:	2301      	movs	r3, #1
 801dfaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801dfae:	69bb      	ldr	r3, [r7, #24]
 801dfb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d00b      	beq.n	801dfd0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801dfb8:	6a3b      	ldr	r3, [r7, #32]
 801dfba:	f043 0308 	orr.w	r3, r3, #8
 801dfbe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801dfc0:	68fb      	ldr	r3, [r7, #12]
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801dfc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801dfca:	2301      	movs	r3, #1
 801dfcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801dfd0:	69bb      	ldr	r3, [r7, #24]
 801dfd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d00b      	beq.n	801dff2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801dfda:	6a3b      	ldr	r3, [r7, #32]
 801dfdc:	f043 0302 	orr.w	r3, r3, #2
 801dfe0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801dfea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801dfec:	2301      	movs	r3, #1
 801dfee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801dff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	d01c      	beq.n	801e034 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801dffa:	68f8      	ldr	r0, [r7, #12]
 801dffc:	f7ff fdbd 	bl	801db7a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	6859      	ldr	r1, [r3, #4]
 801e006:	68fb      	ldr	r3, [r7, #12]
 801e008:	681a      	ldr	r2, [r3, #0]
 801e00a:	4b0d      	ldr	r3, [pc, #52]	; (801e040 <I2C_IsErrorOccurred+0x1d4>)
 801e00c:	400b      	ands	r3, r1
 801e00e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801e010:	68fb      	ldr	r3, [r7, #12]
 801e012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e014:	6a3b      	ldr	r3, [r7, #32]
 801e016:	431a      	orrs	r2, r3
 801e018:	68fb      	ldr	r3, [r7, #12]
 801e01a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	2220      	movs	r2, #32
 801e020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	2200      	movs	r2, #0
 801e028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	2200      	movs	r2, #0
 801e030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801e034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e038:	4618      	mov	r0, r3
 801e03a:	3728      	adds	r7, #40	; 0x28
 801e03c:	46bd      	mov	sp, r7
 801e03e:	bd80      	pop	{r7, pc}
 801e040:	fe00e800 	.word	0xfe00e800

0801e044 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801e044:	b480      	push	{r7}
 801e046:	b087      	sub	sp, #28
 801e048:	af00      	add	r7, sp, #0
 801e04a:	60f8      	str	r0, [r7, #12]
 801e04c:	607b      	str	r3, [r7, #4]
 801e04e:	460b      	mov	r3, r1
 801e050:	817b      	strh	r3, [r7, #10]
 801e052:	4613      	mov	r3, r2
 801e054:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801e056:	897b      	ldrh	r3, [r7, #10]
 801e058:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801e05c:	7a7b      	ldrb	r3, [r7, #9]
 801e05e:	041b      	lsls	r3, r3, #16
 801e060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801e064:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801e06a:	6a3b      	ldr	r3, [r7, #32]
 801e06c:	4313      	orrs	r3, r2
 801e06e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e072:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	685a      	ldr	r2, [r3, #4]
 801e07a:	6a3b      	ldr	r3, [r7, #32]
 801e07c:	0d5b      	lsrs	r3, r3, #21
 801e07e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801e082:	4b08      	ldr	r3, [pc, #32]	; (801e0a4 <I2C_TransferConfig+0x60>)
 801e084:	430b      	orrs	r3, r1
 801e086:	43db      	mvns	r3, r3
 801e088:	ea02 0103 	and.w	r1, r2, r3
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	697a      	ldr	r2, [r7, #20]
 801e092:	430a      	orrs	r2, r1
 801e094:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801e096:	bf00      	nop
 801e098:	371c      	adds	r7, #28
 801e09a:	46bd      	mov	sp, r7
 801e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0a0:	4770      	bx	lr
 801e0a2:	bf00      	nop
 801e0a4:	03ff63ff 	.word	0x03ff63ff

0801e0a8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801e0a8:	b480      	push	{r7}
 801e0aa:	b085      	sub	sp, #20
 801e0ac:	af00      	add	r7, sp, #0
 801e0ae:	6078      	str	r0, [r7, #4]
 801e0b0:	460b      	mov	r3, r1
 801e0b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801e0b4:	2300      	movs	r3, #0
 801e0b6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0bc:	4a2a      	ldr	r2, [pc, #168]	; (801e168 <I2C_Enable_IRQ+0xc0>)
 801e0be:	4293      	cmp	r3, r2
 801e0c0:	d004      	beq.n	801e0cc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801e0c6:	4a29      	ldr	r2, [pc, #164]	; (801e16c <I2C_Enable_IRQ+0xc4>)
 801e0c8:	4293      	cmp	r3, r2
 801e0ca:	d11d      	bne.n	801e108 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801e0cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	da03      	bge.n	801e0dc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801e0da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801e0dc:	887b      	ldrh	r3, [r7, #2]
 801e0de:	2b10      	cmp	r3, #16
 801e0e0:	d103      	bne.n	801e0ea <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801e0e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801e0ea:	887b      	ldrh	r3, [r7, #2]
 801e0ec:	2b20      	cmp	r3, #32
 801e0ee:	d103      	bne.n	801e0f8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801e0f0:	68fb      	ldr	r3, [r7, #12]
 801e0f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801e0f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801e0f8:	887b      	ldrh	r3, [r7, #2]
 801e0fa:	2b40      	cmp	r3, #64	; 0x40
 801e0fc:	d125      	bne.n	801e14a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e104:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801e106:	e020      	b.n	801e14a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801e108:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	da03      	bge.n	801e118 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801e116:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801e118:	887b      	ldrh	r3, [r7, #2]
 801e11a:	f003 0301 	and.w	r3, r3, #1
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d003      	beq.n	801e12a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 801e128:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801e12a:	887b      	ldrh	r3, [r7, #2]
 801e12c:	f003 0302 	and.w	r3, r3, #2
 801e130:	2b00      	cmp	r3, #0
 801e132:	d003      	beq.n	801e13c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 801e13a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801e13c:	887b      	ldrh	r3, [r7, #2]
 801e13e:	2b20      	cmp	r3, #32
 801e140:	d103      	bne.n	801e14a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801e142:	68fb      	ldr	r3, [r7, #12]
 801e144:	f043 0320 	orr.w	r3, r3, #32
 801e148:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801e14a:	687b      	ldr	r3, [r7, #4]
 801e14c:	681b      	ldr	r3, [r3, #0]
 801e14e:	6819      	ldr	r1, [r3, #0]
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	68fa      	ldr	r2, [r7, #12]
 801e156:	430a      	orrs	r2, r1
 801e158:	601a      	str	r2, [r3, #0]
}
 801e15a:	bf00      	nop
 801e15c:	3714      	adds	r7, #20
 801e15e:	46bd      	mov	sp, r7
 801e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e164:	4770      	bx	lr
 801e166:	bf00      	nop
 801e168:	0801cb75 	.word	0x0801cb75
 801e16c:	0801cd5d 	.word	0x0801cd5d

0801e170 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801e170:	b480      	push	{r7}
 801e172:	b085      	sub	sp, #20
 801e174:	af00      	add	r7, sp, #0
 801e176:	6078      	str	r0, [r7, #4]
 801e178:	460b      	mov	r3, r1
 801e17a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801e17c:	2300      	movs	r3, #0
 801e17e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801e180:	887b      	ldrh	r3, [r7, #2]
 801e182:	f003 0301 	and.w	r3, r3, #1
 801e186:	2b00      	cmp	r3, #0
 801e188:	d00f      	beq.n	801e1aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 801e190:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e198:	b2db      	uxtb	r3, r3
 801e19a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801e19e:	2b28      	cmp	r3, #40	; 0x28
 801e1a0:	d003      	beq.n	801e1aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801e1a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801e1aa:	887b      	ldrh	r3, [r7, #2]
 801e1ac:	f003 0302 	and.w	r3, r3, #2
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d00f      	beq.n	801e1d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801e1b4:	68fb      	ldr	r3, [r7, #12]
 801e1b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 801e1ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e1c2:	b2db      	uxtb	r3, r3
 801e1c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801e1c8:	2b28      	cmp	r3, #40	; 0x28
 801e1ca:	d003      	beq.n	801e1d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801e1d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801e1d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	da03      	bge.n	801e1e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801e1e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801e1e4:	887b      	ldrh	r3, [r7, #2]
 801e1e6:	2b10      	cmp	r3, #16
 801e1e8:	d103      	bne.n	801e1f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801e1f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801e1f2:	887b      	ldrh	r3, [r7, #2]
 801e1f4:	2b20      	cmp	r3, #32
 801e1f6:	d103      	bne.n	801e200 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	f043 0320 	orr.w	r3, r3, #32
 801e1fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801e200:	887b      	ldrh	r3, [r7, #2]
 801e202:	2b40      	cmp	r3, #64	; 0x40
 801e204:	d103      	bne.n	801e20e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e20c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	681b      	ldr	r3, [r3, #0]
 801e212:	6819      	ldr	r1, [r3, #0]
 801e214:	68fb      	ldr	r3, [r7, #12]
 801e216:	43da      	mvns	r2, r3
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	400a      	ands	r2, r1
 801e21e:	601a      	str	r2, [r3, #0]
}
 801e220:	bf00      	nop
 801e222:	3714      	adds	r7, #20
 801e224:	46bd      	mov	sp, r7
 801e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e22a:	4770      	bx	lr

0801e22c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801e22c:	b480      	push	{r7}
 801e22e:	b083      	sub	sp, #12
 801e230:	af00      	add	r7, sp, #0
 801e232:	6078      	str	r0, [r7, #4]
 801e234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e23c:	b2db      	uxtb	r3, r3
 801e23e:	2b20      	cmp	r3, #32
 801e240:	d138      	bne.n	801e2b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e248:	2b01      	cmp	r3, #1
 801e24a:	d101      	bne.n	801e250 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801e24c:	2302      	movs	r3, #2
 801e24e:	e032      	b.n	801e2b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	2201      	movs	r2, #1
 801e254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	2224      	movs	r2, #36	; 0x24
 801e25c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	681a      	ldr	r2, [r3, #0]
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	f022 0201 	bic.w	r2, r2, #1
 801e26e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	681b      	ldr	r3, [r3, #0]
 801e274:	681a      	ldr	r2, [r3, #0]
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e27e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	6819      	ldr	r1, [r3, #0]
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	683a      	ldr	r2, [r7, #0]
 801e28c:	430a      	orrs	r2, r1
 801e28e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	681a      	ldr	r2, [r3, #0]
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	f042 0201 	orr.w	r2, r2, #1
 801e29e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	2220      	movs	r2, #32
 801e2a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	2200      	movs	r2, #0
 801e2ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	e000      	b.n	801e2b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801e2b4:	2302      	movs	r3, #2
  }
}
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	370c      	adds	r7, #12
 801e2ba:	46bd      	mov	sp, r7
 801e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2c0:	4770      	bx	lr

0801e2c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801e2c2:	b480      	push	{r7}
 801e2c4:	b085      	sub	sp, #20
 801e2c6:	af00      	add	r7, sp, #0
 801e2c8:	6078      	str	r0, [r7, #4]
 801e2ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e2d2:	b2db      	uxtb	r3, r3
 801e2d4:	2b20      	cmp	r3, #32
 801e2d6:	d139      	bne.n	801e34c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e2de:	2b01      	cmp	r3, #1
 801e2e0:	d101      	bne.n	801e2e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801e2e2:	2302      	movs	r3, #2
 801e2e4:	e033      	b.n	801e34e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	2201      	movs	r2, #1
 801e2ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	2224      	movs	r2, #36	; 0x24
 801e2f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	681a      	ldr	r2, [r3, #0]
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	f022 0201 	bic.w	r2, r2, #1
 801e304:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801e30e:	68fb      	ldr	r3, [r7, #12]
 801e310:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801e314:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801e316:	683b      	ldr	r3, [r7, #0]
 801e318:	021b      	lsls	r3, r3, #8
 801e31a:	68fa      	ldr	r2, [r7, #12]
 801e31c:	4313      	orrs	r3, r2
 801e31e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	68fa      	ldr	r2, [r7, #12]
 801e326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	681a      	ldr	r2, [r3, #0]
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	681b      	ldr	r3, [r3, #0]
 801e332:	f042 0201 	orr.w	r2, r2, #1
 801e336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	2220      	movs	r2, #32
 801e33c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	2200      	movs	r2, #0
 801e344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801e348:	2300      	movs	r3, #0
 801e34a:	e000      	b.n	801e34e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801e34c:	2302      	movs	r3, #2
  }
}
 801e34e:	4618      	mov	r0, r3
 801e350:	3714      	adds	r7, #20
 801e352:	46bd      	mov	sp, r7
 801e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e358:	4770      	bx	lr
	...

0801e35c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 801e35c:	b480      	push	{r7}
 801e35e:	b085      	sub	sp, #20
 801e360:	af00      	add	r7, sp, #0
 801e362:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e364:	4b0d      	ldr	r3, [pc, #52]	; (801e39c <HAL_I2CEx_EnableFastModePlus+0x40>)
 801e366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801e36a:	4a0c      	ldr	r2, [pc, #48]	; (801e39c <HAL_I2CEx_EnableFastModePlus+0x40>)
 801e36c:	f043 0302 	orr.w	r3, r3, #2
 801e370:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801e374:	4b09      	ldr	r3, [pc, #36]	; (801e39c <HAL_I2CEx_EnableFastModePlus+0x40>)
 801e376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801e37a:	f003 0302 	and.w	r3, r3, #2
 801e37e:	60fb      	str	r3, [r7, #12]
 801e380:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 801e382:	4b07      	ldr	r3, [pc, #28]	; (801e3a0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801e384:	685a      	ldr	r2, [r3, #4]
 801e386:	4906      	ldr	r1, [pc, #24]	; (801e3a0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	4313      	orrs	r3, r2
 801e38c:	604b      	str	r3, [r1, #4]
}
 801e38e:	bf00      	nop
 801e390:	3714      	adds	r7, #20
 801e392:	46bd      	mov	sp, r7
 801e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e398:	4770      	bx	lr
 801e39a:	bf00      	nop
 801e39c:	58024400 	.word	0x58024400
 801e3a0:	58000400 	.word	0x58000400

0801e3a4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801e3a4:	b480      	push	{r7}
 801e3a6:	b083      	sub	sp, #12
 801e3a8:	af00      	add	r7, sp, #0
 801e3aa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801e3b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801e3b6:	2300      	movs	r3, #0
}
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	370c      	adds	r7, #12
 801e3bc:	46bd      	mov	sp, r7
 801e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3c2:	4770      	bx	lr

0801e3c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801e3c4:	b580      	push	{r7, lr}
 801e3c6:	b084      	sub	sp, #16
 801e3c8:	af00      	add	r7, sp, #0
 801e3ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801e3cc:	4b19      	ldr	r3, [pc, #100]	; (801e434 <HAL_PWREx_ConfigSupply+0x70>)
 801e3ce:	68db      	ldr	r3, [r3, #12]
 801e3d0:	f003 0304 	and.w	r3, r3, #4
 801e3d4:	2b04      	cmp	r3, #4
 801e3d6:	d00a      	beq.n	801e3ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801e3d8:	4b16      	ldr	r3, [pc, #88]	; (801e434 <HAL_PWREx_ConfigSupply+0x70>)
 801e3da:	68db      	ldr	r3, [r3, #12]
 801e3dc:	f003 0307 	and.w	r3, r3, #7
 801e3e0:	687a      	ldr	r2, [r7, #4]
 801e3e2:	429a      	cmp	r2, r3
 801e3e4:	d001      	beq.n	801e3ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801e3e6:	2301      	movs	r3, #1
 801e3e8:	e01f      	b.n	801e42a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	e01d      	b.n	801e42a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801e3ee:	4b11      	ldr	r3, [pc, #68]	; (801e434 <HAL_PWREx_ConfigSupply+0x70>)
 801e3f0:	68db      	ldr	r3, [r3, #12]
 801e3f2:	f023 0207 	bic.w	r2, r3, #7
 801e3f6:	490f      	ldr	r1, [pc, #60]	; (801e434 <HAL_PWREx_ConfigSupply+0x70>)
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	4313      	orrs	r3, r2
 801e3fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801e3fe:	f7f8 f877 	bl	80164f0 <HAL_GetTick>
 801e402:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801e404:	e009      	b.n	801e41a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801e406:	f7f8 f873 	bl	80164f0 <HAL_GetTick>
 801e40a:	4602      	mov	r2, r0
 801e40c:	68fb      	ldr	r3, [r7, #12]
 801e40e:	1ad3      	subs	r3, r2, r3
 801e410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801e414:	d901      	bls.n	801e41a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801e416:	2301      	movs	r3, #1
 801e418:	e007      	b.n	801e42a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801e41a:	4b06      	ldr	r3, [pc, #24]	; (801e434 <HAL_PWREx_ConfigSupply+0x70>)
 801e41c:	685b      	ldr	r3, [r3, #4]
 801e41e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e426:	d1ee      	bne.n	801e406 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801e428:	2300      	movs	r3, #0
}
 801e42a:	4618      	mov	r0, r3
 801e42c:	3710      	adds	r7, #16
 801e42e:	46bd      	mov	sp, r7
 801e430:	bd80      	pop	{r7, pc}
 801e432:	bf00      	nop
 801e434:	58024800 	.word	0x58024800

0801e438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801e438:	b580      	push	{r7, lr}
 801e43a:	b08c      	sub	sp, #48	; 0x30
 801e43c:	af00      	add	r7, sp, #0
 801e43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	2b00      	cmp	r3, #0
 801e444:	d101      	bne.n	801e44a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801e446:	2301      	movs	r3, #1
 801e448:	e397      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	f003 0301 	and.w	r3, r3, #1
 801e452:	2b00      	cmp	r3, #0
 801e454:	f000 8087 	beq.w	801e566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801e458:	4b9e      	ldr	r3, [pc, #632]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e45a:	691b      	ldr	r3, [r3, #16]
 801e45c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e460:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801e462:	4b9c      	ldr	r3, [pc, #624]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e466:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801e468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e46a:	2b10      	cmp	r3, #16
 801e46c:	d007      	beq.n	801e47e <HAL_RCC_OscConfig+0x46>
 801e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e470:	2b18      	cmp	r3, #24
 801e472:	d110      	bne.n	801e496 <HAL_RCC_OscConfig+0x5e>
 801e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e476:	f003 0303 	and.w	r3, r3, #3
 801e47a:	2b02      	cmp	r3, #2
 801e47c:	d10b      	bne.n	801e496 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801e47e:	4b95      	ldr	r3, [pc, #596]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e486:	2b00      	cmp	r3, #0
 801e488:	d06c      	beq.n	801e564 <HAL_RCC_OscConfig+0x12c>
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	685b      	ldr	r3, [r3, #4]
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d168      	bne.n	801e564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801e492:	2301      	movs	r3, #1
 801e494:	e371      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	685b      	ldr	r3, [r3, #4]
 801e49a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e49e:	d106      	bne.n	801e4ae <HAL_RCC_OscConfig+0x76>
 801e4a0:	4b8c      	ldr	r3, [pc, #560]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	4a8b      	ldr	r2, [pc, #556]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801e4aa:	6013      	str	r3, [r2, #0]
 801e4ac:	e02e      	b.n	801e50c <HAL_RCC_OscConfig+0xd4>
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	685b      	ldr	r3, [r3, #4]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d10c      	bne.n	801e4d0 <HAL_RCC_OscConfig+0x98>
 801e4b6:	4b87      	ldr	r3, [pc, #540]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	4a86      	ldr	r2, [pc, #536]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801e4c0:	6013      	str	r3, [r2, #0]
 801e4c2:	4b84      	ldr	r3, [pc, #528]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4c4:	681b      	ldr	r3, [r3, #0]
 801e4c6:	4a83      	ldr	r2, [pc, #524]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801e4cc:	6013      	str	r3, [r2, #0]
 801e4ce:	e01d      	b.n	801e50c <HAL_RCC_OscConfig+0xd4>
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	685b      	ldr	r3, [r3, #4]
 801e4d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801e4d8:	d10c      	bne.n	801e4f4 <HAL_RCC_OscConfig+0xbc>
 801e4da:	4b7e      	ldr	r3, [pc, #504]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	4a7d      	ldr	r2, [pc, #500]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801e4e4:	6013      	str	r3, [r2, #0]
 801e4e6:	4b7b      	ldr	r3, [pc, #492]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	4a7a      	ldr	r2, [pc, #488]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801e4f0:	6013      	str	r3, [r2, #0]
 801e4f2:	e00b      	b.n	801e50c <HAL_RCC_OscConfig+0xd4>
 801e4f4:	4b77      	ldr	r3, [pc, #476]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	4a76      	ldr	r2, [pc, #472]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e4fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801e4fe:	6013      	str	r3, [r2, #0]
 801e500:	4b74      	ldr	r3, [pc, #464]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	4a73      	ldr	r2, [pc, #460]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801e50a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	685b      	ldr	r3, [r3, #4]
 801e510:	2b00      	cmp	r3, #0
 801e512:	d013      	beq.n	801e53c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e514:	f7f7 ffec 	bl	80164f0 <HAL_GetTick>
 801e518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801e51a:	e008      	b.n	801e52e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801e51c:	f7f7 ffe8 	bl	80164f0 <HAL_GetTick>
 801e520:	4602      	mov	r2, r0
 801e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e524:	1ad3      	subs	r3, r2, r3
 801e526:	2b64      	cmp	r3, #100	; 0x64
 801e528:	d901      	bls.n	801e52e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801e52a:	2303      	movs	r3, #3
 801e52c:	e325      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801e52e:	4b69      	ldr	r3, [pc, #420]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e530:	681b      	ldr	r3, [r3, #0]
 801e532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e536:	2b00      	cmp	r3, #0
 801e538:	d0f0      	beq.n	801e51c <HAL_RCC_OscConfig+0xe4>
 801e53a:	e014      	b.n	801e566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e53c:	f7f7 ffd8 	bl	80164f0 <HAL_GetTick>
 801e540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801e542:	e008      	b.n	801e556 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801e544:	f7f7 ffd4 	bl	80164f0 <HAL_GetTick>
 801e548:	4602      	mov	r2, r0
 801e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e54c:	1ad3      	subs	r3, r2, r3
 801e54e:	2b64      	cmp	r3, #100	; 0x64
 801e550:	d901      	bls.n	801e556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801e552:	2303      	movs	r3, #3
 801e554:	e311      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801e556:	4b5f      	ldr	r3, [pc, #380]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e558:	681b      	ldr	r3, [r3, #0]
 801e55a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e55e:	2b00      	cmp	r3, #0
 801e560:	d1f0      	bne.n	801e544 <HAL_RCC_OscConfig+0x10c>
 801e562:	e000      	b.n	801e566 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801e564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	f003 0302 	and.w	r3, r3, #2
 801e56e:	2b00      	cmp	r3, #0
 801e570:	f000 808a 	beq.w	801e688 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801e574:	4b57      	ldr	r3, [pc, #348]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e576:	691b      	ldr	r3, [r3, #16]
 801e578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e57c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801e57e:	4b55      	ldr	r3, [pc, #340]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e582:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801e584:	6a3b      	ldr	r3, [r7, #32]
 801e586:	2b00      	cmp	r3, #0
 801e588:	d007      	beq.n	801e59a <HAL_RCC_OscConfig+0x162>
 801e58a:	6a3b      	ldr	r3, [r7, #32]
 801e58c:	2b18      	cmp	r3, #24
 801e58e:	d137      	bne.n	801e600 <HAL_RCC_OscConfig+0x1c8>
 801e590:	69fb      	ldr	r3, [r7, #28]
 801e592:	f003 0303 	and.w	r3, r3, #3
 801e596:	2b00      	cmp	r3, #0
 801e598:	d132      	bne.n	801e600 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801e59a:	4b4e      	ldr	r3, [pc, #312]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	f003 0304 	and.w	r3, r3, #4
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d005      	beq.n	801e5b2 <HAL_RCC_OscConfig+0x17a>
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	68db      	ldr	r3, [r3, #12]
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d101      	bne.n	801e5b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801e5ae:	2301      	movs	r3, #1
 801e5b0:	e2e3      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801e5b2:	4b48      	ldr	r3, [pc, #288]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	f023 0219 	bic.w	r2, r3, #25
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	68db      	ldr	r3, [r3, #12]
 801e5be:	4945      	ldr	r1, [pc, #276]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e5c0:	4313      	orrs	r3, r2
 801e5c2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801e5c4:	f7f7 ff94 	bl	80164f0 <HAL_GetTick>
 801e5c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801e5ca:	e008      	b.n	801e5de <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801e5cc:	f7f7 ff90 	bl	80164f0 <HAL_GetTick>
 801e5d0:	4602      	mov	r2, r0
 801e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5d4:	1ad3      	subs	r3, r2, r3
 801e5d6:	2b02      	cmp	r3, #2
 801e5d8:	d901      	bls.n	801e5de <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 801e5da:	2303      	movs	r3, #3
 801e5dc:	e2cd      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801e5de:	4b3d      	ldr	r3, [pc, #244]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	f003 0304 	and.w	r3, r3, #4
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d0f0      	beq.n	801e5cc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801e5ea:	4b3a      	ldr	r3, [pc, #232]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e5ec:	685b      	ldr	r3, [r3, #4]
 801e5ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801e5f2:	687b      	ldr	r3, [r7, #4]
 801e5f4:	691b      	ldr	r3, [r3, #16]
 801e5f6:	061b      	lsls	r3, r3, #24
 801e5f8:	4936      	ldr	r1, [pc, #216]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e5fa:	4313      	orrs	r3, r2
 801e5fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801e5fe:	e043      	b.n	801e688 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	68db      	ldr	r3, [r3, #12]
 801e604:	2b00      	cmp	r3, #0
 801e606:	d026      	beq.n	801e656 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801e608:	4b32      	ldr	r3, [pc, #200]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	f023 0219 	bic.w	r2, r3, #25
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	68db      	ldr	r3, [r3, #12]
 801e614:	492f      	ldr	r1, [pc, #188]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e616:	4313      	orrs	r3, r2
 801e618:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e61a:	f7f7 ff69 	bl	80164f0 <HAL_GetTick>
 801e61e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801e620:	e008      	b.n	801e634 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801e622:	f7f7 ff65 	bl	80164f0 <HAL_GetTick>
 801e626:	4602      	mov	r2, r0
 801e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e62a:	1ad3      	subs	r3, r2, r3
 801e62c:	2b02      	cmp	r3, #2
 801e62e:	d901      	bls.n	801e634 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801e630:	2303      	movs	r3, #3
 801e632:	e2a2      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801e634:	4b27      	ldr	r3, [pc, #156]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	f003 0304 	and.w	r3, r3, #4
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d0f0      	beq.n	801e622 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801e640:	4b24      	ldr	r3, [pc, #144]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e642:	685b      	ldr	r3, [r3, #4]
 801e644:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	691b      	ldr	r3, [r3, #16]
 801e64c:	061b      	lsls	r3, r3, #24
 801e64e:	4921      	ldr	r1, [pc, #132]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e650:	4313      	orrs	r3, r2
 801e652:	604b      	str	r3, [r1, #4]
 801e654:	e018      	b.n	801e688 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801e656:	4b1f      	ldr	r3, [pc, #124]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	4a1e      	ldr	r2, [pc, #120]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e65c:	f023 0301 	bic.w	r3, r3, #1
 801e660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e662:	f7f7 ff45 	bl	80164f0 <HAL_GetTick>
 801e666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801e668:	e008      	b.n	801e67c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801e66a:	f7f7 ff41 	bl	80164f0 <HAL_GetTick>
 801e66e:	4602      	mov	r2, r0
 801e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e672:	1ad3      	subs	r3, r2, r3
 801e674:	2b02      	cmp	r3, #2
 801e676:	d901      	bls.n	801e67c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 801e678:	2303      	movs	r3, #3
 801e67a:	e27e      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801e67c:	4b15      	ldr	r3, [pc, #84]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	f003 0304 	and.w	r3, r3, #4
 801e684:	2b00      	cmp	r3, #0
 801e686:	d1f0      	bne.n	801e66a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	f003 0310 	and.w	r3, r3, #16
 801e690:	2b00      	cmp	r3, #0
 801e692:	d06d      	beq.n	801e770 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801e694:	4b0f      	ldr	r3, [pc, #60]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e696:	691b      	ldr	r3, [r3, #16]
 801e698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e69c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801e69e:	4b0d      	ldr	r3, [pc, #52]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6a2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801e6a4:	69bb      	ldr	r3, [r7, #24]
 801e6a6:	2b08      	cmp	r3, #8
 801e6a8:	d007      	beq.n	801e6ba <HAL_RCC_OscConfig+0x282>
 801e6aa:	69bb      	ldr	r3, [r7, #24]
 801e6ac:	2b18      	cmp	r3, #24
 801e6ae:	d11e      	bne.n	801e6ee <HAL_RCC_OscConfig+0x2b6>
 801e6b0:	697b      	ldr	r3, [r7, #20]
 801e6b2:	f003 0303 	and.w	r3, r3, #3
 801e6b6:	2b01      	cmp	r3, #1
 801e6b8:	d119      	bne.n	801e6ee <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801e6ba:	4b06      	ldr	r3, [pc, #24]	; (801e6d4 <HAL_RCC_OscConfig+0x29c>)
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d008      	beq.n	801e6d8 <HAL_RCC_OscConfig+0x2a0>
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	69db      	ldr	r3, [r3, #28]
 801e6ca:	2b80      	cmp	r3, #128	; 0x80
 801e6cc:	d004      	beq.n	801e6d8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 801e6ce:	2301      	movs	r3, #1
 801e6d0:	e253      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
 801e6d2:	bf00      	nop
 801e6d4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801e6d8:	4ba3      	ldr	r3, [pc, #652]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e6da:	68db      	ldr	r3, [r3, #12]
 801e6dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	6a1b      	ldr	r3, [r3, #32]
 801e6e4:	061b      	lsls	r3, r3, #24
 801e6e6:	49a0      	ldr	r1, [pc, #640]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e6e8:	4313      	orrs	r3, r2
 801e6ea:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801e6ec:	e040      	b.n	801e770 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	69db      	ldr	r3, [r3, #28]
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d023      	beq.n	801e73e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801e6f6:	4b9c      	ldr	r3, [pc, #624]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	4a9b      	ldr	r2, [pc, #620]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e702:	f7f7 fef5 	bl	80164f0 <HAL_GetTick>
 801e706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801e708:	e008      	b.n	801e71c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801e70a:	f7f7 fef1 	bl	80164f0 <HAL_GetTick>
 801e70e:	4602      	mov	r2, r0
 801e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e712:	1ad3      	subs	r3, r2, r3
 801e714:	2b02      	cmp	r3, #2
 801e716:	d901      	bls.n	801e71c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 801e718:	2303      	movs	r3, #3
 801e71a:	e22e      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801e71c:	4b92      	ldr	r3, [pc, #584]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e724:	2b00      	cmp	r3, #0
 801e726:	d0f0      	beq.n	801e70a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801e728:	4b8f      	ldr	r3, [pc, #572]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e72a:	68db      	ldr	r3, [r3, #12]
 801e72c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	6a1b      	ldr	r3, [r3, #32]
 801e734:	061b      	lsls	r3, r3, #24
 801e736:	498c      	ldr	r1, [pc, #560]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e738:	4313      	orrs	r3, r2
 801e73a:	60cb      	str	r3, [r1, #12]
 801e73c:	e018      	b.n	801e770 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801e73e:	4b8a      	ldr	r3, [pc, #552]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e740:	681b      	ldr	r3, [r3, #0]
 801e742:	4a89      	ldr	r2, [pc, #548]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e74a:	f7f7 fed1 	bl	80164f0 <HAL_GetTick>
 801e74e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801e750:	e008      	b.n	801e764 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801e752:	f7f7 fecd 	bl	80164f0 <HAL_GetTick>
 801e756:	4602      	mov	r2, r0
 801e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e75a:	1ad3      	subs	r3, r2, r3
 801e75c:	2b02      	cmp	r3, #2
 801e75e:	d901      	bls.n	801e764 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801e760:	2303      	movs	r3, #3
 801e762:	e20a      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801e764:	4b80      	ldr	r3, [pc, #512]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d1f0      	bne.n	801e752 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	f003 0308 	and.w	r3, r3, #8
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d036      	beq.n	801e7ea <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	695b      	ldr	r3, [r3, #20]
 801e780:	2b00      	cmp	r3, #0
 801e782:	d019      	beq.n	801e7b8 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801e784:	4b78      	ldr	r3, [pc, #480]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e788:	4a77      	ldr	r2, [pc, #476]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e78a:	f043 0301 	orr.w	r3, r3, #1
 801e78e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e790:	f7f7 feae 	bl	80164f0 <HAL_GetTick>
 801e794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801e796:	e008      	b.n	801e7aa <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801e798:	f7f7 feaa 	bl	80164f0 <HAL_GetTick>
 801e79c:	4602      	mov	r2, r0
 801e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7a0:	1ad3      	subs	r3, r2, r3
 801e7a2:	2b02      	cmp	r3, #2
 801e7a4:	d901      	bls.n	801e7aa <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 801e7a6:	2303      	movs	r3, #3
 801e7a8:	e1e7      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801e7aa:	4b6f      	ldr	r3, [pc, #444]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e7ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e7ae:	f003 0302 	and.w	r3, r3, #2
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d0f0      	beq.n	801e798 <HAL_RCC_OscConfig+0x360>
 801e7b6:	e018      	b.n	801e7ea <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801e7b8:	4b6b      	ldr	r3, [pc, #428]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e7bc:	4a6a      	ldr	r2, [pc, #424]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e7be:	f023 0301 	bic.w	r3, r3, #1
 801e7c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e7c4:	f7f7 fe94 	bl	80164f0 <HAL_GetTick>
 801e7c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801e7ca:	e008      	b.n	801e7de <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801e7cc:	f7f7 fe90 	bl	80164f0 <HAL_GetTick>
 801e7d0:	4602      	mov	r2, r0
 801e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7d4:	1ad3      	subs	r3, r2, r3
 801e7d6:	2b02      	cmp	r3, #2
 801e7d8:	d901      	bls.n	801e7de <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 801e7da:	2303      	movs	r3, #3
 801e7dc:	e1cd      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801e7de:	4b62      	ldr	r3, [pc, #392]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e7e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e7e2:	f003 0302 	and.w	r3, r3, #2
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d1f0      	bne.n	801e7cc <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	f003 0320 	and.w	r3, r3, #32
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d036      	beq.n	801e864 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	699b      	ldr	r3, [r3, #24]
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d019      	beq.n	801e832 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801e7fe:	4b5a      	ldr	r3, [pc, #360]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e800:	681b      	ldr	r3, [r3, #0]
 801e802:	4a59      	ldr	r2, [pc, #356]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e804:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801e808:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801e80a:	f7f7 fe71 	bl	80164f0 <HAL_GetTick>
 801e80e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801e810:	e008      	b.n	801e824 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801e812:	f7f7 fe6d 	bl	80164f0 <HAL_GetTick>
 801e816:	4602      	mov	r2, r0
 801e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e81a:	1ad3      	subs	r3, r2, r3
 801e81c:	2b02      	cmp	r3, #2
 801e81e:	d901      	bls.n	801e824 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 801e820:	2303      	movs	r3, #3
 801e822:	e1aa      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801e824:	4b50      	ldr	r3, [pc, #320]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d0f0      	beq.n	801e812 <HAL_RCC_OscConfig+0x3da>
 801e830:	e018      	b.n	801e864 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801e832:	4b4d      	ldr	r3, [pc, #308]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e834:	681b      	ldr	r3, [r3, #0]
 801e836:	4a4c      	ldr	r2, [pc, #304]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e83c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801e83e:	f7f7 fe57 	bl	80164f0 <HAL_GetTick>
 801e842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801e844:	e008      	b.n	801e858 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801e846:	f7f7 fe53 	bl	80164f0 <HAL_GetTick>
 801e84a:	4602      	mov	r2, r0
 801e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e84e:	1ad3      	subs	r3, r2, r3
 801e850:	2b02      	cmp	r3, #2
 801e852:	d901      	bls.n	801e858 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 801e854:	2303      	movs	r3, #3
 801e856:	e190      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801e858:	4b43      	ldr	r3, [pc, #268]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e860:	2b00      	cmp	r3, #0
 801e862:	d1f0      	bne.n	801e846 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	f003 0304 	and.w	r3, r3, #4
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	f000 8085 	beq.w	801e97c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801e872:	4b3e      	ldr	r3, [pc, #248]	; (801e96c <HAL_RCC_OscConfig+0x534>)
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	4a3d      	ldr	r2, [pc, #244]	; (801e96c <HAL_RCC_OscConfig+0x534>)
 801e878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e87c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e87e:	f7f7 fe37 	bl	80164f0 <HAL_GetTick>
 801e882:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e884:	e008      	b.n	801e898 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801e886:	f7f7 fe33 	bl	80164f0 <HAL_GetTick>
 801e88a:	4602      	mov	r2, r0
 801e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e88e:	1ad3      	subs	r3, r2, r3
 801e890:	2b64      	cmp	r3, #100	; 0x64
 801e892:	d901      	bls.n	801e898 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 801e894:	2303      	movs	r3, #3
 801e896:	e170      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e898:	4b34      	ldr	r3, [pc, #208]	; (801e96c <HAL_RCC_OscConfig+0x534>)
 801e89a:	681b      	ldr	r3, [r3, #0]
 801e89c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d0f0      	beq.n	801e886 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	689b      	ldr	r3, [r3, #8]
 801e8a8:	2b01      	cmp	r3, #1
 801e8aa:	d106      	bne.n	801e8ba <HAL_RCC_OscConfig+0x482>
 801e8ac:	4b2e      	ldr	r3, [pc, #184]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8b0:	4a2d      	ldr	r2, [pc, #180]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8b2:	f043 0301 	orr.w	r3, r3, #1
 801e8b6:	6713      	str	r3, [r2, #112]	; 0x70
 801e8b8:	e02d      	b.n	801e916 <HAL_RCC_OscConfig+0x4de>
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	689b      	ldr	r3, [r3, #8]
 801e8be:	2b00      	cmp	r3, #0
 801e8c0:	d10c      	bne.n	801e8dc <HAL_RCC_OscConfig+0x4a4>
 801e8c2:	4b29      	ldr	r3, [pc, #164]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8c6:	4a28      	ldr	r2, [pc, #160]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8c8:	f023 0301 	bic.w	r3, r3, #1
 801e8cc:	6713      	str	r3, [r2, #112]	; 0x70
 801e8ce:	4b26      	ldr	r3, [pc, #152]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8d2:	4a25      	ldr	r2, [pc, #148]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8d4:	f023 0304 	bic.w	r3, r3, #4
 801e8d8:	6713      	str	r3, [r2, #112]	; 0x70
 801e8da:	e01c      	b.n	801e916 <HAL_RCC_OscConfig+0x4de>
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	689b      	ldr	r3, [r3, #8]
 801e8e0:	2b05      	cmp	r3, #5
 801e8e2:	d10c      	bne.n	801e8fe <HAL_RCC_OscConfig+0x4c6>
 801e8e4:	4b20      	ldr	r3, [pc, #128]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8e8:	4a1f      	ldr	r2, [pc, #124]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8ea:	f043 0304 	orr.w	r3, r3, #4
 801e8ee:	6713      	str	r3, [r2, #112]	; 0x70
 801e8f0:	4b1d      	ldr	r3, [pc, #116]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8f4:	4a1c      	ldr	r2, [pc, #112]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e8f6:	f043 0301 	orr.w	r3, r3, #1
 801e8fa:	6713      	str	r3, [r2, #112]	; 0x70
 801e8fc:	e00b      	b.n	801e916 <HAL_RCC_OscConfig+0x4de>
 801e8fe:	4b1a      	ldr	r3, [pc, #104]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e902:	4a19      	ldr	r2, [pc, #100]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e904:	f023 0301 	bic.w	r3, r3, #1
 801e908:	6713      	str	r3, [r2, #112]	; 0x70
 801e90a:	4b17      	ldr	r3, [pc, #92]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e90e:	4a16      	ldr	r2, [pc, #88]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e910:	f023 0304 	bic.w	r3, r3, #4
 801e914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	689b      	ldr	r3, [r3, #8]
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d015      	beq.n	801e94a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e91e:	f7f7 fde7 	bl	80164f0 <HAL_GetTick>
 801e922:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e924:	e00a      	b.n	801e93c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801e926:	f7f7 fde3 	bl	80164f0 <HAL_GetTick>
 801e92a:	4602      	mov	r2, r0
 801e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e92e:	1ad3      	subs	r3, r2, r3
 801e930:	f241 3288 	movw	r2, #5000	; 0x1388
 801e934:	4293      	cmp	r3, r2
 801e936:	d901      	bls.n	801e93c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 801e938:	2303      	movs	r3, #3
 801e93a:	e11e      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e93c:	4b0a      	ldr	r3, [pc, #40]	; (801e968 <HAL_RCC_OscConfig+0x530>)
 801e93e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e940:	f003 0302 	and.w	r3, r3, #2
 801e944:	2b00      	cmp	r3, #0
 801e946:	d0ee      	beq.n	801e926 <HAL_RCC_OscConfig+0x4ee>
 801e948:	e018      	b.n	801e97c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e94a:	f7f7 fdd1 	bl	80164f0 <HAL_GetTick>
 801e94e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801e950:	e00e      	b.n	801e970 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801e952:	f7f7 fdcd 	bl	80164f0 <HAL_GetTick>
 801e956:	4602      	mov	r2, r0
 801e958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e95a:	1ad3      	subs	r3, r2, r3
 801e95c:	f241 3288 	movw	r2, #5000	; 0x1388
 801e960:	4293      	cmp	r3, r2
 801e962:	d905      	bls.n	801e970 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801e964:	2303      	movs	r3, #3
 801e966:	e108      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
 801e968:	58024400 	.word	0x58024400
 801e96c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801e970:	4b84      	ldr	r3, [pc, #528]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801e972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e974:	f003 0302 	and.w	r3, r3, #2
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d1ea      	bne.n	801e952 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e980:	2b00      	cmp	r3, #0
 801e982:	f000 80f9 	beq.w	801eb78 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801e986:	4b7f      	ldr	r3, [pc, #508]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801e988:	691b      	ldr	r3, [r3, #16]
 801e98a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e98e:	2b18      	cmp	r3, #24
 801e990:	f000 80b4 	beq.w	801eafc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e998:	2b02      	cmp	r3, #2
 801e99a:	f040 8095 	bne.w	801eac8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801e99e:	4b79      	ldr	r3, [pc, #484]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	4a78      	ldr	r2, [pc, #480]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801e9a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801e9a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e9aa:	f7f7 fda1 	bl	80164f0 <HAL_GetTick>
 801e9ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801e9b0:	e008      	b.n	801e9c4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801e9b2:	f7f7 fd9d 	bl	80164f0 <HAL_GetTick>
 801e9b6:	4602      	mov	r2, r0
 801e9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9ba:	1ad3      	subs	r3, r2, r3
 801e9bc:	2b02      	cmp	r3, #2
 801e9be:	d901      	bls.n	801e9c4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801e9c0:	2303      	movs	r3, #3
 801e9c2:	e0da      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801e9c4:	4b6f      	ldr	r3, [pc, #444]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d1f0      	bne.n	801e9b2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801e9d0:	4b6c      	ldr	r3, [pc, #432]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801e9d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e9d4:	4b6c      	ldr	r3, [pc, #432]	; (801eb88 <HAL_RCC_OscConfig+0x750>)
 801e9d6:	4013      	ands	r3, r2
 801e9d8:	687a      	ldr	r2, [r7, #4]
 801e9da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801e9dc:	687a      	ldr	r2, [r7, #4]
 801e9de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801e9e0:	0112      	lsls	r2, r2, #4
 801e9e2:	430a      	orrs	r2, r1
 801e9e4:	4967      	ldr	r1, [pc, #412]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801e9e6:	4313      	orrs	r3, r2
 801e9e8:	628b      	str	r3, [r1, #40]	; 0x28
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e9ee:	3b01      	subs	r3, #1
 801e9f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e9f8:	3b01      	subs	r3, #1
 801e9fa:	025b      	lsls	r3, r3, #9
 801e9fc:	b29b      	uxth	r3, r3
 801e9fe:	431a      	orrs	r2, r3
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea04:	3b01      	subs	r3, #1
 801ea06:	041b      	lsls	r3, r3, #16
 801ea08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801ea0c:	431a      	orrs	r2, r3
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ea12:	3b01      	subs	r3, #1
 801ea14:	061b      	lsls	r3, r3, #24
 801ea16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801ea1a:	495a      	ldr	r1, [pc, #360]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea1c:	4313      	orrs	r3, r2
 801ea1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 801ea20:	4b58      	ldr	r3, [pc, #352]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea24:	4a57      	ldr	r2, [pc, #348]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea26:	f023 0301 	bic.w	r3, r3, #1
 801ea2a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801ea2c:	4b55      	ldr	r3, [pc, #340]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ea30:	4b56      	ldr	r3, [pc, #344]	; (801eb8c <HAL_RCC_OscConfig+0x754>)
 801ea32:	4013      	ands	r3, r2
 801ea34:	687a      	ldr	r2, [r7, #4]
 801ea36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801ea38:	00d2      	lsls	r2, r2, #3
 801ea3a:	4952      	ldr	r1, [pc, #328]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea3c:	4313      	orrs	r3, r2
 801ea3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801ea40:	4b50      	ldr	r3, [pc, #320]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea44:	f023 020c 	bic.w	r2, r3, #12
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ea4c:	494d      	ldr	r1, [pc, #308]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea4e:	4313      	orrs	r3, r2
 801ea50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801ea52:	4b4c      	ldr	r3, [pc, #304]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea56:	f023 0202 	bic.w	r2, r3, #2
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ea5e:	4949      	ldr	r1, [pc, #292]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea60:	4313      	orrs	r3, r2
 801ea62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801ea64:	4b47      	ldr	r3, [pc, #284]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea68:	4a46      	ldr	r2, [pc, #280]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ea6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ea70:	4b44      	ldr	r3, [pc, #272]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea74:	4a43      	ldr	r2, [pc, #268]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ea7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801ea7c:	4b41      	ldr	r3, [pc, #260]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea80:	4a40      	ldr	r2, [pc, #256]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ea86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801ea88:	4b3e      	ldr	r3, [pc, #248]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea8c:	4a3d      	ldr	r2, [pc, #244]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea8e:	f043 0301 	orr.w	r3, r3, #1
 801ea92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801ea94:	4b3b      	ldr	r3, [pc, #236]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	4a3a      	ldr	r2, [pc, #232]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801ea9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801ea9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eaa0:	f7f7 fd26 	bl	80164f0 <HAL_GetTick>
 801eaa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801eaa6:	e008      	b.n	801eaba <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801eaa8:	f7f7 fd22 	bl	80164f0 <HAL_GetTick>
 801eaac:	4602      	mov	r2, r0
 801eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eab0:	1ad3      	subs	r3, r2, r3
 801eab2:	2b02      	cmp	r3, #2
 801eab4:	d901      	bls.n	801eaba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801eab6:	2303      	movs	r3, #3
 801eab8:	e05f      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801eaba:	4b32      	ldr	r3, [pc, #200]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801eabc:	681b      	ldr	r3, [r3, #0]
 801eabe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d0f0      	beq.n	801eaa8 <HAL_RCC_OscConfig+0x670>
 801eac6:	e057      	b.n	801eb78 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801eac8:	4b2e      	ldr	r3, [pc, #184]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	4a2d      	ldr	r2, [pc, #180]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801eace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ead2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ead4:	f7f7 fd0c 	bl	80164f0 <HAL_GetTick>
 801ead8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801eada:	e008      	b.n	801eaee <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801eadc:	f7f7 fd08 	bl	80164f0 <HAL_GetTick>
 801eae0:	4602      	mov	r2, r0
 801eae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eae4:	1ad3      	subs	r3, r2, r3
 801eae6:	2b02      	cmp	r3, #2
 801eae8:	d901      	bls.n	801eaee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801eaea:	2303      	movs	r3, #3
 801eaec:	e045      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801eaee:	4b25      	ldr	r3, [pc, #148]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	d1f0      	bne.n	801eadc <HAL_RCC_OscConfig+0x6a4>
 801eafa:	e03d      	b.n	801eb78 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801eafc:	4b21      	ldr	r3, [pc, #132]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801eafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801eb02:	4b20      	ldr	r3, [pc, #128]	; (801eb84 <HAL_RCC_OscConfig+0x74c>)
 801eb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eb06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb0c:	2b01      	cmp	r3, #1
 801eb0e:	d031      	beq.n	801eb74 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801eb10:	693b      	ldr	r3, [r7, #16]
 801eb12:	f003 0203 	and.w	r2, r3, #3
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801eb1a:	429a      	cmp	r2, r3
 801eb1c:	d12a      	bne.n	801eb74 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801eb1e:	693b      	ldr	r3, [r7, #16]
 801eb20:	091b      	lsrs	r3, r3, #4
 801eb22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801eb2a:	429a      	cmp	r2, r3
 801eb2c:	d122      	bne.n	801eb74 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801eb2e:	68fb      	ldr	r3, [r7, #12]
 801eb30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eb38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801eb3a:	429a      	cmp	r2, r3
 801eb3c:	d11a      	bne.n	801eb74 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801eb3e:	68fb      	ldr	r3, [r7, #12]
 801eb40:	0a5b      	lsrs	r3, r3, #9
 801eb42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801eb4c:	429a      	cmp	r2, r3
 801eb4e:	d111      	bne.n	801eb74 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801eb50:	68fb      	ldr	r3, [r7, #12]
 801eb52:	0c1b      	lsrs	r3, r3, #16
 801eb54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801eb5e:	429a      	cmp	r2, r3
 801eb60:	d108      	bne.n	801eb74 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801eb62:	68fb      	ldr	r3, [r7, #12]
 801eb64:	0e1b      	lsrs	r3, r3, #24
 801eb66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801eb6a:	687b      	ldr	r3, [r7, #4]
 801eb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eb6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801eb70:	429a      	cmp	r2, r3
 801eb72:	d001      	beq.n	801eb78 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 801eb74:	2301      	movs	r3, #1
 801eb76:	e000      	b.n	801eb7a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 801eb78:	2300      	movs	r3, #0
}
 801eb7a:	4618      	mov	r0, r3
 801eb7c:	3730      	adds	r7, #48	; 0x30
 801eb7e:	46bd      	mov	sp, r7
 801eb80:	bd80      	pop	{r7, pc}
 801eb82:	bf00      	nop
 801eb84:	58024400 	.word	0x58024400
 801eb88:	fffffc0c 	.word	0xfffffc0c
 801eb8c:	ffff0007 	.word	0xffff0007

0801eb90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801eb90:	b580      	push	{r7, lr}
 801eb92:	b086      	sub	sp, #24
 801eb94:	af00      	add	r7, sp, #0
 801eb96:	6078      	str	r0, [r7, #4]
 801eb98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	d101      	bne.n	801eba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801eba0:	2301      	movs	r3, #1
 801eba2:	e19c      	b.n	801eede <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801eba4:	4b8a      	ldr	r3, [pc, #552]	; (801edd0 <HAL_RCC_ClockConfig+0x240>)
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	f003 030f 	and.w	r3, r3, #15
 801ebac:	683a      	ldr	r2, [r7, #0]
 801ebae:	429a      	cmp	r2, r3
 801ebb0:	d910      	bls.n	801ebd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ebb2:	4b87      	ldr	r3, [pc, #540]	; (801edd0 <HAL_RCC_ClockConfig+0x240>)
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	f023 020f 	bic.w	r2, r3, #15
 801ebba:	4985      	ldr	r1, [pc, #532]	; (801edd0 <HAL_RCC_ClockConfig+0x240>)
 801ebbc:	683b      	ldr	r3, [r7, #0]
 801ebbe:	4313      	orrs	r3, r2
 801ebc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801ebc2:	4b83      	ldr	r3, [pc, #524]	; (801edd0 <HAL_RCC_ClockConfig+0x240>)
 801ebc4:	681b      	ldr	r3, [r3, #0]
 801ebc6:	f003 030f 	and.w	r3, r3, #15
 801ebca:	683a      	ldr	r2, [r7, #0]
 801ebcc:	429a      	cmp	r2, r3
 801ebce:	d001      	beq.n	801ebd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801ebd0:	2301      	movs	r3, #1
 801ebd2:	e184      	b.n	801eede <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	681b      	ldr	r3, [r3, #0]
 801ebd8:	f003 0304 	and.w	r3, r3, #4
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d010      	beq.n	801ec02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	691a      	ldr	r2, [r3, #16]
 801ebe4:	4b7b      	ldr	r3, [pc, #492]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ebe6:	699b      	ldr	r3, [r3, #24]
 801ebe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ebec:	429a      	cmp	r2, r3
 801ebee:	d908      	bls.n	801ec02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801ebf0:	4b78      	ldr	r3, [pc, #480]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ebf2:	699b      	ldr	r3, [r3, #24]
 801ebf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	691b      	ldr	r3, [r3, #16]
 801ebfc:	4975      	ldr	r1, [pc, #468]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ebfe:	4313      	orrs	r3, r2
 801ec00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	f003 0308 	and.w	r3, r3, #8
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d010      	beq.n	801ec30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	695a      	ldr	r2, [r3, #20]
 801ec12:	4b70      	ldr	r3, [pc, #448]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec14:	69db      	ldr	r3, [r3, #28]
 801ec16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ec1a:	429a      	cmp	r2, r3
 801ec1c:	d908      	bls.n	801ec30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801ec1e:	4b6d      	ldr	r3, [pc, #436]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec20:	69db      	ldr	r3, [r3, #28]
 801ec22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	695b      	ldr	r3, [r3, #20]
 801ec2a:	496a      	ldr	r1, [pc, #424]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec2c:	4313      	orrs	r3, r2
 801ec2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	f003 0310 	and.w	r3, r3, #16
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d010      	beq.n	801ec5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	699a      	ldr	r2, [r3, #24]
 801ec40:	4b64      	ldr	r3, [pc, #400]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec42:	69db      	ldr	r3, [r3, #28]
 801ec44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801ec48:	429a      	cmp	r2, r3
 801ec4a:	d908      	bls.n	801ec5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801ec4c:	4b61      	ldr	r3, [pc, #388]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec4e:	69db      	ldr	r3, [r3, #28]
 801ec50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	699b      	ldr	r3, [r3, #24]
 801ec58:	495e      	ldr	r1, [pc, #376]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec5a:	4313      	orrs	r3, r2
 801ec5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	f003 0320 	and.w	r3, r3, #32
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d010      	beq.n	801ec8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	69da      	ldr	r2, [r3, #28]
 801ec6e:	4b59      	ldr	r3, [pc, #356]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec70:	6a1b      	ldr	r3, [r3, #32]
 801ec72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ec76:	429a      	cmp	r2, r3
 801ec78:	d908      	bls.n	801ec8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801ec7a:	4b56      	ldr	r3, [pc, #344]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec7c:	6a1b      	ldr	r3, [r3, #32]
 801ec7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	69db      	ldr	r3, [r3, #28]
 801ec86:	4953      	ldr	r1, [pc, #332]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec88:	4313      	orrs	r3, r2
 801ec8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	681b      	ldr	r3, [r3, #0]
 801ec90:	f003 0302 	and.w	r3, r3, #2
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	d010      	beq.n	801ecba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	68da      	ldr	r2, [r3, #12]
 801ec9c:	4b4d      	ldr	r3, [pc, #308]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ec9e:	699b      	ldr	r3, [r3, #24]
 801eca0:	f003 030f 	and.w	r3, r3, #15
 801eca4:	429a      	cmp	r2, r3
 801eca6:	d908      	bls.n	801ecba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801eca8:	4b4a      	ldr	r3, [pc, #296]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ecaa:	699b      	ldr	r3, [r3, #24]
 801ecac:	f023 020f 	bic.w	r2, r3, #15
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	68db      	ldr	r3, [r3, #12]
 801ecb4:	4947      	ldr	r1, [pc, #284]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ecb6:	4313      	orrs	r3, r2
 801ecb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	f003 0301 	and.w	r3, r3, #1
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d055      	beq.n	801ed72 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801ecc6:	4b43      	ldr	r3, [pc, #268]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ecc8:	699b      	ldr	r3, [r3, #24]
 801ecca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	689b      	ldr	r3, [r3, #8]
 801ecd2:	4940      	ldr	r1, [pc, #256]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ecd4:	4313      	orrs	r3, r2
 801ecd6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	685b      	ldr	r3, [r3, #4]
 801ecdc:	2b02      	cmp	r3, #2
 801ecde:	d107      	bne.n	801ecf0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ece0:	4b3c      	ldr	r3, [pc, #240]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ece2:	681b      	ldr	r3, [r3, #0]
 801ece4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	d121      	bne.n	801ed30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801ecec:	2301      	movs	r3, #1
 801ecee:	e0f6      	b.n	801eede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	685b      	ldr	r3, [r3, #4]
 801ecf4:	2b03      	cmp	r3, #3
 801ecf6:	d107      	bne.n	801ed08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ecf8:	4b36      	ldr	r3, [pc, #216]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d115      	bne.n	801ed30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801ed04:	2301      	movs	r3, #1
 801ed06:	e0ea      	b.n	801eede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	685b      	ldr	r3, [r3, #4]
 801ed0c:	2b01      	cmp	r3, #1
 801ed0e:	d107      	bne.n	801ed20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ed10:	4b30      	ldr	r3, [pc, #192]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	d109      	bne.n	801ed30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801ed1c:	2301      	movs	r3, #1
 801ed1e:	e0de      	b.n	801eede <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ed20:	4b2c      	ldr	r3, [pc, #176]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	f003 0304 	and.w	r3, r3, #4
 801ed28:	2b00      	cmp	r3, #0
 801ed2a:	d101      	bne.n	801ed30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801ed2c:	2301      	movs	r3, #1
 801ed2e:	e0d6      	b.n	801eede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801ed30:	4b28      	ldr	r3, [pc, #160]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ed32:	691b      	ldr	r3, [r3, #16]
 801ed34:	f023 0207 	bic.w	r2, r3, #7
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	685b      	ldr	r3, [r3, #4]
 801ed3c:	4925      	ldr	r1, [pc, #148]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ed3e:	4313      	orrs	r3, r2
 801ed40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ed42:	f7f7 fbd5 	bl	80164f0 <HAL_GetTick>
 801ed46:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ed48:	e00a      	b.n	801ed60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ed4a:	f7f7 fbd1 	bl	80164f0 <HAL_GetTick>
 801ed4e:	4602      	mov	r2, r0
 801ed50:	697b      	ldr	r3, [r7, #20]
 801ed52:	1ad3      	subs	r3, r2, r3
 801ed54:	f241 3288 	movw	r2, #5000	; 0x1388
 801ed58:	4293      	cmp	r3, r2
 801ed5a:	d901      	bls.n	801ed60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801ed5c:	2303      	movs	r3, #3
 801ed5e:	e0be      	b.n	801eede <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ed60:	4b1c      	ldr	r3, [pc, #112]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ed62:	691b      	ldr	r3, [r3, #16]
 801ed64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	685b      	ldr	r3, [r3, #4]
 801ed6c:	00db      	lsls	r3, r3, #3
 801ed6e:	429a      	cmp	r2, r3
 801ed70:	d1eb      	bne.n	801ed4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	f003 0302 	and.w	r3, r3, #2
 801ed7a:	2b00      	cmp	r3, #0
 801ed7c:	d010      	beq.n	801eda0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ed7e:	687b      	ldr	r3, [r7, #4]
 801ed80:	68da      	ldr	r2, [r3, #12]
 801ed82:	4b14      	ldr	r3, [pc, #80]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ed84:	699b      	ldr	r3, [r3, #24]
 801ed86:	f003 030f 	and.w	r3, r3, #15
 801ed8a:	429a      	cmp	r2, r3
 801ed8c:	d208      	bcs.n	801eda0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ed8e:	4b11      	ldr	r3, [pc, #68]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ed90:	699b      	ldr	r3, [r3, #24]
 801ed92:	f023 020f 	bic.w	r2, r3, #15
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	68db      	ldr	r3, [r3, #12]
 801ed9a:	490e      	ldr	r1, [pc, #56]	; (801edd4 <HAL_RCC_ClockConfig+0x244>)
 801ed9c:	4313      	orrs	r3, r2
 801ed9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801eda0:	4b0b      	ldr	r3, [pc, #44]	; (801edd0 <HAL_RCC_ClockConfig+0x240>)
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	f003 030f 	and.w	r3, r3, #15
 801eda8:	683a      	ldr	r2, [r7, #0]
 801edaa:	429a      	cmp	r2, r3
 801edac:	d214      	bcs.n	801edd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801edae:	4b08      	ldr	r3, [pc, #32]	; (801edd0 <HAL_RCC_ClockConfig+0x240>)
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	f023 020f 	bic.w	r2, r3, #15
 801edb6:	4906      	ldr	r1, [pc, #24]	; (801edd0 <HAL_RCC_ClockConfig+0x240>)
 801edb8:	683b      	ldr	r3, [r7, #0]
 801edba:	4313      	orrs	r3, r2
 801edbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801edbe:	4b04      	ldr	r3, [pc, #16]	; (801edd0 <HAL_RCC_ClockConfig+0x240>)
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	f003 030f 	and.w	r3, r3, #15
 801edc6:	683a      	ldr	r2, [r7, #0]
 801edc8:	429a      	cmp	r2, r3
 801edca:	d005      	beq.n	801edd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801edcc:	2301      	movs	r3, #1
 801edce:	e086      	b.n	801eede <HAL_RCC_ClockConfig+0x34e>
 801edd0:	52002000 	.word	0x52002000
 801edd4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	f003 0304 	and.w	r3, r3, #4
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d010      	beq.n	801ee06 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	691a      	ldr	r2, [r3, #16]
 801ede8:	4b3f      	ldr	r3, [pc, #252]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801edea:	699b      	ldr	r3, [r3, #24]
 801edec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801edf0:	429a      	cmp	r2, r3
 801edf2:	d208      	bcs.n	801ee06 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801edf4:	4b3c      	ldr	r3, [pc, #240]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801edf6:	699b      	ldr	r3, [r3, #24]
 801edf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	691b      	ldr	r3, [r3, #16]
 801ee00:	4939      	ldr	r1, [pc, #228]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee02:	4313      	orrs	r3, r2
 801ee04:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	681b      	ldr	r3, [r3, #0]
 801ee0a:	f003 0308 	and.w	r3, r3, #8
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d010      	beq.n	801ee34 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	695a      	ldr	r2, [r3, #20]
 801ee16:	4b34      	ldr	r3, [pc, #208]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee18:	69db      	ldr	r3, [r3, #28]
 801ee1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ee1e:	429a      	cmp	r2, r3
 801ee20:	d208      	bcs.n	801ee34 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801ee22:	4b31      	ldr	r3, [pc, #196]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee24:	69db      	ldr	r3, [r3, #28]
 801ee26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	695b      	ldr	r3, [r3, #20]
 801ee2e:	492e      	ldr	r1, [pc, #184]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee30:	4313      	orrs	r3, r2
 801ee32:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	681b      	ldr	r3, [r3, #0]
 801ee38:	f003 0310 	and.w	r3, r3, #16
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	d010      	beq.n	801ee62 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	699a      	ldr	r2, [r3, #24]
 801ee44:	4b28      	ldr	r3, [pc, #160]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee46:	69db      	ldr	r3, [r3, #28]
 801ee48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801ee4c:	429a      	cmp	r2, r3
 801ee4e:	d208      	bcs.n	801ee62 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801ee50:	4b25      	ldr	r3, [pc, #148]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee52:	69db      	ldr	r3, [r3, #28]
 801ee54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	699b      	ldr	r3, [r3, #24]
 801ee5c:	4922      	ldr	r1, [pc, #136]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee5e:	4313      	orrs	r3, r2
 801ee60:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	681b      	ldr	r3, [r3, #0]
 801ee66:	f003 0320 	and.w	r3, r3, #32
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d010      	beq.n	801ee90 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	69da      	ldr	r2, [r3, #28]
 801ee72:	4b1d      	ldr	r3, [pc, #116]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee74:	6a1b      	ldr	r3, [r3, #32]
 801ee76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ee7a:	429a      	cmp	r2, r3
 801ee7c:	d208      	bcs.n	801ee90 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801ee7e:	4b1a      	ldr	r3, [pc, #104]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee80:	6a1b      	ldr	r3, [r3, #32]
 801ee82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	69db      	ldr	r3, [r3, #28]
 801ee8a:	4917      	ldr	r1, [pc, #92]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee8c:	4313      	orrs	r3, r2
 801ee8e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801ee90:	f000 f834 	bl	801eefc <HAL_RCC_GetSysClockFreq>
 801ee94:	4602      	mov	r2, r0
 801ee96:	4b14      	ldr	r3, [pc, #80]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801ee98:	699b      	ldr	r3, [r3, #24]
 801ee9a:	0a1b      	lsrs	r3, r3, #8
 801ee9c:	f003 030f 	and.w	r3, r3, #15
 801eea0:	4912      	ldr	r1, [pc, #72]	; (801eeec <HAL_RCC_ClockConfig+0x35c>)
 801eea2:	5ccb      	ldrb	r3, [r1, r3]
 801eea4:	f003 031f 	and.w	r3, r3, #31
 801eea8:	fa22 f303 	lsr.w	r3, r2, r3
 801eeac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801eeae:	4b0e      	ldr	r3, [pc, #56]	; (801eee8 <HAL_RCC_ClockConfig+0x358>)
 801eeb0:	699b      	ldr	r3, [r3, #24]
 801eeb2:	f003 030f 	and.w	r3, r3, #15
 801eeb6:	4a0d      	ldr	r2, [pc, #52]	; (801eeec <HAL_RCC_ClockConfig+0x35c>)
 801eeb8:	5cd3      	ldrb	r3, [r2, r3]
 801eeba:	f003 031f 	and.w	r3, r3, #31
 801eebe:	693a      	ldr	r2, [r7, #16]
 801eec0:	fa22 f303 	lsr.w	r3, r2, r3
 801eec4:	4a0a      	ldr	r2, [pc, #40]	; (801eef0 <HAL_RCC_ClockConfig+0x360>)
 801eec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801eec8:	4a0a      	ldr	r2, [pc, #40]	; (801eef4 <HAL_RCC_ClockConfig+0x364>)
 801eeca:	693b      	ldr	r3, [r7, #16]
 801eecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 801eece:	4b0a      	ldr	r3, [pc, #40]	; (801eef8 <HAL_RCC_ClockConfig+0x368>)
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	4618      	mov	r0, r3
 801eed4:	f7f7 fac2 	bl	801645c <HAL_InitTick>
 801eed8:	4603      	mov	r3, r0
 801eeda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801eedc:	7bfb      	ldrb	r3, [r7, #15]
}
 801eede:	4618      	mov	r0, r3
 801eee0:	3718      	adds	r7, #24
 801eee2:	46bd      	mov	sp, r7
 801eee4:	bd80      	pop	{r7, pc}
 801eee6:	bf00      	nop
 801eee8:	58024400 	.word	0x58024400
 801eeec:	0802b4d4 	.word	0x0802b4d4
 801eef0:	24000028 	.word	0x24000028
 801eef4:	24000024 	.word	0x24000024
 801eef8:	2400029c 	.word	0x2400029c

0801eefc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801eefc:	b480      	push	{r7}
 801eefe:	b089      	sub	sp, #36	; 0x24
 801ef00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ef02:	4bb3      	ldr	r3, [pc, #716]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ef04:	691b      	ldr	r3, [r3, #16]
 801ef06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ef0a:	2b18      	cmp	r3, #24
 801ef0c:	f200 8155 	bhi.w	801f1ba <HAL_RCC_GetSysClockFreq+0x2be>
 801ef10:	a201      	add	r2, pc, #4	; (adr r2, 801ef18 <HAL_RCC_GetSysClockFreq+0x1c>)
 801ef12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ef16:	bf00      	nop
 801ef18:	0801ef7d 	.word	0x0801ef7d
 801ef1c:	0801f1bb 	.word	0x0801f1bb
 801ef20:	0801f1bb 	.word	0x0801f1bb
 801ef24:	0801f1bb 	.word	0x0801f1bb
 801ef28:	0801f1bb 	.word	0x0801f1bb
 801ef2c:	0801f1bb 	.word	0x0801f1bb
 801ef30:	0801f1bb 	.word	0x0801f1bb
 801ef34:	0801f1bb 	.word	0x0801f1bb
 801ef38:	0801efa3 	.word	0x0801efa3
 801ef3c:	0801f1bb 	.word	0x0801f1bb
 801ef40:	0801f1bb 	.word	0x0801f1bb
 801ef44:	0801f1bb 	.word	0x0801f1bb
 801ef48:	0801f1bb 	.word	0x0801f1bb
 801ef4c:	0801f1bb 	.word	0x0801f1bb
 801ef50:	0801f1bb 	.word	0x0801f1bb
 801ef54:	0801f1bb 	.word	0x0801f1bb
 801ef58:	0801efa9 	.word	0x0801efa9
 801ef5c:	0801f1bb 	.word	0x0801f1bb
 801ef60:	0801f1bb 	.word	0x0801f1bb
 801ef64:	0801f1bb 	.word	0x0801f1bb
 801ef68:	0801f1bb 	.word	0x0801f1bb
 801ef6c:	0801f1bb 	.word	0x0801f1bb
 801ef70:	0801f1bb 	.word	0x0801f1bb
 801ef74:	0801f1bb 	.word	0x0801f1bb
 801ef78:	0801efaf 	.word	0x0801efaf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ef7c:	4b94      	ldr	r3, [pc, #592]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	f003 0320 	and.w	r3, r3, #32
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	d009      	beq.n	801ef9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801ef88:	4b91      	ldr	r3, [pc, #580]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ef8a:	681b      	ldr	r3, [r3, #0]
 801ef8c:	08db      	lsrs	r3, r3, #3
 801ef8e:	f003 0303 	and.w	r3, r3, #3
 801ef92:	4a90      	ldr	r2, [pc, #576]	; (801f1d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ef94:	fa22 f303 	lsr.w	r3, r2, r3
 801ef98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 801ef9a:	e111      	b.n	801f1c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801ef9c:	4b8d      	ldr	r3, [pc, #564]	; (801f1d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ef9e:	61bb      	str	r3, [r7, #24]
    break;
 801efa0:	e10e      	b.n	801f1c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801efa2:	4b8d      	ldr	r3, [pc, #564]	; (801f1d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801efa4:	61bb      	str	r3, [r7, #24]
    break;
 801efa6:	e10b      	b.n	801f1c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 801efa8:	4b8c      	ldr	r3, [pc, #560]	; (801f1dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 801efaa:	61bb      	str	r3, [r7, #24]
    break;
 801efac:	e108      	b.n	801f1c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801efae:	4b88      	ldr	r3, [pc, #544]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801efb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801efb2:	f003 0303 	and.w	r3, r3, #3
 801efb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 801efb8:	4b85      	ldr	r3, [pc, #532]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801efba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801efbc:	091b      	lsrs	r3, r3, #4
 801efbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801efc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801efc4:	4b82      	ldr	r3, [pc, #520]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801efc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801efc8:	f003 0301 	and.w	r3, r3, #1
 801efcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801efce:	4b80      	ldr	r3, [pc, #512]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801efd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efd2:	08db      	lsrs	r3, r3, #3
 801efd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801efd8:	68fa      	ldr	r2, [r7, #12]
 801efda:	fb02 f303 	mul.w	r3, r2, r3
 801efde:	ee07 3a90 	vmov	s15, r3
 801efe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efe6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 801efea:	693b      	ldr	r3, [r7, #16]
 801efec:	2b00      	cmp	r3, #0
 801efee:	f000 80e1 	beq.w	801f1b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 801eff2:	697b      	ldr	r3, [r7, #20]
 801eff4:	2b02      	cmp	r3, #2
 801eff6:	f000 8083 	beq.w	801f100 <HAL_RCC_GetSysClockFreq+0x204>
 801effa:	697b      	ldr	r3, [r7, #20]
 801effc:	2b02      	cmp	r3, #2
 801effe:	f200 80a1 	bhi.w	801f144 <HAL_RCC_GetSysClockFreq+0x248>
 801f002:	697b      	ldr	r3, [r7, #20]
 801f004:	2b00      	cmp	r3, #0
 801f006:	d003      	beq.n	801f010 <HAL_RCC_GetSysClockFreq+0x114>
 801f008:	697b      	ldr	r3, [r7, #20]
 801f00a:	2b01      	cmp	r3, #1
 801f00c:	d056      	beq.n	801f0bc <HAL_RCC_GetSysClockFreq+0x1c0>
 801f00e:	e099      	b.n	801f144 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f010:	4b6f      	ldr	r3, [pc, #444]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	f003 0320 	and.w	r3, r3, #32
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d02d      	beq.n	801f078 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801f01c:	4b6c      	ldr	r3, [pc, #432]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	08db      	lsrs	r3, r3, #3
 801f022:	f003 0303 	and.w	r3, r3, #3
 801f026:	4a6b      	ldr	r2, [pc, #428]	; (801f1d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f028:	fa22 f303 	lsr.w	r3, r2, r3
 801f02c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	ee07 3a90 	vmov	s15, r3
 801f034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f038:	693b      	ldr	r3, [r7, #16]
 801f03a:	ee07 3a90 	vmov	s15, r3
 801f03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f046:	4b62      	ldr	r3, [pc, #392]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f04e:	ee07 3a90 	vmov	s15, r3
 801f052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f056:	ed97 6a02 	vldr	s12, [r7, #8]
 801f05a:	eddf 5a61 	vldr	s11, [pc, #388]	; 801f1e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f072:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 801f076:	e087      	b.n	801f188 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801f078:	693b      	ldr	r3, [r7, #16]
 801f07a:	ee07 3a90 	vmov	s15, r3
 801f07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f082:	eddf 6a58 	vldr	s13, [pc, #352]	; 801f1e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 801f086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f08a:	4b51      	ldr	r3, [pc, #324]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f092:	ee07 3a90 	vmov	s15, r3
 801f096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f09a:	ed97 6a02 	vldr	s12, [r7, #8]
 801f09e:	eddf 5a50 	vldr	s11, [pc, #320]	; 801f1e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f0ba:	e065      	b.n	801f188 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801f0bc:	693b      	ldr	r3, [r7, #16]
 801f0be:	ee07 3a90 	vmov	s15, r3
 801f0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 801f1e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801f0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f0ce:	4b40      	ldr	r3, [pc, #256]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f0d6:	ee07 3a90 	vmov	s15, r3
 801f0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f0de:	ed97 6a02 	vldr	s12, [r7, #8]
 801f0e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801f1e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f0fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f0fe:	e043      	b.n	801f188 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801f100:	693b      	ldr	r3, [r7, #16]
 801f102:	ee07 3a90 	vmov	s15, r3
 801f106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f10a:	eddf 6a38 	vldr	s13, [pc, #224]	; 801f1ec <HAL_RCC_GetSysClockFreq+0x2f0>
 801f10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f112:	4b2f      	ldr	r3, [pc, #188]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f11a:	ee07 3a90 	vmov	s15, r3
 801f11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f122:	ed97 6a02 	vldr	s12, [r7, #8]
 801f126:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801f1e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f13e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f142:	e021      	b.n	801f188 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801f144:	693b      	ldr	r3, [r7, #16]
 801f146:	ee07 3a90 	vmov	s15, r3
 801f14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f14e:	eddf 6a26 	vldr	s13, [pc, #152]	; 801f1e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801f152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f156:	4b1e      	ldr	r3, [pc, #120]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f15e:	ee07 3a90 	vmov	s15, r3
 801f162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f166:	ed97 6a02 	vldr	s12, [r7, #8]
 801f16a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801f1e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f16e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f186:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 801f188:	4b11      	ldr	r3, [pc, #68]	; (801f1d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f18c:	0a5b      	lsrs	r3, r3, #9
 801f18e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f192:	3301      	adds	r3, #1
 801f194:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 801f196:	683b      	ldr	r3, [r7, #0]
 801f198:	ee07 3a90 	vmov	s15, r3
 801f19c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 801f1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f1ac:	ee17 3a90 	vmov	r3, s15
 801f1b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801f1b2:	e005      	b.n	801f1c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 801f1b4:	2300      	movs	r3, #0
 801f1b6:	61bb      	str	r3, [r7, #24]
    break;
 801f1b8:	e002      	b.n	801f1c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 801f1ba:	4b07      	ldr	r3, [pc, #28]	; (801f1d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f1bc:	61bb      	str	r3, [r7, #24]
    break;
 801f1be:	bf00      	nop
  }

  return sysclockfreq;
 801f1c0:	69bb      	ldr	r3, [r7, #24]
}
 801f1c2:	4618      	mov	r0, r3
 801f1c4:	3724      	adds	r7, #36	; 0x24
 801f1c6:	46bd      	mov	sp, r7
 801f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1cc:	4770      	bx	lr
 801f1ce:	bf00      	nop
 801f1d0:	58024400 	.word	0x58024400
 801f1d4:	03d09000 	.word	0x03d09000
 801f1d8:	003d0900 	.word	0x003d0900
 801f1dc:	017d7840 	.word	0x017d7840
 801f1e0:	46000000 	.word	0x46000000
 801f1e4:	4c742400 	.word	0x4c742400
 801f1e8:	4a742400 	.word	0x4a742400
 801f1ec:	4bbebc20 	.word	0x4bbebc20

0801f1f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801f1f0:	b580      	push	{r7, lr}
 801f1f2:	b082      	sub	sp, #8
 801f1f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801f1f6:	f7ff fe81 	bl	801eefc <HAL_RCC_GetSysClockFreq>
 801f1fa:	4602      	mov	r2, r0
 801f1fc:	4b10      	ldr	r3, [pc, #64]	; (801f240 <HAL_RCC_GetHCLKFreq+0x50>)
 801f1fe:	699b      	ldr	r3, [r3, #24]
 801f200:	0a1b      	lsrs	r3, r3, #8
 801f202:	f003 030f 	and.w	r3, r3, #15
 801f206:	490f      	ldr	r1, [pc, #60]	; (801f244 <HAL_RCC_GetHCLKFreq+0x54>)
 801f208:	5ccb      	ldrb	r3, [r1, r3]
 801f20a:	f003 031f 	and.w	r3, r3, #31
 801f20e:	fa22 f303 	lsr.w	r3, r2, r3
 801f212:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801f214:	4b0a      	ldr	r3, [pc, #40]	; (801f240 <HAL_RCC_GetHCLKFreq+0x50>)
 801f216:	699b      	ldr	r3, [r3, #24]
 801f218:	f003 030f 	and.w	r3, r3, #15
 801f21c:	4a09      	ldr	r2, [pc, #36]	; (801f244 <HAL_RCC_GetHCLKFreq+0x54>)
 801f21e:	5cd3      	ldrb	r3, [r2, r3]
 801f220:	f003 031f 	and.w	r3, r3, #31
 801f224:	687a      	ldr	r2, [r7, #4]
 801f226:	fa22 f303 	lsr.w	r3, r2, r3
 801f22a:	4a07      	ldr	r2, [pc, #28]	; (801f248 <HAL_RCC_GetHCLKFreq+0x58>)
 801f22c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801f22e:	4a07      	ldr	r2, [pc, #28]	; (801f24c <HAL_RCC_GetHCLKFreq+0x5c>)
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801f234:	4b04      	ldr	r3, [pc, #16]	; (801f248 <HAL_RCC_GetHCLKFreq+0x58>)
 801f236:	681b      	ldr	r3, [r3, #0]
}
 801f238:	4618      	mov	r0, r3
 801f23a:	3708      	adds	r7, #8
 801f23c:	46bd      	mov	sp, r7
 801f23e:	bd80      	pop	{r7, pc}
 801f240:	58024400 	.word	0x58024400
 801f244:	0802b4d4 	.word	0x0802b4d4
 801f248:	24000028 	.word	0x24000028
 801f24c:	24000024 	.word	0x24000024

0801f250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801f250:	b580      	push	{r7, lr}
 801f252:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801f254:	f7ff ffcc 	bl	801f1f0 <HAL_RCC_GetHCLKFreq>
 801f258:	4602      	mov	r2, r0
 801f25a:	4b06      	ldr	r3, [pc, #24]	; (801f274 <HAL_RCC_GetPCLK1Freq+0x24>)
 801f25c:	69db      	ldr	r3, [r3, #28]
 801f25e:	091b      	lsrs	r3, r3, #4
 801f260:	f003 0307 	and.w	r3, r3, #7
 801f264:	4904      	ldr	r1, [pc, #16]	; (801f278 <HAL_RCC_GetPCLK1Freq+0x28>)
 801f266:	5ccb      	ldrb	r3, [r1, r3]
 801f268:	f003 031f 	and.w	r3, r3, #31
 801f26c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801f270:	4618      	mov	r0, r3
 801f272:	bd80      	pop	{r7, pc}
 801f274:	58024400 	.word	0x58024400
 801f278:	0802b4d4 	.word	0x0802b4d4

0801f27c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801f27c:	b580      	push	{r7, lr}
 801f27e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801f280:	f7ff ffb6 	bl	801f1f0 <HAL_RCC_GetHCLKFreq>
 801f284:	4602      	mov	r2, r0
 801f286:	4b06      	ldr	r3, [pc, #24]	; (801f2a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 801f288:	69db      	ldr	r3, [r3, #28]
 801f28a:	0a1b      	lsrs	r3, r3, #8
 801f28c:	f003 0307 	and.w	r3, r3, #7
 801f290:	4904      	ldr	r1, [pc, #16]	; (801f2a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 801f292:	5ccb      	ldrb	r3, [r1, r3]
 801f294:	f003 031f 	and.w	r3, r3, #31
 801f298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801f29c:	4618      	mov	r0, r3
 801f29e:	bd80      	pop	{r7, pc}
 801f2a0:	58024400 	.word	0x58024400
 801f2a4:	0802b4d4 	.word	0x0802b4d4

0801f2a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801f2a8:	b580      	push	{r7, lr}
 801f2aa:	b086      	sub	sp, #24
 801f2ac:	af00      	add	r7, sp, #0
 801f2ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801f2b0:	2300      	movs	r3, #0
 801f2b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801f2b4:	2300      	movs	r3, #0
 801f2b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	d03f      	beq.n	801f344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 801f2c4:	687b      	ldr	r3, [r7, #4]
 801f2c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f2c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801f2cc:	d02a      	beq.n	801f324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801f2ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801f2d2:	d824      	bhi.n	801f31e <HAL_RCCEx_PeriphCLKConfig+0x76>
 801f2d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f2d8:	d018      	beq.n	801f30c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801f2da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f2de:	d81e      	bhi.n	801f31e <HAL_RCCEx_PeriphCLKConfig+0x76>
 801f2e0:	2b00      	cmp	r3, #0
 801f2e2:	d003      	beq.n	801f2ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 801f2e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f2e8:	d007      	beq.n	801f2fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 801f2ea:	e018      	b.n	801f31e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f2ec:	4bab      	ldr	r3, [pc, #684]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2f0:	4aaa      	ldr	r2, [pc, #680]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f2f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f2f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801f2f8:	e015      	b.n	801f326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	3304      	adds	r3, #4
 801f2fe:	2102      	movs	r1, #2
 801f300:	4618      	mov	r0, r3
 801f302:	f001 feff 	bl	8021104 <RCCEx_PLL2_Config>
 801f306:	4603      	mov	r3, r0
 801f308:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801f30a:	e00c      	b.n	801f326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	3324      	adds	r3, #36	; 0x24
 801f310:	2102      	movs	r1, #2
 801f312:	4618      	mov	r0, r3
 801f314:	f001 ffa8 	bl	8021268 <RCCEx_PLL3_Config>
 801f318:	4603      	mov	r3, r0
 801f31a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801f31c:	e003      	b.n	801f326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801f31e:	2301      	movs	r3, #1
 801f320:	75fb      	strb	r3, [r7, #23]
      break;
 801f322:	e000      	b.n	801f326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801f324:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f326:	7dfb      	ldrb	r3, [r7, #23]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d109      	bne.n	801f340 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801f32c:	4b9b      	ldr	r3, [pc, #620]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f338:	4998      	ldr	r1, [pc, #608]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f33a:	4313      	orrs	r3, r2
 801f33c:	650b      	str	r3, [r1, #80]	; 0x50
 801f33e:	e001      	b.n	801f344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f340:	7dfb      	ldrb	r3, [r7, #23]
 801f342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d03d      	beq.n	801f3cc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f354:	2b04      	cmp	r3, #4
 801f356:	d826      	bhi.n	801f3a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 801f358:	a201      	add	r2, pc, #4	; (adr r2, 801f360 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 801f35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f35e:	bf00      	nop
 801f360:	0801f375 	.word	0x0801f375
 801f364:	0801f383 	.word	0x0801f383
 801f368:	0801f395 	.word	0x0801f395
 801f36c:	0801f3ad 	.word	0x0801f3ad
 801f370:	0801f3ad 	.word	0x0801f3ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f374:	4b89      	ldr	r3, [pc, #548]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f378:	4a88      	ldr	r2, [pc, #544]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f37a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f37e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801f380:	e015      	b.n	801f3ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	3304      	adds	r3, #4
 801f386:	2100      	movs	r1, #0
 801f388:	4618      	mov	r0, r3
 801f38a:	f001 febb 	bl	8021104 <RCCEx_PLL2_Config>
 801f38e:	4603      	mov	r3, r0
 801f390:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801f392:	e00c      	b.n	801f3ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	3324      	adds	r3, #36	; 0x24
 801f398:	2100      	movs	r1, #0
 801f39a:	4618      	mov	r0, r3
 801f39c:	f001 ff64 	bl	8021268 <RCCEx_PLL3_Config>
 801f3a0:	4603      	mov	r3, r0
 801f3a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801f3a4:	e003      	b.n	801f3ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801f3a6:	2301      	movs	r3, #1
 801f3a8:	75fb      	strb	r3, [r7, #23]
      break;
 801f3aa:	e000      	b.n	801f3ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 801f3ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f3ae:	7dfb      	ldrb	r3, [r7, #23]
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d109      	bne.n	801f3c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801f3b4:	4b79      	ldr	r3, [pc, #484]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f3b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f3b8:	f023 0207 	bic.w	r2, r3, #7
 801f3bc:	687b      	ldr	r3, [r7, #4]
 801f3be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f3c0:	4976      	ldr	r1, [pc, #472]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f3c2:	4313      	orrs	r3, r2
 801f3c4:	650b      	str	r3, [r1, #80]	; 0x50
 801f3c6:	e001      	b.n	801f3cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f3c8:	7dfb      	ldrb	r3, [r7, #23]
 801f3ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d051      	beq.n	801f47c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f3de:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801f3e2:	d036      	beq.n	801f452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801f3e4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801f3e8:	d830      	bhi.n	801f44c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 801f3ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f3ee:	d032      	beq.n	801f456 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 801f3f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f3f4:	d82a      	bhi.n	801f44c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 801f3f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801f3fa:	d02e      	beq.n	801f45a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 801f3fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801f400:	d824      	bhi.n	801f44c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 801f402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f406:	d018      	beq.n	801f43a <HAL_RCCEx_PeriphCLKConfig+0x192>
 801f408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f40c:	d81e      	bhi.n	801f44c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 801f40e:	2b00      	cmp	r3, #0
 801f410:	d003      	beq.n	801f41a <HAL_RCCEx_PeriphCLKConfig+0x172>
 801f412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f416:	d007      	beq.n	801f428 <HAL_RCCEx_PeriphCLKConfig+0x180>
 801f418:	e018      	b.n	801f44c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f41a:	4b60      	ldr	r3, [pc, #384]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f41e:	4a5f      	ldr	r2, [pc, #380]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f424:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801f426:	e019      	b.n	801f45c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	3304      	adds	r3, #4
 801f42c:	2100      	movs	r1, #0
 801f42e:	4618      	mov	r0, r3
 801f430:	f001 fe68 	bl	8021104 <RCCEx_PLL2_Config>
 801f434:	4603      	mov	r3, r0
 801f436:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801f438:	e010      	b.n	801f45c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	3324      	adds	r3, #36	; 0x24
 801f43e:	2100      	movs	r1, #0
 801f440:	4618      	mov	r0, r3
 801f442:	f001 ff11 	bl	8021268 <RCCEx_PLL3_Config>
 801f446:	4603      	mov	r3, r0
 801f448:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801f44a:	e007      	b.n	801f45c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801f44c:	2301      	movs	r3, #1
 801f44e:	75fb      	strb	r3, [r7, #23]
      break;
 801f450:	e004      	b.n	801f45c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 801f452:	bf00      	nop
 801f454:	e002      	b.n	801f45c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 801f456:	bf00      	nop
 801f458:	e000      	b.n	801f45c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 801f45a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f45c:	7dfb      	ldrb	r3, [r7, #23]
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d10a      	bne.n	801f478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801f462:	4b4e      	ldr	r3, [pc, #312]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f466:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f470:	494a      	ldr	r1, [pc, #296]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f472:	4313      	orrs	r3, r2
 801f474:	658b      	str	r3, [r1, #88]	; 0x58
 801f476:	e001      	b.n	801f47c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f478:	7dfb      	ldrb	r3, [r7, #23]
 801f47a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f484:	2b00      	cmp	r3, #0
 801f486:	d051      	beq.n	801f52c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801f48e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801f492:	d036      	beq.n	801f502 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 801f494:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801f498:	d830      	bhi.n	801f4fc <HAL_RCCEx_PeriphCLKConfig+0x254>
 801f49a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801f49e:	d032      	beq.n	801f506 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 801f4a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801f4a4:	d82a      	bhi.n	801f4fc <HAL_RCCEx_PeriphCLKConfig+0x254>
 801f4a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801f4aa:	d02e      	beq.n	801f50a <HAL_RCCEx_PeriphCLKConfig+0x262>
 801f4ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801f4b0:	d824      	bhi.n	801f4fc <HAL_RCCEx_PeriphCLKConfig+0x254>
 801f4b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801f4b6:	d018      	beq.n	801f4ea <HAL_RCCEx_PeriphCLKConfig+0x242>
 801f4b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801f4bc:	d81e      	bhi.n	801f4fc <HAL_RCCEx_PeriphCLKConfig+0x254>
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d003      	beq.n	801f4ca <HAL_RCCEx_PeriphCLKConfig+0x222>
 801f4c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801f4c6:	d007      	beq.n	801f4d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 801f4c8:	e018      	b.n	801f4fc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f4ca:	4b34      	ldr	r3, [pc, #208]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4ce:	4a33      	ldr	r2, [pc, #204]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f4d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f4d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801f4d6:	e019      	b.n	801f50c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	3304      	adds	r3, #4
 801f4dc:	2100      	movs	r1, #0
 801f4de:	4618      	mov	r0, r3
 801f4e0:	f001 fe10 	bl	8021104 <RCCEx_PLL2_Config>
 801f4e4:	4603      	mov	r3, r0
 801f4e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801f4e8:	e010      	b.n	801f50c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	3324      	adds	r3, #36	; 0x24
 801f4ee:	2100      	movs	r1, #0
 801f4f0:	4618      	mov	r0, r3
 801f4f2:	f001 feb9 	bl	8021268 <RCCEx_PLL3_Config>
 801f4f6:	4603      	mov	r3, r0
 801f4f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801f4fa:	e007      	b.n	801f50c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801f4fc:	2301      	movs	r3, #1
 801f4fe:	75fb      	strb	r3, [r7, #23]
      break;
 801f500:	e004      	b.n	801f50c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 801f502:	bf00      	nop
 801f504:	e002      	b.n	801f50c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 801f506:	bf00      	nop
 801f508:	e000      	b.n	801f50c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 801f50a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f50c:	7dfb      	ldrb	r3, [r7, #23]
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d10a      	bne.n	801f528 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801f512:	4b22      	ldr	r3, [pc, #136]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f516:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801f520:	491e      	ldr	r1, [pc, #120]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f522:	4313      	orrs	r3, r2
 801f524:	658b      	str	r3, [r1, #88]	; 0x58
 801f526:	e001      	b.n	801f52c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f528:	7dfb      	ldrb	r3, [r7, #23]
 801f52a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f534:	2b00      	cmp	r3, #0
 801f536:	d035      	beq.n	801f5a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 801f538:	687b      	ldr	r3, [r7, #4]
 801f53a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f53c:	2b30      	cmp	r3, #48	; 0x30
 801f53e:	d01c      	beq.n	801f57a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801f540:	2b30      	cmp	r3, #48	; 0x30
 801f542:	d817      	bhi.n	801f574 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 801f544:	2b20      	cmp	r3, #32
 801f546:	d00c      	beq.n	801f562 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 801f548:	2b20      	cmp	r3, #32
 801f54a:	d813      	bhi.n	801f574 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	d016      	beq.n	801f57e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 801f550:	2b10      	cmp	r3, #16
 801f552:	d10f      	bne.n	801f574 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f554:	4b11      	ldr	r3, [pc, #68]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f558:	4a10      	ldr	r2, [pc, #64]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f55a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f55e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 801f560:	e00e      	b.n	801f580 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	3304      	adds	r3, #4
 801f566:	2102      	movs	r1, #2
 801f568:	4618      	mov	r0, r3
 801f56a:	f001 fdcb 	bl	8021104 <RCCEx_PLL2_Config>
 801f56e:	4603      	mov	r3, r0
 801f570:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 801f572:	e005      	b.n	801f580 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801f574:	2301      	movs	r3, #1
 801f576:	75fb      	strb	r3, [r7, #23]
      break;
 801f578:	e002      	b.n	801f580 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 801f57a:	bf00      	nop
 801f57c:	e000      	b.n	801f580 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 801f57e:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f580:	7dfb      	ldrb	r3, [r7, #23]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d10c      	bne.n	801f5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801f586:	4b05      	ldr	r3, [pc, #20]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f58a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f592:	4902      	ldr	r1, [pc, #8]	; (801f59c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801f594:	4313      	orrs	r3, r2
 801f596:	64cb      	str	r3, [r1, #76]	; 0x4c
 801f598:	e004      	b.n	801f5a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 801f59a:	bf00      	nop
 801f59c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f5a0:	7dfb      	ldrb	r3, [r7, #23]
 801f5a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	681b      	ldr	r3, [r3, #0]
 801f5a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d047      	beq.n	801f640 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f5b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f5b8:	d030      	beq.n	801f61c <HAL_RCCEx_PeriphCLKConfig+0x374>
 801f5ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f5be:	d82a      	bhi.n	801f616 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 801f5c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801f5c4:	d02c      	beq.n	801f620 <HAL_RCCEx_PeriphCLKConfig+0x378>
 801f5c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801f5ca:	d824      	bhi.n	801f616 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 801f5cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f5d0:	d018      	beq.n	801f604 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801f5d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f5d6:	d81e      	bhi.n	801f616 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d003      	beq.n	801f5e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801f5dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f5e0:	d007      	beq.n	801f5f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801f5e2:	e018      	b.n	801f616 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f5e4:	4bac      	ldr	r3, [pc, #688]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f5e8:	4aab      	ldr	r2, [pc, #684]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f5ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f5ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801f5f0:	e017      	b.n	801f622 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	3304      	adds	r3, #4
 801f5f6:	2100      	movs	r1, #0
 801f5f8:	4618      	mov	r0, r3
 801f5fa:	f001 fd83 	bl	8021104 <RCCEx_PLL2_Config>
 801f5fe:	4603      	mov	r3, r0
 801f600:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801f602:	e00e      	b.n	801f622 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	3324      	adds	r3, #36	; 0x24
 801f608:	2100      	movs	r1, #0
 801f60a:	4618      	mov	r0, r3
 801f60c:	f001 fe2c 	bl	8021268 <RCCEx_PLL3_Config>
 801f610:	4603      	mov	r3, r0
 801f612:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801f614:	e005      	b.n	801f622 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801f616:	2301      	movs	r3, #1
 801f618:	75fb      	strb	r3, [r7, #23]
      break;
 801f61a:	e002      	b.n	801f622 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 801f61c:	bf00      	nop
 801f61e:	e000      	b.n	801f622 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 801f620:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f622:	7dfb      	ldrb	r3, [r7, #23]
 801f624:	2b00      	cmp	r3, #0
 801f626:	d109      	bne.n	801f63c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801f628:	4b9b      	ldr	r3, [pc, #620]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f62a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f62c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f634:	4998      	ldr	r1, [pc, #608]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f636:	4313      	orrs	r3, r2
 801f638:	650b      	str	r3, [r1, #80]	; 0x50
 801f63a:	e001      	b.n	801f640 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f63c:	7dfb      	ldrb	r3, [r7, #23]
 801f63e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801f640:	687b      	ldr	r3, [r7, #4]
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d049      	beq.n	801f6e0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801f650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f654:	d02e      	beq.n	801f6b4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 801f656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f65a:	d828      	bhi.n	801f6ae <HAL_RCCEx_PeriphCLKConfig+0x406>
 801f65c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801f660:	d02a      	beq.n	801f6b8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 801f662:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801f666:	d822      	bhi.n	801f6ae <HAL_RCCEx_PeriphCLKConfig+0x406>
 801f668:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801f66c:	d026      	beq.n	801f6bc <HAL_RCCEx_PeriphCLKConfig+0x414>
 801f66e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801f672:	d81c      	bhi.n	801f6ae <HAL_RCCEx_PeriphCLKConfig+0x406>
 801f674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801f678:	d010      	beq.n	801f69c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 801f67a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801f67e:	d816      	bhi.n	801f6ae <HAL_RCCEx_PeriphCLKConfig+0x406>
 801f680:	2b00      	cmp	r3, #0
 801f682:	d01d      	beq.n	801f6c0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 801f684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f688:	d111      	bne.n	801f6ae <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	3304      	adds	r3, #4
 801f68e:	2101      	movs	r1, #1
 801f690:	4618      	mov	r0, r3
 801f692:	f001 fd37 	bl	8021104 <RCCEx_PLL2_Config>
 801f696:	4603      	mov	r3, r0
 801f698:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801f69a:	e012      	b.n	801f6c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	3324      	adds	r3, #36	; 0x24
 801f6a0:	2101      	movs	r1, #1
 801f6a2:	4618      	mov	r0, r3
 801f6a4:	f001 fde0 	bl	8021268 <RCCEx_PLL3_Config>
 801f6a8:	4603      	mov	r3, r0
 801f6aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801f6ac:	e009      	b.n	801f6c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801f6ae:	2301      	movs	r3, #1
 801f6b0:	75fb      	strb	r3, [r7, #23]
      break;
 801f6b2:	e006      	b.n	801f6c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 801f6b4:	bf00      	nop
 801f6b6:	e004      	b.n	801f6c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 801f6b8:	bf00      	nop
 801f6ba:	e002      	b.n	801f6c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 801f6bc:	bf00      	nop
 801f6be:	e000      	b.n	801f6c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 801f6c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f6c2:	7dfb      	ldrb	r3, [r7, #23]
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d109      	bne.n	801f6dc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801f6c8:	4b73      	ldr	r3, [pc, #460]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f6cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801f6d4:	4970      	ldr	r1, [pc, #448]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f6d6:	4313      	orrs	r3, r2
 801f6d8:	650b      	str	r3, [r1, #80]	; 0x50
 801f6da:	e001      	b.n	801f6e0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f6dc:	7dfb      	ldrb	r3, [r7, #23]
 801f6de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f6e8:	2b00      	cmp	r3, #0
 801f6ea:	d04b      	beq.n	801f784 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801f6f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801f6f6:	d02e      	beq.n	801f756 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 801f6f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801f6fc:	d828      	bhi.n	801f750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801f6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f702:	d02a      	beq.n	801f75a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 801f704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f708:	d822      	bhi.n	801f750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801f70a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801f70e:	d026      	beq.n	801f75e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 801f710:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801f714:	d81c      	bhi.n	801f750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801f716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801f71a:	d010      	beq.n	801f73e <HAL_RCCEx_PeriphCLKConfig+0x496>
 801f71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801f720:	d816      	bhi.n	801f750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801f722:	2b00      	cmp	r3, #0
 801f724:	d01d      	beq.n	801f762 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 801f726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801f72a:	d111      	bne.n	801f750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801f72c:	687b      	ldr	r3, [r7, #4]
 801f72e:	3304      	adds	r3, #4
 801f730:	2101      	movs	r1, #1
 801f732:	4618      	mov	r0, r3
 801f734:	f001 fce6 	bl	8021104 <RCCEx_PLL2_Config>
 801f738:	4603      	mov	r3, r0
 801f73a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801f73c:	e012      	b.n	801f764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	3324      	adds	r3, #36	; 0x24
 801f742:	2101      	movs	r1, #1
 801f744:	4618      	mov	r0, r3
 801f746:	f001 fd8f 	bl	8021268 <RCCEx_PLL3_Config>
 801f74a:	4603      	mov	r3, r0
 801f74c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801f74e:	e009      	b.n	801f764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 801f750:	2301      	movs	r3, #1
 801f752:	75fb      	strb	r3, [r7, #23]
      break;
 801f754:	e006      	b.n	801f764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 801f756:	bf00      	nop
 801f758:	e004      	b.n	801f764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 801f75a:	bf00      	nop
 801f75c:	e002      	b.n	801f764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 801f75e:	bf00      	nop
 801f760:	e000      	b.n	801f764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 801f762:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f764:	7dfb      	ldrb	r3, [r7, #23]
 801f766:	2b00      	cmp	r3, #0
 801f768:	d10a      	bne.n	801f780 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801f76a:	4b4b      	ldr	r3, [pc, #300]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f76e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801f778:	4947      	ldr	r1, [pc, #284]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f77a:	4313      	orrs	r3, r2
 801f77c:	658b      	str	r3, [r1, #88]	; 0x58
 801f77e:	e001      	b.n	801f784 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f780:	7dfb      	ldrb	r3, [r7, #23]
 801f782:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	681b      	ldr	r3, [r3, #0]
 801f788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	d02f      	beq.n	801f7f0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801f798:	d00e      	beq.n	801f7b8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 801f79a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801f79e:	d814      	bhi.n	801f7ca <HAL_RCCEx_PeriphCLKConfig+0x522>
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d015      	beq.n	801f7d0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 801f7a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801f7a8:	d10f      	bne.n	801f7ca <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f7aa:	4b3b      	ldr	r3, [pc, #236]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f7ae:	4a3a      	ldr	r2, [pc, #232]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f7b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801f7b6:	e00c      	b.n	801f7d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	3304      	adds	r3, #4
 801f7bc:	2101      	movs	r1, #1
 801f7be:	4618      	mov	r0, r3
 801f7c0:	f001 fca0 	bl	8021104 <RCCEx_PLL2_Config>
 801f7c4:	4603      	mov	r3, r0
 801f7c6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801f7c8:	e003      	b.n	801f7d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801f7ca:	2301      	movs	r3, #1
 801f7cc:	75fb      	strb	r3, [r7, #23]
      break;
 801f7ce:	e000      	b.n	801f7d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 801f7d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f7d2:	7dfb      	ldrb	r3, [r7, #23]
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d109      	bne.n	801f7ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801f7d8:	4b2f      	ldr	r3, [pc, #188]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f7dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f7e4:	492c      	ldr	r1, [pc, #176]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f7e6:	4313      	orrs	r3, r2
 801f7e8:	650b      	str	r3, [r1, #80]	; 0x50
 801f7ea:	e001      	b.n	801f7f0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f7ec:	7dfb      	ldrb	r3, [r7, #23]
 801f7ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	681b      	ldr	r3, [r3, #0]
 801f7f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d032      	beq.n	801f862 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f800:	2b03      	cmp	r3, #3
 801f802:	d81b      	bhi.n	801f83c <HAL_RCCEx_PeriphCLKConfig+0x594>
 801f804:	a201      	add	r2, pc, #4	; (adr r2, 801f80c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 801f806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f80a:	bf00      	nop
 801f80c:	0801f843 	.word	0x0801f843
 801f810:	0801f81d 	.word	0x0801f81d
 801f814:	0801f82b 	.word	0x0801f82b
 801f818:	0801f843 	.word	0x0801f843
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f81c:	4b1e      	ldr	r3, [pc, #120]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f820:	4a1d      	ldr	r2, [pc, #116]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801f826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 801f828:	e00c      	b.n	801f844 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	3304      	adds	r3, #4
 801f82e:	2102      	movs	r1, #2
 801f830:	4618      	mov	r0, r3
 801f832:	f001 fc67 	bl	8021104 <RCCEx_PLL2_Config>
 801f836:	4603      	mov	r3, r0
 801f838:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801f83a:	e003      	b.n	801f844 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801f83c:	2301      	movs	r3, #1
 801f83e:	75fb      	strb	r3, [r7, #23]
      break;
 801f840:	e000      	b.n	801f844 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 801f842:	bf00      	nop
    }

    if(ret == HAL_OK)
 801f844:	7dfb      	ldrb	r3, [r7, #23]
 801f846:	2b00      	cmp	r3, #0
 801f848:	d109      	bne.n	801f85e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801f84a:	4b13      	ldr	r3, [pc, #76]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f84e:	f023 0203 	bic.w	r2, r3, #3
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f856:	4910      	ldr	r1, [pc, #64]	; (801f898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 801f858:	4313      	orrs	r3, r2
 801f85a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801f85c:	e001      	b.n	801f862 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f85e:	7dfb      	ldrb	r3, [r7, #23]
 801f860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801f862:	687b      	ldr	r3, [r7, #4]
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	f000 808a 	beq.w	801f984 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801f870:	4b0a      	ldr	r3, [pc, #40]	; (801f89c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	4a09      	ldr	r2, [pc, #36]	; (801f89c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801f876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f87a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801f87c:	f7f6 fe38 	bl	80164f0 <HAL_GetTick>
 801f880:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801f882:	e00d      	b.n	801f8a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f884:	f7f6 fe34 	bl	80164f0 <HAL_GetTick>
 801f888:	4602      	mov	r2, r0
 801f88a:	693b      	ldr	r3, [r7, #16]
 801f88c:	1ad3      	subs	r3, r2, r3
 801f88e:	2b64      	cmp	r3, #100	; 0x64
 801f890:	d906      	bls.n	801f8a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 801f892:	2303      	movs	r3, #3
 801f894:	75fb      	strb	r3, [r7, #23]
        break;
 801f896:	e009      	b.n	801f8ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 801f898:	58024400 	.word	0x58024400
 801f89c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801f8a0:	4bb9      	ldr	r3, [pc, #740]	; (801fb88 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 801f8a2:	681b      	ldr	r3, [r3, #0]
 801f8a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d0eb      	beq.n	801f884 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 801f8ac:	7dfb      	ldrb	r3, [r7, #23]
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	d166      	bne.n	801f980 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801f8b2:	4bb6      	ldr	r3, [pc, #728]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f8b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f8bc:	4053      	eors	r3, r2
 801f8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	d013      	beq.n	801f8ee <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801f8c6:	4bb1      	ldr	r3, [pc, #708]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f8ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f8ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801f8d0:	4bae      	ldr	r3, [pc, #696]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f8d4:	4aad      	ldr	r2, [pc, #692]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f8d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f8da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801f8dc:	4bab      	ldr	r3, [pc, #684]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f8e0:	4aaa      	ldr	r2, [pc, #680]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f8e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f8e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801f8e8:	4aa8      	ldr	r2, [pc, #672]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f8ea:	68fb      	ldr	r3, [r7, #12]
 801f8ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f8f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f8f8:	d115      	bne.n	801f926 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f8fa:	f7f6 fdf9 	bl	80164f0 <HAL_GetTick>
 801f8fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801f900:	e00b      	b.n	801f91a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801f902:	f7f6 fdf5 	bl	80164f0 <HAL_GetTick>
 801f906:	4602      	mov	r2, r0
 801f908:	693b      	ldr	r3, [r7, #16]
 801f90a:	1ad3      	subs	r3, r2, r3
 801f90c:	f241 3288 	movw	r2, #5000	; 0x1388
 801f910:	4293      	cmp	r3, r2
 801f912:	d902      	bls.n	801f91a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 801f914:	2303      	movs	r3, #3
 801f916:	75fb      	strb	r3, [r7, #23]
            break;
 801f918:	e005      	b.n	801f926 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801f91a:	4b9c      	ldr	r3, [pc, #624]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f91e:	f003 0302 	and.w	r3, r3, #2
 801f922:	2b00      	cmp	r3, #0
 801f924:	d0ed      	beq.n	801f902 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 801f926:	7dfb      	ldrb	r3, [r7, #23]
 801f928:	2b00      	cmp	r3, #0
 801f92a:	d126      	bne.n	801f97a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f93a:	d10d      	bne.n	801f958 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 801f93c:	4b93      	ldr	r3, [pc, #588]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f93e:	691b      	ldr	r3, [r3, #16]
 801f940:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f94a:	0919      	lsrs	r1, r3, #4
 801f94c:	4b90      	ldr	r3, [pc, #576]	; (801fb90 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801f94e:	400b      	ands	r3, r1
 801f950:	498e      	ldr	r1, [pc, #568]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f952:	4313      	orrs	r3, r2
 801f954:	610b      	str	r3, [r1, #16]
 801f956:	e005      	b.n	801f964 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 801f958:	4b8c      	ldr	r3, [pc, #560]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f95a:	691b      	ldr	r3, [r3, #16]
 801f95c:	4a8b      	ldr	r2, [pc, #556]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f95e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f962:	6113      	str	r3, [r2, #16]
 801f964:	4b89      	ldr	r3, [pc, #548]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f966:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f96e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f972:	4986      	ldr	r1, [pc, #536]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801f974:	4313      	orrs	r3, r2
 801f976:	670b      	str	r3, [r1, #112]	; 0x70
 801f978:	e004      	b.n	801f984 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801f97a:	7dfb      	ldrb	r3, [r7, #23]
 801f97c:	75bb      	strb	r3, [r7, #22]
 801f97e:	e001      	b.n	801f984 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f980:	7dfb      	ldrb	r3, [r7, #23]
 801f982:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	681b      	ldr	r3, [r3, #0]
 801f988:	f003 0301 	and.w	r3, r3, #1
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	d07e      	beq.n	801fa8e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f994:	2b28      	cmp	r3, #40	; 0x28
 801f996:	d867      	bhi.n	801fa68 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 801f998:	a201      	add	r2, pc, #4	; (adr r2, 801f9a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 801f99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f99e:	bf00      	nop
 801f9a0:	0801fa6f 	.word	0x0801fa6f
 801f9a4:	0801fa69 	.word	0x0801fa69
 801f9a8:	0801fa69 	.word	0x0801fa69
 801f9ac:	0801fa69 	.word	0x0801fa69
 801f9b0:	0801fa69 	.word	0x0801fa69
 801f9b4:	0801fa69 	.word	0x0801fa69
 801f9b8:	0801fa69 	.word	0x0801fa69
 801f9bc:	0801fa69 	.word	0x0801fa69
 801f9c0:	0801fa45 	.word	0x0801fa45
 801f9c4:	0801fa69 	.word	0x0801fa69
 801f9c8:	0801fa69 	.word	0x0801fa69
 801f9cc:	0801fa69 	.word	0x0801fa69
 801f9d0:	0801fa69 	.word	0x0801fa69
 801f9d4:	0801fa69 	.word	0x0801fa69
 801f9d8:	0801fa69 	.word	0x0801fa69
 801f9dc:	0801fa69 	.word	0x0801fa69
 801f9e0:	0801fa57 	.word	0x0801fa57
 801f9e4:	0801fa69 	.word	0x0801fa69
 801f9e8:	0801fa69 	.word	0x0801fa69
 801f9ec:	0801fa69 	.word	0x0801fa69
 801f9f0:	0801fa69 	.word	0x0801fa69
 801f9f4:	0801fa69 	.word	0x0801fa69
 801f9f8:	0801fa69 	.word	0x0801fa69
 801f9fc:	0801fa69 	.word	0x0801fa69
 801fa00:	0801fa6f 	.word	0x0801fa6f
 801fa04:	0801fa69 	.word	0x0801fa69
 801fa08:	0801fa69 	.word	0x0801fa69
 801fa0c:	0801fa69 	.word	0x0801fa69
 801fa10:	0801fa69 	.word	0x0801fa69
 801fa14:	0801fa69 	.word	0x0801fa69
 801fa18:	0801fa69 	.word	0x0801fa69
 801fa1c:	0801fa69 	.word	0x0801fa69
 801fa20:	0801fa6f 	.word	0x0801fa6f
 801fa24:	0801fa69 	.word	0x0801fa69
 801fa28:	0801fa69 	.word	0x0801fa69
 801fa2c:	0801fa69 	.word	0x0801fa69
 801fa30:	0801fa69 	.word	0x0801fa69
 801fa34:	0801fa69 	.word	0x0801fa69
 801fa38:	0801fa69 	.word	0x0801fa69
 801fa3c:	0801fa69 	.word	0x0801fa69
 801fa40:	0801fa6f 	.word	0x0801fa6f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801fa44:	687b      	ldr	r3, [r7, #4]
 801fa46:	3304      	adds	r3, #4
 801fa48:	2101      	movs	r1, #1
 801fa4a:	4618      	mov	r0, r3
 801fa4c:	f001 fb5a 	bl	8021104 <RCCEx_PLL2_Config>
 801fa50:	4603      	mov	r3, r0
 801fa52:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801fa54:	e00c      	b.n	801fa70 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	3324      	adds	r3, #36	; 0x24
 801fa5a:	2101      	movs	r1, #1
 801fa5c:	4618      	mov	r0, r3
 801fa5e:	f001 fc03 	bl	8021268 <RCCEx_PLL3_Config>
 801fa62:	4603      	mov	r3, r0
 801fa64:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801fa66:	e003      	b.n	801fa70 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801fa68:	2301      	movs	r3, #1
 801fa6a:	75fb      	strb	r3, [r7, #23]
      break;
 801fa6c:	e000      	b.n	801fa70 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 801fa6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 801fa70:	7dfb      	ldrb	r3, [r7, #23]
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d109      	bne.n	801fa8a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801fa76:	4b45      	ldr	r3, [pc, #276]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801fa78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fa7a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fa82:	4942      	ldr	r1, [pc, #264]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801fa84:	4313      	orrs	r3, r2
 801fa86:	654b      	str	r3, [r1, #84]	; 0x54
 801fa88:	e001      	b.n	801fa8e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fa8a:	7dfb      	ldrb	r3, [r7, #23]
 801fa8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	f003 0302 	and.w	r3, r3, #2
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d037      	beq.n	801fb0a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fa9e:	2b05      	cmp	r3, #5
 801faa0:	d820      	bhi.n	801fae4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 801faa2:	a201      	add	r2, pc, #4	; (adr r2, 801faa8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 801faa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801faa8:	0801faeb 	.word	0x0801faeb
 801faac:	0801fac1 	.word	0x0801fac1
 801fab0:	0801fad3 	.word	0x0801fad3
 801fab4:	0801faeb 	.word	0x0801faeb
 801fab8:	0801faeb 	.word	0x0801faeb
 801fabc:	0801faeb 	.word	0x0801faeb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	3304      	adds	r3, #4
 801fac4:	2101      	movs	r1, #1
 801fac6:	4618      	mov	r0, r3
 801fac8:	f001 fb1c 	bl	8021104 <RCCEx_PLL2_Config>
 801facc:	4603      	mov	r3, r0
 801face:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801fad0:	e00c      	b.n	801faec <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	3324      	adds	r3, #36	; 0x24
 801fad6:	2101      	movs	r1, #1
 801fad8:	4618      	mov	r0, r3
 801fada:	f001 fbc5 	bl	8021268 <RCCEx_PLL3_Config>
 801fade:	4603      	mov	r3, r0
 801fae0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801fae2:	e003      	b.n	801faec <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801fae4:	2301      	movs	r3, #1
 801fae6:	75fb      	strb	r3, [r7, #23]
      break;
 801fae8:	e000      	b.n	801faec <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 801faea:	bf00      	nop
    }

    if(ret == HAL_OK)
 801faec:	7dfb      	ldrb	r3, [r7, #23]
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d109      	bne.n	801fb06 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801faf2:	4b26      	ldr	r3, [pc, #152]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801faf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801faf6:	f023 0207 	bic.w	r2, r3, #7
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fafe:	4923      	ldr	r1, [pc, #140]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801fb00:	4313      	orrs	r3, r2
 801fb02:	654b      	str	r3, [r1, #84]	; 0x54
 801fb04:	e001      	b.n	801fb0a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fb06:	7dfb      	ldrb	r3, [r7, #23]
 801fb08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	f003 0304 	and.w	r3, r3, #4
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d040      	beq.n	801fb98 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801fb1c:	2b05      	cmp	r3, #5
 801fb1e:	d821      	bhi.n	801fb64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 801fb20:	a201      	add	r2, pc, #4	; (adr r2, 801fb28 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 801fb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb26:	bf00      	nop
 801fb28:	0801fb6b 	.word	0x0801fb6b
 801fb2c:	0801fb41 	.word	0x0801fb41
 801fb30:	0801fb53 	.word	0x0801fb53
 801fb34:	0801fb6b 	.word	0x0801fb6b
 801fb38:	0801fb6b 	.word	0x0801fb6b
 801fb3c:	0801fb6b 	.word	0x0801fb6b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	3304      	adds	r3, #4
 801fb44:	2101      	movs	r1, #1
 801fb46:	4618      	mov	r0, r3
 801fb48:	f001 fadc 	bl	8021104 <RCCEx_PLL2_Config>
 801fb4c:	4603      	mov	r3, r0
 801fb4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801fb50:	e00c      	b.n	801fb6c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	3324      	adds	r3, #36	; 0x24
 801fb56:	2101      	movs	r1, #1
 801fb58:	4618      	mov	r0, r3
 801fb5a:	f001 fb85 	bl	8021268 <RCCEx_PLL3_Config>
 801fb5e:	4603      	mov	r3, r0
 801fb60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801fb62:	e003      	b.n	801fb6c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801fb64:	2301      	movs	r3, #1
 801fb66:	75fb      	strb	r3, [r7, #23]
      break;
 801fb68:	e000      	b.n	801fb6c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 801fb6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801fb6c:	7dfb      	ldrb	r3, [r7, #23]
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	d110      	bne.n	801fb94 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801fb72:	4b06      	ldr	r3, [pc, #24]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801fb74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fb76:	f023 0207 	bic.w	r2, r3, #7
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801fb80:	4902      	ldr	r1, [pc, #8]	; (801fb8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801fb82:	4313      	orrs	r3, r2
 801fb84:	658b      	str	r3, [r1, #88]	; 0x58
 801fb86:	e007      	b.n	801fb98 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 801fb88:	58024800 	.word	0x58024800
 801fb8c:	58024400 	.word	0x58024400
 801fb90:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fb94:	7dfb      	ldrb	r3, [r7, #23]
 801fb96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	f003 0320 	and.w	r3, r3, #32
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d04b      	beq.n	801fc3c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 801fba4:	687b      	ldr	r3, [r7, #4]
 801fba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801fbaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801fbae:	d02e      	beq.n	801fc0e <HAL_RCCEx_PeriphCLKConfig+0x966>
 801fbb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801fbb4:	d828      	bhi.n	801fc08 <HAL_RCCEx_PeriphCLKConfig+0x960>
 801fbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fbba:	d02a      	beq.n	801fc12 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 801fbbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fbc0:	d822      	bhi.n	801fc08 <HAL_RCCEx_PeriphCLKConfig+0x960>
 801fbc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801fbc6:	d026      	beq.n	801fc16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 801fbc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801fbcc:	d81c      	bhi.n	801fc08 <HAL_RCCEx_PeriphCLKConfig+0x960>
 801fbce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801fbd2:	d010      	beq.n	801fbf6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 801fbd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801fbd8:	d816      	bhi.n	801fc08 <HAL_RCCEx_PeriphCLKConfig+0x960>
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d01d      	beq.n	801fc1a <HAL_RCCEx_PeriphCLKConfig+0x972>
 801fbde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801fbe2:	d111      	bne.n	801fc08 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	3304      	adds	r3, #4
 801fbe8:	2100      	movs	r1, #0
 801fbea:	4618      	mov	r0, r3
 801fbec:	f001 fa8a 	bl	8021104 <RCCEx_PLL2_Config>
 801fbf0:	4603      	mov	r3, r0
 801fbf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801fbf4:	e012      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	3324      	adds	r3, #36	; 0x24
 801fbfa:	2102      	movs	r1, #2
 801fbfc:	4618      	mov	r0, r3
 801fbfe:	f001 fb33 	bl	8021268 <RCCEx_PLL3_Config>
 801fc02:	4603      	mov	r3, r0
 801fc04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801fc06:	e009      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801fc08:	2301      	movs	r3, #1
 801fc0a:	75fb      	strb	r3, [r7, #23]
      break;
 801fc0c:	e006      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 801fc0e:	bf00      	nop
 801fc10:	e004      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 801fc12:	bf00      	nop
 801fc14:	e002      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 801fc16:	bf00      	nop
 801fc18:	e000      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 801fc1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801fc1c:	7dfb      	ldrb	r3, [r7, #23]
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d10a      	bne.n	801fc38 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801fc22:	4bb2      	ldr	r3, [pc, #712]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fc26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801fc2a:	687b      	ldr	r3, [r7, #4]
 801fc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801fc30:	49ae      	ldr	r1, [pc, #696]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fc32:	4313      	orrs	r3, r2
 801fc34:	654b      	str	r3, [r1, #84]	; 0x54
 801fc36:	e001      	b.n	801fc3c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fc38:	7dfb      	ldrb	r3, [r7, #23]
 801fc3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	d04b      	beq.n	801fce0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801fc4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801fc52:	d02e      	beq.n	801fcb2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 801fc54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801fc58:	d828      	bhi.n	801fcac <HAL_RCCEx_PeriphCLKConfig+0xa04>
 801fc5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fc5e:	d02a      	beq.n	801fcb6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 801fc60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fc64:	d822      	bhi.n	801fcac <HAL_RCCEx_PeriphCLKConfig+0xa04>
 801fc66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801fc6a:	d026      	beq.n	801fcba <HAL_RCCEx_PeriphCLKConfig+0xa12>
 801fc6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801fc70:	d81c      	bhi.n	801fcac <HAL_RCCEx_PeriphCLKConfig+0xa04>
 801fc72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fc76:	d010      	beq.n	801fc9a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 801fc78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fc7c:	d816      	bhi.n	801fcac <HAL_RCCEx_PeriphCLKConfig+0xa04>
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d01d      	beq.n	801fcbe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 801fc82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fc86:	d111      	bne.n	801fcac <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	3304      	adds	r3, #4
 801fc8c:	2100      	movs	r1, #0
 801fc8e:	4618      	mov	r0, r3
 801fc90:	f001 fa38 	bl	8021104 <RCCEx_PLL2_Config>
 801fc94:	4603      	mov	r3, r0
 801fc96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801fc98:	e012      	b.n	801fcc0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	3324      	adds	r3, #36	; 0x24
 801fc9e:	2102      	movs	r1, #2
 801fca0:	4618      	mov	r0, r3
 801fca2:	f001 fae1 	bl	8021268 <RCCEx_PLL3_Config>
 801fca6:	4603      	mov	r3, r0
 801fca8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801fcaa:	e009      	b.n	801fcc0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801fcac:	2301      	movs	r3, #1
 801fcae:	75fb      	strb	r3, [r7, #23]
      break;
 801fcb0:	e006      	b.n	801fcc0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 801fcb2:	bf00      	nop
 801fcb4:	e004      	b.n	801fcc0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 801fcb6:	bf00      	nop
 801fcb8:	e002      	b.n	801fcc0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 801fcba:	bf00      	nop
 801fcbc:	e000      	b.n	801fcc0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 801fcbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 801fcc0:	7dfb      	ldrb	r3, [r7, #23]
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	d10a      	bne.n	801fcdc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801fcc6:	4b89      	ldr	r3, [pc, #548]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fcc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fcca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801fcd4:	4985      	ldr	r1, [pc, #532]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fcd6:	4313      	orrs	r3, r2
 801fcd8:	658b      	str	r3, [r1, #88]	; 0x58
 801fcda:	e001      	b.n	801fce0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fcdc:	7dfb      	ldrb	r3, [r7, #23]
 801fcde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d04b      	beq.n	801fd84 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801fcf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801fcf6:	d02e      	beq.n	801fd56 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 801fcf8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801fcfc:	d828      	bhi.n	801fd50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801fcfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fd02:	d02a      	beq.n	801fd5a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 801fd04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fd08:	d822      	bhi.n	801fd50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801fd0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801fd0e:	d026      	beq.n	801fd5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 801fd10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801fd14:	d81c      	bhi.n	801fd50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801fd16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801fd1a:	d010      	beq.n	801fd3e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 801fd1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801fd20:	d816      	bhi.n	801fd50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	d01d      	beq.n	801fd62 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 801fd26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fd2a:	d111      	bne.n	801fd50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	3304      	adds	r3, #4
 801fd30:	2100      	movs	r1, #0
 801fd32:	4618      	mov	r0, r3
 801fd34:	f001 f9e6 	bl	8021104 <RCCEx_PLL2_Config>
 801fd38:	4603      	mov	r3, r0
 801fd3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801fd3c:	e012      	b.n	801fd64 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	3324      	adds	r3, #36	; 0x24
 801fd42:	2102      	movs	r1, #2
 801fd44:	4618      	mov	r0, r3
 801fd46:	f001 fa8f 	bl	8021268 <RCCEx_PLL3_Config>
 801fd4a:	4603      	mov	r3, r0
 801fd4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801fd4e:	e009      	b.n	801fd64 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801fd50:	2301      	movs	r3, #1
 801fd52:	75fb      	strb	r3, [r7, #23]
      break;
 801fd54:	e006      	b.n	801fd64 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 801fd56:	bf00      	nop
 801fd58:	e004      	b.n	801fd64 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 801fd5a:	bf00      	nop
 801fd5c:	e002      	b.n	801fd64 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 801fd5e:	bf00      	nop
 801fd60:	e000      	b.n	801fd64 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 801fd62:	bf00      	nop
    }

    if(ret == HAL_OK)
 801fd64:	7dfb      	ldrb	r3, [r7, #23]
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d10a      	bne.n	801fd80 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801fd6a:	4b60      	ldr	r3, [pc, #384]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fd6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801fd78:	495c      	ldr	r1, [pc, #368]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fd7a:	4313      	orrs	r3, r2
 801fd7c:	658b      	str	r3, [r1, #88]	; 0x58
 801fd7e:	e001      	b.n	801fd84 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fd80:	7dfb      	ldrb	r3, [r7, #23]
 801fd82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	681b      	ldr	r3, [r3, #0]
 801fd88:	f003 0308 	and.w	r3, r3, #8
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	d018      	beq.n	801fdc2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801fd94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fd98:	d10a      	bne.n	801fdb0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	3324      	adds	r3, #36	; 0x24
 801fd9e:	2102      	movs	r1, #2
 801fda0:	4618      	mov	r0, r3
 801fda2:	f001 fa61 	bl	8021268 <RCCEx_PLL3_Config>
 801fda6:	4603      	mov	r3, r0
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d001      	beq.n	801fdb0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 801fdac:	2301      	movs	r3, #1
 801fdae:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801fdb0:	4b4e      	ldr	r3, [pc, #312]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fdb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fdb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801fdbc:	494b      	ldr	r1, [pc, #300]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fdbe:	4313      	orrs	r3, r2
 801fdc0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	f003 0310 	and.w	r3, r3, #16
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d01a      	beq.n	801fe04 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fdd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fdd8:	d10a      	bne.n	801fdf0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	3324      	adds	r3, #36	; 0x24
 801fdde:	2102      	movs	r1, #2
 801fde0:	4618      	mov	r0, r3
 801fde2:	f001 fa41 	bl	8021268 <RCCEx_PLL3_Config>
 801fde6:	4603      	mov	r3, r0
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d001      	beq.n	801fdf0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 801fdec:	2301      	movs	r3, #1
 801fdee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801fdf0:	4b3e      	ldr	r3, [pc, #248]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fdf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fdf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fdfe:	493b      	ldr	r1, [pc, #236]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fe00:	4313      	orrs	r3, r2
 801fe02:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	681b      	ldr	r3, [r3, #0]
 801fe08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d034      	beq.n	801fe7a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801fe16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801fe1a:	d01d      	beq.n	801fe58 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 801fe1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801fe20:	d817      	bhi.n	801fe52 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 801fe22:	2b00      	cmp	r3, #0
 801fe24:	d003      	beq.n	801fe2e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 801fe26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fe2a:	d009      	beq.n	801fe40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801fe2c:	e011      	b.n	801fe52 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	3304      	adds	r3, #4
 801fe32:	2100      	movs	r1, #0
 801fe34:	4618      	mov	r0, r3
 801fe36:	f001 f965 	bl	8021104 <RCCEx_PLL2_Config>
 801fe3a:	4603      	mov	r3, r0
 801fe3c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801fe3e:	e00c      	b.n	801fe5a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	3324      	adds	r3, #36	; 0x24
 801fe44:	2102      	movs	r1, #2
 801fe46:	4618      	mov	r0, r3
 801fe48:	f001 fa0e 	bl	8021268 <RCCEx_PLL3_Config>
 801fe4c:	4603      	mov	r3, r0
 801fe4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801fe50:	e003      	b.n	801fe5a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801fe52:	2301      	movs	r3, #1
 801fe54:	75fb      	strb	r3, [r7, #23]
      break;
 801fe56:	e000      	b.n	801fe5a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 801fe58:	bf00      	nop
    }

    if(ret == HAL_OK)
 801fe5a:	7dfb      	ldrb	r3, [r7, #23]
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d10a      	bne.n	801fe76 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801fe60:	4b22      	ldr	r3, [pc, #136]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fe62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fe64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801fe6e:	491f      	ldr	r1, [pc, #124]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fe70:	4313      	orrs	r3, r2
 801fe72:	658b      	str	r3, [r1, #88]	; 0x58
 801fe74:	e001      	b.n	801fe7a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fe76:	7dfb      	ldrb	r3, [r7, #23]
 801fe78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	d036      	beq.n	801fef4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801fe8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801fe90:	d01c      	beq.n	801fecc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 801fe92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801fe96:	d816      	bhi.n	801fec6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801fe98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fe9c:	d003      	beq.n	801fea6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 801fe9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801fea2:	d007      	beq.n	801feb4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 801fea4:	e00f      	b.n	801fec6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fea6:	4b11      	ldr	r3, [pc, #68]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801feaa:	4a10      	ldr	r2, [pc, #64]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801feac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801feb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801feb2:	e00c      	b.n	801fece <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	3324      	adds	r3, #36	; 0x24
 801feb8:	2101      	movs	r1, #1
 801feba:	4618      	mov	r0, r3
 801febc:	f001 f9d4 	bl	8021268 <RCCEx_PLL3_Config>
 801fec0:	4603      	mov	r3, r0
 801fec2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 801fec4:	e003      	b.n	801fece <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801fec6:	2301      	movs	r3, #1
 801fec8:	75fb      	strb	r3, [r7, #23]
      break;
 801feca:	e000      	b.n	801fece <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 801fecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 801fece:	7dfb      	ldrb	r3, [r7, #23]
 801fed0:	2b00      	cmp	r3, #0
 801fed2:	d10d      	bne.n	801fef0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801fed4:	4b05      	ldr	r3, [pc, #20]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801fee2:	4902      	ldr	r1, [pc, #8]	; (801feec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 801fee4:	4313      	orrs	r3, r2
 801fee6:	654b      	str	r3, [r1, #84]	; 0x54
 801fee8:	e004      	b.n	801fef4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 801feea:	bf00      	nop
 801feec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fef0:	7dfb      	ldrb	r3, [r7, #23]
 801fef2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d029      	beq.n	801ff54 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d003      	beq.n	801ff10 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 801ff08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ff0c:	d007      	beq.n	801ff1e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 801ff0e:	e00f      	b.n	801ff30 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ff10:	4b61      	ldr	r3, [pc, #388]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801ff12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff14:	4a60      	ldr	r2, [pc, #384]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801ff16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ff1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801ff1c:	e00b      	b.n	801ff36 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	3304      	adds	r3, #4
 801ff22:	2102      	movs	r1, #2
 801ff24:	4618      	mov	r0, r3
 801ff26:	f001 f8ed 	bl	8021104 <RCCEx_PLL2_Config>
 801ff2a:	4603      	mov	r3, r0
 801ff2c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801ff2e:	e002      	b.n	801ff36 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 801ff30:	2301      	movs	r3, #1
 801ff32:	75fb      	strb	r3, [r7, #23]
      break;
 801ff34:	bf00      	nop
    }

    if(ret == HAL_OK)
 801ff36:	7dfb      	ldrb	r3, [r7, #23]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d109      	bne.n	801ff50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801ff3c:	4b56      	ldr	r3, [pc, #344]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801ff3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ff40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ff48:	4953      	ldr	r1, [pc, #332]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801ff4a:	4313      	orrs	r3, r2
 801ff4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 801ff4e:	e001      	b.n	801ff54 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ff50:	7dfb      	ldrb	r3, [r7, #23]
 801ff52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	681b      	ldr	r3, [r3, #0]
 801ff58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	d00a      	beq.n	801ff76 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	3324      	adds	r3, #36	; 0x24
 801ff64:	2102      	movs	r1, #2
 801ff66:	4618      	mov	r0, r3
 801ff68:	f001 f97e 	bl	8021268 <RCCEx_PLL3_Config>
 801ff6c:	4603      	mov	r3, r0
 801ff6e:	2b00      	cmp	r3, #0
 801ff70:	d001      	beq.n	801ff76 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 801ff72:	2301      	movs	r3, #1
 801ff74:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d030      	beq.n	801ffe4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ff86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ff8a:	d017      	beq.n	801ffbc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801ff8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ff90:	d811      	bhi.n	801ffb6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 801ff92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ff96:	d013      	beq.n	801ffc0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 801ff98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ff9c:	d80b      	bhi.n	801ffb6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	d010      	beq.n	801ffc4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 801ffa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ffa6:	d106      	bne.n	801ffb6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ffa8:	4b3b      	ldr	r3, [pc, #236]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801ffaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ffac:	4a3a      	ldr	r2, [pc, #232]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801ffae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ffb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801ffb4:	e007      	b.n	801ffc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801ffb6:	2301      	movs	r3, #1
 801ffb8:	75fb      	strb	r3, [r7, #23]
      break;
 801ffba:	e004      	b.n	801ffc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 801ffbc:	bf00      	nop
 801ffbe:	e002      	b.n	801ffc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 801ffc0:	bf00      	nop
 801ffc2:	e000      	b.n	801ffc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 801ffc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 801ffc6:	7dfb      	ldrb	r3, [r7, #23]
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d109      	bne.n	801ffe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ffcc:	4b32      	ldr	r3, [pc, #200]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801ffce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ffd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ffd8:	492f      	ldr	r1, [pc, #188]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801ffda:	4313      	orrs	r3, r2
 801ffdc:	654b      	str	r3, [r1, #84]	; 0x54
 801ffde:	e001      	b.n	801ffe4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ffe0:	7dfb      	ldrb	r3, [r7, #23]
 801ffe2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ffec:	2b00      	cmp	r3, #0
 801ffee:	d008      	beq.n	8020002 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801fff0:	4b29      	ldr	r3, [pc, #164]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801fff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fff4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fffc:	4926      	ldr	r1, [pc, #152]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801fffe:	4313      	orrs	r3, r2
 8020000:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802000a:	2b00      	cmp	r3, #0
 802000c:	d008      	beq.n	8020020 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 802000e:	4b22      	ldr	r3, [pc, #136]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8020010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020012:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802001a:	491f      	ldr	r1, [pc, #124]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802001c:	4313      	orrs	r3, r2
 802001e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8020028:	2b00      	cmp	r3, #0
 802002a:	d00d      	beq.n	8020048 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802002c:	4b1a      	ldr	r3, [pc, #104]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802002e:	691b      	ldr	r3, [r3, #16]
 8020030:	4a19      	ldr	r2, [pc, #100]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8020032:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8020036:	6113      	str	r3, [r2, #16]
 8020038:	4b17      	ldr	r3, [pc, #92]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802003a:	691a      	ldr	r2, [r3, #16]
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8020042:	4915      	ldr	r1, [pc, #84]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8020044:	4313      	orrs	r3, r2
 8020046:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	681b      	ldr	r3, [r3, #0]
 802004c:	2b00      	cmp	r3, #0
 802004e:	da08      	bge.n	8020062 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8020050:	4b11      	ldr	r3, [pc, #68]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8020052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020054:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802005c:	490e      	ldr	r1, [pc, #56]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802005e:	4313      	orrs	r3, r2
 8020060:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802006a:	2b00      	cmp	r3, #0
 802006c:	d009      	beq.n	8020082 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 802006e:	4b0a      	ldr	r3, [pc, #40]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8020070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020072:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802007c:	4906      	ldr	r1, [pc, #24]	; (8020098 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 802007e:	4313      	orrs	r3, r2
 8020080:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8020082:	7dbb      	ldrb	r3, [r7, #22]
 8020084:	2b00      	cmp	r3, #0
 8020086:	d101      	bne.n	802008c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8020088:	2300      	movs	r3, #0
 802008a:	e000      	b.n	802008e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 802008c:	2301      	movs	r3, #1
}
 802008e:	4618      	mov	r0, r3
 8020090:	3718      	adds	r7, #24
 8020092:	46bd      	mov	sp, r7
 8020094:	bd80      	pop	{r7, pc}
 8020096:	bf00      	nop
 8020098:	58024400 	.word	0x58024400

0802009c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 802009c:	b580      	push	{r7, lr}
 802009e:	b090      	sub	sp, #64	; 0x40
 80200a0:	af00      	add	r7, sp, #0
 80200a2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80200a4:	687b      	ldr	r3, [r7, #4]
 80200a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80200aa:	f040 8089 	bne.w	80201c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80200ae:	4b95      	ldr	r3, [pc, #596]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80200b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80200b2:	f003 0307 	and.w	r3, r3, #7
 80200b6:	633b      	str	r3, [r7, #48]	; 0x30
 80200b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200ba:	2b04      	cmp	r3, #4
 80200bc:	d87d      	bhi.n	80201ba <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80200be:	a201      	add	r2, pc, #4	; (adr r2, 80200c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80200c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80200c4:	080200d9 	.word	0x080200d9
 80200c8:	080200fd 	.word	0x080200fd
 80200cc:	08020121 	.word	0x08020121
 80200d0:	080201b5 	.word	0x080201b5
 80200d4:	08020145 	.word	0x08020145

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80200d8:	4b8a      	ldr	r3, [pc, #552]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80200e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80200e4:	d107      	bne.n	80200f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80200e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80200ea:	4618      	mov	r0, r3
 80200ec:	f000 feb8 	bl	8020e60 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80200f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80200f4:	e3ed      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80200f6:	2300      	movs	r3, #0
 80200f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80200fa:	e3ea      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80200fc:	4b81      	ldr	r3, [pc, #516]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80200fe:	681b      	ldr	r3, [r3, #0]
 8020100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8020104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8020108:	d107      	bne.n	802011a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802010a:	f107 0318 	add.w	r3, r7, #24
 802010e:	4618      	mov	r0, r3
 8020110:	f000 fbfe 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8020114:	69bb      	ldr	r3, [r7, #24]
 8020116:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8020118:	e3db      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 802011a:	2300      	movs	r3, #0
 802011c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802011e:	e3d8      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020120:	4b78      	ldr	r3, [pc, #480]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8020128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802012c:	d107      	bne.n	802013e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802012e:	f107 030c 	add.w	r3, r7, #12
 8020132:	4618      	mov	r0, r3
 8020134:	f000 fd40 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8020138:	68fb      	ldr	r3, [r7, #12]
 802013a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 802013c:	e3c9      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 802013e:	2300      	movs	r3, #0
 8020140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020142:	e3c6      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8020144:	4b6f      	ldr	r3, [pc, #444]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802014c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802014e:	4b6d      	ldr	r3, [pc, #436]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	f003 0304 	and.w	r3, r3, #4
 8020156:	2b04      	cmp	r3, #4
 8020158:	d10c      	bne.n	8020174 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 802015a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802015c:	2b00      	cmp	r3, #0
 802015e:	d109      	bne.n	8020174 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8020160:	4b68      	ldr	r3, [pc, #416]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	08db      	lsrs	r3, r3, #3
 8020166:	f003 0303 	and.w	r3, r3, #3
 802016a:	4a67      	ldr	r2, [pc, #412]	; (8020308 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 802016c:	fa22 f303 	lsr.w	r3, r2, r3
 8020170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020172:	e01e      	b.n	80201b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8020174:	4b63      	ldr	r3, [pc, #396]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020176:	681b      	ldr	r3, [r3, #0]
 8020178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802017c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020180:	d106      	bne.n	8020190 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8020182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8020188:	d102      	bne.n	8020190 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 802018a:	4b60      	ldr	r3, [pc, #384]	; (802030c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 802018c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802018e:	e010      	b.n	80201b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8020190:	4b5c      	ldr	r3, [pc, #368]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802019c:	d106      	bne.n	80201ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 802019e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80201a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80201a4:	d102      	bne.n	80201ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80201a6:	4b5a      	ldr	r3, [pc, #360]	; (8020310 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80201a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80201aa:	e002      	b.n	80201b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80201ac:	2300      	movs	r3, #0
 80201ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80201b0:	e38f      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80201b2:	e38e      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80201b4:	4b57      	ldr	r3, [pc, #348]	; (8020314 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80201b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80201b8:	e38b      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80201ba:	2300      	movs	r3, #0
 80201bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80201be:	e388      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80201c6:	f040 80a7 	bne.w	8020318 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80201ca:	4b4e      	ldr	r3, [pc, #312]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80201cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80201ce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80201d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80201d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80201da:	d054      	beq.n	8020286 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80201dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80201e2:	f200 808b 	bhi.w	80202fc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80201e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80201ec:	f000 8083 	beq.w	80202f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80201f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80201f6:	f200 8081 	bhi.w	80202fc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80201fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8020200:	d02f      	beq.n	8020262 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8020202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8020208:	d878      	bhi.n	80202fc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 802020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802020c:	2b00      	cmp	r3, #0
 802020e:	d004      	beq.n	802021a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8020210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8020216:	d012      	beq.n	802023e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8020218:	e070      	b.n	80202fc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 802021a:	4b3a      	ldr	r3, [pc, #232]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8020226:	d107      	bne.n	8020238 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802022c:	4618      	mov	r0, r3
 802022e:	f000 fe17 	bl	8020e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8020232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020234:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8020236:	e34c      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8020238:	2300      	movs	r3, #0
 802023a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802023c:	e349      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802023e:	4b31      	ldr	r3, [pc, #196]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020240:	681b      	ldr	r3, [r3, #0]
 8020242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8020246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802024a:	d107      	bne.n	802025c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802024c:	f107 0318 	add.w	r3, r7, #24
 8020250:	4618      	mov	r0, r3
 8020252:	f000 fb5d 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8020256:	69bb      	ldr	r3, [r7, #24]
 8020258:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 802025a:	e33a      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 802025c:	2300      	movs	r3, #0
 802025e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020260:	e337      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020262:	4b28      	ldr	r3, [pc, #160]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020264:	681b      	ldr	r3, [r3, #0]
 8020266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802026a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802026e:	d107      	bne.n	8020280 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020270:	f107 030c 	add.w	r3, r7, #12
 8020274:	4618      	mov	r0, r3
 8020276:	f000 fc9f 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 802027a:	68fb      	ldr	r3, [r7, #12]
 802027c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 802027e:	e328      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8020280:	2300      	movs	r3, #0
 8020282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020284:	e325      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8020286:	4b1f      	ldr	r3, [pc, #124]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802028a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802028e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8020290:	4b1c      	ldr	r3, [pc, #112]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	f003 0304 	and.w	r3, r3, #4
 8020298:	2b04      	cmp	r3, #4
 802029a:	d10c      	bne.n	80202b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 802029c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d109      	bne.n	80202b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80202a2:	4b18      	ldr	r3, [pc, #96]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	08db      	lsrs	r3, r3, #3
 80202a8:	f003 0303 	and.w	r3, r3, #3
 80202ac:	4a16      	ldr	r2, [pc, #88]	; (8020308 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80202ae:	fa22 f303 	lsr.w	r3, r2, r3
 80202b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80202b4:	e01e      	b.n	80202f4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80202b6:	4b13      	ldr	r3, [pc, #76]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80202be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80202c2:	d106      	bne.n	80202d2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80202c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80202c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80202ca:	d102      	bne.n	80202d2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80202cc:	4b0f      	ldr	r3, [pc, #60]	; (802030c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80202ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80202d0:	e010      	b.n	80202f4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80202d2:	4b0c      	ldr	r3, [pc, #48]	; (8020304 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80202da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80202de:	d106      	bne.n	80202ee <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80202e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80202e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80202e6:	d102      	bne.n	80202ee <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80202e8:	4b09      	ldr	r3, [pc, #36]	; (8020310 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80202ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80202ec:	e002      	b.n	80202f4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80202ee:	2300      	movs	r3, #0
 80202f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80202f2:	e2ee      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80202f4:	e2ed      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80202f6:	4b07      	ldr	r3, [pc, #28]	; (8020314 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80202f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80202fa:	e2ea      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80202fc:	2300      	movs	r3, #0
 80202fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020300:	e2e7      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8020302:	bf00      	nop
 8020304:	58024400 	.word	0x58024400
 8020308:	03d09000 	.word	0x03d09000
 802030c:	003d0900 	.word	0x003d0900
 8020310:	017d7840 	.word	0x017d7840
 8020314:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802031e:	f040 809c 	bne.w	802045a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8020322:	4b9e      	ldr	r3, [pc, #632]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8020324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020326:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 802032a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 802032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802032e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8020332:	d054      	beq.n	80203de <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8020334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802033a:	f200 808b 	bhi.w	8020454 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 802033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020340:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8020344:	f000 8083 	beq.w	802044e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8020348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802034a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802034e:	f200 8081 	bhi.w	8020454 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8020352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8020358:	d02f      	beq.n	80203ba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 802035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802035c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8020360:	d878      	bhi.n	8020454 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8020362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020364:	2b00      	cmp	r3, #0
 8020366:	d004      	beq.n	8020372 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8020368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802036a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802036e:	d012      	beq.n	8020396 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8020370:	e070      	b.n	8020454 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8020372:	4b8a      	ldr	r3, [pc, #552]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802037a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802037e:	d107      	bne.n	8020390 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020384:	4618      	mov	r0, r3
 8020386:	f000 fd6b 	bl	8020e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802038c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 802038e:	e2a0      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8020390:	2300      	movs	r3, #0
 8020392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020394:	e29d      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8020396:	4b81      	ldr	r3, [pc, #516]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8020398:	681b      	ldr	r3, [r3, #0]
 802039a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802039e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80203a2:	d107      	bne.n	80203b4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80203a4:	f107 0318 	add.w	r3, r7, #24
 80203a8:	4618      	mov	r0, r3
 80203aa:	f000 fab1 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80203ae:	69bb      	ldr	r3, [r7, #24]
 80203b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80203b2:	e28e      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80203b4:	2300      	movs	r3, #0
 80203b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80203b8:	e28b      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80203ba:	4b78      	ldr	r3, [pc, #480]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80203c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80203c6:	d107      	bne.n	80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80203c8:	f107 030c 	add.w	r3, r7, #12
 80203cc:	4618      	mov	r0, r3
 80203ce:	f000 fbf3 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80203d2:	68fb      	ldr	r3, [r7, #12]
 80203d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80203d6:	e27c      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80203d8:	2300      	movs	r3, #0
 80203da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80203dc:	e279      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80203de:	4b6f      	ldr	r3, [pc, #444]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80203e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80203e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80203e6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80203e8:	4b6c      	ldr	r3, [pc, #432]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	f003 0304 	and.w	r3, r3, #4
 80203f0:	2b04      	cmp	r3, #4
 80203f2:	d10c      	bne.n	802040e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80203f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d109      	bne.n	802040e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80203fa:	4b68      	ldr	r3, [pc, #416]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80203fc:	681b      	ldr	r3, [r3, #0]
 80203fe:	08db      	lsrs	r3, r3, #3
 8020400:	f003 0303 	and.w	r3, r3, #3
 8020404:	4a66      	ldr	r2, [pc, #408]	; (80205a0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8020406:	fa22 f303 	lsr.w	r3, r2, r3
 802040a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802040c:	e01e      	b.n	802044c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 802040e:	4b63      	ldr	r3, [pc, #396]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802041a:	d106      	bne.n	802042a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 802041c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802041e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8020422:	d102      	bne.n	802042a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8020424:	4b5f      	ldr	r3, [pc, #380]	; (80205a4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8020426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020428:	e010      	b.n	802044c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 802042a:	4b5c      	ldr	r3, [pc, #368]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8020436:	d106      	bne.n	8020446 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8020438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802043a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802043e:	d102      	bne.n	8020446 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8020440:	4b59      	ldr	r3, [pc, #356]	; (80205a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8020442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020444:	e002      	b.n	802044c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8020446:	2300      	movs	r3, #0
 8020448:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 802044a:	e242      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 802044c:	e241      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 802044e:	4b57      	ldr	r3, [pc, #348]	; (80205ac <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8020450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020452:	e23e      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8020454:	2300      	movs	r3, #0
 8020456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020458:	e23b      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020460:	f040 80a6 	bne.w	80205b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8020464:	4b4d      	ldr	r3, [pc, #308]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8020466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020468:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 802046c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 802046e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020474:	d054      	beq.n	8020520 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8020476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802047c:	f200 808b 	bhi.w	8020596 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8020480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020482:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8020486:	f000 8083 	beq.w	8020590 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 802048a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802048c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8020490:	f200 8081 	bhi.w	8020596 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8020494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802049a:	d02f      	beq.n	80204fc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 802049c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802049e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80204a2:	d878      	bhi.n	8020596 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80204a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d004      	beq.n	80204b4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80204aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80204b0:	d012      	beq.n	80204d8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80204b2:	e070      	b.n	8020596 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80204b4:	4b39      	ldr	r3, [pc, #228]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80204b6:	681b      	ldr	r3, [r3, #0]
 80204b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80204bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80204c0:	d107      	bne.n	80204d2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80204c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204c6:	4618      	mov	r0, r3
 80204c8:	f000 fcca 	bl	8020e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80204cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80204d0:	e1ff      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80204d2:	2300      	movs	r3, #0
 80204d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80204d6:	e1fc      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80204d8:	4b30      	ldr	r3, [pc, #192]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80204da:	681b      	ldr	r3, [r3, #0]
 80204dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80204e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80204e4:	d107      	bne.n	80204f6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80204e6:	f107 0318 	add.w	r3, r7, #24
 80204ea:	4618      	mov	r0, r3
 80204ec:	f000 fa10 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80204f0:	69bb      	ldr	r3, [r7, #24]
 80204f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80204f4:	e1ed      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80204f6:	2300      	movs	r3, #0
 80204f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80204fa:	e1ea      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80204fc:	4b27      	ldr	r3, [pc, #156]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80204fe:	681b      	ldr	r3, [r3, #0]
 8020500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8020504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8020508:	d107      	bne.n	802051a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802050a:	f107 030c 	add.w	r3, r7, #12
 802050e:	4618      	mov	r0, r3
 8020510:	f000 fb52 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8020514:	68fb      	ldr	r3, [r7, #12]
 8020516:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8020518:	e1db      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 802051a:	2300      	movs	r3, #0
 802051c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802051e:	e1d8      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8020520:	4b1e      	ldr	r3, [pc, #120]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8020522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020524:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8020528:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802052a:	4b1c      	ldr	r3, [pc, #112]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	f003 0304 	and.w	r3, r3, #4
 8020532:	2b04      	cmp	r3, #4
 8020534:	d10c      	bne.n	8020550 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8020536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020538:	2b00      	cmp	r3, #0
 802053a:	d109      	bne.n	8020550 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 802053c:	4b17      	ldr	r3, [pc, #92]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	08db      	lsrs	r3, r3, #3
 8020542:	f003 0303 	and.w	r3, r3, #3
 8020546:	4a16      	ldr	r2, [pc, #88]	; (80205a0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8020548:	fa22 f303 	lsr.w	r3, r2, r3
 802054c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802054e:	e01e      	b.n	802058e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8020550:	4b12      	ldr	r3, [pc, #72]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802055c:	d106      	bne.n	802056c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 802055e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8020564:	d102      	bne.n	802056c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8020566:	4b0f      	ldr	r3, [pc, #60]	; (80205a4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8020568:	63fb      	str	r3, [r7, #60]	; 0x3c
 802056a:	e010      	b.n	802058e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 802056c:	4b0b      	ldr	r3, [pc, #44]	; (802059c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8020578:	d106      	bne.n	8020588 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 802057a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802057c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8020580:	d102      	bne.n	8020588 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8020582:	4b09      	ldr	r3, [pc, #36]	; (80205a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8020584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020586:	e002      	b.n	802058e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8020588:	2300      	movs	r3, #0
 802058a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 802058c:	e1a1      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 802058e:	e1a0      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8020590:	4b06      	ldr	r3, [pc, #24]	; (80205ac <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8020592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020594:	e19d      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8020596:	2300      	movs	r3, #0
 8020598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802059a:	e19a      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 802059c:	58024400 	.word	0x58024400
 80205a0:	03d09000 	.word	0x03d09000
 80205a4:	003d0900 	.word	0x003d0900
 80205a8:	017d7840 	.word	0x017d7840
 80205ac:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80205b6:	d173      	bne.n	80206a0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80205b8:	4b9a      	ldr	r3, [pc, #616]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80205ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80205bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80205c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80205c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80205c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80205c8:	d02f      	beq.n	802062a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80205ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80205cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80205d0:	d863      	bhi.n	802069a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80205d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d004      	beq.n	80205e2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80205d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80205da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80205de:	d012      	beq.n	8020606 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80205e0:	e05b      	b.n	802069a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80205e2:	4b90      	ldr	r3, [pc, #576]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80205e4:	681b      	ldr	r3, [r3, #0]
 80205e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80205ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80205ee:	d107      	bne.n	8020600 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80205f0:	f107 0318 	add.w	r3, r7, #24
 80205f4:	4618      	mov	r0, r3
 80205f6:	f000 f98b 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80205fa:	69bb      	ldr	r3, [r7, #24]
 80205fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80205fe:	e168      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8020600:	2300      	movs	r3, #0
 8020602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020604:	e165      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020606:	4b87      	ldr	r3, [pc, #540]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802060e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8020612:	d107      	bne.n	8020624 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020614:	f107 030c 	add.w	r3, r7, #12
 8020618:	4618      	mov	r0, r3
 802061a:	f000 facd 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 802061e:	697b      	ldr	r3, [r7, #20]
 8020620:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8020622:	e156      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8020624:	2300      	movs	r3, #0
 8020626:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020628:	e153      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 802062a:	4b7e      	ldr	r3, [pc, #504]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 802062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802062e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8020632:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8020634:	4b7b      	ldr	r3, [pc, #492]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8020636:	681b      	ldr	r3, [r3, #0]
 8020638:	f003 0304 	and.w	r3, r3, #4
 802063c:	2b04      	cmp	r3, #4
 802063e:	d10c      	bne.n	802065a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8020640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020642:	2b00      	cmp	r3, #0
 8020644:	d109      	bne.n	802065a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8020646:	4b77      	ldr	r3, [pc, #476]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8020648:	681b      	ldr	r3, [r3, #0]
 802064a:	08db      	lsrs	r3, r3, #3
 802064c:	f003 0303 	and.w	r3, r3, #3
 8020650:	4a75      	ldr	r2, [pc, #468]	; (8020828 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8020652:	fa22 f303 	lsr.w	r3, r2, r3
 8020656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020658:	e01e      	b.n	8020698 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 802065a:	4b72      	ldr	r3, [pc, #456]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020666:	d106      	bne.n	8020676 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8020668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802066a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802066e:	d102      	bne.n	8020676 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8020670:	4b6e      	ldr	r3, [pc, #440]	; (802082c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8020672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020674:	e010      	b.n	8020698 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8020676:	4b6b      	ldr	r3, [pc, #428]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8020678:	681b      	ldr	r3, [r3, #0]
 802067a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802067e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8020682:	d106      	bne.n	8020692 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8020684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802068a:	d102      	bne.n	8020692 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 802068c:	4b68      	ldr	r3, [pc, #416]	; (8020830 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 802068e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020690:	e002      	b.n	8020698 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8020692:	2300      	movs	r3, #0
 8020694:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8020696:	e11c      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8020698:	e11b      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 802069a:	2300      	movs	r3, #0
 802069c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802069e:	e118      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80206a6:	d133      	bne.n	8020710 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80206a8:	4b5e      	ldr	r3, [pc, #376]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80206aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80206ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80206b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80206b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	d004      	beq.n	80206c2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80206b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80206ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80206be:	d012      	beq.n	80206e6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80206c0:	e023      	b.n	802070a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80206c2:	4b58      	ldr	r3, [pc, #352]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80206c4:	681b      	ldr	r3, [r3, #0]
 80206c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80206ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80206ce:	d107      	bne.n	80206e0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80206d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206d4:	4618      	mov	r0, r3
 80206d6:	f000 fbc3 	bl	8020e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80206da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80206de:	e0f8      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80206e0:	2300      	movs	r3, #0
 80206e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80206e4:	e0f5      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80206e6:	4b4f      	ldr	r3, [pc, #316]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80206ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80206f2:	d107      	bne.n	8020704 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80206f4:	f107 0318 	add.w	r3, r7, #24
 80206f8:	4618      	mov	r0, r3
 80206fa:	f000 f909 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80206fe:	6a3b      	ldr	r3, [r7, #32]
 8020700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8020702:	e0e6      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8020704:	2300      	movs	r3, #0
 8020706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020708:	e0e3      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 802070a:	2300      	movs	r3, #0
 802070c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802070e:	e0e0      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020716:	f040 808d 	bne.w	8020834 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 802071a:	4b42      	ldr	r3, [pc, #264]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 802071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802071e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8020722:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8020724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802072a:	d06b      	beq.n	8020804 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 802072c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802072e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8020732:	d874      	bhi.n	802081e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8020734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802073a:	d056      	beq.n	80207ea <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 802073c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802073e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020742:	d86c      	bhi.n	802081e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8020744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020746:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802074a:	d03b      	beq.n	80207c4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 802074c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802074e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8020752:	d864      	bhi.n	802081e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8020754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802075a:	d021      	beq.n	80207a0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 802075c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8020762:	d85c      	bhi.n	802081e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8020764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020766:	2b00      	cmp	r3, #0
 8020768:	d004      	beq.n	8020774 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 802076a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802076c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8020770:	d004      	beq.n	802077c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8020772:	e054      	b.n	802081e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8020774:	f000 f8b6 	bl	80208e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8020778:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 802077a:	e0aa      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802077c:	4b29      	ldr	r3, [pc, #164]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 802077e:	681b      	ldr	r3, [r3, #0]
 8020780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8020784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8020788:	d107      	bne.n	802079a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802078a:	f107 0318 	add.w	r3, r7, #24
 802078e:	4618      	mov	r0, r3
 8020790:	f000 f8be 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8020794:	69fb      	ldr	r3, [r7, #28]
 8020796:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8020798:	e09b      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 802079a:	2300      	movs	r3, #0
 802079c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802079e:	e098      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80207a0:	4b20      	ldr	r3, [pc, #128]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80207a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80207ac:	d107      	bne.n	80207be <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80207ae:	f107 030c 	add.w	r3, r7, #12
 80207b2:	4618      	mov	r0, r3
 80207b4:	f000 fa00 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80207b8:	693b      	ldr	r3, [r7, #16]
 80207ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80207bc:	e089      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80207be:	2300      	movs	r3, #0
 80207c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80207c2:	e086      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80207c4:	4b17      	ldr	r3, [pc, #92]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80207c6:	681b      	ldr	r3, [r3, #0]
 80207c8:	f003 0304 	and.w	r3, r3, #4
 80207cc:	2b04      	cmp	r3, #4
 80207ce:	d109      	bne.n	80207e4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80207d0:	4b14      	ldr	r3, [pc, #80]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80207d2:	681b      	ldr	r3, [r3, #0]
 80207d4:	08db      	lsrs	r3, r3, #3
 80207d6:	f003 0303 	and.w	r3, r3, #3
 80207da:	4a13      	ldr	r2, [pc, #76]	; (8020828 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80207dc:	fa22 f303 	lsr.w	r3, r2, r3
 80207e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80207e2:	e076      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80207e4:	2300      	movs	r3, #0
 80207e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80207e8:	e073      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80207ea:	4b0e      	ldr	r3, [pc, #56]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80207f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80207f6:	d102      	bne.n	80207fe <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80207f8:	4b0c      	ldr	r3, [pc, #48]	; (802082c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80207fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80207fc:	e069      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80207fe:	2300      	movs	r3, #0
 8020800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020802:	e066      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8020804:	4b07      	ldr	r3, [pc, #28]	; (8020824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8020806:	681b      	ldr	r3, [r3, #0]
 8020808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802080c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8020810:	d102      	bne.n	8020818 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8020812:	4b07      	ldr	r3, [pc, #28]	; (8020830 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8020814:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8020816:	e05c      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8020818:	2300      	movs	r3, #0
 802081a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802081c:	e059      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 802081e:	2300      	movs	r3, #0
 8020820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8020822:	e056      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8020824:	58024400 	.word	0x58024400
 8020828:	03d09000 	.word	0x03d09000
 802082c:	003d0900 	.word	0x003d0900
 8020830:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802083a:	d148      	bne.n	80208ce <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 802083c:	4b27      	ldr	r3, [pc, #156]	; (80208dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 802083e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8020844:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8020846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802084c:	d02a      	beq.n	80208a4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 802084e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8020854:	d838      	bhi.n	80208c8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8020856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020858:	2b00      	cmp	r3, #0
 802085a:	d004      	beq.n	8020866 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 802085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802085e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8020862:	d00d      	beq.n	8020880 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8020864:	e030      	b.n	80208c8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8020866:	4b1d      	ldr	r3, [pc, #116]	; (80208dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802086e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8020872:	d102      	bne.n	802087a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8020874:	4b1a      	ldr	r3, [pc, #104]	; (80208e0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8020876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8020878:	e02b      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 802087a:	2300      	movs	r3, #0
 802087c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 802087e:	e028      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8020880:	4b16      	ldr	r3, [pc, #88]	; (80208dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802088c:	d107      	bne.n	802089e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020892:	4618      	mov	r0, r3
 8020894:	f000 fae4 	bl	8020e60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8020898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802089a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 802089c:	e019      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 802089e:	2300      	movs	r3, #0
 80208a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80208a2:	e016      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80208a4:	4b0d      	ldr	r3, [pc, #52]	; (80208dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80208ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80208b0:	d107      	bne.n	80208c2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80208b2:	f107 0318 	add.w	r3, r7, #24
 80208b6:	4618      	mov	r0, r3
 80208b8:	f000 f82a 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80208bc:	69fb      	ldr	r3, [r7, #28]
 80208be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80208c0:	e007      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80208c2:	2300      	movs	r3, #0
 80208c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80208c6:	e004      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80208c8:	2300      	movs	r3, #0
 80208ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80208cc:	e001      	b.n	80208d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80208ce:	2300      	movs	r3, #0
 80208d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80208d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80208d4:	4618      	mov	r0, r3
 80208d6:	3740      	adds	r7, #64	; 0x40
 80208d8:	46bd      	mov	sp, r7
 80208da:	bd80      	pop	{r7, pc}
 80208dc:	58024400 	.word	0x58024400
 80208e0:	017d7840 	.word	0x017d7840

080208e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80208e4:	b580      	push	{r7, lr}
 80208e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80208e8:	f7fe fc82 	bl	801f1f0 <HAL_RCC_GetHCLKFreq>
 80208ec:	4602      	mov	r2, r0
 80208ee:	4b06      	ldr	r3, [pc, #24]	; (8020908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80208f0:	6a1b      	ldr	r3, [r3, #32]
 80208f2:	091b      	lsrs	r3, r3, #4
 80208f4:	f003 0307 	and.w	r3, r3, #7
 80208f8:	4904      	ldr	r1, [pc, #16]	; (802090c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80208fa:	5ccb      	ldrb	r3, [r1, r3]
 80208fc:	f003 031f 	and.w	r3, r3, #31
 8020900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8020904:	4618      	mov	r0, r3
 8020906:	bd80      	pop	{r7, pc}
 8020908:	58024400 	.word	0x58024400
 802090c:	0802b4d4 	.word	0x0802b4d4

08020910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8020910:	b480      	push	{r7}
 8020912:	b089      	sub	sp, #36	; 0x24
 8020914:	af00      	add	r7, sp, #0
 8020916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8020918:	4ba1      	ldr	r3, [pc, #644]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802091c:	f003 0303 	and.w	r3, r3, #3
 8020920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8020922:	4b9f      	ldr	r3, [pc, #636]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8020924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020926:	0b1b      	lsrs	r3, r3, #12
 8020928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802092c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 802092e:	4b9c      	ldr	r3, [pc, #624]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8020930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020932:	091b      	lsrs	r3, r3, #4
 8020934:	f003 0301 	and.w	r3, r3, #1
 8020938:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 802093a:	4b99      	ldr	r3, [pc, #612]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802093c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802093e:	08db      	lsrs	r3, r3, #3
 8020940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020944:	693a      	ldr	r2, [r7, #16]
 8020946:	fb02 f303 	mul.w	r3, r2, r3
 802094a:	ee07 3a90 	vmov	s15, r3
 802094e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8020956:	697b      	ldr	r3, [r7, #20]
 8020958:	2b00      	cmp	r3, #0
 802095a:	f000 8111 	beq.w	8020b80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 802095e:	69bb      	ldr	r3, [r7, #24]
 8020960:	2b02      	cmp	r3, #2
 8020962:	f000 8083 	beq.w	8020a6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8020966:	69bb      	ldr	r3, [r7, #24]
 8020968:	2b02      	cmp	r3, #2
 802096a:	f200 80a1 	bhi.w	8020ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 802096e:	69bb      	ldr	r3, [r7, #24]
 8020970:	2b00      	cmp	r3, #0
 8020972:	d003      	beq.n	802097c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8020974:	69bb      	ldr	r3, [r7, #24]
 8020976:	2b01      	cmp	r3, #1
 8020978:	d056      	beq.n	8020a28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 802097a:	e099      	b.n	8020ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802097c:	4b88      	ldr	r3, [pc, #544]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	f003 0320 	and.w	r3, r3, #32
 8020984:	2b00      	cmp	r3, #0
 8020986:	d02d      	beq.n	80209e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8020988:	4b85      	ldr	r3, [pc, #532]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802098a:	681b      	ldr	r3, [r3, #0]
 802098c:	08db      	lsrs	r3, r3, #3
 802098e:	f003 0303 	and.w	r3, r3, #3
 8020992:	4a84      	ldr	r2, [pc, #528]	; (8020ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8020994:	fa22 f303 	lsr.w	r3, r2, r3
 8020998:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 802099a:	68bb      	ldr	r3, [r7, #8]
 802099c:	ee07 3a90 	vmov	s15, r3
 80209a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80209a4:	697b      	ldr	r3, [r7, #20]
 80209a6:	ee07 3a90 	vmov	s15, r3
 80209aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80209ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80209b2:	4b7b      	ldr	r3, [pc, #492]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80209b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80209b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80209ba:	ee07 3a90 	vmov	s15, r3
 80209be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80209c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80209c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8020ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80209ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80209ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80209d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80209d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80209da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80209de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80209e2:	e087      	b.n	8020af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80209e4:	697b      	ldr	r3, [r7, #20]
 80209e6:	ee07 3a90 	vmov	s15, r3
 80209ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80209ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8020bac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80209f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80209f6:	4b6a      	ldr	r3, [pc, #424]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80209f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80209fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80209fe:	ee07 3a90 	vmov	s15, r3
 8020a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8020a0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8020ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8020a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020a26:	e065      	b.n	8020af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8020a28:	697b      	ldr	r3, [r7, #20]
 8020a2a:	ee07 3a90 	vmov	s15, r3
 8020a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020a32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8020bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8020a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020a3a:	4b59      	ldr	r3, [pc, #356]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8020a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020a42:	ee07 3a90 	vmov	s15, r3
 8020a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8020a4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8020ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8020a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020a6a:	e043      	b.n	8020af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8020a6c:	697b      	ldr	r3, [r7, #20]
 8020a6e:	ee07 3a90 	vmov	s15, r3
 8020a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020a76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8020bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8020a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020a7e:	4b48      	ldr	r3, [pc, #288]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8020a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020a86:	ee07 3a90 	vmov	s15, r3
 8020a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8020a92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8020ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8020a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020aae:	e021      	b.n	8020af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8020ab0:	697b      	ldr	r3, [r7, #20]
 8020ab2:	ee07 3a90 	vmov	s15, r3
 8020ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020aba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8020bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8020abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020ac2:	4b37      	ldr	r3, [pc, #220]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8020ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020aca:	ee07 3a90 	vmov	s15, r3
 8020ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8020ad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8020ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8020ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020af2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8020af4:	4b2a      	ldr	r3, [pc, #168]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8020af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020af8:	0a5b      	lsrs	r3, r3, #9
 8020afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020afe:	ee07 3a90 	vmov	s15, r3
 8020b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8020b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8020b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020b1a:	ee17 2a90 	vmov	r2, s15
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8020b22:	4b1f      	ldr	r3, [pc, #124]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8020b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b26:	0c1b      	lsrs	r3, r3, #16
 8020b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020b2c:	ee07 3a90 	vmov	s15, r3
 8020b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8020b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8020b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020b48:	ee17 2a90 	vmov	r2, s15
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8020b50:	4b13      	ldr	r3, [pc, #76]	; (8020ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8020b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b54:	0e1b      	lsrs	r3, r3, #24
 8020b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020b5a:	ee07 3a90 	vmov	s15, r3
 8020b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8020b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8020b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020b76:	ee17 2a90 	vmov	r2, s15
 8020b7a:	687b      	ldr	r3, [r7, #4]
 8020b7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8020b7e:	e008      	b.n	8020b92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	2200      	movs	r2, #0
 8020b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	2200      	movs	r2, #0
 8020b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	2200      	movs	r2, #0
 8020b90:	609a      	str	r2, [r3, #8]
}
 8020b92:	bf00      	nop
 8020b94:	3724      	adds	r7, #36	; 0x24
 8020b96:	46bd      	mov	sp, r7
 8020b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b9c:	4770      	bx	lr
 8020b9e:	bf00      	nop
 8020ba0:	58024400 	.word	0x58024400
 8020ba4:	03d09000 	.word	0x03d09000
 8020ba8:	46000000 	.word	0x46000000
 8020bac:	4c742400 	.word	0x4c742400
 8020bb0:	4a742400 	.word	0x4a742400
 8020bb4:	4bbebc20 	.word	0x4bbebc20

08020bb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8020bb8:	b480      	push	{r7}
 8020bba:	b089      	sub	sp, #36	; 0x24
 8020bbc:	af00      	add	r7, sp, #0
 8020bbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8020bc0:	4ba1      	ldr	r3, [pc, #644]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020bc4:	f003 0303 	and.w	r3, r3, #3
 8020bc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8020bca:	4b9f      	ldr	r3, [pc, #636]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020bce:	0d1b      	lsrs	r3, r3, #20
 8020bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020bd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8020bd6:	4b9c      	ldr	r3, [pc, #624]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020bda:	0a1b      	lsrs	r3, r3, #8
 8020bdc:	f003 0301 	and.w	r3, r3, #1
 8020be0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8020be2:	4b99      	ldr	r3, [pc, #612]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020be6:	08db      	lsrs	r3, r3, #3
 8020be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020bec:	693a      	ldr	r2, [r7, #16]
 8020bee:	fb02 f303 	mul.w	r3, r2, r3
 8020bf2:	ee07 3a90 	vmov	s15, r3
 8020bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8020bfe:	697b      	ldr	r3, [r7, #20]
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	f000 8111 	beq.w	8020e28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8020c06:	69bb      	ldr	r3, [r7, #24]
 8020c08:	2b02      	cmp	r3, #2
 8020c0a:	f000 8083 	beq.w	8020d14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8020c0e:	69bb      	ldr	r3, [r7, #24]
 8020c10:	2b02      	cmp	r3, #2
 8020c12:	f200 80a1 	bhi.w	8020d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8020c16:	69bb      	ldr	r3, [r7, #24]
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d003      	beq.n	8020c24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8020c1c:	69bb      	ldr	r3, [r7, #24]
 8020c1e:	2b01      	cmp	r3, #1
 8020c20:	d056      	beq.n	8020cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8020c22:	e099      	b.n	8020d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020c24:	4b88      	ldr	r3, [pc, #544]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	f003 0320 	and.w	r3, r3, #32
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d02d      	beq.n	8020c8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8020c30:	4b85      	ldr	r3, [pc, #532]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020c32:	681b      	ldr	r3, [r3, #0]
 8020c34:	08db      	lsrs	r3, r3, #3
 8020c36:	f003 0303 	and.w	r3, r3, #3
 8020c3a:	4a84      	ldr	r2, [pc, #528]	; (8020e4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8020c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8020c40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8020c42:	68bb      	ldr	r3, [r7, #8]
 8020c44:	ee07 3a90 	vmov	s15, r3
 8020c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020c4c:	697b      	ldr	r3, [r7, #20]
 8020c4e:	ee07 3a90 	vmov	s15, r3
 8020c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020c5a:	4b7b      	ldr	r3, [pc, #492]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020c62:	ee07 3a90 	vmov	s15, r3
 8020c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8020c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8020e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8020c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020c86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8020c8a:	e087      	b.n	8020d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8020c8c:	697b      	ldr	r3, [r7, #20]
 8020c8e:	ee07 3a90 	vmov	s15, r3
 8020c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8020e54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8020c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020c9e:	4b6a      	ldr	r3, [pc, #424]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020ca6:	ee07 3a90 	vmov	s15, r3
 8020caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8020cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8020e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8020cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020cce:	e065      	b.n	8020d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8020cd0:	697b      	ldr	r3, [r7, #20]
 8020cd2:	ee07 3a90 	vmov	s15, r3
 8020cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8020e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8020cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020ce2:	4b59      	ldr	r3, [pc, #356]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020cea:	ee07 3a90 	vmov	s15, r3
 8020cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8020cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8020e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8020cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020d12:	e043      	b.n	8020d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8020d14:	697b      	ldr	r3, [r7, #20]
 8020d16:	ee07 3a90 	vmov	s15, r3
 8020d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8020e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8020d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020d26:	4b48      	ldr	r3, [pc, #288]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020d2e:	ee07 3a90 	vmov	s15, r3
 8020d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8020d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8020e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8020d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020d56:	e021      	b.n	8020d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8020d58:	697b      	ldr	r3, [r7, #20]
 8020d5a:	ee07 3a90 	vmov	s15, r3
 8020d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8020e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8020d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020d6a:	4b37      	ldr	r3, [pc, #220]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020d72:	ee07 3a90 	vmov	s15, r3
 8020d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8020d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8020e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8020d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020d9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8020d9c:	4b2a      	ldr	r3, [pc, #168]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020da0:	0a5b      	lsrs	r3, r3, #9
 8020da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020da6:	ee07 3a90 	vmov	s15, r3
 8020daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8020db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8020dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020dc2:	ee17 2a90 	vmov	r2, s15
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8020dca:	4b1f      	ldr	r3, [pc, #124]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020dce:	0c1b      	lsrs	r3, r3, #16
 8020dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020dd4:	ee07 3a90 	vmov	s15, r3
 8020dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8020de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8020de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020df0:	ee17 2a90 	vmov	r2, s15
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8020df8:	4b13      	ldr	r3, [pc, #76]	; (8020e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8020dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020dfc:	0e1b      	lsrs	r3, r3, #24
 8020dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020e02:	ee07 3a90 	vmov	s15, r3
 8020e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8020e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8020e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020e1e:	ee17 2a90 	vmov	r2, s15
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8020e26:	e008      	b.n	8020e3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	2200      	movs	r2, #0
 8020e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	2200      	movs	r2, #0
 8020e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8020e34:	687b      	ldr	r3, [r7, #4]
 8020e36:	2200      	movs	r2, #0
 8020e38:	609a      	str	r2, [r3, #8]
}
 8020e3a:	bf00      	nop
 8020e3c:	3724      	adds	r7, #36	; 0x24
 8020e3e:	46bd      	mov	sp, r7
 8020e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e44:	4770      	bx	lr
 8020e46:	bf00      	nop
 8020e48:	58024400 	.word	0x58024400
 8020e4c:	03d09000 	.word	0x03d09000
 8020e50:	46000000 	.word	0x46000000
 8020e54:	4c742400 	.word	0x4c742400
 8020e58:	4a742400 	.word	0x4a742400
 8020e5c:	4bbebc20 	.word	0x4bbebc20

08020e60 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8020e60:	b480      	push	{r7}
 8020e62:	b089      	sub	sp, #36	; 0x24
 8020e64:	af00      	add	r7, sp, #0
 8020e66:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8020e68:	4ba0      	ldr	r3, [pc, #640]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e6c:	f003 0303 	and.w	r3, r3, #3
 8020e70:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8020e72:	4b9e      	ldr	r3, [pc, #632]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e76:	091b      	lsrs	r3, r3, #4
 8020e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020e7c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8020e7e:	4b9b      	ldr	r3, [pc, #620]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e82:	f003 0301 	and.w	r3, r3, #1
 8020e86:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8020e88:	4b98      	ldr	r3, [pc, #608]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020e8c:	08db      	lsrs	r3, r3, #3
 8020e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020e92:	693a      	ldr	r2, [r7, #16]
 8020e94:	fb02 f303 	mul.w	r3, r2, r3
 8020e98:	ee07 3a90 	vmov	s15, r3
 8020e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020ea0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8020ea4:	697b      	ldr	r3, [r7, #20]
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	f000 8111 	beq.w	80210ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8020eac:	69bb      	ldr	r3, [r7, #24]
 8020eae:	2b02      	cmp	r3, #2
 8020eb0:	f000 8083 	beq.w	8020fba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8020eb4:	69bb      	ldr	r3, [r7, #24]
 8020eb6:	2b02      	cmp	r3, #2
 8020eb8:	f200 80a1 	bhi.w	8020ffe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8020ebc:	69bb      	ldr	r3, [r7, #24]
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d003      	beq.n	8020eca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8020ec2:	69bb      	ldr	r3, [r7, #24]
 8020ec4:	2b01      	cmp	r3, #1
 8020ec6:	d056      	beq.n	8020f76 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8020ec8:	e099      	b.n	8020ffe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020eca:	4b88      	ldr	r3, [pc, #544]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020ecc:	681b      	ldr	r3, [r3, #0]
 8020ece:	f003 0320 	and.w	r3, r3, #32
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d02d      	beq.n	8020f32 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8020ed6:	4b85      	ldr	r3, [pc, #532]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020ed8:	681b      	ldr	r3, [r3, #0]
 8020eda:	08db      	lsrs	r3, r3, #3
 8020edc:	f003 0303 	and.w	r3, r3, #3
 8020ee0:	4a83      	ldr	r2, [pc, #524]	; (80210f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8020ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8020ee6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8020ee8:	68bb      	ldr	r3, [r7, #8]
 8020eea:	ee07 3a90 	vmov	s15, r3
 8020eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020ef2:	697b      	ldr	r3, [r7, #20]
 8020ef4:	ee07 3a90 	vmov	s15, r3
 8020ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020f00:	4b7a      	ldr	r3, [pc, #488]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020f08:	ee07 3a90 	vmov	s15, r3
 8020f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020f10:	ed97 6a03 	vldr	s12, [r7, #12]
 8020f14:	eddf 5a77 	vldr	s11, [pc, #476]	; 80210f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8020f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020f2c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8020f30:	e087      	b.n	8021042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8020f32:	697b      	ldr	r3, [r7, #20]
 8020f34:	ee07 3a90 	vmov	s15, r3
 8020f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020f3c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80210f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8020f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020f44:	4b69      	ldr	r3, [pc, #420]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020f4c:	ee07 3a90 	vmov	s15, r3
 8020f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020f54:	ed97 6a03 	vldr	s12, [r7, #12]
 8020f58:	eddf 5a66 	vldr	s11, [pc, #408]	; 80210f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8020f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020f70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020f74:	e065      	b.n	8021042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8020f76:	697b      	ldr	r3, [r7, #20]
 8020f78:	ee07 3a90 	vmov	s15, r3
 8020f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020f80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80210fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8020f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020f88:	4b58      	ldr	r3, [pc, #352]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020f90:	ee07 3a90 	vmov	s15, r3
 8020f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8020f9c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80210f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8020fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020fb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020fb8:	e043      	b.n	8021042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8020fba:	697b      	ldr	r3, [r7, #20]
 8020fbc:	ee07 3a90 	vmov	s15, r3
 8020fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020fc4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8021100 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8020fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020fcc:	4b47      	ldr	r3, [pc, #284]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8020fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020fd4:	ee07 3a90 	vmov	s15, r3
 8020fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8020fe0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80210f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8020fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8020fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8020fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020ff8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8020ffc:	e021      	b.n	8021042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8020ffe:	697b      	ldr	r3, [r7, #20]
 8021000:	ee07 3a90 	vmov	s15, r3
 8021004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021008:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80210f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 802100c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021010:	4b36      	ldr	r3, [pc, #216]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021018:	ee07 3a90 	vmov	s15, r3
 802101c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021020:	ed97 6a03 	vldr	s12, [r7, #12]
 8021024:	eddf 5a33 	vldr	s11, [pc, #204]	; 80210f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802102c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021038:	ee67 7a27 	vmul.f32	s15, s14, s15
 802103c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8021040:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8021042:	4b2a      	ldr	r3, [pc, #168]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021046:	0a5b      	lsrs	r3, r3, #9
 8021048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802104c:	ee07 3a90 	vmov	s15, r3
 8021050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021058:	ee37 7a87 	vadd.f32	s14, s15, s14
 802105c:	edd7 6a07 	vldr	s13, [r7, #28]
 8021060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021068:	ee17 2a90 	vmov	r2, s15
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8021070:	4b1e      	ldr	r3, [pc, #120]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021074:	0c1b      	lsrs	r3, r3, #16
 8021076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802107a:	ee07 3a90 	vmov	s15, r3
 802107e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021086:	ee37 7a87 	vadd.f32	s14, s15, s14
 802108a:	edd7 6a07 	vldr	s13, [r7, #28]
 802108e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021096:	ee17 2a90 	vmov	r2, s15
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 802109e:	4b13      	ldr	r3, [pc, #76]	; (80210ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80210a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210a2:	0e1b      	lsrs	r3, r3, #24
 80210a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80210a8:	ee07 3a90 	vmov	s15, r3
 80210ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80210b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80210b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80210b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80210bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80210c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80210c4:	ee17 2a90 	vmov	r2, s15
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80210cc:	e008      	b.n	80210e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	2200      	movs	r2, #0
 80210d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	2200      	movs	r2, #0
 80210d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	2200      	movs	r2, #0
 80210de:	609a      	str	r2, [r3, #8]
}
 80210e0:	bf00      	nop
 80210e2:	3724      	adds	r7, #36	; 0x24
 80210e4:	46bd      	mov	sp, r7
 80210e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ea:	4770      	bx	lr
 80210ec:	58024400 	.word	0x58024400
 80210f0:	03d09000 	.word	0x03d09000
 80210f4:	46000000 	.word	0x46000000
 80210f8:	4c742400 	.word	0x4c742400
 80210fc:	4a742400 	.word	0x4a742400
 8021100:	4bbebc20 	.word	0x4bbebc20

08021104 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8021104:	b580      	push	{r7, lr}
 8021106:	b084      	sub	sp, #16
 8021108:	af00      	add	r7, sp, #0
 802110a:	6078      	str	r0, [r7, #4]
 802110c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802110e:	2300      	movs	r3, #0
 8021110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8021112:	4b53      	ldr	r3, [pc, #332]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 8021114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021116:	f003 0303 	and.w	r3, r3, #3
 802111a:	2b03      	cmp	r3, #3
 802111c:	d101      	bne.n	8021122 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802111e:	2301      	movs	r3, #1
 8021120:	e099      	b.n	8021256 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8021122:	4b4f      	ldr	r3, [pc, #316]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 8021124:	681b      	ldr	r3, [r3, #0]
 8021126:	4a4e      	ldr	r2, [pc, #312]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 8021128:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802112c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802112e:	f7f5 f9df 	bl	80164f0 <HAL_GetTick>
 8021132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8021134:	e008      	b.n	8021148 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8021136:	f7f5 f9db 	bl	80164f0 <HAL_GetTick>
 802113a:	4602      	mov	r2, r0
 802113c:	68bb      	ldr	r3, [r7, #8]
 802113e:	1ad3      	subs	r3, r2, r3
 8021140:	2b02      	cmp	r3, #2
 8021142:	d901      	bls.n	8021148 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8021144:	2303      	movs	r3, #3
 8021146:	e086      	b.n	8021256 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8021148:	4b45      	ldr	r3, [pc, #276]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8021150:	2b00      	cmp	r3, #0
 8021152:	d1f0      	bne.n	8021136 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8021154:	4b42      	ldr	r3, [pc, #264]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 8021156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021158:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	681b      	ldr	r3, [r3, #0]
 8021160:	031b      	lsls	r3, r3, #12
 8021162:	493f      	ldr	r1, [pc, #252]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 8021164:	4313      	orrs	r3, r2
 8021166:	628b      	str	r3, [r1, #40]	; 0x28
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	685b      	ldr	r3, [r3, #4]
 802116c:	3b01      	subs	r3, #1
 802116e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	689b      	ldr	r3, [r3, #8]
 8021176:	3b01      	subs	r3, #1
 8021178:	025b      	lsls	r3, r3, #9
 802117a:	b29b      	uxth	r3, r3
 802117c:	431a      	orrs	r2, r3
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	68db      	ldr	r3, [r3, #12]
 8021182:	3b01      	subs	r3, #1
 8021184:	041b      	lsls	r3, r3, #16
 8021186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802118a:	431a      	orrs	r2, r3
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	691b      	ldr	r3, [r3, #16]
 8021190:	3b01      	subs	r3, #1
 8021192:	061b      	lsls	r3, r3, #24
 8021194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8021198:	4931      	ldr	r1, [pc, #196]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 802119a:	4313      	orrs	r3, r2
 802119c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802119e:	4b30      	ldr	r3, [pc, #192]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80211a6:	687b      	ldr	r3, [r7, #4]
 80211a8:	695b      	ldr	r3, [r3, #20]
 80211aa:	492d      	ldr	r1, [pc, #180]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211ac:	4313      	orrs	r3, r2
 80211ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80211b0:	4b2b      	ldr	r3, [pc, #172]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211b4:	f023 0220 	bic.w	r2, r3, #32
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	699b      	ldr	r3, [r3, #24]
 80211bc:	4928      	ldr	r1, [pc, #160]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211be:	4313      	orrs	r3, r2
 80211c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80211c2:	4b27      	ldr	r3, [pc, #156]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211c6:	4a26      	ldr	r2, [pc, #152]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211c8:	f023 0310 	bic.w	r3, r3, #16
 80211cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80211ce:	4b24      	ldr	r3, [pc, #144]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80211d2:	4b24      	ldr	r3, [pc, #144]	; (8021264 <RCCEx_PLL2_Config+0x160>)
 80211d4:	4013      	ands	r3, r2
 80211d6:	687a      	ldr	r2, [r7, #4]
 80211d8:	69d2      	ldr	r2, [r2, #28]
 80211da:	00d2      	lsls	r2, r2, #3
 80211dc:	4920      	ldr	r1, [pc, #128]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211de:	4313      	orrs	r3, r2
 80211e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80211e2:	4b1f      	ldr	r3, [pc, #124]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211e6:	4a1e      	ldr	r2, [pc, #120]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211e8:	f043 0310 	orr.w	r3, r3, #16
 80211ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80211ee:	683b      	ldr	r3, [r7, #0]
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	d106      	bne.n	8021202 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80211f4:	4b1a      	ldr	r3, [pc, #104]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211f8:	4a19      	ldr	r2, [pc, #100]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 80211fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80211fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8021200:	e00f      	b.n	8021222 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8021202:	683b      	ldr	r3, [r7, #0]
 8021204:	2b01      	cmp	r3, #1
 8021206:	d106      	bne.n	8021216 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8021208:	4b15      	ldr	r3, [pc, #84]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 802120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802120c:	4a14      	ldr	r2, [pc, #80]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 802120e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021212:	62d3      	str	r3, [r2, #44]	; 0x2c
 8021214:	e005      	b.n	8021222 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8021216:	4b12      	ldr	r3, [pc, #72]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 8021218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802121a:	4a11      	ldr	r2, [pc, #68]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 802121c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8021220:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8021222:	4b0f      	ldr	r3, [pc, #60]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	4a0e      	ldr	r2, [pc, #56]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 8021228:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802122c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802122e:	f7f5 f95f 	bl	80164f0 <HAL_GetTick>
 8021232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8021234:	e008      	b.n	8021248 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8021236:	f7f5 f95b 	bl	80164f0 <HAL_GetTick>
 802123a:	4602      	mov	r2, r0
 802123c:	68bb      	ldr	r3, [r7, #8]
 802123e:	1ad3      	subs	r3, r2, r3
 8021240:	2b02      	cmp	r3, #2
 8021242:	d901      	bls.n	8021248 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8021244:	2303      	movs	r3, #3
 8021246:	e006      	b.n	8021256 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8021248:	4b05      	ldr	r3, [pc, #20]	; (8021260 <RCCEx_PLL2_Config+0x15c>)
 802124a:	681b      	ldr	r3, [r3, #0]
 802124c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8021250:	2b00      	cmp	r3, #0
 8021252:	d0f0      	beq.n	8021236 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8021254:	7bfb      	ldrb	r3, [r7, #15]
}
 8021256:	4618      	mov	r0, r3
 8021258:	3710      	adds	r7, #16
 802125a:	46bd      	mov	sp, r7
 802125c:	bd80      	pop	{r7, pc}
 802125e:	bf00      	nop
 8021260:	58024400 	.word	0x58024400
 8021264:	ffff0007 	.word	0xffff0007

08021268 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8021268:	b580      	push	{r7, lr}
 802126a:	b084      	sub	sp, #16
 802126c:	af00      	add	r7, sp, #0
 802126e:	6078      	str	r0, [r7, #4]
 8021270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8021272:	2300      	movs	r3, #0
 8021274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8021276:	4b53      	ldr	r3, [pc, #332]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802127a:	f003 0303 	and.w	r3, r3, #3
 802127e:	2b03      	cmp	r3, #3
 8021280:	d101      	bne.n	8021286 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8021282:	2301      	movs	r3, #1
 8021284:	e099      	b.n	80213ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8021286:	4b4f      	ldr	r3, [pc, #316]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021288:	681b      	ldr	r3, [r3, #0]
 802128a:	4a4e      	ldr	r2, [pc, #312]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 802128c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021292:	f7f5 f92d 	bl	80164f0 <HAL_GetTick>
 8021296:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8021298:	e008      	b.n	80212ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 802129a:	f7f5 f929 	bl	80164f0 <HAL_GetTick>
 802129e:	4602      	mov	r2, r0
 80212a0:	68bb      	ldr	r3, [r7, #8]
 80212a2:	1ad3      	subs	r3, r2, r3
 80212a4:	2b02      	cmp	r3, #2
 80212a6:	d901      	bls.n	80212ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80212a8:	2303      	movs	r3, #3
 80212aa:	e086      	b.n	80213ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80212ac:	4b45      	ldr	r3, [pc, #276]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d1f0      	bne.n	802129a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80212b8:	4b42      	ldr	r3, [pc, #264]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 80212ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80212bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	051b      	lsls	r3, r3, #20
 80212c6:	493f      	ldr	r1, [pc, #252]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 80212c8:	4313      	orrs	r3, r2
 80212ca:	628b      	str	r3, [r1, #40]	; 0x28
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	685b      	ldr	r3, [r3, #4]
 80212d0:	3b01      	subs	r3, #1
 80212d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	689b      	ldr	r3, [r3, #8]
 80212da:	3b01      	subs	r3, #1
 80212dc:	025b      	lsls	r3, r3, #9
 80212de:	b29b      	uxth	r3, r3
 80212e0:	431a      	orrs	r2, r3
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	68db      	ldr	r3, [r3, #12]
 80212e6:	3b01      	subs	r3, #1
 80212e8:	041b      	lsls	r3, r3, #16
 80212ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80212ee:	431a      	orrs	r2, r3
 80212f0:	687b      	ldr	r3, [r7, #4]
 80212f2:	691b      	ldr	r3, [r3, #16]
 80212f4:	3b01      	subs	r3, #1
 80212f6:	061b      	lsls	r3, r3, #24
 80212f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80212fc:	4931      	ldr	r1, [pc, #196]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 80212fe:	4313      	orrs	r3, r2
 8021300:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8021302:	4b30      	ldr	r3, [pc, #192]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	695b      	ldr	r3, [r3, #20]
 802130e:	492d      	ldr	r1, [pc, #180]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021310:	4313      	orrs	r3, r2
 8021312:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8021314:	4b2b      	ldr	r3, [pc, #172]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021318:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 802131c:	687b      	ldr	r3, [r7, #4]
 802131e:	699b      	ldr	r3, [r3, #24]
 8021320:	4928      	ldr	r1, [pc, #160]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021322:	4313      	orrs	r3, r2
 8021324:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8021326:	4b27      	ldr	r3, [pc, #156]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802132a:	4a26      	ldr	r2, [pc, #152]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 802132c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8021332:	4b24      	ldr	r3, [pc, #144]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8021336:	4b24      	ldr	r3, [pc, #144]	; (80213c8 <RCCEx_PLL3_Config+0x160>)
 8021338:	4013      	ands	r3, r2
 802133a:	687a      	ldr	r2, [r7, #4]
 802133c:	69d2      	ldr	r2, [r2, #28]
 802133e:	00d2      	lsls	r2, r2, #3
 8021340:	4920      	ldr	r1, [pc, #128]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021342:	4313      	orrs	r3, r2
 8021344:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8021346:	4b1f      	ldr	r3, [pc, #124]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802134a:	4a1e      	ldr	r2, [pc, #120]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 802134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8021352:	683b      	ldr	r3, [r7, #0]
 8021354:	2b00      	cmp	r3, #0
 8021356:	d106      	bne.n	8021366 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8021358:	4b1a      	ldr	r3, [pc, #104]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 802135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802135c:	4a19      	ldr	r2, [pc, #100]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 802135e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8021362:	62d3      	str	r3, [r2, #44]	; 0x2c
 8021364:	e00f      	b.n	8021386 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8021366:	683b      	ldr	r3, [r7, #0]
 8021368:	2b01      	cmp	r3, #1
 802136a:	d106      	bne.n	802137a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 802136c:	4b15      	ldr	r3, [pc, #84]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 802136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021370:	4a14      	ldr	r2, [pc, #80]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021376:	62d3      	str	r3, [r2, #44]	; 0x2c
 8021378:	e005      	b.n	8021386 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 802137a:	4b12      	ldr	r3, [pc, #72]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 802137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802137e:	4a11      	ldr	r2, [pc, #68]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021384:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8021386:	4b0f      	ldr	r3, [pc, #60]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	4a0e      	ldr	r2, [pc, #56]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 802138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021392:	f7f5 f8ad 	bl	80164f0 <HAL_GetTick>
 8021396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8021398:	e008      	b.n	80213ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 802139a:	f7f5 f8a9 	bl	80164f0 <HAL_GetTick>
 802139e:	4602      	mov	r2, r0
 80213a0:	68bb      	ldr	r3, [r7, #8]
 80213a2:	1ad3      	subs	r3, r2, r3
 80213a4:	2b02      	cmp	r3, #2
 80213a6:	d901      	bls.n	80213ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80213a8:	2303      	movs	r3, #3
 80213aa:	e006      	b.n	80213ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80213ac:	4b05      	ldr	r3, [pc, #20]	; (80213c4 <RCCEx_PLL3_Config+0x15c>)
 80213ae:	681b      	ldr	r3, [r3, #0]
 80213b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	d0f0      	beq.n	802139a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80213b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80213ba:	4618      	mov	r0, r3
 80213bc:	3710      	adds	r7, #16
 80213be:	46bd      	mov	sp, r7
 80213c0:	bd80      	pop	{r7, pc}
 80213c2:	bf00      	nop
 80213c4:	58024400 	.word	0x58024400
 80213c8:	ffff0007 	.word	0xffff0007

080213cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80213cc:	b580      	push	{r7, lr}
 80213ce:	b082      	sub	sp, #8
 80213d0:	af00      	add	r7, sp, #0
 80213d2:	6078      	str	r0, [r7, #4]
 80213d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	2b00      	cmp	r3, #0
 80213da:	d101      	bne.n	80213e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80213dc:	2301      	movs	r3, #1
 80213de:	e02b      	b.n	8021438 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80213e6:	b2db      	uxtb	r3, r3
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d106      	bne.n	80213fa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	2200      	movs	r2, #0
 80213f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80213f4:	6878      	ldr	r0, [r7, #4]
 80213f6:	f7ec f8fb 	bl	800d5f0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	2202      	movs	r2, #2
 80213fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8021402:	687b      	ldr	r3, [r7, #4]
 8021404:	681a      	ldr	r2, [r3, #0]
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	3304      	adds	r3, #4
 802140a:	4619      	mov	r1, r3
 802140c:	4610      	mov	r0, r2
 802140e:	f005 f88b 	bl	8026528 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8021412:	687b      	ldr	r3, [r7, #4]
 8021414:	6818      	ldr	r0, [r3, #0]
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	685b      	ldr	r3, [r3, #4]
 802141a:	461a      	mov	r2, r3
 802141c:	6839      	ldr	r1, [r7, #0]
 802141e:	f005 f8df 	bl	80265e0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8021422:	4b07      	ldr	r3, [pc, #28]	; (8021440 <HAL_SDRAM_Init+0x74>)
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	4a06      	ldr	r2, [pc, #24]	; (8021440 <HAL_SDRAM_Init+0x74>)
 8021428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802142c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802142e:	687b      	ldr	r3, [r7, #4]
 8021430:	2201      	movs	r2, #1
 8021432:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8021436:	2300      	movs	r3, #0
}
 8021438:	4618      	mov	r0, r3
 802143a:	3708      	adds	r7, #8
 802143c:	46bd      	mov	sp, r7
 802143e:	bd80      	pop	{r7, pc}
 8021440:	52004000 	.word	0x52004000

08021444 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8021444:	b580      	push	{r7, lr}
 8021446:	b084      	sub	sp, #16
 8021448:	af00      	add	r7, sp, #0
 802144a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	2b00      	cmp	r3, #0
 8021450:	d101      	bne.n	8021456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8021452:	2301      	movs	r3, #1
 8021454:	e0f1      	b.n	802163a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	2200      	movs	r2, #0
 802145a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	681b      	ldr	r3, [r3, #0]
 8021460:	4a78      	ldr	r2, [pc, #480]	; (8021644 <HAL_SPI_Init+0x200>)
 8021462:	4293      	cmp	r3, r2
 8021464:	d00f      	beq.n	8021486 <HAL_SPI_Init+0x42>
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	4a77      	ldr	r2, [pc, #476]	; (8021648 <HAL_SPI_Init+0x204>)
 802146c:	4293      	cmp	r3, r2
 802146e:	d00a      	beq.n	8021486 <HAL_SPI_Init+0x42>
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	681b      	ldr	r3, [r3, #0]
 8021474:	4a75      	ldr	r2, [pc, #468]	; (802164c <HAL_SPI_Init+0x208>)
 8021476:	4293      	cmp	r3, r2
 8021478:	d005      	beq.n	8021486 <HAL_SPI_Init+0x42>
 802147a:	687b      	ldr	r3, [r7, #4]
 802147c:	68db      	ldr	r3, [r3, #12]
 802147e:	2b0f      	cmp	r3, #15
 8021480:	d901      	bls.n	8021486 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8021482:	2301      	movs	r3, #1
 8021484:	e0d9      	b.n	802163a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8021486:	6878      	ldr	r0, [r7, #4]
 8021488:	f001 f8aa 	bl	80225e0 <SPI_GetPacketSize>
 802148c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802148e:	687b      	ldr	r3, [r7, #4]
 8021490:	681b      	ldr	r3, [r3, #0]
 8021492:	4a6c      	ldr	r2, [pc, #432]	; (8021644 <HAL_SPI_Init+0x200>)
 8021494:	4293      	cmp	r3, r2
 8021496:	d00c      	beq.n	80214b2 <HAL_SPI_Init+0x6e>
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	681b      	ldr	r3, [r3, #0]
 802149c:	4a6a      	ldr	r2, [pc, #424]	; (8021648 <HAL_SPI_Init+0x204>)
 802149e:	4293      	cmp	r3, r2
 80214a0:	d007      	beq.n	80214b2 <HAL_SPI_Init+0x6e>
 80214a2:	687b      	ldr	r3, [r7, #4]
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	4a69      	ldr	r2, [pc, #420]	; (802164c <HAL_SPI_Init+0x208>)
 80214a8:	4293      	cmp	r3, r2
 80214aa:	d002      	beq.n	80214b2 <HAL_SPI_Init+0x6e>
 80214ac:	68fb      	ldr	r3, [r7, #12]
 80214ae:	2b08      	cmp	r3, #8
 80214b0:	d811      	bhi.n	80214d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80214b6:	4a63      	ldr	r2, [pc, #396]	; (8021644 <HAL_SPI_Init+0x200>)
 80214b8:	4293      	cmp	r3, r2
 80214ba:	d009      	beq.n	80214d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80214bc:	687b      	ldr	r3, [r7, #4]
 80214be:	681b      	ldr	r3, [r3, #0]
 80214c0:	4a61      	ldr	r2, [pc, #388]	; (8021648 <HAL_SPI_Init+0x204>)
 80214c2:	4293      	cmp	r3, r2
 80214c4:	d004      	beq.n	80214d0 <HAL_SPI_Init+0x8c>
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	681b      	ldr	r3, [r3, #0]
 80214ca:	4a60      	ldr	r2, [pc, #384]	; (802164c <HAL_SPI_Init+0x208>)
 80214cc:	4293      	cmp	r3, r2
 80214ce:	d104      	bne.n	80214da <HAL_SPI_Init+0x96>
 80214d0:	68fb      	ldr	r3, [r7, #12]
 80214d2:	2b10      	cmp	r3, #16
 80214d4:	d901      	bls.n	80214da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80214d6:	2301      	movs	r3, #1
 80214d8:	e0af      	b.n	802163a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80214da:	687b      	ldr	r3, [r7, #4]
 80214dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80214e0:	b2db      	uxtb	r3, r3
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	d106      	bne.n	80214f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	2200      	movs	r2, #0
 80214ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80214ee:	6878      	ldr	r0, [r7, #4]
 80214f0:	f7eb f8a4 	bl	800c63c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	2202      	movs	r2, #2
 80214f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	681b      	ldr	r3, [r3, #0]
 8021500:	681a      	ldr	r2, [r3, #0]
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	681b      	ldr	r3, [r3, #0]
 8021506:	f022 0201 	bic.w	r2, r2, #1
 802150a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	689b      	ldr	r3, [r3, #8]
 8021512:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8021516:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	699b      	ldr	r3, [r3, #24]
 802151c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8021520:	d119      	bne.n	8021556 <HAL_SPI_Init+0x112>
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	685b      	ldr	r3, [r3, #4]
 8021526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802152a:	d103      	bne.n	8021534 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8021530:	2b00      	cmp	r3, #0
 8021532:	d008      	beq.n	8021546 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8021538:	2b00      	cmp	r3, #0
 802153a:	d10c      	bne.n	8021556 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8021540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8021544:	d107      	bne.n	8021556 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	681b      	ldr	r3, [r3, #0]
 802154a:	681a      	ldr	r2, [r3, #0]
 802154c:	687b      	ldr	r3, [r7, #4]
 802154e:	681b      	ldr	r3, [r3, #0]
 8021550:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8021554:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	69da      	ldr	r2, [r3, #28]
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802155e:	431a      	orrs	r2, r3
 8021560:	68bb      	ldr	r3, [r7, #8]
 8021562:	431a      	orrs	r2, r3
 8021564:	687b      	ldr	r3, [r7, #4]
 8021566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021568:	ea42 0103 	orr.w	r1, r2, r3
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	68da      	ldr	r2, [r3, #12]
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	430a      	orrs	r2, r1
 8021576:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8021578:	687b      	ldr	r3, [r7, #4]
 802157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021580:	431a      	orrs	r2, r3
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021586:	431a      	orrs	r2, r3
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	699b      	ldr	r3, [r3, #24]
 802158c:	431a      	orrs	r2, r3
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	691b      	ldr	r3, [r3, #16]
 8021592:	431a      	orrs	r2, r3
 8021594:	687b      	ldr	r3, [r7, #4]
 8021596:	695b      	ldr	r3, [r3, #20]
 8021598:	431a      	orrs	r2, r3
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	6a1b      	ldr	r3, [r3, #32]
 802159e:	431a      	orrs	r2, r3
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	685b      	ldr	r3, [r3, #4]
 80215a4:	431a      	orrs	r2, r3
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80215aa:	431a      	orrs	r2, r3
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	689b      	ldr	r3, [r3, #8]
 80215b0:	431a      	orrs	r2, r3
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80215b6:	ea42 0103 	orr.w	r1, r2, r3
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	681b      	ldr	r3, [r3, #0]
 80215c2:	430a      	orrs	r2, r1
 80215c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	685b      	ldr	r3, [r3, #4]
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	d113      	bne.n	80215f6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	689b      	ldr	r3, [r3, #8]
 80215d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80215d8:	687b      	ldr	r3, [r7, #4]
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80215e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	681b      	ldr	r3, [r3, #0]
 80215e6:	689b      	ldr	r3, [r3, #8]
 80215e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	681b      	ldr	r3, [r3, #0]
 80215f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80215f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	681b      	ldr	r3, [r3, #0]
 8021600:	f022 0201 	bic.w	r2, r2, #1
 8021604:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	685b      	ldr	r3, [r3, #4]
 802160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802160e:	2b00      	cmp	r3, #0
 8021610:	d00a      	beq.n	8021628 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	68db      	ldr	r3, [r3, #12]
 8021618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8021620:	687b      	ldr	r3, [r7, #4]
 8021622:	681b      	ldr	r3, [r3, #0]
 8021624:	430a      	orrs	r2, r1
 8021626:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	2200      	movs	r2, #0
 802162c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	2201      	movs	r2, #1
 8021634:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8021638:	2300      	movs	r3, #0
}
 802163a:	4618      	mov	r0, r3
 802163c:	3710      	adds	r7, #16
 802163e:	46bd      	mov	sp, r7
 8021640:	bd80      	pop	{r7, pc}
 8021642:	bf00      	nop
 8021644:	40013000 	.word	0x40013000
 8021648:	40003800 	.word	0x40003800
 802164c:	40003c00 	.word	0x40003c00

08021650 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8021650:	b580      	push	{r7, lr}
 8021652:	b082      	sub	sp, #8
 8021654:	af00      	add	r7, sp, #0
 8021656:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	2b00      	cmp	r3, #0
 802165c:	d101      	bne.n	8021662 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 802165e:	2301      	movs	r3, #1
 8021660:	e01b      	b.n	802169a <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	2202      	movs	r2, #2
 8021666:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 802166a:	687b      	ldr	r3, [r7, #4]
 802166c:	681b      	ldr	r3, [r3, #0]
 802166e:	681a      	ldr	r2, [r3, #0]
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	681b      	ldr	r3, [r3, #0]
 8021674:	f022 0201 	bic.w	r2, r2, #1
 8021678:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 802167a:	6878      	ldr	r0, [r7, #4]
 802167c:	f7eb f890 	bl	800c7a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021680:	687b      	ldr	r3, [r7, #4]
 8021682:	2200      	movs	r2, #0
 8021684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 8021688:	687b      	ldr	r3, [r7, #4]
 802168a:	2200      	movs	r2, #0
 802168c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	2200      	movs	r2, #0
 8021694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8021698:	2300      	movs	r3, #0
}
 802169a:	4618      	mov	r0, r3
 802169c:	3708      	adds	r7, #8
 802169e:	46bd      	mov	sp, r7
 80216a0:	bd80      	pop	{r7, pc}
	...

080216a4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80216a4:	b580      	push	{r7, lr}
 80216a6:	b08a      	sub	sp, #40	; 0x28
 80216a8:	af02      	add	r7, sp, #8
 80216aa:	60f8      	str	r0, [r7, #12]
 80216ac:	60b9      	str	r1, [r7, #8]
 80216ae:	603b      	str	r3, [r7, #0]
 80216b0:	4613      	mov	r3, r2
 80216b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80216b4:	68fb      	ldr	r3, [r7, #12]
 80216b6:	681b      	ldr	r3, [r3, #0]
 80216b8:	3320      	adds	r3, #32
 80216ba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80216bc:	2300      	movs	r3, #0
 80216be:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80216c0:	68fb      	ldr	r3, [r7, #12]
 80216c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80216c6:	2b01      	cmp	r3, #1
 80216c8:	d101      	bne.n	80216ce <HAL_SPI_Transmit+0x2a>
 80216ca:	2302      	movs	r3, #2
 80216cc:	e1d7      	b.n	8021a7e <HAL_SPI_Transmit+0x3da>
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	2201      	movs	r2, #1
 80216d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80216d6:	f7f4 ff0b 	bl	80164f0 <HAL_GetTick>
 80216da:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80216dc:	68fb      	ldr	r3, [r7, #12]
 80216de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80216e2:	b2db      	uxtb	r3, r3
 80216e4:	2b01      	cmp	r3, #1
 80216e6:	d007      	beq.n	80216f8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80216e8:	2302      	movs	r3, #2
 80216ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80216ec:	68fb      	ldr	r3, [r7, #12]
 80216ee:	2200      	movs	r2, #0
 80216f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80216f4:	7efb      	ldrb	r3, [r7, #27]
 80216f6:	e1c2      	b.n	8021a7e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80216f8:	68bb      	ldr	r3, [r7, #8]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	d002      	beq.n	8021704 <HAL_SPI_Transmit+0x60>
 80216fe:	88fb      	ldrh	r3, [r7, #6]
 8021700:	2b00      	cmp	r3, #0
 8021702:	d107      	bne.n	8021714 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8021704:	2301      	movs	r3, #1
 8021706:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8021708:	68fb      	ldr	r3, [r7, #12]
 802170a:	2200      	movs	r2, #0
 802170c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8021710:	7efb      	ldrb	r3, [r7, #27]
 8021712:	e1b4      	b.n	8021a7e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8021714:	68fb      	ldr	r3, [r7, #12]
 8021716:	2203      	movs	r2, #3
 8021718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802171c:	68fb      	ldr	r3, [r7, #12]
 802171e:	2200      	movs	r2, #0
 8021720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8021724:	68fb      	ldr	r3, [r7, #12]
 8021726:	68ba      	ldr	r2, [r7, #8]
 8021728:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 802172a:	68fb      	ldr	r3, [r7, #12]
 802172c:	88fa      	ldrh	r2, [r7, #6]
 802172e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8021732:	68fb      	ldr	r3, [r7, #12]
 8021734:	88fa      	ldrh	r2, [r7, #6]
 8021736:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 802173a:	68fb      	ldr	r3, [r7, #12]
 802173c:	2200      	movs	r2, #0
 802173e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8021740:	68fb      	ldr	r3, [r7, #12]
 8021742:	2200      	movs	r2, #0
 8021744:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8021748:	68fb      	ldr	r3, [r7, #12]
 802174a:	2200      	movs	r2, #0
 802174c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8021750:	68fb      	ldr	r3, [r7, #12]
 8021752:	2200      	movs	r2, #0
 8021754:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8021756:	68fb      	ldr	r3, [r7, #12]
 8021758:	2200      	movs	r2, #0
 802175a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802175c:	68fb      	ldr	r3, [r7, #12]
 802175e:	689b      	ldr	r3, [r3, #8]
 8021760:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8021764:	d107      	bne.n	8021776 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8021766:	68fb      	ldr	r3, [r7, #12]
 8021768:	681b      	ldr	r3, [r3, #0]
 802176a:	681a      	ldr	r2, [r3, #0]
 802176c:	68fb      	ldr	r3, [r7, #12]
 802176e:	681b      	ldr	r3, [r3, #0]
 8021770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8021774:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8021776:	68fb      	ldr	r3, [r7, #12]
 8021778:	681b      	ldr	r3, [r3, #0]
 802177a:	685a      	ldr	r2, [r3, #4]
 802177c:	4b96      	ldr	r3, [pc, #600]	; (80219d8 <HAL_SPI_Transmit+0x334>)
 802177e:	4013      	ands	r3, r2
 8021780:	88f9      	ldrh	r1, [r7, #6]
 8021782:	68fa      	ldr	r2, [r7, #12]
 8021784:	6812      	ldr	r2, [r2, #0]
 8021786:	430b      	orrs	r3, r1
 8021788:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 802178a:	68fb      	ldr	r3, [r7, #12]
 802178c:	681b      	ldr	r3, [r3, #0]
 802178e:	681a      	ldr	r2, [r3, #0]
 8021790:	68fb      	ldr	r3, [r7, #12]
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	f042 0201 	orr.w	r2, r2, #1
 8021798:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802179a:	68fb      	ldr	r3, [r7, #12]
 802179c:	685b      	ldr	r3, [r3, #4]
 802179e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80217a2:	d107      	bne.n	80217b4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80217a4:	68fb      	ldr	r3, [r7, #12]
 80217a6:	681b      	ldr	r3, [r3, #0]
 80217a8:	681a      	ldr	r2, [r3, #0]
 80217aa:	68fb      	ldr	r3, [r7, #12]
 80217ac:	681b      	ldr	r3, [r3, #0]
 80217ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80217b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80217b4:	68fb      	ldr	r3, [r7, #12]
 80217b6:	68db      	ldr	r3, [r3, #12]
 80217b8:	2b0f      	cmp	r3, #15
 80217ba:	d947      	bls.n	802184c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80217bc:	e03f      	b.n	802183e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80217be:	68fb      	ldr	r3, [r7, #12]
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	695b      	ldr	r3, [r3, #20]
 80217c4:	f003 0302 	and.w	r3, r3, #2
 80217c8:	2b02      	cmp	r3, #2
 80217ca:	d114      	bne.n	80217f6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80217cc:	68fb      	ldr	r3, [r7, #12]
 80217ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80217d0:	68fb      	ldr	r3, [r7, #12]
 80217d2:	681b      	ldr	r3, [r3, #0]
 80217d4:	6812      	ldr	r2, [r2, #0]
 80217d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80217d8:	68fb      	ldr	r3, [r7, #12]
 80217da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80217dc:	1d1a      	adds	r2, r3, #4
 80217de:	68fb      	ldr	r3, [r7, #12]
 80217e0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80217e2:	68fb      	ldr	r3, [r7, #12]
 80217e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80217e8:	b29b      	uxth	r3, r3
 80217ea:	3b01      	subs	r3, #1
 80217ec:	b29a      	uxth	r2, r3
 80217ee:	68fb      	ldr	r3, [r7, #12]
 80217f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80217f4:	e023      	b.n	802183e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80217f6:	f7f4 fe7b 	bl	80164f0 <HAL_GetTick>
 80217fa:	4602      	mov	r2, r0
 80217fc:	697b      	ldr	r3, [r7, #20]
 80217fe:	1ad3      	subs	r3, r2, r3
 8021800:	683a      	ldr	r2, [r7, #0]
 8021802:	429a      	cmp	r2, r3
 8021804:	d803      	bhi.n	802180e <HAL_SPI_Transmit+0x16a>
 8021806:	683b      	ldr	r3, [r7, #0]
 8021808:	f1b3 3fff 	cmp.w	r3, #4294967295
 802180c:	d102      	bne.n	8021814 <HAL_SPI_Transmit+0x170>
 802180e:	683b      	ldr	r3, [r7, #0]
 8021810:	2b00      	cmp	r3, #0
 8021812:	d114      	bne.n	802183e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8021814:	68f8      	ldr	r0, [r7, #12]
 8021816:	f000 fe15 	bl	8022444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 802181a:	68fb      	ldr	r3, [r7, #12]
 802181c:	2200      	movs	r2, #0
 802181e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8021822:	68fb      	ldr	r3, [r7, #12]
 8021824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802182c:	68fb      	ldr	r3, [r7, #12]
 802182e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8021832:	68fb      	ldr	r3, [r7, #12]
 8021834:	2201      	movs	r2, #1
 8021836:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 802183a:	2303      	movs	r3, #3
 802183c:	e11f      	b.n	8021a7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 802183e:	68fb      	ldr	r3, [r7, #12]
 8021840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021844:	b29b      	uxth	r3, r3
 8021846:	2b00      	cmp	r3, #0
 8021848:	d1b9      	bne.n	80217be <HAL_SPI_Transmit+0x11a>
 802184a:	e0f2      	b.n	8021a32 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802184c:	68fb      	ldr	r3, [r7, #12]
 802184e:	68db      	ldr	r3, [r3, #12]
 8021850:	2b07      	cmp	r3, #7
 8021852:	f240 80e7 	bls.w	8021a24 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8021856:	e05d      	b.n	8021914 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8021858:	68fb      	ldr	r3, [r7, #12]
 802185a:	681b      	ldr	r3, [r3, #0]
 802185c:	695b      	ldr	r3, [r3, #20]
 802185e:	f003 0302 	and.w	r3, r3, #2
 8021862:	2b02      	cmp	r3, #2
 8021864:	d132      	bne.n	80218cc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8021866:	68fb      	ldr	r3, [r7, #12]
 8021868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802186c:	b29b      	uxth	r3, r3
 802186e:	2b01      	cmp	r3, #1
 8021870:	d918      	bls.n	80218a4 <HAL_SPI_Transmit+0x200>
 8021872:	68fb      	ldr	r3, [r7, #12]
 8021874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021876:	2b00      	cmp	r3, #0
 8021878:	d014      	beq.n	80218a4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 802187a:	68fb      	ldr	r3, [r7, #12]
 802187c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802187e:	68fb      	ldr	r3, [r7, #12]
 8021880:	681b      	ldr	r3, [r3, #0]
 8021882:	6812      	ldr	r2, [r2, #0]
 8021884:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802188a:	1d1a      	adds	r2, r3, #4
 802188c:	68fb      	ldr	r3, [r7, #12]
 802188e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8021890:	68fb      	ldr	r3, [r7, #12]
 8021892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021896:	b29b      	uxth	r3, r3
 8021898:	3b02      	subs	r3, #2
 802189a:	b29a      	uxth	r2, r3
 802189c:	68fb      	ldr	r3, [r7, #12]
 802189e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80218a2:	e037      	b.n	8021914 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80218a8:	881a      	ldrh	r2, [r3, #0]
 80218aa:	69fb      	ldr	r3, [r7, #28]
 80218ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80218ae:	68fb      	ldr	r3, [r7, #12]
 80218b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80218b2:	1c9a      	adds	r2, r3, #2
 80218b4:	68fb      	ldr	r3, [r7, #12]
 80218b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80218b8:	68fb      	ldr	r3, [r7, #12]
 80218ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80218be:	b29b      	uxth	r3, r3
 80218c0:	3b01      	subs	r3, #1
 80218c2:	b29a      	uxth	r2, r3
 80218c4:	68fb      	ldr	r3, [r7, #12]
 80218c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80218ca:	e023      	b.n	8021914 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80218cc:	f7f4 fe10 	bl	80164f0 <HAL_GetTick>
 80218d0:	4602      	mov	r2, r0
 80218d2:	697b      	ldr	r3, [r7, #20]
 80218d4:	1ad3      	subs	r3, r2, r3
 80218d6:	683a      	ldr	r2, [r7, #0]
 80218d8:	429a      	cmp	r2, r3
 80218da:	d803      	bhi.n	80218e4 <HAL_SPI_Transmit+0x240>
 80218dc:	683b      	ldr	r3, [r7, #0]
 80218de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80218e2:	d102      	bne.n	80218ea <HAL_SPI_Transmit+0x246>
 80218e4:	683b      	ldr	r3, [r7, #0]
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d114      	bne.n	8021914 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80218ea:	68f8      	ldr	r0, [r7, #12]
 80218ec:	f000 fdaa 	bl	8022444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	2200      	movs	r2, #0
 80218f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80218f8:	68fb      	ldr	r3, [r7, #12]
 80218fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80218fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8021902:	68fb      	ldr	r3, [r7, #12]
 8021904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8021908:	68fb      	ldr	r3, [r7, #12]
 802190a:	2201      	movs	r2, #1
 802190c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8021910:	2303      	movs	r3, #3
 8021912:	e0b4      	b.n	8021a7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802191a:	b29b      	uxth	r3, r3
 802191c:	2b00      	cmp	r3, #0
 802191e:	d19b      	bne.n	8021858 <HAL_SPI_Transmit+0x1b4>
 8021920:	e087      	b.n	8021a32 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8021922:	68fb      	ldr	r3, [r7, #12]
 8021924:	681b      	ldr	r3, [r3, #0]
 8021926:	695b      	ldr	r3, [r3, #20]
 8021928:	f003 0302 	and.w	r3, r3, #2
 802192c:	2b02      	cmp	r3, #2
 802192e:	d155      	bne.n	80219dc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8021930:	68fb      	ldr	r3, [r7, #12]
 8021932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021936:	b29b      	uxth	r3, r3
 8021938:	2b03      	cmp	r3, #3
 802193a:	d918      	bls.n	802196e <HAL_SPI_Transmit+0x2ca>
 802193c:	68fb      	ldr	r3, [r7, #12]
 802193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021940:	2b40      	cmp	r3, #64	; 0x40
 8021942:	d914      	bls.n	802196e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8021944:	68fb      	ldr	r3, [r7, #12]
 8021946:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8021948:	68fb      	ldr	r3, [r7, #12]
 802194a:	681b      	ldr	r3, [r3, #0]
 802194c:	6812      	ldr	r2, [r2, #0]
 802194e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8021950:	68fb      	ldr	r3, [r7, #12]
 8021952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021954:	1d1a      	adds	r2, r3, #4
 8021956:	68fb      	ldr	r3, [r7, #12]
 8021958:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021960:	b29b      	uxth	r3, r3
 8021962:	3b04      	subs	r3, #4
 8021964:	b29a      	uxth	r2, r3
 8021966:	68fb      	ldr	r3, [r7, #12]
 8021968:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 802196c:	e05a      	b.n	8021a24 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 802196e:	68fb      	ldr	r3, [r7, #12]
 8021970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021974:	b29b      	uxth	r3, r3
 8021976:	2b01      	cmp	r3, #1
 8021978:	d917      	bls.n	80219aa <HAL_SPI_Transmit+0x306>
 802197a:	68fb      	ldr	r3, [r7, #12]
 802197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802197e:	2b00      	cmp	r3, #0
 8021980:	d013      	beq.n	80219aa <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8021982:	68fb      	ldr	r3, [r7, #12]
 8021984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021986:	881a      	ldrh	r2, [r3, #0]
 8021988:	69fb      	ldr	r3, [r7, #28]
 802198a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 802198c:	68fb      	ldr	r3, [r7, #12]
 802198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021990:	1c9a      	adds	r2, r3, #2
 8021992:	68fb      	ldr	r3, [r7, #12]
 8021994:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8021996:	68fb      	ldr	r3, [r7, #12]
 8021998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802199c:	b29b      	uxth	r3, r3
 802199e:	3b02      	subs	r3, #2
 80219a0:	b29a      	uxth	r2, r3
 80219a2:	68fb      	ldr	r3, [r7, #12]
 80219a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80219a8:	e03c      	b.n	8021a24 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80219aa:	68fb      	ldr	r3, [r7, #12]
 80219ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80219ae:	68fb      	ldr	r3, [r7, #12]
 80219b0:	681b      	ldr	r3, [r3, #0]
 80219b2:	3320      	adds	r3, #32
 80219b4:	7812      	ldrb	r2, [r2, #0]
 80219b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80219b8:	68fb      	ldr	r3, [r7, #12]
 80219ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80219bc:	1c5a      	adds	r2, r3, #1
 80219be:	68fb      	ldr	r3, [r7, #12]
 80219c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80219c2:	68fb      	ldr	r3, [r7, #12]
 80219c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80219c8:	b29b      	uxth	r3, r3
 80219ca:	3b01      	subs	r3, #1
 80219cc:	b29a      	uxth	r2, r3
 80219ce:	68fb      	ldr	r3, [r7, #12]
 80219d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80219d4:	e026      	b.n	8021a24 <HAL_SPI_Transmit+0x380>
 80219d6:	bf00      	nop
 80219d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80219dc:	f7f4 fd88 	bl	80164f0 <HAL_GetTick>
 80219e0:	4602      	mov	r2, r0
 80219e2:	697b      	ldr	r3, [r7, #20]
 80219e4:	1ad3      	subs	r3, r2, r3
 80219e6:	683a      	ldr	r2, [r7, #0]
 80219e8:	429a      	cmp	r2, r3
 80219ea:	d803      	bhi.n	80219f4 <HAL_SPI_Transmit+0x350>
 80219ec:	683b      	ldr	r3, [r7, #0]
 80219ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80219f2:	d102      	bne.n	80219fa <HAL_SPI_Transmit+0x356>
 80219f4:	683b      	ldr	r3, [r7, #0]
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d114      	bne.n	8021a24 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80219fa:	68f8      	ldr	r0, [r7, #12]
 80219fc:	f000 fd22 	bl	8022444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8021a00:	68fb      	ldr	r3, [r7, #12]
 8021a02:	2200      	movs	r2, #0
 8021a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8021a08:	68fb      	ldr	r3, [r7, #12]
 8021a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021a0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8021a12:	68fb      	ldr	r3, [r7, #12]
 8021a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8021a18:	68fb      	ldr	r3, [r7, #12]
 8021a1a:	2201      	movs	r2, #1
 8021a1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8021a20:	2303      	movs	r3, #3
 8021a22:	e02c      	b.n	8021a7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8021a24:	68fb      	ldr	r3, [r7, #12]
 8021a26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021a2a:	b29b      	uxth	r3, r3
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	f47f af78 	bne.w	8021922 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8021a32:	683b      	ldr	r3, [r7, #0]
 8021a34:	9300      	str	r3, [sp, #0]
 8021a36:	697b      	ldr	r3, [r7, #20]
 8021a38:	2200      	movs	r2, #0
 8021a3a:	2108      	movs	r1, #8
 8021a3c:	68f8      	ldr	r0, [r7, #12]
 8021a3e:	f000 fda1 	bl	8022584 <SPI_WaitOnFlagUntilTimeout>
 8021a42:	4603      	mov	r3, r0
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d007      	beq.n	8021a58 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8021a48:	68fb      	ldr	r3, [r7, #12]
 8021a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021a4e:	f043 0220 	orr.w	r2, r3, #32
 8021a52:	68fb      	ldr	r3, [r7, #12]
 8021a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8021a58:	68f8      	ldr	r0, [r7, #12]
 8021a5a:	f000 fcf3 	bl	8022444 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8021a5e:	68fb      	ldr	r3, [r7, #12]
 8021a60:	2200      	movs	r2, #0
 8021a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8021a66:	68fb      	ldr	r3, [r7, #12]
 8021a68:	2201      	movs	r2, #1
 8021a6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8021a6e:	68fb      	ldr	r3, [r7, #12]
 8021a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d001      	beq.n	8021a7c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8021a78:	2301      	movs	r3, #1
 8021a7a:	e000      	b.n	8021a7e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8021a7c:	7efb      	ldrb	r3, [r7, #27]
}
 8021a7e:	4618      	mov	r0, r3
 8021a80:	3720      	adds	r7, #32
 8021a82:	46bd      	mov	sp, r7
 8021a84:	bd80      	pop	{r7, pc}
 8021a86:	bf00      	nop

08021a88 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021a88:	b580      	push	{r7, lr}
 8021a8a:	b08a      	sub	sp, #40	; 0x28
 8021a8c:	af02      	add	r7, sp, #8
 8021a8e:	60f8      	str	r0, [r7, #12]
 8021a90:	60b9      	str	r1, [r7, #8]
 8021a92:	603b      	str	r3, [r7, #0]
 8021a94:	4613      	mov	r3, r2
 8021a96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8021a98:	2300      	movs	r3, #0
 8021a9a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8021a9c:	68fb      	ldr	r3, [r7, #12]
 8021a9e:	681b      	ldr	r3, [r3, #0]
 8021aa0:	3330      	adds	r3, #48	; 0x30
 8021aa2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8021aa4:	68fb      	ldr	r3, [r7, #12]
 8021aa6:	685b      	ldr	r3, [r3, #4]
 8021aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8021aac:	d112      	bne.n	8021ad4 <HAL_SPI_Receive+0x4c>
 8021aae:	68fb      	ldr	r3, [r7, #12]
 8021ab0:	689b      	ldr	r3, [r3, #8]
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d10e      	bne.n	8021ad4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8021ab6:	68fb      	ldr	r3, [r7, #12]
 8021ab8:	2204      	movs	r2, #4
 8021aba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8021abe:	88fa      	ldrh	r2, [r7, #6]
 8021ac0:	683b      	ldr	r3, [r7, #0]
 8021ac2:	9300      	str	r3, [sp, #0]
 8021ac4:	4613      	mov	r3, r2
 8021ac6:	68ba      	ldr	r2, [r7, #8]
 8021ac8:	68b9      	ldr	r1, [r7, #8]
 8021aca:	68f8      	ldr	r0, [r7, #12]
 8021acc:	f000 f9ce 	bl	8021e6c <HAL_SPI_TransmitReceive>
 8021ad0:	4603      	mov	r3, r0
 8021ad2:	e1c7      	b.n	8021e64 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8021ad4:	68fb      	ldr	r3, [r7, #12]
 8021ad6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8021ada:	2b01      	cmp	r3, #1
 8021adc:	d101      	bne.n	8021ae2 <HAL_SPI_Receive+0x5a>
 8021ade:	2302      	movs	r3, #2
 8021ae0:	e1c0      	b.n	8021e64 <HAL_SPI_Receive+0x3dc>
 8021ae2:	68fb      	ldr	r3, [r7, #12]
 8021ae4:	2201      	movs	r2, #1
 8021ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8021aea:	f7f4 fd01 	bl	80164f0 <HAL_GetTick>
 8021aee:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8021af0:	68fb      	ldr	r3, [r7, #12]
 8021af2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8021af6:	b2db      	uxtb	r3, r3
 8021af8:	2b01      	cmp	r3, #1
 8021afa:	d007      	beq.n	8021b0c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8021afc:	2302      	movs	r3, #2
 8021afe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8021b00:	68fb      	ldr	r3, [r7, #12]
 8021b02:	2200      	movs	r2, #0
 8021b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8021b08:	7ffb      	ldrb	r3, [r7, #31]
 8021b0a:	e1ab      	b.n	8021e64 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8021b0c:	68bb      	ldr	r3, [r7, #8]
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	d002      	beq.n	8021b18 <HAL_SPI_Receive+0x90>
 8021b12:	88fb      	ldrh	r3, [r7, #6]
 8021b14:	2b00      	cmp	r3, #0
 8021b16:	d107      	bne.n	8021b28 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8021b18:	2301      	movs	r3, #1
 8021b1a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8021b1c:	68fb      	ldr	r3, [r7, #12]
 8021b1e:	2200      	movs	r2, #0
 8021b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8021b24:	7ffb      	ldrb	r3, [r7, #31]
 8021b26:	e19d      	b.n	8021e64 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	2204      	movs	r2, #4
 8021b2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8021b30:	68fb      	ldr	r3, [r7, #12]
 8021b32:	2200      	movs	r2, #0
 8021b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8021b38:	68fb      	ldr	r3, [r7, #12]
 8021b3a:	68ba      	ldr	r2, [r7, #8]
 8021b3c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8021b3e:	68fb      	ldr	r3, [r7, #12]
 8021b40:	88fa      	ldrh	r2, [r7, #6]
 8021b42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8021b46:	68fb      	ldr	r3, [r7, #12]
 8021b48:	88fa      	ldrh	r2, [r7, #6]
 8021b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8021b4e:	68fb      	ldr	r3, [r7, #12]
 8021b50:	2200      	movs	r2, #0
 8021b52:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8021b54:	68fb      	ldr	r3, [r7, #12]
 8021b56:	2200      	movs	r2, #0
 8021b58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8021b5c:	68fb      	ldr	r3, [r7, #12]
 8021b5e:	2200      	movs	r2, #0
 8021b60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8021b64:	68fb      	ldr	r3, [r7, #12]
 8021b66:	2200      	movs	r2, #0
 8021b68:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8021b6a:	68fb      	ldr	r3, [r7, #12]
 8021b6c:	2200      	movs	r2, #0
 8021b6e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8021b70:	68fb      	ldr	r3, [r7, #12]
 8021b72:	689b      	ldr	r3, [r3, #8]
 8021b74:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8021b78:	d107      	bne.n	8021b8a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8021b7a:	68fb      	ldr	r3, [r7, #12]
 8021b7c:	681b      	ldr	r3, [r3, #0]
 8021b7e:	681a      	ldr	r2, [r3, #0]
 8021b80:	68fb      	ldr	r3, [r7, #12]
 8021b82:	681b      	ldr	r3, [r3, #0]
 8021b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8021b88:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8021b8a:	68fb      	ldr	r3, [r7, #12]
 8021b8c:	681b      	ldr	r3, [r3, #0]
 8021b8e:	685a      	ldr	r2, [r3, #4]
 8021b90:	4b94      	ldr	r3, [pc, #592]	; (8021de4 <HAL_SPI_Receive+0x35c>)
 8021b92:	4013      	ands	r3, r2
 8021b94:	88f9      	ldrh	r1, [r7, #6]
 8021b96:	68fa      	ldr	r2, [r7, #12]
 8021b98:	6812      	ldr	r2, [r2, #0]
 8021b9a:	430b      	orrs	r3, r1
 8021b9c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8021b9e:	68fb      	ldr	r3, [r7, #12]
 8021ba0:	681b      	ldr	r3, [r3, #0]
 8021ba2:	681a      	ldr	r2, [r3, #0]
 8021ba4:	68fb      	ldr	r3, [r7, #12]
 8021ba6:	681b      	ldr	r3, [r3, #0]
 8021ba8:	f042 0201 	orr.w	r2, r2, #1
 8021bac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8021bae:	68fb      	ldr	r3, [r7, #12]
 8021bb0:	685b      	ldr	r3, [r3, #4]
 8021bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8021bb6:	d107      	bne.n	8021bc8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8021bb8:	68fb      	ldr	r3, [r7, #12]
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	681a      	ldr	r2, [r3, #0]
 8021bbe:	68fb      	ldr	r3, [r7, #12]
 8021bc0:	681b      	ldr	r3, [r3, #0]
 8021bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021bc6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8021bc8:	68fb      	ldr	r3, [r7, #12]
 8021bca:	68db      	ldr	r3, [r3, #12]
 8021bcc:	2b0f      	cmp	r3, #15
 8021bce:	d948      	bls.n	8021c62 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8021bd0:	e040      	b.n	8021c54 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8021bd2:	68fb      	ldr	r3, [r7, #12]
 8021bd4:	681b      	ldr	r3, [r3, #0]
 8021bd6:	695a      	ldr	r2, [r3, #20]
 8021bd8:	f248 0308 	movw	r3, #32776	; 0x8008
 8021bdc:	4013      	ands	r3, r2
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d014      	beq.n	8021c0c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8021be2:	68fb      	ldr	r3, [r7, #12]
 8021be4:	681a      	ldr	r2, [r3, #0]
 8021be6:	68fb      	ldr	r3, [r7, #12]
 8021be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021bea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8021bec:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8021bee:	68fb      	ldr	r3, [r7, #12]
 8021bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021bf2:	1d1a      	adds	r2, r3, #4
 8021bf4:	68fb      	ldr	r3, [r7, #12]
 8021bf6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8021bf8:	68fb      	ldr	r3, [r7, #12]
 8021bfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021bfe:	b29b      	uxth	r3, r3
 8021c00:	3b01      	subs	r3, #1
 8021c02:	b29a      	uxth	r2, r3
 8021c04:	68fb      	ldr	r3, [r7, #12]
 8021c06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8021c0a:	e023      	b.n	8021c54 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8021c0c:	f7f4 fc70 	bl	80164f0 <HAL_GetTick>
 8021c10:	4602      	mov	r2, r0
 8021c12:	697b      	ldr	r3, [r7, #20]
 8021c14:	1ad3      	subs	r3, r2, r3
 8021c16:	683a      	ldr	r2, [r7, #0]
 8021c18:	429a      	cmp	r2, r3
 8021c1a:	d803      	bhi.n	8021c24 <HAL_SPI_Receive+0x19c>
 8021c1c:	683b      	ldr	r3, [r7, #0]
 8021c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021c22:	d102      	bne.n	8021c2a <HAL_SPI_Receive+0x1a2>
 8021c24:	683b      	ldr	r3, [r7, #0]
 8021c26:	2b00      	cmp	r3, #0
 8021c28:	d114      	bne.n	8021c54 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8021c2a:	68f8      	ldr	r0, [r7, #12]
 8021c2c:	f000 fc0a 	bl	8022444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8021c30:	68fb      	ldr	r3, [r7, #12]
 8021c32:	2200      	movs	r2, #0
 8021c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8021c38:	68fb      	ldr	r3, [r7, #12]
 8021c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021c3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8021c42:	68fb      	ldr	r3, [r7, #12]
 8021c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8021c48:	68fb      	ldr	r3, [r7, #12]
 8021c4a:	2201      	movs	r2, #1
 8021c4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8021c50:	2303      	movs	r3, #3
 8021c52:	e107      	b.n	8021e64 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8021c54:	68fb      	ldr	r3, [r7, #12]
 8021c56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021c5a:	b29b      	uxth	r3, r3
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d1b8      	bne.n	8021bd2 <HAL_SPI_Receive+0x14a>
 8021c60:	e0ed      	b.n	8021e3e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8021c62:	68fb      	ldr	r3, [r7, #12]
 8021c64:	68db      	ldr	r3, [r3, #12]
 8021c66:	2b07      	cmp	r3, #7
 8021c68:	f240 80e2 	bls.w	8021e30 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8021c6c:	e05b      	b.n	8021d26 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8021c6e:	68fb      	ldr	r3, [r7, #12]
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	695b      	ldr	r3, [r3, #20]
 8021c74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	d030      	beq.n	8021cde <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8021c7c:	68fb      	ldr	r3, [r7, #12]
 8021c7e:	681b      	ldr	r3, [r3, #0]
 8021c80:	695b      	ldr	r3, [r3, #20]
 8021c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d014      	beq.n	8021cb4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8021c8a:	68fb      	ldr	r3, [r7, #12]
 8021c8c:	681a      	ldr	r2, [r3, #0]
 8021c8e:	68fb      	ldr	r3, [r7, #12]
 8021c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021c92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8021c94:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8021c96:	68fb      	ldr	r3, [r7, #12]
 8021c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021c9a:	1d1a      	adds	r2, r3, #4
 8021c9c:	68fb      	ldr	r3, [r7, #12]
 8021c9e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8021ca0:	68fb      	ldr	r3, [r7, #12]
 8021ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021ca6:	b29b      	uxth	r3, r3
 8021ca8:	3b02      	subs	r3, #2
 8021caa:	b29a      	uxth	r2, r3
 8021cac:	68fb      	ldr	r3, [r7, #12]
 8021cae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8021cb2:	e038      	b.n	8021d26 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8021cb4:	68fb      	ldr	r3, [r7, #12]
 8021cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021cb8:	69ba      	ldr	r2, [r7, #24]
 8021cba:	8812      	ldrh	r2, [r2, #0]
 8021cbc:	b292      	uxth	r2, r2
 8021cbe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021cc4:	1c9a      	adds	r2, r3, #2
 8021cc6:	68fb      	ldr	r3, [r7, #12]
 8021cc8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8021cca:	68fb      	ldr	r3, [r7, #12]
 8021ccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021cd0:	b29b      	uxth	r3, r3
 8021cd2:	3b01      	subs	r3, #1
 8021cd4:	b29a      	uxth	r2, r3
 8021cd6:	68fb      	ldr	r3, [r7, #12]
 8021cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8021cdc:	e023      	b.n	8021d26 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8021cde:	f7f4 fc07 	bl	80164f0 <HAL_GetTick>
 8021ce2:	4602      	mov	r2, r0
 8021ce4:	697b      	ldr	r3, [r7, #20]
 8021ce6:	1ad3      	subs	r3, r2, r3
 8021ce8:	683a      	ldr	r2, [r7, #0]
 8021cea:	429a      	cmp	r2, r3
 8021cec:	d803      	bhi.n	8021cf6 <HAL_SPI_Receive+0x26e>
 8021cee:	683b      	ldr	r3, [r7, #0]
 8021cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021cf4:	d102      	bne.n	8021cfc <HAL_SPI_Receive+0x274>
 8021cf6:	683b      	ldr	r3, [r7, #0]
 8021cf8:	2b00      	cmp	r3, #0
 8021cfa:	d114      	bne.n	8021d26 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8021cfc:	68f8      	ldr	r0, [r7, #12]
 8021cfe:	f000 fba1 	bl	8022444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8021d02:	68fb      	ldr	r3, [r7, #12]
 8021d04:	2200      	movs	r2, #0
 8021d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8021d0a:	68fb      	ldr	r3, [r7, #12]
 8021d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021d10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8021d1a:	68fb      	ldr	r3, [r7, #12]
 8021d1c:	2201      	movs	r2, #1
 8021d1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8021d22:	2303      	movs	r3, #3
 8021d24:	e09e      	b.n	8021e64 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8021d26:	68fb      	ldr	r3, [r7, #12]
 8021d28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021d2c:	b29b      	uxth	r3, r3
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d19d      	bne.n	8021c6e <HAL_SPI_Receive+0x1e6>
 8021d32:	e084      	b.n	8021e3e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8021d34:	68fb      	ldr	r3, [r7, #12]
 8021d36:	681b      	ldr	r3, [r3, #0]
 8021d38:	695b      	ldr	r3, [r3, #20]
 8021d3a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	d052      	beq.n	8021de8 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8021d42:	68fb      	ldr	r3, [r7, #12]
 8021d44:	681b      	ldr	r3, [r3, #0]
 8021d46:	695b      	ldr	r3, [r3, #20]
 8021d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	d014      	beq.n	8021d7a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8021d50:	68fb      	ldr	r3, [r7, #12]
 8021d52:	681a      	ldr	r2, [r3, #0]
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021d58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8021d5a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8021d5c:	68fb      	ldr	r3, [r7, #12]
 8021d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021d60:	1d1a      	adds	r2, r3, #4
 8021d62:	68fb      	ldr	r3, [r7, #12]
 8021d64:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8021d66:	68fb      	ldr	r3, [r7, #12]
 8021d68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021d6c:	b29b      	uxth	r3, r3
 8021d6e:	3b04      	subs	r3, #4
 8021d70:	b29a      	uxth	r2, r3
 8021d72:	68fb      	ldr	r3, [r7, #12]
 8021d74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8021d78:	e05a      	b.n	8021e30 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8021d7a:	68fb      	ldr	r3, [r7, #12]
 8021d7c:	681b      	ldr	r3, [r3, #0]
 8021d7e:	695b      	ldr	r3, [r3, #20]
 8021d80:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8021d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8021d88:	d914      	bls.n	8021db4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8021d8a:	68fb      	ldr	r3, [r7, #12]
 8021d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021d8e:	69ba      	ldr	r2, [r7, #24]
 8021d90:	8812      	ldrh	r2, [r2, #0]
 8021d92:	b292      	uxth	r2, r2
 8021d94:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8021d96:	68fb      	ldr	r3, [r7, #12]
 8021d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021d9a:	1c9a      	adds	r2, r3, #2
 8021d9c:	68fb      	ldr	r3, [r7, #12]
 8021d9e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021da6:	b29b      	uxth	r3, r3
 8021da8:	3b02      	subs	r3, #2
 8021daa:	b29a      	uxth	r2, r3
 8021dac:	68fb      	ldr	r3, [r7, #12]
 8021dae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8021db2:	e03d      	b.n	8021e30 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8021db4:	68fb      	ldr	r3, [r7, #12]
 8021db6:	681b      	ldr	r3, [r3, #0]
 8021db8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8021dbc:	68fb      	ldr	r3, [r7, #12]
 8021dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021dc0:	7812      	ldrb	r2, [r2, #0]
 8021dc2:	b2d2      	uxtb	r2, r2
 8021dc4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8021dc6:	68fb      	ldr	r3, [r7, #12]
 8021dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021dca:	1c5a      	adds	r2, r3, #1
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8021dd0:	68fb      	ldr	r3, [r7, #12]
 8021dd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021dd6:	b29b      	uxth	r3, r3
 8021dd8:	3b01      	subs	r3, #1
 8021dda:	b29a      	uxth	r2, r3
 8021ddc:	68fb      	ldr	r3, [r7, #12]
 8021dde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8021de2:	e025      	b.n	8021e30 <HAL_SPI_Receive+0x3a8>
 8021de4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8021de8:	f7f4 fb82 	bl	80164f0 <HAL_GetTick>
 8021dec:	4602      	mov	r2, r0
 8021dee:	697b      	ldr	r3, [r7, #20]
 8021df0:	1ad3      	subs	r3, r2, r3
 8021df2:	683a      	ldr	r2, [r7, #0]
 8021df4:	429a      	cmp	r2, r3
 8021df6:	d803      	bhi.n	8021e00 <HAL_SPI_Receive+0x378>
 8021df8:	683b      	ldr	r3, [r7, #0]
 8021dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021dfe:	d102      	bne.n	8021e06 <HAL_SPI_Receive+0x37e>
 8021e00:	683b      	ldr	r3, [r7, #0]
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	d114      	bne.n	8021e30 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8021e06:	68f8      	ldr	r0, [r7, #12]
 8021e08:	f000 fb1c 	bl	8022444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8021e0c:	68fb      	ldr	r3, [r7, #12]
 8021e0e:	2200      	movs	r2, #0
 8021e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8021e14:	68fb      	ldr	r3, [r7, #12]
 8021e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8021e24:	68fb      	ldr	r3, [r7, #12]
 8021e26:	2201      	movs	r2, #1
 8021e28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8021e2c:	2303      	movs	r3, #3
 8021e2e:	e019      	b.n	8021e64 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8021e30:	68fb      	ldr	r3, [r7, #12]
 8021e32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021e36:	b29b      	uxth	r3, r3
 8021e38:	2b00      	cmp	r3, #0
 8021e3a:	f47f af7b 	bne.w	8021d34 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8021e3e:	68f8      	ldr	r0, [r7, #12]
 8021e40:	f000 fb00 	bl	8022444 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8021e44:	68fb      	ldr	r3, [r7, #12]
 8021e46:	2200      	movs	r2, #0
 8021e48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8021e4c:	68fb      	ldr	r3, [r7, #12]
 8021e4e:	2201      	movs	r2, #1
 8021e50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8021e54:	68fb      	ldr	r3, [r7, #12]
 8021e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d001      	beq.n	8021e62 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8021e5e:	2301      	movs	r3, #1
 8021e60:	e000      	b.n	8021e64 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8021e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8021e64:	4618      	mov	r0, r3
 8021e66:	3720      	adds	r7, #32
 8021e68:	46bd      	mov	sp, r7
 8021e6a:	bd80      	pop	{r7, pc}

08021e6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8021e6c:	b580      	push	{r7, lr}
 8021e6e:	b08e      	sub	sp, #56	; 0x38
 8021e70:	af02      	add	r7, sp, #8
 8021e72:	60f8      	str	r0, [r7, #12]
 8021e74:	60b9      	str	r1, [r7, #8]
 8021e76:	607a      	str	r2, [r7, #4]
 8021e78:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8021e7a:	2300      	movs	r3, #0
 8021e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	681b      	ldr	r3, [r3, #0]
 8021e84:	3320      	adds	r3, #32
 8021e86:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8021e88:	68fb      	ldr	r3, [r7, #12]
 8021e8a:	681b      	ldr	r3, [r3, #0]
 8021e8c:	3330      	adds	r3, #48	; 0x30
 8021e8e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8021e90:	68fb      	ldr	r3, [r7, #12]
 8021e92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8021e96:	2b01      	cmp	r3, #1
 8021e98:	d101      	bne.n	8021e9e <HAL_SPI_TransmitReceive+0x32>
 8021e9a:	2302      	movs	r3, #2
 8021e9c:	e2ce      	b.n	802243c <HAL_SPI_TransmitReceive+0x5d0>
 8021e9e:	68fb      	ldr	r3, [r7, #12]
 8021ea0:	2201      	movs	r2, #1
 8021ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8021ea6:	f7f4 fb23 	bl	80164f0 <HAL_GetTick>
 8021eaa:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8021eac:	887b      	ldrh	r3, [r7, #2]
 8021eae:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8021eb0:	887b      	ldrh	r3, [r7, #2]
 8021eb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8021eb4:	68fb      	ldr	r3, [r7, #12]
 8021eb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8021eba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8021ebc:	68fb      	ldr	r3, [r7, #12]
 8021ebe:	685b      	ldr	r3, [r3, #4]
 8021ec0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8021ec2:	7efb      	ldrb	r3, [r7, #27]
 8021ec4:	2b01      	cmp	r3, #1
 8021ec6:	d014      	beq.n	8021ef2 <HAL_SPI_TransmitReceive+0x86>
 8021ec8:	697b      	ldr	r3, [r7, #20]
 8021eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8021ece:	d106      	bne.n	8021ede <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8021ed0:	68fb      	ldr	r3, [r7, #12]
 8021ed2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8021ed4:	2b00      	cmp	r3, #0
 8021ed6:	d102      	bne.n	8021ede <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8021ed8:	7efb      	ldrb	r3, [r7, #27]
 8021eda:	2b04      	cmp	r3, #4
 8021edc:	d009      	beq.n	8021ef2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8021ede:	2302      	movs	r3, #2
 8021ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8021ee4:	68fb      	ldr	r3, [r7, #12]
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8021eec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8021ef0:	e2a4      	b.n	802243c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8021ef2:	68bb      	ldr	r3, [r7, #8]
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	d005      	beq.n	8021f04 <HAL_SPI_TransmitReceive+0x98>
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d002      	beq.n	8021f04 <HAL_SPI_TransmitReceive+0x98>
 8021efe:	887b      	ldrh	r3, [r7, #2]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d109      	bne.n	8021f18 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8021f04:	2301      	movs	r3, #1
 8021f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8021f0a:	68fb      	ldr	r3, [r7, #12]
 8021f0c:	2200      	movs	r2, #0
 8021f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8021f12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8021f16:	e291      	b.n	802243c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8021f18:	68fb      	ldr	r3, [r7, #12]
 8021f1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8021f1e:	b2db      	uxtb	r3, r3
 8021f20:	2b04      	cmp	r3, #4
 8021f22:	d003      	beq.n	8021f2c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8021f24:	68fb      	ldr	r3, [r7, #12]
 8021f26:	2205      	movs	r2, #5
 8021f28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8021f2c:	68fb      	ldr	r3, [r7, #12]
 8021f2e:	2200      	movs	r2, #0
 8021f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8021f34:	68fb      	ldr	r3, [r7, #12]
 8021f36:	687a      	ldr	r2, [r7, #4]
 8021f38:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8021f3a:	68fb      	ldr	r3, [r7, #12]
 8021f3c:	887a      	ldrh	r2, [r7, #2]
 8021f3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8021f42:	68fb      	ldr	r3, [r7, #12]
 8021f44:	887a      	ldrh	r2, [r7, #2]
 8021f46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	68ba      	ldr	r2, [r7, #8]
 8021f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	887a      	ldrh	r2, [r7, #2]
 8021f54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8021f58:	68fb      	ldr	r3, [r7, #12]
 8021f5a:	887a      	ldrh	r2, [r7, #2]
 8021f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8021f60:	68fb      	ldr	r3, [r7, #12]
 8021f62:	2200      	movs	r2, #0
 8021f64:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8021f66:	68fb      	ldr	r3, [r7, #12]
 8021f68:	2200      	movs	r2, #0
 8021f6a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8021f6c:	68fb      	ldr	r3, [r7, #12]
 8021f6e:	681b      	ldr	r3, [r3, #0]
 8021f70:	685a      	ldr	r2, [r3, #4]
 8021f72:	4b9f      	ldr	r3, [pc, #636]	; (80221f0 <HAL_SPI_TransmitReceive+0x384>)
 8021f74:	4013      	ands	r3, r2
 8021f76:	8879      	ldrh	r1, [r7, #2]
 8021f78:	68fa      	ldr	r2, [r7, #12]
 8021f7a:	6812      	ldr	r2, [r2, #0]
 8021f7c:	430b      	orrs	r3, r1
 8021f7e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8021f80:	68fb      	ldr	r3, [r7, #12]
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	681a      	ldr	r2, [r3, #0]
 8021f86:	68fb      	ldr	r3, [r7, #12]
 8021f88:	681b      	ldr	r3, [r3, #0]
 8021f8a:	f042 0201 	orr.w	r2, r2, #1
 8021f8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8021f90:	68fb      	ldr	r3, [r7, #12]
 8021f92:	685b      	ldr	r3, [r3, #4]
 8021f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8021f98:	d107      	bne.n	8021faa <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8021f9a:	68fb      	ldr	r3, [r7, #12]
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	681a      	ldr	r2, [r3, #0]
 8021fa0:	68fb      	ldr	r3, [r7, #12]
 8021fa2:	681b      	ldr	r3, [r3, #0]
 8021fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8021faa:	68fb      	ldr	r3, [r7, #12]
 8021fac:	68db      	ldr	r3, [r3, #12]
 8021fae:	2b0f      	cmp	r3, #15
 8021fb0:	d970      	bls.n	8022094 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8021fb2:	e068      	b.n	8022086 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8021fb4:	68fb      	ldr	r3, [r7, #12]
 8021fb6:	681b      	ldr	r3, [r3, #0]
 8021fb8:	695b      	ldr	r3, [r3, #20]
 8021fba:	f003 0302 	and.w	r3, r3, #2
 8021fbe:	2b02      	cmp	r3, #2
 8021fc0:	d11a      	bne.n	8021ff8 <HAL_SPI_TransmitReceive+0x18c>
 8021fc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d017      	beq.n	8021ff8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8021fc8:	68fb      	ldr	r3, [r7, #12]
 8021fca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8021fcc:	68fb      	ldr	r3, [r7, #12]
 8021fce:	681b      	ldr	r3, [r3, #0]
 8021fd0:	6812      	ldr	r2, [r2, #0]
 8021fd2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8021fd4:	68fb      	ldr	r3, [r7, #12]
 8021fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021fd8:	1d1a      	adds	r2, r3, #4
 8021fda:	68fb      	ldr	r3, [r7, #12]
 8021fdc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8021fde:	68fb      	ldr	r3, [r7, #12]
 8021fe0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021fe4:	b29b      	uxth	r3, r3
 8021fe6:	3b01      	subs	r3, #1
 8021fe8:	b29a      	uxth	r2, r3
 8021fea:	68fb      	ldr	r3, [r7, #12]
 8021fec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8021ff0:	68fb      	ldr	r3, [r7, #12]
 8021ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021ff6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8021ff8:	68fb      	ldr	r3, [r7, #12]
 8021ffa:	681b      	ldr	r3, [r3, #0]
 8021ffc:	695a      	ldr	r2, [r3, #20]
 8021ffe:	f248 0308 	movw	r3, #32776	; 0x8008
 8022002:	4013      	ands	r3, r2
 8022004:	2b00      	cmp	r3, #0
 8022006:	d01a      	beq.n	802203e <HAL_SPI_TransmitReceive+0x1d2>
 8022008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802200a:	2b00      	cmp	r3, #0
 802200c:	d017      	beq.n	802203e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 802200e:	68fb      	ldr	r3, [r7, #12]
 8022010:	681a      	ldr	r2, [r3, #0]
 8022012:	68fb      	ldr	r3, [r7, #12]
 8022014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022016:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8022018:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 802201a:	68fb      	ldr	r3, [r7, #12]
 802201c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802201e:	1d1a      	adds	r2, r3, #4
 8022020:	68fb      	ldr	r3, [r7, #12]
 8022022:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8022024:	68fb      	ldr	r3, [r7, #12]
 8022026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802202a:	b29b      	uxth	r3, r3
 802202c:	3b01      	subs	r3, #1
 802202e:	b29a      	uxth	r2, r3
 8022030:	68fb      	ldr	r3, [r7, #12]
 8022032:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8022036:	68fb      	ldr	r3, [r7, #12]
 8022038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802203c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802203e:	f7f4 fa57 	bl	80164f0 <HAL_GetTick>
 8022042:	4602      	mov	r2, r0
 8022044:	69fb      	ldr	r3, [r7, #28]
 8022046:	1ad3      	subs	r3, r2, r3
 8022048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802204a:	429a      	cmp	r2, r3
 802204c:	d803      	bhi.n	8022056 <HAL_SPI_TransmitReceive+0x1ea>
 802204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022054:	d102      	bne.n	802205c <HAL_SPI_TransmitReceive+0x1f0>
 8022056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022058:	2b00      	cmp	r3, #0
 802205a:	d114      	bne.n	8022086 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802205c:	68f8      	ldr	r0, [r7, #12]
 802205e:	f000 f9f1 	bl	8022444 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8022062:	68fb      	ldr	r3, [r7, #12]
 8022064:	2200      	movs	r2, #0
 8022066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802206a:	68fb      	ldr	r3, [r7, #12]
 802206c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022070:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8022074:	68fb      	ldr	r3, [r7, #12]
 8022076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 802207a:	68fb      	ldr	r3, [r7, #12]
 802207c:	2201      	movs	r2, #1
 802207e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8022082:	2303      	movs	r3, #3
 8022084:	e1da      	b.n	802243c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8022086:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022088:	2b00      	cmp	r3, #0
 802208a:	d193      	bne.n	8021fb4 <HAL_SPI_TransmitReceive+0x148>
 802208c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802208e:	2b00      	cmp	r3, #0
 8022090:	d190      	bne.n	8021fb4 <HAL_SPI_TransmitReceive+0x148>
 8022092:	e1ac      	b.n	80223ee <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022094:	68fb      	ldr	r3, [r7, #12]
 8022096:	68db      	ldr	r3, [r3, #12]
 8022098:	2b07      	cmp	r3, #7
 802209a:	f240 81a0 	bls.w	80223de <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802209e:	e0a9      	b.n	80221f4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	681b      	ldr	r3, [r3, #0]
 80220a4:	695b      	ldr	r3, [r3, #20]
 80220a6:	f003 0302 	and.w	r3, r3, #2
 80220aa:	2b02      	cmp	r3, #2
 80220ac:	d139      	bne.n	8022122 <HAL_SPI_TransmitReceive+0x2b6>
 80220ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	d036      	beq.n	8022122 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80220b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80220b6:	2b01      	cmp	r3, #1
 80220b8:	d91c      	bls.n	80220f4 <HAL_SPI_TransmitReceive+0x288>
 80220ba:	68fb      	ldr	r3, [r7, #12]
 80220bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d018      	beq.n	80220f4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80220c2:	68fb      	ldr	r3, [r7, #12]
 80220c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80220c6:	68fb      	ldr	r3, [r7, #12]
 80220c8:	681b      	ldr	r3, [r3, #0]
 80220ca:	6812      	ldr	r2, [r2, #0]
 80220cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80220ce:	68fb      	ldr	r3, [r7, #12]
 80220d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80220d2:	1d1a      	adds	r2, r3, #4
 80220d4:	68fb      	ldr	r3, [r7, #12]
 80220d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80220d8:	68fb      	ldr	r3, [r7, #12]
 80220da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80220de:	b29b      	uxth	r3, r3
 80220e0:	3b02      	subs	r3, #2
 80220e2:	b29a      	uxth	r2, r3
 80220e4:	68fb      	ldr	r3, [r7, #12]
 80220e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80220ea:	68fb      	ldr	r3, [r7, #12]
 80220ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80220f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80220f2:	e016      	b.n	8022122 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80220f4:	68fb      	ldr	r3, [r7, #12]
 80220f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80220f8:	881a      	ldrh	r2, [r3, #0]
 80220fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80220fe:	68fb      	ldr	r3, [r7, #12]
 8022100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022102:	1c9a      	adds	r2, r3, #2
 8022104:	68fb      	ldr	r3, [r7, #12]
 8022106:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8022108:	68fb      	ldr	r3, [r7, #12]
 802210a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802210e:	b29b      	uxth	r3, r3
 8022110:	3b01      	subs	r3, #1
 8022112:	b29a      	uxth	r2, r3
 8022114:	68fb      	ldr	r3, [r7, #12]
 8022116:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 802211a:	68fb      	ldr	r3, [r7, #12]
 802211c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8022120:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8022122:	68fb      	ldr	r3, [r7, #12]
 8022124:	681b      	ldr	r3, [r3, #0]
 8022126:	695b      	ldr	r3, [r3, #20]
 8022128:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 802212c:	2b00      	cmp	r3, #0
 802212e:	d03a      	beq.n	80221a6 <HAL_SPI_TransmitReceive+0x33a>
 8022130:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8022132:	2b00      	cmp	r3, #0
 8022134:	d037      	beq.n	80221a6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8022136:	68fb      	ldr	r3, [r7, #12]
 8022138:	681b      	ldr	r3, [r3, #0]
 802213a:	695b      	ldr	r3, [r3, #20]
 802213c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8022140:	2b00      	cmp	r3, #0
 8022142:	d018      	beq.n	8022176 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	681a      	ldr	r2, [r3, #0]
 8022148:	68fb      	ldr	r3, [r7, #12]
 802214a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802214c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 802214e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8022150:	68fb      	ldr	r3, [r7, #12]
 8022152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022154:	1d1a      	adds	r2, r3, #4
 8022156:	68fb      	ldr	r3, [r7, #12]
 8022158:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 802215a:	68fb      	ldr	r3, [r7, #12]
 802215c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8022160:	b29b      	uxth	r3, r3
 8022162:	3b02      	subs	r3, #2
 8022164:	b29a      	uxth	r2, r3
 8022166:	68fb      	ldr	r3, [r7, #12]
 8022168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 802216c:	68fb      	ldr	r3, [r7, #12]
 802216e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8022172:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8022174:	e017      	b.n	80221a6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8022176:	68fb      	ldr	r3, [r7, #12]
 8022178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802217a:	6a3a      	ldr	r2, [r7, #32]
 802217c:	8812      	ldrh	r2, [r2, #0]
 802217e:	b292      	uxth	r2, r2
 8022180:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8022182:	68fb      	ldr	r3, [r7, #12]
 8022184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022186:	1c9a      	adds	r2, r3, #2
 8022188:	68fb      	ldr	r3, [r7, #12]
 802218a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 802218c:	68fb      	ldr	r3, [r7, #12]
 802218e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8022192:	b29b      	uxth	r3, r3
 8022194:	3b01      	subs	r3, #1
 8022196:	b29a      	uxth	r2, r3
 8022198:	68fb      	ldr	r3, [r7, #12]
 802219a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 802219e:	68fb      	ldr	r3, [r7, #12]
 80221a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80221a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80221a6:	f7f4 f9a3 	bl	80164f0 <HAL_GetTick>
 80221aa:	4602      	mov	r2, r0
 80221ac:	69fb      	ldr	r3, [r7, #28]
 80221ae:	1ad3      	subs	r3, r2, r3
 80221b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80221b2:	429a      	cmp	r2, r3
 80221b4:	d803      	bhi.n	80221be <HAL_SPI_TransmitReceive+0x352>
 80221b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80221b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80221bc:	d102      	bne.n	80221c4 <HAL_SPI_TransmitReceive+0x358>
 80221be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d117      	bne.n	80221f4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80221c4:	68f8      	ldr	r0, [r7, #12]
 80221c6:	f000 f93d 	bl	8022444 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80221ca:	68fb      	ldr	r3, [r7, #12]
 80221cc:	2200      	movs	r2, #0
 80221ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80221d2:	68fb      	ldr	r3, [r7, #12]
 80221d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80221d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80221dc:	68fb      	ldr	r3, [r7, #12]
 80221de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80221e2:	68fb      	ldr	r3, [r7, #12]
 80221e4:	2201      	movs	r2, #1
 80221e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80221ea:	2303      	movs	r3, #3
 80221ec:	e126      	b.n	802243c <HAL_SPI_TransmitReceive+0x5d0>
 80221ee:	bf00      	nop
 80221f0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80221f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	f47f af52 	bne.w	80220a0 <HAL_SPI_TransmitReceive+0x234>
 80221fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80221fe:	2b00      	cmp	r3, #0
 8022200:	f47f af4e 	bne.w	80220a0 <HAL_SPI_TransmitReceive+0x234>
 8022204:	e0f3      	b.n	80223ee <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8022206:	68fb      	ldr	r3, [r7, #12]
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	695b      	ldr	r3, [r3, #20]
 802220c:	f003 0302 	and.w	r3, r3, #2
 8022210:	2b02      	cmp	r3, #2
 8022212:	d15a      	bne.n	80222ca <HAL_SPI_TransmitReceive+0x45e>
 8022214:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022216:	2b00      	cmp	r3, #0
 8022218:	d057      	beq.n	80222ca <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 802221a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802221c:	2b03      	cmp	r3, #3
 802221e:	d91c      	bls.n	802225a <HAL_SPI_TransmitReceive+0x3ee>
 8022220:	68fb      	ldr	r3, [r7, #12]
 8022222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022224:	2b40      	cmp	r3, #64	; 0x40
 8022226:	d918      	bls.n	802225a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8022228:	68fb      	ldr	r3, [r7, #12]
 802222a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802222c:	68fb      	ldr	r3, [r7, #12]
 802222e:	681b      	ldr	r3, [r3, #0]
 8022230:	6812      	ldr	r2, [r2, #0]
 8022232:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8022234:	68fb      	ldr	r3, [r7, #12]
 8022236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022238:	1d1a      	adds	r2, r3, #4
 802223a:	68fb      	ldr	r3, [r7, #12]
 802223c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 802223e:	68fb      	ldr	r3, [r7, #12]
 8022240:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8022244:	b29b      	uxth	r3, r3
 8022246:	3b04      	subs	r3, #4
 8022248:	b29a      	uxth	r2, r3
 802224a:	68fb      	ldr	r3, [r7, #12]
 802224c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8022250:	68fb      	ldr	r3, [r7, #12]
 8022252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8022256:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8022258:	e037      	b.n	80222ca <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 802225a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802225c:	2b01      	cmp	r3, #1
 802225e:	d91b      	bls.n	8022298 <HAL_SPI_TransmitReceive+0x42c>
 8022260:	68fb      	ldr	r3, [r7, #12]
 8022262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022264:	2b00      	cmp	r3, #0
 8022266:	d017      	beq.n	8022298 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8022268:	68fb      	ldr	r3, [r7, #12]
 802226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802226c:	881a      	ldrh	r2, [r3, #0]
 802226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022270:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8022272:	68fb      	ldr	r3, [r7, #12]
 8022274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022276:	1c9a      	adds	r2, r3, #2
 8022278:	68fb      	ldr	r3, [r7, #12]
 802227a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 802227c:	68fb      	ldr	r3, [r7, #12]
 802227e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8022282:	b29b      	uxth	r3, r3
 8022284:	3b02      	subs	r3, #2
 8022286:	b29a      	uxth	r2, r3
 8022288:	68fb      	ldr	r3, [r7, #12]
 802228a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 802228e:	68fb      	ldr	r3, [r7, #12]
 8022290:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8022294:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8022296:	e018      	b.n	80222ca <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8022298:	68fb      	ldr	r3, [r7, #12]
 802229a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802229c:	68fb      	ldr	r3, [r7, #12]
 802229e:	681b      	ldr	r3, [r3, #0]
 80222a0:	3320      	adds	r3, #32
 80222a2:	7812      	ldrb	r2, [r2, #0]
 80222a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80222a6:	68fb      	ldr	r3, [r7, #12]
 80222a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80222aa:	1c5a      	adds	r2, r3, #1
 80222ac:	68fb      	ldr	r3, [r7, #12]
 80222ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80222b0:	68fb      	ldr	r3, [r7, #12]
 80222b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80222b6:	b29b      	uxth	r3, r3
 80222b8:	3b01      	subs	r3, #1
 80222ba:	b29a      	uxth	r2, r3
 80222bc:	68fb      	ldr	r3, [r7, #12]
 80222be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80222c2:	68fb      	ldr	r3, [r7, #12]
 80222c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80222c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80222ca:	68fb      	ldr	r3, [r7, #12]
 80222cc:	681b      	ldr	r3, [r3, #0]
 80222ce:	695b      	ldr	r3, [r3, #20]
 80222d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d05e      	beq.n	8022396 <HAL_SPI_TransmitReceive+0x52a>
 80222d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d05b      	beq.n	8022396 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80222de:	68fb      	ldr	r3, [r7, #12]
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	695b      	ldr	r3, [r3, #20]
 80222e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	d018      	beq.n	802231e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80222ec:	68fb      	ldr	r3, [r7, #12]
 80222ee:	681a      	ldr	r2, [r3, #0]
 80222f0:	68fb      	ldr	r3, [r7, #12]
 80222f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80222f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80222f6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80222f8:	68fb      	ldr	r3, [r7, #12]
 80222fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80222fc:	1d1a      	adds	r2, r3, #4
 80222fe:	68fb      	ldr	r3, [r7, #12]
 8022300:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8022302:	68fb      	ldr	r3, [r7, #12]
 8022304:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8022308:	b29b      	uxth	r3, r3
 802230a:	3b04      	subs	r3, #4
 802230c:	b29a      	uxth	r2, r3
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8022314:	68fb      	ldr	r3, [r7, #12]
 8022316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802231a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802231c:	e03b      	b.n	8022396 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 802231e:	68fb      	ldr	r3, [r7, #12]
 8022320:	681b      	ldr	r3, [r3, #0]
 8022322:	695b      	ldr	r3, [r3, #20]
 8022324:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8022328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802232c:	d918      	bls.n	8022360 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 802232e:	68fb      	ldr	r3, [r7, #12]
 8022330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022332:	6a3a      	ldr	r2, [r7, #32]
 8022334:	8812      	ldrh	r2, [r2, #0]
 8022336:	b292      	uxth	r2, r2
 8022338:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 802233a:	68fb      	ldr	r3, [r7, #12]
 802233c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802233e:	1c9a      	adds	r2, r3, #2
 8022340:	68fb      	ldr	r3, [r7, #12]
 8022342:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8022344:	68fb      	ldr	r3, [r7, #12]
 8022346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802234a:	b29b      	uxth	r3, r3
 802234c:	3b02      	subs	r3, #2
 802234e:	b29a      	uxth	r2, r3
 8022350:	68fb      	ldr	r3, [r7, #12]
 8022352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8022356:	68fb      	ldr	r3, [r7, #12]
 8022358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802235c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802235e:	e01a      	b.n	8022396 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8022360:	68fb      	ldr	r3, [r7, #12]
 8022362:	681b      	ldr	r3, [r3, #0]
 8022364:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8022368:	68fb      	ldr	r3, [r7, #12]
 802236a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802236c:	7812      	ldrb	r2, [r2, #0]
 802236e:	b2d2      	uxtb	r2, r2
 8022370:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8022372:	68fb      	ldr	r3, [r7, #12]
 8022374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022376:	1c5a      	adds	r2, r3, #1
 8022378:	68fb      	ldr	r3, [r7, #12]
 802237a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 802237c:	68fb      	ldr	r3, [r7, #12]
 802237e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8022382:	b29b      	uxth	r3, r3
 8022384:	3b01      	subs	r3, #1
 8022386:	b29a      	uxth	r2, r3
 8022388:	68fb      	ldr	r3, [r7, #12]
 802238a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 802238e:	68fb      	ldr	r3, [r7, #12]
 8022390:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8022394:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022396:	f7f4 f8ab 	bl	80164f0 <HAL_GetTick>
 802239a:	4602      	mov	r2, r0
 802239c:	69fb      	ldr	r3, [r7, #28]
 802239e:	1ad3      	subs	r3, r2, r3
 80223a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80223a2:	429a      	cmp	r2, r3
 80223a4:	d803      	bhi.n	80223ae <HAL_SPI_TransmitReceive+0x542>
 80223a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80223a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80223ac:	d102      	bne.n	80223b4 <HAL_SPI_TransmitReceive+0x548>
 80223ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	d114      	bne.n	80223de <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80223b4:	68f8      	ldr	r0, [r7, #12]
 80223b6:	f000 f845 	bl	8022444 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	2200      	movs	r2, #0
 80223be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80223c2:	68fb      	ldr	r3, [r7, #12]
 80223c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80223c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80223cc:	68fb      	ldr	r3, [r7, #12]
 80223ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80223d2:	68fb      	ldr	r3, [r7, #12]
 80223d4:	2201      	movs	r2, #1
 80223d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80223da:	2303      	movs	r3, #3
 80223dc:	e02e      	b.n	802243c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80223de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	f47f af10 	bne.w	8022206 <HAL_SPI_TransmitReceive+0x39a>
 80223e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80223e8:	2b00      	cmp	r3, #0
 80223ea:	f47f af0c 	bne.w	8022206 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80223ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80223f0:	9300      	str	r3, [sp, #0]
 80223f2:	69fb      	ldr	r3, [r7, #28]
 80223f4:	2200      	movs	r2, #0
 80223f6:	2108      	movs	r1, #8
 80223f8:	68f8      	ldr	r0, [r7, #12]
 80223fa:	f000 f8c3 	bl	8022584 <SPI_WaitOnFlagUntilTimeout>
 80223fe:	4603      	mov	r3, r0
 8022400:	2b00      	cmp	r3, #0
 8022402:	d007      	beq.n	8022414 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8022404:	68fb      	ldr	r3, [r7, #12]
 8022406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802240a:	f043 0220 	orr.w	r2, r3, #32
 802240e:	68fb      	ldr	r3, [r7, #12]
 8022410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8022414:	68f8      	ldr	r0, [r7, #12]
 8022416:	f000 f815 	bl	8022444 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 802241a:	68fb      	ldr	r3, [r7, #12]
 802241c:	2200      	movs	r2, #0
 802241e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8022422:	68fb      	ldr	r3, [r7, #12]
 8022424:	2201      	movs	r2, #1
 8022426:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802242a:	68fb      	ldr	r3, [r7, #12]
 802242c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022430:	2b00      	cmp	r3, #0
 8022432:	d001      	beq.n	8022438 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8022434:	2301      	movs	r3, #1
 8022436:	e001      	b.n	802243c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8022438:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 802243c:	4618      	mov	r0, r3
 802243e:	3730      	adds	r7, #48	; 0x30
 8022440:	46bd      	mov	sp, r7
 8022442:	bd80      	pop	{r7, pc}

08022444 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8022444:	b480      	push	{r7}
 8022446:	b085      	sub	sp, #20
 8022448:	af00      	add	r7, sp, #0
 802244a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	681b      	ldr	r3, [r3, #0]
 8022450:	695b      	ldr	r3, [r3, #20]
 8022452:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	681b      	ldr	r3, [r3, #0]
 8022458:	699a      	ldr	r2, [r3, #24]
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	f042 0208 	orr.w	r2, r2, #8
 8022462:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	681b      	ldr	r3, [r3, #0]
 8022468:	699a      	ldr	r2, [r3, #24]
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	681b      	ldr	r3, [r3, #0]
 802246e:	f042 0210 	orr.w	r2, r2, #16
 8022472:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8022474:	687b      	ldr	r3, [r7, #4]
 8022476:	681b      	ldr	r3, [r3, #0]
 8022478:	681a      	ldr	r2, [r3, #0]
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	f022 0201 	bic.w	r2, r2, #1
 8022482:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	681b      	ldr	r3, [r3, #0]
 8022488:	6919      	ldr	r1, [r3, #16]
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	681a      	ldr	r2, [r3, #0]
 802248e:	4b3c      	ldr	r3, [pc, #240]	; (8022580 <SPI_CloseTransfer+0x13c>)
 8022490:	400b      	ands	r3, r1
 8022492:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	681b      	ldr	r3, [r3, #0]
 8022498:	689a      	ldr	r2, [r3, #8]
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	681b      	ldr	r3, [r3, #0]
 802249e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80224a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80224aa:	b2db      	uxtb	r3, r3
 80224ac:	2b04      	cmp	r3, #4
 80224ae:	d014      	beq.n	80224da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80224b0:	68fb      	ldr	r3, [r7, #12]
 80224b2:	f003 0320 	and.w	r3, r3, #32
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d00f      	beq.n	80224da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80224c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80224c4:	687b      	ldr	r3, [r7, #4]
 80224c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	681b      	ldr	r3, [r3, #0]
 80224ce:	699a      	ldr	r2, [r3, #24]
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	681b      	ldr	r3, [r3, #0]
 80224d4:	f042 0220 	orr.w	r2, r2, #32
 80224d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80224da:	687b      	ldr	r3, [r7, #4]
 80224dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80224e0:	b2db      	uxtb	r3, r3
 80224e2:	2b03      	cmp	r3, #3
 80224e4:	d014      	beq.n	8022510 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80224e6:	68fb      	ldr	r3, [r7, #12]
 80224e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80224ec:	2b00      	cmp	r3, #0
 80224ee:	d00f      	beq.n	8022510 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80224f0:	687b      	ldr	r3, [r7, #4]
 80224f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80224f6:	f043 0204 	orr.w	r2, r3, #4
 80224fa:	687b      	ldr	r3, [r7, #4]
 80224fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8022500:	687b      	ldr	r3, [r7, #4]
 8022502:	681b      	ldr	r3, [r3, #0]
 8022504:	699a      	ldr	r2, [r3, #24]
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	681b      	ldr	r3, [r3, #0]
 802250a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802250e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8022510:	68fb      	ldr	r3, [r7, #12]
 8022512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022516:	2b00      	cmp	r3, #0
 8022518:	d00f      	beq.n	802253a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022520:	f043 0201 	orr.w	r2, r3, #1
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	681b      	ldr	r3, [r3, #0]
 802252e:	699a      	ldr	r2, [r3, #24]
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	681b      	ldr	r3, [r3, #0]
 8022534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022538:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 802253a:	68fb      	ldr	r3, [r7, #12]
 802253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022540:	2b00      	cmp	r3, #0
 8022542:	d00f      	beq.n	8022564 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802254a:	f043 0208 	orr.w	r2, r3, #8
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	681b      	ldr	r3, [r3, #0]
 8022558:	699a      	ldr	r2, [r3, #24]
 802255a:	687b      	ldr	r3, [r7, #4]
 802255c:	681b      	ldr	r3, [r3, #0]
 802255e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022562:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	2200      	movs	r2, #0
 8022568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	2200      	movs	r2, #0
 8022570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8022574:	bf00      	nop
 8022576:	3714      	adds	r7, #20
 8022578:	46bd      	mov	sp, r7
 802257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802257e:	4770      	bx	lr
 8022580:	fffffc90 	.word	0xfffffc90

08022584 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8022584:	b580      	push	{r7, lr}
 8022586:	b084      	sub	sp, #16
 8022588:	af00      	add	r7, sp, #0
 802258a:	60f8      	str	r0, [r7, #12]
 802258c:	60b9      	str	r1, [r7, #8]
 802258e:	603b      	str	r3, [r7, #0]
 8022590:	4613      	mov	r3, r2
 8022592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8022594:	e010      	b.n	80225b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022596:	f7f3 ffab 	bl	80164f0 <HAL_GetTick>
 802259a:	4602      	mov	r2, r0
 802259c:	683b      	ldr	r3, [r7, #0]
 802259e:	1ad3      	subs	r3, r2, r3
 80225a0:	69ba      	ldr	r2, [r7, #24]
 80225a2:	429a      	cmp	r2, r3
 80225a4:	d803      	bhi.n	80225ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80225a6:	69bb      	ldr	r3, [r7, #24]
 80225a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80225ac:	d102      	bne.n	80225b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80225ae:	69bb      	ldr	r3, [r7, #24]
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	d101      	bne.n	80225b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80225b4:	2303      	movs	r3, #3
 80225b6:	e00f      	b.n	80225d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80225b8:	68fb      	ldr	r3, [r7, #12]
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	695a      	ldr	r2, [r3, #20]
 80225be:	68bb      	ldr	r3, [r7, #8]
 80225c0:	4013      	ands	r3, r2
 80225c2:	68ba      	ldr	r2, [r7, #8]
 80225c4:	429a      	cmp	r2, r3
 80225c6:	bf0c      	ite	eq
 80225c8:	2301      	moveq	r3, #1
 80225ca:	2300      	movne	r3, #0
 80225cc:	b2db      	uxtb	r3, r3
 80225ce:	461a      	mov	r2, r3
 80225d0:	79fb      	ldrb	r3, [r7, #7]
 80225d2:	429a      	cmp	r2, r3
 80225d4:	d0df      	beq.n	8022596 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80225d6:	2300      	movs	r3, #0
}
 80225d8:	4618      	mov	r0, r3
 80225da:	3710      	adds	r7, #16
 80225dc:	46bd      	mov	sp, r7
 80225de:	bd80      	pop	{r7, pc}

080225e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80225e0:	b480      	push	{r7}
 80225e2:	b085      	sub	sp, #20
 80225e4:	af00      	add	r7, sp, #0
 80225e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80225e8:	687b      	ldr	r3, [r7, #4]
 80225ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80225ec:	095b      	lsrs	r3, r3, #5
 80225ee:	3301      	adds	r3, #1
 80225f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80225f2:	687b      	ldr	r3, [r7, #4]
 80225f4:	68db      	ldr	r3, [r3, #12]
 80225f6:	3301      	adds	r3, #1
 80225f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80225fa:	68bb      	ldr	r3, [r7, #8]
 80225fc:	3307      	adds	r3, #7
 80225fe:	08db      	lsrs	r3, r3, #3
 8022600:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8022602:	68bb      	ldr	r3, [r7, #8]
 8022604:	68fa      	ldr	r2, [r7, #12]
 8022606:	fb02 f303 	mul.w	r3, r2, r3
}
 802260a:	4618      	mov	r0, r3
 802260c:	3714      	adds	r7, #20
 802260e:	46bd      	mov	sp, r7
 8022610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022614:	4770      	bx	lr

08022616 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8022616:	b580      	push	{r7, lr}
 8022618:	b082      	sub	sp, #8
 802261a:	af00      	add	r7, sp, #0
 802261c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	2b00      	cmp	r3, #0
 8022622:	d101      	bne.n	8022628 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8022624:	2301      	movs	r3, #1
 8022626:	e049      	b.n	80226bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802262e:	b2db      	uxtb	r3, r3
 8022630:	2b00      	cmp	r3, #0
 8022632:	d106      	bne.n	8022642 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	2200      	movs	r2, #0
 8022638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802263c:	6878      	ldr	r0, [r7, #4]
 802263e:	f7ea f8db 	bl	800c7f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	2202      	movs	r2, #2
 8022646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	681a      	ldr	r2, [r3, #0]
 802264e:	687b      	ldr	r3, [r7, #4]
 8022650:	3304      	adds	r3, #4
 8022652:	4619      	mov	r1, r3
 8022654:	4610      	mov	r0, r2
 8022656:	f001 faeb 	bl	8023c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	2201      	movs	r2, #1
 802265e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022662:	687b      	ldr	r3, [r7, #4]
 8022664:	2201      	movs	r2, #1
 8022666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	2201      	movs	r2, #1
 802266e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	2201      	movs	r2, #1
 8022676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802267a:	687b      	ldr	r3, [r7, #4]
 802267c:	2201      	movs	r2, #1
 802267e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	2201      	movs	r2, #1
 8022686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802268a:	687b      	ldr	r3, [r7, #4]
 802268c:	2201      	movs	r2, #1
 802268e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	2201      	movs	r2, #1
 8022696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	2201      	movs	r2, #1
 802269e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	2201      	movs	r2, #1
 80226a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	2201      	movs	r2, #1
 80226ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	2201      	movs	r2, #1
 80226b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80226ba:	2300      	movs	r3, #0
}
 80226bc:	4618      	mov	r0, r3
 80226be:	3708      	adds	r7, #8
 80226c0:	46bd      	mov	sp, r7
 80226c2:	bd80      	pop	{r7, pc}

080226c4 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80226c4:	b580      	push	{r7, lr}
 80226c6:	b082      	sub	sp, #8
 80226c8:	af00      	add	r7, sp, #0
 80226ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	2202      	movs	r2, #2
 80226d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	6a1a      	ldr	r2, [r3, #32]
 80226da:	f241 1311 	movw	r3, #4369	; 0x1111
 80226de:	4013      	ands	r3, r2
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	d10f      	bne.n	8022704 <HAL_TIM_Base_DeInit+0x40>
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	6a1a      	ldr	r2, [r3, #32]
 80226ea:	f240 4344 	movw	r3, #1092	; 0x444
 80226ee:	4013      	ands	r3, r2
 80226f0:	2b00      	cmp	r3, #0
 80226f2:	d107      	bne.n	8022704 <HAL_TIM_Base_DeInit+0x40>
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	681a      	ldr	r2, [r3, #0]
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	f022 0201 	bic.w	r2, r2, #1
 8022702:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8022704:	6878      	ldr	r0, [r7, #4]
 8022706:	f7ea f9a3 	bl	800ca50 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	2200      	movs	r2, #0
 802270e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	2200      	movs	r2, #0
 8022716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	2200      	movs	r2, #0
 802271e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8022722:	687b      	ldr	r3, [r7, #4]
 8022724:	2200      	movs	r2, #0
 8022726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	2200      	movs	r2, #0
 802272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	2200      	movs	r2, #0
 8022736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802273a:	687b      	ldr	r3, [r7, #4]
 802273c:	2200      	movs	r2, #0
 802273e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8022742:	687b      	ldr	r3, [r7, #4]
 8022744:	2200      	movs	r2, #0
 8022746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	2200      	movs	r2, #0
 802274e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	2200      	movs	r2, #0
 8022756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	2200      	movs	r2, #0
 802275e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8022762:	687b      	ldr	r3, [r7, #4]
 8022764:	2200      	movs	r2, #0
 8022766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	2200      	movs	r2, #0
 802276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022772:	2300      	movs	r3, #0
}
 8022774:	4618      	mov	r0, r3
 8022776:	3708      	adds	r7, #8
 8022778:	46bd      	mov	sp, r7
 802277a:	bd80      	pop	{r7, pc}

0802277c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802277c:	b480      	push	{r7}
 802277e:	b085      	sub	sp, #20
 8022780:	af00      	add	r7, sp, #0
 8022782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8022784:	687b      	ldr	r3, [r7, #4]
 8022786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802278a:	b2db      	uxtb	r3, r3
 802278c:	2b01      	cmp	r3, #1
 802278e:	d001      	beq.n	8022794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8022790:	2301      	movs	r3, #1
 8022792:	e05e      	b.n	8022852 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	2202      	movs	r2, #2
 8022798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	681b      	ldr	r3, [r3, #0]
 80227a0:	68da      	ldr	r2, [r3, #12]
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	f042 0201 	orr.w	r2, r2, #1
 80227aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	4a2b      	ldr	r2, [pc, #172]	; (8022860 <HAL_TIM_Base_Start_IT+0xe4>)
 80227b2:	4293      	cmp	r3, r2
 80227b4:	d02c      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80227be:	d027      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	4a27      	ldr	r2, [pc, #156]	; (8022864 <HAL_TIM_Base_Start_IT+0xe8>)
 80227c6:	4293      	cmp	r3, r2
 80227c8:	d022      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	681b      	ldr	r3, [r3, #0]
 80227ce:	4a26      	ldr	r2, [pc, #152]	; (8022868 <HAL_TIM_Base_Start_IT+0xec>)
 80227d0:	4293      	cmp	r3, r2
 80227d2:	d01d      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	4a24      	ldr	r2, [pc, #144]	; (802286c <HAL_TIM_Base_Start_IT+0xf0>)
 80227da:	4293      	cmp	r3, r2
 80227dc:	d018      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 80227de:	687b      	ldr	r3, [r7, #4]
 80227e0:	681b      	ldr	r3, [r3, #0]
 80227e2:	4a23      	ldr	r2, [pc, #140]	; (8022870 <HAL_TIM_Base_Start_IT+0xf4>)
 80227e4:	4293      	cmp	r3, r2
 80227e6:	d013      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	681b      	ldr	r3, [r3, #0]
 80227ec:	4a21      	ldr	r2, [pc, #132]	; (8022874 <HAL_TIM_Base_Start_IT+0xf8>)
 80227ee:	4293      	cmp	r3, r2
 80227f0:	d00e      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	681b      	ldr	r3, [r3, #0]
 80227f6:	4a20      	ldr	r2, [pc, #128]	; (8022878 <HAL_TIM_Base_Start_IT+0xfc>)
 80227f8:	4293      	cmp	r3, r2
 80227fa:	d009      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	681b      	ldr	r3, [r3, #0]
 8022800:	4a1e      	ldr	r2, [pc, #120]	; (802287c <HAL_TIM_Base_Start_IT+0x100>)
 8022802:	4293      	cmp	r3, r2
 8022804:	d004      	beq.n	8022810 <HAL_TIM_Base_Start_IT+0x94>
 8022806:	687b      	ldr	r3, [r7, #4]
 8022808:	681b      	ldr	r3, [r3, #0]
 802280a:	4a1d      	ldr	r2, [pc, #116]	; (8022880 <HAL_TIM_Base_Start_IT+0x104>)
 802280c:	4293      	cmp	r3, r2
 802280e:	d115      	bne.n	802283c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	681b      	ldr	r3, [r3, #0]
 8022814:	689a      	ldr	r2, [r3, #8]
 8022816:	4b1b      	ldr	r3, [pc, #108]	; (8022884 <HAL_TIM_Base_Start_IT+0x108>)
 8022818:	4013      	ands	r3, r2
 802281a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802281c:	68fb      	ldr	r3, [r7, #12]
 802281e:	2b06      	cmp	r3, #6
 8022820:	d015      	beq.n	802284e <HAL_TIM_Base_Start_IT+0xd2>
 8022822:	68fb      	ldr	r3, [r7, #12]
 8022824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022828:	d011      	beq.n	802284e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 802282a:	687b      	ldr	r3, [r7, #4]
 802282c:	681b      	ldr	r3, [r3, #0]
 802282e:	681a      	ldr	r2, [r3, #0]
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	f042 0201 	orr.w	r2, r2, #1
 8022838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802283a:	e008      	b.n	802284e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	681b      	ldr	r3, [r3, #0]
 8022840:	681a      	ldr	r2, [r3, #0]
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	681b      	ldr	r3, [r3, #0]
 8022846:	f042 0201 	orr.w	r2, r2, #1
 802284a:	601a      	str	r2, [r3, #0]
 802284c:	e000      	b.n	8022850 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802284e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8022850:	2300      	movs	r3, #0
}
 8022852:	4618      	mov	r0, r3
 8022854:	3714      	adds	r7, #20
 8022856:	46bd      	mov	sp, r7
 8022858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802285c:	4770      	bx	lr
 802285e:	bf00      	nop
 8022860:	40010000 	.word	0x40010000
 8022864:	40000400 	.word	0x40000400
 8022868:	40000800 	.word	0x40000800
 802286c:	40000c00 	.word	0x40000c00
 8022870:	40010400 	.word	0x40010400
 8022874:	40001800 	.word	0x40001800
 8022878:	40014000 	.word	0x40014000
 802287c:	4000e000 	.word	0x4000e000
 8022880:	4000e400 	.word	0x4000e400
 8022884:	00010007 	.word	0x00010007

08022888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8022888:	b580      	push	{r7, lr}
 802288a:	b082      	sub	sp, #8
 802288c:	af00      	add	r7, sp, #0
 802288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	2b00      	cmp	r3, #0
 8022894:	d101      	bne.n	802289a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8022896:	2301      	movs	r3, #1
 8022898:	e049      	b.n	802292e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802289a:	687b      	ldr	r3, [r7, #4]
 802289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80228a0:	b2db      	uxtb	r3, r3
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	d106      	bne.n	80228b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80228a6:	687b      	ldr	r3, [r7, #4]
 80228a8:	2200      	movs	r2, #0
 80228aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80228ae:	6878      	ldr	r0, [r7, #4]
 80228b0:	f000 f841 	bl	8022936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80228b4:	687b      	ldr	r3, [r7, #4]
 80228b6:	2202      	movs	r2, #2
 80228b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80228bc:	687b      	ldr	r3, [r7, #4]
 80228be:	681a      	ldr	r2, [r3, #0]
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	3304      	adds	r3, #4
 80228c4:	4619      	mov	r1, r3
 80228c6:	4610      	mov	r0, r2
 80228c8:	f001 f9b2 	bl	8023c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80228cc:	687b      	ldr	r3, [r7, #4]
 80228ce:	2201      	movs	r2, #1
 80228d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	2201      	movs	r2, #1
 80228d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	2201      	movs	r2, #1
 80228e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80228e4:	687b      	ldr	r3, [r7, #4]
 80228e6:	2201      	movs	r2, #1
 80228e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	2201      	movs	r2, #1
 80228f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	2201      	movs	r2, #1
 80228f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	2201      	movs	r2, #1
 8022900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022904:	687b      	ldr	r3, [r7, #4]
 8022906:	2201      	movs	r2, #1
 8022908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802290c:	687b      	ldr	r3, [r7, #4]
 802290e:	2201      	movs	r2, #1
 8022910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	2201      	movs	r2, #1
 8022918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 802291c:	687b      	ldr	r3, [r7, #4]
 802291e:	2201      	movs	r2, #1
 8022920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8022924:	687b      	ldr	r3, [r7, #4]
 8022926:	2201      	movs	r2, #1
 8022928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802292c:	2300      	movs	r3, #0
}
 802292e:	4618      	mov	r0, r3
 8022930:	3708      	adds	r7, #8
 8022932:	46bd      	mov	sp, r7
 8022934:	bd80      	pop	{r7, pc}

08022936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8022936:	b480      	push	{r7}
 8022938:	b083      	sub	sp, #12
 802293a:	af00      	add	r7, sp, #0
 802293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 802293e:	bf00      	nop
 8022940:	370c      	adds	r7, #12
 8022942:	46bd      	mov	sp, r7
 8022944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022948:	4770      	bx	lr
	...

0802294c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 802294c:	b580      	push	{r7, lr}
 802294e:	b084      	sub	sp, #16
 8022950:	af00      	add	r7, sp, #0
 8022952:	6078      	str	r0, [r7, #4]
 8022954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8022956:	683b      	ldr	r3, [r7, #0]
 8022958:	2b00      	cmp	r3, #0
 802295a:	d109      	bne.n	8022970 <HAL_TIM_PWM_Start+0x24>
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022962:	b2db      	uxtb	r3, r3
 8022964:	2b01      	cmp	r3, #1
 8022966:	bf14      	ite	ne
 8022968:	2301      	movne	r3, #1
 802296a:	2300      	moveq	r3, #0
 802296c:	b2db      	uxtb	r3, r3
 802296e:	e03c      	b.n	80229ea <HAL_TIM_PWM_Start+0x9e>
 8022970:	683b      	ldr	r3, [r7, #0]
 8022972:	2b04      	cmp	r3, #4
 8022974:	d109      	bne.n	802298a <HAL_TIM_PWM_Start+0x3e>
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 802297c:	b2db      	uxtb	r3, r3
 802297e:	2b01      	cmp	r3, #1
 8022980:	bf14      	ite	ne
 8022982:	2301      	movne	r3, #1
 8022984:	2300      	moveq	r3, #0
 8022986:	b2db      	uxtb	r3, r3
 8022988:	e02f      	b.n	80229ea <HAL_TIM_PWM_Start+0x9e>
 802298a:	683b      	ldr	r3, [r7, #0]
 802298c:	2b08      	cmp	r3, #8
 802298e:	d109      	bne.n	80229a4 <HAL_TIM_PWM_Start+0x58>
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8022996:	b2db      	uxtb	r3, r3
 8022998:	2b01      	cmp	r3, #1
 802299a:	bf14      	ite	ne
 802299c:	2301      	movne	r3, #1
 802299e:	2300      	moveq	r3, #0
 80229a0:	b2db      	uxtb	r3, r3
 80229a2:	e022      	b.n	80229ea <HAL_TIM_PWM_Start+0x9e>
 80229a4:	683b      	ldr	r3, [r7, #0]
 80229a6:	2b0c      	cmp	r3, #12
 80229a8:	d109      	bne.n	80229be <HAL_TIM_PWM_Start+0x72>
 80229aa:	687b      	ldr	r3, [r7, #4]
 80229ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80229b0:	b2db      	uxtb	r3, r3
 80229b2:	2b01      	cmp	r3, #1
 80229b4:	bf14      	ite	ne
 80229b6:	2301      	movne	r3, #1
 80229b8:	2300      	moveq	r3, #0
 80229ba:	b2db      	uxtb	r3, r3
 80229bc:	e015      	b.n	80229ea <HAL_TIM_PWM_Start+0x9e>
 80229be:	683b      	ldr	r3, [r7, #0]
 80229c0:	2b10      	cmp	r3, #16
 80229c2:	d109      	bne.n	80229d8 <HAL_TIM_PWM_Start+0x8c>
 80229c4:	687b      	ldr	r3, [r7, #4]
 80229c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80229ca:	b2db      	uxtb	r3, r3
 80229cc:	2b01      	cmp	r3, #1
 80229ce:	bf14      	ite	ne
 80229d0:	2301      	movne	r3, #1
 80229d2:	2300      	moveq	r3, #0
 80229d4:	b2db      	uxtb	r3, r3
 80229d6:	e008      	b.n	80229ea <HAL_TIM_PWM_Start+0x9e>
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80229de:	b2db      	uxtb	r3, r3
 80229e0:	2b01      	cmp	r3, #1
 80229e2:	bf14      	ite	ne
 80229e4:	2301      	movne	r3, #1
 80229e6:	2300      	moveq	r3, #0
 80229e8:	b2db      	uxtb	r3, r3
 80229ea:	2b00      	cmp	r3, #0
 80229ec:	d001      	beq.n	80229f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80229ee:	2301      	movs	r3, #1
 80229f0:	e0ab      	b.n	8022b4a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80229f2:	683b      	ldr	r3, [r7, #0]
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	d104      	bne.n	8022a02 <HAL_TIM_PWM_Start+0xb6>
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	2202      	movs	r2, #2
 80229fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8022a00:	e023      	b.n	8022a4a <HAL_TIM_PWM_Start+0xfe>
 8022a02:	683b      	ldr	r3, [r7, #0]
 8022a04:	2b04      	cmp	r3, #4
 8022a06:	d104      	bne.n	8022a12 <HAL_TIM_PWM_Start+0xc6>
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	2202      	movs	r2, #2
 8022a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8022a10:	e01b      	b.n	8022a4a <HAL_TIM_PWM_Start+0xfe>
 8022a12:	683b      	ldr	r3, [r7, #0]
 8022a14:	2b08      	cmp	r3, #8
 8022a16:	d104      	bne.n	8022a22 <HAL_TIM_PWM_Start+0xd6>
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	2202      	movs	r2, #2
 8022a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8022a20:	e013      	b.n	8022a4a <HAL_TIM_PWM_Start+0xfe>
 8022a22:	683b      	ldr	r3, [r7, #0]
 8022a24:	2b0c      	cmp	r3, #12
 8022a26:	d104      	bne.n	8022a32 <HAL_TIM_PWM_Start+0xe6>
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	2202      	movs	r2, #2
 8022a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8022a30:	e00b      	b.n	8022a4a <HAL_TIM_PWM_Start+0xfe>
 8022a32:	683b      	ldr	r3, [r7, #0]
 8022a34:	2b10      	cmp	r3, #16
 8022a36:	d104      	bne.n	8022a42 <HAL_TIM_PWM_Start+0xf6>
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	2202      	movs	r2, #2
 8022a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8022a40:	e003      	b.n	8022a4a <HAL_TIM_PWM_Start+0xfe>
 8022a42:	687b      	ldr	r3, [r7, #4]
 8022a44:	2202      	movs	r2, #2
 8022a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8022a4a:	687b      	ldr	r3, [r7, #4]
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	2201      	movs	r2, #1
 8022a50:	6839      	ldr	r1, [r7, #0]
 8022a52:	4618      	mov	r0, r3
 8022a54:	f001 fe3c 	bl	80246d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	4a3d      	ldr	r2, [pc, #244]	; (8022b54 <HAL_TIM_PWM_Start+0x208>)
 8022a5e:	4293      	cmp	r3, r2
 8022a60:	d013      	beq.n	8022a8a <HAL_TIM_PWM_Start+0x13e>
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	4a3c      	ldr	r2, [pc, #240]	; (8022b58 <HAL_TIM_PWM_Start+0x20c>)
 8022a68:	4293      	cmp	r3, r2
 8022a6a:	d00e      	beq.n	8022a8a <HAL_TIM_PWM_Start+0x13e>
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	681b      	ldr	r3, [r3, #0]
 8022a70:	4a3a      	ldr	r2, [pc, #232]	; (8022b5c <HAL_TIM_PWM_Start+0x210>)
 8022a72:	4293      	cmp	r3, r2
 8022a74:	d009      	beq.n	8022a8a <HAL_TIM_PWM_Start+0x13e>
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	4a39      	ldr	r2, [pc, #228]	; (8022b60 <HAL_TIM_PWM_Start+0x214>)
 8022a7c:	4293      	cmp	r3, r2
 8022a7e:	d004      	beq.n	8022a8a <HAL_TIM_PWM_Start+0x13e>
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	4a37      	ldr	r2, [pc, #220]	; (8022b64 <HAL_TIM_PWM_Start+0x218>)
 8022a86:	4293      	cmp	r3, r2
 8022a88:	d101      	bne.n	8022a8e <HAL_TIM_PWM_Start+0x142>
 8022a8a:	2301      	movs	r3, #1
 8022a8c:	e000      	b.n	8022a90 <HAL_TIM_PWM_Start+0x144>
 8022a8e:	2300      	movs	r3, #0
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	d007      	beq.n	8022aa4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	681b      	ldr	r3, [r3, #0]
 8022a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8022aa2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022aa4:	687b      	ldr	r3, [r7, #4]
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	4a2a      	ldr	r2, [pc, #168]	; (8022b54 <HAL_TIM_PWM_Start+0x208>)
 8022aaa:	4293      	cmp	r3, r2
 8022aac:	d02c      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022aae:	687b      	ldr	r3, [r7, #4]
 8022ab0:	681b      	ldr	r3, [r3, #0]
 8022ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022ab6:	d027      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	681b      	ldr	r3, [r3, #0]
 8022abc:	4a2a      	ldr	r2, [pc, #168]	; (8022b68 <HAL_TIM_PWM_Start+0x21c>)
 8022abe:	4293      	cmp	r3, r2
 8022ac0:	d022      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	681b      	ldr	r3, [r3, #0]
 8022ac6:	4a29      	ldr	r2, [pc, #164]	; (8022b6c <HAL_TIM_PWM_Start+0x220>)
 8022ac8:	4293      	cmp	r3, r2
 8022aca:	d01d      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	681b      	ldr	r3, [r3, #0]
 8022ad0:	4a27      	ldr	r2, [pc, #156]	; (8022b70 <HAL_TIM_PWM_Start+0x224>)
 8022ad2:	4293      	cmp	r3, r2
 8022ad4:	d018      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022ad6:	687b      	ldr	r3, [r7, #4]
 8022ad8:	681b      	ldr	r3, [r3, #0]
 8022ada:	4a1f      	ldr	r2, [pc, #124]	; (8022b58 <HAL_TIM_PWM_Start+0x20c>)
 8022adc:	4293      	cmp	r3, r2
 8022ade:	d013      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	681b      	ldr	r3, [r3, #0]
 8022ae4:	4a23      	ldr	r2, [pc, #140]	; (8022b74 <HAL_TIM_PWM_Start+0x228>)
 8022ae6:	4293      	cmp	r3, r2
 8022ae8:	d00e      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	681b      	ldr	r3, [r3, #0]
 8022aee:	4a1b      	ldr	r2, [pc, #108]	; (8022b5c <HAL_TIM_PWM_Start+0x210>)
 8022af0:	4293      	cmp	r3, r2
 8022af2:	d009      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	681b      	ldr	r3, [r3, #0]
 8022af8:	4a1f      	ldr	r2, [pc, #124]	; (8022b78 <HAL_TIM_PWM_Start+0x22c>)
 8022afa:	4293      	cmp	r3, r2
 8022afc:	d004      	beq.n	8022b08 <HAL_TIM_PWM_Start+0x1bc>
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	681b      	ldr	r3, [r3, #0]
 8022b02:	4a1e      	ldr	r2, [pc, #120]	; (8022b7c <HAL_TIM_PWM_Start+0x230>)
 8022b04:	4293      	cmp	r3, r2
 8022b06:	d115      	bne.n	8022b34 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	681b      	ldr	r3, [r3, #0]
 8022b0c:	689a      	ldr	r2, [r3, #8]
 8022b0e:	4b1c      	ldr	r3, [pc, #112]	; (8022b80 <HAL_TIM_PWM_Start+0x234>)
 8022b10:	4013      	ands	r3, r2
 8022b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8022b14:	68fb      	ldr	r3, [r7, #12]
 8022b16:	2b06      	cmp	r3, #6
 8022b18:	d015      	beq.n	8022b46 <HAL_TIM_PWM_Start+0x1fa>
 8022b1a:	68fb      	ldr	r3, [r7, #12]
 8022b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022b20:	d011      	beq.n	8022b46 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	681b      	ldr	r3, [r3, #0]
 8022b26:	681a      	ldr	r2, [r3, #0]
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	681b      	ldr	r3, [r3, #0]
 8022b2c:	f042 0201 	orr.w	r2, r2, #1
 8022b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8022b32:	e008      	b.n	8022b46 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	681b      	ldr	r3, [r3, #0]
 8022b38:	681a      	ldr	r2, [r3, #0]
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	f042 0201 	orr.w	r2, r2, #1
 8022b42:	601a      	str	r2, [r3, #0]
 8022b44:	e000      	b.n	8022b48 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8022b46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8022b48:	2300      	movs	r3, #0
}
 8022b4a:	4618      	mov	r0, r3
 8022b4c:	3710      	adds	r7, #16
 8022b4e:	46bd      	mov	sp, r7
 8022b50:	bd80      	pop	{r7, pc}
 8022b52:	bf00      	nop
 8022b54:	40010000 	.word	0x40010000
 8022b58:	40010400 	.word	0x40010400
 8022b5c:	40014000 	.word	0x40014000
 8022b60:	40014400 	.word	0x40014400
 8022b64:	40014800 	.word	0x40014800
 8022b68:	40000400 	.word	0x40000400
 8022b6c:	40000800 	.word	0x40000800
 8022b70:	40000c00 	.word	0x40000c00
 8022b74:	40001800 	.word	0x40001800
 8022b78:	4000e000 	.word	0x4000e000
 8022b7c:	4000e400 	.word	0x4000e400
 8022b80:	00010007 	.word	0x00010007

08022b84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8022b84:	b580      	push	{r7, lr}
 8022b86:	b082      	sub	sp, #8
 8022b88:	af00      	add	r7, sp, #0
 8022b8a:	6078      	str	r0, [r7, #4]
 8022b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	2200      	movs	r2, #0
 8022b94:	6839      	ldr	r1, [r7, #0]
 8022b96:	4618      	mov	r0, r3
 8022b98:	f001 fd9a 	bl	80246d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	681b      	ldr	r3, [r3, #0]
 8022ba0:	4a3e      	ldr	r2, [pc, #248]	; (8022c9c <HAL_TIM_PWM_Stop+0x118>)
 8022ba2:	4293      	cmp	r3, r2
 8022ba4:	d013      	beq.n	8022bce <HAL_TIM_PWM_Stop+0x4a>
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	681b      	ldr	r3, [r3, #0]
 8022baa:	4a3d      	ldr	r2, [pc, #244]	; (8022ca0 <HAL_TIM_PWM_Stop+0x11c>)
 8022bac:	4293      	cmp	r3, r2
 8022bae:	d00e      	beq.n	8022bce <HAL_TIM_PWM_Stop+0x4a>
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	681b      	ldr	r3, [r3, #0]
 8022bb4:	4a3b      	ldr	r2, [pc, #236]	; (8022ca4 <HAL_TIM_PWM_Stop+0x120>)
 8022bb6:	4293      	cmp	r3, r2
 8022bb8:	d009      	beq.n	8022bce <HAL_TIM_PWM_Stop+0x4a>
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	681b      	ldr	r3, [r3, #0]
 8022bbe:	4a3a      	ldr	r2, [pc, #232]	; (8022ca8 <HAL_TIM_PWM_Stop+0x124>)
 8022bc0:	4293      	cmp	r3, r2
 8022bc2:	d004      	beq.n	8022bce <HAL_TIM_PWM_Stop+0x4a>
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	4a38      	ldr	r2, [pc, #224]	; (8022cac <HAL_TIM_PWM_Stop+0x128>)
 8022bca:	4293      	cmp	r3, r2
 8022bcc:	d101      	bne.n	8022bd2 <HAL_TIM_PWM_Stop+0x4e>
 8022bce:	2301      	movs	r3, #1
 8022bd0:	e000      	b.n	8022bd4 <HAL_TIM_PWM_Stop+0x50>
 8022bd2:	2300      	movs	r3, #0
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d017      	beq.n	8022c08 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8022bd8:	687b      	ldr	r3, [r7, #4]
 8022bda:	681b      	ldr	r3, [r3, #0]
 8022bdc:	6a1a      	ldr	r2, [r3, #32]
 8022bde:	f241 1311 	movw	r3, #4369	; 0x1111
 8022be2:	4013      	ands	r3, r2
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	d10f      	bne.n	8022c08 <HAL_TIM_PWM_Stop+0x84>
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	681b      	ldr	r3, [r3, #0]
 8022bec:	6a1a      	ldr	r2, [r3, #32]
 8022bee:	f240 4344 	movw	r3, #1092	; 0x444
 8022bf2:	4013      	ands	r3, r2
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	d107      	bne.n	8022c08 <HAL_TIM_PWM_Stop+0x84>
 8022bf8:	687b      	ldr	r3, [r7, #4]
 8022bfa:	681b      	ldr	r3, [r3, #0]
 8022bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	681b      	ldr	r3, [r3, #0]
 8022c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8022c06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	681b      	ldr	r3, [r3, #0]
 8022c0c:	6a1a      	ldr	r2, [r3, #32]
 8022c0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8022c12:	4013      	ands	r3, r2
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d10f      	bne.n	8022c38 <HAL_TIM_PWM_Stop+0xb4>
 8022c18:	687b      	ldr	r3, [r7, #4]
 8022c1a:	681b      	ldr	r3, [r3, #0]
 8022c1c:	6a1a      	ldr	r2, [r3, #32]
 8022c1e:	f240 4344 	movw	r3, #1092	; 0x444
 8022c22:	4013      	ands	r3, r2
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	d107      	bne.n	8022c38 <HAL_TIM_PWM_Stop+0xb4>
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	681a      	ldr	r2, [r3, #0]
 8022c2e:	687b      	ldr	r3, [r7, #4]
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	f022 0201 	bic.w	r2, r2, #1
 8022c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8022c38:	683b      	ldr	r3, [r7, #0]
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	d104      	bne.n	8022c48 <HAL_TIM_PWM_Stop+0xc4>
 8022c3e:	687b      	ldr	r3, [r7, #4]
 8022c40:	2201      	movs	r2, #1
 8022c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8022c46:	e023      	b.n	8022c90 <HAL_TIM_PWM_Stop+0x10c>
 8022c48:	683b      	ldr	r3, [r7, #0]
 8022c4a:	2b04      	cmp	r3, #4
 8022c4c:	d104      	bne.n	8022c58 <HAL_TIM_PWM_Stop+0xd4>
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	2201      	movs	r2, #1
 8022c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8022c56:	e01b      	b.n	8022c90 <HAL_TIM_PWM_Stop+0x10c>
 8022c58:	683b      	ldr	r3, [r7, #0]
 8022c5a:	2b08      	cmp	r3, #8
 8022c5c:	d104      	bne.n	8022c68 <HAL_TIM_PWM_Stop+0xe4>
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	2201      	movs	r2, #1
 8022c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8022c66:	e013      	b.n	8022c90 <HAL_TIM_PWM_Stop+0x10c>
 8022c68:	683b      	ldr	r3, [r7, #0]
 8022c6a:	2b0c      	cmp	r3, #12
 8022c6c:	d104      	bne.n	8022c78 <HAL_TIM_PWM_Stop+0xf4>
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	2201      	movs	r2, #1
 8022c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8022c76:	e00b      	b.n	8022c90 <HAL_TIM_PWM_Stop+0x10c>
 8022c78:	683b      	ldr	r3, [r7, #0]
 8022c7a:	2b10      	cmp	r3, #16
 8022c7c:	d104      	bne.n	8022c88 <HAL_TIM_PWM_Stop+0x104>
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	2201      	movs	r2, #1
 8022c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8022c86:	e003      	b.n	8022c90 <HAL_TIM_PWM_Stop+0x10c>
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	2201      	movs	r2, #1
 8022c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8022c90:	2300      	movs	r3, #0
}
 8022c92:	4618      	mov	r0, r3
 8022c94:	3708      	adds	r7, #8
 8022c96:	46bd      	mov	sp, r7
 8022c98:	bd80      	pop	{r7, pc}
 8022c9a:	bf00      	nop
 8022c9c:	40010000 	.word	0x40010000
 8022ca0:	40010400 	.word	0x40010400
 8022ca4:	40014000 	.word	0x40014000
 8022ca8:	40014400 	.word	0x40014400
 8022cac:	40014800 	.word	0x40014800

08022cb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8022cb0:	b580      	push	{r7, lr}
 8022cb2:	b082      	sub	sp, #8
 8022cb4:	af00      	add	r7, sp, #0
 8022cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	d101      	bne.n	8022cc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8022cbe:	2301      	movs	r3, #1
 8022cc0:	e049      	b.n	8022d56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022cc8:	b2db      	uxtb	r3, r3
 8022cca:	2b00      	cmp	r3, #0
 8022ccc:	d106      	bne.n	8022cdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	2200      	movs	r2, #0
 8022cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8022cd6:	6878      	ldr	r0, [r7, #4]
 8022cd8:	f000 f89d 	bl	8022e16 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	2202      	movs	r2, #2
 8022ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	681a      	ldr	r2, [r3, #0]
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	3304      	adds	r3, #4
 8022cec:	4619      	mov	r1, r3
 8022cee:	4610      	mov	r0, r2
 8022cf0:	f000 ff9e 	bl	8023c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	2201      	movs	r2, #1
 8022cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	2201      	movs	r2, #1
 8022d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8022d04:	687b      	ldr	r3, [r7, #4]
 8022d06:	2201      	movs	r2, #1
 8022d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8022d0c:	687b      	ldr	r3, [r7, #4]
 8022d0e:	2201      	movs	r2, #1
 8022d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	2201      	movs	r2, #1
 8022d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8022d1c:	687b      	ldr	r3, [r7, #4]
 8022d1e:	2201      	movs	r2, #1
 8022d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	2201      	movs	r2, #1
 8022d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	2201      	movs	r2, #1
 8022d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8022d34:	687b      	ldr	r3, [r7, #4]
 8022d36:	2201      	movs	r2, #1
 8022d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022d3c:	687b      	ldr	r3, [r7, #4]
 8022d3e:	2201      	movs	r2, #1
 8022d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	2201      	movs	r2, #1
 8022d48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	2201      	movs	r2, #1
 8022d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8022d54:	2300      	movs	r3, #0
}
 8022d56:	4618      	mov	r0, r3
 8022d58:	3708      	adds	r7, #8
 8022d5a:	46bd      	mov	sp, r7
 8022d5c:	bd80      	pop	{r7, pc}

08022d5e <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8022d5e:	b580      	push	{r7, lr}
 8022d60:	b082      	sub	sp, #8
 8022d62:	af00      	add	r7, sp, #0
 8022d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8022d66:	687b      	ldr	r3, [r7, #4]
 8022d68:	2202      	movs	r2, #2
 8022d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	681b      	ldr	r3, [r3, #0]
 8022d72:	6a1a      	ldr	r2, [r3, #32]
 8022d74:	f241 1311 	movw	r3, #4369	; 0x1111
 8022d78:	4013      	ands	r3, r2
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d10f      	bne.n	8022d9e <HAL_TIM_IC_DeInit+0x40>
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	6a1a      	ldr	r2, [r3, #32]
 8022d84:	f240 4344 	movw	r3, #1092	; 0x444
 8022d88:	4013      	ands	r3, r2
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d107      	bne.n	8022d9e <HAL_TIM_IC_DeInit+0x40>
 8022d8e:	687b      	ldr	r3, [r7, #4]
 8022d90:	681b      	ldr	r3, [r3, #0]
 8022d92:	681a      	ldr	r2, [r3, #0]
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	681b      	ldr	r3, [r3, #0]
 8022d98:	f022 0201 	bic.w	r2, r2, #1
 8022d9c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8022d9e:	6878      	ldr	r0, [r7, #4]
 8022da0:	f000 f843 	bl	8022e2a <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8022da4:	687b      	ldr	r3, [r7, #4]
 8022da6:	2200      	movs	r2, #0
 8022da8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	2200      	movs	r2, #0
 8022db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	2200      	movs	r2, #0
 8022db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8022dbc:	687b      	ldr	r3, [r7, #4]
 8022dbe:	2200      	movs	r2, #0
 8022dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	2200      	movs	r2, #0
 8022dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	2200      	movs	r2, #0
 8022dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8022dd4:	687b      	ldr	r3, [r7, #4]
 8022dd6:	2200      	movs	r2, #0
 8022dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8022ddc:	687b      	ldr	r3, [r7, #4]
 8022dde:	2200      	movs	r2, #0
 8022de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	2200      	movs	r2, #0
 8022de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	2200      	movs	r2, #0
 8022df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	2200      	movs	r2, #0
 8022df8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8022dfc:	687b      	ldr	r3, [r7, #4]
 8022dfe:	2200      	movs	r2, #0
 8022e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8022e04:	687b      	ldr	r3, [r7, #4]
 8022e06:	2200      	movs	r2, #0
 8022e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022e0c:	2300      	movs	r3, #0
}
 8022e0e:	4618      	mov	r0, r3
 8022e10:	3708      	adds	r7, #8
 8022e12:	46bd      	mov	sp, r7
 8022e14:	bd80      	pop	{r7, pc}

08022e16 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8022e16:	b480      	push	{r7}
 8022e18:	b083      	sub	sp, #12
 8022e1a:	af00      	add	r7, sp, #0
 8022e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8022e1e:	bf00      	nop
 8022e20:	370c      	adds	r7, #12
 8022e22:	46bd      	mov	sp, r7
 8022e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e28:	4770      	bx	lr

08022e2a <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8022e2a:	b480      	push	{r7}
 8022e2c:	b083      	sub	sp, #12
 8022e2e:	af00      	add	r7, sp, #0
 8022e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8022e32:	bf00      	nop
 8022e34:	370c      	adds	r7, #12
 8022e36:	46bd      	mov	sp, r7
 8022e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e3c:	4770      	bx	lr
	...

08022e40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8022e40:	b580      	push	{r7, lr}
 8022e42:	b084      	sub	sp, #16
 8022e44:	af00      	add	r7, sp, #0
 8022e46:	6078      	str	r0, [r7, #4]
 8022e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8022e4a:	2300      	movs	r3, #0
 8022e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8022e4e:	683b      	ldr	r3, [r7, #0]
 8022e50:	2b00      	cmp	r3, #0
 8022e52:	d104      	bne.n	8022e5e <HAL_TIM_IC_Start_IT+0x1e>
 8022e54:	687b      	ldr	r3, [r7, #4]
 8022e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022e5a:	b2db      	uxtb	r3, r3
 8022e5c:	e023      	b.n	8022ea6 <HAL_TIM_IC_Start_IT+0x66>
 8022e5e:	683b      	ldr	r3, [r7, #0]
 8022e60:	2b04      	cmp	r3, #4
 8022e62:	d104      	bne.n	8022e6e <HAL_TIM_IC_Start_IT+0x2e>
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8022e6a:	b2db      	uxtb	r3, r3
 8022e6c:	e01b      	b.n	8022ea6 <HAL_TIM_IC_Start_IT+0x66>
 8022e6e:	683b      	ldr	r3, [r7, #0]
 8022e70:	2b08      	cmp	r3, #8
 8022e72:	d104      	bne.n	8022e7e <HAL_TIM_IC_Start_IT+0x3e>
 8022e74:	687b      	ldr	r3, [r7, #4]
 8022e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8022e7a:	b2db      	uxtb	r3, r3
 8022e7c:	e013      	b.n	8022ea6 <HAL_TIM_IC_Start_IT+0x66>
 8022e7e:	683b      	ldr	r3, [r7, #0]
 8022e80:	2b0c      	cmp	r3, #12
 8022e82:	d104      	bne.n	8022e8e <HAL_TIM_IC_Start_IT+0x4e>
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8022e8a:	b2db      	uxtb	r3, r3
 8022e8c:	e00b      	b.n	8022ea6 <HAL_TIM_IC_Start_IT+0x66>
 8022e8e:	683b      	ldr	r3, [r7, #0]
 8022e90:	2b10      	cmp	r3, #16
 8022e92:	d104      	bne.n	8022e9e <HAL_TIM_IC_Start_IT+0x5e>
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022e9a:	b2db      	uxtb	r3, r3
 8022e9c:	e003      	b.n	8022ea6 <HAL_TIM_IC_Start_IT+0x66>
 8022e9e:	687b      	ldr	r3, [r7, #4]
 8022ea0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8022ea4:	b2db      	uxtb	r3, r3
 8022ea6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8022ea8:	683b      	ldr	r3, [r7, #0]
 8022eaa:	2b00      	cmp	r3, #0
 8022eac:	d104      	bne.n	8022eb8 <HAL_TIM_IC_Start_IT+0x78>
 8022eae:	687b      	ldr	r3, [r7, #4]
 8022eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8022eb4:	b2db      	uxtb	r3, r3
 8022eb6:	e013      	b.n	8022ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8022eb8:	683b      	ldr	r3, [r7, #0]
 8022eba:	2b04      	cmp	r3, #4
 8022ebc:	d104      	bne.n	8022ec8 <HAL_TIM_IC_Start_IT+0x88>
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8022ec4:	b2db      	uxtb	r3, r3
 8022ec6:	e00b      	b.n	8022ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8022ec8:	683b      	ldr	r3, [r7, #0]
 8022eca:	2b08      	cmp	r3, #8
 8022ecc:	d104      	bne.n	8022ed8 <HAL_TIM_IC_Start_IT+0x98>
 8022ece:	687b      	ldr	r3, [r7, #4]
 8022ed0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8022ed4:	b2db      	uxtb	r3, r3
 8022ed6:	e003      	b.n	8022ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8022ed8:	687b      	ldr	r3, [r7, #4]
 8022eda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8022ede:	b2db      	uxtb	r3, r3
 8022ee0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8022ee2:	7bbb      	ldrb	r3, [r7, #14]
 8022ee4:	2b01      	cmp	r3, #1
 8022ee6:	d102      	bne.n	8022eee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8022ee8:	7b7b      	ldrb	r3, [r7, #13]
 8022eea:	2b01      	cmp	r3, #1
 8022eec:	d001      	beq.n	8022ef2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8022eee:	2301      	movs	r3, #1
 8022ef0:	e0ec      	b.n	80230cc <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8022ef2:	683b      	ldr	r3, [r7, #0]
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	d104      	bne.n	8022f02 <HAL_TIM_IC_Start_IT+0xc2>
 8022ef8:	687b      	ldr	r3, [r7, #4]
 8022efa:	2202      	movs	r2, #2
 8022efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8022f00:	e023      	b.n	8022f4a <HAL_TIM_IC_Start_IT+0x10a>
 8022f02:	683b      	ldr	r3, [r7, #0]
 8022f04:	2b04      	cmp	r3, #4
 8022f06:	d104      	bne.n	8022f12 <HAL_TIM_IC_Start_IT+0xd2>
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	2202      	movs	r2, #2
 8022f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8022f10:	e01b      	b.n	8022f4a <HAL_TIM_IC_Start_IT+0x10a>
 8022f12:	683b      	ldr	r3, [r7, #0]
 8022f14:	2b08      	cmp	r3, #8
 8022f16:	d104      	bne.n	8022f22 <HAL_TIM_IC_Start_IT+0xe2>
 8022f18:	687b      	ldr	r3, [r7, #4]
 8022f1a:	2202      	movs	r2, #2
 8022f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8022f20:	e013      	b.n	8022f4a <HAL_TIM_IC_Start_IT+0x10a>
 8022f22:	683b      	ldr	r3, [r7, #0]
 8022f24:	2b0c      	cmp	r3, #12
 8022f26:	d104      	bne.n	8022f32 <HAL_TIM_IC_Start_IT+0xf2>
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	2202      	movs	r2, #2
 8022f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8022f30:	e00b      	b.n	8022f4a <HAL_TIM_IC_Start_IT+0x10a>
 8022f32:	683b      	ldr	r3, [r7, #0]
 8022f34:	2b10      	cmp	r3, #16
 8022f36:	d104      	bne.n	8022f42 <HAL_TIM_IC_Start_IT+0x102>
 8022f38:	687b      	ldr	r3, [r7, #4]
 8022f3a:	2202      	movs	r2, #2
 8022f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8022f40:	e003      	b.n	8022f4a <HAL_TIM_IC_Start_IT+0x10a>
 8022f42:	687b      	ldr	r3, [r7, #4]
 8022f44:	2202      	movs	r2, #2
 8022f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8022f4a:	683b      	ldr	r3, [r7, #0]
 8022f4c:	2b00      	cmp	r3, #0
 8022f4e:	d104      	bne.n	8022f5a <HAL_TIM_IC_Start_IT+0x11a>
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	2202      	movs	r2, #2
 8022f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8022f58:	e013      	b.n	8022f82 <HAL_TIM_IC_Start_IT+0x142>
 8022f5a:	683b      	ldr	r3, [r7, #0]
 8022f5c:	2b04      	cmp	r3, #4
 8022f5e:	d104      	bne.n	8022f6a <HAL_TIM_IC_Start_IT+0x12a>
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	2202      	movs	r2, #2
 8022f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8022f68:	e00b      	b.n	8022f82 <HAL_TIM_IC_Start_IT+0x142>
 8022f6a:	683b      	ldr	r3, [r7, #0]
 8022f6c:	2b08      	cmp	r3, #8
 8022f6e:	d104      	bne.n	8022f7a <HAL_TIM_IC_Start_IT+0x13a>
 8022f70:	687b      	ldr	r3, [r7, #4]
 8022f72:	2202      	movs	r2, #2
 8022f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8022f78:	e003      	b.n	8022f82 <HAL_TIM_IC_Start_IT+0x142>
 8022f7a:	687b      	ldr	r3, [r7, #4]
 8022f7c:	2202      	movs	r2, #2
 8022f7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8022f82:	683b      	ldr	r3, [r7, #0]
 8022f84:	2b0c      	cmp	r3, #12
 8022f86:	d841      	bhi.n	802300c <HAL_TIM_IC_Start_IT+0x1cc>
 8022f88:	a201      	add	r2, pc, #4	; (adr r2, 8022f90 <HAL_TIM_IC_Start_IT+0x150>)
 8022f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f8e:	bf00      	nop
 8022f90:	08022fc5 	.word	0x08022fc5
 8022f94:	0802300d 	.word	0x0802300d
 8022f98:	0802300d 	.word	0x0802300d
 8022f9c:	0802300d 	.word	0x0802300d
 8022fa0:	08022fd7 	.word	0x08022fd7
 8022fa4:	0802300d 	.word	0x0802300d
 8022fa8:	0802300d 	.word	0x0802300d
 8022fac:	0802300d 	.word	0x0802300d
 8022fb0:	08022fe9 	.word	0x08022fe9
 8022fb4:	0802300d 	.word	0x0802300d
 8022fb8:	0802300d 	.word	0x0802300d
 8022fbc:	0802300d 	.word	0x0802300d
 8022fc0:	08022ffb 	.word	0x08022ffb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8022fc4:	687b      	ldr	r3, [r7, #4]
 8022fc6:	681b      	ldr	r3, [r3, #0]
 8022fc8:	68da      	ldr	r2, [r3, #12]
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	f042 0202 	orr.w	r2, r2, #2
 8022fd2:	60da      	str	r2, [r3, #12]
      break;
 8022fd4:	e01d      	b.n	8023012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	681b      	ldr	r3, [r3, #0]
 8022fda:	68da      	ldr	r2, [r3, #12]
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	681b      	ldr	r3, [r3, #0]
 8022fe0:	f042 0204 	orr.w	r2, r2, #4
 8022fe4:	60da      	str	r2, [r3, #12]
      break;
 8022fe6:	e014      	b.n	8023012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	681b      	ldr	r3, [r3, #0]
 8022fec:	68da      	ldr	r2, [r3, #12]
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	f042 0208 	orr.w	r2, r2, #8
 8022ff6:	60da      	str	r2, [r3, #12]
      break;
 8022ff8:	e00b      	b.n	8023012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	681b      	ldr	r3, [r3, #0]
 8022ffe:	68da      	ldr	r2, [r3, #12]
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	681b      	ldr	r3, [r3, #0]
 8023004:	f042 0210 	orr.w	r2, r2, #16
 8023008:	60da      	str	r2, [r3, #12]
      break;
 802300a:	e002      	b.n	8023012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 802300c:	2301      	movs	r3, #1
 802300e:	73fb      	strb	r3, [r7, #15]
      break;
 8023010:	bf00      	nop
  }

  if (status == HAL_OK)
 8023012:	7bfb      	ldrb	r3, [r7, #15]
 8023014:	2b00      	cmp	r3, #0
 8023016:	d158      	bne.n	80230ca <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	681b      	ldr	r3, [r3, #0]
 802301c:	2201      	movs	r2, #1
 802301e:	6839      	ldr	r1, [r7, #0]
 8023020:	4618      	mov	r0, r3
 8023022:	f001 fb55 	bl	80246d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8023026:	687b      	ldr	r3, [r7, #4]
 8023028:	681b      	ldr	r3, [r3, #0]
 802302a:	4a2a      	ldr	r2, [pc, #168]	; (80230d4 <HAL_TIM_IC_Start_IT+0x294>)
 802302c:	4293      	cmp	r3, r2
 802302e:	d02c      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	681b      	ldr	r3, [r3, #0]
 8023034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023038:	d027      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	681b      	ldr	r3, [r3, #0]
 802303e:	4a26      	ldr	r2, [pc, #152]	; (80230d8 <HAL_TIM_IC_Start_IT+0x298>)
 8023040:	4293      	cmp	r3, r2
 8023042:	d022      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 8023044:	687b      	ldr	r3, [r7, #4]
 8023046:	681b      	ldr	r3, [r3, #0]
 8023048:	4a24      	ldr	r2, [pc, #144]	; (80230dc <HAL_TIM_IC_Start_IT+0x29c>)
 802304a:	4293      	cmp	r3, r2
 802304c:	d01d      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 802304e:	687b      	ldr	r3, [r7, #4]
 8023050:	681b      	ldr	r3, [r3, #0]
 8023052:	4a23      	ldr	r2, [pc, #140]	; (80230e0 <HAL_TIM_IC_Start_IT+0x2a0>)
 8023054:	4293      	cmp	r3, r2
 8023056:	d018      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	681b      	ldr	r3, [r3, #0]
 802305c:	4a21      	ldr	r2, [pc, #132]	; (80230e4 <HAL_TIM_IC_Start_IT+0x2a4>)
 802305e:	4293      	cmp	r3, r2
 8023060:	d013      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	681b      	ldr	r3, [r3, #0]
 8023066:	4a20      	ldr	r2, [pc, #128]	; (80230e8 <HAL_TIM_IC_Start_IT+0x2a8>)
 8023068:	4293      	cmp	r3, r2
 802306a:	d00e      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 802306c:	687b      	ldr	r3, [r7, #4]
 802306e:	681b      	ldr	r3, [r3, #0]
 8023070:	4a1e      	ldr	r2, [pc, #120]	; (80230ec <HAL_TIM_IC_Start_IT+0x2ac>)
 8023072:	4293      	cmp	r3, r2
 8023074:	d009      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 8023076:	687b      	ldr	r3, [r7, #4]
 8023078:	681b      	ldr	r3, [r3, #0]
 802307a:	4a1d      	ldr	r2, [pc, #116]	; (80230f0 <HAL_TIM_IC_Start_IT+0x2b0>)
 802307c:	4293      	cmp	r3, r2
 802307e:	d004      	beq.n	802308a <HAL_TIM_IC_Start_IT+0x24a>
 8023080:	687b      	ldr	r3, [r7, #4]
 8023082:	681b      	ldr	r3, [r3, #0]
 8023084:	4a1b      	ldr	r2, [pc, #108]	; (80230f4 <HAL_TIM_IC_Start_IT+0x2b4>)
 8023086:	4293      	cmp	r3, r2
 8023088:	d115      	bne.n	80230b6 <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	681b      	ldr	r3, [r3, #0]
 802308e:	689a      	ldr	r2, [r3, #8]
 8023090:	4b19      	ldr	r3, [pc, #100]	; (80230f8 <HAL_TIM_IC_Start_IT+0x2b8>)
 8023092:	4013      	ands	r3, r2
 8023094:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8023096:	68bb      	ldr	r3, [r7, #8]
 8023098:	2b06      	cmp	r3, #6
 802309a:	d015      	beq.n	80230c8 <HAL_TIM_IC_Start_IT+0x288>
 802309c:	68bb      	ldr	r3, [r7, #8]
 802309e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80230a2:	d011      	beq.n	80230c8 <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	681b      	ldr	r3, [r3, #0]
 80230a8:	681a      	ldr	r2, [r3, #0]
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	f042 0201 	orr.w	r2, r2, #1
 80230b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80230b4:	e008      	b.n	80230c8 <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	681b      	ldr	r3, [r3, #0]
 80230ba:	681a      	ldr	r2, [r3, #0]
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	681b      	ldr	r3, [r3, #0]
 80230c0:	f042 0201 	orr.w	r2, r2, #1
 80230c4:	601a      	str	r2, [r3, #0]
 80230c6:	e000      	b.n	80230ca <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80230c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80230ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80230cc:	4618      	mov	r0, r3
 80230ce:	3710      	adds	r7, #16
 80230d0:	46bd      	mov	sp, r7
 80230d2:	bd80      	pop	{r7, pc}
 80230d4:	40010000 	.word	0x40010000
 80230d8:	40000400 	.word	0x40000400
 80230dc:	40000800 	.word	0x40000800
 80230e0:	40000c00 	.word	0x40000c00
 80230e4:	40010400 	.word	0x40010400
 80230e8:	40001800 	.word	0x40001800
 80230ec:	40014000 	.word	0x40014000
 80230f0:	4000e000 	.word	0x4000e000
 80230f4:	4000e400 	.word	0x4000e400
 80230f8:	00010007 	.word	0x00010007

080230fc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80230fc:	b580      	push	{r7, lr}
 80230fe:	b084      	sub	sp, #16
 8023100:	af00      	add	r7, sp, #0
 8023102:	6078      	str	r0, [r7, #4]
 8023104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8023106:	2300      	movs	r3, #0
 8023108:	73fb      	strb	r3, [r7, #15]
 802310a:	683b      	ldr	r3, [r7, #0]
 802310c:	2b0c      	cmp	r3, #12
 802310e:	d841      	bhi.n	8023194 <HAL_TIM_IC_Stop_IT+0x98>
 8023110:	a201      	add	r2, pc, #4	; (adr r2, 8023118 <HAL_TIM_IC_Stop_IT+0x1c>)
 8023112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023116:	bf00      	nop
 8023118:	0802314d 	.word	0x0802314d
 802311c:	08023195 	.word	0x08023195
 8023120:	08023195 	.word	0x08023195
 8023124:	08023195 	.word	0x08023195
 8023128:	0802315f 	.word	0x0802315f
 802312c:	08023195 	.word	0x08023195
 8023130:	08023195 	.word	0x08023195
 8023134:	08023195 	.word	0x08023195
 8023138:	08023171 	.word	0x08023171
 802313c:	08023195 	.word	0x08023195
 8023140:	08023195 	.word	0x08023195
 8023144:	08023195 	.word	0x08023195
 8023148:	08023183 	.word	0x08023183
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 802314c:	687b      	ldr	r3, [r7, #4]
 802314e:	681b      	ldr	r3, [r3, #0]
 8023150:	68da      	ldr	r2, [r3, #12]
 8023152:	687b      	ldr	r3, [r7, #4]
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	f022 0202 	bic.w	r2, r2, #2
 802315a:	60da      	str	r2, [r3, #12]
      break;
 802315c:	e01d      	b.n	802319a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	681b      	ldr	r3, [r3, #0]
 8023162:	68da      	ldr	r2, [r3, #12]
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	681b      	ldr	r3, [r3, #0]
 8023168:	f022 0204 	bic.w	r2, r2, #4
 802316c:	60da      	str	r2, [r3, #12]
      break;
 802316e:	e014      	b.n	802319a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	681b      	ldr	r3, [r3, #0]
 8023174:	68da      	ldr	r2, [r3, #12]
 8023176:	687b      	ldr	r3, [r7, #4]
 8023178:	681b      	ldr	r3, [r3, #0]
 802317a:	f022 0208 	bic.w	r2, r2, #8
 802317e:	60da      	str	r2, [r3, #12]
      break;
 8023180:	e00b      	b.n	802319a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8023182:	687b      	ldr	r3, [r7, #4]
 8023184:	681b      	ldr	r3, [r3, #0]
 8023186:	68da      	ldr	r2, [r3, #12]
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	681b      	ldr	r3, [r3, #0]
 802318c:	f022 0210 	bic.w	r2, r2, #16
 8023190:	60da      	str	r2, [r3, #12]
      break;
 8023192:	e002      	b.n	802319a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8023194:	2301      	movs	r3, #1
 8023196:	73fb      	strb	r3, [r7, #15]
      break;
 8023198:	bf00      	nop
  }

  if (status == HAL_OK)
 802319a:	7bfb      	ldrb	r3, [r7, #15]
 802319c:	2b00      	cmp	r3, #0
 802319e:	d166      	bne.n	802326e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	681b      	ldr	r3, [r3, #0]
 80231a4:	2200      	movs	r2, #0
 80231a6:	6839      	ldr	r1, [r7, #0]
 80231a8:	4618      	mov	r0, r3
 80231aa:	f001 fa91 	bl	80246d0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80231ae:	687b      	ldr	r3, [r7, #4]
 80231b0:	681b      	ldr	r3, [r3, #0]
 80231b2:	6a1a      	ldr	r2, [r3, #32]
 80231b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80231b8:	4013      	ands	r3, r2
 80231ba:	2b00      	cmp	r3, #0
 80231bc:	d10f      	bne.n	80231de <HAL_TIM_IC_Stop_IT+0xe2>
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	681b      	ldr	r3, [r3, #0]
 80231c2:	6a1a      	ldr	r2, [r3, #32]
 80231c4:	f240 4344 	movw	r3, #1092	; 0x444
 80231c8:	4013      	ands	r3, r2
 80231ca:	2b00      	cmp	r3, #0
 80231cc:	d107      	bne.n	80231de <HAL_TIM_IC_Stop_IT+0xe2>
 80231ce:	687b      	ldr	r3, [r7, #4]
 80231d0:	681b      	ldr	r3, [r3, #0]
 80231d2:	681a      	ldr	r2, [r3, #0]
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	681b      	ldr	r3, [r3, #0]
 80231d8:	f022 0201 	bic.w	r2, r2, #1
 80231dc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80231de:	683b      	ldr	r3, [r7, #0]
 80231e0:	2b00      	cmp	r3, #0
 80231e2:	d104      	bne.n	80231ee <HAL_TIM_IC_Stop_IT+0xf2>
 80231e4:	687b      	ldr	r3, [r7, #4]
 80231e6:	2201      	movs	r2, #1
 80231e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80231ec:	e023      	b.n	8023236 <HAL_TIM_IC_Stop_IT+0x13a>
 80231ee:	683b      	ldr	r3, [r7, #0]
 80231f0:	2b04      	cmp	r3, #4
 80231f2:	d104      	bne.n	80231fe <HAL_TIM_IC_Stop_IT+0x102>
 80231f4:	687b      	ldr	r3, [r7, #4]
 80231f6:	2201      	movs	r2, #1
 80231f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80231fc:	e01b      	b.n	8023236 <HAL_TIM_IC_Stop_IT+0x13a>
 80231fe:	683b      	ldr	r3, [r7, #0]
 8023200:	2b08      	cmp	r3, #8
 8023202:	d104      	bne.n	802320e <HAL_TIM_IC_Stop_IT+0x112>
 8023204:	687b      	ldr	r3, [r7, #4]
 8023206:	2201      	movs	r2, #1
 8023208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802320c:	e013      	b.n	8023236 <HAL_TIM_IC_Stop_IT+0x13a>
 802320e:	683b      	ldr	r3, [r7, #0]
 8023210:	2b0c      	cmp	r3, #12
 8023212:	d104      	bne.n	802321e <HAL_TIM_IC_Stop_IT+0x122>
 8023214:	687b      	ldr	r3, [r7, #4]
 8023216:	2201      	movs	r2, #1
 8023218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802321c:	e00b      	b.n	8023236 <HAL_TIM_IC_Stop_IT+0x13a>
 802321e:	683b      	ldr	r3, [r7, #0]
 8023220:	2b10      	cmp	r3, #16
 8023222:	d104      	bne.n	802322e <HAL_TIM_IC_Stop_IT+0x132>
 8023224:	687b      	ldr	r3, [r7, #4]
 8023226:	2201      	movs	r2, #1
 8023228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802322c:	e003      	b.n	8023236 <HAL_TIM_IC_Stop_IT+0x13a>
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	2201      	movs	r2, #1
 8023232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8023236:	683b      	ldr	r3, [r7, #0]
 8023238:	2b00      	cmp	r3, #0
 802323a:	d104      	bne.n	8023246 <HAL_TIM_IC_Stop_IT+0x14a>
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	2201      	movs	r2, #1
 8023240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8023244:	e013      	b.n	802326e <HAL_TIM_IC_Stop_IT+0x172>
 8023246:	683b      	ldr	r3, [r7, #0]
 8023248:	2b04      	cmp	r3, #4
 802324a:	d104      	bne.n	8023256 <HAL_TIM_IC_Stop_IT+0x15a>
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	2201      	movs	r2, #1
 8023250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8023254:	e00b      	b.n	802326e <HAL_TIM_IC_Stop_IT+0x172>
 8023256:	683b      	ldr	r3, [r7, #0]
 8023258:	2b08      	cmp	r3, #8
 802325a:	d104      	bne.n	8023266 <HAL_TIM_IC_Stop_IT+0x16a>
 802325c:	687b      	ldr	r3, [r7, #4]
 802325e:	2201      	movs	r2, #1
 8023260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8023264:	e003      	b.n	802326e <HAL_TIM_IC_Stop_IT+0x172>
 8023266:	687b      	ldr	r3, [r7, #4]
 8023268:	2201      	movs	r2, #1
 802326a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 802326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023270:	4618      	mov	r0, r3
 8023272:	3710      	adds	r7, #16
 8023274:	46bd      	mov	sp, r7
 8023276:	bd80      	pop	{r7, pc}

08023278 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8023278:	b580      	push	{r7, lr}
 802327a:	b086      	sub	sp, #24
 802327c:	af00      	add	r7, sp, #0
 802327e:	6078      	str	r0, [r7, #4]
 8023280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8023282:	687b      	ldr	r3, [r7, #4]
 8023284:	2b00      	cmp	r3, #0
 8023286:	d101      	bne.n	802328c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8023288:	2301      	movs	r3, #1
 802328a:	e08f      	b.n	80233ac <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 802328c:	687b      	ldr	r3, [r7, #4]
 802328e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023292:	b2db      	uxtb	r3, r3
 8023294:	2b00      	cmp	r3, #0
 8023296:	d106      	bne.n	80232a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	2200      	movs	r2, #0
 802329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80232a0:	6878      	ldr	r0, [r7, #4]
 80232a2:	f000 f8d3 	bl	802344c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	2202      	movs	r2, #2
 80232aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80232ae:	687b      	ldr	r3, [r7, #4]
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	6899      	ldr	r1, [r3, #8]
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	681a      	ldr	r2, [r3, #0]
 80232b8:	4b3e      	ldr	r3, [pc, #248]	; (80233b4 <HAL_TIM_Encoder_Init+0x13c>)
 80232ba:	400b      	ands	r3, r1
 80232bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	681a      	ldr	r2, [r3, #0]
 80232c2:	687b      	ldr	r3, [r7, #4]
 80232c4:	3304      	adds	r3, #4
 80232c6:	4619      	mov	r1, r3
 80232c8:	4610      	mov	r0, r2
 80232ca:	f000 fcb1 	bl	8023c30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80232ce:	687b      	ldr	r3, [r7, #4]
 80232d0:	681b      	ldr	r3, [r3, #0]
 80232d2:	689b      	ldr	r3, [r3, #8]
 80232d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	681b      	ldr	r3, [r3, #0]
 80232da:	699b      	ldr	r3, [r3, #24]
 80232dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80232de:	687b      	ldr	r3, [r7, #4]
 80232e0:	681b      	ldr	r3, [r3, #0]
 80232e2:	6a1b      	ldr	r3, [r3, #32]
 80232e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80232e6:	683b      	ldr	r3, [r7, #0]
 80232e8:	681b      	ldr	r3, [r3, #0]
 80232ea:	697a      	ldr	r2, [r7, #20]
 80232ec:	4313      	orrs	r3, r2
 80232ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80232f0:	693a      	ldr	r2, [r7, #16]
 80232f2:	4b31      	ldr	r3, [pc, #196]	; (80233b8 <HAL_TIM_Encoder_Init+0x140>)
 80232f4:	4013      	ands	r3, r2
 80232f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80232f8:	683b      	ldr	r3, [r7, #0]
 80232fa:	689a      	ldr	r2, [r3, #8]
 80232fc:	683b      	ldr	r3, [r7, #0]
 80232fe:	699b      	ldr	r3, [r3, #24]
 8023300:	021b      	lsls	r3, r3, #8
 8023302:	4313      	orrs	r3, r2
 8023304:	693a      	ldr	r2, [r7, #16]
 8023306:	4313      	orrs	r3, r2
 8023308:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 802330a:	693a      	ldr	r2, [r7, #16]
 802330c:	4b2b      	ldr	r3, [pc, #172]	; (80233bc <HAL_TIM_Encoder_Init+0x144>)
 802330e:	4013      	ands	r3, r2
 8023310:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8023312:	693a      	ldr	r2, [r7, #16]
 8023314:	4b2a      	ldr	r3, [pc, #168]	; (80233c0 <HAL_TIM_Encoder_Init+0x148>)
 8023316:	4013      	ands	r3, r2
 8023318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 802331a:	683b      	ldr	r3, [r7, #0]
 802331c:	68da      	ldr	r2, [r3, #12]
 802331e:	683b      	ldr	r3, [r7, #0]
 8023320:	69db      	ldr	r3, [r3, #28]
 8023322:	021b      	lsls	r3, r3, #8
 8023324:	4313      	orrs	r3, r2
 8023326:	693a      	ldr	r2, [r7, #16]
 8023328:	4313      	orrs	r3, r2
 802332a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 802332c:	683b      	ldr	r3, [r7, #0]
 802332e:	691b      	ldr	r3, [r3, #16]
 8023330:	011a      	lsls	r2, r3, #4
 8023332:	683b      	ldr	r3, [r7, #0]
 8023334:	6a1b      	ldr	r3, [r3, #32]
 8023336:	031b      	lsls	r3, r3, #12
 8023338:	4313      	orrs	r3, r2
 802333a:	693a      	ldr	r2, [r7, #16]
 802333c:	4313      	orrs	r3, r2
 802333e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8023340:	68fb      	ldr	r3, [r7, #12]
 8023342:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8023346:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8023348:	68fb      	ldr	r3, [r7, #12]
 802334a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 802334e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8023350:	683b      	ldr	r3, [r7, #0]
 8023352:	685a      	ldr	r2, [r3, #4]
 8023354:	683b      	ldr	r3, [r7, #0]
 8023356:	695b      	ldr	r3, [r3, #20]
 8023358:	011b      	lsls	r3, r3, #4
 802335a:	4313      	orrs	r3, r2
 802335c:	68fa      	ldr	r2, [r7, #12]
 802335e:	4313      	orrs	r3, r2
 8023360:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8023362:	687b      	ldr	r3, [r7, #4]
 8023364:	681b      	ldr	r3, [r3, #0]
 8023366:	697a      	ldr	r2, [r7, #20]
 8023368:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	681b      	ldr	r3, [r3, #0]
 802336e:	693a      	ldr	r2, [r7, #16]
 8023370:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8023372:	687b      	ldr	r3, [r7, #4]
 8023374:	681b      	ldr	r3, [r3, #0]
 8023376:	68fa      	ldr	r2, [r7, #12]
 8023378:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	2201      	movs	r2, #1
 802337e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	2201      	movs	r2, #1
 8023386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	2201      	movs	r2, #1
 802338e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8023392:	687b      	ldr	r3, [r7, #4]
 8023394:	2201      	movs	r2, #1
 8023396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 802339a:	687b      	ldr	r3, [r7, #4]
 802339c:	2201      	movs	r2, #1
 802339e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	2201      	movs	r2, #1
 80233a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80233aa:	2300      	movs	r3, #0
}
 80233ac:	4618      	mov	r0, r3
 80233ae:	3718      	adds	r7, #24
 80233b0:	46bd      	mov	sp, r7
 80233b2:	bd80      	pop	{r7, pc}
 80233b4:	fffebff8 	.word	0xfffebff8
 80233b8:	fffffcfc 	.word	0xfffffcfc
 80233bc:	fffff3f3 	.word	0xfffff3f3
 80233c0:	ffff0f0f 	.word	0xffff0f0f

080233c4 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 80233c4:	b580      	push	{r7, lr}
 80233c6:	b082      	sub	sp, #8
 80233c8:	af00      	add	r7, sp, #0
 80233ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	2202      	movs	r2, #2
 80233d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	6a1a      	ldr	r2, [r3, #32]
 80233da:	f241 1311 	movw	r3, #4369	; 0x1111
 80233de:	4013      	ands	r3, r2
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d10f      	bne.n	8023404 <HAL_TIM_Encoder_DeInit+0x40>
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	6a1a      	ldr	r2, [r3, #32]
 80233ea:	f240 4344 	movw	r3, #1092	; 0x444
 80233ee:	4013      	ands	r3, r2
 80233f0:	2b00      	cmp	r3, #0
 80233f2:	d107      	bne.n	8023404 <HAL_TIM_Encoder_DeInit+0x40>
 80233f4:	687b      	ldr	r3, [r7, #4]
 80233f6:	681b      	ldr	r3, [r3, #0]
 80233f8:	681a      	ldr	r2, [r3, #0]
 80233fa:	687b      	ldr	r3, [r7, #4]
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	f022 0201 	bic.w	r2, r2, #1
 8023402:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 8023404:	6878      	ldr	r0, [r7, #4]
 8023406:	f000 f82b 	bl	8023460 <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 802340a:	687b      	ldr	r3, [r7, #4]
 802340c:	2200      	movs	r2, #0
 802340e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	2200      	movs	r2, #0
 8023416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 802341a:	687b      	ldr	r3, [r7, #4]
 802341c:	2200      	movs	r2, #0
 802341e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8023422:	687b      	ldr	r3, [r7, #4]
 8023424:	2200      	movs	r2, #0
 8023426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 802342a:	687b      	ldr	r3, [r7, #4]
 802342c:	2200      	movs	r2, #0
 802342e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	2200      	movs	r2, #0
 8023436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	2200      	movs	r2, #0
 802343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8023442:	2300      	movs	r3, #0
}
 8023444:	4618      	mov	r0, r3
 8023446:	3708      	adds	r7, #8
 8023448:	46bd      	mov	sp, r7
 802344a:	bd80      	pop	{r7, pc}

0802344c <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 802344c:	b480      	push	{r7}
 802344e:	b083      	sub	sp, #12
 8023450:	af00      	add	r7, sp, #0
 8023452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8023454:	bf00      	nop
 8023456:	370c      	adds	r7, #12
 8023458:	46bd      	mov	sp, r7
 802345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802345e:	4770      	bx	lr

08023460 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 8023460:	b480      	push	{r7}
 8023462:	b083      	sub	sp, #12
 8023464:	af00      	add	r7, sp, #0
 8023466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 8023468:	bf00      	nop
 802346a:	370c      	adds	r7, #12
 802346c:	46bd      	mov	sp, r7
 802346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023472:	4770      	bx	lr

08023474 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8023474:	b580      	push	{r7, lr}
 8023476:	b084      	sub	sp, #16
 8023478:	af00      	add	r7, sp, #0
 802347a:	6078      	str	r0, [r7, #4]
 802347c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 802347e:	687b      	ldr	r3, [r7, #4]
 8023480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8023484:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8023486:	687b      	ldr	r3, [r7, #4]
 8023488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 802348c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 802348e:	687b      	ldr	r3, [r7, #4]
 8023490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8023494:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8023496:	687b      	ldr	r3, [r7, #4]
 8023498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802349c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 802349e:	683b      	ldr	r3, [r7, #0]
 80234a0:	2b00      	cmp	r3, #0
 80234a2:	d110      	bne.n	80234c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80234a4:	7bfb      	ldrb	r3, [r7, #15]
 80234a6:	2b01      	cmp	r3, #1
 80234a8:	d102      	bne.n	80234b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80234aa:	7b7b      	ldrb	r3, [r7, #13]
 80234ac:	2b01      	cmp	r3, #1
 80234ae:	d001      	beq.n	80234b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80234b0:	2301      	movs	r3, #1
 80234b2:	e069      	b.n	8023588 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80234b4:	687b      	ldr	r3, [r7, #4]
 80234b6:	2202      	movs	r2, #2
 80234b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	2202      	movs	r2, #2
 80234c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80234c4:	e031      	b.n	802352a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80234c6:	683b      	ldr	r3, [r7, #0]
 80234c8:	2b04      	cmp	r3, #4
 80234ca:	d110      	bne.n	80234ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80234cc:	7bbb      	ldrb	r3, [r7, #14]
 80234ce:	2b01      	cmp	r3, #1
 80234d0:	d102      	bne.n	80234d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80234d2:	7b3b      	ldrb	r3, [r7, #12]
 80234d4:	2b01      	cmp	r3, #1
 80234d6:	d001      	beq.n	80234dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80234d8:	2301      	movs	r3, #1
 80234da:	e055      	b.n	8023588 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	2202      	movs	r2, #2
 80234e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	2202      	movs	r2, #2
 80234e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80234ec:	e01d      	b.n	802352a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80234ee:	7bfb      	ldrb	r3, [r7, #15]
 80234f0:	2b01      	cmp	r3, #1
 80234f2:	d108      	bne.n	8023506 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80234f4:	7bbb      	ldrb	r3, [r7, #14]
 80234f6:	2b01      	cmp	r3, #1
 80234f8:	d105      	bne.n	8023506 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80234fa:	7b7b      	ldrb	r3, [r7, #13]
 80234fc:	2b01      	cmp	r3, #1
 80234fe:	d102      	bne.n	8023506 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8023500:	7b3b      	ldrb	r3, [r7, #12]
 8023502:	2b01      	cmp	r3, #1
 8023504:	d001      	beq.n	802350a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8023506:	2301      	movs	r3, #1
 8023508:	e03e      	b.n	8023588 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 802350a:	687b      	ldr	r3, [r7, #4]
 802350c:	2202      	movs	r2, #2
 802350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8023512:	687b      	ldr	r3, [r7, #4]
 8023514:	2202      	movs	r2, #2
 8023516:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	2202      	movs	r2, #2
 802351e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	2202      	movs	r2, #2
 8023526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 802352a:	683b      	ldr	r3, [r7, #0]
 802352c:	2b00      	cmp	r3, #0
 802352e:	d003      	beq.n	8023538 <HAL_TIM_Encoder_Start+0xc4>
 8023530:	683b      	ldr	r3, [r7, #0]
 8023532:	2b04      	cmp	r3, #4
 8023534:	d008      	beq.n	8023548 <HAL_TIM_Encoder_Start+0xd4>
 8023536:	e00f      	b.n	8023558 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	2201      	movs	r2, #1
 802353e:	2100      	movs	r1, #0
 8023540:	4618      	mov	r0, r3
 8023542:	f001 f8c5 	bl	80246d0 <TIM_CCxChannelCmd>
      break;
 8023546:	e016      	b.n	8023576 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8023548:	687b      	ldr	r3, [r7, #4]
 802354a:	681b      	ldr	r3, [r3, #0]
 802354c:	2201      	movs	r2, #1
 802354e:	2104      	movs	r1, #4
 8023550:	4618      	mov	r0, r3
 8023552:	f001 f8bd 	bl	80246d0 <TIM_CCxChannelCmd>
      break;
 8023556:	e00e      	b.n	8023576 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	2201      	movs	r2, #1
 802355e:	2100      	movs	r1, #0
 8023560:	4618      	mov	r0, r3
 8023562:	f001 f8b5 	bl	80246d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8023566:	687b      	ldr	r3, [r7, #4]
 8023568:	681b      	ldr	r3, [r3, #0]
 802356a:	2201      	movs	r2, #1
 802356c:	2104      	movs	r1, #4
 802356e:	4618      	mov	r0, r3
 8023570:	f001 f8ae 	bl	80246d0 <TIM_CCxChannelCmd>
      break;
 8023574:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8023576:	687b      	ldr	r3, [r7, #4]
 8023578:	681b      	ldr	r3, [r3, #0]
 802357a:	681a      	ldr	r2, [r3, #0]
 802357c:	687b      	ldr	r3, [r7, #4]
 802357e:	681b      	ldr	r3, [r3, #0]
 8023580:	f042 0201 	orr.w	r2, r2, #1
 8023584:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8023586:	2300      	movs	r3, #0
}
 8023588:	4618      	mov	r0, r3
 802358a:	3710      	adds	r7, #16
 802358c:	46bd      	mov	sp, r7
 802358e:	bd80      	pop	{r7, pc}

08023590 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8023590:	b580      	push	{r7, lr}
 8023592:	b082      	sub	sp, #8
 8023594:	af00      	add	r7, sp, #0
 8023596:	6078      	str	r0, [r7, #4]
 8023598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 802359a:	683b      	ldr	r3, [r7, #0]
 802359c:	2b00      	cmp	r3, #0
 802359e:	d003      	beq.n	80235a8 <HAL_TIM_Encoder_Stop+0x18>
 80235a0:	683b      	ldr	r3, [r7, #0]
 80235a2:	2b04      	cmp	r3, #4
 80235a4:	d008      	beq.n	80235b8 <HAL_TIM_Encoder_Stop+0x28>
 80235a6:	e00f      	b.n	80235c8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80235a8:	687b      	ldr	r3, [r7, #4]
 80235aa:	681b      	ldr	r3, [r3, #0]
 80235ac:	2200      	movs	r2, #0
 80235ae:	2100      	movs	r1, #0
 80235b0:	4618      	mov	r0, r3
 80235b2:	f001 f88d 	bl	80246d0 <TIM_CCxChannelCmd>
      break;
 80235b6:	e016      	b.n	80235e6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80235b8:	687b      	ldr	r3, [r7, #4]
 80235ba:	681b      	ldr	r3, [r3, #0]
 80235bc:	2200      	movs	r2, #0
 80235be:	2104      	movs	r1, #4
 80235c0:	4618      	mov	r0, r3
 80235c2:	f001 f885 	bl	80246d0 <TIM_CCxChannelCmd>
      break;
 80235c6:	e00e      	b.n	80235e6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	681b      	ldr	r3, [r3, #0]
 80235cc:	2200      	movs	r2, #0
 80235ce:	2100      	movs	r1, #0
 80235d0:	4618      	mov	r0, r3
 80235d2:	f001 f87d 	bl	80246d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80235d6:	687b      	ldr	r3, [r7, #4]
 80235d8:	681b      	ldr	r3, [r3, #0]
 80235da:	2200      	movs	r2, #0
 80235dc:	2104      	movs	r1, #4
 80235de:	4618      	mov	r0, r3
 80235e0:	f001 f876 	bl	80246d0 <TIM_CCxChannelCmd>
      break;
 80235e4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	6a1a      	ldr	r2, [r3, #32]
 80235ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80235f0:	4013      	ands	r3, r2
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	d10f      	bne.n	8023616 <HAL_TIM_Encoder_Stop+0x86>
 80235f6:	687b      	ldr	r3, [r7, #4]
 80235f8:	681b      	ldr	r3, [r3, #0]
 80235fa:	6a1a      	ldr	r2, [r3, #32]
 80235fc:	f240 4344 	movw	r3, #1092	; 0x444
 8023600:	4013      	ands	r3, r2
 8023602:	2b00      	cmp	r3, #0
 8023604:	d107      	bne.n	8023616 <HAL_TIM_Encoder_Stop+0x86>
 8023606:	687b      	ldr	r3, [r7, #4]
 8023608:	681b      	ldr	r3, [r3, #0]
 802360a:	681a      	ldr	r2, [r3, #0]
 802360c:	687b      	ldr	r3, [r7, #4]
 802360e:	681b      	ldr	r3, [r3, #0]
 8023610:	f022 0201 	bic.w	r2, r2, #1
 8023614:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8023616:	683b      	ldr	r3, [r7, #0]
 8023618:	2b00      	cmp	r3, #0
 802361a:	d002      	beq.n	8023622 <HAL_TIM_Encoder_Stop+0x92>
 802361c:	683b      	ldr	r3, [r7, #0]
 802361e:	2b04      	cmp	r3, #4
 8023620:	d148      	bne.n	80236b4 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8023622:	683b      	ldr	r3, [r7, #0]
 8023624:	2b00      	cmp	r3, #0
 8023626:	d104      	bne.n	8023632 <HAL_TIM_Encoder_Stop+0xa2>
 8023628:	687b      	ldr	r3, [r7, #4]
 802362a:	2201      	movs	r2, #1
 802362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8023630:	e023      	b.n	802367a <HAL_TIM_Encoder_Stop+0xea>
 8023632:	683b      	ldr	r3, [r7, #0]
 8023634:	2b04      	cmp	r3, #4
 8023636:	d104      	bne.n	8023642 <HAL_TIM_Encoder_Stop+0xb2>
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	2201      	movs	r2, #1
 802363c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8023640:	e01b      	b.n	802367a <HAL_TIM_Encoder_Stop+0xea>
 8023642:	683b      	ldr	r3, [r7, #0]
 8023644:	2b08      	cmp	r3, #8
 8023646:	d104      	bne.n	8023652 <HAL_TIM_Encoder_Stop+0xc2>
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	2201      	movs	r2, #1
 802364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8023650:	e013      	b.n	802367a <HAL_TIM_Encoder_Stop+0xea>
 8023652:	683b      	ldr	r3, [r7, #0]
 8023654:	2b0c      	cmp	r3, #12
 8023656:	d104      	bne.n	8023662 <HAL_TIM_Encoder_Stop+0xd2>
 8023658:	687b      	ldr	r3, [r7, #4]
 802365a:	2201      	movs	r2, #1
 802365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8023660:	e00b      	b.n	802367a <HAL_TIM_Encoder_Stop+0xea>
 8023662:	683b      	ldr	r3, [r7, #0]
 8023664:	2b10      	cmp	r3, #16
 8023666:	d104      	bne.n	8023672 <HAL_TIM_Encoder_Stop+0xe2>
 8023668:	687b      	ldr	r3, [r7, #4]
 802366a:	2201      	movs	r2, #1
 802366c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8023670:	e003      	b.n	802367a <HAL_TIM_Encoder_Stop+0xea>
 8023672:	687b      	ldr	r3, [r7, #4]
 8023674:	2201      	movs	r2, #1
 8023676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 802367a:	683b      	ldr	r3, [r7, #0]
 802367c:	2b00      	cmp	r3, #0
 802367e:	d104      	bne.n	802368a <HAL_TIM_Encoder_Stop+0xfa>
 8023680:	687b      	ldr	r3, [r7, #4]
 8023682:	2201      	movs	r2, #1
 8023684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8023688:	e024      	b.n	80236d4 <HAL_TIM_Encoder_Stop+0x144>
 802368a:	683b      	ldr	r3, [r7, #0]
 802368c:	2b04      	cmp	r3, #4
 802368e:	d104      	bne.n	802369a <HAL_TIM_Encoder_Stop+0x10a>
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	2201      	movs	r2, #1
 8023694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8023698:	e01c      	b.n	80236d4 <HAL_TIM_Encoder_Stop+0x144>
 802369a:	683b      	ldr	r3, [r7, #0]
 802369c:	2b08      	cmp	r3, #8
 802369e:	d104      	bne.n	80236aa <HAL_TIM_Encoder_Stop+0x11a>
 80236a0:	687b      	ldr	r3, [r7, #4]
 80236a2:	2201      	movs	r2, #1
 80236a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80236a8:	e014      	b.n	80236d4 <HAL_TIM_Encoder_Stop+0x144>
 80236aa:	687b      	ldr	r3, [r7, #4]
 80236ac:	2201      	movs	r2, #1
 80236ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80236b2:	e00f      	b.n	80236d4 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	2201      	movs	r2, #1
 80236b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	2201      	movs	r2, #1
 80236c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	2201      	movs	r2, #1
 80236c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	2201      	movs	r2, #1
 80236d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 80236d4:	2300      	movs	r3, #0
}
 80236d6:	4618      	mov	r0, r3
 80236d8:	3708      	adds	r7, #8
 80236da:	46bd      	mov	sp, r7
 80236dc:	bd80      	pop	{r7, pc}

080236de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80236de:	b580      	push	{r7, lr}
 80236e0:	b086      	sub	sp, #24
 80236e2:	af00      	add	r7, sp, #0
 80236e4:	60f8      	str	r0, [r7, #12]
 80236e6:	60b9      	str	r1, [r7, #8]
 80236e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80236ea:	2300      	movs	r3, #0
 80236ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80236ee:	68fb      	ldr	r3, [r7, #12]
 80236f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80236f4:	2b01      	cmp	r3, #1
 80236f6:	d101      	bne.n	80236fc <HAL_TIM_IC_ConfigChannel+0x1e>
 80236f8:	2302      	movs	r3, #2
 80236fa:	e088      	b.n	802380e <HAL_TIM_IC_ConfigChannel+0x130>
 80236fc:	68fb      	ldr	r3, [r7, #12]
 80236fe:	2201      	movs	r2, #1
 8023700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8023704:	687b      	ldr	r3, [r7, #4]
 8023706:	2b00      	cmp	r3, #0
 8023708:	d11b      	bne.n	8023742 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 802370a:	68fb      	ldr	r3, [r7, #12]
 802370c:	6818      	ldr	r0, [r3, #0]
 802370e:	68bb      	ldr	r3, [r7, #8]
 8023710:	6819      	ldr	r1, [r3, #0]
 8023712:	68bb      	ldr	r3, [r7, #8]
 8023714:	685a      	ldr	r2, [r3, #4]
 8023716:	68bb      	ldr	r3, [r7, #8]
 8023718:	68db      	ldr	r3, [r3, #12]
 802371a:	f000 fe05 	bl	8024328 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 802371e:	68fb      	ldr	r3, [r7, #12]
 8023720:	681b      	ldr	r3, [r3, #0]
 8023722:	699a      	ldr	r2, [r3, #24]
 8023724:	68fb      	ldr	r3, [r7, #12]
 8023726:	681b      	ldr	r3, [r3, #0]
 8023728:	f022 020c 	bic.w	r2, r2, #12
 802372c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 802372e:	68fb      	ldr	r3, [r7, #12]
 8023730:	681b      	ldr	r3, [r3, #0]
 8023732:	6999      	ldr	r1, [r3, #24]
 8023734:	68bb      	ldr	r3, [r7, #8]
 8023736:	689a      	ldr	r2, [r3, #8]
 8023738:	68fb      	ldr	r3, [r7, #12]
 802373a:	681b      	ldr	r3, [r3, #0]
 802373c:	430a      	orrs	r2, r1
 802373e:	619a      	str	r2, [r3, #24]
 8023740:	e060      	b.n	8023804 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8023742:	687b      	ldr	r3, [r7, #4]
 8023744:	2b04      	cmp	r3, #4
 8023746:	d11c      	bne.n	8023782 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8023748:	68fb      	ldr	r3, [r7, #12]
 802374a:	6818      	ldr	r0, [r3, #0]
 802374c:	68bb      	ldr	r3, [r7, #8]
 802374e:	6819      	ldr	r1, [r3, #0]
 8023750:	68bb      	ldr	r3, [r7, #8]
 8023752:	685a      	ldr	r2, [r3, #4]
 8023754:	68bb      	ldr	r3, [r7, #8]
 8023756:	68db      	ldr	r3, [r3, #12]
 8023758:	f000 fe95 	bl	8024486 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 802375c:	68fb      	ldr	r3, [r7, #12]
 802375e:	681b      	ldr	r3, [r3, #0]
 8023760:	699a      	ldr	r2, [r3, #24]
 8023762:	68fb      	ldr	r3, [r7, #12]
 8023764:	681b      	ldr	r3, [r3, #0]
 8023766:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 802376a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 802376c:	68fb      	ldr	r3, [r7, #12]
 802376e:	681b      	ldr	r3, [r3, #0]
 8023770:	6999      	ldr	r1, [r3, #24]
 8023772:	68bb      	ldr	r3, [r7, #8]
 8023774:	689b      	ldr	r3, [r3, #8]
 8023776:	021a      	lsls	r2, r3, #8
 8023778:	68fb      	ldr	r3, [r7, #12]
 802377a:	681b      	ldr	r3, [r3, #0]
 802377c:	430a      	orrs	r2, r1
 802377e:	619a      	str	r2, [r3, #24]
 8023780:	e040      	b.n	8023804 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8023782:	687b      	ldr	r3, [r7, #4]
 8023784:	2b08      	cmp	r3, #8
 8023786:	d11b      	bne.n	80237c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8023788:	68fb      	ldr	r3, [r7, #12]
 802378a:	6818      	ldr	r0, [r3, #0]
 802378c:	68bb      	ldr	r3, [r7, #8]
 802378e:	6819      	ldr	r1, [r3, #0]
 8023790:	68bb      	ldr	r3, [r7, #8]
 8023792:	685a      	ldr	r2, [r3, #4]
 8023794:	68bb      	ldr	r3, [r7, #8]
 8023796:	68db      	ldr	r3, [r3, #12]
 8023798:	f000 fee2 	bl	8024560 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 802379c:	68fb      	ldr	r3, [r7, #12]
 802379e:	681b      	ldr	r3, [r3, #0]
 80237a0:	69da      	ldr	r2, [r3, #28]
 80237a2:	68fb      	ldr	r3, [r7, #12]
 80237a4:	681b      	ldr	r3, [r3, #0]
 80237a6:	f022 020c 	bic.w	r2, r2, #12
 80237aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80237ac:	68fb      	ldr	r3, [r7, #12]
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	69d9      	ldr	r1, [r3, #28]
 80237b2:	68bb      	ldr	r3, [r7, #8]
 80237b4:	689a      	ldr	r2, [r3, #8]
 80237b6:	68fb      	ldr	r3, [r7, #12]
 80237b8:	681b      	ldr	r3, [r3, #0]
 80237ba:	430a      	orrs	r2, r1
 80237bc:	61da      	str	r2, [r3, #28]
 80237be:	e021      	b.n	8023804 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80237c0:	687b      	ldr	r3, [r7, #4]
 80237c2:	2b0c      	cmp	r3, #12
 80237c4:	d11c      	bne.n	8023800 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80237c6:	68fb      	ldr	r3, [r7, #12]
 80237c8:	6818      	ldr	r0, [r3, #0]
 80237ca:	68bb      	ldr	r3, [r7, #8]
 80237cc:	6819      	ldr	r1, [r3, #0]
 80237ce:	68bb      	ldr	r3, [r7, #8]
 80237d0:	685a      	ldr	r2, [r3, #4]
 80237d2:	68bb      	ldr	r3, [r7, #8]
 80237d4:	68db      	ldr	r3, [r3, #12]
 80237d6:	f000 feff 	bl	80245d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80237da:	68fb      	ldr	r3, [r7, #12]
 80237dc:	681b      	ldr	r3, [r3, #0]
 80237de:	69da      	ldr	r2, [r3, #28]
 80237e0:	68fb      	ldr	r3, [r7, #12]
 80237e2:	681b      	ldr	r3, [r3, #0]
 80237e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80237e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80237ea:	68fb      	ldr	r3, [r7, #12]
 80237ec:	681b      	ldr	r3, [r3, #0]
 80237ee:	69d9      	ldr	r1, [r3, #28]
 80237f0:	68bb      	ldr	r3, [r7, #8]
 80237f2:	689b      	ldr	r3, [r3, #8]
 80237f4:	021a      	lsls	r2, r3, #8
 80237f6:	68fb      	ldr	r3, [r7, #12]
 80237f8:	681b      	ldr	r3, [r3, #0]
 80237fa:	430a      	orrs	r2, r1
 80237fc:	61da      	str	r2, [r3, #28]
 80237fe:	e001      	b.n	8023804 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8023800:	2301      	movs	r3, #1
 8023802:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8023804:	68fb      	ldr	r3, [r7, #12]
 8023806:	2200      	movs	r2, #0
 8023808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802380c:	7dfb      	ldrb	r3, [r7, #23]
}
 802380e:	4618      	mov	r0, r3
 8023810:	3718      	adds	r7, #24
 8023812:	46bd      	mov	sp, r7
 8023814:	bd80      	pop	{r7, pc}
	...

08023818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8023818:	b580      	push	{r7, lr}
 802381a:	b086      	sub	sp, #24
 802381c:	af00      	add	r7, sp, #0
 802381e:	60f8      	str	r0, [r7, #12]
 8023820:	60b9      	str	r1, [r7, #8]
 8023822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023824:	2300      	movs	r3, #0
 8023826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8023828:	68fb      	ldr	r3, [r7, #12]
 802382a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802382e:	2b01      	cmp	r3, #1
 8023830:	d101      	bne.n	8023836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8023832:	2302      	movs	r3, #2
 8023834:	e0ff      	b.n	8023a36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8023836:	68fb      	ldr	r3, [r7, #12]
 8023838:	2201      	movs	r2, #1
 802383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 802383e:	687b      	ldr	r3, [r7, #4]
 8023840:	2b14      	cmp	r3, #20
 8023842:	f200 80f0 	bhi.w	8023a26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8023846:	a201      	add	r2, pc, #4	; (adr r2, 802384c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8023848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802384c:	080238a1 	.word	0x080238a1
 8023850:	08023a27 	.word	0x08023a27
 8023854:	08023a27 	.word	0x08023a27
 8023858:	08023a27 	.word	0x08023a27
 802385c:	080238e1 	.word	0x080238e1
 8023860:	08023a27 	.word	0x08023a27
 8023864:	08023a27 	.word	0x08023a27
 8023868:	08023a27 	.word	0x08023a27
 802386c:	08023923 	.word	0x08023923
 8023870:	08023a27 	.word	0x08023a27
 8023874:	08023a27 	.word	0x08023a27
 8023878:	08023a27 	.word	0x08023a27
 802387c:	08023963 	.word	0x08023963
 8023880:	08023a27 	.word	0x08023a27
 8023884:	08023a27 	.word	0x08023a27
 8023888:	08023a27 	.word	0x08023a27
 802388c:	080239a5 	.word	0x080239a5
 8023890:	08023a27 	.word	0x08023a27
 8023894:	08023a27 	.word	0x08023a27
 8023898:	08023a27 	.word	0x08023a27
 802389c:	080239e5 	.word	0x080239e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80238a0:	68fb      	ldr	r3, [r7, #12]
 80238a2:	681b      	ldr	r3, [r3, #0]
 80238a4:	68b9      	ldr	r1, [r7, #8]
 80238a6:	4618      	mov	r0, r3
 80238a8:	f000 fa68 	bl	8023d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80238ac:	68fb      	ldr	r3, [r7, #12]
 80238ae:	681b      	ldr	r3, [r3, #0]
 80238b0:	699a      	ldr	r2, [r3, #24]
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	f042 0208 	orr.w	r2, r2, #8
 80238ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80238bc:	68fb      	ldr	r3, [r7, #12]
 80238be:	681b      	ldr	r3, [r3, #0]
 80238c0:	699a      	ldr	r2, [r3, #24]
 80238c2:	68fb      	ldr	r3, [r7, #12]
 80238c4:	681b      	ldr	r3, [r3, #0]
 80238c6:	f022 0204 	bic.w	r2, r2, #4
 80238ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80238cc:	68fb      	ldr	r3, [r7, #12]
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	6999      	ldr	r1, [r3, #24]
 80238d2:	68bb      	ldr	r3, [r7, #8]
 80238d4:	691a      	ldr	r2, [r3, #16]
 80238d6:	68fb      	ldr	r3, [r7, #12]
 80238d8:	681b      	ldr	r3, [r3, #0]
 80238da:	430a      	orrs	r2, r1
 80238dc:	619a      	str	r2, [r3, #24]
      break;
 80238de:	e0a5      	b.n	8023a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80238e0:	68fb      	ldr	r3, [r7, #12]
 80238e2:	681b      	ldr	r3, [r3, #0]
 80238e4:	68b9      	ldr	r1, [r7, #8]
 80238e6:	4618      	mov	r0, r3
 80238e8:	f000 fad8 	bl	8023e9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80238ec:	68fb      	ldr	r3, [r7, #12]
 80238ee:	681b      	ldr	r3, [r3, #0]
 80238f0:	699a      	ldr	r2, [r3, #24]
 80238f2:	68fb      	ldr	r3, [r7, #12]
 80238f4:	681b      	ldr	r3, [r3, #0]
 80238f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80238fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80238fc:	68fb      	ldr	r3, [r7, #12]
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	699a      	ldr	r2, [r3, #24]
 8023902:	68fb      	ldr	r3, [r7, #12]
 8023904:	681b      	ldr	r3, [r3, #0]
 8023906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802390a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 802390c:	68fb      	ldr	r3, [r7, #12]
 802390e:	681b      	ldr	r3, [r3, #0]
 8023910:	6999      	ldr	r1, [r3, #24]
 8023912:	68bb      	ldr	r3, [r7, #8]
 8023914:	691b      	ldr	r3, [r3, #16]
 8023916:	021a      	lsls	r2, r3, #8
 8023918:	68fb      	ldr	r3, [r7, #12]
 802391a:	681b      	ldr	r3, [r3, #0]
 802391c:	430a      	orrs	r2, r1
 802391e:	619a      	str	r2, [r3, #24]
      break;
 8023920:	e084      	b.n	8023a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8023922:	68fb      	ldr	r3, [r7, #12]
 8023924:	681b      	ldr	r3, [r3, #0]
 8023926:	68b9      	ldr	r1, [r7, #8]
 8023928:	4618      	mov	r0, r3
 802392a:	f000 fb41 	bl	8023fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802392e:	68fb      	ldr	r3, [r7, #12]
 8023930:	681b      	ldr	r3, [r3, #0]
 8023932:	69da      	ldr	r2, [r3, #28]
 8023934:	68fb      	ldr	r3, [r7, #12]
 8023936:	681b      	ldr	r3, [r3, #0]
 8023938:	f042 0208 	orr.w	r2, r2, #8
 802393c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802393e:	68fb      	ldr	r3, [r7, #12]
 8023940:	681b      	ldr	r3, [r3, #0]
 8023942:	69da      	ldr	r2, [r3, #28]
 8023944:	68fb      	ldr	r3, [r7, #12]
 8023946:	681b      	ldr	r3, [r3, #0]
 8023948:	f022 0204 	bic.w	r2, r2, #4
 802394c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802394e:	68fb      	ldr	r3, [r7, #12]
 8023950:	681b      	ldr	r3, [r3, #0]
 8023952:	69d9      	ldr	r1, [r3, #28]
 8023954:	68bb      	ldr	r3, [r7, #8]
 8023956:	691a      	ldr	r2, [r3, #16]
 8023958:	68fb      	ldr	r3, [r7, #12]
 802395a:	681b      	ldr	r3, [r3, #0]
 802395c:	430a      	orrs	r2, r1
 802395e:	61da      	str	r2, [r3, #28]
      break;
 8023960:	e064      	b.n	8023a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8023962:	68fb      	ldr	r3, [r7, #12]
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	68b9      	ldr	r1, [r7, #8]
 8023968:	4618      	mov	r0, r3
 802396a:	f000 fba9 	bl	80240c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802396e:	68fb      	ldr	r3, [r7, #12]
 8023970:	681b      	ldr	r3, [r3, #0]
 8023972:	69da      	ldr	r2, [r3, #28]
 8023974:	68fb      	ldr	r3, [r7, #12]
 8023976:	681b      	ldr	r3, [r3, #0]
 8023978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802397c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802397e:	68fb      	ldr	r3, [r7, #12]
 8023980:	681b      	ldr	r3, [r3, #0]
 8023982:	69da      	ldr	r2, [r3, #28]
 8023984:	68fb      	ldr	r3, [r7, #12]
 8023986:	681b      	ldr	r3, [r3, #0]
 8023988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802398c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802398e:	68fb      	ldr	r3, [r7, #12]
 8023990:	681b      	ldr	r3, [r3, #0]
 8023992:	69d9      	ldr	r1, [r3, #28]
 8023994:	68bb      	ldr	r3, [r7, #8]
 8023996:	691b      	ldr	r3, [r3, #16]
 8023998:	021a      	lsls	r2, r3, #8
 802399a:	68fb      	ldr	r3, [r7, #12]
 802399c:	681b      	ldr	r3, [r3, #0]
 802399e:	430a      	orrs	r2, r1
 80239a0:	61da      	str	r2, [r3, #28]
      break;
 80239a2:	e043      	b.n	8023a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80239a4:	68fb      	ldr	r3, [r7, #12]
 80239a6:	681b      	ldr	r3, [r3, #0]
 80239a8:	68b9      	ldr	r1, [r7, #8]
 80239aa:	4618      	mov	r0, r3
 80239ac:	f000 fbf2 	bl	8024194 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80239b0:	68fb      	ldr	r3, [r7, #12]
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80239b6:	68fb      	ldr	r3, [r7, #12]
 80239b8:	681b      	ldr	r3, [r3, #0]
 80239ba:	f042 0208 	orr.w	r2, r2, #8
 80239be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80239c0:	68fb      	ldr	r3, [r7, #12]
 80239c2:	681b      	ldr	r3, [r3, #0]
 80239c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80239c6:	68fb      	ldr	r3, [r7, #12]
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	f022 0204 	bic.w	r2, r2, #4
 80239ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80239d0:	68fb      	ldr	r3, [r7, #12]
 80239d2:	681b      	ldr	r3, [r3, #0]
 80239d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80239d6:	68bb      	ldr	r3, [r7, #8]
 80239d8:	691a      	ldr	r2, [r3, #16]
 80239da:	68fb      	ldr	r3, [r7, #12]
 80239dc:	681b      	ldr	r3, [r3, #0]
 80239de:	430a      	orrs	r2, r1
 80239e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80239e2:	e023      	b.n	8023a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80239e4:	68fb      	ldr	r3, [r7, #12]
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	68b9      	ldr	r1, [r7, #8]
 80239ea:	4618      	mov	r0, r3
 80239ec:	f000 fc36 	bl	802425c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80239f0:	68fb      	ldr	r3, [r7, #12]
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80239f6:	68fb      	ldr	r3, [r7, #12]
 80239f8:	681b      	ldr	r3, [r3, #0]
 80239fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80239fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8023a00:	68fb      	ldr	r3, [r7, #12]
 8023a02:	681b      	ldr	r3, [r3, #0]
 8023a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8023a06:	68fb      	ldr	r3, [r7, #12]
 8023a08:	681b      	ldr	r3, [r3, #0]
 8023a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023a0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8023a10:	68fb      	ldr	r3, [r7, #12]
 8023a12:	681b      	ldr	r3, [r3, #0]
 8023a14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8023a16:	68bb      	ldr	r3, [r7, #8]
 8023a18:	691b      	ldr	r3, [r3, #16]
 8023a1a:	021a      	lsls	r2, r3, #8
 8023a1c:	68fb      	ldr	r3, [r7, #12]
 8023a1e:	681b      	ldr	r3, [r3, #0]
 8023a20:	430a      	orrs	r2, r1
 8023a22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8023a24:	e002      	b.n	8023a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8023a26:	2301      	movs	r3, #1
 8023a28:	75fb      	strb	r3, [r7, #23]
      break;
 8023a2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8023a2c:	68fb      	ldr	r3, [r7, #12]
 8023a2e:	2200      	movs	r2, #0
 8023a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8023a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8023a36:	4618      	mov	r0, r3
 8023a38:	3718      	adds	r7, #24
 8023a3a:	46bd      	mov	sp, r7
 8023a3c:	bd80      	pop	{r7, pc}
 8023a3e:	bf00      	nop

08023a40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8023a40:	b580      	push	{r7, lr}
 8023a42:	b084      	sub	sp, #16
 8023a44:	af00      	add	r7, sp, #0
 8023a46:	6078      	str	r0, [r7, #4]
 8023a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8023a4a:	2300      	movs	r3, #0
 8023a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023a54:	2b01      	cmp	r3, #1
 8023a56:	d101      	bne.n	8023a5c <HAL_TIM_ConfigClockSource+0x1c>
 8023a58:	2302      	movs	r3, #2
 8023a5a:	e0dc      	b.n	8023c16 <HAL_TIM_ConfigClockSource+0x1d6>
 8023a5c:	687b      	ldr	r3, [r7, #4]
 8023a5e:	2201      	movs	r2, #1
 8023a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	2202      	movs	r2, #2
 8023a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8023a6c:	687b      	ldr	r3, [r7, #4]
 8023a6e:	681b      	ldr	r3, [r3, #0]
 8023a70:	689b      	ldr	r3, [r3, #8]
 8023a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8023a74:	68ba      	ldr	r2, [r7, #8]
 8023a76:	4b6a      	ldr	r3, [pc, #424]	; (8023c20 <HAL_TIM_ConfigClockSource+0x1e0>)
 8023a78:	4013      	ands	r3, r2
 8023a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8023a7c:	68bb      	ldr	r3, [r7, #8]
 8023a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8023a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8023a84:	687b      	ldr	r3, [r7, #4]
 8023a86:	681b      	ldr	r3, [r3, #0]
 8023a88:	68ba      	ldr	r2, [r7, #8]
 8023a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8023a8c:	683b      	ldr	r3, [r7, #0]
 8023a8e:	681b      	ldr	r3, [r3, #0]
 8023a90:	4a64      	ldr	r2, [pc, #400]	; (8023c24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8023a92:	4293      	cmp	r3, r2
 8023a94:	f000 80a9 	beq.w	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023a98:	4a62      	ldr	r2, [pc, #392]	; (8023c24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8023a9a:	4293      	cmp	r3, r2
 8023a9c:	f200 80ae 	bhi.w	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023aa0:	4a61      	ldr	r2, [pc, #388]	; (8023c28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8023aa2:	4293      	cmp	r3, r2
 8023aa4:	f000 80a1 	beq.w	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023aa8:	4a5f      	ldr	r2, [pc, #380]	; (8023c28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8023aaa:	4293      	cmp	r3, r2
 8023aac:	f200 80a6 	bhi.w	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023ab0:	4a5e      	ldr	r2, [pc, #376]	; (8023c2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8023ab2:	4293      	cmp	r3, r2
 8023ab4:	f000 8099 	beq.w	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023ab8:	4a5c      	ldr	r2, [pc, #368]	; (8023c2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8023aba:	4293      	cmp	r3, r2
 8023abc:	f200 809e 	bhi.w	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023ac0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8023ac4:	f000 8091 	beq.w	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023ac8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8023acc:	f200 8096 	bhi.w	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023ad4:	f000 8089 	beq.w	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023adc:	f200 808e 	bhi.w	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023ae4:	d03e      	beq.n	8023b64 <HAL_TIM_ConfigClockSource+0x124>
 8023ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023aea:	f200 8087 	bhi.w	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023af2:	f000 8086 	beq.w	8023c02 <HAL_TIM_ConfigClockSource+0x1c2>
 8023af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023afa:	d87f      	bhi.n	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023afc:	2b70      	cmp	r3, #112	; 0x70
 8023afe:	d01a      	beq.n	8023b36 <HAL_TIM_ConfigClockSource+0xf6>
 8023b00:	2b70      	cmp	r3, #112	; 0x70
 8023b02:	d87b      	bhi.n	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023b04:	2b60      	cmp	r3, #96	; 0x60
 8023b06:	d050      	beq.n	8023baa <HAL_TIM_ConfigClockSource+0x16a>
 8023b08:	2b60      	cmp	r3, #96	; 0x60
 8023b0a:	d877      	bhi.n	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023b0c:	2b50      	cmp	r3, #80	; 0x50
 8023b0e:	d03c      	beq.n	8023b8a <HAL_TIM_ConfigClockSource+0x14a>
 8023b10:	2b50      	cmp	r3, #80	; 0x50
 8023b12:	d873      	bhi.n	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023b14:	2b40      	cmp	r3, #64	; 0x40
 8023b16:	d058      	beq.n	8023bca <HAL_TIM_ConfigClockSource+0x18a>
 8023b18:	2b40      	cmp	r3, #64	; 0x40
 8023b1a:	d86f      	bhi.n	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023b1c:	2b30      	cmp	r3, #48	; 0x30
 8023b1e:	d064      	beq.n	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023b20:	2b30      	cmp	r3, #48	; 0x30
 8023b22:	d86b      	bhi.n	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023b24:	2b20      	cmp	r3, #32
 8023b26:	d060      	beq.n	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023b28:	2b20      	cmp	r3, #32
 8023b2a:	d867      	bhi.n	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	d05c      	beq.n	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023b30:	2b10      	cmp	r3, #16
 8023b32:	d05a      	beq.n	8023bea <HAL_TIM_ConfigClockSource+0x1aa>
 8023b34:	e062      	b.n	8023bfc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	6818      	ldr	r0, [r3, #0]
 8023b3a:	683b      	ldr	r3, [r7, #0]
 8023b3c:	6899      	ldr	r1, [r3, #8]
 8023b3e:	683b      	ldr	r3, [r7, #0]
 8023b40:	685a      	ldr	r2, [r3, #4]
 8023b42:	683b      	ldr	r3, [r7, #0]
 8023b44:	68db      	ldr	r3, [r3, #12]
 8023b46:	f000 fda3 	bl	8024690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8023b4a:	687b      	ldr	r3, [r7, #4]
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	689b      	ldr	r3, [r3, #8]
 8023b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8023b52:	68bb      	ldr	r3, [r7, #8]
 8023b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8023b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	681b      	ldr	r3, [r3, #0]
 8023b5e:	68ba      	ldr	r2, [r7, #8]
 8023b60:	609a      	str	r2, [r3, #8]
      break;
 8023b62:	e04f      	b.n	8023c04 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	6818      	ldr	r0, [r3, #0]
 8023b68:	683b      	ldr	r3, [r7, #0]
 8023b6a:	6899      	ldr	r1, [r3, #8]
 8023b6c:	683b      	ldr	r3, [r7, #0]
 8023b6e:	685a      	ldr	r2, [r3, #4]
 8023b70:	683b      	ldr	r3, [r7, #0]
 8023b72:	68db      	ldr	r3, [r3, #12]
 8023b74:	f000 fd8c 	bl	8024690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	681b      	ldr	r3, [r3, #0]
 8023b7c:	689a      	ldr	r2, [r3, #8]
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	681b      	ldr	r3, [r3, #0]
 8023b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8023b86:	609a      	str	r2, [r3, #8]
      break;
 8023b88:	e03c      	b.n	8023c04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	6818      	ldr	r0, [r3, #0]
 8023b8e:	683b      	ldr	r3, [r7, #0]
 8023b90:	6859      	ldr	r1, [r3, #4]
 8023b92:	683b      	ldr	r3, [r7, #0]
 8023b94:	68db      	ldr	r3, [r3, #12]
 8023b96:	461a      	mov	r2, r3
 8023b98:	f000 fc46 	bl	8024428 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8023b9c:	687b      	ldr	r3, [r7, #4]
 8023b9e:	681b      	ldr	r3, [r3, #0]
 8023ba0:	2150      	movs	r1, #80	; 0x50
 8023ba2:	4618      	mov	r0, r3
 8023ba4:	f000 fd56 	bl	8024654 <TIM_ITRx_SetConfig>
      break;
 8023ba8:	e02c      	b.n	8023c04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	6818      	ldr	r0, [r3, #0]
 8023bae:	683b      	ldr	r3, [r7, #0]
 8023bb0:	6859      	ldr	r1, [r3, #4]
 8023bb2:	683b      	ldr	r3, [r7, #0]
 8023bb4:	68db      	ldr	r3, [r3, #12]
 8023bb6:	461a      	mov	r2, r3
 8023bb8:	f000 fca2 	bl	8024500 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8023bbc:	687b      	ldr	r3, [r7, #4]
 8023bbe:	681b      	ldr	r3, [r3, #0]
 8023bc0:	2160      	movs	r1, #96	; 0x60
 8023bc2:	4618      	mov	r0, r3
 8023bc4:	f000 fd46 	bl	8024654 <TIM_ITRx_SetConfig>
      break;
 8023bc8:	e01c      	b.n	8023c04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	6818      	ldr	r0, [r3, #0]
 8023bce:	683b      	ldr	r3, [r7, #0]
 8023bd0:	6859      	ldr	r1, [r3, #4]
 8023bd2:	683b      	ldr	r3, [r7, #0]
 8023bd4:	68db      	ldr	r3, [r3, #12]
 8023bd6:	461a      	mov	r2, r3
 8023bd8:	f000 fc26 	bl	8024428 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8023bdc:	687b      	ldr	r3, [r7, #4]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	2140      	movs	r1, #64	; 0x40
 8023be2:	4618      	mov	r0, r3
 8023be4:	f000 fd36 	bl	8024654 <TIM_ITRx_SetConfig>
      break;
 8023be8:	e00c      	b.n	8023c04 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8023bea:	687b      	ldr	r3, [r7, #4]
 8023bec:	681a      	ldr	r2, [r3, #0]
 8023bee:	683b      	ldr	r3, [r7, #0]
 8023bf0:	681b      	ldr	r3, [r3, #0]
 8023bf2:	4619      	mov	r1, r3
 8023bf4:	4610      	mov	r0, r2
 8023bf6:	f000 fd2d 	bl	8024654 <TIM_ITRx_SetConfig>
      break;
 8023bfa:	e003      	b.n	8023c04 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8023bfc:	2301      	movs	r3, #1
 8023bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8023c00:	e000      	b.n	8023c04 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8023c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	2201      	movs	r2, #1
 8023c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8023c0c:	687b      	ldr	r3, [r7, #4]
 8023c0e:	2200      	movs	r2, #0
 8023c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8023c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8023c16:	4618      	mov	r0, r3
 8023c18:	3710      	adds	r7, #16
 8023c1a:	46bd      	mov	sp, r7
 8023c1c:	bd80      	pop	{r7, pc}
 8023c1e:	bf00      	nop
 8023c20:	ffceff88 	.word	0xffceff88
 8023c24:	00100040 	.word	0x00100040
 8023c28:	00100030 	.word	0x00100030
 8023c2c:	00100020 	.word	0x00100020

08023c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8023c30:	b480      	push	{r7}
 8023c32:	b085      	sub	sp, #20
 8023c34:	af00      	add	r7, sp, #0
 8023c36:	6078      	str	r0, [r7, #4]
 8023c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	681b      	ldr	r3, [r3, #0]
 8023c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8023c40:	687b      	ldr	r3, [r7, #4]
 8023c42:	4a44      	ldr	r2, [pc, #272]	; (8023d54 <TIM_Base_SetConfig+0x124>)
 8023c44:	4293      	cmp	r3, r2
 8023c46:	d013      	beq.n	8023c70 <TIM_Base_SetConfig+0x40>
 8023c48:	687b      	ldr	r3, [r7, #4]
 8023c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023c4e:	d00f      	beq.n	8023c70 <TIM_Base_SetConfig+0x40>
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	4a41      	ldr	r2, [pc, #260]	; (8023d58 <TIM_Base_SetConfig+0x128>)
 8023c54:	4293      	cmp	r3, r2
 8023c56:	d00b      	beq.n	8023c70 <TIM_Base_SetConfig+0x40>
 8023c58:	687b      	ldr	r3, [r7, #4]
 8023c5a:	4a40      	ldr	r2, [pc, #256]	; (8023d5c <TIM_Base_SetConfig+0x12c>)
 8023c5c:	4293      	cmp	r3, r2
 8023c5e:	d007      	beq.n	8023c70 <TIM_Base_SetConfig+0x40>
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	4a3f      	ldr	r2, [pc, #252]	; (8023d60 <TIM_Base_SetConfig+0x130>)
 8023c64:	4293      	cmp	r3, r2
 8023c66:	d003      	beq.n	8023c70 <TIM_Base_SetConfig+0x40>
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	4a3e      	ldr	r2, [pc, #248]	; (8023d64 <TIM_Base_SetConfig+0x134>)
 8023c6c:	4293      	cmp	r3, r2
 8023c6e:	d108      	bne.n	8023c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8023c70:	68fb      	ldr	r3, [r7, #12]
 8023c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8023c78:	683b      	ldr	r3, [r7, #0]
 8023c7a:	685b      	ldr	r3, [r3, #4]
 8023c7c:	68fa      	ldr	r2, [r7, #12]
 8023c7e:	4313      	orrs	r3, r2
 8023c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	4a33      	ldr	r2, [pc, #204]	; (8023d54 <TIM_Base_SetConfig+0x124>)
 8023c86:	4293      	cmp	r3, r2
 8023c88:	d027      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023c90:	d023      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	4a30      	ldr	r2, [pc, #192]	; (8023d58 <TIM_Base_SetConfig+0x128>)
 8023c96:	4293      	cmp	r3, r2
 8023c98:	d01f      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023c9a:	687b      	ldr	r3, [r7, #4]
 8023c9c:	4a2f      	ldr	r2, [pc, #188]	; (8023d5c <TIM_Base_SetConfig+0x12c>)
 8023c9e:	4293      	cmp	r3, r2
 8023ca0:	d01b      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	4a2e      	ldr	r2, [pc, #184]	; (8023d60 <TIM_Base_SetConfig+0x130>)
 8023ca6:	4293      	cmp	r3, r2
 8023ca8:	d017      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	4a2d      	ldr	r2, [pc, #180]	; (8023d64 <TIM_Base_SetConfig+0x134>)
 8023cae:	4293      	cmp	r3, r2
 8023cb0:	d013      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023cb2:	687b      	ldr	r3, [r7, #4]
 8023cb4:	4a2c      	ldr	r2, [pc, #176]	; (8023d68 <TIM_Base_SetConfig+0x138>)
 8023cb6:	4293      	cmp	r3, r2
 8023cb8:	d00f      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023cba:	687b      	ldr	r3, [r7, #4]
 8023cbc:	4a2b      	ldr	r2, [pc, #172]	; (8023d6c <TIM_Base_SetConfig+0x13c>)
 8023cbe:	4293      	cmp	r3, r2
 8023cc0:	d00b      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023cc2:	687b      	ldr	r3, [r7, #4]
 8023cc4:	4a2a      	ldr	r2, [pc, #168]	; (8023d70 <TIM_Base_SetConfig+0x140>)
 8023cc6:	4293      	cmp	r3, r2
 8023cc8:	d007      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	4a29      	ldr	r2, [pc, #164]	; (8023d74 <TIM_Base_SetConfig+0x144>)
 8023cce:	4293      	cmp	r3, r2
 8023cd0:	d003      	beq.n	8023cda <TIM_Base_SetConfig+0xaa>
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	4a28      	ldr	r2, [pc, #160]	; (8023d78 <TIM_Base_SetConfig+0x148>)
 8023cd6:	4293      	cmp	r3, r2
 8023cd8:	d108      	bne.n	8023cec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8023cda:	68fb      	ldr	r3, [r7, #12]
 8023cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8023ce2:	683b      	ldr	r3, [r7, #0]
 8023ce4:	68db      	ldr	r3, [r3, #12]
 8023ce6:	68fa      	ldr	r2, [r7, #12]
 8023ce8:	4313      	orrs	r3, r2
 8023cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8023cec:	68fb      	ldr	r3, [r7, #12]
 8023cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8023cf2:	683b      	ldr	r3, [r7, #0]
 8023cf4:	695b      	ldr	r3, [r3, #20]
 8023cf6:	4313      	orrs	r3, r2
 8023cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	68fa      	ldr	r2, [r7, #12]
 8023cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8023d00:	683b      	ldr	r3, [r7, #0]
 8023d02:	689a      	ldr	r2, [r3, #8]
 8023d04:	687b      	ldr	r3, [r7, #4]
 8023d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8023d08:	683b      	ldr	r3, [r7, #0]
 8023d0a:	681a      	ldr	r2, [r3, #0]
 8023d0c:	687b      	ldr	r3, [r7, #4]
 8023d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8023d10:	687b      	ldr	r3, [r7, #4]
 8023d12:	4a10      	ldr	r2, [pc, #64]	; (8023d54 <TIM_Base_SetConfig+0x124>)
 8023d14:	4293      	cmp	r3, r2
 8023d16:	d00f      	beq.n	8023d38 <TIM_Base_SetConfig+0x108>
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	4a12      	ldr	r2, [pc, #72]	; (8023d64 <TIM_Base_SetConfig+0x134>)
 8023d1c:	4293      	cmp	r3, r2
 8023d1e:	d00b      	beq.n	8023d38 <TIM_Base_SetConfig+0x108>
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	4a11      	ldr	r2, [pc, #68]	; (8023d68 <TIM_Base_SetConfig+0x138>)
 8023d24:	4293      	cmp	r3, r2
 8023d26:	d007      	beq.n	8023d38 <TIM_Base_SetConfig+0x108>
 8023d28:	687b      	ldr	r3, [r7, #4]
 8023d2a:	4a10      	ldr	r2, [pc, #64]	; (8023d6c <TIM_Base_SetConfig+0x13c>)
 8023d2c:	4293      	cmp	r3, r2
 8023d2e:	d003      	beq.n	8023d38 <TIM_Base_SetConfig+0x108>
 8023d30:	687b      	ldr	r3, [r7, #4]
 8023d32:	4a0f      	ldr	r2, [pc, #60]	; (8023d70 <TIM_Base_SetConfig+0x140>)
 8023d34:	4293      	cmp	r3, r2
 8023d36:	d103      	bne.n	8023d40 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8023d38:	683b      	ldr	r3, [r7, #0]
 8023d3a:	691a      	ldr	r2, [r3, #16]
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	2201      	movs	r2, #1
 8023d44:	615a      	str	r2, [r3, #20]
}
 8023d46:	bf00      	nop
 8023d48:	3714      	adds	r7, #20
 8023d4a:	46bd      	mov	sp, r7
 8023d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d50:	4770      	bx	lr
 8023d52:	bf00      	nop
 8023d54:	40010000 	.word	0x40010000
 8023d58:	40000400 	.word	0x40000400
 8023d5c:	40000800 	.word	0x40000800
 8023d60:	40000c00 	.word	0x40000c00
 8023d64:	40010400 	.word	0x40010400
 8023d68:	40014000 	.word	0x40014000
 8023d6c:	40014400 	.word	0x40014400
 8023d70:	40014800 	.word	0x40014800
 8023d74:	4000e000 	.word	0x4000e000
 8023d78:	4000e400 	.word	0x4000e400

08023d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8023d7c:	b480      	push	{r7}
 8023d7e:	b087      	sub	sp, #28
 8023d80:	af00      	add	r7, sp, #0
 8023d82:	6078      	str	r0, [r7, #4]
 8023d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	6a1b      	ldr	r3, [r3, #32]
 8023d8a:	f023 0201 	bic.w	r2, r3, #1
 8023d8e:	687b      	ldr	r3, [r7, #4]
 8023d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	6a1b      	ldr	r3, [r3, #32]
 8023d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023d98:	687b      	ldr	r3, [r7, #4]
 8023d9a:	685b      	ldr	r3, [r3, #4]
 8023d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8023d9e:	687b      	ldr	r3, [r7, #4]
 8023da0:	699b      	ldr	r3, [r3, #24]
 8023da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8023da4:	68fa      	ldr	r2, [r7, #12]
 8023da6:	4b37      	ldr	r3, [pc, #220]	; (8023e84 <TIM_OC1_SetConfig+0x108>)
 8023da8:	4013      	ands	r3, r2
 8023daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8023dac:	68fb      	ldr	r3, [r7, #12]
 8023dae:	f023 0303 	bic.w	r3, r3, #3
 8023db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8023db4:	683b      	ldr	r3, [r7, #0]
 8023db6:	681b      	ldr	r3, [r3, #0]
 8023db8:	68fa      	ldr	r2, [r7, #12]
 8023dba:	4313      	orrs	r3, r2
 8023dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8023dbe:	697b      	ldr	r3, [r7, #20]
 8023dc0:	f023 0302 	bic.w	r3, r3, #2
 8023dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8023dc6:	683b      	ldr	r3, [r7, #0]
 8023dc8:	689b      	ldr	r3, [r3, #8]
 8023dca:	697a      	ldr	r2, [r7, #20]
 8023dcc:	4313      	orrs	r3, r2
 8023dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	4a2d      	ldr	r2, [pc, #180]	; (8023e88 <TIM_OC1_SetConfig+0x10c>)
 8023dd4:	4293      	cmp	r3, r2
 8023dd6:	d00f      	beq.n	8023df8 <TIM_OC1_SetConfig+0x7c>
 8023dd8:	687b      	ldr	r3, [r7, #4]
 8023dda:	4a2c      	ldr	r2, [pc, #176]	; (8023e8c <TIM_OC1_SetConfig+0x110>)
 8023ddc:	4293      	cmp	r3, r2
 8023dde:	d00b      	beq.n	8023df8 <TIM_OC1_SetConfig+0x7c>
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	4a2b      	ldr	r2, [pc, #172]	; (8023e90 <TIM_OC1_SetConfig+0x114>)
 8023de4:	4293      	cmp	r3, r2
 8023de6:	d007      	beq.n	8023df8 <TIM_OC1_SetConfig+0x7c>
 8023de8:	687b      	ldr	r3, [r7, #4]
 8023dea:	4a2a      	ldr	r2, [pc, #168]	; (8023e94 <TIM_OC1_SetConfig+0x118>)
 8023dec:	4293      	cmp	r3, r2
 8023dee:	d003      	beq.n	8023df8 <TIM_OC1_SetConfig+0x7c>
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	4a29      	ldr	r2, [pc, #164]	; (8023e98 <TIM_OC1_SetConfig+0x11c>)
 8023df4:	4293      	cmp	r3, r2
 8023df6:	d10c      	bne.n	8023e12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8023df8:	697b      	ldr	r3, [r7, #20]
 8023dfa:	f023 0308 	bic.w	r3, r3, #8
 8023dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8023e00:	683b      	ldr	r3, [r7, #0]
 8023e02:	68db      	ldr	r3, [r3, #12]
 8023e04:	697a      	ldr	r2, [r7, #20]
 8023e06:	4313      	orrs	r3, r2
 8023e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8023e0a:	697b      	ldr	r3, [r7, #20]
 8023e0c:	f023 0304 	bic.w	r3, r3, #4
 8023e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	4a1c      	ldr	r2, [pc, #112]	; (8023e88 <TIM_OC1_SetConfig+0x10c>)
 8023e16:	4293      	cmp	r3, r2
 8023e18:	d00f      	beq.n	8023e3a <TIM_OC1_SetConfig+0xbe>
 8023e1a:	687b      	ldr	r3, [r7, #4]
 8023e1c:	4a1b      	ldr	r2, [pc, #108]	; (8023e8c <TIM_OC1_SetConfig+0x110>)
 8023e1e:	4293      	cmp	r3, r2
 8023e20:	d00b      	beq.n	8023e3a <TIM_OC1_SetConfig+0xbe>
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	4a1a      	ldr	r2, [pc, #104]	; (8023e90 <TIM_OC1_SetConfig+0x114>)
 8023e26:	4293      	cmp	r3, r2
 8023e28:	d007      	beq.n	8023e3a <TIM_OC1_SetConfig+0xbe>
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	4a19      	ldr	r2, [pc, #100]	; (8023e94 <TIM_OC1_SetConfig+0x118>)
 8023e2e:	4293      	cmp	r3, r2
 8023e30:	d003      	beq.n	8023e3a <TIM_OC1_SetConfig+0xbe>
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	4a18      	ldr	r2, [pc, #96]	; (8023e98 <TIM_OC1_SetConfig+0x11c>)
 8023e36:	4293      	cmp	r3, r2
 8023e38:	d111      	bne.n	8023e5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8023e3a:	693b      	ldr	r3, [r7, #16]
 8023e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8023e42:	693b      	ldr	r3, [r7, #16]
 8023e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8023e4a:	683b      	ldr	r3, [r7, #0]
 8023e4c:	695b      	ldr	r3, [r3, #20]
 8023e4e:	693a      	ldr	r2, [r7, #16]
 8023e50:	4313      	orrs	r3, r2
 8023e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8023e54:	683b      	ldr	r3, [r7, #0]
 8023e56:	699b      	ldr	r3, [r3, #24]
 8023e58:	693a      	ldr	r2, [r7, #16]
 8023e5a:	4313      	orrs	r3, r2
 8023e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023e5e:	687b      	ldr	r3, [r7, #4]
 8023e60:	693a      	ldr	r2, [r7, #16]
 8023e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	68fa      	ldr	r2, [r7, #12]
 8023e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8023e6a:	683b      	ldr	r3, [r7, #0]
 8023e6c:	685a      	ldr	r2, [r3, #4]
 8023e6e:	687b      	ldr	r3, [r7, #4]
 8023e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023e72:	687b      	ldr	r3, [r7, #4]
 8023e74:	697a      	ldr	r2, [r7, #20]
 8023e76:	621a      	str	r2, [r3, #32]
}
 8023e78:	bf00      	nop
 8023e7a:	371c      	adds	r7, #28
 8023e7c:	46bd      	mov	sp, r7
 8023e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e82:	4770      	bx	lr
 8023e84:	fffeff8f 	.word	0xfffeff8f
 8023e88:	40010000 	.word	0x40010000
 8023e8c:	40010400 	.word	0x40010400
 8023e90:	40014000 	.word	0x40014000
 8023e94:	40014400 	.word	0x40014400
 8023e98:	40014800 	.word	0x40014800

08023e9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8023e9c:	b480      	push	{r7}
 8023e9e:	b087      	sub	sp, #28
 8023ea0:	af00      	add	r7, sp, #0
 8023ea2:	6078      	str	r0, [r7, #4]
 8023ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8023ea6:	687b      	ldr	r3, [r7, #4]
 8023ea8:	6a1b      	ldr	r3, [r3, #32]
 8023eaa:	f023 0210 	bic.w	r2, r3, #16
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023eb2:	687b      	ldr	r3, [r7, #4]
 8023eb4:	6a1b      	ldr	r3, [r3, #32]
 8023eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	685b      	ldr	r3, [r3, #4]
 8023ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8023ebe:	687b      	ldr	r3, [r7, #4]
 8023ec0:	699b      	ldr	r3, [r3, #24]
 8023ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8023ec4:	68fa      	ldr	r2, [r7, #12]
 8023ec6:	4b34      	ldr	r3, [pc, #208]	; (8023f98 <TIM_OC2_SetConfig+0xfc>)
 8023ec8:	4013      	ands	r3, r2
 8023eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8023ed4:	683b      	ldr	r3, [r7, #0]
 8023ed6:	681b      	ldr	r3, [r3, #0]
 8023ed8:	021b      	lsls	r3, r3, #8
 8023eda:	68fa      	ldr	r2, [r7, #12]
 8023edc:	4313      	orrs	r3, r2
 8023ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8023ee0:	697b      	ldr	r3, [r7, #20]
 8023ee2:	f023 0320 	bic.w	r3, r3, #32
 8023ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8023ee8:	683b      	ldr	r3, [r7, #0]
 8023eea:	689b      	ldr	r3, [r3, #8]
 8023eec:	011b      	lsls	r3, r3, #4
 8023eee:	697a      	ldr	r2, [r7, #20]
 8023ef0:	4313      	orrs	r3, r2
 8023ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8023ef4:	687b      	ldr	r3, [r7, #4]
 8023ef6:	4a29      	ldr	r2, [pc, #164]	; (8023f9c <TIM_OC2_SetConfig+0x100>)
 8023ef8:	4293      	cmp	r3, r2
 8023efa:	d003      	beq.n	8023f04 <TIM_OC2_SetConfig+0x68>
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	4a28      	ldr	r2, [pc, #160]	; (8023fa0 <TIM_OC2_SetConfig+0x104>)
 8023f00:	4293      	cmp	r3, r2
 8023f02:	d10d      	bne.n	8023f20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8023f04:	697b      	ldr	r3, [r7, #20]
 8023f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8023f0c:	683b      	ldr	r3, [r7, #0]
 8023f0e:	68db      	ldr	r3, [r3, #12]
 8023f10:	011b      	lsls	r3, r3, #4
 8023f12:	697a      	ldr	r2, [r7, #20]
 8023f14:	4313      	orrs	r3, r2
 8023f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8023f18:	697b      	ldr	r3, [r7, #20]
 8023f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023f1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8023f20:	687b      	ldr	r3, [r7, #4]
 8023f22:	4a1e      	ldr	r2, [pc, #120]	; (8023f9c <TIM_OC2_SetConfig+0x100>)
 8023f24:	4293      	cmp	r3, r2
 8023f26:	d00f      	beq.n	8023f48 <TIM_OC2_SetConfig+0xac>
 8023f28:	687b      	ldr	r3, [r7, #4]
 8023f2a:	4a1d      	ldr	r2, [pc, #116]	; (8023fa0 <TIM_OC2_SetConfig+0x104>)
 8023f2c:	4293      	cmp	r3, r2
 8023f2e:	d00b      	beq.n	8023f48 <TIM_OC2_SetConfig+0xac>
 8023f30:	687b      	ldr	r3, [r7, #4]
 8023f32:	4a1c      	ldr	r2, [pc, #112]	; (8023fa4 <TIM_OC2_SetConfig+0x108>)
 8023f34:	4293      	cmp	r3, r2
 8023f36:	d007      	beq.n	8023f48 <TIM_OC2_SetConfig+0xac>
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	4a1b      	ldr	r2, [pc, #108]	; (8023fa8 <TIM_OC2_SetConfig+0x10c>)
 8023f3c:	4293      	cmp	r3, r2
 8023f3e:	d003      	beq.n	8023f48 <TIM_OC2_SetConfig+0xac>
 8023f40:	687b      	ldr	r3, [r7, #4]
 8023f42:	4a1a      	ldr	r2, [pc, #104]	; (8023fac <TIM_OC2_SetConfig+0x110>)
 8023f44:	4293      	cmp	r3, r2
 8023f46:	d113      	bne.n	8023f70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8023f48:	693b      	ldr	r3, [r7, #16]
 8023f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8023f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8023f50:	693b      	ldr	r3, [r7, #16]
 8023f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8023f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8023f58:	683b      	ldr	r3, [r7, #0]
 8023f5a:	695b      	ldr	r3, [r3, #20]
 8023f5c:	009b      	lsls	r3, r3, #2
 8023f5e:	693a      	ldr	r2, [r7, #16]
 8023f60:	4313      	orrs	r3, r2
 8023f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8023f64:	683b      	ldr	r3, [r7, #0]
 8023f66:	699b      	ldr	r3, [r3, #24]
 8023f68:	009b      	lsls	r3, r3, #2
 8023f6a:	693a      	ldr	r2, [r7, #16]
 8023f6c:	4313      	orrs	r3, r2
 8023f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	693a      	ldr	r2, [r7, #16]
 8023f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8023f76:	687b      	ldr	r3, [r7, #4]
 8023f78:	68fa      	ldr	r2, [r7, #12]
 8023f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8023f7c:	683b      	ldr	r3, [r7, #0]
 8023f7e:	685a      	ldr	r2, [r3, #4]
 8023f80:	687b      	ldr	r3, [r7, #4]
 8023f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	697a      	ldr	r2, [r7, #20]
 8023f88:	621a      	str	r2, [r3, #32]
}
 8023f8a:	bf00      	nop
 8023f8c:	371c      	adds	r7, #28
 8023f8e:	46bd      	mov	sp, r7
 8023f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f94:	4770      	bx	lr
 8023f96:	bf00      	nop
 8023f98:	feff8fff 	.word	0xfeff8fff
 8023f9c:	40010000 	.word	0x40010000
 8023fa0:	40010400 	.word	0x40010400
 8023fa4:	40014000 	.word	0x40014000
 8023fa8:	40014400 	.word	0x40014400
 8023fac:	40014800 	.word	0x40014800

08023fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8023fb0:	b480      	push	{r7}
 8023fb2:	b087      	sub	sp, #28
 8023fb4:	af00      	add	r7, sp, #0
 8023fb6:	6078      	str	r0, [r7, #4]
 8023fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	6a1b      	ldr	r3, [r3, #32]
 8023fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023fc6:	687b      	ldr	r3, [r7, #4]
 8023fc8:	6a1b      	ldr	r3, [r3, #32]
 8023fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	685b      	ldr	r3, [r3, #4]
 8023fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8023fd2:	687b      	ldr	r3, [r7, #4]
 8023fd4:	69db      	ldr	r3, [r3, #28]
 8023fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8023fd8:	68fa      	ldr	r2, [r7, #12]
 8023fda:	4b33      	ldr	r3, [pc, #204]	; (80240a8 <TIM_OC3_SetConfig+0xf8>)
 8023fdc:	4013      	ands	r3, r2
 8023fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8023fe0:	68fb      	ldr	r3, [r7, #12]
 8023fe2:	f023 0303 	bic.w	r3, r3, #3
 8023fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8023fe8:	683b      	ldr	r3, [r7, #0]
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	68fa      	ldr	r2, [r7, #12]
 8023fee:	4313      	orrs	r3, r2
 8023ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8023ff2:	697b      	ldr	r3, [r7, #20]
 8023ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8023ffa:	683b      	ldr	r3, [r7, #0]
 8023ffc:	689b      	ldr	r3, [r3, #8]
 8023ffe:	021b      	lsls	r3, r3, #8
 8024000:	697a      	ldr	r2, [r7, #20]
 8024002:	4313      	orrs	r3, r2
 8024004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8024006:	687b      	ldr	r3, [r7, #4]
 8024008:	4a28      	ldr	r2, [pc, #160]	; (80240ac <TIM_OC3_SetConfig+0xfc>)
 802400a:	4293      	cmp	r3, r2
 802400c:	d003      	beq.n	8024016 <TIM_OC3_SetConfig+0x66>
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	4a27      	ldr	r2, [pc, #156]	; (80240b0 <TIM_OC3_SetConfig+0x100>)
 8024012:	4293      	cmp	r3, r2
 8024014:	d10d      	bne.n	8024032 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8024016:	697b      	ldr	r3, [r7, #20]
 8024018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802401c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802401e:	683b      	ldr	r3, [r7, #0]
 8024020:	68db      	ldr	r3, [r3, #12]
 8024022:	021b      	lsls	r3, r3, #8
 8024024:	697a      	ldr	r2, [r7, #20]
 8024026:	4313      	orrs	r3, r2
 8024028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802402a:	697b      	ldr	r3, [r7, #20]
 802402c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8024032:	687b      	ldr	r3, [r7, #4]
 8024034:	4a1d      	ldr	r2, [pc, #116]	; (80240ac <TIM_OC3_SetConfig+0xfc>)
 8024036:	4293      	cmp	r3, r2
 8024038:	d00f      	beq.n	802405a <TIM_OC3_SetConfig+0xaa>
 802403a:	687b      	ldr	r3, [r7, #4]
 802403c:	4a1c      	ldr	r2, [pc, #112]	; (80240b0 <TIM_OC3_SetConfig+0x100>)
 802403e:	4293      	cmp	r3, r2
 8024040:	d00b      	beq.n	802405a <TIM_OC3_SetConfig+0xaa>
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	4a1b      	ldr	r2, [pc, #108]	; (80240b4 <TIM_OC3_SetConfig+0x104>)
 8024046:	4293      	cmp	r3, r2
 8024048:	d007      	beq.n	802405a <TIM_OC3_SetConfig+0xaa>
 802404a:	687b      	ldr	r3, [r7, #4]
 802404c:	4a1a      	ldr	r2, [pc, #104]	; (80240b8 <TIM_OC3_SetConfig+0x108>)
 802404e:	4293      	cmp	r3, r2
 8024050:	d003      	beq.n	802405a <TIM_OC3_SetConfig+0xaa>
 8024052:	687b      	ldr	r3, [r7, #4]
 8024054:	4a19      	ldr	r2, [pc, #100]	; (80240bc <TIM_OC3_SetConfig+0x10c>)
 8024056:	4293      	cmp	r3, r2
 8024058:	d113      	bne.n	8024082 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802405a:	693b      	ldr	r3, [r7, #16]
 802405c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8024062:	693b      	ldr	r3, [r7, #16]
 8024064:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8024068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802406a:	683b      	ldr	r3, [r7, #0]
 802406c:	695b      	ldr	r3, [r3, #20]
 802406e:	011b      	lsls	r3, r3, #4
 8024070:	693a      	ldr	r2, [r7, #16]
 8024072:	4313      	orrs	r3, r2
 8024074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8024076:	683b      	ldr	r3, [r7, #0]
 8024078:	699b      	ldr	r3, [r3, #24]
 802407a:	011b      	lsls	r3, r3, #4
 802407c:	693a      	ldr	r2, [r7, #16]
 802407e:	4313      	orrs	r3, r2
 8024080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	693a      	ldr	r2, [r7, #16]
 8024086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	68fa      	ldr	r2, [r7, #12]
 802408c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802408e:	683b      	ldr	r3, [r7, #0]
 8024090:	685a      	ldr	r2, [r3, #4]
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024096:	687b      	ldr	r3, [r7, #4]
 8024098:	697a      	ldr	r2, [r7, #20]
 802409a:	621a      	str	r2, [r3, #32]
}
 802409c:	bf00      	nop
 802409e:	371c      	adds	r7, #28
 80240a0:	46bd      	mov	sp, r7
 80240a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240a6:	4770      	bx	lr
 80240a8:	fffeff8f 	.word	0xfffeff8f
 80240ac:	40010000 	.word	0x40010000
 80240b0:	40010400 	.word	0x40010400
 80240b4:	40014000 	.word	0x40014000
 80240b8:	40014400 	.word	0x40014400
 80240bc:	40014800 	.word	0x40014800

080240c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80240c0:	b480      	push	{r7}
 80240c2:	b087      	sub	sp, #28
 80240c4:	af00      	add	r7, sp, #0
 80240c6:	6078      	str	r0, [r7, #4]
 80240c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	6a1b      	ldr	r3, [r3, #32]
 80240ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80240d6:	687b      	ldr	r3, [r7, #4]
 80240d8:	6a1b      	ldr	r3, [r3, #32]
 80240da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80240dc:	687b      	ldr	r3, [r7, #4]
 80240de:	685b      	ldr	r3, [r3, #4]
 80240e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	69db      	ldr	r3, [r3, #28]
 80240e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80240e8:	68fa      	ldr	r2, [r7, #12]
 80240ea:	4b24      	ldr	r3, [pc, #144]	; (802417c <TIM_OC4_SetConfig+0xbc>)
 80240ec:	4013      	ands	r3, r2
 80240ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80240f0:	68fb      	ldr	r3, [r7, #12]
 80240f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80240f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80240f8:	683b      	ldr	r3, [r7, #0]
 80240fa:	681b      	ldr	r3, [r3, #0]
 80240fc:	021b      	lsls	r3, r3, #8
 80240fe:	68fa      	ldr	r2, [r7, #12]
 8024100:	4313      	orrs	r3, r2
 8024102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8024104:	693b      	ldr	r3, [r7, #16]
 8024106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802410a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802410c:	683b      	ldr	r3, [r7, #0]
 802410e:	689b      	ldr	r3, [r3, #8]
 8024110:	031b      	lsls	r3, r3, #12
 8024112:	693a      	ldr	r2, [r7, #16]
 8024114:	4313      	orrs	r3, r2
 8024116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	4a19      	ldr	r2, [pc, #100]	; (8024180 <TIM_OC4_SetConfig+0xc0>)
 802411c:	4293      	cmp	r3, r2
 802411e:	d00f      	beq.n	8024140 <TIM_OC4_SetConfig+0x80>
 8024120:	687b      	ldr	r3, [r7, #4]
 8024122:	4a18      	ldr	r2, [pc, #96]	; (8024184 <TIM_OC4_SetConfig+0xc4>)
 8024124:	4293      	cmp	r3, r2
 8024126:	d00b      	beq.n	8024140 <TIM_OC4_SetConfig+0x80>
 8024128:	687b      	ldr	r3, [r7, #4]
 802412a:	4a17      	ldr	r2, [pc, #92]	; (8024188 <TIM_OC4_SetConfig+0xc8>)
 802412c:	4293      	cmp	r3, r2
 802412e:	d007      	beq.n	8024140 <TIM_OC4_SetConfig+0x80>
 8024130:	687b      	ldr	r3, [r7, #4]
 8024132:	4a16      	ldr	r2, [pc, #88]	; (802418c <TIM_OC4_SetConfig+0xcc>)
 8024134:	4293      	cmp	r3, r2
 8024136:	d003      	beq.n	8024140 <TIM_OC4_SetConfig+0x80>
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	4a15      	ldr	r2, [pc, #84]	; (8024190 <TIM_OC4_SetConfig+0xd0>)
 802413c:	4293      	cmp	r3, r2
 802413e:	d109      	bne.n	8024154 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8024140:	697b      	ldr	r3, [r7, #20]
 8024142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8024146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8024148:	683b      	ldr	r3, [r7, #0]
 802414a:	695b      	ldr	r3, [r3, #20]
 802414c:	019b      	lsls	r3, r3, #6
 802414e:	697a      	ldr	r2, [r7, #20]
 8024150:	4313      	orrs	r3, r2
 8024152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	697a      	ldr	r2, [r7, #20]
 8024158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	68fa      	ldr	r2, [r7, #12]
 802415e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8024160:	683b      	ldr	r3, [r7, #0]
 8024162:	685a      	ldr	r2, [r3, #4]
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	693a      	ldr	r2, [r7, #16]
 802416c:	621a      	str	r2, [r3, #32]
}
 802416e:	bf00      	nop
 8024170:	371c      	adds	r7, #28
 8024172:	46bd      	mov	sp, r7
 8024174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024178:	4770      	bx	lr
 802417a:	bf00      	nop
 802417c:	feff8fff 	.word	0xfeff8fff
 8024180:	40010000 	.word	0x40010000
 8024184:	40010400 	.word	0x40010400
 8024188:	40014000 	.word	0x40014000
 802418c:	40014400 	.word	0x40014400
 8024190:	40014800 	.word	0x40014800

08024194 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8024194:	b480      	push	{r7}
 8024196:	b087      	sub	sp, #28
 8024198:	af00      	add	r7, sp, #0
 802419a:	6078      	str	r0, [r7, #4]
 802419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 802419e:	687b      	ldr	r3, [r7, #4]
 80241a0:	6a1b      	ldr	r3, [r3, #32]
 80241a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80241a6:	687b      	ldr	r3, [r7, #4]
 80241a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	6a1b      	ldr	r3, [r3, #32]
 80241ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80241b0:	687b      	ldr	r3, [r7, #4]
 80241b2:	685b      	ldr	r3, [r3, #4]
 80241b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80241b6:	687b      	ldr	r3, [r7, #4]
 80241b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80241ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80241bc:	68fa      	ldr	r2, [r7, #12]
 80241be:	4b21      	ldr	r3, [pc, #132]	; (8024244 <TIM_OC5_SetConfig+0xb0>)
 80241c0:	4013      	ands	r3, r2
 80241c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80241c4:	683b      	ldr	r3, [r7, #0]
 80241c6:	681b      	ldr	r3, [r3, #0]
 80241c8:	68fa      	ldr	r2, [r7, #12]
 80241ca:	4313      	orrs	r3, r2
 80241cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80241ce:	693b      	ldr	r3, [r7, #16]
 80241d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80241d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80241d6:	683b      	ldr	r3, [r7, #0]
 80241d8:	689b      	ldr	r3, [r3, #8]
 80241da:	041b      	lsls	r3, r3, #16
 80241dc:	693a      	ldr	r2, [r7, #16]
 80241de:	4313      	orrs	r3, r2
 80241e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	4a18      	ldr	r2, [pc, #96]	; (8024248 <TIM_OC5_SetConfig+0xb4>)
 80241e6:	4293      	cmp	r3, r2
 80241e8:	d00f      	beq.n	802420a <TIM_OC5_SetConfig+0x76>
 80241ea:	687b      	ldr	r3, [r7, #4]
 80241ec:	4a17      	ldr	r2, [pc, #92]	; (802424c <TIM_OC5_SetConfig+0xb8>)
 80241ee:	4293      	cmp	r3, r2
 80241f0:	d00b      	beq.n	802420a <TIM_OC5_SetConfig+0x76>
 80241f2:	687b      	ldr	r3, [r7, #4]
 80241f4:	4a16      	ldr	r2, [pc, #88]	; (8024250 <TIM_OC5_SetConfig+0xbc>)
 80241f6:	4293      	cmp	r3, r2
 80241f8:	d007      	beq.n	802420a <TIM_OC5_SetConfig+0x76>
 80241fa:	687b      	ldr	r3, [r7, #4]
 80241fc:	4a15      	ldr	r2, [pc, #84]	; (8024254 <TIM_OC5_SetConfig+0xc0>)
 80241fe:	4293      	cmp	r3, r2
 8024200:	d003      	beq.n	802420a <TIM_OC5_SetConfig+0x76>
 8024202:	687b      	ldr	r3, [r7, #4]
 8024204:	4a14      	ldr	r2, [pc, #80]	; (8024258 <TIM_OC5_SetConfig+0xc4>)
 8024206:	4293      	cmp	r3, r2
 8024208:	d109      	bne.n	802421e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 802420a:	697b      	ldr	r3, [r7, #20]
 802420c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8024210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8024212:	683b      	ldr	r3, [r7, #0]
 8024214:	695b      	ldr	r3, [r3, #20]
 8024216:	021b      	lsls	r3, r3, #8
 8024218:	697a      	ldr	r2, [r7, #20]
 802421a:	4313      	orrs	r3, r2
 802421c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	697a      	ldr	r2, [r7, #20]
 8024222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	68fa      	ldr	r2, [r7, #12]
 8024228:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 802422a:	683b      	ldr	r3, [r7, #0]
 802422c:	685a      	ldr	r2, [r3, #4]
 802422e:	687b      	ldr	r3, [r7, #4]
 8024230:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024232:	687b      	ldr	r3, [r7, #4]
 8024234:	693a      	ldr	r2, [r7, #16]
 8024236:	621a      	str	r2, [r3, #32]
}
 8024238:	bf00      	nop
 802423a:	371c      	adds	r7, #28
 802423c:	46bd      	mov	sp, r7
 802423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024242:	4770      	bx	lr
 8024244:	fffeff8f 	.word	0xfffeff8f
 8024248:	40010000 	.word	0x40010000
 802424c:	40010400 	.word	0x40010400
 8024250:	40014000 	.word	0x40014000
 8024254:	40014400 	.word	0x40014400
 8024258:	40014800 	.word	0x40014800

0802425c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 802425c:	b480      	push	{r7}
 802425e:	b087      	sub	sp, #28
 8024260:	af00      	add	r7, sp, #0
 8024262:	6078      	str	r0, [r7, #4]
 8024264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	6a1b      	ldr	r3, [r3, #32]
 802426a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 802426e:	687b      	ldr	r3, [r7, #4]
 8024270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024272:	687b      	ldr	r3, [r7, #4]
 8024274:	6a1b      	ldr	r3, [r3, #32]
 8024276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024278:	687b      	ldr	r3, [r7, #4]
 802427a:	685b      	ldr	r3, [r3, #4]
 802427c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802427e:	687b      	ldr	r3, [r7, #4]
 8024280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8024284:	68fa      	ldr	r2, [r7, #12]
 8024286:	4b22      	ldr	r3, [pc, #136]	; (8024310 <TIM_OC6_SetConfig+0xb4>)
 8024288:	4013      	ands	r3, r2
 802428a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802428c:	683b      	ldr	r3, [r7, #0]
 802428e:	681b      	ldr	r3, [r3, #0]
 8024290:	021b      	lsls	r3, r3, #8
 8024292:	68fa      	ldr	r2, [r7, #12]
 8024294:	4313      	orrs	r3, r2
 8024296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8024298:	693b      	ldr	r3, [r7, #16]
 802429a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80242a0:	683b      	ldr	r3, [r7, #0]
 80242a2:	689b      	ldr	r3, [r3, #8]
 80242a4:	051b      	lsls	r3, r3, #20
 80242a6:	693a      	ldr	r2, [r7, #16]
 80242a8:	4313      	orrs	r3, r2
 80242aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80242ac:	687b      	ldr	r3, [r7, #4]
 80242ae:	4a19      	ldr	r2, [pc, #100]	; (8024314 <TIM_OC6_SetConfig+0xb8>)
 80242b0:	4293      	cmp	r3, r2
 80242b2:	d00f      	beq.n	80242d4 <TIM_OC6_SetConfig+0x78>
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	4a18      	ldr	r2, [pc, #96]	; (8024318 <TIM_OC6_SetConfig+0xbc>)
 80242b8:	4293      	cmp	r3, r2
 80242ba:	d00b      	beq.n	80242d4 <TIM_OC6_SetConfig+0x78>
 80242bc:	687b      	ldr	r3, [r7, #4]
 80242be:	4a17      	ldr	r2, [pc, #92]	; (802431c <TIM_OC6_SetConfig+0xc0>)
 80242c0:	4293      	cmp	r3, r2
 80242c2:	d007      	beq.n	80242d4 <TIM_OC6_SetConfig+0x78>
 80242c4:	687b      	ldr	r3, [r7, #4]
 80242c6:	4a16      	ldr	r2, [pc, #88]	; (8024320 <TIM_OC6_SetConfig+0xc4>)
 80242c8:	4293      	cmp	r3, r2
 80242ca:	d003      	beq.n	80242d4 <TIM_OC6_SetConfig+0x78>
 80242cc:	687b      	ldr	r3, [r7, #4]
 80242ce:	4a15      	ldr	r2, [pc, #84]	; (8024324 <TIM_OC6_SetConfig+0xc8>)
 80242d0:	4293      	cmp	r3, r2
 80242d2:	d109      	bne.n	80242e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80242d4:	697b      	ldr	r3, [r7, #20]
 80242d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80242da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80242dc:	683b      	ldr	r3, [r7, #0]
 80242de:	695b      	ldr	r3, [r3, #20]
 80242e0:	029b      	lsls	r3, r3, #10
 80242e2:	697a      	ldr	r2, [r7, #20]
 80242e4:	4313      	orrs	r3, r2
 80242e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80242e8:	687b      	ldr	r3, [r7, #4]
 80242ea:	697a      	ldr	r2, [r7, #20]
 80242ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	68fa      	ldr	r2, [r7, #12]
 80242f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80242f4:	683b      	ldr	r3, [r7, #0]
 80242f6:	685a      	ldr	r2, [r3, #4]
 80242f8:	687b      	ldr	r3, [r7, #4]
 80242fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80242fc:	687b      	ldr	r3, [r7, #4]
 80242fe:	693a      	ldr	r2, [r7, #16]
 8024300:	621a      	str	r2, [r3, #32]
}
 8024302:	bf00      	nop
 8024304:	371c      	adds	r7, #28
 8024306:	46bd      	mov	sp, r7
 8024308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802430c:	4770      	bx	lr
 802430e:	bf00      	nop
 8024310:	feff8fff 	.word	0xfeff8fff
 8024314:	40010000 	.word	0x40010000
 8024318:	40010400 	.word	0x40010400
 802431c:	40014000 	.word	0x40014000
 8024320:	40014400 	.word	0x40014400
 8024324:	40014800 	.word	0x40014800

08024328 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8024328:	b480      	push	{r7}
 802432a:	b087      	sub	sp, #28
 802432c:	af00      	add	r7, sp, #0
 802432e:	60f8      	str	r0, [r7, #12]
 8024330:	60b9      	str	r1, [r7, #8]
 8024332:	607a      	str	r2, [r7, #4]
 8024334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8024336:	68fb      	ldr	r3, [r7, #12]
 8024338:	6a1b      	ldr	r3, [r3, #32]
 802433a:	f023 0201 	bic.w	r2, r3, #1
 802433e:	68fb      	ldr	r3, [r7, #12]
 8024340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8024342:	68fb      	ldr	r3, [r7, #12]
 8024344:	699b      	ldr	r3, [r3, #24]
 8024346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8024348:	68fb      	ldr	r3, [r7, #12]
 802434a:	6a1b      	ldr	r3, [r3, #32]
 802434c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 802434e:	68fb      	ldr	r3, [r7, #12]
 8024350:	4a2c      	ldr	r2, [pc, #176]	; (8024404 <TIM_TI1_SetConfig+0xdc>)
 8024352:	4293      	cmp	r3, r2
 8024354:	d023      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 8024356:	68fb      	ldr	r3, [r7, #12]
 8024358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802435c:	d01f      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 802435e:	68fb      	ldr	r3, [r7, #12]
 8024360:	4a29      	ldr	r2, [pc, #164]	; (8024408 <TIM_TI1_SetConfig+0xe0>)
 8024362:	4293      	cmp	r3, r2
 8024364:	d01b      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 8024366:	68fb      	ldr	r3, [r7, #12]
 8024368:	4a28      	ldr	r2, [pc, #160]	; (802440c <TIM_TI1_SetConfig+0xe4>)
 802436a:	4293      	cmp	r3, r2
 802436c:	d017      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 802436e:	68fb      	ldr	r3, [r7, #12]
 8024370:	4a27      	ldr	r2, [pc, #156]	; (8024410 <TIM_TI1_SetConfig+0xe8>)
 8024372:	4293      	cmp	r3, r2
 8024374:	d013      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 8024376:	68fb      	ldr	r3, [r7, #12]
 8024378:	4a26      	ldr	r2, [pc, #152]	; (8024414 <TIM_TI1_SetConfig+0xec>)
 802437a:	4293      	cmp	r3, r2
 802437c:	d00f      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 802437e:	68fb      	ldr	r3, [r7, #12]
 8024380:	4a25      	ldr	r2, [pc, #148]	; (8024418 <TIM_TI1_SetConfig+0xf0>)
 8024382:	4293      	cmp	r3, r2
 8024384:	d00b      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 8024386:	68fb      	ldr	r3, [r7, #12]
 8024388:	4a24      	ldr	r2, [pc, #144]	; (802441c <TIM_TI1_SetConfig+0xf4>)
 802438a:	4293      	cmp	r3, r2
 802438c:	d007      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 802438e:	68fb      	ldr	r3, [r7, #12]
 8024390:	4a23      	ldr	r2, [pc, #140]	; (8024420 <TIM_TI1_SetConfig+0xf8>)
 8024392:	4293      	cmp	r3, r2
 8024394:	d003      	beq.n	802439e <TIM_TI1_SetConfig+0x76>
 8024396:	68fb      	ldr	r3, [r7, #12]
 8024398:	4a22      	ldr	r2, [pc, #136]	; (8024424 <TIM_TI1_SetConfig+0xfc>)
 802439a:	4293      	cmp	r3, r2
 802439c:	d101      	bne.n	80243a2 <TIM_TI1_SetConfig+0x7a>
 802439e:	2301      	movs	r3, #1
 80243a0:	e000      	b.n	80243a4 <TIM_TI1_SetConfig+0x7c>
 80243a2:	2300      	movs	r3, #0
 80243a4:	2b00      	cmp	r3, #0
 80243a6:	d008      	beq.n	80243ba <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80243a8:	697b      	ldr	r3, [r7, #20]
 80243aa:	f023 0303 	bic.w	r3, r3, #3
 80243ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80243b0:	697a      	ldr	r2, [r7, #20]
 80243b2:	687b      	ldr	r3, [r7, #4]
 80243b4:	4313      	orrs	r3, r2
 80243b6:	617b      	str	r3, [r7, #20]
 80243b8:	e003      	b.n	80243c2 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80243ba:	697b      	ldr	r3, [r7, #20]
 80243bc:	f043 0301 	orr.w	r3, r3, #1
 80243c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80243c2:	697b      	ldr	r3, [r7, #20]
 80243c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80243c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80243ca:	683b      	ldr	r3, [r7, #0]
 80243cc:	011b      	lsls	r3, r3, #4
 80243ce:	b2db      	uxtb	r3, r3
 80243d0:	697a      	ldr	r2, [r7, #20]
 80243d2:	4313      	orrs	r3, r2
 80243d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80243d6:	693b      	ldr	r3, [r7, #16]
 80243d8:	f023 030a 	bic.w	r3, r3, #10
 80243dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80243de:	68bb      	ldr	r3, [r7, #8]
 80243e0:	f003 030a 	and.w	r3, r3, #10
 80243e4:	693a      	ldr	r2, [r7, #16]
 80243e6:	4313      	orrs	r3, r2
 80243e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80243ea:	68fb      	ldr	r3, [r7, #12]
 80243ec:	697a      	ldr	r2, [r7, #20]
 80243ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80243f0:	68fb      	ldr	r3, [r7, #12]
 80243f2:	693a      	ldr	r2, [r7, #16]
 80243f4:	621a      	str	r2, [r3, #32]
}
 80243f6:	bf00      	nop
 80243f8:	371c      	adds	r7, #28
 80243fa:	46bd      	mov	sp, r7
 80243fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024400:	4770      	bx	lr
 8024402:	bf00      	nop
 8024404:	40010000 	.word	0x40010000
 8024408:	40000400 	.word	0x40000400
 802440c:	40000800 	.word	0x40000800
 8024410:	40000c00 	.word	0x40000c00
 8024414:	40010400 	.word	0x40010400
 8024418:	40001800 	.word	0x40001800
 802441c:	40014000 	.word	0x40014000
 8024420:	4000e000 	.word	0x4000e000
 8024424:	4000e400 	.word	0x4000e400

08024428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8024428:	b480      	push	{r7}
 802442a:	b087      	sub	sp, #28
 802442c:	af00      	add	r7, sp, #0
 802442e:	60f8      	str	r0, [r7, #12]
 8024430:	60b9      	str	r1, [r7, #8]
 8024432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8024434:	68fb      	ldr	r3, [r7, #12]
 8024436:	6a1b      	ldr	r3, [r3, #32]
 8024438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802443a:	68fb      	ldr	r3, [r7, #12]
 802443c:	6a1b      	ldr	r3, [r3, #32]
 802443e:	f023 0201 	bic.w	r2, r3, #1
 8024442:	68fb      	ldr	r3, [r7, #12]
 8024444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8024446:	68fb      	ldr	r3, [r7, #12]
 8024448:	699b      	ldr	r3, [r3, #24]
 802444a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802444c:	693b      	ldr	r3, [r7, #16]
 802444e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8024452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	011b      	lsls	r3, r3, #4
 8024458:	693a      	ldr	r2, [r7, #16]
 802445a:	4313      	orrs	r3, r2
 802445c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802445e:	697b      	ldr	r3, [r7, #20]
 8024460:	f023 030a 	bic.w	r3, r3, #10
 8024464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8024466:	697a      	ldr	r2, [r7, #20]
 8024468:	68bb      	ldr	r3, [r7, #8]
 802446a:	4313      	orrs	r3, r2
 802446c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802446e:	68fb      	ldr	r3, [r7, #12]
 8024470:	693a      	ldr	r2, [r7, #16]
 8024472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8024474:	68fb      	ldr	r3, [r7, #12]
 8024476:	697a      	ldr	r2, [r7, #20]
 8024478:	621a      	str	r2, [r3, #32]
}
 802447a:	bf00      	nop
 802447c:	371c      	adds	r7, #28
 802447e:	46bd      	mov	sp, r7
 8024480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024484:	4770      	bx	lr

08024486 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8024486:	b480      	push	{r7}
 8024488:	b087      	sub	sp, #28
 802448a:	af00      	add	r7, sp, #0
 802448c:	60f8      	str	r0, [r7, #12]
 802448e:	60b9      	str	r1, [r7, #8]
 8024490:	607a      	str	r2, [r7, #4]
 8024492:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8024494:	68fb      	ldr	r3, [r7, #12]
 8024496:	6a1b      	ldr	r3, [r3, #32]
 8024498:	f023 0210 	bic.w	r2, r3, #16
 802449c:	68fb      	ldr	r3, [r7, #12]
 802449e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80244a0:	68fb      	ldr	r3, [r7, #12]
 80244a2:	699b      	ldr	r3, [r3, #24]
 80244a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80244a6:	68fb      	ldr	r3, [r7, #12]
 80244a8:	6a1b      	ldr	r3, [r3, #32]
 80244aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80244ac:	697b      	ldr	r3, [r7, #20]
 80244ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80244b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	021b      	lsls	r3, r3, #8
 80244b8:	697a      	ldr	r2, [r7, #20]
 80244ba:	4313      	orrs	r3, r2
 80244bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80244be:	697b      	ldr	r3, [r7, #20]
 80244c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80244c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80244c6:	683b      	ldr	r3, [r7, #0]
 80244c8:	031b      	lsls	r3, r3, #12
 80244ca:	b29b      	uxth	r3, r3
 80244cc:	697a      	ldr	r2, [r7, #20]
 80244ce:	4313      	orrs	r3, r2
 80244d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80244d2:	693b      	ldr	r3, [r7, #16]
 80244d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80244d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80244da:	68bb      	ldr	r3, [r7, #8]
 80244dc:	011b      	lsls	r3, r3, #4
 80244de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80244e2:	693a      	ldr	r2, [r7, #16]
 80244e4:	4313      	orrs	r3, r2
 80244e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80244e8:	68fb      	ldr	r3, [r7, #12]
 80244ea:	697a      	ldr	r2, [r7, #20]
 80244ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80244ee:	68fb      	ldr	r3, [r7, #12]
 80244f0:	693a      	ldr	r2, [r7, #16]
 80244f2:	621a      	str	r2, [r3, #32]
}
 80244f4:	bf00      	nop
 80244f6:	371c      	adds	r7, #28
 80244f8:	46bd      	mov	sp, r7
 80244fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244fe:	4770      	bx	lr

08024500 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8024500:	b480      	push	{r7}
 8024502:	b087      	sub	sp, #28
 8024504:	af00      	add	r7, sp, #0
 8024506:	60f8      	str	r0, [r7, #12]
 8024508:	60b9      	str	r1, [r7, #8]
 802450a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802450c:	68fb      	ldr	r3, [r7, #12]
 802450e:	6a1b      	ldr	r3, [r3, #32]
 8024510:	f023 0210 	bic.w	r2, r3, #16
 8024514:	68fb      	ldr	r3, [r7, #12]
 8024516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8024518:	68fb      	ldr	r3, [r7, #12]
 802451a:	699b      	ldr	r3, [r3, #24]
 802451c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802451e:	68fb      	ldr	r3, [r7, #12]
 8024520:	6a1b      	ldr	r3, [r3, #32]
 8024522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8024524:	697b      	ldr	r3, [r7, #20]
 8024526:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802452a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802452c:	687b      	ldr	r3, [r7, #4]
 802452e:	031b      	lsls	r3, r3, #12
 8024530:	697a      	ldr	r2, [r7, #20]
 8024532:	4313      	orrs	r3, r2
 8024534:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8024536:	693b      	ldr	r3, [r7, #16]
 8024538:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802453c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802453e:	68bb      	ldr	r3, [r7, #8]
 8024540:	011b      	lsls	r3, r3, #4
 8024542:	693a      	ldr	r2, [r7, #16]
 8024544:	4313      	orrs	r3, r2
 8024546:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8024548:	68fb      	ldr	r3, [r7, #12]
 802454a:	697a      	ldr	r2, [r7, #20]
 802454c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802454e:	68fb      	ldr	r3, [r7, #12]
 8024550:	693a      	ldr	r2, [r7, #16]
 8024552:	621a      	str	r2, [r3, #32]
}
 8024554:	bf00      	nop
 8024556:	371c      	adds	r7, #28
 8024558:	46bd      	mov	sp, r7
 802455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802455e:	4770      	bx	lr

08024560 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8024560:	b480      	push	{r7}
 8024562:	b087      	sub	sp, #28
 8024564:	af00      	add	r7, sp, #0
 8024566:	60f8      	str	r0, [r7, #12]
 8024568:	60b9      	str	r1, [r7, #8]
 802456a:	607a      	str	r2, [r7, #4]
 802456c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802456e:	68fb      	ldr	r3, [r7, #12]
 8024570:	6a1b      	ldr	r3, [r3, #32]
 8024572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8024576:	68fb      	ldr	r3, [r7, #12]
 8024578:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 802457a:	68fb      	ldr	r3, [r7, #12]
 802457c:	69db      	ldr	r3, [r3, #28]
 802457e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8024580:	68fb      	ldr	r3, [r7, #12]
 8024582:	6a1b      	ldr	r3, [r3, #32]
 8024584:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8024586:	697b      	ldr	r3, [r7, #20]
 8024588:	f023 0303 	bic.w	r3, r3, #3
 802458c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 802458e:	697a      	ldr	r2, [r7, #20]
 8024590:	687b      	ldr	r3, [r7, #4]
 8024592:	4313      	orrs	r3, r2
 8024594:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8024596:	697b      	ldr	r3, [r7, #20]
 8024598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802459c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 802459e:	683b      	ldr	r3, [r7, #0]
 80245a0:	011b      	lsls	r3, r3, #4
 80245a2:	b2db      	uxtb	r3, r3
 80245a4:	697a      	ldr	r2, [r7, #20]
 80245a6:	4313      	orrs	r3, r2
 80245a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80245aa:	693b      	ldr	r3, [r7, #16]
 80245ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80245b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80245b2:	68bb      	ldr	r3, [r7, #8]
 80245b4:	021b      	lsls	r3, r3, #8
 80245b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80245ba:	693a      	ldr	r2, [r7, #16]
 80245bc:	4313      	orrs	r3, r2
 80245be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80245c0:	68fb      	ldr	r3, [r7, #12]
 80245c2:	697a      	ldr	r2, [r7, #20]
 80245c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80245c6:	68fb      	ldr	r3, [r7, #12]
 80245c8:	693a      	ldr	r2, [r7, #16]
 80245ca:	621a      	str	r2, [r3, #32]
}
 80245cc:	bf00      	nop
 80245ce:	371c      	adds	r7, #28
 80245d0:	46bd      	mov	sp, r7
 80245d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245d6:	4770      	bx	lr

080245d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80245d8:	b480      	push	{r7}
 80245da:	b087      	sub	sp, #28
 80245dc:	af00      	add	r7, sp, #0
 80245de:	60f8      	str	r0, [r7, #12]
 80245e0:	60b9      	str	r1, [r7, #8]
 80245e2:	607a      	str	r2, [r7, #4]
 80245e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80245e6:	68fb      	ldr	r3, [r7, #12]
 80245e8:	6a1b      	ldr	r3, [r3, #32]
 80245ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80245ee:	68fb      	ldr	r3, [r7, #12]
 80245f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80245f2:	68fb      	ldr	r3, [r7, #12]
 80245f4:	69db      	ldr	r3, [r3, #28]
 80245f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80245f8:	68fb      	ldr	r3, [r7, #12]
 80245fa:	6a1b      	ldr	r3, [r3, #32]
 80245fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80245fe:	697b      	ldr	r3, [r7, #20]
 8024600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024604:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	021b      	lsls	r3, r3, #8
 802460a:	697a      	ldr	r2, [r7, #20]
 802460c:	4313      	orrs	r3, r2
 802460e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8024610:	697b      	ldr	r3, [r7, #20]
 8024612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8024616:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8024618:	683b      	ldr	r3, [r7, #0]
 802461a:	031b      	lsls	r3, r3, #12
 802461c:	b29b      	uxth	r3, r3
 802461e:	697a      	ldr	r2, [r7, #20]
 8024620:	4313      	orrs	r3, r2
 8024622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8024624:	693b      	ldr	r3, [r7, #16]
 8024626:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 802462a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 802462c:	68bb      	ldr	r3, [r7, #8]
 802462e:	031b      	lsls	r3, r3, #12
 8024630:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8024634:	693a      	ldr	r2, [r7, #16]
 8024636:	4313      	orrs	r3, r2
 8024638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 802463a:	68fb      	ldr	r3, [r7, #12]
 802463c:	697a      	ldr	r2, [r7, #20]
 802463e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8024640:	68fb      	ldr	r3, [r7, #12]
 8024642:	693a      	ldr	r2, [r7, #16]
 8024644:	621a      	str	r2, [r3, #32]
}
 8024646:	bf00      	nop
 8024648:	371c      	adds	r7, #28
 802464a:	46bd      	mov	sp, r7
 802464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024650:	4770      	bx	lr
	...

08024654 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8024654:	b480      	push	{r7}
 8024656:	b085      	sub	sp, #20
 8024658:	af00      	add	r7, sp, #0
 802465a:	6078      	str	r0, [r7, #4]
 802465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802465e:	687b      	ldr	r3, [r7, #4]
 8024660:	689b      	ldr	r3, [r3, #8]
 8024662:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8024664:	68fa      	ldr	r2, [r7, #12]
 8024666:	4b09      	ldr	r3, [pc, #36]	; (802468c <TIM_ITRx_SetConfig+0x38>)
 8024668:	4013      	ands	r3, r2
 802466a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802466c:	683a      	ldr	r2, [r7, #0]
 802466e:	68fb      	ldr	r3, [r7, #12]
 8024670:	4313      	orrs	r3, r2
 8024672:	f043 0307 	orr.w	r3, r3, #7
 8024676:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	68fa      	ldr	r2, [r7, #12]
 802467c:	609a      	str	r2, [r3, #8]
}
 802467e:	bf00      	nop
 8024680:	3714      	adds	r7, #20
 8024682:	46bd      	mov	sp, r7
 8024684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024688:	4770      	bx	lr
 802468a:	bf00      	nop
 802468c:	ffcfff8f 	.word	0xffcfff8f

08024690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8024690:	b480      	push	{r7}
 8024692:	b087      	sub	sp, #28
 8024694:	af00      	add	r7, sp, #0
 8024696:	60f8      	str	r0, [r7, #12]
 8024698:	60b9      	str	r1, [r7, #8]
 802469a:	607a      	str	r2, [r7, #4]
 802469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802469e:	68fb      	ldr	r3, [r7, #12]
 80246a0:	689b      	ldr	r3, [r3, #8]
 80246a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80246a4:	697b      	ldr	r3, [r7, #20]
 80246a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80246aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80246ac:	683b      	ldr	r3, [r7, #0]
 80246ae:	021a      	lsls	r2, r3, #8
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	431a      	orrs	r2, r3
 80246b4:	68bb      	ldr	r3, [r7, #8]
 80246b6:	4313      	orrs	r3, r2
 80246b8:	697a      	ldr	r2, [r7, #20]
 80246ba:	4313      	orrs	r3, r2
 80246bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80246be:	68fb      	ldr	r3, [r7, #12]
 80246c0:	697a      	ldr	r2, [r7, #20]
 80246c2:	609a      	str	r2, [r3, #8]
}
 80246c4:	bf00      	nop
 80246c6:	371c      	adds	r7, #28
 80246c8:	46bd      	mov	sp, r7
 80246ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246ce:	4770      	bx	lr

080246d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80246d0:	b480      	push	{r7}
 80246d2:	b087      	sub	sp, #28
 80246d4:	af00      	add	r7, sp, #0
 80246d6:	60f8      	str	r0, [r7, #12]
 80246d8:	60b9      	str	r1, [r7, #8]
 80246da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80246dc:	68bb      	ldr	r3, [r7, #8]
 80246de:	f003 031f 	and.w	r3, r3, #31
 80246e2:	2201      	movs	r2, #1
 80246e4:	fa02 f303 	lsl.w	r3, r2, r3
 80246e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80246ea:	68fb      	ldr	r3, [r7, #12]
 80246ec:	6a1a      	ldr	r2, [r3, #32]
 80246ee:	697b      	ldr	r3, [r7, #20]
 80246f0:	43db      	mvns	r3, r3
 80246f2:	401a      	ands	r2, r3
 80246f4:	68fb      	ldr	r3, [r7, #12]
 80246f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80246f8:	68fb      	ldr	r3, [r7, #12]
 80246fa:	6a1a      	ldr	r2, [r3, #32]
 80246fc:	68bb      	ldr	r3, [r7, #8]
 80246fe:	f003 031f 	and.w	r3, r3, #31
 8024702:	6879      	ldr	r1, [r7, #4]
 8024704:	fa01 f303 	lsl.w	r3, r1, r3
 8024708:	431a      	orrs	r2, r3
 802470a:	68fb      	ldr	r3, [r7, #12]
 802470c:	621a      	str	r2, [r3, #32]
}
 802470e:	bf00      	nop
 8024710:	371c      	adds	r7, #28
 8024712:	46bd      	mov	sp, r7
 8024714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024718:	4770      	bx	lr
	...

0802471c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802471c:	b480      	push	{r7}
 802471e:	b085      	sub	sp, #20
 8024720:	af00      	add	r7, sp, #0
 8024722:	6078      	str	r0, [r7, #4]
 8024724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8024726:	687b      	ldr	r3, [r7, #4]
 8024728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802472c:	2b01      	cmp	r3, #1
 802472e:	d101      	bne.n	8024734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8024730:	2302      	movs	r3, #2
 8024732:	e077      	b.n	8024824 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8024734:	687b      	ldr	r3, [r7, #4]
 8024736:	2201      	movs	r2, #1
 8024738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	2202      	movs	r2, #2
 8024740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	685b      	ldr	r3, [r3, #4]
 802474a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802474c:	687b      	ldr	r3, [r7, #4]
 802474e:	681b      	ldr	r3, [r3, #0]
 8024750:	689b      	ldr	r3, [r3, #8]
 8024752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8024754:	687b      	ldr	r3, [r7, #4]
 8024756:	681b      	ldr	r3, [r3, #0]
 8024758:	4a35      	ldr	r2, [pc, #212]	; (8024830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802475a:	4293      	cmp	r3, r2
 802475c:	d004      	beq.n	8024768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802475e:	687b      	ldr	r3, [r7, #4]
 8024760:	681b      	ldr	r3, [r3, #0]
 8024762:	4a34      	ldr	r2, [pc, #208]	; (8024834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8024764:	4293      	cmp	r3, r2
 8024766:	d108      	bne.n	802477a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8024768:	68fb      	ldr	r3, [r7, #12]
 802476a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802476e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8024770:	683b      	ldr	r3, [r7, #0]
 8024772:	685b      	ldr	r3, [r3, #4]
 8024774:	68fa      	ldr	r2, [r7, #12]
 8024776:	4313      	orrs	r3, r2
 8024778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802477a:	68fb      	ldr	r3, [r7, #12]
 802477c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8024782:	683b      	ldr	r3, [r7, #0]
 8024784:	681b      	ldr	r3, [r3, #0]
 8024786:	68fa      	ldr	r2, [r7, #12]
 8024788:	4313      	orrs	r3, r2
 802478a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802478c:	687b      	ldr	r3, [r7, #4]
 802478e:	681b      	ldr	r3, [r3, #0]
 8024790:	68fa      	ldr	r2, [r7, #12]
 8024792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8024794:	687b      	ldr	r3, [r7, #4]
 8024796:	681b      	ldr	r3, [r3, #0]
 8024798:	4a25      	ldr	r2, [pc, #148]	; (8024830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802479a:	4293      	cmp	r3, r2
 802479c:	d02c      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802479e:	687b      	ldr	r3, [r7, #4]
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80247a6:	d027      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	681b      	ldr	r3, [r3, #0]
 80247ac:	4a22      	ldr	r2, [pc, #136]	; (8024838 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80247ae:	4293      	cmp	r3, r2
 80247b0:	d022      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	681b      	ldr	r3, [r3, #0]
 80247b6:	4a21      	ldr	r2, [pc, #132]	; (802483c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80247b8:	4293      	cmp	r3, r2
 80247ba:	d01d      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80247bc:	687b      	ldr	r3, [r7, #4]
 80247be:	681b      	ldr	r3, [r3, #0]
 80247c0:	4a1f      	ldr	r2, [pc, #124]	; (8024840 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80247c2:	4293      	cmp	r3, r2
 80247c4:	d018      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80247c6:	687b      	ldr	r3, [r7, #4]
 80247c8:	681b      	ldr	r3, [r3, #0]
 80247ca:	4a1a      	ldr	r2, [pc, #104]	; (8024834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80247cc:	4293      	cmp	r3, r2
 80247ce:	d013      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80247d0:	687b      	ldr	r3, [r7, #4]
 80247d2:	681b      	ldr	r3, [r3, #0]
 80247d4:	4a1b      	ldr	r2, [pc, #108]	; (8024844 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80247d6:	4293      	cmp	r3, r2
 80247d8:	d00e      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80247da:	687b      	ldr	r3, [r7, #4]
 80247dc:	681b      	ldr	r3, [r3, #0]
 80247de:	4a1a      	ldr	r2, [pc, #104]	; (8024848 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80247e0:	4293      	cmp	r3, r2
 80247e2:	d009      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80247e4:	687b      	ldr	r3, [r7, #4]
 80247e6:	681b      	ldr	r3, [r3, #0]
 80247e8:	4a18      	ldr	r2, [pc, #96]	; (802484c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80247ea:	4293      	cmp	r3, r2
 80247ec:	d004      	beq.n	80247f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80247ee:	687b      	ldr	r3, [r7, #4]
 80247f0:	681b      	ldr	r3, [r3, #0]
 80247f2:	4a17      	ldr	r2, [pc, #92]	; (8024850 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80247f4:	4293      	cmp	r3, r2
 80247f6:	d10c      	bne.n	8024812 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80247f8:	68bb      	ldr	r3, [r7, #8]
 80247fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80247fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8024800:	683b      	ldr	r3, [r7, #0]
 8024802:	689b      	ldr	r3, [r3, #8]
 8024804:	68ba      	ldr	r2, [r7, #8]
 8024806:	4313      	orrs	r3, r2
 8024808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	681b      	ldr	r3, [r3, #0]
 802480e:	68ba      	ldr	r2, [r7, #8]
 8024810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8024812:	687b      	ldr	r3, [r7, #4]
 8024814:	2201      	movs	r2, #1
 8024816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802481a:	687b      	ldr	r3, [r7, #4]
 802481c:	2200      	movs	r2, #0
 802481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8024822:	2300      	movs	r3, #0
}
 8024824:	4618      	mov	r0, r3
 8024826:	3714      	adds	r7, #20
 8024828:	46bd      	mov	sp, r7
 802482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802482e:	4770      	bx	lr
 8024830:	40010000 	.word	0x40010000
 8024834:	40010400 	.word	0x40010400
 8024838:	40000400 	.word	0x40000400
 802483c:	40000800 	.word	0x40000800
 8024840:	40000c00 	.word	0x40000c00
 8024844:	40001800 	.word	0x40001800
 8024848:	40014000 	.word	0x40014000
 802484c:	4000e000 	.word	0x4000e000
 8024850:	4000e400 	.word	0x4000e400

08024854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8024854:	b580      	push	{r7, lr}
 8024856:	b082      	sub	sp, #8
 8024858:	af00      	add	r7, sp, #0
 802485a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802485c:	687b      	ldr	r3, [r7, #4]
 802485e:	2b00      	cmp	r3, #0
 8024860:	d101      	bne.n	8024866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8024862:	2301      	movs	r3, #1
 8024864:	e042      	b.n	80248ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802486c:	2b00      	cmp	r3, #0
 802486e:	d106      	bne.n	802487e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	2200      	movs	r2, #0
 8024874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8024878:	6878      	ldr	r0, [r7, #4]
 802487a:	f7e8 f96f 	bl	800cb5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802487e:	687b      	ldr	r3, [r7, #4]
 8024880:	2224      	movs	r2, #36	; 0x24
 8024882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8024886:	687b      	ldr	r3, [r7, #4]
 8024888:	681b      	ldr	r3, [r3, #0]
 802488a:	681a      	ldr	r2, [r3, #0]
 802488c:	687b      	ldr	r3, [r7, #4]
 802488e:	681b      	ldr	r3, [r3, #0]
 8024890:	f022 0201 	bic.w	r2, r2, #1
 8024894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8024896:	6878      	ldr	r0, [r7, #4]
 8024898:	f000 fa3c 	bl	8024d14 <UART_SetConfig>
 802489c:	4603      	mov	r3, r0
 802489e:	2b01      	cmp	r3, #1
 80248a0:	d101      	bne.n	80248a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80248a2:	2301      	movs	r3, #1
 80248a4:	e022      	b.n	80248ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80248a6:	687b      	ldr	r3, [r7, #4]
 80248a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d002      	beq.n	80248b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80248ae:	6878      	ldr	r0, [r7, #4]
 80248b0:	f001 f88e 	bl	80259d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80248b4:	687b      	ldr	r3, [r7, #4]
 80248b6:	681b      	ldr	r3, [r3, #0]
 80248b8:	685a      	ldr	r2, [r3, #4]
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	681b      	ldr	r3, [r3, #0]
 80248be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80248c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80248c4:	687b      	ldr	r3, [r7, #4]
 80248c6:	681b      	ldr	r3, [r3, #0]
 80248c8:	689a      	ldr	r2, [r3, #8]
 80248ca:	687b      	ldr	r3, [r7, #4]
 80248cc:	681b      	ldr	r3, [r3, #0]
 80248ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80248d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80248d4:	687b      	ldr	r3, [r7, #4]
 80248d6:	681b      	ldr	r3, [r3, #0]
 80248d8:	681a      	ldr	r2, [r3, #0]
 80248da:	687b      	ldr	r3, [r7, #4]
 80248dc:	681b      	ldr	r3, [r3, #0]
 80248de:	f042 0201 	orr.w	r2, r2, #1
 80248e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80248e4:	6878      	ldr	r0, [r7, #4]
 80248e6:	f001 f915 	bl	8025b14 <UART_CheckIdleState>
 80248ea:	4603      	mov	r3, r0
}
 80248ec:	4618      	mov	r0, r3
 80248ee:	3708      	adds	r7, #8
 80248f0:	46bd      	mov	sp, r7
 80248f2:	bd80      	pop	{r7, pc}

080248f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80248f4:	b580      	push	{r7, lr}
 80248f6:	b08a      	sub	sp, #40	; 0x28
 80248f8:	af02      	add	r7, sp, #8
 80248fa:	60f8      	str	r0, [r7, #12]
 80248fc:	60b9      	str	r1, [r7, #8]
 80248fe:	603b      	str	r3, [r7, #0]
 8024900:	4613      	mov	r3, r2
 8024902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8024904:	68fb      	ldr	r3, [r7, #12]
 8024906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802490a:	2b20      	cmp	r3, #32
 802490c:	f040 8083 	bne.w	8024a16 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8024910:	68bb      	ldr	r3, [r7, #8]
 8024912:	2b00      	cmp	r3, #0
 8024914:	d002      	beq.n	802491c <HAL_UART_Transmit+0x28>
 8024916:	88fb      	ldrh	r3, [r7, #6]
 8024918:	2b00      	cmp	r3, #0
 802491a:	d101      	bne.n	8024920 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 802491c:	2301      	movs	r3, #1
 802491e:	e07b      	b.n	8024a18 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8024920:	68fb      	ldr	r3, [r7, #12]
 8024922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8024926:	2b01      	cmp	r3, #1
 8024928:	d101      	bne.n	802492e <HAL_UART_Transmit+0x3a>
 802492a:	2302      	movs	r3, #2
 802492c:	e074      	b.n	8024a18 <HAL_UART_Transmit+0x124>
 802492e:	68fb      	ldr	r3, [r7, #12]
 8024930:	2201      	movs	r2, #1
 8024932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024936:	68fb      	ldr	r3, [r7, #12]
 8024938:	2200      	movs	r2, #0
 802493a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802493e:	68fb      	ldr	r3, [r7, #12]
 8024940:	2221      	movs	r2, #33	; 0x21
 8024942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8024946:	f7f1 fdd3 	bl	80164f0 <HAL_GetTick>
 802494a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 802494c:	68fb      	ldr	r3, [r7, #12]
 802494e:	88fa      	ldrh	r2, [r7, #6]
 8024950:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8024954:	68fb      	ldr	r3, [r7, #12]
 8024956:	88fa      	ldrh	r2, [r7, #6]
 8024958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	689b      	ldr	r3, [r3, #8]
 8024960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024964:	d108      	bne.n	8024978 <HAL_UART_Transmit+0x84>
 8024966:	68fb      	ldr	r3, [r7, #12]
 8024968:	691b      	ldr	r3, [r3, #16]
 802496a:	2b00      	cmp	r3, #0
 802496c:	d104      	bne.n	8024978 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 802496e:	2300      	movs	r3, #0
 8024970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8024972:	68bb      	ldr	r3, [r7, #8]
 8024974:	61bb      	str	r3, [r7, #24]
 8024976:	e003      	b.n	8024980 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8024978:	68bb      	ldr	r3, [r7, #8]
 802497a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802497c:	2300      	movs	r3, #0
 802497e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8024980:	68fb      	ldr	r3, [r7, #12]
 8024982:	2200      	movs	r2, #0
 8024984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8024988:	e02c      	b.n	80249e4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802498a:	683b      	ldr	r3, [r7, #0]
 802498c:	9300      	str	r3, [sp, #0]
 802498e:	697b      	ldr	r3, [r7, #20]
 8024990:	2200      	movs	r2, #0
 8024992:	2180      	movs	r1, #128	; 0x80
 8024994:	68f8      	ldr	r0, [r7, #12]
 8024996:	f001 f908 	bl	8025baa <UART_WaitOnFlagUntilTimeout>
 802499a:	4603      	mov	r3, r0
 802499c:	2b00      	cmp	r3, #0
 802499e:	d001      	beq.n	80249a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80249a0:	2303      	movs	r3, #3
 80249a2:	e039      	b.n	8024a18 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80249a4:	69fb      	ldr	r3, [r7, #28]
 80249a6:	2b00      	cmp	r3, #0
 80249a8:	d10b      	bne.n	80249c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80249aa:	69bb      	ldr	r3, [r7, #24]
 80249ac:	881b      	ldrh	r3, [r3, #0]
 80249ae:	461a      	mov	r2, r3
 80249b0:	68fb      	ldr	r3, [r7, #12]
 80249b2:	681b      	ldr	r3, [r3, #0]
 80249b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80249b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80249ba:	69bb      	ldr	r3, [r7, #24]
 80249bc:	3302      	adds	r3, #2
 80249be:	61bb      	str	r3, [r7, #24]
 80249c0:	e007      	b.n	80249d2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80249c2:	69fb      	ldr	r3, [r7, #28]
 80249c4:	781a      	ldrb	r2, [r3, #0]
 80249c6:	68fb      	ldr	r3, [r7, #12]
 80249c8:	681b      	ldr	r3, [r3, #0]
 80249ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80249cc:	69fb      	ldr	r3, [r7, #28]
 80249ce:	3301      	adds	r3, #1
 80249d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80249d2:	68fb      	ldr	r3, [r7, #12]
 80249d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80249d8:	b29b      	uxth	r3, r3
 80249da:	3b01      	subs	r3, #1
 80249dc:	b29a      	uxth	r2, r3
 80249de:	68fb      	ldr	r3, [r7, #12]
 80249e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80249e4:	68fb      	ldr	r3, [r7, #12]
 80249e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80249ea:	b29b      	uxth	r3, r3
 80249ec:	2b00      	cmp	r3, #0
 80249ee:	d1cc      	bne.n	802498a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80249f0:	683b      	ldr	r3, [r7, #0]
 80249f2:	9300      	str	r3, [sp, #0]
 80249f4:	697b      	ldr	r3, [r7, #20]
 80249f6:	2200      	movs	r2, #0
 80249f8:	2140      	movs	r1, #64	; 0x40
 80249fa:	68f8      	ldr	r0, [r7, #12]
 80249fc:	f001 f8d5 	bl	8025baa <UART_WaitOnFlagUntilTimeout>
 8024a00:	4603      	mov	r3, r0
 8024a02:	2b00      	cmp	r3, #0
 8024a04:	d001      	beq.n	8024a0a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8024a06:	2303      	movs	r3, #3
 8024a08:	e006      	b.n	8024a18 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8024a0a:	68fb      	ldr	r3, [r7, #12]
 8024a0c:	2220      	movs	r2, #32
 8024a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8024a12:	2300      	movs	r3, #0
 8024a14:	e000      	b.n	8024a18 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8024a16:	2302      	movs	r3, #2
  }
}
 8024a18:	4618      	mov	r0, r3
 8024a1a:	3720      	adds	r7, #32
 8024a1c:	46bd      	mov	sp, r7
 8024a1e:	bd80      	pop	{r7, pc}

08024a20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8024a20:	b580      	push	{r7, lr}
 8024a22:	b08a      	sub	sp, #40	; 0x28
 8024a24:	af02      	add	r7, sp, #8
 8024a26:	60f8      	str	r0, [r7, #12]
 8024a28:	60b9      	str	r1, [r7, #8]
 8024a2a:	603b      	str	r3, [r7, #0]
 8024a2c:	4613      	mov	r3, r2
 8024a2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8024a30:	68fb      	ldr	r3, [r7, #12]
 8024a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024a36:	2b20      	cmp	r3, #32
 8024a38:	f040 80c0 	bne.w	8024bbc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8024a3c:	68bb      	ldr	r3, [r7, #8]
 8024a3e:	2b00      	cmp	r3, #0
 8024a40:	d002      	beq.n	8024a48 <HAL_UART_Receive+0x28>
 8024a42:	88fb      	ldrh	r3, [r7, #6]
 8024a44:	2b00      	cmp	r3, #0
 8024a46:	d101      	bne.n	8024a4c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8024a48:	2301      	movs	r3, #1
 8024a4a:	e0b8      	b.n	8024bbe <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8024a52:	2b01      	cmp	r3, #1
 8024a54:	d101      	bne.n	8024a5a <HAL_UART_Receive+0x3a>
 8024a56:	2302      	movs	r3, #2
 8024a58:	e0b1      	b.n	8024bbe <HAL_UART_Receive+0x19e>
 8024a5a:	68fb      	ldr	r3, [r7, #12]
 8024a5c:	2201      	movs	r2, #1
 8024a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024a62:	68fb      	ldr	r3, [r7, #12]
 8024a64:	2200      	movs	r2, #0
 8024a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8024a6a:	68fb      	ldr	r3, [r7, #12]
 8024a6c:	2222      	movs	r2, #34	; 0x22
 8024a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024a72:	68fb      	ldr	r3, [r7, #12]
 8024a74:	2200      	movs	r2, #0
 8024a76:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8024a78:	f7f1 fd3a 	bl	80164f0 <HAL_GetTick>
 8024a7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8024a7e:	68fb      	ldr	r3, [r7, #12]
 8024a80:	88fa      	ldrh	r2, [r7, #6]
 8024a82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8024a86:	68fb      	ldr	r3, [r7, #12]
 8024a88:	88fa      	ldrh	r2, [r7, #6]
 8024a8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8024a8e:	68fb      	ldr	r3, [r7, #12]
 8024a90:	689b      	ldr	r3, [r3, #8]
 8024a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024a96:	d10e      	bne.n	8024ab6 <HAL_UART_Receive+0x96>
 8024a98:	68fb      	ldr	r3, [r7, #12]
 8024a9a:	691b      	ldr	r3, [r3, #16]
 8024a9c:	2b00      	cmp	r3, #0
 8024a9e:	d105      	bne.n	8024aac <HAL_UART_Receive+0x8c>
 8024aa0:	68fb      	ldr	r3, [r7, #12]
 8024aa2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8024aa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8024aaa:	e02d      	b.n	8024b08 <HAL_UART_Receive+0xe8>
 8024aac:	68fb      	ldr	r3, [r7, #12]
 8024aae:	22ff      	movs	r2, #255	; 0xff
 8024ab0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8024ab4:	e028      	b.n	8024b08 <HAL_UART_Receive+0xe8>
 8024ab6:	68fb      	ldr	r3, [r7, #12]
 8024ab8:	689b      	ldr	r3, [r3, #8]
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d10d      	bne.n	8024ada <HAL_UART_Receive+0xba>
 8024abe:	68fb      	ldr	r3, [r7, #12]
 8024ac0:	691b      	ldr	r3, [r3, #16]
 8024ac2:	2b00      	cmp	r3, #0
 8024ac4:	d104      	bne.n	8024ad0 <HAL_UART_Receive+0xb0>
 8024ac6:	68fb      	ldr	r3, [r7, #12]
 8024ac8:	22ff      	movs	r2, #255	; 0xff
 8024aca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8024ace:	e01b      	b.n	8024b08 <HAL_UART_Receive+0xe8>
 8024ad0:	68fb      	ldr	r3, [r7, #12]
 8024ad2:	227f      	movs	r2, #127	; 0x7f
 8024ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8024ad8:	e016      	b.n	8024b08 <HAL_UART_Receive+0xe8>
 8024ada:	68fb      	ldr	r3, [r7, #12]
 8024adc:	689b      	ldr	r3, [r3, #8]
 8024ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8024ae2:	d10d      	bne.n	8024b00 <HAL_UART_Receive+0xe0>
 8024ae4:	68fb      	ldr	r3, [r7, #12]
 8024ae6:	691b      	ldr	r3, [r3, #16]
 8024ae8:	2b00      	cmp	r3, #0
 8024aea:	d104      	bne.n	8024af6 <HAL_UART_Receive+0xd6>
 8024aec:	68fb      	ldr	r3, [r7, #12]
 8024aee:	227f      	movs	r2, #127	; 0x7f
 8024af0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8024af4:	e008      	b.n	8024b08 <HAL_UART_Receive+0xe8>
 8024af6:	68fb      	ldr	r3, [r7, #12]
 8024af8:	223f      	movs	r2, #63	; 0x3f
 8024afa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8024afe:	e003      	b.n	8024b08 <HAL_UART_Receive+0xe8>
 8024b00:	68fb      	ldr	r3, [r7, #12]
 8024b02:	2200      	movs	r2, #0
 8024b04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8024b08:	68fb      	ldr	r3, [r7, #12]
 8024b0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8024b0e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8024b10:	68fb      	ldr	r3, [r7, #12]
 8024b12:	689b      	ldr	r3, [r3, #8]
 8024b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024b18:	d108      	bne.n	8024b2c <HAL_UART_Receive+0x10c>
 8024b1a:	68fb      	ldr	r3, [r7, #12]
 8024b1c:	691b      	ldr	r3, [r3, #16]
 8024b1e:	2b00      	cmp	r3, #0
 8024b20:	d104      	bne.n	8024b2c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8024b22:	2300      	movs	r3, #0
 8024b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8024b26:	68bb      	ldr	r3, [r7, #8]
 8024b28:	61bb      	str	r3, [r7, #24]
 8024b2a:	e003      	b.n	8024b34 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8024b2c:	68bb      	ldr	r3, [r7, #8]
 8024b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8024b30:	2300      	movs	r3, #0
 8024b32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8024b34:	68fb      	ldr	r3, [r7, #12]
 8024b36:	2200      	movs	r2, #0
 8024b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8024b3c:	e032      	b.n	8024ba4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8024b3e:	683b      	ldr	r3, [r7, #0]
 8024b40:	9300      	str	r3, [sp, #0]
 8024b42:	697b      	ldr	r3, [r7, #20]
 8024b44:	2200      	movs	r2, #0
 8024b46:	2120      	movs	r1, #32
 8024b48:	68f8      	ldr	r0, [r7, #12]
 8024b4a:	f001 f82e 	bl	8025baa <UART_WaitOnFlagUntilTimeout>
 8024b4e:	4603      	mov	r3, r0
 8024b50:	2b00      	cmp	r3, #0
 8024b52:	d001      	beq.n	8024b58 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8024b54:	2303      	movs	r3, #3
 8024b56:	e032      	b.n	8024bbe <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8024b58:	69fb      	ldr	r3, [r7, #28]
 8024b5a:	2b00      	cmp	r3, #0
 8024b5c:	d10c      	bne.n	8024b78 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8024b5e:	68fb      	ldr	r3, [r7, #12]
 8024b60:	681b      	ldr	r3, [r3, #0]
 8024b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b64:	b29a      	uxth	r2, r3
 8024b66:	8a7b      	ldrh	r3, [r7, #18]
 8024b68:	4013      	ands	r3, r2
 8024b6a:	b29a      	uxth	r2, r3
 8024b6c:	69bb      	ldr	r3, [r7, #24]
 8024b6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8024b70:	69bb      	ldr	r3, [r7, #24]
 8024b72:	3302      	adds	r3, #2
 8024b74:	61bb      	str	r3, [r7, #24]
 8024b76:	e00c      	b.n	8024b92 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8024b78:	68fb      	ldr	r3, [r7, #12]
 8024b7a:	681b      	ldr	r3, [r3, #0]
 8024b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b7e:	b2da      	uxtb	r2, r3
 8024b80:	8a7b      	ldrh	r3, [r7, #18]
 8024b82:	b2db      	uxtb	r3, r3
 8024b84:	4013      	ands	r3, r2
 8024b86:	b2da      	uxtb	r2, r3
 8024b88:	69fb      	ldr	r3, [r7, #28]
 8024b8a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8024b8c:	69fb      	ldr	r3, [r7, #28]
 8024b8e:	3301      	adds	r3, #1
 8024b90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8024b92:	68fb      	ldr	r3, [r7, #12]
 8024b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8024b98:	b29b      	uxth	r3, r3
 8024b9a:	3b01      	subs	r3, #1
 8024b9c:	b29a      	uxth	r2, r3
 8024b9e:	68fb      	ldr	r3, [r7, #12]
 8024ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8024ba4:	68fb      	ldr	r3, [r7, #12]
 8024ba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8024baa:	b29b      	uxth	r3, r3
 8024bac:	2b00      	cmp	r3, #0
 8024bae:	d1c6      	bne.n	8024b3e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8024bb0:	68fb      	ldr	r3, [r7, #12]
 8024bb2:	2220      	movs	r2, #32
 8024bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8024bb8:	2300      	movs	r3, #0
 8024bba:	e000      	b.n	8024bbe <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8024bbc:	2302      	movs	r3, #2
  }
}
 8024bbe:	4618      	mov	r0, r3
 8024bc0:	3720      	adds	r7, #32
 8024bc2:	46bd      	mov	sp, r7
 8024bc4:	bd80      	pop	{r7, pc}
	...

08024bc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8024bc8:	b580      	push	{r7, lr}
 8024bca:	b08a      	sub	sp, #40	; 0x28
 8024bcc:	af00      	add	r7, sp, #0
 8024bce:	60f8      	str	r0, [r7, #12]
 8024bd0:	60b9      	str	r1, [r7, #8]
 8024bd2:	4613      	mov	r3, r2
 8024bd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8024bd6:	68fb      	ldr	r3, [r7, #12]
 8024bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8024bdc:	2b20      	cmp	r3, #32
 8024bde:	d17a      	bne.n	8024cd6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8024be0:	68bb      	ldr	r3, [r7, #8]
 8024be2:	2b00      	cmp	r3, #0
 8024be4:	d002      	beq.n	8024bec <HAL_UART_Transmit_DMA+0x24>
 8024be6:	88fb      	ldrh	r3, [r7, #6]
 8024be8:	2b00      	cmp	r3, #0
 8024bea:	d101      	bne.n	8024bf0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8024bec:	2301      	movs	r3, #1
 8024bee:	e073      	b.n	8024cd8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8024bf0:	68fb      	ldr	r3, [r7, #12]
 8024bf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8024bf6:	2b01      	cmp	r3, #1
 8024bf8:	d101      	bne.n	8024bfe <HAL_UART_Transmit_DMA+0x36>
 8024bfa:	2302      	movs	r3, #2
 8024bfc:	e06c      	b.n	8024cd8 <HAL_UART_Transmit_DMA+0x110>
 8024bfe:	68fb      	ldr	r3, [r7, #12]
 8024c00:	2201      	movs	r2, #1
 8024c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8024c06:	68fb      	ldr	r3, [r7, #12]
 8024c08:	68ba      	ldr	r2, [r7, #8]
 8024c0a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8024c0c:	68fb      	ldr	r3, [r7, #12]
 8024c0e:	88fa      	ldrh	r2, [r7, #6]
 8024c10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8024c14:	68fb      	ldr	r3, [r7, #12]
 8024c16:	88fa      	ldrh	r2, [r7, #6]
 8024c18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024c1c:	68fb      	ldr	r3, [r7, #12]
 8024c1e:	2200      	movs	r2, #0
 8024c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8024c24:	68fb      	ldr	r3, [r7, #12]
 8024c26:	2221      	movs	r2, #33	; 0x21
 8024c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8024c2c:	68fb      	ldr	r3, [r7, #12]
 8024c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8024c30:	2b00      	cmp	r3, #0
 8024c32:	d02c      	beq.n	8024c8e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8024c34:	68fb      	ldr	r3, [r7, #12]
 8024c36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8024c38:	4a29      	ldr	r2, [pc, #164]	; (8024ce0 <HAL_UART_Transmit_DMA+0x118>)
 8024c3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8024c3c:	68fb      	ldr	r3, [r7, #12]
 8024c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8024c40:	4a28      	ldr	r2, [pc, #160]	; (8024ce4 <HAL_UART_Transmit_DMA+0x11c>)
 8024c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8024c44:	68fb      	ldr	r3, [r7, #12]
 8024c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8024c48:	4a27      	ldr	r2, [pc, #156]	; (8024ce8 <HAL_UART_Transmit_DMA+0x120>)
 8024c4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8024c4c:	68fb      	ldr	r3, [r7, #12]
 8024c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8024c50:	2200      	movs	r2, #0
 8024c52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8024c54:	68fb      	ldr	r3, [r7, #12]
 8024c56:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8024c58:	68fb      	ldr	r3, [r7, #12]
 8024c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024c5c:	4619      	mov	r1, r3
 8024c5e:	68fb      	ldr	r3, [r7, #12]
 8024c60:	681b      	ldr	r3, [r3, #0]
 8024c62:	3328      	adds	r3, #40	; 0x28
 8024c64:	461a      	mov	r2, r3
 8024c66:	88fb      	ldrh	r3, [r7, #6]
 8024c68:	f7f4 f8c8 	bl	8018dfc <HAL_DMA_Start_IT>
 8024c6c:	4603      	mov	r3, r0
 8024c6e:	2b00      	cmp	r3, #0
 8024c70:	d00d      	beq.n	8024c8e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8024c72:	68fb      	ldr	r3, [r7, #12]
 8024c74:	2210      	movs	r2, #16
 8024c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8024c7a:	68fb      	ldr	r3, [r7, #12]
 8024c7c:	2200      	movs	r2, #0
 8024c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8024c82:	68fb      	ldr	r3, [r7, #12]
 8024c84:	2220      	movs	r2, #32
 8024c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8024c8a:	2301      	movs	r3, #1
 8024c8c:	e024      	b.n	8024cd8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8024c8e:	68fb      	ldr	r3, [r7, #12]
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	2240      	movs	r2, #64	; 0x40
 8024c94:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8024c96:	68fb      	ldr	r3, [r7, #12]
 8024c98:	2200      	movs	r2, #0
 8024c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8024c9e:	68fb      	ldr	r3, [r7, #12]
 8024ca0:	681b      	ldr	r3, [r3, #0]
 8024ca2:	3308      	adds	r3, #8
 8024ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024ca6:	697b      	ldr	r3, [r7, #20]
 8024ca8:	e853 3f00 	ldrex	r3, [r3]
 8024cac:	613b      	str	r3, [r7, #16]
   return(result);
 8024cae:	693b      	ldr	r3, [r7, #16]
 8024cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8024cb6:	68fb      	ldr	r3, [r7, #12]
 8024cb8:	681b      	ldr	r3, [r3, #0]
 8024cba:	3308      	adds	r3, #8
 8024cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024cbe:	623a      	str	r2, [r7, #32]
 8024cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024cc2:	69f9      	ldr	r1, [r7, #28]
 8024cc4:	6a3a      	ldr	r2, [r7, #32]
 8024cc6:	e841 2300 	strex	r3, r2, [r1]
 8024cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8024ccc:	69bb      	ldr	r3, [r7, #24]
 8024cce:	2b00      	cmp	r3, #0
 8024cd0:	d1e5      	bne.n	8024c9e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8024cd2:	2300      	movs	r3, #0
 8024cd4:	e000      	b.n	8024cd8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8024cd6:	2302      	movs	r3, #2
  }
}
 8024cd8:	4618      	mov	r0, r3
 8024cda:	3728      	adds	r7, #40	; 0x28
 8024cdc:	46bd      	mov	sp, r7
 8024cde:	bd80      	pop	{r7, pc}
 8024ce0:	08025fdd 	.word	0x08025fdd
 8024ce4:	08026073 	.word	0x08026073
 8024ce8:	080261e9 	.word	0x080261e9

08024cec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8024cec:	b480      	push	{r7}
 8024cee:	b083      	sub	sp, #12
 8024cf0:	af00      	add	r7, sp, #0
 8024cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8024cf4:	bf00      	nop
 8024cf6:	370c      	adds	r7, #12
 8024cf8:	46bd      	mov	sp, r7
 8024cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cfe:	4770      	bx	lr

08024d00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8024d00:	b480      	push	{r7}
 8024d02:	b083      	sub	sp, #12
 8024d04:	af00      	add	r7, sp, #0
 8024d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8024d08:	bf00      	nop
 8024d0a:	370c      	adds	r7, #12
 8024d0c:	46bd      	mov	sp, r7
 8024d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d12:	4770      	bx	lr

08024d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8024d14:	b5b0      	push	{r4, r5, r7, lr}
 8024d16:	b08e      	sub	sp, #56	; 0x38
 8024d18:	af00      	add	r7, sp, #0
 8024d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8024d1c:	2300      	movs	r3, #0
 8024d1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024d22:	687b      	ldr	r3, [r7, #4]
 8024d24:	689a      	ldr	r2, [r3, #8]
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	691b      	ldr	r3, [r3, #16]
 8024d2a:	431a      	orrs	r2, r3
 8024d2c:	687b      	ldr	r3, [r7, #4]
 8024d2e:	695b      	ldr	r3, [r3, #20]
 8024d30:	431a      	orrs	r2, r3
 8024d32:	687b      	ldr	r3, [r7, #4]
 8024d34:	69db      	ldr	r3, [r3, #28]
 8024d36:	4313      	orrs	r3, r2
 8024d38:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	681b      	ldr	r3, [r3, #0]
 8024d3e:	681a      	ldr	r2, [r3, #0]
 8024d40:	4bbf      	ldr	r3, [pc, #764]	; (8025040 <UART_SetConfig+0x32c>)
 8024d42:	4013      	ands	r3, r2
 8024d44:	687a      	ldr	r2, [r7, #4]
 8024d46:	6812      	ldr	r2, [r2, #0]
 8024d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024d4a:	430b      	orrs	r3, r1
 8024d4c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	681b      	ldr	r3, [r3, #0]
 8024d52:	685b      	ldr	r3, [r3, #4]
 8024d54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	68da      	ldr	r2, [r3, #12]
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	430a      	orrs	r2, r1
 8024d62:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8024d64:	687b      	ldr	r3, [r7, #4]
 8024d66:	699b      	ldr	r3, [r3, #24]
 8024d68:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	681b      	ldr	r3, [r3, #0]
 8024d6e:	4ab5      	ldr	r2, [pc, #724]	; (8025044 <UART_SetConfig+0x330>)
 8024d70:	4293      	cmp	r3, r2
 8024d72:	d004      	beq.n	8024d7e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	6a1b      	ldr	r3, [r3, #32]
 8024d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024d7a:	4313      	orrs	r3, r2
 8024d7c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8024d7e:	687b      	ldr	r3, [r7, #4]
 8024d80:	681b      	ldr	r3, [r3, #0]
 8024d82:	689a      	ldr	r2, [r3, #8]
 8024d84:	4bb0      	ldr	r3, [pc, #704]	; (8025048 <UART_SetConfig+0x334>)
 8024d86:	4013      	ands	r3, r2
 8024d88:	687a      	ldr	r2, [r7, #4]
 8024d8a:	6812      	ldr	r2, [r2, #0]
 8024d8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024d8e:	430b      	orrs	r3, r1
 8024d90:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	681b      	ldr	r3, [r3, #0]
 8024d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024d98:	f023 010f 	bic.w	r1, r3, #15
 8024d9c:	687b      	ldr	r3, [r7, #4]
 8024d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	681b      	ldr	r3, [r3, #0]
 8024da4:	430a      	orrs	r2, r1
 8024da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	681b      	ldr	r3, [r3, #0]
 8024dac:	4aa7      	ldr	r2, [pc, #668]	; (802504c <UART_SetConfig+0x338>)
 8024dae:	4293      	cmp	r3, r2
 8024db0:	d176      	bne.n	8024ea0 <UART_SetConfig+0x18c>
 8024db2:	4ba7      	ldr	r3, [pc, #668]	; (8025050 <UART_SetConfig+0x33c>)
 8024db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8024dba:	2b28      	cmp	r3, #40	; 0x28
 8024dbc:	d86c      	bhi.n	8024e98 <UART_SetConfig+0x184>
 8024dbe:	a201      	add	r2, pc, #4	; (adr r2, 8024dc4 <UART_SetConfig+0xb0>)
 8024dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024dc4:	08024e69 	.word	0x08024e69
 8024dc8:	08024e99 	.word	0x08024e99
 8024dcc:	08024e99 	.word	0x08024e99
 8024dd0:	08024e99 	.word	0x08024e99
 8024dd4:	08024e99 	.word	0x08024e99
 8024dd8:	08024e99 	.word	0x08024e99
 8024ddc:	08024e99 	.word	0x08024e99
 8024de0:	08024e99 	.word	0x08024e99
 8024de4:	08024e71 	.word	0x08024e71
 8024de8:	08024e99 	.word	0x08024e99
 8024dec:	08024e99 	.word	0x08024e99
 8024df0:	08024e99 	.word	0x08024e99
 8024df4:	08024e99 	.word	0x08024e99
 8024df8:	08024e99 	.word	0x08024e99
 8024dfc:	08024e99 	.word	0x08024e99
 8024e00:	08024e99 	.word	0x08024e99
 8024e04:	08024e79 	.word	0x08024e79
 8024e08:	08024e99 	.word	0x08024e99
 8024e0c:	08024e99 	.word	0x08024e99
 8024e10:	08024e99 	.word	0x08024e99
 8024e14:	08024e99 	.word	0x08024e99
 8024e18:	08024e99 	.word	0x08024e99
 8024e1c:	08024e99 	.word	0x08024e99
 8024e20:	08024e99 	.word	0x08024e99
 8024e24:	08024e81 	.word	0x08024e81
 8024e28:	08024e99 	.word	0x08024e99
 8024e2c:	08024e99 	.word	0x08024e99
 8024e30:	08024e99 	.word	0x08024e99
 8024e34:	08024e99 	.word	0x08024e99
 8024e38:	08024e99 	.word	0x08024e99
 8024e3c:	08024e99 	.word	0x08024e99
 8024e40:	08024e99 	.word	0x08024e99
 8024e44:	08024e89 	.word	0x08024e89
 8024e48:	08024e99 	.word	0x08024e99
 8024e4c:	08024e99 	.word	0x08024e99
 8024e50:	08024e99 	.word	0x08024e99
 8024e54:	08024e99 	.word	0x08024e99
 8024e58:	08024e99 	.word	0x08024e99
 8024e5c:	08024e99 	.word	0x08024e99
 8024e60:	08024e99 	.word	0x08024e99
 8024e64:	08024e91 	.word	0x08024e91
 8024e68:	2301      	movs	r3, #1
 8024e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024e6e:	e326      	b.n	80254be <UART_SetConfig+0x7aa>
 8024e70:	2304      	movs	r3, #4
 8024e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024e76:	e322      	b.n	80254be <UART_SetConfig+0x7aa>
 8024e78:	2308      	movs	r3, #8
 8024e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024e7e:	e31e      	b.n	80254be <UART_SetConfig+0x7aa>
 8024e80:	2310      	movs	r3, #16
 8024e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024e86:	e31a      	b.n	80254be <UART_SetConfig+0x7aa>
 8024e88:	2320      	movs	r3, #32
 8024e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024e8e:	e316      	b.n	80254be <UART_SetConfig+0x7aa>
 8024e90:	2340      	movs	r3, #64	; 0x40
 8024e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024e96:	e312      	b.n	80254be <UART_SetConfig+0x7aa>
 8024e98:	2380      	movs	r3, #128	; 0x80
 8024e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024e9e:	e30e      	b.n	80254be <UART_SetConfig+0x7aa>
 8024ea0:	687b      	ldr	r3, [r7, #4]
 8024ea2:	681b      	ldr	r3, [r3, #0]
 8024ea4:	4a6b      	ldr	r2, [pc, #428]	; (8025054 <UART_SetConfig+0x340>)
 8024ea6:	4293      	cmp	r3, r2
 8024ea8:	d130      	bne.n	8024f0c <UART_SetConfig+0x1f8>
 8024eaa:	4b69      	ldr	r3, [pc, #420]	; (8025050 <UART_SetConfig+0x33c>)
 8024eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024eae:	f003 0307 	and.w	r3, r3, #7
 8024eb2:	2b05      	cmp	r3, #5
 8024eb4:	d826      	bhi.n	8024f04 <UART_SetConfig+0x1f0>
 8024eb6:	a201      	add	r2, pc, #4	; (adr r2, 8024ebc <UART_SetConfig+0x1a8>)
 8024eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024ebc:	08024ed5 	.word	0x08024ed5
 8024ec0:	08024edd 	.word	0x08024edd
 8024ec4:	08024ee5 	.word	0x08024ee5
 8024ec8:	08024eed 	.word	0x08024eed
 8024ecc:	08024ef5 	.word	0x08024ef5
 8024ed0:	08024efd 	.word	0x08024efd
 8024ed4:	2300      	movs	r3, #0
 8024ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024eda:	e2f0      	b.n	80254be <UART_SetConfig+0x7aa>
 8024edc:	2304      	movs	r3, #4
 8024ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024ee2:	e2ec      	b.n	80254be <UART_SetConfig+0x7aa>
 8024ee4:	2308      	movs	r3, #8
 8024ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024eea:	e2e8      	b.n	80254be <UART_SetConfig+0x7aa>
 8024eec:	2310      	movs	r3, #16
 8024eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024ef2:	e2e4      	b.n	80254be <UART_SetConfig+0x7aa>
 8024ef4:	2320      	movs	r3, #32
 8024ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024efa:	e2e0      	b.n	80254be <UART_SetConfig+0x7aa>
 8024efc:	2340      	movs	r3, #64	; 0x40
 8024efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f02:	e2dc      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f04:	2380      	movs	r3, #128	; 0x80
 8024f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f0a:	e2d8      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f0c:	687b      	ldr	r3, [r7, #4]
 8024f0e:	681b      	ldr	r3, [r3, #0]
 8024f10:	4a51      	ldr	r2, [pc, #324]	; (8025058 <UART_SetConfig+0x344>)
 8024f12:	4293      	cmp	r3, r2
 8024f14:	d130      	bne.n	8024f78 <UART_SetConfig+0x264>
 8024f16:	4b4e      	ldr	r3, [pc, #312]	; (8025050 <UART_SetConfig+0x33c>)
 8024f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f1a:	f003 0307 	and.w	r3, r3, #7
 8024f1e:	2b05      	cmp	r3, #5
 8024f20:	d826      	bhi.n	8024f70 <UART_SetConfig+0x25c>
 8024f22:	a201      	add	r2, pc, #4	; (adr r2, 8024f28 <UART_SetConfig+0x214>)
 8024f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024f28:	08024f41 	.word	0x08024f41
 8024f2c:	08024f49 	.word	0x08024f49
 8024f30:	08024f51 	.word	0x08024f51
 8024f34:	08024f59 	.word	0x08024f59
 8024f38:	08024f61 	.word	0x08024f61
 8024f3c:	08024f69 	.word	0x08024f69
 8024f40:	2300      	movs	r3, #0
 8024f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f46:	e2ba      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f48:	2304      	movs	r3, #4
 8024f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f4e:	e2b6      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f50:	2308      	movs	r3, #8
 8024f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f56:	e2b2      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f58:	2310      	movs	r3, #16
 8024f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f5e:	e2ae      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f60:	2320      	movs	r3, #32
 8024f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f66:	e2aa      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f68:	2340      	movs	r3, #64	; 0x40
 8024f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f6e:	e2a6      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f70:	2380      	movs	r3, #128	; 0x80
 8024f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024f76:	e2a2      	b.n	80254be <UART_SetConfig+0x7aa>
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	681b      	ldr	r3, [r3, #0]
 8024f7c:	4a37      	ldr	r2, [pc, #220]	; (802505c <UART_SetConfig+0x348>)
 8024f7e:	4293      	cmp	r3, r2
 8024f80:	d130      	bne.n	8024fe4 <UART_SetConfig+0x2d0>
 8024f82:	4b33      	ldr	r3, [pc, #204]	; (8025050 <UART_SetConfig+0x33c>)
 8024f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f86:	f003 0307 	and.w	r3, r3, #7
 8024f8a:	2b05      	cmp	r3, #5
 8024f8c:	d826      	bhi.n	8024fdc <UART_SetConfig+0x2c8>
 8024f8e:	a201      	add	r2, pc, #4	; (adr r2, 8024f94 <UART_SetConfig+0x280>)
 8024f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024f94:	08024fad 	.word	0x08024fad
 8024f98:	08024fb5 	.word	0x08024fb5
 8024f9c:	08024fbd 	.word	0x08024fbd
 8024fa0:	08024fc5 	.word	0x08024fc5
 8024fa4:	08024fcd 	.word	0x08024fcd
 8024fa8:	08024fd5 	.word	0x08024fd5
 8024fac:	2300      	movs	r3, #0
 8024fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024fb2:	e284      	b.n	80254be <UART_SetConfig+0x7aa>
 8024fb4:	2304      	movs	r3, #4
 8024fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024fba:	e280      	b.n	80254be <UART_SetConfig+0x7aa>
 8024fbc:	2308      	movs	r3, #8
 8024fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024fc2:	e27c      	b.n	80254be <UART_SetConfig+0x7aa>
 8024fc4:	2310      	movs	r3, #16
 8024fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024fca:	e278      	b.n	80254be <UART_SetConfig+0x7aa>
 8024fcc:	2320      	movs	r3, #32
 8024fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024fd2:	e274      	b.n	80254be <UART_SetConfig+0x7aa>
 8024fd4:	2340      	movs	r3, #64	; 0x40
 8024fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024fda:	e270      	b.n	80254be <UART_SetConfig+0x7aa>
 8024fdc:	2380      	movs	r3, #128	; 0x80
 8024fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8024fe2:	e26c      	b.n	80254be <UART_SetConfig+0x7aa>
 8024fe4:	687b      	ldr	r3, [r7, #4]
 8024fe6:	681b      	ldr	r3, [r3, #0]
 8024fe8:	4a1d      	ldr	r2, [pc, #116]	; (8025060 <UART_SetConfig+0x34c>)
 8024fea:	4293      	cmp	r3, r2
 8024fec:	d142      	bne.n	8025074 <UART_SetConfig+0x360>
 8024fee:	4b18      	ldr	r3, [pc, #96]	; (8025050 <UART_SetConfig+0x33c>)
 8024ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024ff2:	f003 0307 	and.w	r3, r3, #7
 8024ff6:	2b05      	cmp	r3, #5
 8024ff8:	d838      	bhi.n	802506c <UART_SetConfig+0x358>
 8024ffa:	a201      	add	r2, pc, #4	; (adr r2, 8025000 <UART_SetConfig+0x2ec>)
 8024ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025000:	08025019 	.word	0x08025019
 8025004:	08025021 	.word	0x08025021
 8025008:	08025029 	.word	0x08025029
 802500c:	08025031 	.word	0x08025031
 8025010:	08025039 	.word	0x08025039
 8025014:	08025065 	.word	0x08025065
 8025018:	2300      	movs	r3, #0
 802501a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802501e:	e24e      	b.n	80254be <UART_SetConfig+0x7aa>
 8025020:	2304      	movs	r3, #4
 8025022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025026:	e24a      	b.n	80254be <UART_SetConfig+0x7aa>
 8025028:	2308      	movs	r3, #8
 802502a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802502e:	e246      	b.n	80254be <UART_SetConfig+0x7aa>
 8025030:	2310      	movs	r3, #16
 8025032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025036:	e242      	b.n	80254be <UART_SetConfig+0x7aa>
 8025038:	2320      	movs	r3, #32
 802503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802503e:	e23e      	b.n	80254be <UART_SetConfig+0x7aa>
 8025040:	cfff69f3 	.word	0xcfff69f3
 8025044:	58000c00 	.word	0x58000c00
 8025048:	11fff4ff 	.word	0x11fff4ff
 802504c:	40011000 	.word	0x40011000
 8025050:	58024400 	.word	0x58024400
 8025054:	40004400 	.word	0x40004400
 8025058:	40004800 	.word	0x40004800
 802505c:	40004c00 	.word	0x40004c00
 8025060:	40005000 	.word	0x40005000
 8025064:	2340      	movs	r3, #64	; 0x40
 8025066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802506a:	e228      	b.n	80254be <UART_SetConfig+0x7aa>
 802506c:	2380      	movs	r3, #128	; 0x80
 802506e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025072:	e224      	b.n	80254be <UART_SetConfig+0x7aa>
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	681b      	ldr	r3, [r3, #0]
 8025078:	4ab1      	ldr	r2, [pc, #708]	; (8025340 <UART_SetConfig+0x62c>)
 802507a:	4293      	cmp	r3, r2
 802507c:	d176      	bne.n	802516c <UART_SetConfig+0x458>
 802507e:	4bb1      	ldr	r3, [pc, #708]	; (8025344 <UART_SetConfig+0x630>)
 8025080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025086:	2b28      	cmp	r3, #40	; 0x28
 8025088:	d86c      	bhi.n	8025164 <UART_SetConfig+0x450>
 802508a:	a201      	add	r2, pc, #4	; (adr r2, 8025090 <UART_SetConfig+0x37c>)
 802508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025090:	08025135 	.word	0x08025135
 8025094:	08025165 	.word	0x08025165
 8025098:	08025165 	.word	0x08025165
 802509c:	08025165 	.word	0x08025165
 80250a0:	08025165 	.word	0x08025165
 80250a4:	08025165 	.word	0x08025165
 80250a8:	08025165 	.word	0x08025165
 80250ac:	08025165 	.word	0x08025165
 80250b0:	0802513d 	.word	0x0802513d
 80250b4:	08025165 	.word	0x08025165
 80250b8:	08025165 	.word	0x08025165
 80250bc:	08025165 	.word	0x08025165
 80250c0:	08025165 	.word	0x08025165
 80250c4:	08025165 	.word	0x08025165
 80250c8:	08025165 	.word	0x08025165
 80250cc:	08025165 	.word	0x08025165
 80250d0:	08025145 	.word	0x08025145
 80250d4:	08025165 	.word	0x08025165
 80250d8:	08025165 	.word	0x08025165
 80250dc:	08025165 	.word	0x08025165
 80250e0:	08025165 	.word	0x08025165
 80250e4:	08025165 	.word	0x08025165
 80250e8:	08025165 	.word	0x08025165
 80250ec:	08025165 	.word	0x08025165
 80250f0:	0802514d 	.word	0x0802514d
 80250f4:	08025165 	.word	0x08025165
 80250f8:	08025165 	.word	0x08025165
 80250fc:	08025165 	.word	0x08025165
 8025100:	08025165 	.word	0x08025165
 8025104:	08025165 	.word	0x08025165
 8025108:	08025165 	.word	0x08025165
 802510c:	08025165 	.word	0x08025165
 8025110:	08025155 	.word	0x08025155
 8025114:	08025165 	.word	0x08025165
 8025118:	08025165 	.word	0x08025165
 802511c:	08025165 	.word	0x08025165
 8025120:	08025165 	.word	0x08025165
 8025124:	08025165 	.word	0x08025165
 8025128:	08025165 	.word	0x08025165
 802512c:	08025165 	.word	0x08025165
 8025130:	0802515d 	.word	0x0802515d
 8025134:	2301      	movs	r3, #1
 8025136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802513a:	e1c0      	b.n	80254be <UART_SetConfig+0x7aa>
 802513c:	2304      	movs	r3, #4
 802513e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025142:	e1bc      	b.n	80254be <UART_SetConfig+0x7aa>
 8025144:	2308      	movs	r3, #8
 8025146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802514a:	e1b8      	b.n	80254be <UART_SetConfig+0x7aa>
 802514c:	2310      	movs	r3, #16
 802514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025152:	e1b4      	b.n	80254be <UART_SetConfig+0x7aa>
 8025154:	2320      	movs	r3, #32
 8025156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802515a:	e1b0      	b.n	80254be <UART_SetConfig+0x7aa>
 802515c:	2340      	movs	r3, #64	; 0x40
 802515e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025162:	e1ac      	b.n	80254be <UART_SetConfig+0x7aa>
 8025164:	2380      	movs	r3, #128	; 0x80
 8025166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802516a:	e1a8      	b.n	80254be <UART_SetConfig+0x7aa>
 802516c:	687b      	ldr	r3, [r7, #4]
 802516e:	681b      	ldr	r3, [r3, #0]
 8025170:	4a75      	ldr	r2, [pc, #468]	; (8025348 <UART_SetConfig+0x634>)
 8025172:	4293      	cmp	r3, r2
 8025174:	d130      	bne.n	80251d8 <UART_SetConfig+0x4c4>
 8025176:	4b73      	ldr	r3, [pc, #460]	; (8025344 <UART_SetConfig+0x630>)
 8025178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802517a:	f003 0307 	and.w	r3, r3, #7
 802517e:	2b05      	cmp	r3, #5
 8025180:	d826      	bhi.n	80251d0 <UART_SetConfig+0x4bc>
 8025182:	a201      	add	r2, pc, #4	; (adr r2, 8025188 <UART_SetConfig+0x474>)
 8025184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025188:	080251a1 	.word	0x080251a1
 802518c:	080251a9 	.word	0x080251a9
 8025190:	080251b1 	.word	0x080251b1
 8025194:	080251b9 	.word	0x080251b9
 8025198:	080251c1 	.word	0x080251c1
 802519c:	080251c9 	.word	0x080251c9
 80251a0:	2300      	movs	r3, #0
 80251a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80251a6:	e18a      	b.n	80254be <UART_SetConfig+0x7aa>
 80251a8:	2304      	movs	r3, #4
 80251aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80251ae:	e186      	b.n	80254be <UART_SetConfig+0x7aa>
 80251b0:	2308      	movs	r3, #8
 80251b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80251b6:	e182      	b.n	80254be <UART_SetConfig+0x7aa>
 80251b8:	2310      	movs	r3, #16
 80251ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80251be:	e17e      	b.n	80254be <UART_SetConfig+0x7aa>
 80251c0:	2320      	movs	r3, #32
 80251c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80251c6:	e17a      	b.n	80254be <UART_SetConfig+0x7aa>
 80251c8:	2340      	movs	r3, #64	; 0x40
 80251ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80251ce:	e176      	b.n	80254be <UART_SetConfig+0x7aa>
 80251d0:	2380      	movs	r3, #128	; 0x80
 80251d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80251d6:	e172      	b.n	80254be <UART_SetConfig+0x7aa>
 80251d8:	687b      	ldr	r3, [r7, #4]
 80251da:	681b      	ldr	r3, [r3, #0]
 80251dc:	4a5b      	ldr	r2, [pc, #364]	; (802534c <UART_SetConfig+0x638>)
 80251de:	4293      	cmp	r3, r2
 80251e0:	d130      	bne.n	8025244 <UART_SetConfig+0x530>
 80251e2:	4b58      	ldr	r3, [pc, #352]	; (8025344 <UART_SetConfig+0x630>)
 80251e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80251e6:	f003 0307 	and.w	r3, r3, #7
 80251ea:	2b05      	cmp	r3, #5
 80251ec:	d826      	bhi.n	802523c <UART_SetConfig+0x528>
 80251ee:	a201      	add	r2, pc, #4	; (adr r2, 80251f4 <UART_SetConfig+0x4e0>)
 80251f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80251f4:	0802520d 	.word	0x0802520d
 80251f8:	08025215 	.word	0x08025215
 80251fc:	0802521d 	.word	0x0802521d
 8025200:	08025225 	.word	0x08025225
 8025204:	0802522d 	.word	0x0802522d
 8025208:	08025235 	.word	0x08025235
 802520c:	2300      	movs	r3, #0
 802520e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025212:	e154      	b.n	80254be <UART_SetConfig+0x7aa>
 8025214:	2304      	movs	r3, #4
 8025216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802521a:	e150      	b.n	80254be <UART_SetConfig+0x7aa>
 802521c:	2308      	movs	r3, #8
 802521e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025222:	e14c      	b.n	80254be <UART_SetConfig+0x7aa>
 8025224:	2310      	movs	r3, #16
 8025226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802522a:	e148      	b.n	80254be <UART_SetConfig+0x7aa>
 802522c:	2320      	movs	r3, #32
 802522e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025232:	e144      	b.n	80254be <UART_SetConfig+0x7aa>
 8025234:	2340      	movs	r3, #64	; 0x40
 8025236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802523a:	e140      	b.n	80254be <UART_SetConfig+0x7aa>
 802523c:	2380      	movs	r3, #128	; 0x80
 802523e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025242:	e13c      	b.n	80254be <UART_SetConfig+0x7aa>
 8025244:	687b      	ldr	r3, [r7, #4]
 8025246:	681b      	ldr	r3, [r3, #0]
 8025248:	4a41      	ldr	r2, [pc, #260]	; (8025350 <UART_SetConfig+0x63c>)
 802524a:	4293      	cmp	r3, r2
 802524c:	f040 8082 	bne.w	8025354 <UART_SetConfig+0x640>
 8025250:	4b3c      	ldr	r3, [pc, #240]	; (8025344 <UART_SetConfig+0x630>)
 8025252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025258:	2b28      	cmp	r3, #40	; 0x28
 802525a:	d86d      	bhi.n	8025338 <UART_SetConfig+0x624>
 802525c:	a201      	add	r2, pc, #4	; (adr r2, 8025264 <UART_SetConfig+0x550>)
 802525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025262:	bf00      	nop
 8025264:	08025309 	.word	0x08025309
 8025268:	08025339 	.word	0x08025339
 802526c:	08025339 	.word	0x08025339
 8025270:	08025339 	.word	0x08025339
 8025274:	08025339 	.word	0x08025339
 8025278:	08025339 	.word	0x08025339
 802527c:	08025339 	.word	0x08025339
 8025280:	08025339 	.word	0x08025339
 8025284:	08025311 	.word	0x08025311
 8025288:	08025339 	.word	0x08025339
 802528c:	08025339 	.word	0x08025339
 8025290:	08025339 	.word	0x08025339
 8025294:	08025339 	.word	0x08025339
 8025298:	08025339 	.word	0x08025339
 802529c:	08025339 	.word	0x08025339
 80252a0:	08025339 	.word	0x08025339
 80252a4:	08025319 	.word	0x08025319
 80252a8:	08025339 	.word	0x08025339
 80252ac:	08025339 	.word	0x08025339
 80252b0:	08025339 	.word	0x08025339
 80252b4:	08025339 	.word	0x08025339
 80252b8:	08025339 	.word	0x08025339
 80252bc:	08025339 	.word	0x08025339
 80252c0:	08025339 	.word	0x08025339
 80252c4:	08025321 	.word	0x08025321
 80252c8:	08025339 	.word	0x08025339
 80252cc:	08025339 	.word	0x08025339
 80252d0:	08025339 	.word	0x08025339
 80252d4:	08025339 	.word	0x08025339
 80252d8:	08025339 	.word	0x08025339
 80252dc:	08025339 	.word	0x08025339
 80252e0:	08025339 	.word	0x08025339
 80252e4:	08025329 	.word	0x08025329
 80252e8:	08025339 	.word	0x08025339
 80252ec:	08025339 	.word	0x08025339
 80252f0:	08025339 	.word	0x08025339
 80252f4:	08025339 	.word	0x08025339
 80252f8:	08025339 	.word	0x08025339
 80252fc:	08025339 	.word	0x08025339
 8025300:	08025339 	.word	0x08025339
 8025304:	08025331 	.word	0x08025331
 8025308:	2301      	movs	r3, #1
 802530a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802530e:	e0d6      	b.n	80254be <UART_SetConfig+0x7aa>
 8025310:	2304      	movs	r3, #4
 8025312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025316:	e0d2      	b.n	80254be <UART_SetConfig+0x7aa>
 8025318:	2308      	movs	r3, #8
 802531a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802531e:	e0ce      	b.n	80254be <UART_SetConfig+0x7aa>
 8025320:	2310      	movs	r3, #16
 8025322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025326:	e0ca      	b.n	80254be <UART_SetConfig+0x7aa>
 8025328:	2320      	movs	r3, #32
 802532a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802532e:	e0c6      	b.n	80254be <UART_SetConfig+0x7aa>
 8025330:	2340      	movs	r3, #64	; 0x40
 8025332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025336:	e0c2      	b.n	80254be <UART_SetConfig+0x7aa>
 8025338:	2380      	movs	r3, #128	; 0x80
 802533a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802533e:	e0be      	b.n	80254be <UART_SetConfig+0x7aa>
 8025340:	40011400 	.word	0x40011400
 8025344:	58024400 	.word	0x58024400
 8025348:	40007800 	.word	0x40007800
 802534c:	40007c00 	.word	0x40007c00
 8025350:	40011800 	.word	0x40011800
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	681b      	ldr	r3, [r3, #0]
 8025358:	4aad      	ldr	r2, [pc, #692]	; (8025610 <UART_SetConfig+0x8fc>)
 802535a:	4293      	cmp	r3, r2
 802535c:	d176      	bne.n	802544c <UART_SetConfig+0x738>
 802535e:	4bad      	ldr	r3, [pc, #692]	; (8025614 <UART_SetConfig+0x900>)
 8025360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025366:	2b28      	cmp	r3, #40	; 0x28
 8025368:	d86c      	bhi.n	8025444 <UART_SetConfig+0x730>
 802536a:	a201      	add	r2, pc, #4	; (adr r2, 8025370 <UART_SetConfig+0x65c>)
 802536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025370:	08025415 	.word	0x08025415
 8025374:	08025445 	.word	0x08025445
 8025378:	08025445 	.word	0x08025445
 802537c:	08025445 	.word	0x08025445
 8025380:	08025445 	.word	0x08025445
 8025384:	08025445 	.word	0x08025445
 8025388:	08025445 	.word	0x08025445
 802538c:	08025445 	.word	0x08025445
 8025390:	0802541d 	.word	0x0802541d
 8025394:	08025445 	.word	0x08025445
 8025398:	08025445 	.word	0x08025445
 802539c:	08025445 	.word	0x08025445
 80253a0:	08025445 	.word	0x08025445
 80253a4:	08025445 	.word	0x08025445
 80253a8:	08025445 	.word	0x08025445
 80253ac:	08025445 	.word	0x08025445
 80253b0:	08025425 	.word	0x08025425
 80253b4:	08025445 	.word	0x08025445
 80253b8:	08025445 	.word	0x08025445
 80253bc:	08025445 	.word	0x08025445
 80253c0:	08025445 	.word	0x08025445
 80253c4:	08025445 	.word	0x08025445
 80253c8:	08025445 	.word	0x08025445
 80253cc:	08025445 	.word	0x08025445
 80253d0:	0802542d 	.word	0x0802542d
 80253d4:	08025445 	.word	0x08025445
 80253d8:	08025445 	.word	0x08025445
 80253dc:	08025445 	.word	0x08025445
 80253e0:	08025445 	.word	0x08025445
 80253e4:	08025445 	.word	0x08025445
 80253e8:	08025445 	.word	0x08025445
 80253ec:	08025445 	.word	0x08025445
 80253f0:	08025435 	.word	0x08025435
 80253f4:	08025445 	.word	0x08025445
 80253f8:	08025445 	.word	0x08025445
 80253fc:	08025445 	.word	0x08025445
 8025400:	08025445 	.word	0x08025445
 8025404:	08025445 	.word	0x08025445
 8025408:	08025445 	.word	0x08025445
 802540c:	08025445 	.word	0x08025445
 8025410:	0802543d 	.word	0x0802543d
 8025414:	2301      	movs	r3, #1
 8025416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802541a:	e050      	b.n	80254be <UART_SetConfig+0x7aa>
 802541c:	2304      	movs	r3, #4
 802541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025422:	e04c      	b.n	80254be <UART_SetConfig+0x7aa>
 8025424:	2308      	movs	r3, #8
 8025426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802542a:	e048      	b.n	80254be <UART_SetConfig+0x7aa>
 802542c:	2310      	movs	r3, #16
 802542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025432:	e044      	b.n	80254be <UART_SetConfig+0x7aa>
 8025434:	2320      	movs	r3, #32
 8025436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802543a:	e040      	b.n	80254be <UART_SetConfig+0x7aa>
 802543c:	2340      	movs	r3, #64	; 0x40
 802543e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025442:	e03c      	b.n	80254be <UART_SetConfig+0x7aa>
 8025444:	2380      	movs	r3, #128	; 0x80
 8025446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802544a:	e038      	b.n	80254be <UART_SetConfig+0x7aa>
 802544c:	687b      	ldr	r3, [r7, #4]
 802544e:	681b      	ldr	r3, [r3, #0]
 8025450:	4a71      	ldr	r2, [pc, #452]	; (8025618 <UART_SetConfig+0x904>)
 8025452:	4293      	cmp	r3, r2
 8025454:	d130      	bne.n	80254b8 <UART_SetConfig+0x7a4>
 8025456:	4b6f      	ldr	r3, [pc, #444]	; (8025614 <UART_SetConfig+0x900>)
 8025458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802545a:	f003 0307 	and.w	r3, r3, #7
 802545e:	2b05      	cmp	r3, #5
 8025460:	d826      	bhi.n	80254b0 <UART_SetConfig+0x79c>
 8025462:	a201      	add	r2, pc, #4	; (adr r2, 8025468 <UART_SetConfig+0x754>)
 8025464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025468:	08025481 	.word	0x08025481
 802546c:	08025489 	.word	0x08025489
 8025470:	08025491 	.word	0x08025491
 8025474:	08025499 	.word	0x08025499
 8025478:	080254a1 	.word	0x080254a1
 802547c:	080254a9 	.word	0x080254a9
 8025480:	2302      	movs	r3, #2
 8025482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025486:	e01a      	b.n	80254be <UART_SetConfig+0x7aa>
 8025488:	2304      	movs	r3, #4
 802548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802548e:	e016      	b.n	80254be <UART_SetConfig+0x7aa>
 8025490:	2308      	movs	r3, #8
 8025492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025496:	e012      	b.n	80254be <UART_SetConfig+0x7aa>
 8025498:	2310      	movs	r3, #16
 802549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802549e:	e00e      	b.n	80254be <UART_SetConfig+0x7aa>
 80254a0:	2320      	movs	r3, #32
 80254a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80254a6:	e00a      	b.n	80254be <UART_SetConfig+0x7aa>
 80254a8:	2340      	movs	r3, #64	; 0x40
 80254aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80254ae:	e006      	b.n	80254be <UART_SetConfig+0x7aa>
 80254b0:	2380      	movs	r3, #128	; 0x80
 80254b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80254b6:	e002      	b.n	80254be <UART_SetConfig+0x7aa>
 80254b8:	2380      	movs	r3, #128	; 0x80
 80254ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80254be:	687b      	ldr	r3, [r7, #4]
 80254c0:	681b      	ldr	r3, [r3, #0]
 80254c2:	4a55      	ldr	r2, [pc, #340]	; (8025618 <UART_SetConfig+0x904>)
 80254c4:	4293      	cmp	r3, r2
 80254c6:	f040 80f0 	bne.w	80256aa <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80254ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80254ce:	2b20      	cmp	r3, #32
 80254d0:	dc46      	bgt.n	8025560 <UART_SetConfig+0x84c>
 80254d2:	2b02      	cmp	r3, #2
 80254d4:	db75      	blt.n	80255c2 <UART_SetConfig+0x8ae>
 80254d6:	3b02      	subs	r3, #2
 80254d8:	2b1e      	cmp	r3, #30
 80254da:	d872      	bhi.n	80255c2 <UART_SetConfig+0x8ae>
 80254dc:	a201      	add	r2, pc, #4	; (adr r2, 80254e4 <UART_SetConfig+0x7d0>)
 80254de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80254e2:	bf00      	nop
 80254e4:	08025567 	.word	0x08025567
 80254e8:	080255c3 	.word	0x080255c3
 80254ec:	0802556f 	.word	0x0802556f
 80254f0:	080255c3 	.word	0x080255c3
 80254f4:	080255c3 	.word	0x080255c3
 80254f8:	080255c3 	.word	0x080255c3
 80254fc:	0802557f 	.word	0x0802557f
 8025500:	080255c3 	.word	0x080255c3
 8025504:	080255c3 	.word	0x080255c3
 8025508:	080255c3 	.word	0x080255c3
 802550c:	080255c3 	.word	0x080255c3
 8025510:	080255c3 	.word	0x080255c3
 8025514:	080255c3 	.word	0x080255c3
 8025518:	080255c3 	.word	0x080255c3
 802551c:	0802558f 	.word	0x0802558f
 8025520:	080255c3 	.word	0x080255c3
 8025524:	080255c3 	.word	0x080255c3
 8025528:	080255c3 	.word	0x080255c3
 802552c:	080255c3 	.word	0x080255c3
 8025530:	080255c3 	.word	0x080255c3
 8025534:	080255c3 	.word	0x080255c3
 8025538:	080255c3 	.word	0x080255c3
 802553c:	080255c3 	.word	0x080255c3
 8025540:	080255c3 	.word	0x080255c3
 8025544:	080255c3 	.word	0x080255c3
 8025548:	080255c3 	.word	0x080255c3
 802554c:	080255c3 	.word	0x080255c3
 8025550:	080255c3 	.word	0x080255c3
 8025554:	080255c3 	.word	0x080255c3
 8025558:	080255c3 	.word	0x080255c3
 802555c:	080255b5 	.word	0x080255b5
 8025560:	2b40      	cmp	r3, #64	; 0x40
 8025562:	d02a      	beq.n	80255ba <UART_SetConfig+0x8a6>
 8025564:	e02d      	b.n	80255c2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8025566:	f7fb f9bd 	bl	80208e4 <HAL_RCCEx_GetD3PCLK1Freq>
 802556a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 802556c:	e02f      	b.n	80255ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802556e:	f107 0314 	add.w	r3, r7, #20
 8025572:	4618      	mov	r0, r3
 8025574:	f7fb f9cc 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8025578:	69bb      	ldr	r3, [r7, #24]
 802557a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802557c:	e027      	b.n	80255ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802557e:	f107 0308 	add.w	r3, r7, #8
 8025582:	4618      	mov	r0, r3
 8025584:	f7fb fb18 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025588:	68fb      	ldr	r3, [r7, #12]
 802558a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802558c:	e01f      	b.n	80255ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802558e:	4b21      	ldr	r3, [pc, #132]	; (8025614 <UART_SetConfig+0x900>)
 8025590:	681b      	ldr	r3, [r3, #0]
 8025592:	f003 0320 	and.w	r3, r3, #32
 8025596:	2b00      	cmp	r3, #0
 8025598:	d009      	beq.n	80255ae <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802559a:	4b1e      	ldr	r3, [pc, #120]	; (8025614 <UART_SetConfig+0x900>)
 802559c:	681b      	ldr	r3, [r3, #0]
 802559e:	08db      	lsrs	r3, r3, #3
 80255a0:	f003 0303 	and.w	r3, r3, #3
 80255a4:	4a1d      	ldr	r2, [pc, #116]	; (802561c <UART_SetConfig+0x908>)
 80255a6:	fa22 f303 	lsr.w	r3, r2, r3
 80255aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80255ac:	e00f      	b.n	80255ce <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80255ae:	4b1b      	ldr	r3, [pc, #108]	; (802561c <UART_SetConfig+0x908>)
 80255b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80255b2:	e00c      	b.n	80255ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80255b4:	4b1a      	ldr	r3, [pc, #104]	; (8025620 <UART_SetConfig+0x90c>)
 80255b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80255b8:	e009      	b.n	80255ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80255ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80255be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80255c0:	e005      	b.n	80255ce <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80255c2:	2300      	movs	r3, #0
 80255c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80255c6:	2301      	movs	r3, #1
 80255c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80255cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80255ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255d0:	2b00      	cmp	r3, #0
 80255d2:	f000 81e6 	beq.w	80259a2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80255d6:	687b      	ldr	r3, [r7, #4]
 80255d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80255da:	4a12      	ldr	r2, [pc, #72]	; (8025624 <UART_SetConfig+0x910>)
 80255dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80255e0:	461a      	mov	r2, r3
 80255e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80255e8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80255ea:	687b      	ldr	r3, [r7, #4]
 80255ec:	685a      	ldr	r2, [r3, #4]
 80255ee:	4613      	mov	r3, r2
 80255f0:	005b      	lsls	r3, r3, #1
 80255f2:	4413      	add	r3, r2
 80255f4:	6a3a      	ldr	r2, [r7, #32]
 80255f6:	429a      	cmp	r2, r3
 80255f8:	d305      	bcc.n	8025606 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80255fa:	687b      	ldr	r3, [r7, #4]
 80255fc:	685b      	ldr	r3, [r3, #4]
 80255fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8025600:	6a3a      	ldr	r2, [r7, #32]
 8025602:	429a      	cmp	r2, r3
 8025604:	d910      	bls.n	8025628 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8025606:	2301      	movs	r3, #1
 8025608:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 802560c:	e1c9      	b.n	80259a2 <UART_SetConfig+0xc8e>
 802560e:	bf00      	nop
 8025610:	40011c00 	.word	0x40011c00
 8025614:	58024400 	.word	0x58024400
 8025618:	58000c00 	.word	0x58000c00
 802561c:	03d09000 	.word	0x03d09000
 8025620:	003d0900 	.word	0x003d0900
 8025624:	0802b4ec 	.word	0x0802b4ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802562a:	4618      	mov	r0, r3
 802562c:	f04f 0100 	mov.w	r1, #0
 8025630:	687b      	ldr	r3, [r7, #4]
 8025632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025634:	4ac1      	ldr	r2, [pc, #772]	; (802593c <UART_SetConfig+0xc28>)
 8025636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802563a:	b29a      	uxth	r2, r3
 802563c:	f04f 0300 	mov.w	r3, #0
 8025640:	f7db f87a 	bl	8000738 <__aeabi_uldivmod>
 8025644:	4602      	mov	r2, r0
 8025646:	460b      	mov	r3, r1
 8025648:	4610      	mov	r0, r2
 802564a:	4619      	mov	r1, r3
 802564c:	f04f 0200 	mov.w	r2, #0
 8025650:	f04f 0300 	mov.w	r3, #0
 8025654:	020b      	lsls	r3, r1, #8
 8025656:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802565a:	0202      	lsls	r2, r0, #8
 802565c:	6879      	ldr	r1, [r7, #4]
 802565e:	6849      	ldr	r1, [r1, #4]
 8025660:	0849      	lsrs	r1, r1, #1
 8025662:	4608      	mov	r0, r1
 8025664:	f04f 0100 	mov.w	r1, #0
 8025668:	1814      	adds	r4, r2, r0
 802566a:	eb43 0501 	adc.w	r5, r3, r1
 802566e:	687b      	ldr	r3, [r7, #4]
 8025670:	685b      	ldr	r3, [r3, #4]
 8025672:	461a      	mov	r2, r3
 8025674:	f04f 0300 	mov.w	r3, #0
 8025678:	4620      	mov	r0, r4
 802567a:	4629      	mov	r1, r5
 802567c:	f7db f85c 	bl	8000738 <__aeabi_uldivmod>
 8025680:	4602      	mov	r2, r0
 8025682:	460b      	mov	r3, r1
 8025684:	4613      	mov	r3, r2
 8025686:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8025688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802568a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802568e:	d308      	bcc.n	80256a2 <UART_SetConfig+0x98e>
 8025690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8025696:	d204      	bcs.n	80256a2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8025698:	687b      	ldr	r3, [r7, #4]
 802569a:	681b      	ldr	r3, [r3, #0]
 802569c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802569e:	60da      	str	r2, [r3, #12]
 80256a0:	e17f      	b.n	80259a2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80256a2:	2301      	movs	r3, #1
 80256a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80256a8:	e17b      	b.n	80259a2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80256aa:	687b      	ldr	r3, [r7, #4]
 80256ac:	69db      	ldr	r3, [r3, #28]
 80256ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80256b2:	f040 80bd 	bne.w	8025830 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80256b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80256ba:	2b20      	cmp	r3, #32
 80256bc:	dc48      	bgt.n	8025750 <UART_SetConfig+0xa3c>
 80256be:	2b00      	cmp	r3, #0
 80256c0:	db7b      	blt.n	80257ba <UART_SetConfig+0xaa6>
 80256c2:	2b20      	cmp	r3, #32
 80256c4:	d879      	bhi.n	80257ba <UART_SetConfig+0xaa6>
 80256c6:	a201      	add	r2, pc, #4	; (adr r2, 80256cc <UART_SetConfig+0x9b8>)
 80256c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80256cc:	08025757 	.word	0x08025757
 80256d0:	0802575f 	.word	0x0802575f
 80256d4:	080257bb 	.word	0x080257bb
 80256d8:	080257bb 	.word	0x080257bb
 80256dc:	08025767 	.word	0x08025767
 80256e0:	080257bb 	.word	0x080257bb
 80256e4:	080257bb 	.word	0x080257bb
 80256e8:	080257bb 	.word	0x080257bb
 80256ec:	08025777 	.word	0x08025777
 80256f0:	080257bb 	.word	0x080257bb
 80256f4:	080257bb 	.word	0x080257bb
 80256f8:	080257bb 	.word	0x080257bb
 80256fc:	080257bb 	.word	0x080257bb
 8025700:	080257bb 	.word	0x080257bb
 8025704:	080257bb 	.word	0x080257bb
 8025708:	080257bb 	.word	0x080257bb
 802570c:	08025787 	.word	0x08025787
 8025710:	080257bb 	.word	0x080257bb
 8025714:	080257bb 	.word	0x080257bb
 8025718:	080257bb 	.word	0x080257bb
 802571c:	080257bb 	.word	0x080257bb
 8025720:	080257bb 	.word	0x080257bb
 8025724:	080257bb 	.word	0x080257bb
 8025728:	080257bb 	.word	0x080257bb
 802572c:	080257bb 	.word	0x080257bb
 8025730:	080257bb 	.word	0x080257bb
 8025734:	080257bb 	.word	0x080257bb
 8025738:	080257bb 	.word	0x080257bb
 802573c:	080257bb 	.word	0x080257bb
 8025740:	080257bb 	.word	0x080257bb
 8025744:	080257bb 	.word	0x080257bb
 8025748:	080257bb 	.word	0x080257bb
 802574c:	080257ad 	.word	0x080257ad
 8025750:	2b40      	cmp	r3, #64	; 0x40
 8025752:	d02e      	beq.n	80257b2 <UART_SetConfig+0xa9e>
 8025754:	e031      	b.n	80257ba <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8025756:	f7f9 fd7b 	bl	801f250 <HAL_RCC_GetPCLK1Freq>
 802575a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 802575c:	e033      	b.n	80257c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802575e:	f7f9 fd8d 	bl	801f27c <HAL_RCC_GetPCLK2Freq>
 8025762:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8025764:	e02f      	b.n	80257c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8025766:	f107 0314 	add.w	r3, r7, #20
 802576a:	4618      	mov	r0, r3
 802576c:	f7fb f8d0 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8025770:	69bb      	ldr	r3, [r7, #24]
 8025772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025774:	e027      	b.n	80257c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8025776:	f107 0308 	add.w	r3, r7, #8
 802577a:	4618      	mov	r0, r3
 802577c:	f7fb fa1c 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025780:	68fb      	ldr	r3, [r7, #12]
 8025782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025784:	e01f      	b.n	80257c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8025786:	4b6e      	ldr	r3, [pc, #440]	; (8025940 <UART_SetConfig+0xc2c>)
 8025788:	681b      	ldr	r3, [r3, #0]
 802578a:	f003 0320 	and.w	r3, r3, #32
 802578e:	2b00      	cmp	r3, #0
 8025790:	d009      	beq.n	80257a6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8025792:	4b6b      	ldr	r3, [pc, #428]	; (8025940 <UART_SetConfig+0xc2c>)
 8025794:	681b      	ldr	r3, [r3, #0]
 8025796:	08db      	lsrs	r3, r3, #3
 8025798:	f003 0303 	and.w	r3, r3, #3
 802579c:	4a69      	ldr	r2, [pc, #420]	; (8025944 <UART_SetConfig+0xc30>)
 802579e:	fa22 f303 	lsr.w	r3, r2, r3
 80257a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80257a4:	e00f      	b.n	80257c6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80257a6:	4b67      	ldr	r3, [pc, #412]	; (8025944 <UART_SetConfig+0xc30>)
 80257a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80257aa:	e00c      	b.n	80257c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80257ac:	4b66      	ldr	r3, [pc, #408]	; (8025948 <UART_SetConfig+0xc34>)
 80257ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80257b0:	e009      	b.n	80257c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80257b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80257b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80257b8:	e005      	b.n	80257c6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80257ba:	2300      	movs	r3, #0
 80257bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80257be:	2301      	movs	r3, #1
 80257c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80257c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80257c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80257c8:	2b00      	cmp	r3, #0
 80257ca:	f000 80ea 	beq.w	80259a2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80257ce:	687b      	ldr	r3, [r7, #4]
 80257d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257d2:	4a5a      	ldr	r2, [pc, #360]	; (802593c <UART_SetConfig+0xc28>)
 80257d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80257d8:	461a      	mov	r2, r3
 80257da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80257dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80257e0:	005a      	lsls	r2, r3, #1
 80257e2:	687b      	ldr	r3, [r7, #4]
 80257e4:	685b      	ldr	r3, [r3, #4]
 80257e6:	085b      	lsrs	r3, r3, #1
 80257e8:	441a      	add	r2, r3
 80257ea:	687b      	ldr	r3, [r7, #4]
 80257ec:	685b      	ldr	r3, [r3, #4]
 80257ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80257f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80257f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257f6:	2b0f      	cmp	r3, #15
 80257f8:	d916      	bls.n	8025828 <UART_SetConfig+0xb14>
 80257fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025800:	d212      	bcs.n	8025828 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8025802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025804:	b29b      	uxth	r3, r3
 8025806:	f023 030f 	bic.w	r3, r3, #15
 802580a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802580e:	085b      	lsrs	r3, r3, #1
 8025810:	b29b      	uxth	r3, r3
 8025812:	f003 0307 	and.w	r3, r3, #7
 8025816:	b29a      	uxth	r2, r3
 8025818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802581a:	4313      	orrs	r3, r2
 802581c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 802581e:	687b      	ldr	r3, [r7, #4]
 8025820:	681b      	ldr	r3, [r3, #0]
 8025822:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025824:	60da      	str	r2, [r3, #12]
 8025826:	e0bc      	b.n	80259a2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8025828:	2301      	movs	r3, #1
 802582a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 802582e:	e0b8      	b.n	80259a2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8025830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025834:	2b20      	cmp	r3, #32
 8025836:	dc4b      	bgt.n	80258d0 <UART_SetConfig+0xbbc>
 8025838:	2b00      	cmp	r3, #0
 802583a:	f2c0 8087 	blt.w	802594c <UART_SetConfig+0xc38>
 802583e:	2b20      	cmp	r3, #32
 8025840:	f200 8084 	bhi.w	802594c <UART_SetConfig+0xc38>
 8025844:	a201      	add	r2, pc, #4	; (adr r2, 802584c <UART_SetConfig+0xb38>)
 8025846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802584a:	bf00      	nop
 802584c:	080258d7 	.word	0x080258d7
 8025850:	080258df 	.word	0x080258df
 8025854:	0802594d 	.word	0x0802594d
 8025858:	0802594d 	.word	0x0802594d
 802585c:	080258e7 	.word	0x080258e7
 8025860:	0802594d 	.word	0x0802594d
 8025864:	0802594d 	.word	0x0802594d
 8025868:	0802594d 	.word	0x0802594d
 802586c:	080258f7 	.word	0x080258f7
 8025870:	0802594d 	.word	0x0802594d
 8025874:	0802594d 	.word	0x0802594d
 8025878:	0802594d 	.word	0x0802594d
 802587c:	0802594d 	.word	0x0802594d
 8025880:	0802594d 	.word	0x0802594d
 8025884:	0802594d 	.word	0x0802594d
 8025888:	0802594d 	.word	0x0802594d
 802588c:	08025907 	.word	0x08025907
 8025890:	0802594d 	.word	0x0802594d
 8025894:	0802594d 	.word	0x0802594d
 8025898:	0802594d 	.word	0x0802594d
 802589c:	0802594d 	.word	0x0802594d
 80258a0:	0802594d 	.word	0x0802594d
 80258a4:	0802594d 	.word	0x0802594d
 80258a8:	0802594d 	.word	0x0802594d
 80258ac:	0802594d 	.word	0x0802594d
 80258b0:	0802594d 	.word	0x0802594d
 80258b4:	0802594d 	.word	0x0802594d
 80258b8:	0802594d 	.word	0x0802594d
 80258bc:	0802594d 	.word	0x0802594d
 80258c0:	0802594d 	.word	0x0802594d
 80258c4:	0802594d 	.word	0x0802594d
 80258c8:	0802594d 	.word	0x0802594d
 80258cc:	0802592d 	.word	0x0802592d
 80258d0:	2b40      	cmp	r3, #64	; 0x40
 80258d2:	d02e      	beq.n	8025932 <UART_SetConfig+0xc1e>
 80258d4:	e03a      	b.n	802594c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80258d6:	f7f9 fcbb 	bl	801f250 <HAL_RCC_GetPCLK1Freq>
 80258da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80258dc:	e03c      	b.n	8025958 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80258de:	f7f9 fccd 	bl	801f27c <HAL_RCC_GetPCLK2Freq>
 80258e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80258e4:	e038      	b.n	8025958 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80258e6:	f107 0314 	add.w	r3, r7, #20
 80258ea:	4618      	mov	r0, r3
 80258ec:	f7fb f810 	bl	8020910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80258f0:	69bb      	ldr	r3, [r7, #24]
 80258f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80258f4:	e030      	b.n	8025958 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80258f6:	f107 0308 	add.w	r3, r7, #8
 80258fa:	4618      	mov	r0, r3
 80258fc:	f7fb f95c 	bl	8020bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025900:	68fb      	ldr	r3, [r7, #12]
 8025902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025904:	e028      	b.n	8025958 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8025906:	4b0e      	ldr	r3, [pc, #56]	; (8025940 <UART_SetConfig+0xc2c>)
 8025908:	681b      	ldr	r3, [r3, #0]
 802590a:	f003 0320 	and.w	r3, r3, #32
 802590e:	2b00      	cmp	r3, #0
 8025910:	d009      	beq.n	8025926 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8025912:	4b0b      	ldr	r3, [pc, #44]	; (8025940 <UART_SetConfig+0xc2c>)
 8025914:	681b      	ldr	r3, [r3, #0]
 8025916:	08db      	lsrs	r3, r3, #3
 8025918:	f003 0303 	and.w	r3, r3, #3
 802591c:	4a09      	ldr	r2, [pc, #36]	; (8025944 <UART_SetConfig+0xc30>)
 802591e:	fa22 f303 	lsr.w	r3, r2, r3
 8025922:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8025924:	e018      	b.n	8025958 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8025926:	4b07      	ldr	r3, [pc, #28]	; (8025944 <UART_SetConfig+0xc30>)
 8025928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802592a:	e015      	b.n	8025958 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802592c:	4b06      	ldr	r3, [pc, #24]	; (8025948 <UART_SetConfig+0xc34>)
 802592e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025930:	e012      	b.n	8025958 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025938:	e00e      	b.n	8025958 <UART_SetConfig+0xc44>
 802593a:	bf00      	nop
 802593c:	0802b4ec 	.word	0x0802b4ec
 8025940:	58024400 	.word	0x58024400
 8025944:	03d09000 	.word	0x03d09000
 8025948:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 802594c:	2300      	movs	r3, #0
 802594e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8025950:	2301      	movs	r3, #1
 8025952:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8025956:	bf00      	nop
    }

    if (pclk != 0U)
 8025958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802595a:	2b00      	cmp	r3, #0
 802595c:	d021      	beq.n	80259a2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802595e:	687b      	ldr	r3, [r7, #4]
 8025960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025962:	4a1a      	ldr	r2, [pc, #104]	; (80259cc <UART_SetConfig+0xcb8>)
 8025964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025968:	461a      	mov	r2, r3
 802596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802596c:	fbb3 f2f2 	udiv	r2, r3, r2
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	685b      	ldr	r3, [r3, #4]
 8025974:	085b      	lsrs	r3, r3, #1
 8025976:	441a      	add	r2, r3
 8025978:	687b      	ldr	r3, [r7, #4]
 802597a:	685b      	ldr	r3, [r3, #4]
 802597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8025980:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8025982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025984:	2b0f      	cmp	r3, #15
 8025986:	d909      	bls.n	802599c <UART_SetConfig+0xc88>
 8025988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802598a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802598e:	d205      	bcs.n	802599c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8025990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025992:	b29a      	uxth	r2, r3
 8025994:	687b      	ldr	r3, [r7, #4]
 8025996:	681b      	ldr	r3, [r3, #0]
 8025998:	60da      	str	r2, [r3, #12]
 802599a:	e002      	b.n	80259a2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 802599c:	2301      	movs	r3, #1
 802599e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80259a2:	687b      	ldr	r3, [r7, #4]
 80259a4:	2201      	movs	r2, #1
 80259a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80259aa:	687b      	ldr	r3, [r7, #4]
 80259ac:	2201      	movs	r2, #1
 80259ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80259b2:	687b      	ldr	r3, [r7, #4]
 80259b4:	2200      	movs	r2, #0
 80259b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80259b8:	687b      	ldr	r3, [r7, #4]
 80259ba:	2200      	movs	r2, #0
 80259bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80259be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80259c2:	4618      	mov	r0, r3
 80259c4:	3738      	adds	r7, #56	; 0x38
 80259c6:	46bd      	mov	sp, r7
 80259c8:	bdb0      	pop	{r4, r5, r7, pc}
 80259ca:	bf00      	nop
 80259cc:	0802b4ec 	.word	0x0802b4ec

080259d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80259d0:	b480      	push	{r7}
 80259d2:	b083      	sub	sp, #12
 80259d4:	af00      	add	r7, sp, #0
 80259d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80259d8:	687b      	ldr	r3, [r7, #4]
 80259da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80259dc:	f003 0301 	and.w	r3, r3, #1
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	d00a      	beq.n	80259fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80259e4:	687b      	ldr	r3, [r7, #4]
 80259e6:	681b      	ldr	r3, [r3, #0]
 80259e8:	685b      	ldr	r3, [r3, #4]
 80259ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80259ee:	687b      	ldr	r3, [r7, #4]
 80259f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80259f2:	687b      	ldr	r3, [r7, #4]
 80259f4:	681b      	ldr	r3, [r3, #0]
 80259f6:	430a      	orrs	r2, r1
 80259f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80259fa:	687b      	ldr	r3, [r7, #4]
 80259fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80259fe:	f003 0302 	and.w	r3, r3, #2
 8025a02:	2b00      	cmp	r3, #0
 8025a04:	d00a      	beq.n	8025a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8025a06:	687b      	ldr	r3, [r7, #4]
 8025a08:	681b      	ldr	r3, [r3, #0]
 8025a0a:	685b      	ldr	r3, [r3, #4]
 8025a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8025a10:	687b      	ldr	r3, [r7, #4]
 8025a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025a14:	687b      	ldr	r3, [r7, #4]
 8025a16:	681b      	ldr	r3, [r3, #0]
 8025a18:	430a      	orrs	r2, r1
 8025a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8025a1c:	687b      	ldr	r3, [r7, #4]
 8025a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025a20:	f003 0304 	and.w	r3, r3, #4
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	d00a      	beq.n	8025a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8025a28:	687b      	ldr	r3, [r7, #4]
 8025a2a:	681b      	ldr	r3, [r3, #0]
 8025a2c:	685b      	ldr	r3, [r3, #4]
 8025a2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8025a32:	687b      	ldr	r3, [r7, #4]
 8025a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025a36:	687b      	ldr	r3, [r7, #4]
 8025a38:	681b      	ldr	r3, [r3, #0]
 8025a3a:	430a      	orrs	r2, r1
 8025a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8025a3e:	687b      	ldr	r3, [r7, #4]
 8025a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025a42:	f003 0308 	and.w	r3, r3, #8
 8025a46:	2b00      	cmp	r3, #0
 8025a48:	d00a      	beq.n	8025a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8025a4a:	687b      	ldr	r3, [r7, #4]
 8025a4c:	681b      	ldr	r3, [r3, #0]
 8025a4e:	685b      	ldr	r3, [r3, #4]
 8025a50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8025a54:	687b      	ldr	r3, [r7, #4]
 8025a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8025a58:	687b      	ldr	r3, [r7, #4]
 8025a5a:	681b      	ldr	r3, [r3, #0]
 8025a5c:	430a      	orrs	r2, r1
 8025a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8025a60:	687b      	ldr	r3, [r7, #4]
 8025a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025a64:	f003 0310 	and.w	r3, r3, #16
 8025a68:	2b00      	cmp	r3, #0
 8025a6a:	d00a      	beq.n	8025a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8025a6c:	687b      	ldr	r3, [r7, #4]
 8025a6e:	681b      	ldr	r3, [r3, #0]
 8025a70:	689b      	ldr	r3, [r3, #8]
 8025a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8025a76:	687b      	ldr	r3, [r7, #4]
 8025a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8025a7a:	687b      	ldr	r3, [r7, #4]
 8025a7c:	681b      	ldr	r3, [r3, #0]
 8025a7e:	430a      	orrs	r2, r1
 8025a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8025a82:	687b      	ldr	r3, [r7, #4]
 8025a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025a86:	f003 0320 	and.w	r3, r3, #32
 8025a8a:	2b00      	cmp	r3, #0
 8025a8c:	d00a      	beq.n	8025aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8025a8e:	687b      	ldr	r3, [r7, #4]
 8025a90:	681b      	ldr	r3, [r3, #0]
 8025a92:	689b      	ldr	r3, [r3, #8]
 8025a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8025a98:	687b      	ldr	r3, [r7, #4]
 8025a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8025a9c:	687b      	ldr	r3, [r7, #4]
 8025a9e:	681b      	ldr	r3, [r3, #0]
 8025aa0:	430a      	orrs	r2, r1
 8025aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8025aa4:	687b      	ldr	r3, [r7, #4]
 8025aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	d01a      	beq.n	8025ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8025ab0:	687b      	ldr	r3, [r7, #4]
 8025ab2:	681b      	ldr	r3, [r3, #0]
 8025ab4:	685b      	ldr	r3, [r3, #4]
 8025ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8025aba:	687b      	ldr	r3, [r7, #4]
 8025abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8025abe:	687b      	ldr	r3, [r7, #4]
 8025ac0:	681b      	ldr	r3, [r3, #0]
 8025ac2:	430a      	orrs	r2, r1
 8025ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8025ac6:	687b      	ldr	r3, [r7, #4]
 8025ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8025ace:	d10a      	bne.n	8025ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8025ad0:	687b      	ldr	r3, [r7, #4]
 8025ad2:	681b      	ldr	r3, [r3, #0]
 8025ad4:	685b      	ldr	r3, [r3, #4]
 8025ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8025ada:	687b      	ldr	r3, [r7, #4]
 8025adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8025ade:	687b      	ldr	r3, [r7, #4]
 8025ae0:	681b      	ldr	r3, [r3, #0]
 8025ae2:	430a      	orrs	r2, r1
 8025ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025aee:	2b00      	cmp	r3, #0
 8025af0:	d00a      	beq.n	8025b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8025af2:	687b      	ldr	r3, [r7, #4]
 8025af4:	681b      	ldr	r3, [r3, #0]
 8025af6:	685b      	ldr	r3, [r3, #4]
 8025af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8025afc:	687b      	ldr	r3, [r7, #4]
 8025afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8025b00:	687b      	ldr	r3, [r7, #4]
 8025b02:	681b      	ldr	r3, [r3, #0]
 8025b04:	430a      	orrs	r2, r1
 8025b06:	605a      	str	r2, [r3, #4]
  }
}
 8025b08:	bf00      	nop
 8025b0a:	370c      	adds	r7, #12
 8025b0c:	46bd      	mov	sp, r7
 8025b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b12:	4770      	bx	lr

08025b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8025b14:	b580      	push	{r7, lr}
 8025b16:	b086      	sub	sp, #24
 8025b18:	af02      	add	r7, sp, #8
 8025b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025b1c:	687b      	ldr	r3, [r7, #4]
 8025b1e:	2200      	movs	r2, #0
 8025b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8025b24:	f7f0 fce4 	bl	80164f0 <HAL_GetTick>
 8025b28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8025b2a:	687b      	ldr	r3, [r7, #4]
 8025b2c:	681b      	ldr	r3, [r3, #0]
 8025b2e:	681b      	ldr	r3, [r3, #0]
 8025b30:	f003 0308 	and.w	r3, r3, #8
 8025b34:	2b08      	cmp	r3, #8
 8025b36:	d10e      	bne.n	8025b56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8025b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8025b3c:	9300      	str	r3, [sp, #0]
 8025b3e:	68fb      	ldr	r3, [r7, #12]
 8025b40:	2200      	movs	r2, #0
 8025b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8025b46:	6878      	ldr	r0, [r7, #4]
 8025b48:	f000 f82f 	bl	8025baa <UART_WaitOnFlagUntilTimeout>
 8025b4c:	4603      	mov	r3, r0
 8025b4e:	2b00      	cmp	r3, #0
 8025b50:	d001      	beq.n	8025b56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8025b52:	2303      	movs	r3, #3
 8025b54:	e025      	b.n	8025ba2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8025b56:	687b      	ldr	r3, [r7, #4]
 8025b58:	681b      	ldr	r3, [r3, #0]
 8025b5a:	681b      	ldr	r3, [r3, #0]
 8025b5c:	f003 0304 	and.w	r3, r3, #4
 8025b60:	2b04      	cmp	r3, #4
 8025b62:	d10e      	bne.n	8025b82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8025b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8025b68:	9300      	str	r3, [sp, #0]
 8025b6a:	68fb      	ldr	r3, [r7, #12]
 8025b6c:	2200      	movs	r2, #0
 8025b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8025b72:	6878      	ldr	r0, [r7, #4]
 8025b74:	f000 f819 	bl	8025baa <UART_WaitOnFlagUntilTimeout>
 8025b78:	4603      	mov	r3, r0
 8025b7a:	2b00      	cmp	r3, #0
 8025b7c:	d001      	beq.n	8025b82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8025b7e:	2303      	movs	r3, #3
 8025b80:	e00f      	b.n	8025ba2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8025b82:	687b      	ldr	r3, [r7, #4]
 8025b84:	2220      	movs	r2, #32
 8025b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8025b8a:	687b      	ldr	r3, [r7, #4]
 8025b8c:	2220      	movs	r2, #32
 8025b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025b92:	687b      	ldr	r3, [r7, #4]
 8025b94:	2200      	movs	r2, #0
 8025b96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	2200      	movs	r2, #0
 8025b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8025ba0:	2300      	movs	r3, #0
}
 8025ba2:	4618      	mov	r0, r3
 8025ba4:	3710      	adds	r7, #16
 8025ba6:	46bd      	mov	sp, r7
 8025ba8:	bd80      	pop	{r7, pc}

08025baa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8025baa:	b580      	push	{r7, lr}
 8025bac:	b09c      	sub	sp, #112	; 0x70
 8025bae:	af00      	add	r7, sp, #0
 8025bb0:	60f8      	str	r0, [r7, #12]
 8025bb2:	60b9      	str	r1, [r7, #8]
 8025bb4:	603b      	str	r3, [r7, #0]
 8025bb6:	4613      	mov	r3, r2
 8025bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8025bba:	e0a9      	b.n	8025d10 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8025bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025bc2:	f000 80a5 	beq.w	8025d10 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025bc6:	f7f0 fc93 	bl	80164f0 <HAL_GetTick>
 8025bca:	4602      	mov	r2, r0
 8025bcc:	683b      	ldr	r3, [r7, #0]
 8025bce:	1ad3      	subs	r3, r2, r3
 8025bd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8025bd2:	429a      	cmp	r2, r3
 8025bd4:	d302      	bcc.n	8025bdc <UART_WaitOnFlagUntilTimeout+0x32>
 8025bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8025bd8:	2b00      	cmp	r3, #0
 8025bda:	d140      	bne.n	8025c5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8025bdc:	68fb      	ldr	r3, [r7, #12]
 8025bde:	681b      	ldr	r3, [r3, #0]
 8025be0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025be4:	e853 3f00 	ldrex	r3, [r3]
 8025be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8025bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8025bf0:	667b      	str	r3, [r7, #100]	; 0x64
 8025bf2:	68fb      	ldr	r3, [r7, #12]
 8025bf4:	681b      	ldr	r3, [r3, #0]
 8025bf6:	461a      	mov	r2, r3
 8025bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025bfc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025bfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8025c00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025c02:	e841 2300 	strex	r3, r2, [r1]
 8025c06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8025c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025c0a:	2b00      	cmp	r3, #0
 8025c0c:	d1e6      	bne.n	8025bdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025c0e:	68fb      	ldr	r3, [r7, #12]
 8025c10:	681b      	ldr	r3, [r3, #0]
 8025c12:	3308      	adds	r3, #8
 8025c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025c18:	e853 3f00 	ldrex	r3, [r3]
 8025c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8025c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025c20:	f023 0301 	bic.w	r3, r3, #1
 8025c24:	663b      	str	r3, [r7, #96]	; 0x60
 8025c26:	68fb      	ldr	r3, [r7, #12]
 8025c28:	681b      	ldr	r3, [r3, #0]
 8025c2a:	3308      	adds	r3, #8
 8025c2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025c2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8025c30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025c32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8025c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025c36:	e841 2300 	strex	r3, r2, [r1]
 8025c3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8025c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025c3e:	2b00      	cmp	r3, #0
 8025c40:	d1e5      	bne.n	8025c0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8025c42:	68fb      	ldr	r3, [r7, #12]
 8025c44:	2220      	movs	r2, #32
 8025c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8025c4a:	68fb      	ldr	r3, [r7, #12]
 8025c4c:	2220      	movs	r2, #32
 8025c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8025c52:	68fb      	ldr	r3, [r7, #12]
 8025c54:	2200      	movs	r2, #0
 8025c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8025c5a:	2303      	movs	r3, #3
 8025c5c:	e069      	b.n	8025d32 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8025c5e:	68fb      	ldr	r3, [r7, #12]
 8025c60:	681b      	ldr	r3, [r3, #0]
 8025c62:	681b      	ldr	r3, [r3, #0]
 8025c64:	f003 0304 	and.w	r3, r3, #4
 8025c68:	2b00      	cmp	r3, #0
 8025c6a:	d051      	beq.n	8025d10 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8025c6c:	68fb      	ldr	r3, [r7, #12]
 8025c6e:	681b      	ldr	r3, [r3, #0]
 8025c70:	69db      	ldr	r3, [r3, #28]
 8025c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025c7a:	d149      	bne.n	8025d10 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8025c7c:	68fb      	ldr	r3, [r7, #12]
 8025c7e:	681b      	ldr	r3, [r3, #0]
 8025c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025c84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8025c86:	68fb      	ldr	r3, [r7, #12]
 8025c88:	681b      	ldr	r3, [r3, #0]
 8025c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c8e:	e853 3f00 	ldrex	r3, [r3]
 8025c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8025c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8025c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025c9c:	68fb      	ldr	r3, [r7, #12]
 8025c9e:	681b      	ldr	r3, [r3, #0]
 8025ca0:	461a      	mov	r2, r3
 8025ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8025ca6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025cac:	e841 2300 	strex	r3, r2, [r1]
 8025cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8025cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025cb4:	2b00      	cmp	r3, #0
 8025cb6:	d1e6      	bne.n	8025c86 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025cb8:	68fb      	ldr	r3, [r7, #12]
 8025cba:	681b      	ldr	r3, [r3, #0]
 8025cbc:	3308      	adds	r3, #8
 8025cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025cc0:	697b      	ldr	r3, [r7, #20]
 8025cc2:	e853 3f00 	ldrex	r3, [r3]
 8025cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8025cc8:	693b      	ldr	r3, [r7, #16]
 8025cca:	f023 0301 	bic.w	r3, r3, #1
 8025cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8025cd0:	68fb      	ldr	r3, [r7, #12]
 8025cd2:	681b      	ldr	r3, [r3, #0]
 8025cd4:	3308      	adds	r3, #8
 8025cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8025cd8:	623a      	str	r2, [r7, #32]
 8025cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025cdc:	69f9      	ldr	r1, [r7, #28]
 8025cde:	6a3a      	ldr	r2, [r7, #32]
 8025ce0:	e841 2300 	strex	r3, r2, [r1]
 8025ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8025ce6:	69bb      	ldr	r3, [r7, #24]
 8025ce8:	2b00      	cmp	r3, #0
 8025cea:	d1e5      	bne.n	8025cb8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8025cec:	68fb      	ldr	r3, [r7, #12]
 8025cee:	2220      	movs	r2, #32
 8025cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8025cf4:	68fb      	ldr	r3, [r7, #12]
 8025cf6:	2220      	movs	r2, #32
 8025cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8025cfc:	68fb      	ldr	r3, [r7, #12]
 8025cfe:	2220      	movs	r2, #32
 8025d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8025d04:	68fb      	ldr	r3, [r7, #12]
 8025d06:	2200      	movs	r2, #0
 8025d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8025d0c:	2303      	movs	r3, #3
 8025d0e:	e010      	b.n	8025d32 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8025d10:	68fb      	ldr	r3, [r7, #12]
 8025d12:	681b      	ldr	r3, [r3, #0]
 8025d14:	69da      	ldr	r2, [r3, #28]
 8025d16:	68bb      	ldr	r3, [r7, #8]
 8025d18:	4013      	ands	r3, r2
 8025d1a:	68ba      	ldr	r2, [r7, #8]
 8025d1c:	429a      	cmp	r2, r3
 8025d1e:	bf0c      	ite	eq
 8025d20:	2301      	moveq	r3, #1
 8025d22:	2300      	movne	r3, #0
 8025d24:	b2db      	uxtb	r3, r3
 8025d26:	461a      	mov	r2, r3
 8025d28:	79fb      	ldrb	r3, [r7, #7]
 8025d2a:	429a      	cmp	r2, r3
 8025d2c:	f43f af46 	beq.w	8025bbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8025d30:	2300      	movs	r3, #0
}
 8025d32:	4618      	mov	r0, r3
 8025d34:	3770      	adds	r7, #112	; 0x70
 8025d36:	46bd      	mov	sp, r7
 8025d38:	bd80      	pop	{r7, pc}
	...

08025d3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8025d3c:	b580      	push	{r7, lr}
 8025d3e:	b096      	sub	sp, #88	; 0x58
 8025d40:	af00      	add	r7, sp, #0
 8025d42:	60f8      	str	r0, [r7, #12]
 8025d44:	60b9      	str	r1, [r7, #8]
 8025d46:	4613      	mov	r3, r2
 8025d48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8025d4a:	68fb      	ldr	r3, [r7, #12]
 8025d4c:	68ba      	ldr	r2, [r7, #8]
 8025d4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8025d50:	68fb      	ldr	r3, [r7, #12]
 8025d52:	88fa      	ldrh	r2, [r7, #6]
 8025d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025d58:	68fb      	ldr	r3, [r7, #12]
 8025d5a:	2200      	movs	r2, #0
 8025d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8025d60:	68fb      	ldr	r3, [r7, #12]
 8025d62:	2222      	movs	r2, #34	; 0x22
 8025d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8025d68:	68fb      	ldr	r3, [r7, #12]
 8025d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8025d6c:	2b00      	cmp	r3, #0
 8025d6e:	d02c      	beq.n	8025dca <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8025d70:	68fb      	ldr	r3, [r7, #12]
 8025d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8025d74:	4a42      	ldr	r2, [pc, #264]	; (8025e80 <UART_Start_Receive_DMA+0x144>)
 8025d76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8025d78:	68fb      	ldr	r3, [r7, #12]
 8025d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8025d7c:	4a41      	ldr	r2, [pc, #260]	; (8025e84 <UART_Start_Receive_DMA+0x148>)
 8025d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8025d80:	68fb      	ldr	r3, [r7, #12]
 8025d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8025d84:	4a40      	ldr	r2, [pc, #256]	; (8025e88 <UART_Start_Receive_DMA+0x14c>)
 8025d86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8025d88:	68fb      	ldr	r3, [r7, #12]
 8025d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8025d8c:	2200      	movs	r2, #0
 8025d8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8025d90:	68fb      	ldr	r3, [r7, #12]
 8025d92:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8025d94:	68fb      	ldr	r3, [r7, #12]
 8025d96:	681b      	ldr	r3, [r3, #0]
 8025d98:	3324      	adds	r3, #36	; 0x24
 8025d9a:	4619      	mov	r1, r3
 8025d9c:	68fb      	ldr	r3, [r7, #12]
 8025d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8025da0:	461a      	mov	r2, r3
 8025da2:	88fb      	ldrh	r3, [r7, #6]
 8025da4:	f7f3 f82a 	bl	8018dfc <HAL_DMA_Start_IT>
 8025da8:	4603      	mov	r3, r0
 8025daa:	2b00      	cmp	r3, #0
 8025dac:	d00d      	beq.n	8025dca <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8025dae:	68fb      	ldr	r3, [r7, #12]
 8025db0:	2210      	movs	r2, #16
 8025db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8025db6:	68fb      	ldr	r3, [r7, #12]
 8025db8:	2200      	movs	r2, #0
 8025dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8025dbe:	68fb      	ldr	r3, [r7, #12]
 8025dc0:	2220      	movs	r2, #32
 8025dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8025dc6:	2301      	movs	r3, #1
 8025dc8:	e055      	b.n	8025e76 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8025dca:	68fb      	ldr	r3, [r7, #12]
 8025dcc:	2200      	movs	r2, #0
 8025dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8025dd2:	68fb      	ldr	r3, [r7, #12]
 8025dd4:	691b      	ldr	r3, [r3, #16]
 8025dd6:	2b00      	cmp	r3, #0
 8025dd8:	d018      	beq.n	8025e0c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8025dda:	68fb      	ldr	r3, [r7, #12]
 8025ddc:	681b      	ldr	r3, [r3, #0]
 8025dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025de2:	e853 3f00 	ldrex	r3, [r3]
 8025de6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8025de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025dee:	657b      	str	r3, [r7, #84]	; 0x54
 8025df0:	68fb      	ldr	r3, [r7, #12]
 8025df2:	681b      	ldr	r3, [r3, #0]
 8025df4:	461a      	mov	r2, r3
 8025df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8025dfa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025dfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8025dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025e00:	e841 2300 	strex	r3, r2, [r1]
 8025e04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8025e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025e08:	2b00      	cmp	r3, #0
 8025e0a:	d1e6      	bne.n	8025dda <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025e0c:	68fb      	ldr	r3, [r7, #12]
 8025e0e:	681b      	ldr	r3, [r3, #0]
 8025e10:	3308      	adds	r3, #8
 8025e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e16:	e853 3f00 	ldrex	r3, [r3]
 8025e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8025e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e1e:	f043 0301 	orr.w	r3, r3, #1
 8025e22:	653b      	str	r3, [r7, #80]	; 0x50
 8025e24:	68fb      	ldr	r3, [r7, #12]
 8025e26:	681b      	ldr	r3, [r3, #0]
 8025e28:	3308      	adds	r3, #8
 8025e2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025e2c:	637a      	str	r2, [r7, #52]	; 0x34
 8025e2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025e34:	e841 2300 	strex	r3, r2, [r1]
 8025e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8025e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e3c:	2b00      	cmp	r3, #0
 8025e3e:	d1e5      	bne.n	8025e0c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8025e40:	68fb      	ldr	r3, [r7, #12]
 8025e42:	681b      	ldr	r3, [r3, #0]
 8025e44:	3308      	adds	r3, #8
 8025e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025e48:	697b      	ldr	r3, [r7, #20]
 8025e4a:	e853 3f00 	ldrex	r3, [r3]
 8025e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8025e50:	693b      	ldr	r3, [r7, #16]
 8025e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8025e58:	68fb      	ldr	r3, [r7, #12]
 8025e5a:	681b      	ldr	r3, [r3, #0]
 8025e5c:	3308      	adds	r3, #8
 8025e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025e60:	623a      	str	r2, [r7, #32]
 8025e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025e64:	69f9      	ldr	r1, [r7, #28]
 8025e66:	6a3a      	ldr	r2, [r7, #32]
 8025e68:	e841 2300 	strex	r3, r2, [r1]
 8025e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8025e6e:	69bb      	ldr	r3, [r7, #24]
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	d1e5      	bne.n	8025e40 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8025e74:	2300      	movs	r3, #0
}
 8025e76:	4618      	mov	r0, r3
 8025e78:	3758      	adds	r7, #88	; 0x58
 8025e7a:	46bd      	mov	sp, r7
 8025e7c:	bd80      	pop	{r7, pc}
 8025e7e:	bf00      	nop
 8025e80:	0802608f 	.word	0x0802608f
 8025e84:	080261b1 	.word	0x080261b1
 8025e88:	080261e9 	.word	0x080261e9

08025e8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8025e8c:	b480      	push	{r7}
 8025e8e:	b08f      	sub	sp, #60	; 0x3c
 8025e90:	af00      	add	r7, sp, #0
 8025e92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8025e94:	687b      	ldr	r3, [r7, #4]
 8025e96:	681b      	ldr	r3, [r3, #0]
 8025e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025e9a:	6a3b      	ldr	r3, [r7, #32]
 8025e9c:	e853 3f00 	ldrex	r3, [r3]
 8025ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8025ea2:	69fb      	ldr	r3, [r7, #28]
 8025ea4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8025ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8025eaa:	687b      	ldr	r3, [r7, #4]
 8025eac:	681b      	ldr	r3, [r3, #0]
 8025eae:	461a      	mov	r2, r3
 8025eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025eb4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025eba:	e841 2300 	strex	r3, r2, [r1]
 8025ebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8025ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ec2:	2b00      	cmp	r3, #0
 8025ec4:	d1e6      	bne.n	8025e94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8025ec6:	687b      	ldr	r3, [r7, #4]
 8025ec8:	681b      	ldr	r3, [r3, #0]
 8025eca:	3308      	adds	r3, #8
 8025ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025ece:	68fb      	ldr	r3, [r7, #12]
 8025ed0:	e853 3f00 	ldrex	r3, [r3]
 8025ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8025ed6:	68bb      	ldr	r3, [r7, #8]
 8025ed8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8025edc:	633b      	str	r3, [r7, #48]	; 0x30
 8025ede:	687b      	ldr	r3, [r7, #4]
 8025ee0:	681b      	ldr	r3, [r3, #0]
 8025ee2:	3308      	adds	r3, #8
 8025ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025ee6:	61ba      	str	r2, [r7, #24]
 8025ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025eea:	6979      	ldr	r1, [r7, #20]
 8025eec:	69ba      	ldr	r2, [r7, #24]
 8025eee:	e841 2300 	strex	r3, r2, [r1]
 8025ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8025ef4:	693b      	ldr	r3, [r7, #16]
 8025ef6:	2b00      	cmp	r3, #0
 8025ef8:	d1e5      	bne.n	8025ec6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8025efa:	687b      	ldr	r3, [r7, #4]
 8025efc:	2220      	movs	r2, #32
 8025efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8025f02:	bf00      	nop
 8025f04:	373c      	adds	r7, #60	; 0x3c
 8025f06:	46bd      	mov	sp, r7
 8025f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f0c:	4770      	bx	lr
	...

08025f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8025f10:	b480      	push	{r7}
 8025f12:	b095      	sub	sp, #84	; 0x54
 8025f14:	af00      	add	r7, sp, #0
 8025f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	681b      	ldr	r3, [r3, #0]
 8025f1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025f20:	e853 3f00 	ldrex	r3, [r3]
 8025f24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8025f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8025f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8025f2e:	687b      	ldr	r3, [r7, #4]
 8025f30:	681b      	ldr	r3, [r3, #0]
 8025f32:	461a      	mov	r2, r3
 8025f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025f36:	643b      	str	r3, [r7, #64]	; 0x40
 8025f38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025f3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8025f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8025f3e:	e841 2300 	strex	r3, r2, [r1]
 8025f42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8025f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025f46:	2b00      	cmp	r3, #0
 8025f48:	d1e6      	bne.n	8025f18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8025f4a:	687b      	ldr	r3, [r7, #4]
 8025f4c:	681b      	ldr	r3, [r3, #0]
 8025f4e:	3308      	adds	r3, #8
 8025f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025f52:	6a3b      	ldr	r3, [r7, #32]
 8025f54:	e853 3f00 	ldrex	r3, [r3]
 8025f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8025f5a:	69fa      	ldr	r2, [r7, #28]
 8025f5c:	4b1e      	ldr	r3, [pc, #120]	; (8025fd8 <UART_EndRxTransfer+0xc8>)
 8025f5e:	4013      	ands	r3, r2
 8025f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8025f62:	687b      	ldr	r3, [r7, #4]
 8025f64:	681b      	ldr	r3, [r3, #0]
 8025f66:	3308      	adds	r3, #8
 8025f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8025f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025f72:	e841 2300 	strex	r3, r2, [r1]
 8025f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8025f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f7a:	2b00      	cmp	r3, #0
 8025f7c:	d1e5      	bne.n	8025f4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8025f7e:	687b      	ldr	r3, [r7, #4]
 8025f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025f82:	2b01      	cmp	r3, #1
 8025f84:	d118      	bne.n	8025fb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8025f86:	687b      	ldr	r3, [r7, #4]
 8025f88:	681b      	ldr	r3, [r3, #0]
 8025f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025f8c:	68fb      	ldr	r3, [r7, #12]
 8025f8e:	e853 3f00 	ldrex	r3, [r3]
 8025f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8025f94:	68bb      	ldr	r3, [r7, #8]
 8025f96:	f023 0310 	bic.w	r3, r3, #16
 8025f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8025f9c:	687b      	ldr	r3, [r7, #4]
 8025f9e:	681b      	ldr	r3, [r3, #0]
 8025fa0:	461a      	mov	r2, r3
 8025fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025fa4:	61bb      	str	r3, [r7, #24]
 8025fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025fa8:	6979      	ldr	r1, [r7, #20]
 8025faa:	69ba      	ldr	r2, [r7, #24]
 8025fac:	e841 2300 	strex	r3, r2, [r1]
 8025fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8025fb2:	693b      	ldr	r3, [r7, #16]
 8025fb4:	2b00      	cmp	r3, #0
 8025fb6:	d1e6      	bne.n	8025f86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8025fb8:	687b      	ldr	r3, [r7, #4]
 8025fba:	2220      	movs	r2, #32
 8025fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025fc0:	687b      	ldr	r3, [r7, #4]
 8025fc2:	2200      	movs	r2, #0
 8025fc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8025fc6:	687b      	ldr	r3, [r7, #4]
 8025fc8:	2200      	movs	r2, #0
 8025fca:	671a      	str	r2, [r3, #112]	; 0x70
}
 8025fcc:	bf00      	nop
 8025fce:	3754      	adds	r7, #84	; 0x54
 8025fd0:	46bd      	mov	sp, r7
 8025fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fd6:	4770      	bx	lr
 8025fd8:	effffffe 	.word	0xeffffffe

08025fdc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8025fdc:	b580      	push	{r7, lr}
 8025fde:	b090      	sub	sp, #64	; 0x40
 8025fe0:	af00      	add	r7, sp, #0
 8025fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8025fe4:	687b      	ldr	r3, [r7, #4]
 8025fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025fe8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8025fea:	687b      	ldr	r3, [r7, #4]
 8025fec:	69db      	ldr	r3, [r3, #28]
 8025fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025ff2:	d037      	beq.n	8026064 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8025ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025ff6:	2200      	movs	r2, #0
 8025ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8025ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025ffe:	681b      	ldr	r3, [r3, #0]
 8026000:	3308      	adds	r3, #8
 8026002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026006:	e853 3f00 	ldrex	r3, [r3]
 802600a:	623b      	str	r3, [r7, #32]
   return(result);
 802600c:	6a3b      	ldr	r3, [r7, #32]
 802600e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026012:	63bb      	str	r3, [r7, #56]	; 0x38
 8026014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026016:	681b      	ldr	r3, [r3, #0]
 8026018:	3308      	adds	r3, #8
 802601a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802601c:	633a      	str	r2, [r7, #48]	; 0x30
 802601e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8026022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026024:	e841 2300 	strex	r3, r2, [r1]
 8026028:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802602c:	2b00      	cmp	r3, #0
 802602e:	d1e5      	bne.n	8025ffc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8026030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026032:	681b      	ldr	r3, [r3, #0]
 8026034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026036:	693b      	ldr	r3, [r7, #16]
 8026038:	e853 3f00 	ldrex	r3, [r3]
 802603c:	60fb      	str	r3, [r7, #12]
   return(result);
 802603e:	68fb      	ldr	r3, [r7, #12]
 8026040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026044:	637b      	str	r3, [r7, #52]	; 0x34
 8026046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026048:	681b      	ldr	r3, [r3, #0]
 802604a:	461a      	mov	r2, r3
 802604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802604e:	61fb      	str	r3, [r7, #28]
 8026050:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026052:	69b9      	ldr	r1, [r7, #24]
 8026054:	69fa      	ldr	r2, [r7, #28]
 8026056:	e841 2300 	strex	r3, r2, [r1]
 802605a:	617b      	str	r3, [r7, #20]
   return(result);
 802605c:	697b      	ldr	r3, [r7, #20]
 802605e:	2b00      	cmp	r3, #0
 8026060:	d1e6      	bne.n	8026030 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8026062:	e002      	b.n	802606a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8026064:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8026066:	f7df fcc5 	bl	80059f4 <HAL_UART_TxCpltCallback>
}
 802606a:	bf00      	nop
 802606c:	3740      	adds	r7, #64	; 0x40
 802606e:	46bd      	mov	sp, r7
 8026070:	bd80      	pop	{r7, pc}

08026072 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8026072:	b580      	push	{r7, lr}
 8026074:	b084      	sub	sp, #16
 8026076:	af00      	add	r7, sp, #0
 8026078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802607a:	687b      	ldr	r3, [r7, #4]
 802607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802607e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8026080:	68f8      	ldr	r0, [r7, #12]
 8026082:	f7fe fe33 	bl	8024cec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8026086:	bf00      	nop
 8026088:	3710      	adds	r7, #16
 802608a:	46bd      	mov	sp, r7
 802608c:	bd80      	pop	{r7, pc}

0802608e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802608e:	b580      	push	{r7, lr}
 8026090:	b09c      	sub	sp, #112	; 0x70
 8026092:	af00      	add	r7, sp, #0
 8026094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8026096:	687b      	ldr	r3, [r7, #4]
 8026098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802609a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 802609c:	687b      	ldr	r3, [r7, #4]
 802609e:	69db      	ldr	r3, [r3, #28]
 80260a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80260a4:	d071      	beq.n	802618a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80260a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80260a8:	2200      	movs	r2, #0
 80260aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80260ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80260b0:	681b      	ldr	r3, [r3, #0]
 80260b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80260b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80260b6:	e853 3f00 	ldrex	r3, [r3]
 80260ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80260bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80260be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80260c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80260c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80260c6:	681b      	ldr	r3, [r3, #0]
 80260c8:	461a      	mov	r2, r3
 80260ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80260cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80260ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80260d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80260d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80260d4:	e841 2300 	strex	r3, r2, [r1]
 80260d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80260da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80260dc:	2b00      	cmp	r3, #0
 80260de:	d1e6      	bne.n	80260ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80260e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80260e2:	681b      	ldr	r3, [r3, #0]
 80260e4:	3308      	adds	r3, #8
 80260e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80260e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80260ea:	e853 3f00 	ldrex	r3, [r3]
 80260ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80260f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80260f2:	f023 0301 	bic.w	r3, r3, #1
 80260f6:	667b      	str	r3, [r7, #100]	; 0x64
 80260f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80260fa:	681b      	ldr	r3, [r3, #0]
 80260fc:	3308      	adds	r3, #8
 80260fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8026100:	647a      	str	r2, [r7, #68]	; 0x44
 8026102:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8026106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026108:	e841 2300 	strex	r3, r2, [r1]
 802610c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802610e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026110:	2b00      	cmp	r3, #0
 8026112:	d1e5      	bne.n	80260e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8026114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026116:	681b      	ldr	r3, [r3, #0]
 8026118:	3308      	adds	r3, #8
 802611a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802611e:	e853 3f00 	ldrex	r3, [r3]
 8026122:	623b      	str	r3, [r7, #32]
   return(result);
 8026124:	6a3b      	ldr	r3, [r7, #32]
 8026126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802612a:	663b      	str	r3, [r7, #96]	; 0x60
 802612c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802612e:	681b      	ldr	r3, [r3, #0]
 8026130:	3308      	adds	r3, #8
 8026132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8026134:	633a      	str	r2, [r7, #48]	; 0x30
 8026136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802613a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802613c:	e841 2300 	strex	r3, r2, [r1]
 8026140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8026142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026144:	2b00      	cmp	r3, #0
 8026146:	d1e5      	bne.n	8026114 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8026148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802614a:	2220      	movs	r2, #32
 802614c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8026150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8026154:	2b01      	cmp	r3, #1
 8026156:	d118      	bne.n	802618a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8026158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802615a:	681b      	ldr	r3, [r3, #0]
 802615c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802615e:	693b      	ldr	r3, [r7, #16]
 8026160:	e853 3f00 	ldrex	r3, [r3]
 8026164:	60fb      	str	r3, [r7, #12]
   return(result);
 8026166:	68fb      	ldr	r3, [r7, #12]
 8026168:	f023 0310 	bic.w	r3, r3, #16
 802616c:	65fb      	str	r3, [r7, #92]	; 0x5c
 802616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026170:	681b      	ldr	r3, [r3, #0]
 8026172:	461a      	mov	r2, r3
 8026174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026176:	61fb      	str	r3, [r7, #28]
 8026178:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802617a:	69b9      	ldr	r1, [r7, #24]
 802617c:	69fa      	ldr	r2, [r7, #28]
 802617e:	e841 2300 	strex	r3, r2, [r1]
 8026182:	617b      	str	r3, [r7, #20]
   return(result);
 8026184:	697b      	ldr	r3, [r7, #20]
 8026186:	2b00      	cmp	r3, #0
 8026188:	d1e6      	bne.n	8026158 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802618a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802618c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802618e:	2b01      	cmp	r3, #1
 8026190:	d107      	bne.n	80261a2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8026192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026194:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8026198:	4619      	mov	r1, r3
 802619a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 802619c:	f7df fb5a 	bl	8005854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80261a0:	e002      	b.n	80261a8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 80261a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80261a4:	f7df fc1c 	bl	80059e0 <HAL_UART_RxCpltCallback>
}
 80261a8:	bf00      	nop
 80261aa:	3770      	adds	r7, #112	; 0x70
 80261ac:	46bd      	mov	sp, r7
 80261ae:	bd80      	pop	{r7, pc}

080261b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80261b0:	b580      	push	{r7, lr}
 80261b2:	b084      	sub	sp, #16
 80261b4:	af00      	add	r7, sp, #0
 80261b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80261b8:	687b      	ldr	r3, [r7, #4]
 80261ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80261be:	68fb      	ldr	r3, [r7, #12]
 80261c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80261c2:	2b01      	cmp	r3, #1
 80261c4:	d109      	bne.n	80261da <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80261c6:	68fb      	ldr	r3, [r7, #12]
 80261c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80261cc:	085b      	lsrs	r3, r3, #1
 80261ce:	b29b      	uxth	r3, r3
 80261d0:	4619      	mov	r1, r3
 80261d2:	68f8      	ldr	r0, [r7, #12]
 80261d4:	f7df fb3e 	bl	8005854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80261d8:	e002      	b.n	80261e0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80261da:	68f8      	ldr	r0, [r7, #12]
 80261dc:	f7fe fd90 	bl	8024d00 <HAL_UART_RxHalfCpltCallback>
}
 80261e0:	bf00      	nop
 80261e2:	3710      	adds	r7, #16
 80261e4:	46bd      	mov	sp, r7
 80261e6:	bd80      	pop	{r7, pc}

080261e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80261e8:	b580      	push	{r7, lr}
 80261ea:	b086      	sub	sp, #24
 80261ec:	af00      	add	r7, sp, #0
 80261ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80261f6:	697b      	ldr	r3, [r7, #20]
 80261f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80261fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80261fe:	697b      	ldr	r3, [r7, #20]
 8026200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8026204:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8026206:	697b      	ldr	r3, [r7, #20]
 8026208:	681b      	ldr	r3, [r3, #0]
 802620a:	689b      	ldr	r3, [r3, #8]
 802620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026210:	2b80      	cmp	r3, #128	; 0x80
 8026212:	d109      	bne.n	8026228 <UART_DMAError+0x40>
 8026214:	693b      	ldr	r3, [r7, #16]
 8026216:	2b21      	cmp	r3, #33	; 0x21
 8026218:	d106      	bne.n	8026228 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 802621a:	697b      	ldr	r3, [r7, #20]
 802621c:	2200      	movs	r2, #0
 802621e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8026222:	6978      	ldr	r0, [r7, #20]
 8026224:	f7ff fe32 	bl	8025e8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8026228:	697b      	ldr	r3, [r7, #20]
 802622a:	681b      	ldr	r3, [r3, #0]
 802622c:	689b      	ldr	r3, [r3, #8]
 802622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026232:	2b40      	cmp	r3, #64	; 0x40
 8026234:	d109      	bne.n	802624a <UART_DMAError+0x62>
 8026236:	68fb      	ldr	r3, [r7, #12]
 8026238:	2b22      	cmp	r3, #34	; 0x22
 802623a:	d106      	bne.n	802624a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 802623c:	697b      	ldr	r3, [r7, #20]
 802623e:	2200      	movs	r2, #0
 8026240:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8026244:	6978      	ldr	r0, [r7, #20]
 8026246:	f7ff fe63 	bl	8025f10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 802624a:	697b      	ldr	r3, [r7, #20]
 802624c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8026250:	f043 0210 	orr.w	r2, r3, #16
 8026254:	697b      	ldr	r3, [r7, #20]
 8026256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802625a:	6978      	ldr	r0, [r7, #20]
 802625c:	f7df fc0a 	bl	8005a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8026260:	bf00      	nop
 8026262:	3718      	adds	r7, #24
 8026264:	46bd      	mov	sp, r7
 8026266:	bd80      	pop	{r7, pc}

08026268 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8026268:	b480      	push	{r7}
 802626a:	b085      	sub	sp, #20
 802626c:	af00      	add	r7, sp, #0
 802626e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8026270:	687b      	ldr	r3, [r7, #4]
 8026272:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8026276:	2b01      	cmp	r3, #1
 8026278:	d101      	bne.n	802627e <HAL_UARTEx_DisableFifoMode+0x16>
 802627a:	2302      	movs	r3, #2
 802627c:	e027      	b.n	80262ce <HAL_UARTEx_DisableFifoMode+0x66>
 802627e:	687b      	ldr	r3, [r7, #4]
 8026280:	2201      	movs	r2, #1
 8026282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8026286:	687b      	ldr	r3, [r7, #4]
 8026288:	2224      	movs	r2, #36	; 0x24
 802628a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	681b      	ldr	r3, [r3, #0]
 8026292:	681b      	ldr	r3, [r3, #0]
 8026294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8026296:	687b      	ldr	r3, [r7, #4]
 8026298:	681b      	ldr	r3, [r3, #0]
 802629a:	681a      	ldr	r2, [r3, #0]
 802629c:	687b      	ldr	r3, [r7, #4]
 802629e:	681b      	ldr	r3, [r3, #0]
 80262a0:	f022 0201 	bic.w	r2, r2, #1
 80262a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80262a6:	68fb      	ldr	r3, [r7, #12]
 80262a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80262ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80262ae:	687b      	ldr	r3, [r7, #4]
 80262b0:	2200      	movs	r2, #0
 80262b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80262b4:	687b      	ldr	r3, [r7, #4]
 80262b6:	681b      	ldr	r3, [r3, #0]
 80262b8:	68fa      	ldr	r2, [r7, #12]
 80262ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80262bc:	687b      	ldr	r3, [r7, #4]
 80262be:	2220      	movs	r2, #32
 80262c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	2200      	movs	r2, #0
 80262c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80262cc:	2300      	movs	r3, #0
}
 80262ce:	4618      	mov	r0, r3
 80262d0:	3714      	adds	r7, #20
 80262d2:	46bd      	mov	sp, r7
 80262d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262d8:	4770      	bx	lr

080262da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80262da:	b580      	push	{r7, lr}
 80262dc:	b084      	sub	sp, #16
 80262de:	af00      	add	r7, sp, #0
 80262e0:	6078      	str	r0, [r7, #4]
 80262e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80262e4:	687b      	ldr	r3, [r7, #4]
 80262e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80262ea:	2b01      	cmp	r3, #1
 80262ec:	d101      	bne.n	80262f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80262ee:	2302      	movs	r3, #2
 80262f0:	e02d      	b.n	802634e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80262f2:	687b      	ldr	r3, [r7, #4]
 80262f4:	2201      	movs	r2, #1
 80262f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80262fa:	687b      	ldr	r3, [r7, #4]
 80262fc:	2224      	movs	r2, #36	; 0x24
 80262fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8026302:	687b      	ldr	r3, [r7, #4]
 8026304:	681b      	ldr	r3, [r3, #0]
 8026306:	681b      	ldr	r3, [r3, #0]
 8026308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802630a:	687b      	ldr	r3, [r7, #4]
 802630c:	681b      	ldr	r3, [r3, #0]
 802630e:	681a      	ldr	r2, [r3, #0]
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	681b      	ldr	r3, [r3, #0]
 8026314:	f022 0201 	bic.w	r2, r2, #1
 8026318:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802631a:	687b      	ldr	r3, [r7, #4]
 802631c:	681b      	ldr	r3, [r3, #0]
 802631e:	689b      	ldr	r3, [r3, #8]
 8026320:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	681b      	ldr	r3, [r3, #0]
 8026328:	683a      	ldr	r2, [r7, #0]
 802632a:	430a      	orrs	r2, r1
 802632c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802632e:	6878      	ldr	r0, [r7, #4]
 8026330:	f000 f8ac 	bl	802648c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8026334:	687b      	ldr	r3, [r7, #4]
 8026336:	681b      	ldr	r3, [r3, #0]
 8026338:	68fa      	ldr	r2, [r7, #12]
 802633a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	2220      	movs	r2, #32
 8026340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8026344:	687b      	ldr	r3, [r7, #4]
 8026346:	2200      	movs	r2, #0
 8026348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802634c:	2300      	movs	r3, #0
}
 802634e:	4618      	mov	r0, r3
 8026350:	3710      	adds	r7, #16
 8026352:	46bd      	mov	sp, r7
 8026354:	bd80      	pop	{r7, pc}

08026356 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8026356:	b580      	push	{r7, lr}
 8026358:	b084      	sub	sp, #16
 802635a:	af00      	add	r7, sp, #0
 802635c:	6078      	str	r0, [r7, #4]
 802635e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8026360:	687b      	ldr	r3, [r7, #4]
 8026362:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8026366:	2b01      	cmp	r3, #1
 8026368:	d101      	bne.n	802636e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802636a:	2302      	movs	r3, #2
 802636c:	e02d      	b.n	80263ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802636e:	687b      	ldr	r3, [r7, #4]
 8026370:	2201      	movs	r2, #1
 8026372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	2224      	movs	r2, #36	; 0x24
 802637a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802637e:	687b      	ldr	r3, [r7, #4]
 8026380:	681b      	ldr	r3, [r3, #0]
 8026382:	681b      	ldr	r3, [r3, #0]
 8026384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8026386:	687b      	ldr	r3, [r7, #4]
 8026388:	681b      	ldr	r3, [r3, #0]
 802638a:	681a      	ldr	r2, [r3, #0]
 802638c:	687b      	ldr	r3, [r7, #4]
 802638e:	681b      	ldr	r3, [r3, #0]
 8026390:	f022 0201 	bic.w	r2, r2, #1
 8026394:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8026396:	687b      	ldr	r3, [r7, #4]
 8026398:	681b      	ldr	r3, [r3, #0]
 802639a:	689b      	ldr	r3, [r3, #8]
 802639c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80263a0:	687b      	ldr	r3, [r7, #4]
 80263a2:	681b      	ldr	r3, [r3, #0]
 80263a4:	683a      	ldr	r2, [r7, #0]
 80263a6:	430a      	orrs	r2, r1
 80263a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80263aa:	6878      	ldr	r0, [r7, #4]
 80263ac:	f000 f86e 	bl	802648c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80263b0:	687b      	ldr	r3, [r7, #4]
 80263b2:	681b      	ldr	r3, [r3, #0]
 80263b4:	68fa      	ldr	r2, [r7, #12]
 80263b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80263b8:	687b      	ldr	r3, [r7, #4]
 80263ba:	2220      	movs	r2, #32
 80263bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80263c0:	687b      	ldr	r3, [r7, #4]
 80263c2:	2200      	movs	r2, #0
 80263c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80263c8:	2300      	movs	r3, #0
}
 80263ca:	4618      	mov	r0, r3
 80263cc:	3710      	adds	r7, #16
 80263ce:	46bd      	mov	sp, r7
 80263d0:	bd80      	pop	{r7, pc}

080263d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80263d2:	b580      	push	{r7, lr}
 80263d4:	b08c      	sub	sp, #48	; 0x30
 80263d6:	af00      	add	r7, sp, #0
 80263d8:	60f8      	str	r0, [r7, #12]
 80263da:	60b9      	str	r1, [r7, #8]
 80263dc:	4613      	mov	r3, r2
 80263de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80263e0:	68fb      	ldr	r3, [r7, #12]
 80263e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80263e6:	2b20      	cmp	r3, #32
 80263e8:	d14a      	bne.n	8026480 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80263ea:	68bb      	ldr	r3, [r7, #8]
 80263ec:	2b00      	cmp	r3, #0
 80263ee:	d002      	beq.n	80263f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80263f0:	88fb      	ldrh	r3, [r7, #6]
 80263f2:	2b00      	cmp	r3, #0
 80263f4:	d101      	bne.n	80263fa <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80263f6:	2301      	movs	r3, #1
 80263f8:	e043      	b.n	8026482 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80263fa:	68fb      	ldr	r3, [r7, #12]
 80263fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8026400:	2b01      	cmp	r3, #1
 8026402:	d101      	bne.n	8026408 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8026404:	2302      	movs	r3, #2
 8026406:	e03c      	b.n	8026482 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8026408:	68fb      	ldr	r3, [r7, #12]
 802640a:	2201      	movs	r2, #1
 802640c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8026410:	68fb      	ldr	r3, [r7, #12]
 8026412:	2201      	movs	r2, #1
 8026414:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8026416:	88fb      	ldrh	r3, [r7, #6]
 8026418:	461a      	mov	r2, r3
 802641a:	68b9      	ldr	r1, [r7, #8]
 802641c:	68f8      	ldr	r0, [r7, #12]
 802641e:	f7ff fc8d 	bl	8025d3c <UART_Start_Receive_DMA>
 8026422:	4603      	mov	r3, r0
 8026424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8026428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802642c:	2b00      	cmp	r3, #0
 802642e:	d124      	bne.n	802647a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8026430:	68fb      	ldr	r3, [r7, #12]
 8026432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8026434:	2b01      	cmp	r3, #1
 8026436:	d11d      	bne.n	8026474 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8026438:	68fb      	ldr	r3, [r7, #12]
 802643a:	681b      	ldr	r3, [r3, #0]
 802643c:	2210      	movs	r2, #16
 802643e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8026440:	68fb      	ldr	r3, [r7, #12]
 8026442:	681b      	ldr	r3, [r3, #0]
 8026444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026446:	69bb      	ldr	r3, [r7, #24]
 8026448:	e853 3f00 	ldrex	r3, [r3]
 802644c:	617b      	str	r3, [r7, #20]
   return(result);
 802644e:	697b      	ldr	r3, [r7, #20]
 8026450:	f043 0310 	orr.w	r3, r3, #16
 8026454:	62bb      	str	r3, [r7, #40]	; 0x28
 8026456:	68fb      	ldr	r3, [r7, #12]
 8026458:	681b      	ldr	r3, [r3, #0]
 802645a:	461a      	mov	r2, r3
 802645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802645e:	627b      	str	r3, [r7, #36]	; 0x24
 8026460:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026462:	6a39      	ldr	r1, [r7, #32]
 8026464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026466:	e841 2300 	strex	r3, r2, [r1]
 802646a:	61fb      	str	r3, [r7, #28]
   return(result);
 802646c:	69fb      	ldr	r3, [r7, #28]
 802646e:	2b00      	cmp	r3, #0
 8026470:	d1e6      	bne.n	8026440 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8026472:	e002      	b.n	802647a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8026474:	2301      	movs	r3, #1
 8026476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 802647a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802647e:	e000      	b.n	8026482 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8026480:	2302      	movs	r3, #2
  }
}
 8026482:	4618      	mov	r0, r3
 8026484:	3730      	adds	r7, #48	; 0x30
 8026486:	46bd      	mov	sp, r7
 8026488:	bd80      	pop	{r7, pc}
	...

0802648c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802648c:	b480      	push	{r7}
 802648e:	b085      	sub	sp, #20
 8026490:	af00      	add	r7, sp, #0
 8026492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8026494:	687b      	ldr	r3, [r7, #4]
 8026496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8026498:	2b00      	cmp	r3, #0
 802649a:	d108      	bne.n	80264ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802649c:	687b      	ldr	r3, [r7, #4]
 802649e:	2201      	movs	r2, #1
 80264a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80264a4:	687b      	ldr	r3, [r7, #4]
 80264a6:	2201      	movs	r2, #1
 80264a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80264ac:	e031      	b.n	8026512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80264ae:	2310      	movs	r3, #16
 80264b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80264b2:	2310      	movs	r3, #16
 80264b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	681b      	ldr	r3, [r3, #0]
 80264ba:	689b      	ldr	r3, [r3, #8]
 80264bc:	0e5b      	lsrs	r3, r3, #25
 80264be:	b2db      	uxtb	r3, r3
 80264c0:	f003 0307 	and.w	r3, r3, #7
 80264c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80264c6:	687b      	ldr	r3, [r7, #4]
 80264c8:	681b      	ldr	r3, [r3, #0]
 80264ca:	689b      	ldr	r3, [r3, #8]
 80264cc:	0f5b      	lsrs	r3, r3, #29
 80264ce:	b2db      	uxtb	r3, r3
 80264d0:	f003 0307 	and.w	r3, r3, #7
 80264d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80264d6:	7bbb      	ldrb	r3, [r7, #14]
 80264d8:	7b3a      	ldrb	r2, [r7, #12]
 80264da:	4911      	ldr	r1, [pc, #68]	; (8026520 <UARTEx_SetNbDataToProcess+0x94>)
 80264dc:	5c8a      	ldrb	r2, [r1, r2]
 80264de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80264e2:	7b3a      	ldrb	r2, [r7, #12]
 80264e4:	490f      	ldr	r1, [pc, #60]	; (8026524 <UARTEx_SetNbDataToProcess+0x98>)
 80264e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80264e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80264ec:	b29a      	uxth	r2, r3
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80264f4:	7bfb      	ldrb	r3, [r7, #15]
 80264f6:	7b7a      	ldrb	r2, [r7, #13]
 80264f8:	4909      	ldr	r1, [pc, #36]	; (8026520 <UARTEx_SetNbDataToProcess+0x94>)
 80264fa:	5c8a      	ldrb	r2, [r1, r2]
 80264fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8026500:	7b7a      	ldrb	r2, [r7, #13]
 8026502:	4908      	ldr	r1, [pc, #32]	; (8026524 <UARTEx_SetNbDataToProcess+0x98>)
 8026504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8026506:	fb93 f3f2 	sdiv	r3, r3, r2
 802650a:	b29a      	uxth	r2, r3
 802650c:	687b      	ldr	r3, [r7, #4]
 802650e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8026512:	bf00      	nop
 8026514:	3714      	adds	r7, #20
 8026516:	46bd      	mov	sp, r7
 8026518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802651c:	4770      	bx	lr
 802651e:	bf00      	nop
 8026520:	0802b504 	.word	0x0802b504
 8026524:	0802b50c 	.word	0x0802b50c

08026528 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8026528:	b480      	push	{r7}
 802652a:	b083      	sub	sp, #12
 802652c:	af00      	add	r7, sp, #0
 802652e:	6078      	str	r0, [r7, #4]
 8026530:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8026532:	683b      	ldr	r3, [r7, #0]
 8026534:	681b      	ldr	r3, [r3, #0]
 8026536:	2b00      	cmp	r3, #0
 8026538:	d121      	bne.n	802657e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802653a:	687b      	ldr	r3, [r7, #4]
 802653c:	681a      	ldr	r2, [r3, #0]
 802653e:	4b27      	ldr	r3, [pc, #156]	; (80265dc <FMC_SDRAM_Init+0xb4>)
 8026540:	4013      	ands	r3, r2
 8026542:	683a      	ldr	r2, [r7, #0]
 8026544:	6851      	ldr	r1, [r2, #4]
 8026546:	683a      	ldr	r2, [r7, #0]
 8026548:	6892      	ldr	r2, [r2, #8]
 802654a:	4311      	orrs	r1, r2
 802654c:	683a      	ldr	r2, [r7, #0]
 802654e:	68d2      	ldr	r2, [r2, #12]
 8026550:	4311      	orrs	r1, r2
 8026552:	683a      	ldr	r2, [r7, #0]
 8026554:	6912      	ldr	r2, [r2, #16]
 8026556:	4311      	orrs	r1, r2
 8026558:	683a      	ldr	r2, [r7, #0]
 802655a:	6952      	ldr	r2, [r2, #20]
 802655c:	4311      	orrs	r1, r2
 802655e:	683a      	ldr	r2, [r7, #0]
 8026560:	6992      	ldr	r2, [r2, #24]
 8026562:	4311      	orrs	r1, r2
 8026564:	683a      	ldr	r2, [r7, #0]
 8026566:	69d2      	ldr	r2, [r2, #28]
 8026568:	4311      	orrs	r1, r2
 802656a:	683a      	ldr	r2, [r7, #0]
 802656c:	6a12      	ldr	r2, [r2, #32]
 802656e:	4311      	orrs	r1, r2
 8026570:	683a      	ldr	r2, [r7, #0]
 8026572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026574:	430a      	orrs	r2, r1
 8026576:	431a      	orrs	r2, r3
 8026578:	687b      	ldr	r3, [r7, #4]
 802657a:	601a      	str	r2, [r3, #0]
 802657c:	e026      	b.n	80265cc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802657e:	687b      	ldr	r3, [r7, #4]
 8026580:	681b      	ldr	r3, [r3, #0]
 8026582:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8026586:	683b      	ldr	r3, [r7, #0]
 8026588:	69d9      	ldr	r1, [r3, #28]
 802658a:	683b      	ldr	r3, [r7, #0]
 802658c:	6a1b      	ldr	r3, [r3, #32]
 802658e:	4319      	orrs	r1, r3
 8026590:	683b      	ldr	r3, [r7, #0]
 8026592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026594:	430b      	orrs	r3, r1
 8026596:	431a      	orrs	r2, r3
 8026598:	687b      	ldr	r3, [r7, #4]
 802659a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 802659c:	687b      	ldr	r3, [r7, #4]
 802659e:	685a      	ldr	r2, [r3, #4]
 80265a0:	4b0e      	ldr	r3, [pc, #56]	; (80265dc <FMC_SDRAM_Init+0xb4>)
 80265a2:	4013      	ands	r3, r2
 80265a4:	683a      	ldr	r2, [r7, #0]
 80265a6:	6851      	ldr	r1, [r2, #4]
 80265a8:	683a      	ldr	r2, [r7, #0]
 80265aa:	6892      	ldr	r2, [r2, #8]
 80265ac:	4311      	orrs	r1, r2
 80265ae:	683a      	ldr	r2, [r7, #0]
 80265b0:	68d2      	ldr	r2, [r2, #12]
 80265b2:	4311      	orrs	r1, r2
 80265b4:	683a      	ldr	r2, [r7, #0]
 80265b6:	6912      	ldr	r2, [r2, #16]
 80265b8:	4311      	orrs	r1, r2
 80265ba:	683a      	ldr	r2, [r7, #0]
 80265bc:	6952      	ldr	r2, [r2, #20]
 80265be:	4311      	orrs	r1, r2
 80265c0:	683a      	ldr	r2, [r7, #0]
 80265c2:	6992      	ldr	r2, [r2, #24]
 80265c4:	430a      	orrs	r2, r1
 80265c6:	431a      	orrs	r2, r3
 80265c8:	687b      	ldr	r3, [r7, #4]
 80265ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80265cc:	2300      	movs	r3, #0
}
 80265ce:	4618      	mov	r0, r3
 80265d0:	370c      	adds	r7, #12
 80265d2:	46bd      	mov	sp, r7
 80265d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265d8:	4770      	bx	lr
 80265da:	bf00      	nop
 80265dc:	ffff8000 	.word	0xffff8000

080265e0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80265e0:	b480      	push	{r7}
 80265e2:	b085      	sub	sp, #20
 80265e4:	af00      	add	r7, sp, #0
 80265e6:	60f8      	str	r0, [r7, #12]
 80265e8:	60b9      	str	r1, [r7, #8]
 80265ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80265ec:	687b      	ldr	r3, [r7, #4]
 80265ee:	2b00      	cmp	r3, #0
 80265f0:	d128      	bne.n	8026644 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80265f2:	68fb      	ldr	r3, [r7, #12]
 80265f4:	689b      	ldr	r3, [r3, #8]
 80265f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80265fa:	68bb      	ldr	r3, [r7, #8]
 80265fc:	681b      	ldr	r3, [r3, #0]
 80265fe:	1e59      	subs	r1, r3, #1
 8026600:	68bb      	ldr	r3, [r7, #8]
 8026602:	685b      	ldr	r3, [r3, #4]
 8026604:	3b01      	subs	r3, #1
 8026606:	011b      	lsls	r3, r3, #4
 8026608:	4319      	orrs	r1, r3
 802660a:	68bb      	ldr	r3, [r7, #8]
 802660c:	689b      	ldr	r3, [r3, #8]
 802660e:	3b01      	subs	r3, #1
 8026610:	021b      	lsls	r3, r3, #8
 8026612:	4319      	orrs	r1, r3
 8026614:	68bb      	ldr	r3, [r7, #8]
 8026616:	68db      	ldr	r3, [r3, #12]
 8026618:	3b01      	subs	r3, #1
 802661a:	031b      	lsls	r3, r3, #12
 802661c:	4319      	orrs	r1, r3
 802661e:	68bb      	ldr	r3, [r7, #8]
 8026620:	691b      	ldr	r3, [r3, #16]
 8026622:	3b01      	subs	r3, #1
 8026624:	041b      	lsls	r3, r3, #16
 8026626:	4319      	orrs	r1, r3
 8026628:	68bb      	ldr	r3, [r7, #8]
 802662a:	695b      	ldr	r3, [r3, #20]
 802662c:	3b01      	subs	r3, #1
 802662e:	051b      	lsls	r3, r3, #20
 8026630:	4319      	orrs	r1, r3
 8026632:	68bb      	ldr	r3, [r7, #8]
 8026634:	699b      	ldr	r3, [r3, #24]
 8026636:	3b01      	subs	r3, #1
 8026638:	061b      	lsls	r3, r3, #24
 802663a:	430b      	orrs	r3, r1
 802663c:	431a      	orrs	r2, r3
 802663e:	68fb      	ldr	r3, [r7, #12]
 8026640:	609a      	str	r2, [r3, #8]
 8026642:	e02d      	b.n	80266a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8026644:	68fb      	ldr	r3, [r7, #12]
 8026646:	689a      	ldr	r2, [r3, #8]
 8026648:	4b19      	ldr	r3, [pc, #100]	; (80266b0 <FMC_SDRAM_Timing_Init+0xd0>)
 802664a:	4013      	ands	r3, r2
 802664c:	68ba      	ldr	r2, [r7, #8]
 802664e:	68d2      	ldr	r2, [r2, #12]
 8026650:	3a01      	subs	r2, #1
 8026652:	0311      	lsls	r1, r2, #12
 8026654:	68ba      	ldr	r2, [r7, #8]
 8026656:	6952      	ldr	r2, [r2, #20]
 8026658:	3a01      	subs	r2, #1
 802665a:	0512      	lsls	r2, r2, #20
 802665c:	430a      	orrs	r2, r1
 802665e:	431a      	orrs	r2, r3
 8026660:	68fb      	ldr	r3, [r7, #12]
 8026662:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8026664:	68fb      	ldr	r3, [r7, #12]
 8026666:	68db      	ldr	r3, [r3, #12]
 8026668:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802666c:	68bb      	ldr	r3, [r7, #8]
 802666e:	681b      	ldr	r3, [r3, #0]
 8026670:	1e59      	subs	r1, r3, #1
 8026672:	68bb      	ldr	r3, [r7, #8]
 8026674:	685b      	ldr	r3, [r3, #4]
 8026676:	3b01      	subs	r3, #1
 8026678:	011b      	lsls	r3, r3, #4
 802667a:	4319      	orrs	r1, r3
 802667c:	68bb      	ldr	r3, [r7, #8]
 802667e:	689b      	ldr	r3, [r3, #8]
 8026680:	3b01      	subs	r3, #1
 8026682:	021b      	lsls	r3, r3, #8
 8026684:	4319      	orrs	r1, r3
 8026686:	68bb      	ldr	r3, [r7, #8]
 8026688:	691b      	ldr	r3, [r3, #16]
 802668a:	3b01      	subs	r3, #1
 802668c:	041b      	lsls	r3, r3, #16
 802668e:	4319      	orrs	r1, r3
 8026690:	68bb      	ldr	r3, [r7, #8]
 8026692:	699b      	ldr	r3, [r3, #24]
 8026694:	3b01      	subs	r3, #1
 8026696:	061b      	lsls	r3, r3, #24
 8026698:	430b      	orrs	r3, r1
 802669a:	431a      	orrs	r2, r3
 802669c:	68fb      	ldr	r3, [r7, #12]
 802669e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80266a0:	2300      	movs	r3, #0
}
 80266a2:	4618      	mov	r0, r3
 80266a4:	3714      	adds	r7, #20
 80266a6:	46bd      	mov	sp, r7
 80266a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ac:	4770      	bx	lr
 80266ae:	bf00      	nop
 80266b0:	ff0f0fff 	.word	0xff0f0fff

080266b4 <__errno>:
 80266b4:	4b01      	ldr	r3, [pc, #4]	; (80266bc <__errno+0x8>)
 80266b6:	6818      	ldr	r0, [r3, #0]
 80266b8:	4770      	bx	lr
 80266ba:	bf00      	nop
 80266bc:	240002a4 	.word	0x240002a4

080266c0 <__libc_init_array>:
 80266c0:	b570      	push	{r4, r5, r6, lr}
 80266c2:	4d0d      	ldr	r5, [pc, #52]	; (80266f8 <__libc_init_array+0x38>)
 80266c4:	4c0d      	ldr	r4, [pc, #52]	; (80266fc <__libc_init_array+0x3c>)
 80266c6:	1b64      	subs	r4, r4, r5
 80266c8:	10a4      	asrs	r4, r4, #2
 80266ca:	2600      	movs	r6, #0
 80266cc:	42a6      	cmp	r6, r4
 80266ce:	d109      	bne.n	80266e4 <__libc_init_array+0x24>
 80266d0:	4d0b      	ldr	r5, [pc, #44]	; (8026700 <__libc_init_array+0x40>)
 80266d2:	4c0c      	ldr	r4, [pc, #48]	; (8026704 <__libc_init_array+0x44>)
 80266d4:	f003 fbc8 	bl	8029e68 <_init>
 80266d8:	1b64      	subs	r4, r4, r5
 80266da:	10a4      	asrs	r4, r4, #2
 80266dc:	2600      	movs	r6, #0
 80266de:	42a6      	cmp	r6, r4
 80266e0:	d105      	bne.n	80266ee <__libc_init_array+0x2e>
 80266e2:	bd70      	pop	{r4, r5, r6, pc}
 80266e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80266e8:	4798      	blx	r3
 80266ea:	3601      	adds	r6, #1
 80266ec:	e7ee      	b.n	80266cc <__libc_init_array+0xc>
 80266ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80266f2:	4798      	blx	r3
 80266f4:	3601      	adds	r6, #1
 80266f6:	e7f2      	b.n	80266de <__libc_init_array+0x1e>
 80266f8:	0802d1b8 	.word	0x0802d1b8
 80266fc:	0802d1b8 	.word	0x0802d1b8
 8026700:	0802d1b8 	.word	0x0802d1b8
 8026704:	0802d1bc 	.word	0x0802d1bc

08026708 <malloc>:
 8026708:	4b02      	ldr	r3, [pc, #8]	; (8026714 <malloc+0xc>)
 802670a:	4601      	mov	r1, r0
 802670c:	6818      	ldr	r0, [r3, #0]
 802670e:	f000 b879 	b.w	8026804 <_malloc_r>
 8026712:	bf00      	nop
 8026714:	240002a4 	.word	0x240002a4

08026718 <memcpy>:
 8026718:	440a      	add	r2, r1
 802671a:	4291      	cmp	r1, r2
 802671c:	f100 33ff 	add.w	r3, r0, #4294967295
 8026720:	d100      	bne.n	8026724 <memcpy+0xc>
 8026722:	4770      	bx	lr
 8026724:	b510      	push	{r4, lr}
 8026726:	f811 4b01 	ldrb.w	r4, [r1], #1
 802672a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802672e:	4291      	cmp	r1, r2
 8026730:	d1f9      	bne.n	8026726 <memcpy+0xe>
 8026732:	bd10      	pop	{r4, pc}

08026734 <memset>:
 8026734:	4402      	add	r2, r0
 8026736:	4603      	mov	r3, r0
 8026738:	4293      	cmp	r3, r2
 802673a:	d100      	bne.n	802673e <memset+0xa>
 802673c:	4770      	bx	lr
 802673e:	f803 1b01 	strb.w	r1, [r3], #1
 8026742:	e7f9      	b.n	8026738 <memset+0x4>

08026744 <_calloc_r>:
 8026744:	b513      	push	{r0, r1, r4, lr}
 8026746:	434a      	muls	r2, r1
 8026748:	4611      	mov	r1, r2
 802674a:	9201      	str	r2, [sp, #4]
 802674c:	f000 f85a 	bl	8026804 <_malloc_r>
 8026750:	4604      	mov	r4, r0
 8026752:	b118      	cbz	r0, 802675c <_calloc_r+0x18>
 8026754:	9a01      	ldr	r2, [sp, #4]
 8026756:	2100      	movs	r1, #0
 8026758:	f7ff ffec 	bl	8026734 <memset>
 802675c:	4620      	mov	r0, r4
 802675e:	b002      	add	sp, #8
 8026760:	bd10      	pop	{r4, pc}
	...

08026764 <_free_r>:
 8026764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026766:	2900      	cmp	r1, #0
 8026768:	d048      	beq.n	80267fc <_free_r+0x98>
 802676a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802676e:	9001      	str	r0, [sp, #4]
 8026770:	2b00      	cmp	r3, #0
 8026772:	f1a1 0404 	sub.w	r4, r1, #4
 8026776:	bfb8      	it	lt
 8026778:	18e4      	addlt	r4, r4, r3
 802677a:	f001 ff9b 	bl	80286b4 <__malloc_lock>
 802677e:	4a20      	ldr	r2, [pc, #128]	; (8026800 <_free_r+0x9c>)
 8026780:	9801      	ldr	r0, [sp, #4]
 8026782:	6813      	ldr	r3, [r2, #0]
 8026784:	4615      	mov	r5, r2
 8026786:	b933      	cbnz	r3, 8026796 <_free_r+0x32>
 8026788:	6063      	str	r3, [r4, #4]
 802678a:	6014      	str	r4, [r2, #0]
 802678c:	b003      	add	sp, #12
 802678e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026792:	f001 bf95 	b.w	80286c0 <__malloc_unlock>
 8026796:	42a3      	cmp	r3, r4
 8026798:	d90b      	bls.n	80267b2 <_free_r+0x4e>
 802679a:	6821      	ldr	r1, [r4, #0]
 802679c:	1862      	adds	r2, r4, r1
 802679e:	4293      	cmp	r3, r2
 80267a0:	bf04      	itt	eq
 80267a2:	681a      	ldreq	r2, [r3, #0]
 80267a4:	685b      	ldreq	r3, [r3, #4]
 80267a6:	6063      	str	r3, [r4, #4]
 80267a8:	bf04      	itt	eq
 80267aa:	1852      	addeq	r2, r2, r1
 80267ac:	6022      	streq	r2, [r4, #0]
 80267ae:	602c      	str	r4, [r5, #0]
 80267b0:	e7ec      	b.n	802678c <_free_r+0x28>
 80267b2:	461a      	mov	r2, r3
 80267b4:	685b      	ldr	r3, [r3, #4]
 80267b6:	b10b      	cbz	r3, 80267bc <_free_r+0x58>
 80267b8:	42a3      	cmp	r3, r4
 80267ba:	d9fa      	bls.n	80267b2 <_free_r+0x4e>
 80267bc:	6811      	ldr	r1, [r2, #0]
 80267be:	1855      	adds	r5, r2, r1
 80267c0:	42a5      	cmp	r5, r4
 80267c2:	d10b      	bne.n	80267dc <_free_r+0x78>
 80267c4:	6824      	ldr	r4, [r4, #0]
 80267c6:	4421      	add	r1, r4
 80267c8:	1854      	adds	r4, r2, r1
 80267ca:	42a3      	cmp	r3, r4
 80267cc:	6011      	str	r1, [r2, #0]
 80267ce:	d1dd      	bne.n	802678c <_free_r+0x28>
 80267d0:	681c      	ldr	r4, [r3, #0]
 80267d2:	685b      	ldr	r3, [r3, #4]
 80267d4:	6053      	str	r3, [r2, #4]
 80267d6:	4421      	add	r1, r4
 80267d8:	6011      	str	r1, [r2, #0]
 80267da:	e7d7      	b.n	802678c <_free_r+0x28>
 80267dc:	d902      	bls.n	80267e4 <_free_r+0x80>
 80267de:	230c      	movs	r3, #12
 80267e0:	6003      	str	r3, [r0, #0]
 80267e2:	e7d3      	b.n	802678c <_free_r+0x28>
 80267e4:	6825      	ldr	r5, [r4, #0]
 80267e6:	1961      	adds	r1, r4, r5
 80267e8:	428b      	cmp	r3, r1
 80267ea:	bf04      	itt	eq
 80267ec:	6819      	ldreq	r1, [r3, #0]
 80267ee:	685b      	ldreq	r3, [r3, #4]
 80267f0:	6063      	str	r3, [r4, #4]
 80267f2:	bf04      	itt	eq
 80267f4:	1949      	addeq	r1, r1, r5
 80267f6:	6021      	streq	r1, [r4, #0]
 80267f8:	6054      	str	r4, [r2, #4]
 80267fa:	e7c7      	b.n	802678c <_free_r+0x28>
 80267fc:	b003      	add	sp, #12
 80267fe:	bd30      	pop	{r4, r5, pc}
 8026800:	24002040 	.word	0x24002040

08026804 <_malloc_r>:
 8026804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026806:	1ccd      	adds	r5, r1, #3
 8026808:	f025 0503 	bic.w	r5, r5, #3
 802680c:	3508      	adds	r5, #8
 802680e:	2d0c      	cmp	r5, #12
 8026810:	bf38      	it	cc
 8026812:	250c      	movcc	r5, #12
 8026814:	2d00      	cmp	r5, #0
 8026816:	4606      	mov	r6, r0
 8026818:	db01      	blt.n	802681e <_malloc_r+0x1a>
 802681a:	42a9      	cmp	r1, r5
 802681c:	d903      	bls.n	8026826 <_malloc_r+0x22>
 802681e:	230c      	movs	r3, #12
 8026820:	6033      	str	r3, [r6, #0]
 8026822:	2000      	movs	r0, #0
 8026824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026826:	f001 ff45 	bl	80286b4 <__malloc_lock>
 802682a:	4921      	ldr	r1, [pc, #132]	; (80268b0 <_malloc_r+0xac>)
 802682c:	680a      	ldr	r2, [r1, #0]
 802682e:	4614      	mov	r4, r2
 8026830:	b99c      	cbnz	r4, 802685a <_malloc_r+0x56>
 8026832:	4f20      	ldr	r7, [pc, #128]	; (80268b4 <_malloc_r+0xb0>)
 8026834:	683b      	ldr	r3, [r7, #0]
 8026836:	b923      	cbnz	r3, 8026842 <_malloc_r+0x3e>
 8026838:	4621      	mov	r1, r4
 802683a:	4630      	mov	r0, r6
 802683c:	f000 fe08 	bl	8027450 <_sbrk_r>
 8026840:	6038      	str	r0, [r7, #0]
 8026842:	4629      	mov	r1, r5
 8026844:	4630      	mov	r0, r6
 8026846:	f000 fe03 	bl	8027450 <_sbrk_r>
 802684a:	1c43      	adds	r3, r0, #1
 802684c:	d123      	bne.n	8026896 <_malloc_r+0x92>
 802684e:	230c      	movs	r3, #12
 8026850:	6033      	str	r3, [r6, #0]
 8026852:	4630      	mov	r0, r6
 8026854:	f001 ff34 	bl	80286c0 <__malloc_unlock>
 8026858:	e7e3      	b.n	8026822 <_malloc_r+0x1e>
 802685a:	6823      	ldr	r3, [r4, #0]
 802685c:	1b5b      	subs	r3, r3, r5
 802685e:	d417      	bmi.n	8026890 <_malloc_r+0x8c>
 8026860:	2b0b      	cmp	r3, #11
 8026862:	d903      	bls.n	802686c <_malloc_r+0x68>
 8026864:	6023      	str	r3, [r4, #0]
 8026866:	441c      	add	r4, r3
 8026868:	6025      	str	r5, [r4, #0]
 802686a:	e004      	b.n	8026876 <_malloc_r+0x72>
 802686c:	6863      	ldr	r3, [r4, #4]
 802686e:	42a2      	cmp	r2, r4
 8026870:	bf0c      	ite	eq
 8026872:	600b      	streq	r3, [r1, #0]
 8026874:	6053      	strne	r3, [r2, #4]
 8026876:	4630      	mov	r0, r6
 8026878:	f001 ff22 	bl	80286c0 <__malloc_unlock>
 802687c:	f104 000b 	add.w	r0, r4, #11
 8026880:	1d23      	adds	r3, r4, #4
 8026882:	f020 0007 	bic.w	r0, r0, #7
 8026886:	1ac2      	subs	r2, r0, r3
 8026888:	d0cc      	beq.n	8026824 <_malloc_r+0x20>
 802688a:	1a1b      	subs	r3, r3, r0
 802688c:	50a3      	str	r3, [r4, r2]
 802688e:	e7c9      	b.n	8026824 <_malloc_r+0x20>
 8026890:	4622      	mov	r2, r4
 8026892:	6864      	ldr	r4, [r4, #4]
 8026894:	e7cc      	b.n	8026830 <_malloc_r+0x2c>
 8026896:	1cc4      	adds	r4, r0, #3
 8026898:	f024 0403 	bic.w	r4, r4, #3
 802689c:	42a0      	cmp	r0, r4
 802689e:	d0e3      	beq.n	8026868 <_malloc_r+0x64>
 80268a0:	1a21      	subs	r1, r4, r0
 80268a2:	4630      	mov	r0, r6
 80268a4:	f000 fdd4 	bl	8027450 <_sbrk_r>
 80268a8:	3001      	adds	r0, #1
 80268aa:	d1dd      	bne.n	8026868 <_malloc_r+0x64>
 80268ac:	e7cf      	b.n	802684e <_malloc_r+0x4a>
 80268ae:	bf00      	nop
 80268b0:	24002040 	.word	0x24002040
 80268b4:	24002044 	.word	0x24002044

080268b8 <__cvt>:
 80268b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80268ba:	ed2d 8b02 	vpush	{d8}
 80268be:	eeb0 8b40 	vmov.f64	d8, d0
 80268c2:	b085      	sub	sp, #20
 80268c4:	4617      	mov	r7, r2
 80268c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80268c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80268ca:	ee18 2a90 	vmov	r2, s17
 80268ce:	f025 0520 	bic.w	r5, r5, #32
 80268d2:	2a00      	cmp	r2, #0
 80268d4:	bfb6      	itet	lt
 80268d6:	222d      	movlt	r2, #45	; 0x2d
 80268d8:	2200      	movge	r2, #0
 80268da:	eeb1 8b40 	vneglt.f64	d8, d0
 80268de:	2d46      	cmp	r5, #70	; 0x46
 80268e0:	460c      	mov	r4, r1
 80268e2:	701a      	strb	r2, [r3, #0]
 80268e4:	d004      	beq.n	80268f0 <__cvt+0x38>
 80268e6:	2d45      	cmp	r5, #69	; 0x45
 80268e8:	d100      	bne.n	80268ec <__cvt+0x34>
 80268ea:	3401      	adds	r4, #1
 80268ec:	2102      	movs	r1, #2
 80268ee:	e000      	b.n	80268f2 <__cvt+0x3a>
 80268f0:	2103      	movs	r1, #3
 80268f2:	ab03      	add	r3, sp, #12
 80268f4:	9301      	str	r3, [sp, #4]
 80268f6:	ab02      	add	r3, sp, #8
 80268f8:	9300      	str	r3, [sp, #0]
 80268fa:	4622      	mov	r2, r4
 80268fc:	4633      	mov	r3, r6
 80268fe:	eeb0 0b48 	vmov.f64	d0, d8
 8026902:	f000 ff31 	bl	8027768 <_dtoa_r>
 8026906:	2d47      	cmp	r5, #71	; 0x47
 8026908:	d109      	bne.n	802691e <__cvt+0x66>
 802690a:	07fb      	lsls	r3, r7, #31
 802690c:	d407      	bmi.n	802691e <__cvt+0x66>
 802690e:	9b03      	ldr	r3, [sp, #12]
 8026910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026912:	1a1b      	subs	r3, r3, r0
 8026914:	6013      	str	r3, [r2, #0]
 8026916:	b005      	add	sp, #20
 8026918:	ecbd 8b02 	vpop	{d8}
 802691c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802691e:	2d46      	cmp	r5, #70	; 0x46
 8026920:	eb00 0204 	add.w	r2, r0, r4
 8026924:	d10c      	bne.n	8026940 <__cvt+0x88>
 8026926:	7803      	ldrb	r3, [r0, #0]
 8026928:	2b30      	cmp	r3, #48	; 0x30
 802692a:	d107      	bne.n	802693c <__cvt+0x84>
 802692c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026934:	bf1c      	itt	ne
 8026936:	f1c4 0401 	rsbne	r4, r4, #1
 802693a:	6034      	strne	r4, [r6, #0]
 802693c:	6833      	ldr	r3, [r6, #0]
 802693e:	441a      	add	r2, r3
 8026940:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026948:	bf08      	it	eq
 802694a:	9203      	streq	r2, [sp, #12]
 802694c:	2130      	movs	r1, #48	; 0x30
 802694e:	9b03      	ldr	r3, [sp, #12]
 8026950:	4293      	cmp	r3, r2
 8026952:	d2dc      	bcs.n	802690e <__cvt+0x56>
 8026954:	1c5c      	adds	r4, r3, #1
 8026956:	9403      	str	r4, [sp, #12]
 8026958:	7019      	strb	r1, [r3, #0]
 802695a:	e7f8      	b.n	802694e <__cvt+0x96>

0802695c <__exponent>:
 802695c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802695e:	4603      	mov	r3, r0
 8026960:	2900      	cmp	r1, #0
 8026962:	bfb8      	it	lt
 8026964:	4249      	neglt	r1, r1
 8026966:	f803 2b02 	strb.w	r2, [r3], #2
 802696a:	bfb4      	ite	lt
 802696c:	222d      	movlt	r2, #45	; 0x2d
 802696e:	222b      	movge	r2, #43	; 0x2b
 8026970:	2909      	cmp	r1, #9
 8026972:	7042      	strb	r2, [r0, #1]
 8026974:	dd2a      	ble.n	80269cc <__exponent+0x70>
 8026976:	f10d 0407 	add.w	r4, sp, #7
 802697a:	46a4      	mov	ip, r4
 802697c:	270a      	movs	r7, #10
 802697e:	46a6      	mov	lr, r4
 8026980:	460a      	mov	r2, r1
 8026982:	fb91 f6f7 	sdiv	r6, r1, r7
 8026986:	fb07 1516 	mls	r5, r7, r6, r1
 802698a:	3530      	adds	r5, #48	; 0x30
 802698c:	2a63      	cmp	r2, #99	; 0x63
 802698e:	f104 34ff 	add.w	r4, r4, #4294967295
 8026992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8026996:	4631      	mov	r1, r6
 8026998:	dcf1      	bgt.n	802697e <__exponent+0x22>
 802699a:	3130      	adds	r1, #48	; 0x30
 802699c:	f1ae 0502 	sub.w	r5, lr, #2
 80269a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80269a4:	1c44      	adds	r4, r0, #1
 80269a6:	4629      	mov	r1, r5
 80269a8:	4561      	cmp	r1, ip
 80269aa:	d30a      	bcc.n	80269c2 <__exponent+0x66>
 80269ac:	f10d 0209 	add.w	r2, sp, #9
 80269b0:	eba2 020e 	sub.w	r2, r2, lr
 80269b4:	4565      	cmp	r5, ip
 80269b6:	bf88      	it	hi
 80269b8:	2200      	movhi	r2, #0
 80269ba:	4413      	add	r3, r2
 80269bc:	1a18      	subs	r0, r3, r0
 80269be:	b003      	add	sp, #12
 80269c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80269c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80269c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80269ca:	e7ed      	b.n	80269a8 <__exponent+0x4c>
 80269cc:	2330      	movs	r3, #48	; 0x30
 80269ce:	3130      	adds	r1, #48	; 0x30
 80269d0:	7083      	strb	r3, [r0, #2]
 80269d2:	70c1      	strb	r1, [r0, #3]
 80269d4:	1d03      	adds	r3, r0, #4
 80269d6:	e7f1      	b.n	80269bc <__exponent+0x60>

080269d8 <_printf_float>:
 80269d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269dc:	b08b      	sub	sp, #44	; 0x2c
 80269de:	460c      	mov	r4, r1
 80269e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80269e4:	4616      	mov	r6, r2
 80269e6:	461f      	mov	r7, r3
 80269e8:	4605      	mov	r5, r0
 80269ea:	f001 fdf7 	bl	80285dc <_localeconv_r>
 80269ee:	f8d0 b000 	ldr.w	fp, [r0]
 80269f2:	4658      	mov	r0, fp
 80269f4:	f7d9 fc8c 	bl	8000310 <strlen>
 80269f8:	2300      	movs	r3, #0
 80269fa:	9308      	str	r3, [sp, #32]
 80269fc:	f8d8 3000 	ldr.w	r3, [r8]
 8026a00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8026a04:	6822      	ldr	r2, [r4, #0]
 8026a06:	3307      	adds	r3, #7
 8026a08:	f023 0307 	bic.w	r3, r3, #7
 8026a0c:	f103 0108 	add.w	r1, r3, #8
 8026a10:	f8c8 1000 	str.w	r1, [r8]
 8026a14:	4682      	mov	sl, r0
 8026a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026a1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8026a1e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8026c80 <_printf_float+0x2a8>
 8026a22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8026a26:	eeb0 6bc0 	vabs.f64	d6, d0
 8026a2a:	eeb4 6b47 	vcmp.f64	d6, d7
 8026a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a32:	dd24      	ble.n	8026a7e <_printf_float+0xa6>
 8026a34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a3c:	d502      	bpl.n	8026a44 <_printf_float+0x6c>
 8026a3e:	232d      	movs	r3, #45	; 0x2d
 8026a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026a44:	4b90      	ldr	r3, [pc, #576]	; (8026c88 <_printf_float+0x2b0>)
 8026a46:	4891      	ldr	r0, [pc, #580]	; (8026c8c <_printf_float+0x2b4>)
 8026a48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8026a4c:	bf94      	ite	ls
 8026a4e:	4698      	movls	r8, r3
 8026a50:	4680      	movhi	r8, r0
 8026a52:	2303      	movs	r3, #3
 8026a54:	6123      	str	r3, [r4, #16]
 8026a56:	f022 0204 	bic.w	r2, r2, #4
 8026a5a:	2300      	movs	r3, #0
 8026a5c:	6022      	str	r2, [r4, #0]
 8026a5e:	9304      	str	r3, [sp, #16]
 8026a60:	9700      	str	r7, [sp, #0]
 8026a62:	4633      	mov	r3, r6
 8026a64:	aa09      	add	r2, sp, #36	; 0x24
 8026a66:	4621      	mov	r1, r4
 8026a68:	4628      	mov	r0, r5
 8026a6a:	f000 f9d3 	bl	8026e14 <_printf_common>
 8026a6e:	3001      	adds	r0, #1
 8026a70:	f040 808a 	bne.w	8026b88 <_printf_float+0x1b0>
 8026a74:	f04f 30ff 	mov.w	r0, #4294967295
 8026a78:	b00b      	add	sp, #44	; 0x2c
 8026a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a7e:	eeb4 0b40 	vcmp.f64	d0, d0
 8026a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a86:	d709      	bvc.n	8026a9c <_printf_float+0xc4>
 8026a88:	ee10 3a90 	vmov	r3, s1
 8026a8c:	2b00      	cmp	r3, #0
 8026a8e:	bfbc      	itt	lt
 8026a90:	232d      	movlt	r3, #45	; 0x2d
 8026a92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8026a96:	487e      	ldr	r0, [pc, #504]	; (8026c90 <_printf_float+0x2b8>)
 8026a98:	4b7e      	ldr	r3, [pc, #504]	; (8026c94 <_printf_float+0x2bc>)
 8026a9a:	e7d5      	b.n	8026a48 <_printf_float+0x70>
 8026a9c:	6863      	ldr	r3, [r4, #4]
 8026a9e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8026aa2:	9104      	str	r1, [sp, #16]
 8026aa4:	1c59      	adds	r1, r3, #1
 8026aa6:	d13c      	bne.n	8026b22 <_printf_float+0x14a>
 8026aa8:	2306      	movs	r3, #6
 8026aaa:	6063      	str	r3, [r4, #4]
 8026aac:	2300      	movs	r3, #0
 8026aae:	9303      	str	r3, [sp, #12]
 8026ab0:	ab08      	add	r3, sp, #32
 8026ab2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8026ab6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8026aba:	ab07      	add	r3, sp, #28
 8026abc:	6861      	ldr	r1, [r4, #4]
 8026abe:	9300      	str	r3, [sp, #0]
 8026ac0:	6022      	str	r2, [r4, #0]
 8026ac2:	f10d 031b 	add.w	r3, sp, #27
 8026ac6:	4628      	mov	r0, r5
 8026ac8:	f7ff fef6 	bl	80268b8 <__cvt>
 8026acc:	9b04      	ldr	r3, [sp, #16]
 8026ace:	9907      	ldr	r1, [sp, #28]
 8026ad0:	2b47      	cmp	r3, #71	; 0x47
 8026ad2:	4680      	mov	r8, r0
 8026ad4:	d108      	bne.n	8026ae8 <_printf_float+0x110>
 8026ad6:	1cc8      	adds	r0, r1, #3
 8026ad8:	db02      	blt.n	8026ae0 <_printf_float+0x108>
 8026ada:	6863      	ldr	r3, [r4, #4]
 8026adc:	4299      	cmp	r1, r3
 8026ade:	dd41      	ble.n	8026b64 <_printf_float+0x18c>
 8026ae0:	f1a9 0902 	sub.w	r9, r9, #2
 8026ae4:	fa5f f989 	uxtb.w	r9, r9
 8026ae8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026aec:	d820      	bhi.n	8026b30 <_printf_float+0x158>
 8026aee:	3901      	subs	r1, #1
 8026af0:	464a      	mov	r2, r9
 8026af2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8026af6:	9107      	str	r1, [sp, #28]
 8026af8:	f7ff ff30 	bl	802695c <__exponent>
 8026afc:	9a08      	ldr	r2, [sp, #32]
 8026afe:	9004      	str	r0, [sp, #16]
 8026b00:	1813      	adds	r3, r2, r0
 8026b02:	2a01      	cmp	r2, #1
 8026b04:	6123      	str	r3, [r4, #16]
 8026b06:	dc02      	bgt.n	8026b0e <_printf_float+0x136>
 8026b08:	6822      	ldr	r2, [r4, #0]
 8026b0a:	07d2      	lsls	r2, r2, #31
 8026b0c:	d501      	bpl.n	8026b12 <_printf_float+0x13a>
 8026b0e:	3301      	adds	r3, #1
 8026b10:	6123      	str	r3, [r4, #16]
 8026b12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8026b16:	2b00      	cmp	r3, #0
 8026b18:	d0a2      	beq.n	8026a60 <_printf_float+0x88>
 8026b1a:	232d      	movs	r3, #45	; 0x2d
 8026b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026b20:	e79e      	b.n	8026a60 <_printf_float+0x88>
 8026b22:	9904      	ldr	r1, [sp, #16]
 8026b24:	2947      	cmp	r1, #71	; 0x47
 8026b26:	d1c1      	bne.n	8026aac <_printf_float+0xd4>
 8026b28:	2b00      	cmp	r3, #0
 8026b2a:	d1bf      	bne.n	8026aac <_printf_float+0xd4>
 8026b2c:	2301      	movs	r3, #1
 8026b2e:	e7bc      	b.n	8026aaa <_printf_float+0xd2>
 8026b30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8026b34:	d118      	bne.n	8026b68 <_printf_float+0x190>
 8026b36:	2900      	cmp	r1, #0
 8026b38:	6863      	ldr	r3, [r4, #4]
 8026b3a:	dd0b      	ble.n	8026b54 <_printf_float+0x17c>
 8026b3c:	6121      	str	r1, [r4, #16]
 8026b3e:	b913      	cbnz	r3, 8026b46 <_printf_float+0x16e>
 8026b40:	6822      	ldr	r2, [r4, #0]
 8026b42:	07d0      	lsls	r0, r2, #31
 8026b44:	d502      	bpl.n	8026b4c <_printf_float+0x174>
 8026b46:	3301      	adds	r3, #1
 8026b48:	440b      	add	r3, r1
 8026b4a:	6123      	str	r3, [r4, #16]
 8026b4c:	2300      	movs	r3, #0
 8026b4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8026b50:	9304      	str	r3, [sp, #16]
 8026b52:	e7de      	b.n	8026b12 <_printf_float+0x13a>
 8026b54:	b913      	cbnz	r3, 8026b5c <_printf_float+0x184>
 8026b56:	6822      	ldr	r2, [r4, #0]
 8026b58:	07d2      	lsls	r2, r2, #31
 8026b5a:	d501      	bpl.n	8026b60 <_printf_float+0x188>
 8026b5c:	3302      	adds	r3, #2
 8026b5e:	e7f4      	b.n	8026b4a <_printf_float+0x172>
 8026b60:	2301      	movs	r3, #1
 8026b62:	e7f2      	b.n	8026b4a <_printf_float+0x172>
 8026b64:	f04f 0967 	mov.w	r9, #103	; 0x67
 8026b68:	9b08      	ldr	r3, [sp, #32]
 8026b6a:	4299      	cmp	r1, r3
 8026b6c:	db05      	blt.n	8026b7a <_printf_float+0x1a2>
 8026b6e:	6823      	ldr	r3, [r4, #0]
 8026b70:	6121      	str	r1, [r4, #16]
 8026b72:	07d8      	lsls	r0, r3, #31
 8026b74:	d5ea      	bpl.n	8026b4c <_printf_float+0x174>
 8026b76:	1c4b      	adds	r3, r1, #1
 8026b78:	e7e7      	b.n	8026b4a <_printf_float+0x172>
 8026b7a:	2900      	cmp	r1, #0
 8026b7c:	bfd4      	ite	le
 8026b7e:	f1c1 0202 	rsble	r2, r1, #2
 8026b82:	2201      	movgt	r2, #1
 8026b84:	4413      	add	r3, r2
 8026b86:	e7e0      	b.n	8026b4a <_printf_float+0x172>
 8026b88:	6823      	ldr	r3, [r4, #0]
 8026b8a:	055a      	lsls	r2, r3, #21
 8026b8c:	d407      	bmi.n	8026b9e <_printf_float+0x1c6>
 8026b8e:	6923      	ldr	r3, [r4, #16]
 8026b90:	4642      	mov	r2, r8
 8026b92:	4631      	mov	r1, r6
 8026b94:	4628      	mov	r0, r5
 8026b96:	47b8      	blx	r7
 8026b98:	3001      	adds	r0, #1
 8026b9a:	d12a      	bne.n	8026bf2 <_printf_float+0x21a>
 8026b9c:	e76a      	b.n	8026a74 <_printf_float+0x9c>
 8026b9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026ba2:	f240 80e2 	bls.w	8026d6a <_printf_float+0x392>
 8026ba6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026baa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bb2:	d133      	bne.n	8026c1c <_printf_float+0x244>
 8026bb4:	4a38      	ldr	r2, [pc, #224]	; (8026c98 <_printf_float+0x2c0>)
 8026bb6:	2301      	movs	r3, #1
 8026bb8:	4631      	mov	r1, r6
 8026bba:	4628      	mov	r0, r5
 8026bbc:	47b8      	blx	r7
 8026bbe:	3001      	adds	r0, #1
 8026bc0:	f43f af58 	beq.w	8026a74 <_printf_float+0x9c>
 8026bc4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026bc8:	429a      	cmp	r2, r3
 8026bca:	db02      	blt.n	8026bd2 <_printf_float+0x1fa>
 8026bcc:	6823      	ldr	r3, [r4, #0]
 8026bce:	07d8      	lsls	r0, r3, #31
 8026bd0:	d50f      	bpl.n	8026bf2 <_printf_float+0x21a>
 8026bd2:	4653      	mov	r3, sl
 8026bd4:	465a      	mov	r2, fp
 8026bd6:	4631      	mov	r1, r6
 8026bd8:	4628      	mov	r0, r5
 8026bda:	47b8      	blx	r7
 8026bdc:	3001      	adds	r0, #1
 8026bde:	f43f af49 	beq.w	8026a74 <_printf_float+0x9c>
 8026be2:	f04f 0800 	mov.w	r8, #0
 8026be6:	f104 091a 	add.w	r9, r4, #26
 8026bea:	9b08      	ldr	r3, [sp, #32]
 8026bec:	3b01      	subs	r3, #1
 8026bee:	4543      	cmp	r3, r8
 8026bf0:	dc09      	bgt.n	8026c06 <_printf_float+0x22e>
 8026bf2:	6823      	ldr	r3, [r4, #0]
 8026bf4:	079b      	lsls	r3, r3, #30
 8026bf6:	f100 8108 	bmi.w	8026e0a <_printf_float+0x432>
 8026bfa:	68e0      	ldr	r0, [r4, #12]
 8026bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026bfe:	4298      	cmp	r0, r3
 8026c00:	bfb8      	it	lt
 8026c02:	4618      	movlt	r0, r3
 8026c04:	e738      	b.n	8026a78 <_printf_float+0xa0>
 8026c06:	2301      	movs	r3, #1
 8026c08:	464a      	mov	r2, r9
 8026c0a:	4631      	mov	r1, r6
 8026c0c:	4628      	mov	r0, r5
 8026c0e:	47b8      	blx	r7
 8026c10:	3001      	adds	r0, #1
 8026c12:	f43f af2f 	beq.w	8026a74 <_printf_float+0x9c>
 8026c16:	f108 0801 	add.w	r8, r8, #1
 8026c1a:	e7e6      	b.n	8026bea <_printf_float+0x212>
 8026c1c:	9b07      	ldr	r3, [sp, #28]
 8026c1e:	2b00      	cmp	r3, #0
 8026c20:	dc3c      	bgt.n	8026c9c <_printf_float+0x2c4>
 8026c22:	4a1d      	ldr	r2, [pc, #116]	; (8026c98 <_printf_float+0x2c0>)
 8026c24:	2301      	movs	r3, #1
 8026c26:	4631      	mov	r1, r6
 8026c28:	4628      	mov	r0, r5
 8026c2a:	47b8      	blx	r7
 8026c2c:	3001      	adds	r0, #1
 8026c2e:	f43f af21 	beq.w	8026a74 <_printf_float+0x9c>
 8026c32:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026c36:	4313      	orrs	r3, r2
 8026c38:	d102      	bne.n	8026c40 <_printf_float+0x268>
 8026c3a:	6823      	ldr	r3, [r4, #0]
 8026c3c:	07d9      	lsls	r1, r3, #31
 8026c3e:	d5d8      	bpl.n	8026bf2 <_printf_float+0x21a>
 8026c40:	4653      	mov	r3, sl
 8026c42:	465a      	mov	r2, fp
 8026c44:	4631      	mov	r1, r6
 8026c46:	4628      	mov	r0, r5
 8026c48:	47b8      	blx	r7
 8026c4a:	3001      	adds	r0, #1
 8026c4c:	f43f af12 	beq.w	8026a74 <_printf_float+0x9c>
 8026c50:	f04f 0900 	mov.w	r9, #0
 8026c54:	f104 0a1a 	add.w	sl, r4, #26
 8026c58:	9b07      	ldr	r3, [sp, #28]
 8026c5a:	425b      	negs	r3, r3
 8026c5c:	454b      	cmp	r3, r9
 8026c5e:	dc01      	bgt.n	8026c64 <_printf_float+0x28c>
 8026c60:	9b08      	ldr	r3, [sp, #32]
 8026c62:	e795      	b.n	8026b90 <_printf_float+0x1b8>
 8026c64:	2301      	movs	r3, #1
 8026c66:	4652      	mov	r2, sl
 8026c68:	4631      	mov	r1, r6
 8026c6a:	4628      	mov	r0, r5
 8026c6c:	47b8      	blx	r7
 8026c6e:	3001      	adds	r0, #1
 8026c70:	f43f af00 	beq.w	8026a74 <_printf_float+0x9c>
 8026c74:	f109 0901 	add.w	r9, r9, #1
 8026c78:	e7ee      	b.n	8026c58 <_printf_float+0x280>
 8026c7a:	bf00      	nop
 8026c7c:	f3af 8000 	nop.w
 8026c80:	ffffffff 	.word	0xffffffff
 8026c84:	7fefffff 	.word	0x7fefffff
 8026c88:	0802b518 	.word	0x0802b518
 8026c8c:	0802b51c 	.word	0x0802b51c
 8026c90:	0802b524 	.word	0x0802b524
 8026c94:	0802b520 	.word	0x0802b520
 8026c98:	0802b528 	.word	0x0802b528
 8026c9c:	9a08      	ldr	r2, [sp, #32]
 8026c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026ca0:	429a      	cmp	r2, r3
 8026ca2:	bfa8      	it	ge
 8026ca4:	461a      	movge	r2, r3
 8026ca6:	2a00      	cmp	r2, #0
 8026ca8:	4691      	mov	r9, r2
 8026caa:	dc38      	bgt.n	8026d1e <_printf_float+0x346>
 8026cac:	2300      	movs	r3, #0
 8026cae:	9305      	str	r3, [sp, #20]
 8026cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026cb4:	f104 021a 	add.w	r2, r4, #26
 8026cb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026cba:	9905      	ldr	r1, [sp, #20]
 8026cbc:	9304      	str	r3, [sp, #16]
 8026cbe:	eba3 0309 	sub.w	r3, r3, r9
 8026cc2:	428b      	cmp	r3, r1
 8026cc4:	dc33      	bgt.n	8026d2e <_printf_float+0x356>
 8026cc6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026cca:	429a      	cmp	r2, r3
 8026ccc:	db3c      	blt.n	8026d48 <_printf_float+0x370>
 8026cce:	6823      	ldr	r3, [r4, #0]
 8026cd0:	07da      	lsls	r2, r3, #31
 8026cd2:	d439      	bmi.n	8026d48 <_printf_float+0x370>
 8026cd4:	9a08      	ldr	r2, [sp, #32]
 8026cd6:	9b04      	ldr	r3, [sp, #16]
 8026cd8:	9907      	ldr	r1, [sp, #28]
 8026cda:	1ad3      	subs	r3, r2, r3
 8026cdc:	eba2 0901 	sub.w	r9, r2, r1
 8026ce0:	4599      	cmp	r9, r3
 8026ce2:	bfa8      	it	ge
 8026ce4:	4699      	movge	r9, r3
 8026ce6:	f1b9 0f00 	cmp.w	r9, #0
 8026cea:	dc35      	bgt.n	8026d58 <_printf_float+0x380>
 8026cec:	f04f 0800 	mov.w	r8, #0
 8026cf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026cf4:	f104 0a1a 	add.w	sl, r4, #26
 8026cf8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026cfc:	1a9b      	subs	r3, r3, r2
 8026cfe:	eba3 0309 	sub.w	r3, r3, r9
 8026d02:	4543      	cmp	r3, r8
 8026d04:	f77f af75 	ble.w	8026bf2 <_printf_float+0x21a>
 8026d08:	2301      	movs	r3, #1
 8026d0a:	4652      	mov	r2, sl
 8026d0c:	4631      	mov	r1, r6
 8026d0e:	4628      	mov	r0, r5
 8026d10:	47b8      	blx	r7
 8026d12:	3001      	adds	r0, #1
 8026d14:	f43f aeae 	beq.w	8026a74 <_printf_float+0x9c>
 8026d18:	f108 0801 	add.w	r8, r8, #1
 8026d1c:	e7ec      	b.n	8026cf8 <_printf_float+0x320>
 8026d1e:	4613      	mov	r3, r2
 8026d20:	4631      	mov	r1, r6
 8026d22:	4642      	mov	r2, r8
 8026d24:	4628      	mov	r0, r5
 8026d26:	47b8      	blx	r7
 8026d28:	3001      	adds	r0, #1
 8026d2a:	d1bf      	bne.n	8026cac <_printf_float+0x2d4>
 8026d2c:	e6a2      	b.n	8026a74 <_printf_float+0x9c>
 8026d2e:	2301      	movs	r3, #1
 8026d30:	4631      	mov	r1, r6
 8026d32:	4628      	mov	r0, r5
 8026d34:	9204      	str	r2, [sp, #16]
 8026d36:	47b8      	blx	r7
 8026d38:	3001      	adds	r0, #1
 8026d3a:	f43f ae9b 	beq.w	8026a74 <_printf_float+0x9c>
 8026d3e:	9b05      	ldr	r3, [sp, #20]
 8026d40:	9a04      	ldr	r2, [sp, #16]
 8026d42:	3301      	adds	r3, #1
 8026d44:	9305      	str	r3, [sp, #20]
 8026d46:	e7b7      	b.n	8026cb8 <_printf_float+0x2e0>
 8026d48:	4653      	mov	r3, sl
 8026d4a:	465a      	mov	r2, fp
 8026d4c:	4631      	mov	r1, r6
 8026d4e:	4628      	mov	r0, r5
 8026d50:	47b8      	blx	r7
 8026d52:	3001      	adds	r0, #1
 8026d54:	d1be      	bne.n	8026cd4 <_printf_float+0x2fc>
 8026d56:	e68d      	b.n	8026a74 <_printf_float+0x9c>
 8026d58:	9a04      	ldr	r2, [sp, #16]
 8026d5a:	464b      	mov	r3, r9
 8026d5c:	4442      	add	r2, r8
 8026d5e:	4631      	mov	r1, r6
 8026d60:	4628      	mov	r0, r5
 8026d62:	47b8      	blx	r7
 8026d64:	3001      	adds	r0, #1
 8026d66:	d1c1      	bne.n	8026cec <_printf_float+0x314>
 8026d68:	e684      	b.n	8026a74 <_printf_float+0x9c>
 8026d6a:	9a08      	ldr	r2, [sp, #32]
 8026d6c:	2a01      	cmp	r2, #1
 8026d6e:	dc01      	bgt.n	8026d74 <_printf_float+0x39c>
 8026d70:	07db      	lsls	r3, r3, #31
 8026d72:	d537      	bpl.n	8026de4 <_printf_float+0x40c>
 8026d74:	2301      	movs	r3, #1
 8026d76:	4642      	mov	r2, r8
 8026d78:	4631      	mov	r1, r6
 8026d7a:	4628      	mov	r0, r5
 8026d7c:	47b8      	blx	r7
 8026d7e:	3001      	adds	r0, #1
 8026d80:	f43f ae78 	beq.w	8026a74 <_printf_float+0x9c>
 8026d84:	4653      	mov	r3, sl
 8026d86:	465a      	mov	r2, fp
 8026d88:	4631      	mov	r1, r6
 8026d8a:	4628      	mov	r0, r5
 8026d8c:	47b8      	blx	r7
 8026d8e:	3001      	adds	r0, #1
 8026d90:	f43f ae70 	beq.w	8026a74 <_printf_float+0x9c>
 8026d94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026d98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026da0:	d01b      	beq.n	8026dda <_printf_float+0x402>
 8026da2:	9b08      	ldr	r3, [sp, #32]
 8026da4:	f108 0201 	add.w	r2, r8, #1
 8026da8:	3b01      	subs	r3, #1
 8026daa:	4631      	mov	r1, r6
 8026dac:	4628      	mov	r0, r5
 8026dae:	47b8      	blx	r7
 8026db0:	3001      	adds	r0, #1
 8026db2:	d10e      	bne.n	8026dd2 <_printf_float+0x3fa>
 8026db4:	e65e      	b.n	8026a74 <_printf_float+0x9c>
 8026db6:	2301      	movs	r3, #1
 8026db8:	464a      	mov	r2, r9
 8026dba:	4631      	mov	r1, r6
 8026dbc:	4628      	mov	r0, r5
 8026dbe:	47b8      	blx	r7
 8026dc0:	3001      	adds	r0, #1
 8026dc2:	f43f ae57 	beq.w	8026a74 <_printf_float+0x9c>
 8026dc6:	f108 0801 	add.w	r8, r8, #1
 8026dca:	9b08      	ldr	r3, [sp, #32]
 8026dcc:	3b01      	subs	r3, #1
 8026dce:	4543      	cmp	r3, r8
 8026dd0:	dcf1      	bgt.n	8026db6 <_printf_float+0x3de>
 8026dd2:	9b04      	ldr	r3, [sp, #16]
 8026dd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8026dd8:	e6db      	b.n	8026b92 <_printf_float+0x1ba>
 8026dda:	f04f 0800 	mov.w	r8, #0
 8026dde:	f104 091a 	add.w	r9, r4, #26
 8026de2:	e7f2      	b.n	8026dca <_printf_float+0x3f2>
 8026de4:	2301      	movs	r3, #1
 8026de6:	4642      	mov	r2, r8
 8026de8:	e7df      	b.n	8026daa <_printf_float+0x3d2>
 8026dea:	2301      	movs	r3, #1
 8026dec:	464a      	mov	r2, r9
 8026dee:	4631      	mov	r1, r6
 8026df0:	4628      	mov	r0, r5
 8026df2:	47b8      	blx	r7
 8026df4:	3001      	adds	r0, #1
 8026df6:	f43f ae3d 	beq.w	8026a74 <_printf_float+0x9c>
 8026dfa:	f108 0801 	add.w	r8, r8, #1
 8026dfe:	68e3      	ldr	r3, [r4, #12]
 8026e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026e02:	1a5b      	subs	r3, r3, r1
 8026e04:	4543      	cmp	r3, r8
 8026e06:	dcf0      	bgt.n	8026dea <_printf_float+0x412>
 8026e08:	e6f7      	b.n	8026bfa <_printf_float+0x222>
 8026e0a:	f04f 0800 	mov.w	r8, #0
 8026e0e:	f104 0919 	add.w	r9, r4, #25
 8026e12:	e7f4      	b.n	8026dfe <_printf_float+0x426>

08026e14 <_printf_common>:
 8026e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e18:	4616      	mov	r6, r2
 8026e1a:	4699      	mov	r9, r3
 8026e1c:	688a      	ldr	r2, [r1, #8]
 8026e1e:	690b      	ldr	r3, [r1, #16]
 8026e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026e24:	4293      	cmp	r3, r2
 8026e26:	bfb8      	it	lt
 8026e28:	4613      	movlt	r3, r2
 8026e2a:	6033      	str	r3, [r6, #0]
 8026e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026e30:	4607      	mov	r7, r0
 8026e32:	460c      	mov	r4, r1
 8026e34:	b10a      	cbz	r2, 8026e3a <_printf_common+0x26>
 8026e36:	3301      	adds	r3, #1
 8026e38:	6033      	str	r3, [r6, #0]
 8026e3a:	6823      	ldr	r3, [r4, #0]
 8026e3c:	0699      	lsls	r1, r3, #26
 8026e3e:	bf42      	ittt	mi
 8026e40:	6833      	ldrmi	r3, [r6, #0]
 8026e42:	3302      	addmi	r3, #2
 8026e44:	6033      	strmi	r3, [r6, #0]
 8026e46:	6825      	ldr	r5, [r4, #0]
 8026e48:	f015 0506 	ands.w	r5, r5, #6
 8026e4c:	d106      	bne.n	8026e5c <_printf_common+0x48>
 8026e4e:	f104 0a19 	add.w	sl, r4, #25
 8026e52:	68e3      	ldr	r3, [r4, #12]
 8026e54:	6832      	ldr	r2, [r6, #0]
 8026e56:	1a9b      	subs	r3, r3, r2
 8026e58:	42ab      	cmp	r3, r5
 8026e5a:	dc26      	bgt.n	8026eaa <_printf_common+0x96>
 8026e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026e60:	1e13      	subs	r3, r2, #0
 8026e62:	6822      	ldr	r2, [r4, #0]
 8026e64:	bf18      	it	ne
 8026e66:	2301      	movne	r3, #1
 8026e68:	0692      	lsls	r2, r2, #26
 8026e6a:	d42b      	bmi.n	8026ec4 <_printf_common+0xb0>
 8026e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026e70:	4649      	mov	r1, r9
 8026e72:	4638      	mov	r0, r7
 8026e74:	47c0      	blx	r8
 8026e76:	3001      	adds	r0, #1
 8026e78:	d01e      	beq.n	8026eb8 <_printf_common+0xa4>
 8026e7a:	6823      	ldr	r3, [r4, #0]
 8026e7c:	68e5      	ldr	r5, [r4, #12]
 8026e7e:	6832      	ldr	r2, [r6, #0]
 8026e80:	f003 0306 	and.w	r3, r3, #6
 8026e84:	2b04      	cmp	r3, #4
 8026e86:	bf08      	it	eq
 8026e88:	1aad      	subeq	r5, r5, r2
 8026e8a:	68a3      	ldr	r3, [r4, #8]
 8026e8c:	6922      	ldr	r2, [r4, #16]
 8026e8e:	bf0c      	ite	eq
 8026e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026e94:	2500      	movne	r5, #0
 8026e96:	4293      	cmp	r3, r2
 8026e98:	bfc4      	itt	gt
 8026e9a:	1a9b      	subgt	r3, r3, r2
 8026e9c:	18ed      	addgt	r5, r5, r3
 8026e9e:	2600      	movs	r6, #0
 8026ea0:	341a      	adds	r4, #26
 8026ea2:	42b5      	cmp	r5, r6
 8026ea4:	d11a      	bne.n	8026edc <_printf_common+0xc8>
 8026ea6:	2000      	movs	r0, #0
 8026ea8:	e008      	b.n	8026ebc <_printf_common+0xa8>
 8026eaa:	2301      	movs	r3, #1
 8026eac:	4652      	mov	r2, sl
 8026eae:	4649      	mov	r1, r9
 8026eb0:	4638      	mov	r0, r7
 8026eb2:	47c0      	blx	r8
 8026eb4:	3001      	adds	r0, #1
 8026eb6:	d103      	bne.n	8026ec0 <_printf_common+0xac>
 8026eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8026ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ec0:	3501      	adds	r5, #1
 8026ec2:	e7c6      	b.n	8026e52 <_printf_common+0x3e>
 8026ec4:	18e1      	adds	r1, r4, r3
 8026ec6:	1c5a      	adds	r2, r3, #1
 8026ec8:	2030      	movs	r0, #48	; 0x30
 8026eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026ece:	4422      	add	r2, r4
 8026ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026ed8:	3302      	adds	r3, #2
 8026eda:	e7c7      	b.n	8026e6c <_printf_common+0x58>
 8026edc:	2301      	movs	r3, #1
 8026ede:	4622      	mov	r2, r4
 8026ee0:	4649      	mov	r1, r9
 8026ee2:	4638      	mov	r0, r7
 8026ee4:	47c0      	blx	r8
 8026ee6:	3001      	adds	r0, #1
 8026ee8:	d0e6      	beq.n	8026eb8 <_printf_common+0xa4>
 8026eea:	3601      	adds	r6, #1
 8026eec:	e7d9      	b.n	8026ea2 <_printf_common+0x8e>
	...

08026ef0 <_printf_i>:
 8026ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026ef4:	460c      	mov	r4, r1
 8026ef6:	4691      	mov	r9, r2
 8026ef8:	7e27      	ldrb	r7, [r4, #24]
 8026efa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026efc:	2f78      	cmp	r7, #120	; 0x78
 8026efe:	4680      	mov	r8, r0
 8026f00:	469a      	mov	sl, r3
 8026f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026f06:	d807      	bhi.n	8026f18 <_printf_i+0x28>
 8026f08:	2f62      	cmp	r7, #98	; 0x62
 8026f0a:	d80a      	bhi.n	8026f22 <_printf_i+0x32>
 8026f0c:	2f00      	cmp	r7, #0
 8026f0e:	f000 80d8 	beq.w	80270c2 <_printf_i+0x1d2>
 8026f12:	2f58      	cmp	r7, #88	; 0x58
 8026f14:	f000 80a3 	beq.w	802705e <_printf_i+0x16e>
 8026f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026f20:	e03a      	b.n	8026f98 <_printf_i+0xa8>
 8026f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026f26:	2b15      	cmp	r3, #21
 8026f28:	d8f6      	bhi.n	8026f18 <_printf_i+0x28>
 8026f2a:	a001      	add	r0, pc, #4	; (adr r0, 8026f30 <_printf_i+0x40>)
 8026f2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8026f30:	08026f89 	.word	0x08026f89
 8026f34:	08026f9d 	.word	0x08026f9d
 8026f38:	08026f19 	.word	0x08026f19
 8026f3c:	08026f19 	.word	0x08026f19
 8026f40:	08026f19 	.word	0x08026f19
 8026f44:	08026f19 	.word	0x08026f19
 8026f48:	08026f9d 	.word	0x08026f9d
 8026f4c:	08026f19 	.word	0x08026f19
 8026f50:	08026f19 	.word	0x08026f19
 8026f54:	08026f19 	.word	0x08026f19
 8026f58:	08026f19 	.word	0x08026f19
 8026f5c:	080270a9 	.word	0x080270a9
 8026f60:	08026fcd 	.word	0x08026fcd
 8026f64:	0802708b 	.word	0x0802708b
 8026f68:	08026f19 	.word	0x08026f19
 8026f6c:	08026f19 	.word	0x08026f19
 8026f70:	080270cb 	.word	0x080270cb
 8026f74:	08026f19 	.word	0x08026f19
 8026f78:	08026fcd 	.word	0x08026fcd
 8026f7c:	08026f19 	.word	0x08026f19
 8026f80:	08026f19 	.word	0x08026f19
 8026f84:	08027093 	.word	0x08027093
 8026f88:	680b      	ldr	r3, [r1, #0]
 8026f8a:	1d1a      	adds	r2, r3, #4
 8026f8c:	681b      	ldr	r3, [r3, #0]
 8026f8e:	600a      	str	r2, [r1, #0]
 8026f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026f98:	2301      	movs	r3, #1
 8026f9a:	e0a3      	b.n	80270e4 <_printf_i+0x1f4>
 8026f9c:	6825      	ldr	r5, [r4, #0]
 8026f9e:	6808      	ldr	r0, [r1, #0]
 8026fa0:	062e      	lsls	r6, r5, #24
 8026fa2:	f100 0304 	add.w	r3, r0, #4
 8026fa6:	d50a      	bpl.n	8026fbe <_printf_i+0xce>
 8026fa8:	6805      	ldr	r5, [r0, #0]
 8026faa:	600b      	str	r3, [r1, #0]
 8026fac:	2d00      	cmp	r5, #0
 8026fae:	da03      	bge.n	8026fb8 <_printf_i+0xc8>
 8026fb0:	232d      	movs	r3, #45	; 0x2d
 8026fb2:	426d      	negs	r5, r5
 8026fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026fb8:	485e      	ldr	r0, [pc, #376]	; (8027134 <_printf_i+0x244>)
 8026fba:	230a      	movs	r3, #10
 8026fbc:	e019      	b.n	8026ff2 <_printf_i+0x102>
 8026fbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026fc2:	6805      	ldr	r5, [r0, #0]
 8026fc4:	600b      	str	r3, [r1, #0]
 8026fc6:	bf18      	it	ne
 8026fc8:	b22d      	sxthne	r5, r5
 8026fca:	e7ef      	b.n	8026fac <_printf_i+0xbc>
 8026fcc:	680b      	ldr	r3, [r1, #0]
 8026fce:	6825      	ldr	r5, [r4, #0]
 8026fd0:	1d18      	adds	r0, r3, #4
 8026fd2:	6008      	str	r0, [r1, #0]
 8026fd4:	0628      	lsls	r0, r5, #24
 8026fd6:	d501      	bpl.n	8026fdc <_printf_i+0xec>
 8026fd8:	681d      	ldr	r5, [r3, #0]
 8026fda:	e002      	b.n	8026fe2 <_printf_i+0xf2>
 8026fdc:	0669      	lsls	r1, r5, #25
 8026fde:	d5fb      	bpl.n	8026fd8 <_printf_i+0xe8>
 8026fe0:	881d      	ldrh	r5, [r3, #0]
 8026fe2:	4854      	ldr	r0, [pc, #336]	; (8027134 <_printf_i+0x244>)
 8026fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8026fe6:	bf0c      	ite	eq
 8026fe8:	2308      	moveq	r3, #8
 8026fea:	230a      	movne	r3, #10
 8026fec:	2100      	movs	r1, #0
 8026fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026ff2:	6866      	ldr	r6, [r4, #4]
 8026ff4:	60a6      	str	r6, [r4, #8]
 8026ff6:	2e00      	cmp	r6, #0
 8026ff8:	bfa2      	ittt	ge
 8026ffa:	6821      	ldrge	r1, [r4, #0]
 8026ffc:	f021 0104 	bicge.w	r1, r1, #4
 8027000:	6021      	strge	r1, [r4, #0]
 8027002:	b90d      	cbnz	r5, 8027008 <_printf_i+0x118>
 8027004:	2e00      	cmp	r6, #0
 8027006:	d04d      	beq.n	80270a4 <_printf_i+0x1b4>
 8027008:	4616      	mov	r6, r2
 802700a:	fbb5 f1f3 	udiv	r1, r5, r3
 802700e:	fb03 5711 	mls	r7, r3, r1, r5
 8027012:	5dc7      	ldrb	r7, [r0, r7]
 8027014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027018:	462f      	mov	r7, r5
 802701a:	42bb      	cmp	r3, r7
 802701c:	460d      	mov	r5, r1
 802701e:	d9f4      	bls.n	802700a <_printf_i+0x11a>
 8027020:	2b08      	cmp	r3, #8
 8027022:	d10b      	bne.n	802703c <_printf_i+0x14c>
 8027024:	6823      	ldr	r3, [r4, #0]
 8027026:	07df      	lsls	r7, r3, #31
 8027028:	d508      	bpl.n	802703c <_printf_i+0x14c>
 802702a:	6923      	ldr	r3, [r4, #16]
 802702c:	6861      	ldr	r1, [r4, #4]
 802702e:	4299      	cmp	r1, r3
 8027030:	bfde      	ittt	le
 8027032:	2330      	movle	r3, #48	; 0x30
 8027034:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027038:	f106 36ff 	addle.w	r6, r6, #4294967295
 802703c:	1b92      	subs	r2, r2, r6
 802703e:	6122      	str	r2, [r4, #16]
 8027040:	f8cd a000 	str.w	sl, [sp]
 8027044:	464b      	mov	r3, r9
 8027046:	aa03      	add	r2, sp, #12
 8027048:	4621      	mov	r1, r4
 802704a:	4640      	mov	r0, r8
 802704c:	f7ff fee2 	bl	8026e14 <_printf_common>
 8027050:	3001      	adds	r0, #1
 8027052:	d14c      	bne.n	80270ee <_printf_i+0x1fe>
 8027054:	f04f 30ff 	mov.w	r0, #4294967295
 8027058:	b004      	add	sp, #16
 802705a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802705e:	4835      	ldr	r0, [pc, #212]	; (8027134 <_printf_i+0x244>)
 8027060:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8027064:	6823      	ldr	r3, [r4, #0]
 8027066:	680e      	ldr	r6, [r1, #0]
 8027068:	061f      	lsls	r7, r3, #24
 802706a:	f856 5b04 	ldr.w	r5, [r6], #4
 802706e:	600e      	str	r6, [r1, #0]
 8027070:	d514      	bpl.n	802709c <_printf_i+0x1ac>
 8027072:	07d9      	lsls	r1, r3, #31
 8027074:	bf44      	itt	mi
 8027076:	f043 0320 	orrmi.w	r3, r3, #32
 802707a:	6023      	strmi	r3, [r4, #0]
 802707c:	b91d      	cbnz	r5, 8027086 <_printf_i+0x196>
 802707e:	6823      	ldr	r3, [r4, #0]
 8027080:	f023 0320 	bic.w	r3, r3, #32
 8027084:	6023      	str	r3, [r4, #0]
 8027086:	2310      	movs	r3, #16
 8027088:	e7b0      	b.n	8026fec <_printf_i+0xfc>
 802708a:	6823      	ldr	r3, [r4, #0]
 802708c:	f043 0320 	orr.w	r3, r3, #32
 8027090:	6023      	str	r3, [r4, #0]
 8027092:	2378      	movs	r3, #120	; 0x78
 8027094:	4828      	ldr	r0, [pc, #160]	; (8027138 <_printf_i+0x248>)
 8027096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802709a:	e7e3      	b.n	8027064 <_printf_i+0x174>
 802709c:	065e      	lsls	r6, r3, #25
 802709e:	bf48      	it	mi
 80270a0:	b2ad      	uxthmi	r5, r5
 80270a2:	e7e6      	b.n	8027072 <_printf_i+0x182>
 80270a4:	4616      	mov	r6, r2
 80270a6:	e7bb      	b.n	8027020 <_printf_i+0x130>
 80270a8:	680b      	ldr	r3, [r1, #0]
 80270aa:	6826      	ldr	r6, [r4, #0]
 80270ac:	6960      	ldr	r0, [r4, #20]
 80270ae:	1d1d      	adds	r5, r3, #4
 80270b0:	600d      	str	r5, [r1, #0]
 80270b2:	0635      	lsls	r5, r6, #24
 80270b4:	681b      	ldr	r3, [r3, #0]
 80270b6:	d501      	bpl.n	80270bc <_printf_i+0x1cc>
 80270b8:	6018      	str	r0, [r3, #0]
 80270ba:	e002      	b.n	80270c2 <_printf_i+0x1d2>
 80270bc:	0671      	lsls	r1, r6, #25
 80270be:	d5fb      	bpl.n	80270b8 <_printf_i+0x1c8>
 80270c0:	8018      	strh	r0, [r3, #0]
 80270c2:	2300      	movs	r3, #0
 80270c4:	6123      	str	r3, [r4, #16]
 80270c6:	4616      	mov	r6, r2
 80270c8:	e7ba      	b.n	8027040 <_printf_i+0x150>
 80270ca:	680b      	ldr	r3, [r1, #0]
 80270cc:	1d1a      	adds	r2, r3, #4
 80270ce:	600a      	str	r2, [r1, #0]
 80270d0:	681e      	ldr	r6, [r3, #0]
 80270d2:	6862      	ldr	r2, [r4, #4]
 80270d4:	2100      	movs	r1, #0
 80270d6:	4630      	mov	r0, r6
 80270d8:	f7d9 f922 	bl	8000320 <memchr>
 80270dc:	b108      	cbz	r0, 80270e2 <_printf_i+0x1f2>
 80270de:	1b80      	subs	r0, r0, r6
 80270e0:	6060      	str	r0, [r4, #4]
 80270e2:	6863      	ldr	r3, [r4, #4]
 80270e4:	6123      	str	r3, [r4, #16]
 80270e6:	2300      	movs	r3, #0
 80270e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80270ec:	e7a8      	b.n	8027040 <_printf_i+0x150>
 80270ee:	6923      	ldr	r3, [r4, #16]
 80270f0:	4632      	mov	r2, r6
 80270f2:	4649      	mov	r1, r9
 80270f4:	4640      	mov	r0, r8
 80270f6:	47d0      	blx	sl
 80270f8:	3001      	adds	r0, #1
 80270fa:	d0ab      	beq.n	8027054 <_printf_i+0x164>
 80270fc:	6823      	ldr	r3, [r4, #0]
 80270fe:	079b      	lsls	r3, r3, #30
 8027100:	d413      	bmi.n	802712a <_printf_i+0x23a>
 8027102:	68e0      	ldr	r0, [r4, #12]
 8027104:	9b03      	ldr	r3, [sp, #12]
 8027106:	4298      	cmp	r0, r3
 8027108:	bfb8      	it	lt
 802710a:	4618      	movlt	r0, r3
 802710c:	e7a4      	b.n	8027058 <_printf_i+0x168>
 802710e:	2301      	movs	r3, #1
 8027110:	4632      	mov	r2, r6
 8027112:	4649      	mov	r1, r9
 8027114:	4640      	mov	r0, r8
 8027116:	47d0      	blx	sl
 8027118:	3001      	adds	r0, #1
 802711a:	d09b      	beq.n	8027054 <_printf_i+0x164>
 802711c:	3501      	adds	r5, #1
 802711e:	68e3      	ldr	r3, [r4, #12]
 8027120:	9903      	ldr	r1, [sp, #12]
 8027122:	1a5b      	subs	r3, r3, r1
 8027124:	42ab      	cmp	r3, r5
 8027126:	dcf2      	bgt.n	802710e <_printf_i+0x21e>
 8027128:	e7eb      	b.n	8027102 <_printf_i+0x212>
 802712a:	2500      	movs	r5, #0
 802712c:	f104 0619 	add.w	r6, r4, #25
 8027130:	e7f5      	b.n	802711e <_printf_i+0x22e>
 8027132:	bf00      	nop
 8027134:	0802b52a 	.word	0x0802b52a
 8027138:	0802b53b 	.word	0x0802b53b

0802713c <swapfunc>:
 802713c:	2b02      	cmp	r3, #2
 802713e:	b510      	push	{r4, lr}
 8027140:	d00a      	beq.n	8027158 <swapfunc+0x1c>
 8027142:	0892      	lsrs	r2, r2, #2
 8027144:	3a01      	subs	r2, #1
 8027146:	6803      	ldr	r3, [r0, #0]
 8027148:	680c      	ldr	r4, [r1, #0]
 802714a:	f840 4b04 	str.w	r4, [r0], #4
 802714e:	2a00      	cmp	r2, #0
 8027150:	f841 3b04 	str.w	r3, [r1], #4
 8027154:	dcf6      	bgt.n	8027144 <swapfunc+0x8>
 8027156:	bd10      	pop	{r4, pc}
 8027158:	4402      	add	r2, r0
 802715a:	780c      	ldrb	r4, [r1, #0]
 802715c:	7803      	ldrb	r3, [r0, #0]
 802715e:	f800 4b01 	strb.w	r4, [r0], #1
 8027162:	f801 3b01 	strb.w	r3, [r1], #1
 8027166:	1a13      	subs	r3, r2, r0
 8027168:	2b00      	cmp	r3, #0
 802716a:	dcf6      	bgt.n	802715a <swapfunc+0x1e>
 802716c:	e7f3      	b.n	8027156 <swapfunc+0x1a>

0802716e <med3.isra.0>:
 802716e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027170:	460f      	mov	r7, r1
 8027172:	4614      	mov	r4, r2
 8027174:	4606      	mov	r6, r0
 8027176:	461d      	mov	r5, r3
 8027178:	4798      	blx	r3
 802717a:	2800      	cmp	r0, #0
 802717c:	4621      	mov	r1, r4
 802717e:	4638      	mov	r0, r7
 8027180:	da0c      	bge.n	802719c <med3.isra.0+0x2e>
 8027182:	47a8      	blx	r5
 8027184:	2800      	cmp	r0, #0
 8027186:	da02      	bge.n	802718e <med3.isra.0+0x20>
 8027188:	463c      	mov	r4, r7
 802718a:	4620      	mov	r0, r4
 802718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802718e:	4621      	mov	r1, r4
 8027190:	4630      	mov	r0, r6
 8027192:	47a8      	blx	r5
 8027194:	2800      	cmp	r0, #0
 8027196:	dbf8      	blt.n	802718a <med3.isra.0+0x1c>
 8027198:	4634      	mov	r4, r6
 802719a:	e7f6      	b.n	802718a <med3.isra.0+0x1c>
 802719c:	47a8      	blx	r5
 802719e:	2800      	cmp	r0, #0
 80271a0:	dcf2      	bgt.n	8027188 <med3.isra.0+0x1a>
 80271a2:	4621      	mov	r1, r4
 80271a4:	4630      	mov	r0, r6
 80271a6:	47a8      	blx	r5
 80271a8:	2800      	cmp	r0, #0
 80271aa:	daee      	bge.n	802718a <med3.isra.0+0x1c>
 80271ac:	e7f4      	b.n	8027198 <med3.isra.0+0x2a>

080271ae <qsort>:
 80271ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271b2:	469a      	mov	sl, r3
 80271b4:	ea40 0302 	orr.w	r3, r0, r2
 80271b8:	079b      	lsls	r3, r3, #30
 80271ba:	b097      	sub	sp, #92	; 0x5c
 80271bc:	4606      	mov	r6, r0
 80271be:	4614      	mov	r4, r2
 80271c0:	d11a      	bne.n	80271f8 <qsort+0x4a>
 80271c2:	f1b2 0804 	subs.w	r8, r2, #4
 80271c6:	bf18      	it	ne
 80271c8:	f04f 0801 	movne.w	r8, #1
 80271cc:	2300      	movs	r3, #0
 80271ce:	9302      	str	r3, [sp, #8]
 80271d0:	1933      	adds	r3, r6, r4
 80271d2:	fb04 f701 	mul.w	r7, r4, r1
 80271d6:	9301      	str	r3, [sp, #4]
 80271d8:	2906      	cmp	r1, #6
 80271da:	eb06 0307 	add.w	r3, r6, r7
 80271de:	9303      	str	r3, [sp, #12]
 80271e0:	d82a      	bhi.n	8027238 <qsort+0x8a>
 80271e2:	9b01      	ldr	r3, [sp, #4]
 80271e4:	9a03      	ldr	r2, [sp, #12]
 80271e6:	4293      	cmp	r3, r2
 80271e8:	d310      	bcc.n	802720c <qsort+0x5e>
 80271ea:	9b02      	ldr	r3, [sp, #8]
 80271ec:	2b00      	cmp	r3, #0
 80271ee:	f040 811f 	bne.w	8027430 <qsort+0x282>
 80271f2:	b017      	add	sp, #92	; 0x5c
 80271f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271f8:	f04f 0802 	mov.w	r8, #2
 80271fc:	e7e6      	b.n	80271cc <qsort+0x1e>
 80271fe:	4643      	mov	r3, r8
 8027200:	4622      	mov	r2, r4
 8027202:	4639      	mov	r1, r7
 8027204:	4628      	mov	r0, r5
 8027206:	f7ff ff99 	bl	802713c <swapfunc>
 802720a:	e00e      	b.n	802722a <qsort+0x7c>
 802720c:	9d01      	ldr	r5, [sp, #4]
 802720e:	e00d      	b.n	802722c <qsort+0x7e>
 8027210:	1b2f      	subs	r7, r5, r4
 8027212:	4629      	mov	r1, r5
 8027214:	4638      	mov	r0, r7
 8027216:	47d0      	blx	sl
 8027218:	2800      	cmp	r0, #0
 802721a:	dd09      	ble.n	8027230 <qsort+0x82>
 802721c:	f1b8 0f00 	cmp.w	r8, #0
 8027220:	d1ed      	bne.n	80271fe <qsort+0x50>
 8027222:	682b      	ldr	r3, [r5, #0]
 8027224:	683a      	ldr	r2, [r7, #0]
 8027226:	602a      	str	r2, [r5, #0]
 8027228:	603b      	str	r3, [r7, #0]
 802722a:	463d      	mov	r5, r7
 802722c:	42ae      	cmp	r6, r5
 802722e:	d3ef      	bcc.n	8027210 <qsort+0x62>
 8027230:	9b01      	ldr	r3, [sp, #4]
 8027232:	4423      	add	r3, r4
 8027234:	9301      	str	r3, [sp, #4]
 8027236:	e7d4      	b.n	80271e2 <qsort+0x34>
 8027238:	ea4f 0951 	mov.w	r9, r1, lsr #1
 802723c:	1b3f      	subs	r7, r7, r4
 802723e:	2907      	cmp	r1, #7
 8027240:	fb04 6909 	mla	r9, r4, r9, r6
 8027244:	4437      	add	r7, r6
 8027246:	d022      	beq.n	802728e <qsort+0xe0>
 8027248:	2928      	cmp	r1, #40	; 0x28
 802724a:	d945      	bls.n	80272d8 <qsort+0x12a>
 802724c:	08c9      	lsrs	r1, r1, #3
 802724e:	fb04 f501 	mul.w	r5, r4, r1
 8027252:	4653      	mov	r3, sl
 8027254:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8027258:	1971      	adds	r1, r6, r5
 802725a:	4630      	mov	r0, r6
 802725c:	f7ff ff87 	bl	802716e <med3.isra.0>
 8027260:	4649      	mov	r1, r9
 8027262:	eb09 0205 	add.w	r2, r9, r5
 8027266:	4653      	mov	r3, sl
 8027268:	4683      	mov	fp, r0
 802726a:	1b48      	subs	r0, r1, r5
 802726c:	f7ff ff7f 	bl	802716e <med3.isra.0>
 8027270:	463a      	mov	r2, r7
 8027272:	4681      	mov	r9, r0
 8027274:	4653      	mov	r3, sl
 8027276:	1b79      	subs	r1, r7, r5
 8027278:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 802727c:	f7ff ff77 	bl	802716e <med3.isra.0>
 8027280:	4602      	mov	r2, r0
 8027282:	4649      	mov	r1, r9
 8027284:	4653      	mov	r3, sl
 8027286:	4658      	mov	r0, fp
 8027288:	f7ff ff71 	bl	802716e <med3.isra.0>
 802728c:	4681      	mov	r9, r0
 802728e:	f1b8 0f00 	cmp.w	r8, #0
 8027292:	d124      	bne.n	80272de <qsort+0x130>
 8027294:	6833      	ldr	r3, [r6, #0]
 8027296:	f8d9 2000 	ldr.w	r2, [r9]
 802729a:	6032      	str	r2, [r6, #0]
 802729c:	f8c9 3000 	str.w	r3, [r9]
 80272a0:	eb06 0b04 	add.w	fp, r6, r4
 80272a4:	46b9      	mov	r9, r7
 80272a6:	465d      	mov	r5, fp
 80272a8:	2300      	movs	r3, #0
 80272aa:	45bb      	cmp	fp, r7
 80272ac:	d835      	bhi.n	802731a <qsort+0x16c>
 80272ae:	4631      	mov	r1, r6
 80272b0:	4658      	mov	r0, fp
 80272b2:	9304      	str	r3, [sp, #16]
 80272b4:	47d0      	blx	sl
 80272b6:	2800      	cmp	r0, #0
 80272b8:	9b04      	ldr	r3, [sp, #16]
 80272ba:	dc3e      	bgt.n	802733a <qsort+0x18c>
 80272bc:	d10a      	bne.n	80272d4 <qsort+0x126>
 80272be:	f1b8 0f00 	cmp.w	r8, #0
 80272c2:	d113      	bne.n	80272ec <qsort+0x13e>
 80272c4:	682b      	ldr	r3, [r5, #0]
 80272c6:	f8db 2000 	ldr.w	r2, [fp]
 80272ca:	602a      	str	r2, [r5, #0]
 80272cc:	f8cb 3000 	str.w	r3, [fp]
 80272d0:	4425      	add	r5, r4
 80272d2:	2301      	movs	r3, #1
 80272d4:	44a3      	add	fp, r4
 80272d6:	e7e8      	b.n	80272aa <qsort+0xfc>
 80272d8:	463a      	mov	r2, r7
 80272da:	46b3      	mov	fp, r6
 80272dc:	e7d1      	b.n	8027282 <qsort+0xd4>
 80272de:	4643      	mov	r3, r8
 80272e0:	4622      	mov	r2, r4
 80272e2:	4649      	mov	r1, r9
 80272e4:	4630      	mov	r0, r6
 80272e6:	f7ff ff29 	bl	802713c <swapfunc>
 80272ea:	e7d9      	b.n	80272a0 <qsort+0xf2>
 80272ec:	4643      	mov	r3, r8
 80272ee:	4622      	mov	r2, r4
 80272f0:	4659      	mov	r1, fp
 80272f2:	4628      	mov	r0, r5
 80272f4:	f7ff ff22 	bl	802713c <swapfunc>
 80272f8:	e7ea      	b.n	80272d0 <qsort+0x122>
 80272fa:	d10b      	bne.n	8027314 <qsort+0x166>
 80272fc:	f1b8 0f00 	cmp.w	r8, #0
 8027300:	d114      	bne.n	802732c <qsort+0x17e>
 8027302:	683b      	ldr	r3, [r7, #0]
 8027304:	f8d9 2000 	ldr.w	r2, [r9]
 8027308:	603a      	str	r2, [r7, #0]
 802730a:	f8c9 3000 	str.w	r3, [r9]
 802730e:	eba9 0904 	sub.w	r9, r9, r4
 8027312:	2301      	movs	r3, #1
 8027314:	9f04      	ldr	r7, [sp, #16]
 8027316:	45bb      	cmp	fp, r7
 8027318:	d90f      	bls.n	802733a <qsort+0x18c>
 802731a:	2b00      	cmp	r3, #0
 802731c:	d143      	bne.n	80273a6 <qsort+0x1f8>
 802731e:	9b01      	ldr	r3, [sp, #4]
 8027320:	9a03      	ldr	r2, [sp, #12]
 8027322:	4293      	cmp	r3, r2
 8027324:	f4bf af61 	bcs.w	80271ea <qsort+0x3c>
 8027328:	9d01      	ldr	r5, [sp, #4]
 802732a:	e036      	b.n	802739a <qsort+0x1ec>
 802732c:	4643      	mov	r3, r8
 802732e:	4622      	mov	r2, r4
 8027330:	4649      	mov	r1, r9
 8027332:	4638      	mov	r0, r7
 8027334:	f7ff ff02 	bl	802713c <swapfunc>
 8027338:	e7e9      	b.n	802730e <qsort+0x160>
 802733a:	4631      	mov	r1, r6
 802733c:	4638      	mov	r0, r7
 802733e:	9305      	str	r3, [sp, #20]
 8027340:	47d0      	blx	sl
 8027342:	1b3b      	subs	r3, r7, r4
 8027344:	2800      	cmp	r0, #0
 8027346:	9304      	str	r3, [sp, #16]
 8027348:	9b05      	ldr	r3, [sp, #20]
 802734a:	dad6      	bge.n	80272fa <qsort+0x14c>
 802734c:	f1b8 0f00 	cmp.w	r8, #0
 8027350:	d006      	beq.n	8027360 <qsort+0x1b2>
 8027352:	4643      	mov	r3, r8
 8027354:	4622      	mov	r2, r4
 8027356:	4639      	mov	r1, r7
 8027358:	4658      	mov	r0, fp
 802735a:	f7ff feef 	bl	802713c <swapfunc>
 802735e:	e005      	b.n	802736c <qsort+0x1be>
 8027360:	f8db 3000 	ldr.w	r3, [fp]
 8027364:	683a      	ldr	r2, [r7, #0]
 8027366:	f8cb 2000 	str.w	r2, [fp]
 802736a:	603b      	str	r3, [r7, #0]
 802736c:	9f04      	ldr	r7, [sp, #16]
 802736e:	e7b0      	b.n	80272d2 <qsort+0x124>
 8027370:	4643      	mov	r3, r8
 8027372:	4622      	mov	r2, r4
 8027374:	4639      	mov	r1, r7
 8027376:	4628      	mov	r0, r5
 8027378:	f7ff fee0 	bl	802713c <swapfunc>
 802737c:	e00c      	b.n	8027398 <qsort+0x1ea>
 802737e:	1b2f      	subs	r7, r5, r4
 8027380:	4629      	mov	r1, r5
 8027382:	4638      	mov	r0, r7
 8027384:	47d0      	blx	sl
 8027386:	2800      	cmp	r0, #0
 8027388:	dd09      	ble.n	802739e <qsort+0x1f0>
 802738a:	f1b8 0f00 	cmp.w	r8, #0
 802738e:	d1ef      	bne.n	8027370 <qsort+0x1c2>
 8027390:	682b      	ldr	r3, [r5, #0]
 8027392:	683a      	ldr	r2, [r7, #0]
 8027394:	602a      	str	r2, [r5, #0]
 8027396:	603b      	str	r3, [r7, #0]
 8027398:	463d      	mov	r5, r7
 802739a:	42ae      	cmp	r6, r5
 802739c:	d3ef      	bcc.n	802737e <qsort+0x1d0>
 802739e:	9b01      	ldr	r3, [sp, #4]
 80273a0:	4423      	add	r3, r4
 80273a2:	9301      	str	r3, [sp, #4]
 80273a4:	e7bb      	b.n	802731e <qsort+0x170>
 80273a6:	ebab 0305 	sub.w	r3, fp, r5
 80273aa:	1baa      	subs	r2, r5, r6
 80273ac:	429a      	cmp	r2, r3
 80273ae:	bfa8      	it	ge
 80273b0:	461a      	movge	r2, r3
 80273b2:	9301      	str	r3, [sp, #4]
 80273b4:	b12a      	cbz	r2, 80273c2 <qsort+0x214>
 80273b6:	4643      	mov	r3, r8
 80273b8:	ebab 0102 	sub.w	r1, fp, r2
 80273bc:	4630      	mov	r0, r6
 80273be:	f7ff febd 	bl	802713c <swapfunc>
 80273c2:	9b03      	ldr	r3, [sp, #12]
 80273c4:	eba3 0209 	sub.w	r2, r3, r9
 80273c8:	eba9 0707 	sub.w	r7, r9, r7
 80273cc:	1b12      	subs	r2, r2, r4
 80273ce:	42ba      	cmp	r2, r7
 80273d0:	bf28      	it	cs
 80273d2:	463a      	movcs	r2, r7
 80273d4:	b12a      	cbz	r2, 80273e2 <qsort+0x234>
 80273d6:	9903      	ldr	r1, [sp, #12]
 80273d8:	4643      	mov	r3, r8
 80273da:	1a89      	subs	r1, r1, r2
 80273dc:	4658      	mov	r0, fp
 80273de:	f7ff fead 	bl	802713c <swapfunc>
 80273e2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80273e6:	9b03      	ldr	r3, [sp, #12]
 80273e8:	454f      	cmp	r7, r9
 80273ea:	eba3 0007 	sub.w	r0, r3, r7
 80273ee:	d904      	bls.n	80273fa <qsort+0x24c>
 80273f0:	4633      	mov	r3, r6
 80273f2:	46b9      	mov	r9, r7
 80273f4:	9f01      	ldr	r7, [sp, #4]
 80273f6:	4606      	mov	r6, r0
 80273f8:	4618      	mov	r0, r3
 80273fa:	42a7      	cmp	r7, r4
 80273fc:	d921      	bls.n	8027442 <qsort+0x294>
 80273fe:	fbb7 f1f4 	udiv	r1, r7, r4
 8027402:	9b02      	ldr	r3, [sp, #8]
 8027404:	2b07      	cmp	r3, #7
 8027406:	d80d      	bhi.n	8027424 <qsort+0x276>
 8027408:	fbb9 f7f4 	udiv	r7, r9, r4
 802740c:	aa16      	add	r2, sp, #88	; 0x58
 802740e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8027412:	f843 6c40 	str.w	r6, [r3, #-64]
 8027416:	f843 7c3c 	str.w	r7, [r3, #-60]
 802741a:	9b02      	ldr	r3, [sp, #8]
 802741c:	3301      	adds	r3, #1
 802741e:	9302      	str	r3, [sp, #8]
 8027420:	4606      	mov	r6, r0
 8027422:	e6d5      	b.n	80271d0 <qsort+0x22>
 8027424:	4653      	mov	r3, sl
 8027426:	4622      	mov	r2, r4
 8027428:	f7ff fec1 	bl	80271ae <qsort>
 802742c:	45a1      	cmp	r9, r4
 802742e:	d80b      	bhi.n	8027448 <qsort+0x29a>
 8027430:	9b02      	ldr	r3, [sp, #8]
 8027432:	aa16      	add	r2, sp, #88	; 0x58
 8027434:	3b01      	subs	r3, #1
 8027436:	9302      	str	r3, [sp, #8]
 8027438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802743c:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8027440:	e7ee      	b.n	8027420 <qsort+0x272>
 8027442:	45a1      	cmp	r9, r4
 8027444:	f67f aed1 	bls.w	80271ea <qsort+0x3c>
 8027448:	fbb9 f1f4 	udiv	r1, r9, r4
 802744c:	4630      	mov	r0, r6
 802744e:	e7e7      	b.n	8027420 <qsort+0x272>

08027450 <_sbrk_r>:
 8027450:	b538      	push	{r3, r4, r5, lr}
 8027452:	4d06      	ldr	r5, [pc, #24]	; (802746c <_sbrk_r+0x1c>)
 8027454:	2300      	movs	r3, #0
 8027456:	4604      	mov	r4, r0
 8027458:	4608      	mov	r0, r1
 802745a:	602b      	str	r3, [r5, #0]
 802745c:	f7e6 f962 	bl	800d724 <_sbrk>
 8027460:	1c43      	adds	r3, r0, #1
 8027462:	d102      	bne.n	802746a <_sbrk_r+0x1a>
 8027464:	682b      	ldr	r3, [r5, #0]
 8027466:	b103      	cbz	r3, 802746a <_sbrk_r+0x1a>
 8027468:	6023      	str	r3, [r4, #0]
 802746a:	bd38      	pop	{r3, r4, r5, pc}
 802746c:	24006030 	.word	0x24006030

08027470 <strcat>:
 8027470:	b510      	push	{r4, lr}
 8027472:	4602      	mov	r2, r0
 8027474:	7814      	ldrb	r4, [r2, #0]
 8027476:	4613      	mov	r3, r2
 8027478:	3201      	adds	r2, #1
 802747a:	2c00      	cmp	r4, #0
 802747c:	d1fa      	bne.n	8027474 <strcat+0x4>
 802747e:	3b01      	subs	r3, #1
 8027480:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027484:	f803 2f01 	strb.w	r2, [r3, #1]!
 8027488:	2a00      	cmp	r2, #0
 802748a:	d1f9      	bne.n	8027480 <strcat+0x10>
 802748c:	bd10      	pop	{r4, pc}
	...

08027490 <_vsiprintf_r>:
 8027490:	b500      	push	{lr}
 8027492:	b09b      	sub	sp, #108	; 0x6c
 8027494:	9100      	str	r1, [sp, #0]
 8027496:	9104      	str	r1, [sp, #16]
 8027498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802749c:	9105      	str	r1, [sp, #20]
 802749e:	9102      	str	r1, [sp, #8]
 80274a0:	4905      	ldr	r1, [pc, #20]	; (80274b8 <_vsiprintf_r+0x28>)
 80274a2:	9103      	str	r1, [sp, #12]
 80274a4:	4669      	mov	r1, sp
 80274a6:	f001 fceb 	bl	8028e80 <_svfiprintf_r>
 80274aa:	9b00      	ldr	r3, [sp, #0]
 80274ac:	2200      	movs	r2, #0
 80274ae:	701a      	strb	r2, [r3, #0]
 80274b0:	b01b      	add	sp, #108	; 0x6c
 80274b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80274b6:	bf00      	nop
 80274b8:	ffff0208 	.word	0xffff0208

080274bc <vsiprintf>:
 80274bc:	4613      	mov	r3, r2
 80274be:	460a      	mov	r2, r1
 80274c0:	4601      	mov	r1, r0
 80274c2:	4802      	ldr	r0, [pc, #8]	; (80274cc <vsiprintf+0x10>)
 80274c4:	6800      	ldr	r0, [r0, #0]
 80274c6:	f7ff bfe3 	b.w	8027490 <_vsiprintf_r>
 80274ca:	bf00      	nop
 80274cc:	240002a4 	.word	0x240002a4

080274d0 <__swbuf_r>:
 80274d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80274d2:	460e      	mov	r6, r1
 80274d4:	4614      	mov	r4, r2
 80274d6:	4605      	mov	r5, r0
 80274d8:	b118      	cbz	r0, 80274e2 <__swbuf_r+0x12>
 80274da:	6983      	ldr	r3, [r0, #24]
 80274dc:	b90b      	cbnz	r3, 80274e2 <__swbuf_r+0x12>
 80274de:	f000 ffdf 	bl	80284a0 <__sinit>
 80274e2:	4b21      	ldr	r3, [pc, #132]	; (8027568 <__swbuf_r+0x98>)
 80274e4:	429c      	cmp	r4, r3
 80274e6:	d12b      	bne.n	8027540 <__swbuf_r+0x70>
 80274e8:	686c      	ldr	r4, [r5, #4]
 80274ea:	69a3      	ldr	r3, [r4, #24]
 80274ec:	60a3      	str	r3, [r4, #8]
 80274ee:	89a3      	ldrh	r3, [r4, #12]
 80274f0:	071a      	lsls	r2, r3, #28
 80274f2:	d52f      	bpl.n	8027554 <__swbuf_r+0x84>
 80274f4:	6923      	ldr	r3, [r4, #16]
 80274f6:	b36b      	cbz	r3, 8027554 <__swbuf_r+0x84>
 80274f8:	6923      	ldr	r3, [r4, #16]
 80274fa:	6820      	ldr	r0, [r4, #0]
 80274fc:	1ac0      	subs	r0, r0, r3
 80274fe:	6963      	ldr	r3, [r4, #20]
 8027500:	b2f6      	uxtb	r6, r6
 8027502:	4283      	cmp	r3, r0
 8027504:	4637      	mov	r7, r6
 8027506:	dc04      	bgt.n	8027512 <__swbuf_r+0x42>
 8027508:	4621      	mov	r1, r4
 802750a:	4628      	mov	r0, r5
 802750c:	f000 ff34 	bl	8028378 <_fflush_r>
 8027510:	bb30      	cbnz	r0, 8027560 <__swbuf_r+0x90>
 8027512:	68a3      	ldr	r3, [r4, #8]
 8027514:	3b01      	subs	r3, #1
 8027516:	60a3      	str	r3, [r4, #8]
 8027518:	6823      	ldr	r3, [r4, #0]
 802751a:	1c5a      	adds	r2, r3, #1
 802751c:	6022      	str	r2, [r4, #0]
 802751e:	701e      	strb	r6, [r3, #0]
 8027520:	6963      	ldr	r3, [r4, #20]
 8027522:	3001      	adds	r0, #1
 8027524:	4283      	cmp	r3, r0
 8027526:	d004      	beq.n	8027532 <__swbuf_r+0x62>
 8027528:	89a3      	ldrh	r3, [r4, #12]
 802752a:	07db      	lsls	r3, r3, #31
 802752c:	d506      	bpl.n	802753c <__swbuf_r+0x6c>
 802752e:	2e0a      	cmp	r6, #10
 8027530:	d104      	bne.n	802753c <__swbuf_r+0x6c>
 8027532:	4621      	mov	r1, r4
 8027534:	4628      	mov	r0, r5
 8027536:	f000 ff1f 	bl	8028378 <_fflush_r>
 802753a:	b988      	cbnz	r0, 8027560 <__swbuf_r+0x90>
 802753c:	4638      	mov	r0, r7
 802753e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027540:	4b0a      	ldr	r3, [pc, #40]	; (802756c <__swbuf_r+0x9c>)
 8027542:	429c      	cmp	r4, r3
 8027544:	d101      	bne.n	802754a <__swbuf_r+0x7a>
 8027546:	68ac      	ldr	r4, [r5, #8]
 8027548:	e7cf      	b.n	80274ea <__swbuf_r+0x1a>
 802754a:	4b09      	ldr	r3, [pc, #36]	; (8027570 <__swbuf_r+0xa0>)
 802754c:	429c      	cmp	r4, r3
 802754e:	bf08      	it	eq
 8027550:	68ec      	ldreq	r4, [r5, #12]
 8027552:	e7ca      	b.n	80274ea <__swbuf_r+0x1a>
 8027554:	4621      	mov	r1, r4
 8027556:	4628      	mov	r0, r5
 8027558:	f000 f80c 	bl	8027574 <__swsetup_r>
 802755c:	2800      	cmp	r0, #0
 802755e:	d0cb      	beq.n	80274f8 <__swbuf_r+0x28>
 8027560:	f04f 37ff 	mov.w	r7, #4294967295
 8027564:	e7ea      	b.n	802753c <__swbuf_r+0x6c>
 8027566:	bf00      	nop
 8027568:	0802b600 	.word	0x0802b600
 802756c:	0802b620 	.word	0x0802b620
 8027570:	0802b5e0 	.word	0x0802b5e0

08027574 <__swsetup_r>:
 8027574:	4b32      	ldr	r3, [pc, #200]	; (8027640 <__swsetup_r+0xcc>)
 8027576:	b570      	push	{r4, r5, r6, lr}
 8027578:	681d      	ldr	r5, [r3, #0]
 802757a:	4606      	mov	r6, r0
 802757c:	460c      	mov	r4, r1
 802757e:	b125      	cbz	r5, 802758a <__swsetup_r+0x16>
 8027580:	69ab      	ldr	r3, [r5, #24]
 8027582:	b913      	cbnz	r3, 802758a <__swsetup_r+0x16>
 8027584:	4628      	mov	r0, r5
 8027586:	f000 ff8b 	bl	80284a0 <__sinit>
 802758a:	4b2e      	ldr	r3, [pc, #184]	; (8027644 <__swsetup_r+0xd0>)
 802758c:	429c      	cmp	r4, r3
 802758e:	d10f      	bne.n	80275b0 <__swsetup_r+0x3c>
 8027590:	686c      	ldr	r4, [r5, #4]
 8027592:	89a3      	ldrh	r3, [r4, #12]
 8027594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027598:	0719      	lsls	r1, r3, #28
 802759a:	d42c      	bmi.n	80275f6 <__swsetup_r+0x82>
 802759c:	06dd      	lsls	r5, r3, #27
 802759e:	d411      	bmi.n	80275c4 <__swsetup_r+0x50>
 80275a0:	2309      	movs	r3, #9
 80275a2:	6033      	str	r3, [r6, #0]
 80275a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80275a8:	81a3      	strh	r3, [r4, #12]
 80275aa:	f04f 30ff 	mov.w	r0, #4294967295
 80275ae:	e03e      	b.n	802762e <__swsetup_r+0xba>
 80275b0:	4b25      	ldr	r3, [pc, #148]	; (8027648 <__swsetup_r+0xd4>)
 80275b2:	429c      	cmp	r4, r3
 80275b4:	d101      	bne.n	80275ba <__swsetup_r+0x46>
 80275b6:	68ac      	ldr	r4, [r5, #8]
 80275b8:	e7eb      	b.n	8027592 <__swsetup_r+0x1e>
 80275ba:	4b24      	ldr	r3, [pc, #144]	; (802764c <__swsetup_r+0xd8>)
 80275bc:	429c      	cmp	r4, r3
 80275be:	bf08      	it	eq
 80275c0:	68ec      	ldreq	r4, [r5, #12]
 80275c2:	e7e6      	b.n	8027592 <__swsetup_r+0x1e>
 80275c4:	0758      	lsls	r0, r3, #29
 80275c6:	d512      	bpl.n	80275ee <__swsetup_r+0x7a>
 80275c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80275ca:	b141      	cbz	r1, 80275de <__swsetup_r+0x6a>
 80275cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80275d0:	4299      	cmp	r1, r3
 80275d2:	d002      	beq.n	80275da <__swsetup_r+0x66>
 80275d4:	4630      	mov	r0, r6
 80275d6:	f7ff f8c5 	bl	8026764 <_free_r>
 80275da:	2300      	movs	r3, #0
 80275dc:	6363      	str	r3, [r4, #52]	; 0x34
 80275de:	89a3      	ldrh	r3, [r4, #12]
 80275e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80275e4:	81a3      	strh	r3, [r4, #12]
 80275e6:	2300      	movs	r3, #0
 80275e8:	6063      	str	r3, [r4, #4]
 80275ea:	6923      	ldr	r3, [r4, #16]
 80275ec:	6023      	str	r3, [r4, #0]
 80275ee:	89a3      	ldrh	r3, [r4, #12]
 80275f0:	f043 0308 	orr.w	r3, r3, #8
 80275f4:	81a3      	strh	r3, [r4, #12]
 80275f6:	6923      	ldr	r3, [r4, #16]
 80275f8:	b94b      	cbnz	r3, 802760e <__swsetup_r+0x9a>
 80275fa:	89a3      	ldrh	r3, [r4, #12]
 80275fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027604:	d003      	beq.n	802760e <__swsetup_r+0x9a>
 8027606:	4621      	mov	r1, r4
 8027608:	4630      	mov	r0, r6
 802760a:	f001 f813 	bl	8028634 <__smakebuf_r>
 802760e:	89a0      	ldrh	r0, [r4, #12]
 8027610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027614:	f010 0301 	ands.w	r3, r0, #1
 8027618:	d00a      	beq.n	8027630 <__swsetup_r+0xbc>
 802761a:	2300      	movs	r3, #0
 802761c:	60a3      	str	r3, [r4, #8]
 802761e:	6963      	ldr	r3, [r4, #20]
 8027620:	425b      	negs	r3, r3
 8027622:	61a3      	str	r3, [r4, #24]
 8027624:	6923      	ldr	r3, [r4, #16]
 8027626:	b943      	cbnz	r3, 802763a <__swsetup_r+0xc6>
 8027628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802762c:	d1ba      	bne.n	80275a4 <__swsetup_r+0x30>
 802762e:	bd70      	pop	{r4, r5, r6, pc}
 8027630:	0781      	lsls	r1, r0, #30
 8027632:	bf58      	it	pl
 8027634:	6963      	ldrpl	r3, [r4, #20]
 8027636:	60a3      	str	r3, [r4, #8]
 8027638:	e7f4      	b.n	8027624 <__swsetup_r+0xb0>
 802763a:	2000      	movs	r0, #0
 802763c:	e7f7      	b.n	802762e <__swsetup_r+0xba>
 802763e:	bf00      	nop
 8027640:	240002a4 	.word	0x240002a4
 8027644:	0802b600 	.word	0x0802b600
 8027648:	0802b620 	.word	0x0802b620
 802764c:	0802b5e0 	.word	0x0802b5e0

08027650 <quorem>:
 8027650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027654:	6903      	ldr	r3, [r0, #16]
 8027656:	690c      	ldr	r4, [r1, #16]
 8027658:	42a3      	cmp	r3, r4
 802765a:	4607      	mov	r7, r0
 802765c:	f2c0 8081 	blt.w	8027762 <quorem+0x112>
 8027660:	3c01      	subs	r4, #1
 8027662:	f101 0814 	add.w	r8, r1, #20
 8027666:	f100 0514 	add.w	r5, r0, #20
 802766a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802766e:	9301      	str	r3, [sp, #4]
 8027670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8027674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027678:	3301      	adds	r3, #1
 802767a:	429a      	cmp	r2, r3
 802767c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8027680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8027684:	fbb2 f6f3 	udiv	r6, r2, r3
 8027688:	d331      	bcc.n	80276ee <quorem+0x9e>
 802768a:	f04f 0e00 	mov.w	lr, #0
 802768e:	4640      	mov	r0, r8
 8027690:	46ac      	mov	ip, r5
 8027692:	46f2      	mov	sl, lr
 8027694:	f850 2b04 	ldr.w	r2, [r0], #4
 8027698:	b293      	uxth	r3, r2
 802769a:	fb06 e303 	mla	r3, r6, r3, lr
 802769e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80276a2:	b29b      	uxth	r3, r3
 80276a4:	ebaa 0303 	sub.w	r3, sl, r3
 80276a8:	0c12      	lsrs	r2, r2, #16
 80276aa:	f8dc a000 	ldr.w	sl, [ip]
 80276ae:	fb06 e202 	mla	r2, r6, r2, lr
 80276b2:	fa13 f38a 	uxtah	r3, r3, sl
 80276b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80276ba:	fa1f fa82 	uxth.w	sl, r2
 80276be:	f8dc 2000 	ldr.w	r2, [ip]
 80276c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80276c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80276ca:	b29b      	uxth	r3, r3
 80276cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80276d0:	4581      	cmp	r9, r0
 80276d2:	f84c 3b04 	str.w	r3, [ip], #4
 80276d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80276da:	d2db      	bcs.n	8027694 <quorem+0x44>
 80276dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80276e0:	b92b      	cbnz	r3, 80276ee <quorem+0x9e>
 80276e2:	9b01      	ldr	r3, [sp, #4]
 80276e4:	3b04      	subs	r3, #4
 80276e6:	429d      	cmp	r5, r3
 80276e8:	461a      	mov	r2, r3
 80276ea:	d32e      	bcc.n	802774a <quorem+0xfa>
 80276ec:	613c      	str	r4, [r7, #16]
 80276ee:	4638      	mov	r0, r7
 80276f0:	f001 fa6a 	bl	8028bc8 <__mcmp>
 80276f4:	2800      	cmp	r0, #0
 80276f6:	db24      	blt.n	8027742 <quorem+0xf2>
 80276f8:	3601      	adds	r6, #1
 80276fa:	4628      	mov	r0, r5
 80276fc:	f04f 0c00 	mov.w	ip, #0
 8027700:	f858 2b04 	ldr.w	r2, [r8], #4
 8027704:	f8d0 e000 	ldr.w	lr, [r0]
 8027708:	b293      	uxth	r3, r2
 802770a:	ebac 0303 	sub.w	r3, ip, r3
 802770e:	0c12      	lsrs	r2, r2, #16
 8027710:	fa13 f38e 	uxtah	r3, r3, lr
 8027714:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8027718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802771c:	b29b      	uxth	r3, r3
 802771e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027722:	45c1      	cmp	r9, r8
 8027724:	f840 3b04 	str.w	r3, [r0], #4
 8027728:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802772c:	d2e8      	bcs.n	8027700 <quorem+0xb0>
 802772e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027736:	b922      	cbnz	r2, 8027742 <quorem+0xf2>
 8027738:	3b04      	subs	r3, #4
 802773a:	429d      	cmp	r5, r3
 802773c:	461a      	mov	r2, r3
 802773e:	d30a      	bcc.n	8027756 <quorem+0x106>
 8027740:	613c      	str	r4, [r7, #16]
 8027742:	4630      	mov	r0, r6
 8027744:	b003      	add	sp, #12
 8027746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802774a:	6812      	ldr	r2, [r2, #0]
 802774c:	3b04      	subs	r3, #4
 802774e:	2a00      	cmp	r2, #0
 8027750:	d1cc      	bne.n	80276ec <quorem+0x9c>
 8027752:	3c01      	subs	r4, #1
 8027754:	e7c7      	b.n	80276e6 <quorem+0x96>
 8027756:	6812      	ldr	r2, [r2, #0]
 8027758:	3b04      	subs	r3, #4
 802775a:	2a00      	cmp	r2, #0
 802775c:	d1f0      	bne.n	8027740 <quorem+0xf0>
 802775e:	3c01      	subs	r4, #1
 8027760:	e7eb      	b.n	802773a <quorem+0xea>
 8027762:	2000      	movs	r0, #0
 8027764:	e7ee      	b.n	8027744 <quorem+0xf4>
	...

08027768 <_dtoa_r>:
 8027768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802776c:	ec59 8b10 	vmov	r8, r9, d0
 8027770:	b095      	sub	sp, #84	; 0x54
 8027772:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8027774:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8027776:	9107      	str	r1, [sp, #28]
 8027778:	e9cd 8902 	strd	r8, r9, [sp, #8]
 802777c:	4606      	mov	r6, r0
 802777e:	9209      	str	r2, [sp, #36]	; 0x24
 8027780:	9310      	str	r3, [sp, #64]	; 0x40
 8027782:	b975      	cbnz	r5, 80277a2 <_dtoa_r+0x3a>
 8027784:	2010      	movs	r0, #16
 8027786:	f7fe ffbf 	bl	8026708 <malloc>
 802778a:	4602      	mov	r2, r0
 802778c:	6270      	str	r0, [r6, #36]	; 0x24
 802778e:	b920      	cbnz	r0, 802779a <_dtoa_r+0x32>
 8027790:	4bab      	ldr	r3, [pc, #684]	; (8027a40 <_dtoa_r+0x2d8>)
 8027792:	21ea      	movs	r1, #234	; 0xea
 8027794:	48ab      	ldr	r0, [pc, #684]	; (8027a44 <_dtoa_r+0x2dc>)
 8027796:	f001 fe23 	bl	80293e0 <__assert_func>
 802779a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802779e:	6005      	str	r5, [r0, #0]
 80277a0:	60c5      	str	r5, [r0, #12]
 80277a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80277a4:	6819      	ldr	r1, [r3, #0]
 80277a6:	b151      	cbz	r1, 80277be <_dtoa_r+0x56>
 80277a8:	685a      	ldr	r2, [r3, #4]
 80277aa:	604a      	str	r2, [r1, #4]
 80277ac:	2301      	movs	r3, #1
 80277ae:	4093      	lsls	r3, r2
 80277b0:	608b      	str	r3, [r1, #8]
 80277b2:	4630      	mov	r0, r6
 80277b4:	f000 ffca 	bl	802874c <_Bfree>
 80277b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80277ba:	2200      	movs	r2, #0
 80277bc:	601a      	str	r2, [r3, #0]
 80277be:	f1b9 0300 	subs.w	r3, r9, #0
 80277c2:	bfbb      	ittet	lt
 80277c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80277c8:	9303      	strlt	r3, [sp, #12]
 80277ca:	2300      	movge	r3, #0
 80277cc:	2201      	movlt	r2, #1
 80277ce:	bfac      	ite	ge
 80277d0:	6023      	strge	r3, [r4, #0]
 80277d2:	6022      	strlt	r2, [r4, #0]
 80277d4:	4b9c      	ldr	r3, [pc, #624]	; (8027a48 <_dtoa_r+0x2e0>)
 80277d6:	9c03      	ldr	r4, [sp, #12]
 80277d8:	43a3      	bics	r3, r4
 80277da:	d11a      	bne.n	8027812 <_dtoa_r+0xaa>
 80277dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80277de:	f242 730f 	movw	r3, #9999	; 0x270f
 80277e2:	6013      	str	r3, [r2, #0]
 80277e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80277e8:	ea53 0308 	orrs.w	r3, r3, r8
 80277ec:	f000 8512 	beq.w	8028214 <_dtoa_r+0xaac>
 80277f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80277f2:	b953      	cbnz	r3, 802780a <_dtoa_r+0xa2>
 80277f4:	4b95      	ldr	r3, [pc, #596]	; (8027a4c <_dtoa_r+0x2e4>)
 80277f6:	e01f      	b.n	8027838 <_dtoa_r+0xd0>
 80277f8:	4b95      	ldr	r3, [pc, #596]	; (8027a50 <_dtoa_r+0x2e8>)
 80277fa:	9300      	str	r3, [sp, #0]
 80277fc:	3308      	adds	r3, #8
 80277fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027800:	6013      	str	r3, [r2, #0]
 8027802:	9800      	ldr	r0, [sp, #0]
 8027804:	b015      	add	sp, #84	; 0x54
 8027806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802780a:	4b90      	ldr	r3, [pc, #576]	; (8027a4c <_dtoa_r+0x2e4>)
 802780c:	9300      	str	r3, [sp, #0]
 802780e:	3303      	adds	r3, #3
 8027810:	e7f5      	b.n	80277fe <_dtoa_r+0x96>
 8027812:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027816:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802781e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8027822:	d10b      	bne.n	802783c <_dtoa_r+0xd4>
 8027824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027826:	2301      	movs	r3, #1
 8027828:	6013      	str	r3, [r2, #0]
 802782a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802782c:	2b00      	cmp	r3, #0
 802782e:	f000 84ee 	beq.w	802820e <_dtoa_r+0xaa6>
 8027832:	4888      	ldr	r0, [pc, #544]	; (8027a54 <_dtoa_r+0x2ec>)
 8027834:	6018      	str	r0, [r3, #0]
 8027836:	1e43      	subs	r3, r0, #1
 8027838:	9300      	str	r3, [sp, #0]
 802783a:	e7e2      	b.n	8027802 <_dtoa_r+0x9a>
 802783c:	a913      	add	r1, sp, #76	; 0x4c
 802783e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8027842:	aa12      	add	r2, sp, #72	; 0x48
 8027844:	4630      	mov	r0, r6
 8027846:	f001 fa63 	bl	8028d10 <__d2b>
 802784a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 802784e:	4605      	mov	r5, r0
 8027850:	9812      	ldr	r0, [sp, #72]	; 0x48
 8027852:	2900      	cmp	r1, #0
 8027854:	d047      	beq.n	80278e6 <_dtoa_r+0x17e>
 8027856:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027858:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802785c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8027860:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8027864:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027868:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802786c:	2400      	movs	r4, #0
 802786e:	ec43 2b16 	vmov	d6, r2, r3
 8027872:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8027876:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8027a28 <_dtoa_r+0x2c0>
 802787a:	ee36 7b47 	vsub.f64	d7, d6, d7
 802787e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8027a30 <_dtoa_r+0x2c8>
 8027882:	eea7 6b05 	vfma.f64	d6, d7, d5
 8027886:	eeb0 7b46 	vmov.f64	d7, d6
 802788a:	ee06 1a90 	vmov	s13, r1
 802788e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8027892:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8027a38 <_dtoa_r+0x2d0>
 8027896:	eea5 7b06 	vfma.f64	d7, d5, d6
 802789a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802789e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80278a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278a6:	ee16 ba90 	vmov	fp, s13
 80278aa:	9411      	str	r4, [sp, #68]	; 0x44
 80278ac:	d508      	bpl.n	80278c0 <_dtoa_r+0x158>
 80278ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80278b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80278b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278ba:	bf18      	it	ne
 80278bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80278c0:	f1bb 0f16 	cmp.w	fp, #22
 80278c4:	d832      	bhi.n	802792c <_dtoa_r+0x1c4>
 80278c6:	4b64      	ldr	r3, [pc, #400]	; (8027a58 <_dtoa_r+0x2f0>)
 80278c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80278cc:	ed93 7b00 	vldr	d7, [r3]
 80278d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80278d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80278d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278dc:	d501      	bpl.n	80278e2 <_dtoa_r+0x17a>
 80278de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80278e2:	2300      	movs	r3, #0
 80278e4:	e023      	b.n	802792e <_dtoa_r+0x1c6>
 80278e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80278e8:	4401      	add	r1, r0
 80278ea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80278ee:	2b20      	cmp	r3, #32
 80278f0:	bfc3      	ittte	gt
 80278f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80278f6:	fa04 f303 	lslgt.w	r3, r4, r3
 80278fa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80278fe:	f1c3 0320 	rsble	r3, r3, #32
 8027902:	bfc6      	itte	gt
 8027904:	fa28 f804 	lsrgt.w	r8, r8, r4
 8027908:	ea43 0308 	orrgt.w	r3, r3, r8
 802790c:	fa08 f303 	lslle.w	r3, r8, r3
 8027910:	ee07 3a90 	vmov	s15, r3
 8027914:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027918:	3901      	subs	r1, #1
 802791a:	ed8d 7b00 	vstr	d7, [sp]
 802791e:	9c01      	ldr	r4, [sp, #4]
 8027920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027924:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8027928:	2401      	movs	r4, #1
 802792a:	e7a0      	b.n	802786e <_dtoa_r+0x106>
 802792c:	2301      	movs	r3, #1
 802792e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027930:	1a43      	subs	r3, r0, r1
 8027932:	1e5a      	subs	r2, r3, #1
 8027934:	bf45      	ittet	mi
 8027936:	f1c3 0301 	rsbmi	r3, r3, #1
 802793a:	9305      	strmi	r3, [sp, #20]
 802793c:	2300      	movpl	r3, #0
 802793e:	2300      	movmi	r3, #0
 8027940:	9206      	str	r2, [sp, #24]
 8027942:	bf54      	ite	pl
 8027944:	9305      	strpl	r3, [sp, #20]
 8027946:	9306      	strmi	r3, [sp, #24]
 8027948:	f1bb 0f00 	cmp.w	fp, #0
 802794c:	db18      	blt.n	8027980 <_dtoa_r+0x218>
 802794e:	9b06      	ldr	r3, [sp, #24]
 8027950:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8027954:	445b      	add	r3, fp
 8027956:	9306      	str	r3, [sp, #24]
 8027958:	2300      	movs	r3, #0
 802795a:	9a07      	ldr	r2, [sp, #28]
 802795c:	2a09      	cmp	r2, #9
 802795e:	d849      	bhi.n	80279f4 <_dtoa_r+0x28c>
 8027960:	2a05      	cmp	r2, #5
 8027962:	bfc4      	itt	gt
 8027964:	3a04      	subgt	r2, #4
 8027966:	9207      	strgt	r2, [sp, #28]
 8027968:	9a07      	ldr	r2, [sp, #28]
 802796a:	f1a2 0202 	sub.w	r2, r2, #2
 802796e:	bfcc      	ite	gt
 8027970:	2400      	movgt	r4, #0
 8027972:	2401      	movle	r4, #1
 8027974:	2a03      	cmp	r2, #3
 8027976:	d848      	bhi.n	8027a0a <_dtoa_r+0x2a2>
 8027978:	e8df f002 	tbb	[pc, r2]
 802797c:	3a2c2e0b 	.word	0x3a2c2e0b
 8027980:	9b05      	ldr	r3, [sp, #20]
 8027982:	2200      	movs	r2, #0
 8027984:	eba3 030b 	sub.w	r3, r3, fp
 8027988:	9305      	str	r3, [sp, #20]
 802798a:	920e      	str	r2, [sp, #56]	; 0x38
 802798c:	f1cb 0300 	rsb	r3, fp, #0
 8027990:	e7e3      	b.n	802795a <_dtoa_r+0x1f2>
 8027992:	2200      	movs	r2, #0
 8027994:	9208      	str	r2, [sp, #32]
 8027996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027998:	2a00      	cmp	r2, #0
 802799a:	dc39      	bgt.n	8027a10 <_dtoa_r+0x2a8>
 802799c:	f04f 0a01 	mov.w	sl, #1
 80279a0:	46d1      	mov	r9, sl
 80279a2:	4652      	mov	r2, sl
 80279a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80279a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80279aa:	2100      	movs	r1, #0
 80279ac:	6079      	str	r1, [r7, #4]
 80279ae:	2004      	movs	r0, #4
 80279b0:	f100 0c14 	add.w	ip, r0, #20
 80279b4:	4594      	cmp	ip, r2
 80279b6:	6879      	ldr	r1, [r7, #4]
 80279b8:	d92f      	bls.n	8027a1a <_dtoa_r+0x2b2>
 80279ba:	4630      	mov	r0, r6
 80279bc:	930c      	str	r3, [sp, #48]	; 0x30
 80279be:	f000 fe85 	bl	80286cc <_Balloc>
 80279c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80279c4:	9000      	str	r0, [sp, #0]
 80279c6:	4602      	mov	r2, r0
 80279c8:	2800      	cmp	r0, #0
 80279ca:	d149      	bne.n	8027a60 <_dtoa_r+0x2f8>
 80279cc:	4b23      	ldr	r3, [pc, #140]	; (8027a5c <_dtoa_r+0x2f4>)
 80279ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80279d2:	e6df      	b.n	8027794 <_dtoa_r+0x2c>
 80279d4:	2201      	movs	r2, #1
 80279d6:	e7dd      	b.n	8027994 <_dtoa_r+0x22c>
 80279d8:	2200      	movs	r2, #0
 80279da:	9208      	str	r2, [sp, #32]
 80279dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80279de:	eb0b 0a02 	add.w	sl, fp, r2
 80279e2:	f10a 0901 	add.w	r9, sl, #1
 80279e6:	464a      	mov	r2, r9
 80279e8:	2a01      	cmp	r2, #1
 80279ea:	bfb8      	it	lt
 80279ec:	2201      	movlt	r2, #1
 80279ee:	e7db      	b.n	80279a8 <_dtoa_r+0x240>
 80279f0:	2201      	movs	r2, #1
 80279f2:	e7f2      	b.n	80279da <_dtoa_r+0x272>
 80279f4:	2401      	movs	r4, #1
 80279f6:	2200      	movs	r2, #0
 80279f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80279fc:	f04f 3aff 	mov.w	sl, #4294967295
 8027a00:	2100      	movs	r1, #0
 8027a02:	46d1      	mov	r9, sl
 8027a04:	2212      	movs	r2, #18
 8027a06:	9109      	str	r1, [sp, #36]	; 0x24
 8027a08:	e7ce      	b.n	80279a8 <_dtoa_r+0x240>
 8027a0a:	2201      	movs	r2, #1
 8027a0c:	9208      	str	r2, [sp, #32]
 8027a0e:	e7f5      	b.n	80279fc <_dtoa_r+0x294>
 8027a10:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8027a14:	46d1      	mov	r9, sl
 8027a16:	4652      	mov	r2, sl
 8027a18:	e7c6      	b.n	80279a8 <_dtoa_r+0x240>
 8027a1a:	3101      	adds	r1, #1
 8027a1c:	6079      	str	r1, [r7, #4]
 8027a1e:	0040      	lsls	r0, r0, #1
 8027a20:	e7c6      	b.n	80279b0 <_dtoa_r+0x248>
 8027a22:	bf00      	nop
 8027a24:	f3af 8000 	nop.w
 8027a28:	636f4361 	.word	0x636f4361
 8027a2c:	3fd287a7 	.word	0x3fd287a7
 8027a30:	8b60c8b3 	.word	0x8b60c8b3
 8027a34:	3fc68a28 	.word	0x3fc68a28
 8027a38:	509f79fb 	.word	0x509f79fb
 8027a3c:	3fd34413 	.word	0x3fd34413
 8027a40:	0802b559 	.word	0x0802b559
 8027a44:	0802b570 	.word	0x0802b570
 8027a48:	7ff00000 	.word	0x7ff00000
 8027a4c:	0802b555 	.word	0x0802b555
 8027a50:	0802b54c 	.word	0x0802b54c
 8027a54:	0802b529 	.word	0x0802b529
 8027a58:	0802b6c8 	.word	0x0802b6c8
 8027a5c:	0802b5cf 	.word	0x0802b5cf
 8027a60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8027a62:	9900      	ldr	r1, [sp, #0]
 8027a64:	6011      	str	r1, [r2, #0]
 8027a66:	f1b9 0f0e 	cmp.w	r9, #14
 8027a6a:	d872      	bhi.n	8027b52 <_dtoa_r+0x3ea>
 8027a6c:	2c00      	cmp	r4, #0
 8027a6e:	d070      	beq.n	8027b52 <_dtoa_r+0x3ea>
 8027a70:	f1bb 0f00 	cmp.w	fp, #0
 8027a74:	f340 80a6 	ble.w	8027bc4 <_dtoa_r+0x45c>
 8027a78:	49ca      	ldr	r1, [pc, #808]	; (8027da4 <_dtoa_r+0x63c>)
 8027a7a:	f00b 020f 	and.w	r2, fp, #15
 8027a7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8027a82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8027a86:	ed92 7b00 	vldr	d7, [r2]
 8027a8a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8027a8e:	f000 808d 	beq.w	8027bac <_dtoa_r+0x444>
 8027a92:	4ac5      	ldr	r2, [pc, #788]	; (8027da8 <_dtoa_r+0x640>)
 8027a94:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8027a98:	ed92 6b08 	vldr	d6, [r2, #32]
 8027a9c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8027aa0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8027aa4:	f001 010f 	and.w	r1, r1, #15
 8027aa8:	2203      	movs	r2, #3
 8027aaa:	48bf      	ldr	r0, [pc, #764]	; (8027da8 <_dtoa_r+0x640>)
 8027aac:	2900      	cmp	r1, #0
 8027aae:	d17f      	bne.n	8027bb0 <_dtoa_r+0x448>
 8027ab0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027ab4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027ab8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027abc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027abe:	2900      	cmp	r1, #0
 8027ac0:	f000 80b2 	beq.w	8027c28 <_dtoa_r+0x4c0>
 8027ac4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8027ac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027acc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ad4:	f140 80a8 	bpl.w	8027c28 <_dtoa_r+0x4c0>
 8027ad8:	f1b9 0f00 	cmp.w	r9, #0
 8027adc:	f000 80a4 	beq.w	8027c28 <_dtoa_r+0x4c0>
 8027ae0:	f1ba 0f00 	cmp.w	sl, #0
 8027ae4:	dd31      	ble.n	8027b4a <_dtoa_r+0x3e2>
 8027ae6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8027aea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027aee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027af2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8027af6:	3201      	adds	r2, #1
 8027af8:	4650      	mov	r0, sl
 8027afa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027afe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8027b02:	ee07 2a90 	vmov	s15, r2
 8027b06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027b0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8027b0e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8027b12:	9c03      	ldr	r4, [sp, #12]
 8027b14:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8027b18:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8027b1c:	2800      	cmp	r0, #0
 8027b1e:	f040 8086 	bne.w	8027c2e <_dtoa_r+0x4c6>
 8027b22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8027b26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8027b2a:	ec42 1b17 	vmov	d7, r1, r2
 8027b2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b36:	f300 8272 	bgt.w	802801e <_dtoa_r+0x8b6>
 8027b3a:	eeb1 7b47 	vneg.f64	d7, d7
 8027b3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b46:	f100 8267 	bmi.w	8028018 <_dtoa_r+0x8b0>
 8027b4a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8027b4e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8027b52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027b54:	2a00      	cmp	r2, #0
 8027b56:	f2c0 8129 	blt.w	8027dac <_dtoa_r+0x644>
 8027b5a:	f1bb 0f0e 	cmp.w	fp, #14
 8027b5e:	f300 8125 	bgt.w	8027dac <_dtoa_r+0x644>
 8027b62:	4b90      	ldr	r3, [pc, #576]	; (8027da4 <_dtoa_r+0x63c>)
 8027b64:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8027b68:	ed93 6b00 	vldr	d6, [r3]
 8027b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b6e:	2b00      	cmp	r3, #0
 8027b70:	f280 80c3 	bge.w	8027cfa <_dtoa_r+0x592>
 8027b74:	f1b9 0f00 	cmp.w	r9, #0
 8027b78:	f300 80bf 	bgt.w	8027cfa <_dtoa_r+0x592>
 8027b7c:	f040 824c 	bne.w	8028018 <_dtoa_r+0x8b0>
 8027b80:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8027b84:	ee26 6b07 	vmul.f64	d6, d6, d7
 8027b88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027b8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b94:	464c      	mov	r4, r9
 8027b96:	464f      	mov	r7, r9
 8027b98:	f280 8222 	bge.w	8027fe0 <_dtoa_r+0x878>
 8027b9c:	f8dd 8000 	ldr.w	r8, [sp]
 8027ba0:	2331      	movs	r3, #49	; 0x31
 8027ba2:	f808 3b01 	strb.w	r3, [r8], #1
 8027ba6:	f10b 0b01 	add.w	fp, fp, #1
 8027baa:	e21e      	b.n	8027fea <_dtoa_r+0x882>
 8027bac:	2202      	movs	r2, #2
 8027bae:	e77c      	b.n	8027aaa <_dtoa_r+0x342>
 8027bb0:	07cc      	lsls	r4, r1, #31
 8027bb2:	d504      	bpl.n	8027bbe <_dtoa_r+0x456>
 8027bb4:	ed90 6b00 	vldr	d6, [r0]
 8027bb8:	3201      	adds	r2, #1
 8027bba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027bbe:	1049      	asrs	r1, r1, #1
 8027bc0:	3008      	adds	r0, #8
 8027bc2:	e773      	b.n	8027aac <_dtoa_r+0x344>
 8027bc4:	d02e      	beq.n	8027c24 <_dtoa_r+0x4bc>
 8027bc6:	f1cb 0100 	rsb	r1, fp, #0
 8027bca:	4a76      	ldr	r2, [pc, #472]	; (8027da4 <_dtoa_r+0x63c>)
 8027bcc:	f001 000f 	and.w	r0, r1, #15
 8027bd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8027bd4:	ed92 7b00 	vldr	d7, [r2]
 8027bd8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8027bdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027be0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8027be4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8027be8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8027bec:	486e      	ldr	r0, [pc, #440]	; (8027da8 <_dtoa_r+0x640>)
 8027bee:	1109      	asrs	r1, r1, #4
 8027bf0:	2400      	movs	r4, #0
 8027bf2:	2202      	movs	r2, #2
 8027bf4:	b939      	cbnz	r1, 8027c06 <_dtoa_r+0x49e>
 8027bf6:	2c00      	cmp	r4, #0
 8027bf8:	f43f af60 	beq.w	8027abc <_dtoa_r+0x354>
 8027bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8027c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027c04:	e75a      	b.n	8027abc <_dtoa_r+0x354>
 8027c06:	07cf      	lsls	r7, r1, #31
 8027c08:	d509      	bpl.n	8027c1e <_dtoa_r+0x4b6>
 8027c0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8027c0e:	ed90 7b00 	vldr	d7, [r0]
 8027c12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027c16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8027c1a:	3201      	adds	r2, #1
 8027c1c:	2401      	movs	r4, #1
 8027c1e:	1049      	asrs	r1, r1, #1
 8027c20:	3008      	adds	r0, #8
 8027c22:	e7e7      	b.n	8027bf4 <_dtoa_r+0x48c>
 8027c24:	2202      	movs	r2, #2
 8027c26:	e749      	b.n	8027abc <_dtoa_r+0x354>
 8027c28:	465f      	mov	r7, fp
 8027c2a:	4648      	mov	r0, r9
 8027c2c:	e765      	b.n	8027afa <_dtoa_r+0x392>
 8027c2e:	ec42 1b17 	vmov	d7, r1, r2
 8027c32:	4a5c      	ldr	r2, [pc, #368]	; (8027da4 <_dtoa_r+0x63c>)
 8027c34:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8027c38:	ed12 4b02 	vldr	d4, [r2, #-8]
 8027c3c:	9a00      	ldr	r2, [sp, #0]
 8027c3e:	1814      	adds	r4, r2, r0
 8027c40:	9a08      	ldr	r2, [sp, #32]
 8027c42:	b352      	cbz	r2, 8027c9a <_dtoa_r+0x532>
 8027c44:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8027c48:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8027c4c:	f8dd 8000 	ldr.w	r8, [sp]
 8027c50:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8027c54:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8027c58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8027c5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8027c60:	ee14 2a90 	vmov	r2, s9
 8027c64:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027c68:	3230      	adds	r2, #48	; 0x30
 8027c6a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027c6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c76:	f808 2b01 	strb.w	r2, [r8], #1
 8027c7a:	d439      	bmi.n	8027cf0 <_dtoa_r+0x588>
 8027c7c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8027c80:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8027c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c88:	d472      	bmi.n	8027d70 <_dtoa_r+0x608>
 8027c8a:	45a0      	cmp	r8, r4
 8027c8c:	f43f af5d 	beq.w	8027b4a <_dtoa_r+0x3e2>
 8027c90:	ee27 7b03 	vmul.f64	d7, d7, d3
 8027c94:	ee26 6b03 	vmul.f64	d6, d6, d3
 8027c98:	e7e0      	b.n	8027c5c <_dtoa_r+0x4f4>
 8027c9a:	f8dd 8000 	ldr.w	r8, [sp]
 8027c9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8027ca2:	4621      	mov	r1, r4
 8027ca4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8027ca8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8027cac:	ee14 2a90 	vmov	r2, s9
 8027cb0:	3230      	adds	r2, #48	; 0x30
 8027cb2:	f808 2b01 	strb.w	r2, [r8], #1
 8027cb6:	45a0      	cmp	r8, r4
 8027cb8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027cbc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027cc0:	d118      	bne.n	8027cf4 <_dtoa_r+0x58c>
 8027cc2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8027cc6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8027cca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8027cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cd2:	dc4d      	bgt.n	8027d70 <_dtoa_r+0x608>
 8027cd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8027cd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ce0:	f57f af33 	bpl.w	8027b4a <_dtoa_r+0x3e2>
 8027ce4:	4688      	mov	r8, r1
 8027ce6:	3901      	subs	r1, #1
 8027ce8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8027cec:	2b30      	cmp	r3, #48	; 0x30
 8027cee:	d0f9      	beq.n	8027ce4 <_dtoa_r+0x57c>
 8027cf0:	46bb      	mov	fp, r7
 8027cf2:	e02a      	b.n	8027d4a <_dtoa_r+0x5e2>
 8027cf4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8027cf8:	e7d6      	b.n	8027ca8 <_dtoa_r+0x540>
 8027cfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027cfe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8027d02:	f8dd 8000 	ldr.w	r8, [sp]
 8027d06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8027d0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8027d0e:	ee15 3a10 	vmov	r3, s10
 8027d12:	3330      	adds	r3, #48	; 0x30
 8027d14:	f808 3b01 	strb.w	r3, [r8], #1
 8027d18:	9b00      	ldr	r3, [sp, #0]
 8027d1a:	eba8 0303 	sub.w	r3, r8, r3
 8027d1e:	4599      	cmp	r9, r3
 8027d20:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8027d24:	eea3 7b46 	vfms.f64	d7, d3, d6
 8027d28:	d133      	bne.n	8027d92 <_dtoa_r+0x62a>
 8027d2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8027d2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d36:	dc1a      	bgt.n	8027d6e <_dtoa_r+0x606>
 8027d38:	eeb4 7b46 	vcmp.f64	d7, d6
 8027d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d40:	d103      	bne.n	8027d4a <_dtoa_r+0x5e2>
 8027d42:	ee15 3a10 	vmov	r3, s10
 8027d46:	07d9      	lsls	r1, r3, #31
 8027d48:	d411      	bmi.n	8027d6e <_dtoa_r+0x606>
 8027d4a:	4629      	mov	r1, r5
 8027d4c:	4630      	mov	r0, r6
 8027d4e:	f000 fcfd 	bl	802874c <_Bfree>
 8027d52:	2300      	movs	r3, #0
 8027d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027d56:	f888 3000 	strb.w	r3, [r8]
 8027d5a:	f10b 0301 	add.w	r3, fp, #1
 8027d5e:	6013      	str	r3, [r2, #0]
 8027d60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027d62:	2b00      	cmp	r3, #0
 8027d64:	f43f ad4d 	beq.w	8027802 <_dtoa_r+0x9a>
 8027d68:	f8c3 8000 	str.w	r8, [r3]
 8027d6c:	e549      	b.n	8027802 <_dtoa_r+0x9a>
 8027d6e:	465f      	mov	r7, fp
 8027d70:	4643      	mov	r3, r8
 8027d72:	4698      	mov	r8, r3
 8027d74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027d78:	2a39      	cmp	r2, #57	; 0x39
 8027d7a:	d106      	bne.n	8027d8a <_dtoa_r+0x622>
 8027d7c:	9a00      	ldr	r2, [sp, #0]
 8027d7e:	429a      	cmp	r2, r3
 8027d80:	d1f7      	bne.n	8027d72 <_dtoa_r+0x60a>
 8027d82:	9900      	ldr	r1, [sp, #0]
 8027d84:	2230      	movs	r2, #48	; 0x30
 8027d86:	3701      	adds	r7, #1
 8027d88:	700a      	strb	r2, [r1, #0]
 8027d8a:	781a      	ldrb	r2, [r3, #0]
 8027d8c:	3201      	adds	r2, #1
 8027d8e:	701a      	strb	r2, [r3, #0]
 8027d90:	e7ae      	b.n	8027cf0 <_dtoa_r+0x588>
 8027d92:	ee27 7b04 	vmul.f64	d7, d7, d4
 8027d96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d9e:	d1b2      	bne.n	8027d06 <_dtoa_r+0x59e>
 8027da0:	e7d3      	b.n	8027d4a <_dtoa_r+0x5e2>
 8027da2:	bf00      	nop
 8027da4:	0802b6c8 	.word	0x0802b6c8
 8027da8:	0802b6a0 	.word	0x0802b6a0
 8027dac:	9908      	ldr	r1, [sp, #32]
 8027dae:	2900      	cmp	r1, #0
 8027db0:	f000 80d1 	beq.w	8027f56 <_dtoa_r+0x7ee>
 8027db4:	9907      	ldr	r1, [sp, #28]
 8027db6:	2901      	cmp	r1, #1
 8027db8:	f300 80b4 	bgt.w	8027f24 <_dtoa_r+0x7bc>
 8027dbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8027dbe:	2900      	cmp	r1, #0
 8027dc0:	f000 80ac 	beq.w	8027f1c <_dtoa_r+0x7b4>
 8027dc4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8027dc8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8027dcc:	461c      	mov	r4, r3
 8027dce:	930a      	str	r3, [sp, #40]	; 0x28
 8027dd0:	9b05      	ldr	r3, [sp, #20]
 8027dd2:	4413      	add	r3, r2
 8027dd4:	9305      	str	r3, [sp, #20]
 8027dd6:	9b06      	ldr	r3, [sp, #24]
 8027dd8:	2101      	movs	r1, #1
 8027dda:	4413      	add	r3, r2
 8027ddc:	4630      	mov	r0, r6
 8027dde:	9306      	str	r3, [sp, #24]
 8027de0:	f000 fd70 	bl	80288c4 <__i2b>
 8027de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027de6:	4607      	mov	r7, r0
 8027de8:	f1b8 0f00 	cmp.w	r8, #0
 8027dec:	dd0d      	ble.n	8027e0a <_dtoa_r+0x6a2>
 8027dee:	9a06      	ldr	r2, [sp, #24]
 8027df0:	2a00      	cmp	r2, #0
 8027df2:	dd0a      	ble.n	8027e0a <_dtoa_r+0x6a2>
 8027df4:	4542      	cmp	r2, r8
 8027df6:	9905      	ldr	r1, [sp, #20]
 8027df8:	bfa8      	it	ge
 8027dfa:	4642      	movge	r2, r8
 8027dfc:	1a89      	subs	r1, r1, r2
 8027dfe:	9105      	str	r1, [sp, #20]
 8027e00:	9906      	ldr	r1, [sp, #24]
 8027e02:	eba8 0802 	sub.w	r8, r8, r2
 8027e06:	1a8a      	subs	r2, r1, r2
 8027e08:	9206      	str	r2, [sp, #24]
 8027e0a:	b303      	cbz	r3, 8027e4e <_dtoa_r+0x6e6>
 8027e0c:	9a08      	ldr	r2, [sp, #32]
 8027e0e:	2a00      	cmp	r2, #0
 8027e10:	f000 80a6 	beq.w	8027f60 <_dtoa_r+0x7f8>
 8027e14:	2c00      	cmp	r4, #0
 8027e16:	dd13      	ble.n	8027e40 <_dtoa_r+0x6d8>
 8027e18:	4639      	mov	r1, r7
 8027e1a:	4622      	mov	r2, r4
 8027e1c:	4630      	mov	r0, r6
 8027e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8027e20:	f000 fe0c 	bl	8028a3c <__pow5mult>
 8027e24:	462a      	mov	r2, r5
 8027e26:	4601      	mov	r1, r0
 8027e28:	4607      	mov	r7, r0
 8027e2a:	4630      	mov	r0, r6
 8027e2c:	f000 fd60 	bl	80288f0 <__multiply>
 8027e30:	4629      	mov	r1, r5
 8027e32:	900a      	str	r0, [sp, #40]	; 0x28
 8027e34:	4630      	mov	r0, r6
 8027e36:	f000 fc89 	bl	802874c <_Bfree>
 8027e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027e3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027e3e:	4615      	mov	r5, r2
 8027e40:	1b1a      	subs	r2, r3, r4
 8027e42:	d004      	beq.n	8027e4e <_dtoa_r+0x6e6>
 8027e44:	4629      	mov	r1, r5
 8027e46:	4630      	mov	r0, r6
 8027e48:	f000 fdf8 	bl	8028a3c <__pow5mult>
 8027e4c:	4605      	mov	r5, r0
 8027e4e:	2101      	movs	r1, #1
 8027e50:	4630      	mov	r0, r6
 8027e52:	f000 fd37 	bl	80288c4 <__i2b>
 8027e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	4604      	mov	r4, r0
 8027e5c:	f340 8082 	ble.w	8027f64 <_dtoa_r+0x7fc>
 8027e60:	461a      	mov	r2, r3
 8027e62:	4601      	mov	r1, r0
 8027e64:	4630      	mov	r0, r6
 8027e66:	f000 fde9 	bl	8028a3c <__pow5mult>
 8027e6a:	9b07      	ldr	r3, [sp, #28]
 8027e6c:	2b01      	cmp	r3, #1
 8027e6e:	4604      	mov	r4, r0
 8027e70:	dd7b      	ble.n	8027f6a <_dtoa_r+0x802>
 8027e72:	2300      	movs	r3, #0
 8027e74:	930a      	str	r3, [sp, #40]	; 0x28
 8027e76:	6922      	ldr	r2, [r4, #16]
 8027e78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8027e7c:	6910      	ldr	r0, [r2, #16]
 8027e7e:	f000 fcd1 	bl	8028824 <__hi0bits>
 8027e82:	f1c0 0020 	rsb	r0, r0, #32
 8027e86:	9b06      	ldr	r3, [sp, #24]
 8027e88:	4418      	add	r0, r3
 8027e8a:	f010 001f 	ands.w	r0, r0, #31
 8027e8e:	f000 808d 	beq.w	8027fac <_dtoa_r+0x844>
 8027e92:	f1c0 0220 	rsb	r2, r0, #32
 8027e96:	2a04      	cmp	r2, #4
 8027e98:	f340 8086 	ble.w	8027fa8 <_dtoa_r+0x840>
 8027e9c:	f1c0 001c 	rsb	r0, r0, #28
 8027ea0:	9b05      	ldr	r3, [sp, #20]
 8027ea2:	4403      	add	r3, r0
 8027ea4:	9305      	str	r3, [sp, #20]
 8027ea6:	9b06      	ldr	r3, [sp, #24]
 8027ea8:	4403      	add	r3, r0
 8027eaa:	4480      	add	r8, r0
 8027eac:	9306      	str	r3, [sp, #24]
 8027eae:	9b05      	ldr	r3, [sp, #20]
 8027eb0:	2b00      	cmp	r3, #0
 8027eb2:	dd05      	ble.n	8027ec0 <_dtoa_r+0x758>
 8027eb4:	4629      	mov	r1, r5
 8027eb6:	461a      	mov	r2, r3
 8027eb8:	4630      	mov	r0, r6
 8027eba:	f000 fe19 	bl	8028af0 <__lshift>
 8027ebe:	4605      	mov	r5, r0
 8027ec0:	9b06      	ldr	r3, [sp, #24]
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	dd05      	ble.n	8027ed2 <_dtoa_r+0x76a>
 8027ec6:	4621      	mov	r1, r4
 8027ec8:	461a      	mov	r2, r3
 8027eca:	4630      	mov	r0, r6
 8027ecc:	f000 fe10 	bl	8028af0 <__lshift>
 8027ed0:	4604      	mov	r4, r0
 8027ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027ed4:	2b00      	cmp	r3, #0
 8027ed6:	d06b      	beq.n	8027fb0 <_dtoa_r+0x848>
 8027ed8:	4621      	mov	r1, r4
 8027eda:	4628      	mov	r0, r5
 8027edc:	f000 fe74 	bl	8028bc8 <__mcmp>
 8027ee0:	2800      	cmp	r0, #0
 8027ee2:	da65      	bge.n	8027fb0 <_dtoa_r+0x848>
 8027ee4:	2300      	movs	r3, #0
 8027ee6:	4629      	mov	r1, r5
 8027ee8:	220a      	movs	r2, #10
 8027eea:	4630      	mov	r0, r6
 8027eec:	f000 fc50 	bl	8028790 <__multadd>
 8027ef0:	9b08      	ldr	r3, [sp, #32]
 8027ef2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027ef6:	4605      	mov	r5, r0
 8027ef8:	2b00      	cmp	r3, #0
 8027efa:	f000 8192 	beq.w	8028222 <_dtoa_r+0xaba>
 8027efe:	4639      	mov	r1, r7
 8027f00:	2300      	movs	r3, #0
 8027f02:	220a      	movs	r2, #10
 8027f04:	4630      	mov	r0, r6
 8027f06:	f000 fc43 	bl	8028790 <__multadd>
 8027f0a:	f1ba 0f00 	cmp.w	sl, #0
 8027f0e:	4607      	mov	r7, r0
 8027f10:	f300 808e 	bgt.w	8028030 <_dtoa_r+0x8c8>
 8027f14:	9b07      	ldr	r3, [sp, #28]
 8027f16:	2b02      	cmp	r3, #2
 8027f18:	dc51      	bgt.n	8027fbe <_dtoa_r+0x856>
 8027f1a:	e089      	b.n	8028030 <_dtoa_r+0x8c8>
 8027f1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027f1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8027f22:	e751      	b.n	8027dc8 <_dtoa_r+0x660>
 8027f24:	f109 34ff 	add.w	r4, r9, #4294967295
 8027f28:	42a3      	cmp	r3, r4
 8027f2a:	bfbf      	itttt	lt
 8027f2c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8027f2e:	1ae3      	sublt	r3, r4, r3
 8027f30:	18d2      	addlt	r2, r2, r3
 8027f32:	4613      	movlt	r3, r2
 8027f34:	bfb7      	itett	lt
 8027f36:	930e      	strlt	r3, [sp, #56]	; 0x38
 8027f38:	1b1c      	subge	r4, r3, r4
 8027f3a:	4623      	movlt	r3, r4
 8027f3c:	2400      	movlt	r4, #0
 8027f3e:	f1b9 0f00 	cmp.w	r9, #0
 8027f42:	bfb5      	itete	lt
 8027f44:	9a05      	ldrlt	r2, [sp, #20]
 8027f46:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8027f4a:	eba2 0809 	sublt.w	r8, r2, r9
 8027f4e:	464a      	movge	r2, r9
 8027f50:	bfb8      	it	lt
 8027f52:	2200      	movlt	r2, #0
 8027f54:	e73b      	b.n	8027dce <_dtoa_r+0x666>
 8027f56:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8027f5a:	9f08      	ldr	r7, [sp, #32]
 8027f5c:	461c      	mov	r4, r3
 8027f5e:	e743      	b.n	8027de8 <_dtoa_r+0x680>
 8027f60:	461a      	mov	r2, r3
 8027f62:	e76f      	b.n	8027e44 <_dtoa_r+0x6dc>
 8027f64:	9b07      	ldr	r3, [sp, #28]
 8027f66:	2b01      	cmp	r3, #1
 8027f68:	dc18      	bgt.n	8027f9c <_dtoa_r+0x834>
 8027f6a:	9b02      	ldr	r3, [sp, #8]
 8027f6c:	b9b3      	cbnz	r3, 8027f9c <_dtoa_r+0x834>
 8027f6e:	9b03      	ldr	r3, [sp, #12]
 8027f70:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8027f74:	b9a2      	cbnz	r2, 8027fa0 <_dtoa_r+0x838>
 8027f76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8027f7a:	0d12      	lsrs	r2, r2, #20
 8027f7c:	0512      	lsls	r2, r2, #20
 8027f7e:	b18a      	cbz	r2, 8027fa4 <_dtoa_r+0x83c>
 8027f80:	9b05      	ldr	r3, [sp, #20]
 8027f82:	3301      	adds	r3, #1
 8027f84:	9305      	str	r3, [sp, #20]
 8027f86:	9b06      	ldr	r3, [sp, #24]
 8027f88:	3301      	adds	r3, #1
 8027f8a:	9306      	str	r3, [sp, #24]
 8027f8c:	2301      	movs	r3, #1
 8027f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8027f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027f92:	2b00      	cmp	r3, #0
 8027f94:	f47f af6f 	bne.w	8027e76 <_dtoa_r+0x70e>
 8027f98:	2001      	movs	r0, #1
 8027f9a:	e774      	b.n	8027e86 <_dtoa_r+0x71e>
 8027f9c:	2300      	movs	r3, #0
 8027f9e:	e7f6      	b.n	8027f8e <_dtoa_r+0x826>
 8027fa0:	9b02      	ldr	r3, [sp, #8]
 8027fa2:	e7f4      	b.n	8027f8e <_dtoa_r+0x826>
 8027fa4:	920a      	str	r2, [sp, #40]	; 0x28
 8027fa6:	e7f3      	b.n	8027f90 <_dtoa_r+0x828>
 8027fa8:	d081      	beq.n	8027eae <_dtoa_r+0x746>
 8027faa:	4610      	mov	r0, r2
 8027fac:	301c      	adds	r0, #28
 8027fae:	e777      	b.n	8027ea0 <_dtoa_r+0x738>
 8027fb0:	f1b9 0f00 	cmp.w	r9, #0
 8027fb4:	dc37      	bgt.n	8028026 <_dtoa_r+0x8be>
 8027fb6:	9b07      	ldr	r3, [sp, #28]
 8027fb8:	2b02      	cmp	r3, #2
 8027fba:	dd34      	ble.n	8028026 <_dtoa_r+0x8be>
 8027fbc:	46ca      	mov	sl, r9
 8027fbe:	f1ba 0f00 	cmp.w	sl, #0
 8027fc2:	d10d      	bne.n	8027fe0 <_dtoa_r+0x878>
 8027fc4:	4621      	mov	r1, r4
 8027fc6:	4653      	mov	r3, sl
 8027fc8:	2205      	movs	r2, #5
 8027fca:	4630      	mov	r0, r6
 8027fcc:	f000 fbe0 	bl	8028790 <__multadd>
 8027fd0:	4601      	mov	r1, r0
 8027fd2:	4604      	mov	r4, r0
 8027fd4:	4628      	mov	r0, r5
 8027fd6:	f000 fdf7 	bl	8028bc8 <__mcmp>
 8027fda:	2800      	cmp	r0, #0
 8027fdc:	f73f adde 	bgt.w	8027b9c <_dtoa_r+0x434>
 8027fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027fe2:	f8dd 8000 	ldr.w	r8, [sp]
 8027fe6:	ea6f 0b03 	mvn.w	fp, r3
 8027fea:	f04f 0900 	mov.w	r9, #0
 8027fee:	4621      	mov	r1, r4
 8027ff0:	4630      	mov	r0, r6
 8027ff2:	f000 fbab 	bl	802874c <_Bfree>
 8027ff6:	2f00      	cmp	r7, #0
 8027ff8:	f43f aea7 	beq.w	8027d4a <_dtoa_r+0x5e2>
 8027ffc:	f1b9 0f00 	cmp.w	r9, #0
 8028000:	d005      	beq.n	802800e <_dtoa_r+0x8a6>
 8028002:	45b9      	cmp	r9, r7
 8028004:	d003      	beq.n	802800e <_dtoa_r+0x8a6>
 8028006:	4649      	mov	r1, r9
 8028008:	4630      	mov	r0, r6
 802800a:	f000 fb9f 	bl	802874c <_Bfree>
 802800e:	4639      	mov	r1, r7
 8028010:	4630      	mov	r0, r6
 8028012:	f000 fb9b 	bl	802874c <_Bfree>
 8028016:	e698      	b.n	8027d4a <_dtoa_r+0x5e2>
 8028018:	2400      	movs	r4, #0
 802801a:	4627      	mov	r7, r4
 802801c:	e7e0      	b.n	8027fe0 <_dtoa_r+0x878>
 802801e:	46bb      	mov	fp, r7
 8028020:	4604      	mov	r4, r0
 8028022:	4607      	mov	r7, r0
 8028024:	e5ba      	b.n	8027b9c <_dtoa_r+0x434>
 8028026:	9b08      	ldr	r3, [sp, #32]
 8028028:	46ca      	mov	sl, r9
 802802a:	2b00      	cmp	r3, #0
 802802c:	f000 8100 	beq.w	8028230 <_dtoa_r+0xac8>
 8028030:	f1b8 0f00 	cmp.w	r8, #0
 8028034:	dd05      	ble.n	8028042 <_dtoa_r+0x8da>
 8028036:	4639      	mov	r1, r7
 8028038:	4642      	mov	r2, r8
 802803a:	4630      	mov	r0, r6
 802803c:	f000 fd58 	bl	8028af0 <__lshift>
 8028040:	4607      	mov	r7, r0
 8028042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028044:	2b00      	cmp	r3, #0
 8028046:	d05d      	beq.n	8028104 <_dtoa_r+0x99c>
 8028048:	6879      	ldr	r1, [r7, #4]
 802804a:	4630      	mov	r0, r6
 802804c:	f000 fb3e 	bl	80286cc <_Balloc>
 8028050:	4680      	mov	r8, r0
 8028052:	b928      	cbnz	r0, 8028060 <_dtoa_r+0x8f8>
 8028054:	4b82      	ldr	r3, [pc, #520]	; (8028260 <_dtoa_r+0xaf8>)
 8028056:	4602      	mov	r2, r0
 8028058:	f240 21ea 	movw	r1, #746	; 0x2ea
 802805c:	f7ff bb9a 	b.w	8027794 <_dtoa_r+0x2c>
 8028060:	693a      	ldr	r2, [r7, #16]
 8028062:	3202      	adds	r2, #2
 8028064:	0092      	lsls	r2, r2, #2
 8028066:	f107 010c 	add.w	r1, r7, #12
 802806a:	300c      	adds	r0, #12
 802806c:	f7fe fb54 	bl	8026718 <memcpy>
 8028070:	2201      	movs	r2, #1
 8028072:	4641      	mov	r1, r8
 8028074:	4630      	mov	r0, r6
 8028076:	f000 fd3b 	bl	8028af0 <__lshift>
 802807a:	9b00      	ldr	r3, [sp, #0]
 802807c:	3301      	adds	r3, #1
 802807e:	9305      	str	r3, [sp, #20]
 8028080:	9b00      	ldr	r3, [sp, #0]
 8028082:	4453      	add	r3, sl
 8028084:	9309      	str	r3, [sp, #36]	; 0x24
 8028086:	9b02      	ldr	r3, [sp, #8]
 8028088:	f003 0301 	and.w	r3, r3, #1
 802808c:	46b9      	mov	r9, r7
 802808e:	9308      	str	r3, [sp, #32]
 8028090:	4607      	mov	r7, r0
 8028092:	9b05      	ldr	r3, [sp, #20]
 8028094:	4621      	mov	r1, r4
 8028096:	3b01      	subs	r3, #1
 8028098:	4628      	mov	r0, r5
 802809a:	9302      	str	r3, [sp, #8]
 802809c:	f7ff fad8 	bl	8027650 <quorem>
 80280a0:	4603      	mov	r3, r0
 80280a2:	3330      	adds	r3, #48	; 0x30
 80280a4:	9006      	str	r0, [sp, #24]
 80280a6:	4649      	mov	r1, r9
 80280a8:	4628      	mov	r0, r5
 80280aa:	930a      	str	r3, [sp, #40]	; 0x28
 80280ac:	f000 fd8c 	bl	8028bc8 <__mcmp>
 80280b0:	463a      	mov	r2, r7
 80280b2:	4682      	mov	sl, r0
 80280b4:	4621      	mov	r1, r4
 80280b6:	4630      	mov	r0, r6
 80280b8:	f000 fda2 	bl	8028c00 <__mdiff>
 80280bc:	68c2      	ldr	r2, [r0, #12]
 80280be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80280c0:	4680      	mov	r8, r0
 80280c2:	bb0a      	cbnz	r2, 8028108 <_dtoa_r+0x9a0>
 80280c4:	4601      	mov	r1, r0
 80280c6:	4628      	mov	r0, r5
 80280c8:	f000 fd7e 	bl	8028bc8 <__mcmp>
 80280cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80280ce:	4602      	mov	r2, r0
 80280d0:	4641      	mov	r1, r8
 80280d2:	4630      	mov	r0, r6
 80280d4:	920e      	str	r2, [sp, #56]	; 0x38
 80280d6:	930a      	str	r3, [sp, #40]	; 0x28
 80280d8:	f000 fb38 	bl	802874c <_Bfree>
 80280dc:	9b07      	ldr	r3, [sp, #28]
 80280de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80280e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80280e4:	ea43 0102 	orr.w	r1, r3, r2
 80280e8:	9b08      	ldr	r3, [sp, #32]
 80280ea:	430b      	orrs	r3, r1
 80280ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80280ee:	d10d      	bne.n	802810c <_dtoa_r+0x9a4>
 80280f0:	2b39      	cmp	r3, #57	; 0x39
 80280f2:	d029      	beq.n	8028148 <_dtoa_r+0x9e0>
 80280f4:	f1ba 0f00 	cmp.w	sl, #0
 80280f8:	dd01      	ble.n	80280fe <_dtoa_r+0x996>
 80280fa:	9b06      	ldr	r3, [sp, #24]
 80280fc:	3331      	adds	r3, #49	; 0x31
 80280fe:	9a02      	ldr	r2, [sp, #8]
 8028100:	7013      	strb	r3, [r2, #0]
 8028102:	e774      	b.n	8027fee <_dtoa_r+0x886>
 8028104:	4638      	mov	r0, r7
 8028106:	e7b8      	b.n	802807a <_dtoa_r+0x912>
 8028108:	2201      	movs	r2, #1
 802810a:	e7e1      	b.n	80280d0 <_dtoa_r+0x968>
 802810c:	f1ba 0f00 	cmp.w	sl, #0
 8028110:	db06      	blt.n	8028120 <_dtoa_r+0x9b8>
 8028112:	9907      	ldr	r1, [sp, #28]
 8028114:	ea41 0a0a 	orr.w	sl, r1, sl
 8028118:	9908      	ldr	r1, [sp, #32]
 802811a:	ea5a 0101 	orrs.w	r1, sl, r1
 802811e:	d120      	bne.n	8028162 <_dtoa_r+0x9fa>
 8028120:	2a00      	cmp	r2, #0
 8028122:	ddec      	ble.n	80280fe <_dtoa_r+0x996>
 8028124:	4629      	mov	r1, r5
 8028126:	2201      	movs	r2, #1
 8028128:	4630      	mov	r0, r6
 802812a:	9305      	str	r3, [sp, #20]
 802812c:	f000 fce0 	bl	8028af0 <__lshift>
 8028130:	4621      	mov	r1, r4
 8028132:	4605      	mov	r5, r0
 8028134:	f000 fd48 	bl	8028bc8 <__mcmp>
 8028138:	2800      	cmp	r0, #0
 802813a:	9b05      	ldr	r3, [sp, #20]
 802813c:	dc02      	bgt.n	8028144 <_dtoa_r+0x9dc>
 802813e:	d1de      	bne.n	80280fe <_dtoa_r+0x996>
 8028140:	07da      	lsls	r2, r3, #31
 8028142:	d5dc      	bpl.n	80280fe <_dtoa_r+0x996>
 8028144:	2b39      	cmp	r3, #57	; 0x39
 8028146:	d1d8      	bne.n	80280fa <_dtoa_r+0x992>
 8028148:	9a02      	ldr	r2, [sp, #8]
 802814a:	2339      	movs	r3, #57	; 0x39
 802814c:	7013      	strb	r3, [r2, #0]
 802814e:	4643      	mov	r3, r8
 8028150:	4698      	mov	r8, r3
 8028152:	3b01      	subs	r3, #1
 8028154:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8028158:	2a39      	cmp	r2, #57	; 0x39
 802815a:	d051      	beq.n	8028200 <_dtoa_r+0xa98>
 802815c:	3201      	adds	r2, #1
 802815e:	701a      	strb	r2, [r3, #0]
 8028160:	e745      	b.n	8027fee <_dtoa_r+0x886>
 8028162:	2a00      	cmp	r2, #0
 8028164:	dd03      	ble.n	802816e <_dtoa_r+0xa06>
 8028166:	2b39      	cmp	r3, #57	; 0x39
 8028168:	d0ee      	beq.n	8028148 <_dtoa_r+0x9e0>
 802816a:	3301      	adds	r3, #1
 802816c:	e7c7      	b.n	80280fe <_dtoa_r+0x996>
 802816e:	9a05      	ldr	r2, [sp, #20]
 8028170:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028172:	f802 3c01 	strb.w	r3, [r2, #-1]
 8028176:	428a      	cmp	r2, r1
 8028178:	d02b      	beq.n	80281d2 <_dtoa_r+0xa6a>
 802817a:	4629      	mov	r1, r5
 802817c:	2300      	movs	r3, #0
 802817e:	220a      	movs	r2, #10
 8028180:	4630      	mov	r0, r6
 8028182:	f000 fb05 	bl	8028790 <__multadd>
 8028186:	45b9      	cmp	r9, r7
 8028188:	4605      	mov	r5, r0
 802818a:	f04f 0300 	mov.w	r3, #0
 802818e:	f04f 020a 	mov.w	r2, #10
 8028192:	4649      	mov	r1, r9
 8028194:	4630      	mov	r0, r6
 8028196:	d107      	bne.n	80281a8 <_dtoa_r+0xa40>
 8028198:	f000 fafa 	bl	8028790 <__multadd>
 802819c:	4681      	mov	r9, r0
 802819e:	4607      	mov	r7, r0
 80281a0:	9b05      	ldr	r3, [sp, #20]
 80281a2:	3301      	adds	r3, #1
 80281a4:	9305      	str	r3, [sp, #20]
 80281a6:	e774      	b.n	8028092 <_dtoa_r+0x92a>
 80281a8:	f000 faf2 	bl	8028790 <__multadd>
 80281ac:	4639      	mov	r1, r7
 80281ae:	4681      	mov	r9, r0
 80281b0:	2300      	movs	r3, #0
 80281b2:	220a      	movs	r2, #10
 80281b4:	4630      	mov	r0, r6
 80281b6:	f000 faeb 	bl	8028790 <__multadd>
 80281ba:	4607      	mov	r7, r0
 80281bc:	e7f0      	b.n	80281a0 <_dtoa_r+0xa38>
 80281be:	f1ba 0f00 	cmp.w	sl, #0
 80281c2:	9a00      	ldr	r2, [sp, #0]
 80281c4:	bfcc      	ite	gt
 80281c6:	46d0      	movgt	r8, sl
 80281c8:	f04f 0801 	movle.w	r8, #1
 80281cc:	4490      	add	r8, r2
 80281ce:	f04f 0900 	mov.w	r9, #0
 80281d2:	4629      	mov	r1, r5
 80281d4:	2201      	movs	r2, #1
 80281d6:	4630      	mov	r0, r6
 80281d8:	9302      	str	r3, [sp, #8]
 80281da:	f000 fc89 	bl	8028af0 <__lshift>
 80281de:	4621      	mov	r1, r4
 80281e0:	4605      	mov	r5, r0
 80281e2:	f000 fcf1 	bl	8028bc8 <__mcmp>
 80281e6:	2800      	cmp	r0, #0
 80281e8:	dcb1      	bgt.n	802814e <_dtoa_r+0x9e6>
 80281ea:	d102      	bne.n	80281f2 <_dtoa_r+0xa8a>
 80281ec:	9b02      	ldr	r3, [sp, #8]
 80281ee:	07db      	lsls	r3, r3, #31
 80281f0:	d4ad      	bmi.n	802814e <_dtoa_r+0x9e6>
 80281f2:	4643      	mov	r3, r8
 80281f4:	4698      	mov	r8, r3
 80281f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80281fa:	2a30      	cmp	r2, #48	; 0x30
 80281fc:	d0fa      	beq.n	80281f4 <_dtoa_r+0xa8c>
 80281fe:	e6f6      	b.n	8027fee <_dtoa_r+0x886>
 8028200:	9a00      	ldr	r2, [sp, #0]
 8028202:	429a      	cmp	r2, r3
 8028204:	d1a4      	bne.n	8028150 <_dtoa_r+0x9e8>
 8028206:	f10b 0b01 	add.w	fp, fp, #1
 802820a:	2331      	movs	r3, #49	; 0x31
 802820c:	e778      	b.n	8028100 <_dtoa_r+0x998>
 802820e:	4b15      	ldr	r3, [pc, #84]	; (8028264 <_dtoa_r+0xafc>)
 8028210:	f7ff bb12 	b.w	8027838 <_dtoa_r+0xd0>
 8028214:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028216:	2b00      	cmp	r3, #0
 8028218:	f47f aaee 	bne.w	80277f8 <_dtoa_r+0x90>
 802821c:	4b12      	ldr	r3, [pc, #72]	; (8028268 <_dtoa_r+0xb00>)
 802821e:	f7ff bb0b 	b.w	8027838 <_dtoa_r+0xd0>
 8028222:	f1ba 0f00 	cmp.w	sl, #0
 8028226:	dc03      	bgt.n	8028230 <_dtoa_r+0xac8>
 8028228:	9b07      	ldr	r3, [sp, #28]
 802822a:	2b02      	cmp	r3, #2
 802822c:	f73f aec7 	bgt.w	8027fbe <_dtoa_r+0x856>
 8028230:	f8dd 8000 	ldr.w	r8, [sp]
 8028234:	4621      	mov	r1, r4
 8028236:	4628      	mov	r0, r5
 8028238:	f7ff fa0a 	bl	8027650 <quorem>
 802823c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8028240:	f808 3b01 	strb.w	r3, [r8], #1
 8028244:	9a00      	ldr	r2, [sp, #0]
 8028246:	eba8 0202 	sub.w	r2, r8, r2
 802824a:	4592      	cmp	sl, r2
 802824c:	ddb7      	ble.n	80281be <_dtoa_r+0xa56>
 802824e:	4629      	mov	r1, r5
 8028250:	2300      	movs	r3, #0
 8028252:	220a      	movs	r2, #10
 8028254:	4630      	mov	r0, r6
 8028256:	f000 fa9b 	bl	8028790 <__multadd>
 802825a:	4605      	mov	r5, r0
 802825c:	e7ea      	b.n	8028234 <_dtoa_r+0xacc>
 802825e:	bf00      	nop
 8028260:	0802b5cf 	.word	0x0802b5cf
 8028264:	0802b528 	.word	0x0802b528
 8028268:	0802b54c 	.word	0x0802b54c

0802826c <__sflush_r>:
 802826c:	898a      	ldrh	r2, [r1, #12]
 802826e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028272:	4605      	mov	r5, r0
 8028274:	0710      	lsls	r0, r2, #28
 8028276:	460c      	mov	r4, r1
 8028278:	d458      	bmi.n	802832c <__sflush_r+0xc0>
 802827a:	684b      	ldr	r3, [r1, #4]
 802827c:	2b00      	cmp	r3, #0
 802827e:	dc05      	bgt.n	802828c <__sflush_r+0x20>
 8028280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028282:	2b00      	cmp	r3, #0
 8028284:	dc02      	bgt.n	802828c <__sflush_r+0x20>
 8028286:	2000      	movs	r0, #0
 8028288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802828c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802828e:	2e00      	cmp	r6, #0
 8028290:	d0f9      	beq.n	8028286 <__sflush_r+0x1a>
 8028292:	2300      	movs	r3, #0
 8028294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028298:	682f      	ldr	r7, [r5, #0]
 802829a:	602b      	str	r3, [r5, #0]
 802829c:	d032      	beq.n	8028304 <__sflush_r+0x98>
 802829e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80282a0:	89a3      	ldrh	r3, [r4, #12]
 80282a2:	075a      	lsls	r2, r3, #29
 80282a4:	d505      	bpl.n	80282b2 <__sflush_r+0x46>
 80282a6:	6863      	ldr	r3, [r4, #4]
 80282a8:	1ac0      	subs	r0, r0, r3
 80282aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80282ac:	b10b      	cbz	r3, 80282b2 <__sflush_r+0x46>
 80282ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80282b0:	1ac0      	subs	r0, r0, r3
 80282b2:	2300      	movs	r3, #0
 80282b4:	4602      	mov	r2, r0
 80282b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80282b8:	6a21      	ldr	r1, [r4, #32]
 80282ba:	4628      	mov	r0, r5
 80282bc:	47b0      	blx	r6
 80282be:	1c43      	adds	r3, r0, #1
 80282c0:	89a3      	ldrh	r3, [r4, #12]
 80282c2:	d106      	bne.n	80282d2 <__sflush_r+0x66>
 80282c4:	6829      	ldr	r1, [r5, #0]
 80282c6:	291d      	cmp	r1, #29
 80282c8:	d82c      	bhi.n	8028324 <__sflush_r+0xb8>
 80282ca:	4a2a      	ldr	r2, [pc, #168]	; (8028374 <__sflush_r+0x108>)
 80282cc:	40ca      	lsrs	r2, r1
 80282ce:	07d6      	lsls	r6, r2, #31
 80282d0:	d528      	bpl.n	8028324 <__sflush_r+0xb8>
 80282d2:	2200      	movs	r2, #0
 80282d4:	6062      	str	r2, [r4, #4]
 80282d6:	04d9      	lsls	r1, r3, #19
 80282d8:	6922      	ldr	r2, [r4, #16]
 80282da:	6022      	str	r2, [r4, #0]
 80282dc:	d504      	bpl.n	80282e8 <__sflush_r+0x7c>
 80282de:	1c42      	adds	r2, r0, #1
 80282e0:	d101      	bne.n	80282e6 <__sflush_r+0x7a>
 80282e2:	682b      	ldr	r3, [r5, #0]
 80282e4:	b903      	cbnz	r3, 80282e8 <__sflush_r+0x7c>
 80282e6:	6560      	str	r0, [r4, #84]	; 0x54
 80282e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80282ea:	602f      	str	r7, [r5, #0]
 80282ec:	2900      	cmp	r1, #0
 80282ee:	d0ca      	beq.n	8028286 <__sflush_r+0x1a>
 80282f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80282f4:	4299      	cmp	r1, r3
 80282f6:	d002      	beq.n	80282fe <__sflush_r+0x92>
 80282f8:	4628      	mov	r0, r5
 80282fa:	f7fe fa33 	bl	8026764 <_free_r>
 80282fe:	2000      	movs	r0, #0
 8028300:	6360      	str	r0, [r4, #52]	; 0x34
 8028302:	e7c1      	b.n	8028288 <__sflush_r+0x1c>
 8028304:	6a21      	ldr	r1, [r4, #32]
 8028306:	2301      	movs	r3, #1
 8028308:	4628      	mov	r0, r5
 802830a:	47b0      	blx	r6
 802830c:	1c41      	adds	r1, r0, #1
 802830e:	d1c7      	bne.n	80282a0 <__sflush_r+0x34>
 8028310:	682b      	ldr	r3, [r5, #0]
 8028312:	2b00      	cmp	r3, #0
 8028314:	d0c4      	beq.n	80282a0 <__sflush_r+0x34>
 8028316:	2b1d      	cmp	r3, #29
 8028318:	d001      	beq.n	802831e <__sflush_r+0xb2>
 802831a:	2b16      	cmp	r3, #22
 802831c:	d101      	bne.n	8028322 <__sflush_r+0xb6>
 802831e:	602f      	str	r7, [r5, #0]
 8028320:	e7b1      	b.n	8028286 <__sflush_r+0x1a>
 8028322:	89a3      	ldrh	r3, [r4, #12]
 8028324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028328:	81a3      	strh	r3, [r4, #12]
 802832a:	e7ad      	b.n	8028288 <__sflush_r+0x1c>
 802832c:	690f      	ldr	r7, [r1, #16]
 802832e:	2f00      	cmp	r7, #0
 8028330:	d0a9      	beq.n	8028286 <__sflush_r+0x1a>
 8028332:	0793      	lsls	r3, r2, #30
 8028334:	680e      	ldr	r6, [r1, #0]
 8028336:	bf08      	it	eq
 8028338:	694b      	ldreq	r3, [r1, #20]
 802833a:	600f      	str	r7, [r1, #0]
 802833c:	bf18      	it	ne
 802833e:	2300      	movne	r3, #0
 8028340:	eba6 0807 	sub.w	r8, r6, r7
 8028344:	608b      	str	r3, [r1, #8]
 8028346:	f1b8 0f00 	cmp.w	r8, #0
 802834a:	dd9c      	ble.n	8028286 <__sflush_r+0x1a>
 802834c:	6a21      	ldr	r1, [r4, #32]
 802834e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028350:	4643      	mov	r3, r8
 8028352:	463a      	mov	r2, r7
 8028354:	4628      	mov	r0, r5
 8028356:	47b0      	blx	r6
 8028358:	2800      	cmp	r0, #0
 802835a:	dc06      	bgt.n	802836a <__sflush_r+0xfe>
 802835c:	89a3      	ldrh	r3, [r4, #12]
 802835e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028362:	81a3      	strh	r3, [r4, #12]
 8028364:	f04f 30ff 	mov.w	r0, #4294967295
 8028368:	e78e      	b.n	8028288 <__sflush_r+0x1c>
 802836a:	4407      	add	r7, r0
 802836c:	eba8 0800 	sub.w	r8, r8, r0
 8028370:	e7e9      	b.n	8028346 <__sflush_r+0xda>
 8028372:	bf00      	nop
 8028374:	20400001 	.word	0x20400001

08028378 <_fflush_r>:
 8028378:	b538      	push	{r3, r4, r5, lr}
 802837a:	690b      	ldr	r3, [r1, #16]
 802837c:	4605      	mov	r5, r0
 802837e:	460c      	mov	r4, r1
 8028380:	b913      	cbnz	r3, 8028388 <_fflush_r+0x10>
 8028382:	2500      	movs	r5, #0
 8028384:	4628      	mov	r0, r5
 8028386:	bd38      	pop	{r3, r4, r5, pc}
 8028388:	b118      	cbz	r0, 8028392 <_fflush_r+0x1a>
 802838a:	6983      	ldr	r3, [r0, #24]
 802838c:	b90b      	cbnz	r3, 8028392 <_fflush_r+0x1a>
 802838e:	f000 f887 	bl	80284a0 <__sinit>
 8028392:	4b14      	ldr	r3, [pc, #80]	; (80283e4 <_fflush_r+0x6c>)
 8028394:	429c      	cmp	r4, r3
 8028396:	d11b      	bne.n	80283d0 <_fflush_r+0x58>
 8028398:	686c      	ldr	r4, [r5, #4]
 802839a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802839e:	2b00      	cmp	r3, #0
 80283a0:	d0ef      	beq.n	8028382 <_fflush_r+0xa>
 80283a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80283a4:	07d0      	lsls	r0, r2, #31
 80283a6:	d404      	bmi.n	80283b2 <_fflush_r+0x3a>
 80283a8:	0599      	lsls	r1, r3, #22
 80283aa:	d402      	bmi.n	80283b2 <_fflush_r+0x3a>
 80283ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80283ae:	f000 f91a 	bl	80285e6 <__retarget_lock_acquire_recursive>
 80283b2:	4628      	mov	r0, r5
 80283b4:	4621      	mov	r1, r4
 80283b6:	f7ff ff59 	bl	802826c <__sflush_r>
 80283ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80283bc:	07da      	lsls	r2, r3, #31
 80283be:	4605      	mov	r5, r0
 80283c0:	d4e0      	bmi.n	8028384 <_fflush_r+0xc>
 80283c2:	89a3      	ldrh	r3, [r4, #12]
 80283c4:	059b      	lsls	r3, r3, #22
 80283c6:	d4dd      	bmi.n	8028384 <_fflush_r+0xc>
 80283c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80283ca:	f000 f90d 	bl	80285e8 <__retarget_lock_release_recursive>
 80283ce:	e7d9      	b.n	8028384 <_fflush_r+0xc>
 80283d0:	4b05      	ldr	r3, [pc, #20]	; (80283e8 <_fflush_r+0x70>)
 80283d2:	429c      	cmp	r4, r3
 80283d4:	d101      	bne.n	80283da <_fflush_r+0x62>
 80283d6:	68ac      	ldr	r4, [r5, #8]
 80283d8:	e7df      	b.n	802839a <_fflush_r+0x22>
 80283da:	4b04      	ldr	r3, [pc, #16]	; (80283ec <_fflush_r+0x74>)
 80283dc:	429c      	cmp	r4, r3
 80283de:	bf08      	it	eq
 80283e0:	68ec      	ldreq	r4, [r5, #12]
 80283e2:	e7da      	b.n	802839a <_fflush_r+0x22>
 80283e4:	0802b600 	.word	0x0802b600
 80283e8:	0802b620 	.word	0x0802b620
 80283ec:	0802b5e0 	.word	0x0802b5e0

080283f0 <std>:
 80283f0:	2300      	movs	r3, #0
 80283f2:	b510      	push	{r4, lr}
 80283f4:	4604      	mov	r4, r0
 80283f6:	e9c0 3300 	strd	r3, r3, [r0]
 80283fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80283fe:	6083      	str	r3, [r0, #8]
 8028400:	8181      	strh	r1, [r0, #12]
 8028402:	6643      	str	r3, [r0, #100]	; 0x64
 8028404:	81c2      	strh	r2, [r0, #14]
 8028406:	6183      	str	r3, [r0, #24]
 8028408:	4619      	mov	r1, r3
 802840a:	2208      	movs	r2, #8
 802840c:	305c      	adds	r0, #92	; 0x5c
 802840e:	f7fe f991 	bl	8026734 <memset>
 8028412:	4b05      	ldr	r3, [pc, #20]	; (8028428 <std+0x38>)
 8028414:	6263      	str	r3, [r4, #36]	; 0x24
 8028416:	4b05      	ldr	r3, [pc, #20]	; (802842c <std+0x3c>)
 8028418:	62a3      	str	r3, [r4, #40]	; 0x28
 802841a:	4b05      	ldr	r3, [pc, #20]	; (8028430 <std+0x40>)
 802841c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802841e:	4b05      	ldr	r3, [pc, #20]	; (8028434 <std+0x44>)
 8028420:	6224      	str	r4, [r4, #32]
 8028422:	6323      	str	r3, [r4, #48]	; 0x30
 8028424:	bd10      	pop	{r4, pc}
 8028426:	bf00      	nop
 8028428:	08029335 	.word	0x08029335
 802842c:	08029357 	.word	0x08029357
 8028430:	0802938f 	.word	0x0802938f
 8028434:	080293b3 	.word	0x080293b3

08028438 <_cleanup_r>:
 8028438:	4901      	ldr	r1, [pc, #4]	; (8028440 <_cleanup_r+0x8>)
 802843a:	f000 b8af 	b.w	802859c <_fwalk_reent>
 802843e:	bf00      	nop
 8028440:	08028379 	.word	0x08028379

08028444 <__sfmoreglue>:
 8028444:	b570      	push	{r4, r5, r6, lr}
 8028446:	1e4a      	subs	r2, r1, #1
 8028448:	2568      	movs	r5, #104	; 0x68
 802844a:	4355      	muls	r5, r2
 802844c:	460e      	mov	r6, r1
 802844e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028452:	f7fe f9d7 	bl	8026804 <_malloc_r>
 8028456:	4604      	mov	r4, r0
 8028458:	b140      	cbz	r0, 802846c <__sfmoreglue+0x28>
 802845a:	2100      	movs	r1, #0
 802845c:	e9c0 1600 	strd	r1, r6, [r0]
 8028460:	300c      	adds	r0, #12
 8028462:	60a0      	str	r0, [r4, #8]
 8028464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028468:	f7fe f964 	bl	8026734 <memset>
 802846c:	4620      	mov	r0, r4
 802846e:	bd70      	pop	{r4, r5, r6, pc}

08028470 <__sfp_lock_acquire>:
 8028470:	4801      	ldr	r0, [pc, #4]	; (8028478 <__sfp_lock_acquire+0x8>)
 8028472:	f000 b8b8 	b.w	80285e6 <__retarget_lock_acquire_recursive>
 8028476:	bf00      	nop
 8028478:	2400602c 	.word	0x2400602c

0802847c <__sfp_lock_release>:
 802847c:	4801      	ldr	r0, [pc, #4]	; (8028484 <__sfp_lock_release+0x8>)
 802847e:	f000 b8b3 	b.w	80285e8 <__retarget_lock_release_recursive>
 8028482:	bf00      	nop
 8028484:	2400602c 	.word	0x2400602c

08028488 <__sinit_lock_acquire>:
 8028488:	4801      	ldr	r0, [pc, #4]	; (8028490 <__sinit_lock_acquire+0x8>)
 802848a:	f000 b8ac 	b.w	80285e6 <__retarget_lock_acquire_recursive>
 802848e:	bf00      	nop
 8028490:	24006027 	.word	0x24006027

08028494 <__sinit_lock_release>:
 8028494:	4801      	ldr	r0, [pc, #4]	; (802849c <__sinit_lock_release+0x8>)
 8028496:	f000 b8a7 	b.w	80285e8 <__retarget_lock_release_recursive>
 802849a:	bf00      	nop
 802849c:	24006027 	.word	0x24006027

080284a0 <__sinit>:
 80284a0:	b510      	push	{r4, lr}
 80284a2:	4604      	mov	r4, r0
 80284a4:	f7ff fff0 	bl	8028488 <__sinit_lock_acquire>
 80284a8:	69a3      	ldr	r3, [r4, #24]
 80284aa:	b11b      	cbz	r3, 80284b4 <__sinit+0x14>
 80284ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80284b0:	f7ff bff0 	b.w	8028494 <__sinit_lock_release>
 80284b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80284b8:	6523      	str	r3, [r4, #80]	; 0x50
 80284ba:	4b13      	ldr	r3, [pc, #76]	; (8028508 <__sinit+0x68>)
 80284bc:	4a13      	ldr	r2, [pc, #76]	; (802850c <__sinit+0x6c>)
 80284be:	681b      	ldr	r3, [r3, #0]
 80284c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80284c2:	42a3      	cmp	r3, r4
 80284c4:	bf04      	itt	eq
 80284c6:	2301      	moveq	r3, #1
 80284c8:	61a3      	streq	r3, [r4, #24]
 80284ca:	4620      	mov	r0, r4
 80284cc:	f000 f820 	bl	8028510 <__sfp>
 80284d0:	6060      	str	r0, [r4, #4]
 80284d2:	4620      	mov	r0, r4
 80284d4:	f000 f81c 	bl	8028510 <__sfp>
 80284d8:	60a0      	str	r0, [r4, #8]
 80284da:	4620      	mov	r0, r4
 80284dc:	f000 f818 	bl	8028510 <__sfp>
 80284e0:	2200      	movs	r2, #0
 80284e2:	60e0      	str	r0, [r4, #12]
 80284e4:	2104      	movs	r1, #4
 80284e6:	6860      	ldr	r0, [r4, #4]
 80284e8:	f7ff ff82 	bl	80283f0 <std>
 80284ec:	68a0      	ldr	r0, [r4, #8]
 80284ee:	2201      	movs	r2, #1
 80284f0:	2109      	movs	r1, #9
 80284f2:	f7ff ff7d 	bl	80283f0 <std>
 80284f6:	68e0      	ldr	r0, [r4, #12]
 80284f8:	2202      	movs	r2, #2
 80284fa:	2112      	movs	r1, #18
 80284fc:	f7ff ff78 	bl	80283f0 <std>
 8028500:	2301      	movs	r3, #1
 8028502:	61a3      	str	r3, [r4, #24]
 8028504:	e7d2      	b.n	80284ac <__sinit+0xc>
 8028506:	bf00      	nop
 8028508:	0802b514 	.word	0x0802b514
 802850c:	08028439 	.word	0x08028439

08028510 <__sfp>:
 8028510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028512:	4607      	mov	r7, r0
 8028514:	f7ff ffac 	bl	8028470 <__sfp_lock_acquire>
 8028518:	4b1e      	ldr	r3, [pc, #120]	; (8028594 <__sfp+0x84>)
 802851a:	681e      	ldr	r6, [r3, #0]
 802851c:	69b3      	ldr	r3, [r6, #24]
 802851e:	b913      	cbnz	r3, 8028526 <__sfp+0x16>
 8028520:	4630      	mov	r0, r6
 8028522:	f7ff ffbd 	bl	80284a0 <__sinit>
 8028526:	3648      	adds	r6, #72	; 0x48
 8028528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802852c:	3b01      	subs	r3, #1
 802852e:	d503      	bpl.n	8028538 <__sfp+0x28>
 8028530:	6833      	ldr	r3, [r6, #0]
 8028532:	b30b      	cbz	r3, 8028578 <__sfp+0x68>
 8028534:	6836      	ldr	r6, [r6, #0]
 8028536:	e7f7      	b.n	8028528 <__sfp+0x18>
 8028538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802853c:	b9d5      	cbnz	r5, 8028574 <__sfp+0x64>
 802853e:	4b16      	ldr	r3, [pc, #88]	; (8028598 <__sfp+0x88>)
 8028540:	60e3      	str	r3, [r4, #12]
 8028542:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8028546:	6665      	str	r5, [r4, #100]	; 0x64
 8028548:	f000 f84c 	bl	80285e4 <__retarget_lock_init_recursive>
 802854c:	f7ff ff96 	bl	802847c <__sfp_lock_release>
 8028550:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8028554:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8028558:	6025      	str	r5, [r4, #0]
 802855a:	61a5      	str	r5, [r4, #24]
 802855c:	2208      	movs	r2, #8
 802855e:	4629      	mov	r1, r5
 8028560:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028564:	f7fe f8e6 	bl	8026734 <memset>
 8028568:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802856c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028570:	4620      	mov	r0, r4
 8028572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028574:	3468      	adds	r4, #104	; 0x68
 8028576:	e7d9      	b.n	802852c <__sfp+0x1c>
 8028578:	2104      	movs	r1, #4
 802857a:	4638      	mov	r0, r7
 802857c:	f7ff ff62 	bl	8028444 <__sfmoreglue>
 8028580:	4604      	mov	r4, r0
 8028582:	6030      	str	r0, [r6, #0]
 8028584:	2800      	cmp	r0, #0
 8028586:	d1d5      	bne.n	8028534 <__sfp+0x24>
 8028588:	f7ff ff78 	bl	802847c <__sfp_lock_release>
 802858c:	230c      	movs	r3, #12
 802858e:	603b      	str	r3, [r7, #0]
 8028590:	e7ee      	b.n	8028570 <__sfp+0x60>
 8028592:	bf00      	nop
 8028594:	0802b514 	.word	0x0802b514
 8028598:	ffff0001 	.word	0xffff0001

0802859c <_fwalk_reent>:
 802859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80285a0:	4606      	mov	r6, r0
 80285a2:	4688      	mov	r8, r1
 80285a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80285a8:	2700      	movs	r7, #0
 80285aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80285ae:	f1b9 0901 	subs.w	r9, r9, #1
 80285b2:	d505      	bpl.n	80285c0 <_fwalk_reent+0x24>
 80285b4:	6824      	ldr	r4, [r4, #0]
 80285b6:	2c00      	cmp	r4, #0
 80285b8:	d1f7      	bne.n	80285aa <_fwalk_reent+0xe>
 80285ba:	4638      	mov	r0, r7
 80285bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80285c0:	89ab      	ldrh	r3, [r5, #12]
 80285c2:	2b01      	cmp	r3, #1
 80285c4:	d907      	bls.n	80285d6 <_fwalk_reent+0x3a>
 80285c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80285ca:	3301      	adds	r3, #1
 80285cc:	d003      	beq.n	80285d6 <_fwalk_reent+0x3a>
 80285ce:	4629      	mov	r1, r5
 80285d0:	4630      	mov	r0, r6
 80285d2:	47c0      	blx	r8
 80285d4:	4307      	orrs	r7, r0
 80285d6:	3568      	adds	r5, #104	; 0x68
 80285d8:	e7e9      	b.n	80285ae <_fwalk_reent+0x12>
	...

080285dc <_localeconv_r>:
 80285dc:	4800      	ldr	r0, [pc, #0]	; (80285e0 <_localeconv_r+0x4>)
 80285de:	4770      	bx	lr
 80285e0:	240003f8 	.word	0x240003f8

080285e4 <__retarget_lock_init_recursive>:
 80285e4:	4770      	bx	lr

080285e6 <__retarget_lock_acquire_recursive>:
 80285e6:	4770      	bx	lr

080285e8 <__retarget_lock_release_recursive>:
 80285e8:	4770      	bx	lr

080285ea <__swhatbuf_r>:
 80285ea:	b570      	push	{r4, r5, r6, lr}
 80285ec:	460e      	mov	r6, r1
 80285ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80285f2:	2900      	cmp	r1, #0
 80285f4:	b096      	sub	sp, #88	; 0x58
 80285f6:	4614      	mov	r4, r2
 80285f8:	461d      	mov	r5, r3
 80285fa:	da07      	bge.n	802860c <__swhatbuf_r+0x22>
 80285fc:	2300      	movs	r3, #0
 80285fe:	602b      	str	r3, [r5, #0]
 8028600:	89b3      	ldrh	r3, [r6, #12]
 8028602:	061a      	lsls	r2, r3, #24
 8028604:	d410      	bmi.n	8028628 <__swhatbuf_r+0x3e>
 8028606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802860a:	e00e      	b.n	802862a <__swhatbuf_r+0x40>
 802860c:	466a      	mov	r2, sp
 802860e:	f000 ff27 	bl	8029460 <_fstat_r>
 8028612:	2800      	cmp	r0, #0
 8028614:	dbf2      	blt.n	80285fc <__swhatbuf_r+0x12>
 8028616:	9a01      	ldr	r2, [sp, #4]
 8028618:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802861c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028620:	425a      	negs	r2, r3
 8028622:	415a      	adcs	r2, r3
 8028624:	602a      	str	r2, [r5, #0]
 8028626:	e7ee      	b.n	8028606 <__swhatbuf_r+0x1c>
 8028628:	2340      	movs	r3, #64	; 0x40
 802862a:	2000      	movs	r0, #0
 802862c:	6023      	str	r3, [r4, #0]
 802862e:	b016      	add	sp, #88	; 0x58
 8028630:	bd70      	pop	{r4, r5, r6, pc}
	...

08028634 <__smakebuf_r>:
 8028634:	898b      	ldrh	r3, [r1, #12]
 8028636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028638:	079d      	lsls	r5, r3, #30
 802863a:	4606      	mov	r6, r0
 802863c:	460c      	mov	r4, r1
 802863e:	d507      	bpl.n	8028650 <__smakebuf_r+0x1c>
 8028640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028644:	6023      	str	r3, [r4, #0]
 8028646:	6123      	str	r3, [r4, #16]
 8028648:	2301      	movs	r3, #1
 802864a:	6163      	str	r3, [r4, #20]
 802864c:	b002      	add	sp, #8
 802864e:	bd70      	pop	{r4, r5, r6, pc}
 8028650:	ab01      	add	r3, sp, #4
 8028652:	466a      	mov	r2, sp
 8028654:	f7ff ffc9 	bl	80285ea <__swhatbuf_r>
 8028658:	9900      	ldr	r1, [sp, #0]
 802865a:	4605      	mov	r5, r0
 802865c:	4630      	mov	r0, r6
 802865e:	f7fe f8d1 	bl	8026804 <_malloc_r>
 8028662:	b948      	cbnz	r0, 8028678 <__smakebuf_r+0x44>
 8028664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028668:	059a      	lsls	r2, r3, #22
 802866a:	d4ef      	bmi.n	802864c <__smakebuf_r+0x18>
 802866c:	f023 0303 	bic.w	r3, r3, #3
 8028670:	f043 0302 	orr.w	r3, r3, #2
 8028674:	81a3      	strh	r3, [r4, #12]
 8028676:	e7e3      	b.n	8028640 <__smakebuf_r+0xc>
 8028678:	4b0d      	ldr	r3, [pc, #52]	; (80286b0 <__smakebuf_r+0x7c>)
 802867a:	62b3      	str	r3, [r6, #40]	; 0x28
 802867c:	89a3      	ldrh	r3, [r4, #12]
 802867e:	6020      	str	r0, [r4, #0]
 8028680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028684:	81a3      	strh	r3, [r4, #12]
 8028686:	9b00      	ldr	r3, [sp, #0]
 8028688:	6163      	str	r3, [r4, #20]
 802868a:	9b01      	ldr	r3, [sp, #4]
 802868c:	6120      	str	r0, [r4, #16]
 802868e:	b15b      	cbz	r3, 80286a8 <__smakebuf_r+0x74>
 8028690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028694:	4630      	mov	r0, r6
 8028696:	f000 fef5 	bl	8029484 <_isatty_r>
 802869a:	b128      	cbz	r0, 80286a8 <__smakebuf_r+0x74>
 802869c:	89a3      	ldrh	r3, [r4, #12]
 802869e:	f023 0303 	bic.w	r3, r3, #3
 80286a2:	f043 0301 	orr.w	r3, r3, #1
 80286a6:	81a3      	strh	r3, [r4, #12]
 80286a8:	89a0      	ldrh	r0, [r4, #12]
 80286aa:	4305      	orrs	r5, r0
 80286ac:	81a5      	strh	r5, [r4, #12]
 80286ae:	e7cd      	b.n	802864c <__smakebuf_r+0x18>
 80286b0:	08028439 	.word	0x08028439

080286b4 <__malloc_lock>:
 80286b4:	4801      	ldr	r0, [pc, #4]	; (80286bc <__malloc_lock+0x8>)
 80286b6:	f7ff bf96 	b.w	80285e6 <__retarget_lock_acquire_recursive>
 80286ba:	bf00      	nop
 80286bc:	24006028 	.word	0x24006028

080286c0 <__malloc_unlock>:
 80286c0:	4801      	ldr	r0, [pc, #4]	; (80286c8 <__malloc_unlock+0x8>)
 80286c2:	f7ff bf91 	b.w	80285e8 <__retarget_lock_release_recursive>
 80286c6:	bf00      	nop
 80286c8:	24006028 	.word	0x24006028

080286cc <_Balloc>:
 80286cc:	b570      	push	{r4, r5, r6, lr}
 80286ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80286d0:	4604      	mov	r4, r0
 80286d2:	460d      	mov	r5, r1
 80286d4:	b976      	cbnz	r6, 80286f4 <_Balloc+0x28>
 80286d6:	2010      	movs	r0, #16
 80286d8:	f7fe f816 	bl	8026708 <malloc>
 80286dc:	4602      	mov	r2, r0
 80286de:	6260      	str	r0, [r4, #36]	; 0x24
 80286e0:	b920      	cbnz	r0, 80286ec <_Balloc+0x20>
 80286e2:	4b18      	ldr	r3, [pc, #96]	; (8028744 <_Balloc+0x78>)
 80286e4:	4818      	ldr	r0, [pc, #96]	; (8028748 <_Balloc+0x7c>)
 80286e6:	2166      	movs	r1, #102	; 0x66
 80286e8:	f000 fe7a 	bl	80293e0 <__assert_func>
 80286ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80286f0:	6006      	str	r6, [r0, #0]
 80286f2:	60c6      	str	r6, [r0, #12]
 80286f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80286f6:	68f3      	ldr	r3, [r6, #12]
 80286f8:	b183      	cbz	r3, 802871c <_Balloc+0x50>
 80286fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80286fc:	68db      	ldr	r3, [r3, #12]
 80286fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8028702:	b9b8      	cbnz	r0, 8028734 <_Balloc+0x68>
 8028704:	2101      	movs	r1, #1
 8028706:	fa01 f605 	lsl.w	r6, r1, r5
 802870a:	1d72      	adds	r2, r6, #5
 802870c:	0092      	lsls	r2, r2, #2
 802870e:	4620      	mov	r0, r4
 8028710:	f7fe f818 	bl	8026744 <_calloc_r>
 8028714:	b160      	cbz	r0, 8028730 <_Balloc+0x64>
 8028716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802871a:	e00e      	b.n	802873a <_Balloc+0x6e>
 802871c:	2221      	movs	r2, #33	; 0x21
 802871e:	2104      	movs	r1, #4
 8028720:	4620      	mov	r0, r4
 8028722:	f7fe f80f 	bl	8026744 <_calloc_r>
 8028726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028728:	60f0      	str	r0, [r6, #12]
 802872a:	68db      	ldr	r3, [r3, #12]
 802872c:	2b00      	cmp	r3, #0
 802872e:	d1e4      	bne.n	80286fa <_Balloc+0x2e>
 8028730:	2000      	movs	r0, #0
 8028732:	bd70      	pop	{r4, r5, r6, pc}
 8028734:	6802      	ldr	r2, [r0, #0]
 8028736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802873a:	2300      	movs	r3, #0
 802873c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028740:	e7f7      	b.n	8028732 <_Balloc+0x66>
 8028742:	bf00      	nop
 8028744:	0802b559 	.word	0x0802b559
 8028748:	0802b640 	.word	0x0802b640

0802874c <_Bfree>:
 802874c:	b570      	push	{r4, r5, r6, lr}
 802874e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8028750:	4605      	mov	r5, r0
 8028752:	460c      	mov	r4, r1
 8028754:	b976      	cbnz	r6, 8028774 <_Bfree+0x28>
 8028756:	2010      	movs	r0, #16
 8028758:	f7fd ffd6 	bl	8026708 <malloc>
 802875c:	4602      	mov	r2, r0
 802875e:	6268      	str	r0, [r5, #36]	; 0x24
 8028760:	b920      	cbnz	r0, 802876c <_Bfree+0x20>
 8028762:	4b09      	ldr	r3, [pc, #36]	; (8028788 <_Bfree+0x3c>)
 8028764:	4809      	ldr	r0, [pc, #36]	; (802878c <_Bfree+0x40>)
 8028766:	218a      	movs	r1, #138	; 0x8a
 8028768:	f000 fe3a 	bl	80293e0 <__assert_func>
 802876c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028770:	6006      	str	r6, [r0, #0]
 8028772:	60c6      	str	r6, [r0, #12]
 8028774:	b13c      	cbz	r4, 8028786 <_Bfree+0x3a>
 8028776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8028778:	6862      	ldr	r2, [r4, #4]
 802877a:	68db      	ldr	r3, [r3, #12]
 802877c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028780:	6021      	str	r1, [r4, #0]
 8028782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8028786:	bd70      	pop	{r4, r5, r6, pc}
 8028788:	0802b559 	.word	0x0802b559
 802878c:	0802b640 	.word	0x0802b640

08028790 <__multadd>:
 8028790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028794:	690e      	ldr	r6, [r1, #16]
 8028796:	4607      	mov	r7, r0
 8028798:	4698      	mov	r8, r3
 802879a:	460c      	mov	r4, r1
 802879c:	f101 0014 	add.w	r0, r1, #20
 80287a0:	2300      	movs	r3, #0
 80287a2:	6805      	ldr	r5, [r0, #0]
 80287a4:	b2a9      	uxth	r1, r5
 80287a6:	fb02 8101 	mla	r1, r2, r1, r8
 80287aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80287ae:	0c2d      	lsrs	r5, r5, #16
 80287b0:	fb02 c505 	mla	r5, r2, r5, ip
 80287b4:	b289      	uxth	r1, r1
 80287b6:	3301      	adds	r3, #1
 80287b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80287bc:	429e      	cmp	r6, r3
 80287be:	f840 1b04 	str.w	r1, [r0], #4
 80287c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80287c6:	dcec      	bgt.n	80287a2 <__multadd+0x12>
 80287c8:	f1b8 0f00 	cmp.w	r8, #0
 80287cc:	d022      	beq.n	8028814 <__multadd+0x84>
 80287ce:	68a3      	ldr	r3, [r4, #8]
 80287d0:	42b3      	cmp	r3, r6
 80287d2:	dc19      	bgt.n	8028808 <__multadd+0x78>
 80287d4:	6861      	ldr	r1, [r4, #4]
 80287d6:	4638      	mov	r0, r7
 80287d8:	3101      	adds	r1, #1
 80287da:	f7ff ff77 	bl	80286cc <_Balloc>
 80287de:	4605      	mov	r5, r0
 80287e0:	b928      	cbnz	r0, 80287ee <__multadd+0x5e>
 80287e2:	4602      	mov	r2, r0
 80287e4:	4b0d      	ldr	r3, [pc, #52]	; (802881c <__multadd+0x8c>)
 80287e6:	480e      	ldr	r0, [pc, #56]	; (8028820 <__multadd+0x90>)
 80287e8:	21b5      	movs	r1, #181	; 0xb5
 80287ea:	f000 fdf9 	bl	80293e0 <__assert_func>
 80287ee:	6922      	ldr	r2, [r4, #16]
 80287f0:	3202      	adds	r2, #2
 80287f2:	f104 010c 	add.w	r1, r4, #12
 80287f6:	0092      	lsls	r2, r2, #2
 80287f8:	300c      	adds	r0, #12
 80287fa:	f7fd ff8d 	bl	8026718 <memcpy>
 80287fe:	4621      	mov	r1, r4
 8028800:	4638      	mov	r0, r7
 8028802:	f7ff ffa3 	bl	802874c <_Bfree>
 8028806:	462c      	mov	r4, r5
 8028808:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802880c:	3601      	adds	r6, #1
 802880e:	f8c3 8014 	str.w	r8, [r3, #20]
 8028812:	6126      	str	r6, [r4, #16]
 8028814:	4620      	mov	r0, r4
 8028816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802881a:	bf00      	nop
 802881c:	0802b5cf 	.word	0x0802b5cf
 8028820:	0802b640 	.word	0x0802b640

08028824 <__hi0bits>:
 8028824:	0c03      	lsrs	r3, r0, #16
 8028826:	041b      	lsls	r3, r3, #16
 8028828:	b9d3      	cbnz	r3, 8028860 <__hi0bits+0x3c>
 802882a:	0400      	lsls	r0, r0, #16
 802882c:	2310      	movs	r3, #16
 802882e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8028832:	bf04      	itt	eq
 8028834:	0200      	lsleq	r0, r0, #8
 8028836:	3308      	addeq	r3, #8
 8028838:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802883c:	bf04      	itt	eq
 802883e:	0100      	lsleq	r0, r0, #4
 8028840:	3304      	addeq	r3, #4
 8028842:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8028846:	bf04      	itt	eq
 8028848:	0080      	lsleq	r0, r0, #2
 802884a:	3302      	addeq	r3, #2
 802884c:	2800      	cmp	r0, #0
 802884e:	db05      	blt.n	802885c <__hi0bits+0x38>
 8028850:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8028854:	f103 0301 	add.w	r3, r3, #1
 8028858:	bf08      	it	eq
 802885a:	2320      	moveq	r3, #32
 802885c:	4618      	mov	r0, r3
 802885e:	4770      	bx	lr
 8028860:	2300      	movs	r3, #0
 8028862:	e7e4      	b.n	802882e <__hi0bits+0xa>

08028864 <__lo0bits>:
 8028864:	6803      	ldr	r3, [r0, #0]
 8028866:	f013 0207 	ands.w	r2, r3, #7
 802886a:	4601      	mov	r1, r0
 802886c:	d00b      	beq.n	8028886 <__lo0bits+0x22>
 802886e:	07da      	lsls	r2, r3, #31
 8028870:	d424      	bmi.n	80288bc <__lo0bits+0x58>
 8028872:	0798      	lsls	r0, r3, #30
 8028874:	bf49      	itett	mi
 8028876:	085b      	lsrmi	r3, r3, #1
 8028878:	089b      	lsrpl	r3, r3, #2
 802887a:	2001      	movmi	r0, #1
 802887c:	600b      	strmi	r3, [r1, #0]
 802887e:	bf5c      	itt	pl
 8028880:	600b      	strpl	r3, [r1, #0]
 8028882:	2002      	movpl	r0, #2
 8028884:	4770      	bx	lr
 8028886:	b298      	uxth	r0, r3
 8028888:	b9b0      	cbnz	r0, 80288b8 <__lo0bits+0x54>
 802888a:	0c1b      	lsrs	r3, r3, #16
 802888c:	2010      	movs	r0, #16
 802888e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8028892:	bf04      	itt	eq
 8028894:	0a1b      	lsreq	r3, r3, #8
 8028896:	3008      	addeq	r0, #8
 8028898:	071a      	lsls	r2, r3, #28
 802889a:	bf04      	itt	eq
 802889c:	091b      	lsreq	r3, r3, #4
 802889e:	3004      	addeq	r0, #4
 80288a0:	079a      	lsls	r2, r3, #30
 80288a2:	bf04      	itt	eq
 80288a4:	089b      	lsreq	r3, r3, #2
 80288a6:	3002      	addeq	r0, #2
 80288a8:	07da      	lsls	r2, r3, #31
 80288aa:	d403      	bmi.n	80288b4 <__lo0bits+0x50>
 80288ac:	085b      	lsrs	r3, r3, #1
 80288ae:	f100 0001 	add.w	r0, r0, #1
 80288b2:	d005      	beq.n	80288c0 <__lo0bits+0x5c>
 80288b4:	600b      	str	r3, [r1, #0]
 80288b6:	4770      	bx	lr
 80288b8:	4610      	mov	r0, r2
 80288ba:	e7e8      	b.n	802888e <__lo0bits+0x2a>
 80288bc:	2000      	movs	r0, #0
 80288be:	4770      	bx	lr
 80288c0:	2020      	movs	r0, #32
 80288c2:	4770      	bx	lr

080288c4 <__i2b>:
 80288c4:	b510      	push	{r4, lr}
 80288c6:	460c      	mov	r4, r1
 80288c8:	2101      	movs	r1, #1
 80288ca:	f7ff feff 	bl	80286cc <_Balloc>
 80288ce:	4602      	mov	r2, r0
 80288d0:	b928      	cbnz	r0, 80288de <__i2b+0x1a>
 80288d2:	4b05      	ldr	r3, [pc, #20]	; (80288e8 <__i2b+0x24>)
 80288d4:	4805      	ldr	r0, [pc, #20]	; (80288ec <__i2b+0x28>)
 80288d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80288da:	f000 fd81 	bl	80293e0 <__assert_func>
 80288de:	2301      	movs	r3, #1
 80288e0:	6144      	str	r4, [r0, #20]
 80288e2:	6103      	str	r3, [r0, #16]
 80288e4:	bd10      	pop	{r4, pc}
 80288e6:	bf00      	nop
 80288e8:	0802b5cf 	.word	0x0802b5cf
 80288ec:	0802b640 	.word	0x0802b640

080288f0 <__multiply>:
 80288f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288f4:	4614      	mov	r4, r2
 80288f6:	690a      	ldr	r2, [r1, #16]
 80288f8:	6923      	ldr	r3, [r4, #16]
 80288fa:	429a      	cmp	r2, r3
 80288fc:	bfb8      	it	lt
 80288fe:	460b      	movlt	r3, r1
 8028900:	460d      	mov	r5, r1
 8028902:	bfbc      	itt	lt
 8028904:	4625      	movlt	r5, r4
 8028906:	461c      	movlt	r4, r3
 8028908:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802890c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8028910:	68ab      	ldr	r3, [r5, #8]
 8028912:	6869      	ldr	r1, [r5, #4]
 8028914:	eb0a 0709 	add.w	r7, sl, r9
 8028918:	42bb      	cmp	r3, r7
 802891a:	b085      	sub	sp, #20
 802891c:	bfb8      	it	lt
 802891e:	3101      	addlt	r1, #1
 8028920:	f7ff fed4 	bl	80286cc <_Balloc>
 8028924:	b930      	cbnz	r0, 8028934 <__multiply+0x44>
 8028926:	4602      	mov	r2, r0
 8028928:	4b42      	ldr	r3, [pc, #264]	; (8028a34 <__multiply+0x144>)
 802892a:	4843      	ldr	r0, [pc, #268]	; (8028a38 <__multiply+0x148>)
 802892c:	f240 115d 	movw	r1, #349	; 0x15d
 8028930:	f000 fd56 	bl	80293e0 <__assert_func>
 8028934:	f100 0614 	add.w	r6, r0, #20
 8028938:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802893c:	4633      	mov	r3, r6
 802893e:	2200      	movs	r2, #0
 8028940:	4543      	cmp	r3, r8
 8028942:	d31e      	bcc.n	8028982 <__multiply+0x92>
 8028944:	f105 0c14 	add.w	ip, r5, #20
 8028948:	f104 0314 	add.w	r3, r4, #20
 802894c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8028950:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8028954:	9202      	str	r2, [sp, #8]
 8028956:	ebac 0205 	sub.w	r2, ip, r5
 802895a:	3a15      	subs	r2, #21
 802895c:	f022 0203 	bic.w	r2, r2, #3
 8028960:	3204      	adds	r2, #4
 8028962:	f105 0115 	add.w	r1, r5, #21
 8028966:	458c      	cmp	ip, r1
 8028968:	bf38      	it	cc
 802896a:	2204      	movcc	r2, #4
 802896c:	9201      	str	r2, [sp, #4]
 802896e:	9a02      	ldr	r2, [sp, #8]
 8028970:	9303      	str	r3, [sp, #12]
 8028972:	429a      	cmp	r2, r3
 8028974:	d808      	bhi.n	8028988 <__multiply+0x98>
 8028976:	2f00      	cmp	r7, #0
 8028978:	dc55      	bgt.n	8028a26 <__multiply+0x136>
 802897a:	6107      	str	r7, [r0, #16]
 802897c:	b005      	add	sp, #20
 802897e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028982:	f843 2b04 	str.w	r2, [r3], #4
 8028986:	e7db      	b.n	8028940 <__multiply+0x50>
 8028988:	f8b3 a000 	ldrh.w	sl, [r3]
 802898c:	f1ba 0f00 	cmp.w	sl, #0
 8028990:	d020      	beq.n	80289d4 <__multiply+0xe4>
 8028992:	f105 0e14 	add.w	lr, r5, #20
 8028996:	46b1      	mov	r9, r6
 8028998:	2200      	movs	r2, #0
 802899a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802899e:	f8d9 b000 	ldr.w	fp, [r9]
 80289a2:	b2a1      	uxth	r1, r4
 80289a4:	fa1f fb8b 	uxth.w	fp, fp
 80289a8:	fb0a b101 	mla	r1, sl, r1, fp
 80289ac:	4411      	add	r1, r2
 80289ae:	f8d9 2000 	ldr.w	r2, [r9]
 80289b2:	0c24      	lsrs	r4, r4, #16
 80289b4:	0c12      	lsrs	r2, r2, #16
 80289b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80289ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80289be:	b289      	uxth	r1, r1
 80289c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80289c4:	45f4      	cmp	ip, lr
 80289c6:	f849 1b04 	str.w	r1, [r9], #4
 80289ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80289ce:	d8e4      	bhi.n	802899a <__multiply+0xaa>
 80289d0:	9901      	ldr	r1, [sp, #4]
 80289d2:	5072      	str	r2, [r6, r1]
 80289d4:	9a03      	ldr	r2, [sp, #12]
 80289d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80289da:	3304      	adds	r3, #4
 80289dc:	f1b9 0f00 	cmp.w	r9, #0
 80289e0:	d01f      	beq.n	8028a22 <__multiply+0x132>
 80289e2:	6834      	ldr	r4, [r6, #0]
 80289e4:	f105 0114 	add.w	r1, r5, #20
 80289e8:	46b6      	mov	lr, r6
 80289ea:	f04f 0a00 	mov.w	sl, #0
 80289ee:	880a      	ldrh	r2, [r1, #0]
 80289f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80289f4:	fb09 b202 	mla	r2, r9, r2, fp
 80289f8:	4492      	add	sl, r2
 80289fa:	b2a4      	uxth	r4, r4
 80289fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8028a00:	f84e 4b04 	str.w	r4, [lr], #4
 8028a04:	f851 4b04 	ldr.w	r4, [r1], #4
 8028a08:	f8be 2000 	ldrh.w	r2, [lr]
 8028a0c:	0c24      	lsrs	r4, r4, #16
 8028a0e:	fb09 2404 	mla	r4, r9, r4, r2
 8028a12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8028a16:	458c      	cmp	ip, r1
 8028a18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8028a1c:	d8e7      	bhi.n	80289ee <__multiply+0xfe>
 8028a1e:	9a01      	ldr	r2, [sp, #4]
 8028a20:	50b4      	str	r4, [r6, r2]
 8028a22:	3604      	adds	r6, #4
 8028a24:	e7a3      	b.n	802896e <__multiply+0x7e>
 8028a26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8028a2a:	2b00      	cmp	r3, #0
 8028a2c:	d1a5      	bne.n	802897a <__multiply+0x8a>
 8028a2e:	3f01      	subs	r7, #1
 8028a30:	e7a1      	b.n	8028976 <__multiply+0x86>
 8028a32:	bf00      	nop
 8028a34:	0802b5cf 	.word	0x0802b5cf
 8028a38:	0802b640 	.word	0x0802b640

08028a3c <__pow5mult>:
 8028a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028a40:	4615      	mov	r5, r2
 8028a42:	f012 0203 	ands.w	r2, r2, #3
 8028a46:	4606      	mov	r6, r0
 8028a48:	460f      	mov	r7, r1
 8028a4a:	d007      	beq.n	8028a5c <__pow5mult+0x20>
 8028a4c:	4c25      	ldr	r4, [pc, #148]	; (8028ae4 <__pow5mult+0xa8>)
 8028a4e:	3a01      	subs	r2, #1
 8028a50:	2300      	movs	r3, #0
 8028a52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8028a56:	f7ff fe9b 	bl	8028790 <__multadd>
 8028a5a:	4607      	mov	r7, r0
 8028a5c:	10ad      	asrs	r5, r5, #2
 8028a5e:	d03d      	beq.n	8028adc <__pow5mult+0xa0>
 8028a60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8028a62:	b97c      	cbnz	r4, 8028a84 <__pow5mult+0x48>
 8028a64:	2010      	movs	r0, #16
 8028a66:	f7fd fe4f 	bl	8026708 <malloc>
 8028a6a:	4602      	mov	r2, r0
 8028a6c:	6270      	str	r0, [r6, #36]	; 0x24
 8028a6e:	b928      	cbnz	r0, 8028a7c <__pow5mult+0x40>
 8028a70:	4b1d      	ldr	r3, [pc, #116]	; (8028ae8 <__pow5mult+0xac>)
 8028a72:	481e      	ldr	r0, [pc, #120]	; (8028aec <__pow5mult+0xb0>)
 8028a74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8028a78:	f000 fcb2 	bl	80293e0 <__assert_func>
 8028a7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8028a80:	6004      	str	r4, [r0, #0]
 8028a82:	60c4      	str	r4, [r0, #12]
 8028a84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8028a88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8028a8c:	b94c      	cbnz	r4, 8028aa2 <__pow5mult+0x66>
 8028a8e:	f240 2171 	movw	r1, #625	; 0x271
 8028a92:	4630      	mov	r0, r6
 8028a94:	f7ff ff16 	bl	80288c4 <__i2b>
 8028a98:	2300      	movs	r3, #0
 8028a9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8028a9e:	4604      	mov	r4, r0
 8028aa0:	6003      	str	r3, [r0, #0]
 8028aa2:	f04f 0900 	mov.w	r9, #0
 8028aa6:	07eb      	lsls	r3, r5, #31
 8028aa8:	d50a      	bpl.n	8028ac0 <__pow5mult+0x84>
 8028aaa:	4639      	mov	r1, r7
 8028aac:	4622      	mov	r2, r4
 8028aae:	4630      	mov	r0, r6
 8028ab0:	f7ff ff1e 	bl	80288f0 <__multiply>
 8028ab4:	4639      	mov	r1, r7
 8028ab6:	4680      	mov	r8, r0
 8028ab8:	4630      	mov	r0, r6
 8028aba:	f7ff fe47 	bl	802874c <_Bfree>
 8028abe:	4647      	mov	r7, r8
 8028ac0:	106d      	asrs	r5, r5, #1
 8028ac2:	d00b      	beq.n	8028adc <__pow5mult+0xa0>
 8028ac4:	6820      	ldr	r0, [r4, #0]
 8028ac6:	b938      	cbnz	r0, 8028ad8 <__pow5mult+0x9c>
 8028ac8:	4622      	mov	r2, r4
 8028aca:	4621      	mov	r1, r4
 8028acc:	4630      	mov	r0, r6
 8028ace:	f7ff ff0f 	bl	80288f0 <__multiply>
 8028ad2:	6020      	str	r0, [r4, #0]
 8028ad4:	f8c0 9000 	str.w	r9, [r0]
 8028ad8:	4604      	mov	r4, r0
 8028ada:	e7e4      	b.n	8028aa6 <__pow5mult+0x6a>
 8028adc:	4638      	mov	r0, r7
 8028ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028ae2:	bf00      	nop
 8028ae4:	0802b790 	.word	0x0802b790
 8028ae8:	0802b559 	.word	0x0802b559
 8028aec:	0802b640 	.word	0x0802b640

08028af0 <__lshift>:
 8028af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028af4:	460c      	mov	r4, r1
 8028af6:	6849      	ldr	r1, [r1, #4]
 8028af8:	6923      	ldr	r3, [r4, #16]
 8028afa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8028afe:	68a3      	ldr	r3, [r4, #8]
 8028b00:	4607      	mov	r7, r0
 8028b02:	4691      	mov	r9, r2
 8028b04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8028b08:	f108 0601 	add.w	r6, r8, #1
 8028b0c:	42b3      	cmp	r3, r6
 8028b0e:	db0b      	blt.n	8028b28 <__lshift+0x38>
 8028b10:	4638      	mov	r0, r7
 8028b12:	f7ff fddb 	bl	80286cc <_Balloc>
 8028b16:	4605      	mov	r5, r0
 8028b18:	b948      	cbnz	r0, 8028b2e <__lshift+0x3e>
 8028b1a:	4602      	mov	r2, r0
 8028b1c:	4b28      	ldr	r3, [pc, #160]	; (8028bc0 <__lshift+0xd0>)
 8028b1e:	4829      	ldr	r0, [pc, #164]	; (8028bc4 <__lshift+0xd4>)
 8028b20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8028b24:	f000 fc5c 	bl	80293e0 <__assert_func>
 8028b28:	3101      	adds	r1, #1
 8028b2a:	005b      	lsls	r3, r3, #1
 8028b2c:	e7ee      	b.n	8028b0c <__lshift+0x1c>
 8028b2e:	2300      	movs	r3, #0
 8028b30:	f100 0114 	add.w	r1, r0, #20
 8028b34:	f100 0210 	add.w	r2, r0, #16
 8028b38:	4618      	mov	r0, r3
 8028b3a:	4553      	cmp	r3, sl
 8028b3c:	db33      	blt.n	8028ba6 <__lshift+0xb6>
 8028b3e:	6920      	ldr	r0, [r4, #16]
 8028b40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8028b44:	f104 0314 	add.w	r3, r4, #20
 8028b48:	f019 091f 	ands.w	r9, r9, #31
 8028b4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8028b50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8028b54:	d02b      	beq.n	8028bae <__lshift+0xbe>
 8028b56:	f1c9 0e20 	rsb	lr, r9, #32
 8028b5a:	468a      	mov	sl, r1
 8028b5c:	2200      	movs	r2, #0
 8028b5e:	6818      	ldr	r0, [r3, #0]
 8028b60:	fa00 f009 	lsl.w	r0, r0, r9
 8028b64:	4302      	orrs	r2, r0
 8028b66:	f84a 2b04 	str.w	r2, [sl], #4
 8028b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8028b6e:	459c      	cmp	ip, r3
 8028b70:	fa22 f20e 	lsr.w	r2, r2, lr
 8028b74:	d8f3      	bhi.n	8028b5e <__lshift+0x6e>
 8028b76:	ebac 0304 	sub.w	r3, ip, r4
 8028b7a:	3b15      	subs	r3, #21
 8028b7c:	f023 0303 	bic.w	r3, r3, #3
 8028b80:	3304      	adds	r3, #4
 8028b82:	f104 0015 	add.w	r0, r4, #21
 8028b86:	4584      	cmp	ip, r0
 8028b88:	bf38      	it	cc
 8028b8a:	2304      	movcc	r3, #4
 8028b8c:	50ca      	str	r2, [r1, r3]
 8028b8e:	b10a      	cbz	r2, 8028b94 <__lshift+0xa4>
 8028b90:	f108 0602 	add.w	r6, r8, #2
 8028b94:	3e01      	subs	r6, #1
 8028b96:	4638      	mov	r0, r7
 8028b98:	612e      	str	r6, [r5, #16]
 8028b9a:	4621      	mov	r1, r4
 8028b9c:	f7ff fdd6 	bl	802874c <_Bfree>
 8028ba0:	4628      	mov	r0, r5
 8028ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8028baa:	3301      	adds	r3, #1
 8028bac:	e7c5      	b.n	8028b3a <__lshift+0x4a>
 8028bae:	3904      	subs	r1, #4
 8028bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8028bb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8028bb8:	459c      	cmp	ip, r3
 8028bba:	d8f9      	bhi.n	8028bb0 <__lshift+0xc0>
 8028bbc:	e7ea      	b.n	8028b94 <__lshift+0xa4>
 8028bbe:	bf00      	nop
 8028bc0:	0802b5cf 	.word	0x0802b5cf
 8028bc4:	0802b640 	.word	0x0802b640

08028bc8 <__mcmp>:
 8028bc8:	b530      	push	{r4, r5, lr}
 8028bca:	6902      	ldr	r2, [r0, #16]
 8028bcc:	690c      	ldr	r4, [r1, #16]
 8028bce:	1b12      	subs	r2, r2, r4
 8028bd0:	d10e      	bne.n	8028bf0 <__mcmp+0x28>
 8028bd2:	f100 0314 	add.w	r3, r0, #20
 8028bd6:	3114      	adds	r1, #20
 8028bd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8028bdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8028be0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8028be4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8028be8:	42a5      	cmp	r5, r4
 8028bea:	d003      	beq.n	8028bf4 <__mcmp+0x2c>
 8028bec:	d305      	bcc.n	8028bfa <__mcmp+0x32>
 8028bee:	2201      	movs	r2, #1
 8028bf0:	4610      	mov	r0, r2
 8028bf2:	bd30      	pop	{r4, r5, pc}
 8028bf4:	4283      	cmp	r3, r0
 8028bf6:	d3f3      	bcc.n	8028be0 <__mcmp+0x18>
 8028bf8:	e7fa      	b.n	8028bf0 <__mcmp+0x28>
 8028bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8028bfe:	e7f7      	b.n	8028bf0 <__mcmp+0x28>

08028c00 <__mdiff>:
 8028c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c04:	460c      	mov	r4, r1
 8028c06:	4606      	mov	r6, r0
 8028c08:	4611      	mov	r1, r2
 8028c0a:	4620      	mov	r0, r4
 8028c0c:	4617      	mov	r7, r2
 8028c0e:	f7ff ffdb 	bl	8028bc8 <__mcmp>
 8028c12:	1e05      	subs	r5, r0, #0
 8028c14:	d110      	bne.n	8028c38 <__mdiff+0x38>
 8028c16:	4629      	mov	r1, r5
 8028c18:	4630      	mov	r0, r6
 8028c1a:	f7ff fd57 	bl	80286cc <_Balloc>
 8028c1e:	b930      	cbnz	r0, 8028c2e <__mdiff+0x2e>
 8028c20:	4b39      	ldr	r3, [pc, #228]	; (8028d08 <__mdiff+0x108>)
 8028c22:	4602      	mov	r2, r0
 8028c24:	f240 2132 	movw	r1, #562	; 0x232
 8028c28:	4838      	ldr	r0, [pc, #224]	; (8028d0c <__mdiff+0x10c>)
 8028c2a:	f000 fbd9 	bl	80293e0 <__assert_func>
 8028c2e:	2301      	movs	r3, #1
 8028c30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8028c34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c38:	bfa4      	itt	ge
 8028c3a:	463b      	movge	r3, r7
 8028c3c:	4627      	movge	r7, r4
 8028c3e:	4630      	mov	r0, r6
 8028c40:	6879      	ldr	r1, [r7, #4]
 8028c42:	bfa6      	itte	ge
 8028c44:	461c      	movge	r4, r3
 8028c46:	2500      	movge	r5, #0
 8028c48:	2501      	movlt	r5, #1
 8028c4a:	f7ff fd3f 	bl	80286cc <_Balloc>
 8028c4e:	b920      	cbnz	r0, 8028c5a <__mdiff+0x5a>
 8028c50:	4b2d      	ldr	r3, [pc, #180]	; (8028d08 <__mdiff+0x108>)
 8028c52:	4602      	mov	r2, r0
 8028c54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8028c58:	e7e6      	b.n	8028c28 <__mdiff+0x28>
 8028c5a:	693e      	ldr	r6, [r7, #16]
 8028c5c:	60c5      	str	r5, [r0, #12]
 8028c5e:	6925      	ldr	r5, [r4, #16]
 8028c60:	f107 0114 	add.w	r1, r7, #20
 8028c64:	f104 0914 	add.w	r9, r4, #20
 8028c68:	f100 0e14 	add.w	lr, r0, #20
 8028c6c:	f107 0210 	add.w	r2, r7, #16
 8028c70:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8028c74:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8028c78:	46f2      	mov	sl, lr
 8028c7a:	2700      	movs	r7, #0
 8028c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8028c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8028c84:	fa1f f883 	uxth.w	r8, r3
 8028c88:	fa17 f78b 	uxtah	r7, r7, fp
 8028c8c:	0c1b      	lsrs	r3, r3, #16
 8028c8e:	eba7 0808 	sub.w	r8, r7, r8
 8028c92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8028c96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8028c9a:	fa1f f888 	uxth.w	r8, r8
 8028c9e:	141f      	asrs	r7, r3, #16
 8028ca0:	454d      	cmp	r5, r9
 8028ca2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8028ca6:	f84a 3b04 	str.w	r3, [sl], #4
 8028caa:	d8e7      	bhi.n	8028c7c <__mdiff+0x7c>
 8028cac:	1b2b      	subs	r3, r5, r4
 8028cae:	3b15      	subs	r3, #21
 8028cb0:	f023 0303 	bic.w	r3, r3, #3
 8028cb4:	3304      	adds	r3, #4
 8028cb6:	3415      	adds	r4, #21
 8028cb8:	42a5      	cmp	r5, r4
 8028cba:	bf38      	it	cc
 8028cbc:	2304      	movcc	r3, #4
 8028cbe:	4419      	add	r1, r3
 8028cc0:	4473      	add	r3, lr
 8028cc2:	469e      	mov	lr, r3
 8028cc4:	460d      	mov	r5, r1
 8028cc6:	4565      	cmp	r5, ip
 8028cc8:	d30e      	bcc.n	8028ce8 <__mdiff+0xe8>
 8028cca:	f10c 0203 	add.w	r2, ip, #3
 8028cce:	1a52      	subs	r2, r2, r1
 8028cd0:	f022 0203 	bic.w	r2, r2, #3
 8028cd4:	3903      	subs	r1, #3
 8028cd6:	458c      	cmp	ip, r1
 8028cd8:	bf38      	it	cc
 8028cda:	2200      	movcc	r2, #0
 8028cdc:	441a      	add	r2, r3
 8028cde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8028ce2:	b17b      	cbz	r3, 8028d04 <__mdiff+0x104>
 8028ce4:	6106      	str	r6, [r0, #16]
 8028ce6:	e7a5      	b.n	8028c34 <__mdiff+0x34>
 8028ce8:	f855 8b04 	ldr.w	r8, [r5], #4
 8028cec:	fa17 f488 	uxtah	r4, r7, r8
 8028cf0:	1422      	asrs	r2, r4, #16
 8028cf2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8028cf6:	b2a4      	uxth	r4, r4
 8028cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8028cfc:	f84e 4b04 	str.w	r4, [lr], #4
 8028d00:	1417      	asrs	r7, r2, #16
 8028d02:	e7e0      	b.n	8028cc6 <__mdiff+0xc6>
 8028d04:	3e01      	subs	r6, #1
 8028d06:	e7ea      	b.n	8028cde <__mdiff+0xde>
 8028d08:	0802b5cf 	.word	0x0802b5cf
 8028d0c:	0802b640 	.word	0x0802b640

08028d10 <__d2b>:
 8028d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028d14:	4689      	mov	r9, r1
 8028d16:	2101      	movs	r1, #1
 8028d18:	ec57 6b10 	vmov	r6, r7, d0
 8028d1c:	4690      	mov	r8, r2
 8028d1e:	f7ff fcd5 	bl	80286cc <_Balloc>
 8028d22:	4604      	mov	r4, r0
 8028d24:	b930      	cbnz	r0, 8028d34 <__d2b+0x24>
 8028d26:	4602      	mov	r2, r0
 8028d28:	4b25      	ldr	r3, [pc, #148]	; (8028dc0 <__d2b+0xb0>)
 8028d2a:	4826      	ldr	r0, [pc, #152]	; (8028dc4 <__d2b+0xb4>)
 8028d2c:	f240 310a 	movw	r1, #778	; 0x30a
 8028d30:	f000 fb56 	bl	80293e0 <__assert_func>
 8028d34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8028d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8028d3c:	bb35      	cbnz	r5, 8028d8c <__d2b+0x7c>
 8028d3e:	2e00      	cmp	r6, #0
 8028d40:	9301      	str	r3, [sp, #4]
 8028d42:	d028      	beq.n	8028d96 <__d2b+0x86>
 8028d44:	4668      	mov	r0, sp
 8028d46:	9600      	str	r6, [sp, #0]
 8028d48:	f7ff fd8c 	bl	8028864 <__lo0bits>
 8028d4c:	9900      	ldr	r1, [sp, #0]
 8028d4e:	b300      	cbz	r0, 8028d92 <__d2b+0x82>
 8028d50:	9a01      	ldr	r2, [sp, #4]
 8028d52:	f1c0 0320 	rsb	r3, r0, #32
 8028d56:	fa02 f303 	lsl.w	r3, r2, r3
 8028d5a:	430b      	orrs	r3, r1
 8028d5c:	40c2      	lsrs	r2, r0
 8028d5e:	6163      	str	r3, [r4, #20]
 8028d60:	9201      	str	r2, [sp, #4]
 8028d62:	9b01      	ldr	r3, [sp, #4]
 8028d64:	61a3      	str	r3, [r4, #24]
 8028d66:	2b00      	cmp	r3, #0
 8028d68:	bf14      	ite	ne
 8028d6a:	2202      	movne	r2, #2
 8028d6c:	2201      	moveq	r2, #1
 8028d6e:	6122      	str	r2, [r4, #16]
 8028d70:	b1d5      	cbz	r5, 8028da8 <__d2b+0x98>
 8028d72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8028d76:	4405      	add	r5, r0
 8028d78:	f8c9 5000 	str.w	r5, [r9]
 8028d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028d80:	f8c8 0000 	str.w	r0, [r8]
 8028d84:	4620      	mov	r0, r4
 8028d86:	b003      	add	sp, #12
 8028d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028d90:	e7d5      	b.n	8028d3e <__d2b+0x2e>
 8028d92:	6161      	str	r1, [r4, #20]
 8028d94:	e7e5      	b.n	8028d62 <__d2b+0x52>
 8028d96:	a801      	add	r0, sp, #4
 8028d98:	f7ff fd64 	bl	8028864 <__lo0bits>
 8028d9c:	9b01      	ldr	r3, [sp, #4]
 8028d9e:	6163      	str	r3, [r4, #20]
 8028da0:	2201      	movs	r2, #1
 8028da2:	6122      	str	r2, [r4, #16]
 8028da4:	3020      	adds	r0, #32
 8028da6:	e7e3      	b.n	8028d70 <__d2b+0x60>
 8028da8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8028dac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8028db0:	f8c9 0000 	str.w	r0, [r9]
 8028db4:	6918      	ldr	r0, [r3, #16]
 8028db6:	f7ff fd35 	bl	8028824 <__hi0bits>
 8028dba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8028dbe:	e7df      	b.n	8028d80 <__d2b+0x70>
 8028dc0:	0802b5cf 	.word	0x0802b5cf
 8028dc4:	0802b640 	.word	0x0802b640

08028dc8 <__ssputs_r>:
 8028dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028dcc:	688e      	ldr	r6, [r1, #8]
 8028dce:	429e      	cmp	r6, r3
 8028dd0:	4682      	mov	sl, r0
 8028dd2:	460c      	mov	r4, r1
 8028dd4:	4690      	mov	r8, r2
 8028dd6:	461f      	mov	r7, r3
 8028dd8:	d838      	bhi.n	8028e4c <__ssputs_r+0x84>
 8028dda:	898a      	ldrh	r2, [r1, #12]
 8028ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8028de0:	d032      	beq.n	8028e48 <__ssputs_r+0x80>
 8028de2:	6825      	ldr	r5, [r4, #0]
 8028de4:	6909      	ldr	r1, [r1, #16]
 8028de6:	eba5 0901 	sub.w	r9, r5, r1
 8028dea:	6965      	ldr	r5, [r4, #20]
 8028dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8028df4:	3301      	adds	r3, #1
 8028df6:	444b      	add	r3, r9
 8028df8:	106d      	asrs	r5, r5, #1
 8028dfa:	429d      	cmp	r5, r3
 8028dfc:	bf38      	it	cc
 8028dfe:	461d      	movcc	r5, r3
 8028e00:	0553      	lsls	r3, r2, #21
 8028e02:	d531      	bpl.n	8028e68 <__ssputs_r+0xa0>
 8028e04:	4629      	mov	r1, r5
 8028e06:	f7fd fcfd 	bl	8026804 <_malloc_r>
 8028e0a:	4606      	mov	r6, r0
 8028e0c:	b950      	cbnz	r0, 8028e24 <__ssputs_r+0x5c>
 8028e0e:	230c      	movs	r3, #12
 8028e10:	f8ca 3000 	str.w	r3, [sl]
 8028e14:	89a3      	ldrh	r3, [r4, #12]
 8028e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028e1a:	81a3      	strh	r3, [r4, #12]
 8028e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8028e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028e24:	6921      	ldr	r1, [r4, #16]
 8028e26:	464a      	mov	r2, r9
 8028e28:	f7fd fc76 	bl	8026718 <memcpy>
 8028e2c:	89a3      	ldrh	r3, [r4, #12]
 8028e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8028e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028e36:	81a3      	strh	r3, [r4, #12]
 8028e38:	6126      	str	r6, [r4, #16]
 8028e3a:	6165      	str	r5, [r4, #20]
 8028e3c:	444e      	add	r6, r9
 8028e3e:	eba5 0509 	sub.w	r5, r5, r9
 8028e42:	6026      	str	r6, [r4, #0]
 8028e44:	60a5      	str	r5, [r4, #8]
 8028e46:	463e      	mov	r6, r7
 8028e48:	42be      	cmp	r6, r7
 8028e4a:	d900      	bls.n	8028e4e <__ssputs_r+0x86>
 8028e4c:	463e      	mov	r6, r7
 8028e4e:	4632      	mov	r2, r6
 8028e50:	6820      	ldr	r0, [r4, #0]
 8028e52:	4641      	mov	r1, r8
 8028e54:	f000 fb4a 	bl	80294ec <memmove>
 8028e58:	68a3      	ldr	r3, [r4, #8]
 8028e5a:	6822      	ldr	r2, [r4, #0]
 8028e5c:	1b9b      	subs	r3, r3, r6
 8028e5e:	4432      	add	r2, r6
 8028e60:	60a3      	str	r3, [r4, #8]
 8028e62:	6022      	str	r2, [r4, #0]
 8028e64:	2000      	movs	r0, #0
 8028e66:	e7db      	b.n	8028e20 <__ssputs_r+0x58>
 8028e68:	462a      	mov	r2, r5
 8028e6a:	f000 fb59 	bl	8029520 <_realloc_r>
 8028e6e:	4606      	mov	r6, r0
 8028e70:	2800      	cmp	r0, #0
 8028e72:	d1e1      	bne.n	8028e38 <__ssputs_r+0x70>
 8028e74:	6921      	ldr	r1, [r4, #16]
 8028e76:	4650      	mov	r0, sl
 8028e78:	f7fd fc74 	bl	8026764 <_free_r>
 8028e7c:	e7c7      	b.n	8028e0e <__ssputs_r+0x46>
	...

08028e80 <_svfiprintf_r>:
 8028e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e84:	4698      	mov	r8, r3
 8028e86:	898b      	ldrh	r3, [r1, #12]
 8028e88:	061b      	lsls	r3, r3, #24
 8028e8a:	b09d      	sub	sp, #116	; 0x74
 8028e8c:	4607      	mov	r7, r0
 8028e8e:	460d      	mov	r5, r1
 8028e90:	4614      	mov	r4, r2
 8028e92:	d50e      	bpl.n	8028eb2 <_svfiprintf_r+0x32>
 8028e94:	690b      	ldr	r3, [r1, #16]
 8028e96:	b963      	cbnz	r3, 8028eb2 <_svfiprintf_r+0x32>
 8028e98:	2140      	movs	r1, #64	; 0x40
 8028e9a:	f7fd fcb3 	bl	8026804 <_malloc_r>
 8028e9e:	6028      	str	r0, [r5, #0]
 8028ea0:	6128      	str	r0, [r5, #16]
 8028ea2:	b920      	cbnz	r0, 8028eae <_svfiprintf_r+0x2e>
 8028ea4:	230c      	movs	r3, #12
 8028ea6:	603b      	str	r3, [r7, #0]
 8028ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8028eac:	e0d1      	b.n	8029052 <_svfiprintf_r+0x1d2>
 8028eae:	2340      	movs	r3, #64	; 0x40
 8028eb0:	616b      	str	r3, [r5, #20]
 8028eb2:	2300      	movs	r3, #0
 8028eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8028eb6:	2320      	movs	r3, #32
 8028eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8028ec0:	2330      	movs	r3, #48	; 0x30
 8028ec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802906c <_svfiprintf_r+0x1ec>
 8028ec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028eca:	f04f 0901 	mov.w	r9, #1
 8028ece:	4623      	mov	r3, r4
 8028ed0:	469a      	mov	sl, r3
 8028ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028ed6:	b10a      	cbz	r2, 8028edc <_svfiprintf_r+0x5c>
 8028ed8:	2a25      	cmp	r2, #37	; 0x25
 8028eda:	d1f9      	bne.n	8028ed0 <_svfiprintf_r+0x50>
 8028edc:	ebba 0b04 	subs.w	fp, sl, r4
 8028ee0:	d00b      	beq.n	8028efa <_svfiprintf_r+0x7a>
 8028ee2:	465b      	mov	r3, fp
 8028ee4:	4622      	mov	r2, r4
 8028ee6:	4629      	mov	r1, r5
 8028ee8:	4638      	mov	r0, r7
 8028eea:	f7ff ff6d 	bl	8028dc8 <__ssputs_r>
 8028eee:	3001      	adds	r0, #1
 8028ef0:	f000 80aa 	beq.w	8029048 <_svfiprintf_r+0x1c8>
 8028ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028ef6:	445a      	add	r2, fp
 8028ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8028efa:	f89a 3000 	ldrb.w	r3, [sl]
 8028efe:	2b00      	cmp	r3, #0
 8028f00:	f000 80a2 	beq.w	8029048 <_svfiprintf_r+0x1c8>
 8028f04:	2300      	movs	r3, #0
 8028f06:	f04f 32ff 	mov.w	r2, #4294967295
 8028f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028f0e:	f10a 0a01 	add.w	sl, sl, #1
 8028f12:	9304      	str	r3, [sp, #16]
 8028f14:	9307      	str	r3, [sp, #28]
 8028f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8028f1c:	4654      	mov	r4, sl
 8028f1e:	2205      	movs	r2, #5
 8028f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028f24:	4851      	ldr	r0, [pc, #324]	; (802906c <_svfiprintf_r+0x1ec>)
 8028f26:	f7d7 f9fb 	bl	8000320 <memchr>
 8028f2a:	9a04      	ldr	r2, [sp, #16]
 8028f2c:	b9d8      	cbnz	r0, 8028f66 <_svfiprintf_r+0xe6>
 8028f2e:	06d0      	lsls	r0, r2, #27
 8028f30:	bf44      	itt	mi
 8028f32:	2320      	movmi	r3, #32
 8028f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028f38:	0711      	lsls	r1, r2, #28
 8028f3a:	bf44      	itt	mi
 8028f3c:	232b      	movmi	r3, #43	; 0x2b
 8028f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028f42:	f89a 3000 	ldrb.w	r3, [sl]
 8028f46:	2b2a      	cmp	r3, #42	; 0x2a
 8028f48:	d015      	beq.n	8028f76 <_svfiprintf_r+0xf6>
 8028f4a:	9a07      	ldr	r2, [sp, #28]
 8028f4c:	4654      	mov	r4, sl
 8028f4e:	2000      	movs	r0, #0
 8028f50:	f04f 0c0a 	mov.w	ip, #10
 8028f54:	4621      	mov	r1, r4
 8028f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028f5a:	3b30      	subs	r3, #48	; 0x30
 8028f5c:	2b09      	cmp	r3, #9
 8028f5e:	d94e      	bls.n	8028ffe <_svfiprintf_r+0x17e>
 8028f60:	b1b0      	cbz	r0, 8028f90 <_svfiprintf_r+0x110>
 8028f62:	9207      	str	r2, [sp, #28]
 8028f64:	e014      	b.n	8028f90 <_svfiprintf_r+0x110>
 8028f66:	eba0 0308 	sub.w	r3, r0, r8
 8028f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8028f6e:	4313      	orrs	r3, r2
 8028f70:	9304      	str	r3, [sp, #16]
 8028f72:	46a2      	mov	sl, r4
 8028f74:	e7d2      	b.n	8028f1c <_svfiprintf_r+0x9c>
 8028f76:	9b03      	ldr	r3, [sp, #12]
 8028f78:	1d19      	adds	r1, r3, #4
 8028f7a:	681b      	ldr	r3, [r3, #0]
 8028f7c:	9103      	str	r1, [sp, #12]
 8028f7e:	2b00      	cmp	r3, #0
 8028f80:	bfbb      	ittet	lt
 8028f82:	425b      	neglt	r3, r3
 8028f84:	f042 0202 	orrlt.w	r2, r2, #2
 8028f88:	9307      	strge	r3, [sp, #28]
 8028f8a:	9307      	strlt	r3, [sp, #28]
 8028f8c:	bfb8      	it	lt
 8028f8e:	9204      	strlt	r2, [sp, #16]
 8028f90:	7823      	ldrb	r3, [r4, #0]
 8028f92:	2b2e      	cmp	r3, #46	; 0x2e
 8028f94:	d10c      	bne.n	8028fb0 <_svfiprintf_r+0x130>
 8028f96:	7863      	ldrb	r3, [r4, #1]
 8028f98:	2b2a      	cmp	r3, #42	; 0x2a
 8028f9a:	d135      	bne.n	8029008 <_svfiprintf_r+0x188>
 8028f9c:	9b03      	ldr	r3, [sp, #12]
 8028f9e:	1d1a      	adds	r2, r3, #4
 8028fa0:	681b      	ldr	r3, [r3, #0]
 8028fa2:	9203      	str	r2, [sp, #12]
 8028fa4:	2b00      	cmp	r3, #0
 8028fa6:	bfb8      	it	lt
 8028fa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8028fac:	3402      	adds	r4, #2
 8028fae:	9305      	str	r3, [sp, #20]
 8028fb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802907c <_svfiprintf_r+0x1fc>
 8028fb4:	7821      	ldrb	r1, [r4, #0]
 8028fb6:	2203      	movs	r2, #3
 8028fb8:	4650      	mov	r0, sl
 8028fba:	f7d7 f9b1 	bl	8000320 <memchr>
 8028fbe:	b140      	cbz	r0, 8028fd2 <_svfiprintf_r+0x152>
 8028fc0:	2340      	movs	r3, #64	; 0x40
 8028fc2:	eba0 000a 	sub.w	r0, r0, sl
 8028fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8028fca:	9b04      	ldr	r3, [sp, #16]
 8028fcc:	4303      	orrs	r3, r0
 8028fce:	3401      	adds	r4, #1
 8028fd0:	9304      	str	r3, [sp, #16]
 8028fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028fd6:	4826      	ldr	r0, [pc, #152]	; (8029070 <_svfiprintf_r+0x1f0>)
 8028fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028fdc:	2206      	movs	r2, #6
 8028fde:	f7d7 f99f 	bl	8000320 <memchr>
 8028fe2:	2800      	cmp	r0, #0
 8028fe4:	d038      	beq.n	8029058 <_svfiprintf_r+0x1d8>
 8028fe6:	4b23      	ldr	r3, [pc, #140]	; (8029074 <_svfiprintf_r+0x1f4>)
 8028fe8:	bb1b      	cbnz	r3, 8029032 <_svfiprintf_r+0x1b2>
 8028fea:	9b03      	ldr	r3, [sp, #12]
 8028fec:	3307      	adds	r3, #7
 8028fee:	f023 0307 	bic.w	r3, r3, #7
 8028ff2:	3308      	adds	r3, #8
 8028ff4:	9303      	str	r3, [sp, #12]
 8028ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ff8:	4433      	add	r3, r6
 8028ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8028ffc:	e767      	b.n	8028ece <_svfiprintf_r+0x4e>
 8028ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8029002:	460c      	mov	r4, r1
 8029004:	2001      	movs	r0, #1
 8029006:	e7a5      	b.n	8028f54 <_svfiprintf_r+0xd4>
 8029008:	2300      	movs	r3, #0
 802900a:	3401      	adds	r4, #1
 802900c:	9305      	str	r3, [sp, #20]
 802900e:	4619      	mov	r1, r3
 8029010:	f04f 0c0a 	mov.w	ip, #10
 8029014:	4620      	mov	r0, r4
 8029016:	f810 2b01 	ldrb.w	r2, [r0], #1
 802901a:	3a30      	subs	r2, #48	; 0x30
 802901c:	2a09      	cmp	r2, #9
 802901e:	d903      	bls.n	8029028 <_svfiprintf_r+0x1a8>
 8029020:	2b00      	cmp	r3, #0
 8029022:	d0c5      	beq.n	8028fb0 <_svfiprintf_r+0x130>
 8029024:	9105      	str	r1, [sp, #20]
 8029026:	e7c3      	b.n	8028fb0 <_svfiprintf_r+0x130>
 8029028:	fb0c 2101 	mla	r1, ip, r1, r2
 802902c:	4604      	mov	r4, r0
 802902e:	2301      	movs	r3, #1
 8029030:	e7f0      	b.n	8029014 <_svfiprintf_r+0x194>
 8029032:	ab03      	add	r3, sp, #12
 8029034:	9300      	str	r3, [sp, #0]
 8029036:	462a      	mov	r2, r5
 8029038:	4b0f      	ldr	r3, [pc, #60]	; (8029078 <_svfiprintf_r+0x1f8>)
 802903a:	a904      	add	r1, sp, #16
 802903c:	4638      	mov	r0, r7
 802903e:	f7fd fccb 	bl	80269d8 <_printf_float>
 8029042:	1c42      	adds	r2, r0, #1
 8029044:	4606      	mov	r6, r0
 8029046:	d1d6      	bne.n	8028ff6 <_svfiprintf_r+0x176>
 8029048:	89ab      	ldrh	r3, [r5, #12]
 802904a:	065b      	lsls	r3, r3, #25
 802904c:	f53f af2c 	bmi.w	8028ea8 <_svfiprintf_r+0x28>
 8029050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029052:	b01d      	add	sp, #116	; 0x74
 8029054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029058:	ab03      	add	r3, sp, #12
 802905a:	9300      	str	r3, [sp, #0]
 802905c:	462a      	mov	r2, r5
 802905e:	4b06      	ldr	r3, [pc, #24]	; (8029078 <_svfiprintf_r+0x1f8>)
 8029060:	a904      	add	r1, sp, #16
 8029062:	4638      	mov	r0, r7
 8029064:	f7fd ff44 	bl	8026ef0 <_printf_i>
 8029068:	e7eb      	b.n	8029042 <_svfiprintf_r+0x1c2>
 802906a:	bf00      	nop
 802906c:	0802b79c 	.word	0x0802b79c
 8029070:	0802b7a6 	.word	0x0802b7a6
 8029074:	080269d9 	.word	0x080269d9
 8029078:	08028dc9 	.word	0x08028dc9
 802907c:	0802b7a2 	.word	0x0802b7a2

08029080 <__sfputc_r>:
 8029080:	6893      	ldr	r3, [r2, #8]
 8029082:	3b01      	subs	r3, #1
 8029084:	2b00      	cmp	r3, #0
 8029086:	b410      	push	{r4}
 8029088:	6093      	str	r3, [r2, #8]
 802908a:	da08      	bge.n	802909e <__sfputc_r+0x1e>
 802908c:	6994      	ldr	r4, [r2, #24]
 802908e:	42a3      	cmp	r3, r4
 8029090:	db01      	blt.n	8029096 <__sfputc_r+0x16>
 8029092:	290a      	cmp	r1, #10
 8029094:	d103      	bne.n	802909e <__sfputc_r+0x1e>
 8029096:	f85d 4b04 	ldr.w	r4, [sp], #4
 802909a:	f7fe ba19 	b.w	80274d0 <__swbuf_r>
 802909e:	6813      	ldr	r3, [r2, #0]
 80290a0:	1c58      	adds	r0, r3, #1
 80290a2:	6010      	str	r0, [r2, #0]
 80290a4:	7019      	strb	r1, [r3, #0]
 80290a6:	4608      	mov	r0, r1
 80290a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80290ac:	4770      	bx	lr

080290ae <__sfputs_r>:
 80290ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290b0:	4606      	mov	r6, r0
 80290b2:	460f      	mov	r7, r1
 80290b4:	4614      	mov	r4, r2
 80290b6:	18d5      	adds	r5, r2, r3
 80290b8:	42ac      	cmp	r4, r5
 80290ba:	d101      	bne.n	80290c0 <__sfputs_r+0x12>
 80290bc:	2000      	movs	r0, #0
 80290be:	e007      	b.n	80290d0 <__sfputs_r+0x22>
 80290c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80290c4:	463a      	mov	r2, r7
 80290c6:	4630      	mov	r0, r6
 80290c8:	f7ff ffda 	bl	8029080 <__sfputc_r>
 80290cc:	1c43      	adds	r3, r0, #1
 80290ce:	d1f3      	bne.n	80290b8 <__sfputs_r+0xa>
 80290d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080290d4 <_vfiprintf_r>:
 80290d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290d8:	460d      	mov	r5, r1
 80290da:	b09d      	sub	sp, #116	; 0x74
 80290dc:	4614      	mov	r4, r2
 80290de:	4698      	mov	r8, r3
 80290e0:	4606      	mov	r6, r0
 80290e2:	b118      	cbz	r0, 80290ec <_vfiprintf_r+0x18>
 80290e4:	6983      	ldr	r3, [r0, #24]
 80290e6:	b90b      	cbnz	r3, 80290ec <_vfiprintf_r+0x18>
 80290e8:	f7ff f9da 	bl	80284a0 <__sinit>
 80290ec:	4b89      	ldr	r3, [pc, #548]	; (8029314 <_vfiprintf_r+0x240>)
 80290ee:	429d      	cmp	r5, r3
 80290f0:	d11b      	bne.n	802912a <_vfiprintf_r+0x56>
 80290f2:	6875      	ldr	r5, [r6, #4]
 80290f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80290f6:	07d9      	lsls	r1, r3, #31
 80290f8:	d405      	bmi.n	8029106 <_vfiprintf_r+0x32>
 80290fa:	89ab      	ldrh	r3, [r5, #12]
 80290fc:	059a      	lsls	r2, r3, #22
 80290fe:	d402      	bmi.n	8029106 <_vfiprintf_r+0x32>
 8029100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029102:	f7ff fa70 	bl	80285e6 <__retarget_lock_acquire_recursive>
 8029106:	89ab      	ldrh	r3, [r5, #12]
 8029108:	071b      	lsls	r3, r3, #28
 802910a:	d501      	bpl.n	8029110 <_vfiprintf_r+0x3c>
 802910c:	692b      	ldr	r3, [r5, #16]
 802910e:	b9eb      	cbnz	r3, 802914c <_vfiprintf_r+0x78>
 8029110:	4629      	mov	r1, r5
 8029112:	4630      	mov	r0, r6
 8029114:	f7fe fa2e 	bl	8027574 <__swsetup_r>
 8029118:	b1c0      	cbz	r0, 802914c <_vfiprintf_r+0x78>
 802911a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802911c:	07dc      	lsls	r4, r3, #31
 802911e:	d50e      	bpl.n	802913e <_vfiprintf_r+0x6a>
 8029120:	f04f 30ff 	mov.w	r0, #4294967295
 8029124:	b01d      	add	sp, #116	; 0x74
 8029126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802912a:	4b7b      	ldr	r3, [pc, #492]	; (8029318 <_vfiprintf_r+0x244>)
 802912c:	429d      	cmp	r5, r3
 802912e:	d101      	bne.n	8029134 <_vfiprintf_r+0x60>
 8029130:	68b5      	ldr	r5, [r6, #8]
 8029132:	e7df      	b.n	80290f4 <_vfiprintf_r+0x20>
 8029134:	4b79      	ldr	r3, [pc, #484]	; (802931c <_vfiprintf_r+0x248>)
 8029136:	429d      	cmp	r5, r3
 8029138:	bf08      	it	eq
 802913a:	68f5      	ldreq	r5, [r6, #12]
 802913c:	e7da      	b.n	80290f4 <_vfiprintf_r+0x20>
 802913e:	89ab      	ldrh	r3, [r5, #12]
 8029140:	0598      	lsls	r0, r3, #22
 8029142:	d4ed      	bmi.n	8029120 <_vfiprintf_r+0x4c>
 8029144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029146:	f7ff fa4f 	bl	80285e8 <__retarget_lock_release_recursive>
 802914a:	e7e9      	b.n	8029120 <_vfiprintf_r+0x4c>
 802914c:	2300      	movs	r3, #0
 802914e:	9309      	str	r3, [sp, #36]	; 0x24
 8029150:	2320      	movs	r3, #32
 8029152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029156:	f8cd 800c 	str.w	r8, [sp, #12]
 802915a:	2330      	movs	r3, #48	; 0x30
 802915c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8029320 <_vfiprintf_r+0x24c>
 8029160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029164:	f04f 0901 	mov.w	r9, #1
 8029168:	4623      	mov	r3, r4
 802916a:	469a      	mov	sl, r3
 802916c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029170:	b10a      	cbz	r2, 8029176 <_vfiprintf_r+0xa2>
 8029172:	2a25      	cmp	r2, #37	; 0x25
 8029174:	d1f9      	bne.n	802916a <_vfiprintf_r+0x96>
 8029176:	ebba 0b04 	subs.w	fp, sl, r4
 802917a:	d00b      	beq.n	8029194 <_vfiprintf_r+0xc0>
 802917c:	465b      	mov	r3, fp
 802917e:	4622      	mov	r2, r4
 8029180:	4629      	mov	r1, r5
 8029182:	4630      	mov	r0, r6
 8029184:	f7ff ff93 	bl	80290ae <__sfputs_r>
 8029188:	3001      	adds	r0, #1
 802918a:	f000 80aa 	beq.w	80292e2 <_vfiprintf_r+0x20e>
 802918e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029190:	445a      	add	r2, fp
 8029192:	9209      	str	r2, [sp, #36]	; 0x24
 8029194:	f89a 3000 	ldrb.w	r3, [sl]
 8029198:	2b00      	cmp	r3, #0
 802919a:	f000 80a2 	beq.w	80292e2 <_vfiprintf_r+0x20e>
 802919e:	2300      	movs	r3, #0
 80291a0:	f04f 32ff 	mov.w	r2, #4294967295
 80291a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80291a8:	f10a 0a01 	add.w	sl, sl, #1
 80291ac:	9304      	str	r3, [sp, #16]
 80291ae:	9307      	str	r3, [sp, #28]
 80291b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80291b4:	931a      	str	r3, [sp, #104]	; 0x68
 80291b6:	4654      	mov	r4, sl
 80291b8:	2205      	movs	r2, #5
 80291ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80291be:	4858      	ldr	r0, [pc, #352]	; (8029320 <_vfiprintf_r+0x24c>)
 80291c0:	f7d7 f8ae 	bl	8000320 <memchr>
 80291c4:	9a04      	ldr	r2, [sp, #16]
 80291c6:	b9d8      	cbnz	r0, 8029200 <_vfiprintf_r+0x12c>
 80291c8:	06d1      	lsls	r1, r2, #27
 80291ca:	bf44      	itt	mi
 80291cc:	2320      	movmi	r3, #32
 80291ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80291d2:	0713      	lsls	r3, r2, #28
 80291d4:	bf44      	itt	mi
 80291d6:	232b      	movmi	r3, #43	; 0x2b
 80291d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80291dc:	f89a 3000 	ldrb.w	r3, [sl]
 80291e0:	2b2a      	cmp	r3, #42	; 0x2a
 80291e2:	d015      	beq.n	8029210 <_vfiprintf_r+0x13c>
 80291e4:	9a07      	ldr	r2, [sp, #28]
 80291e6:	4654      	mov	r4, sl
 80291e8:	2000      	movs	r0, #0
 80291ea:	f04f 0c0a 	mov.w	ip, #10
 80291ee:	4621      	mov	r1, r4
 80291f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80291f4:	3b30      	subs	r3, #48	; 0x30
 80291f6:	2b09      	cmp	r3, #9
 80291f8:	d94e      	bls.n	8029298 <_vfiprintf_r+0x1c4>
 80291fa:	b1b0      	cbz	r0, 802922a <_vfiprintf_r+0x156>
 80291fc:	9207      	str	r2, [sp, #28]
 80291fe:	e014      	b.n	802922a <_vfiprintf_r+0x156>
 8029200:	eba0 0308 	sub.w	r3, r0, r8
 8029204:	fa09 f303 	lsl.w	r3, r9, r3
 8029208:	4313      	orrs	r3, r2
 802920a:	9304      	str	r3, [sp, #16]
 802920c:	46a2      	mov	sl, r4
 802920e:	e7d2      	b.n	80291b6 <_vfiprintf_r+0xe2>
 8029210:	9b03      	ldr	r3, [sp, #12]
 8029212:	1d19      	adds	r1, r3, #4
 8029214:	681b      	ldr	r3, [r3, #0]
 8029216:	9103      	str	r1, [sp, #12]
 8029218:	2b00      	cmp	r3, #0
 802921a:	bfbb      	ittet	lt
 802921c:	425b      	neglt	r3, r3
 802921e:	f042 0202 	orrlt.w	r2, r2, #2
 8029222:	9307      	strge	r3, [sp, #28]
 8029224:	9307      	strlt	r3, [sp, #28]
 8029226:	bfb8      	it	lt
 8029228:	9204      	strlt	r2, [sp, #16]
 802922a:	7823      	ldrb	r3, [r4, #0]
 802922c:	2b2e      	cmp	r3, #46	; 0x2e
 802922e:	d10c      	bne.n	802924a <_vfiprintf_r+0x176>
 8029230:	7863      	ldrb	r3, [r4, #1]
 8029232:	2b2a      	cmp	r3, #42	; 0x2a
 8029234:	d135      	bne.n	80292a2 <_vfiprintf_r+0x1ce>
 8029236:	9b03      	ldr	r3, [sp, #12]
 8029238:	1d1a      	adds	r2, r3, #4
 802923a:	681b      	ldr	r3, [r3, #0]
 802923c:	9203      	str	r2, [sp, #12]
 802923e:	2b00      	cmp	r3, #0
 8029240:	bfb8      	it	lt
 8029242:	f04f 33ff 	movlt.w	r3, #4294967295
 8029246:	3402      	adds	r4, #2
 8029248:	9305      	str	r3, [sp, #20]
 802924a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029330 <_vfiprintf_r+0x25c>
 802924e:	7821      	ldrb	r1, [r4, #0]
 8029250:	2203      	movs	r2, #3
 8029252:	4650      	mov	r0, sl
 8029254:	f7d7 f864 	bl	8000320 <memchr>
 8029258:	b140      	cbz	r0, 802926c <_vfiprintf_r+0x198>
 802925a:	2340      	movs	r3, #64	; 0x40
 802925c:	eba0 000a 	sub.w	r0, r0, sl
 8029260:	fa03 f000 	lsl.w	r0, r3, r0
 8029264:	9b04      	ldr	r3, [sp, #16]
 8029266:	4303      	orrs	r3, r0
 8029268:	3401      	adds	r4, #1
 802926a:	9304      	str	r3, [sp, #16]
 802926c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029270:	482c      	ldr	r0, [pc, #176]	; (8029324 <_vfiprintf_r+0x250>)
 8029272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029276:	2206      	movs	r2, #6
 8029278:	f7d7 f852 	bl	8000320 <memchr>
 802927c:	2800      	cmp	r0, #0
 802927e:	d03f      	beq.n	8029300 <_vfiprintf_r+0x22c>
 8029280:	4b29      	ldr	r3, [pc, #164]	; (8029328 <_vfiprintf_r+0x254>)
 8029282:	bb1b      	cbnz	r3, 80292cc <_vfiprintf_r+0x1f8>
 8029284:	9b03      	ldr	r3, [sp, #12]
 8029286:	3307      	adds	r3, #7
 8029288:	f023 0307 	bic.w	r3, r3, #7
 802928c:	3308      	adds	r3, #8
 802928e:	9303      	str	r3, [sp, #12]
 8029290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029292:	443b      	add	r3, r7
 8029294:	9309      	str	r3, [sp, #36]	; 0x24
 8029296:	e767      	b.n	8029168 <_vfiprintf_r+0x94>
 8029298:	fb0c 3202 	mla	r2, ip, r2, r3
 802929c:	460c      	mov	r4, r1
 802929e:	2001      	movs	r0, #1
 80292a0:	e7a5      	b.n	80291ee <_vfiprintf_r+0x11a>
 80292a2:	2300      	movs	r3, #0
 80292a4:	3401      	adds	r4, #1
 80292a6:	9305      	str	r3, [sp, #20]
 80292a8:	4619      	mov	r1, r3
 80292aa:	f04f 0c0a 	mov.w	ip, #10
 80292ae:	4620      	mov	r0, r4
 80292b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80292b4:	3a30      	subs	r2, #48	; 0x30
 80292b6:	2a09      	cmp	r2, #9
 80292b8:	d903      	bls.n	80292c2 <_vfiprintf_r+0x1ee>
 80292ba:	2b00      	cmp	r3, #0
 80292bc:	d0c5      	beq.n	802924a <_vfiprintf_r+0x176>
 80292be:	9105      	str	r1, [sp, #20]
 80292c0:	e7c3      	b.n	802924a <_vfiprintf_r+0x176>
 80292c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80292c6:	4604      	mov	r4, r0
 80292c8:	2301      	movs	r3, #1
 80292ca:	e7f0      	b.n	80292ae <_vfiprintf_r+0x1da>
 80292cc:	ab03      	add	r3, sp, #12
 80292ce:	9300      	str	r3, [sp, #0]
 80292d0:	462a      	mov	r2, r5
 80292d2:	4b16      	ldr	r3, [pc, #88]	; (802932c <_vfiprintf_r+0x258>)
 80292d4:	a904      	add	r1, sp, #16
 80292d6:	4630      	mov	r0, r6
 80292d8:	f7fd fb7e 	bl	80269d8 <_printf_float>
 80292dc:	4607      	mov	r7, r0
 80292de:	1c78      	adds	r0, r7, #1
 80292e0:	d1d6      	bne.n	8029290 <_vfiprintf_r+0x1bc>
 80292e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80292e4:	07d9      	lsls	r1, r3, #31
 80292e6:	d405      	bmi.n	80292f4 <_vfiprintf_r+0x220>
 80292e8:	89ab      	ldrh	r3, [r5, #12]
 80292ea:	059a      	lsls	r2, r3, #22
 80292ec:	d402      	bmi.n	80292f4 <_vfiprintf_r+0x220>
 80292ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80292f0:	f7ff f97a 	bl	80285e8 <__retarget_lock_release_recursive>
 80292f4:	89ab      	ldrh	r3, [r5, #12]
 80292f6:	065b      	lsls	r3, r3, #25
 80292f8:	f53f af12 	bmi.w	8029120 <_vfiprintf_r+0x4c>
 80292fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80292fe:	e711      	b.n	8029124 <_vfiprintf_r+0x50>
 8029300:	ab03      	add	r3, sp, #12
 8029302:	9300      	str	r3, [sp, #0]
 8029304:	462a      	mov	r2, r5
 8029306:	4b09      	ldr	r3, [pc, #36]	; (802932c <_vfiprintf_r+0x258>)
 8029308:	a904      	add	r1, sp, #16
 802930a:	4630      	mov	r0, r6
 802930c:	f7fd fdf0 	bl	8026ef0 <_printf_i>
 8029310:	e7e4      	b.n	80292dc <_vfiprintf_r+0x208>
 8029312:	bf00      	nop
 8029314:	0802b600 	.word	0x0802b600
 8029318:	0802b620 	.word	0x0802b620
 802931c:	0802b5e0 	.word	0x0802b5e0
 8029320:	0802b79c 	.word	0x0802b79c
 8029324:	0802b7a6 	.word	0x0802b7a6
 8029328:	080269d9 	.word	0x080269d9
 802932c:	080290af 	.word	0x080290af
 8029330:	0802b7a2 	.word	0x0802b7a2

08029334 <__sread>:
 8029334:	b510      	push	{r4, lr}
 8029336:	460c      	mov	r4, r1
 8029338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802933c:	f000 f916 	bl	802956c <_read_r>
 8029340:	2800      	cmp	r0, #0
 8029342:	bfab      	itete	ge
 8029344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8029346:	89a3      	ldrhlt	r3, [r4, #12]
 8029348:	181b      	addge	r3, r3, r0
 802934a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802934e:	bfac      	ite	ge
 8029350:	6563      	strge	r3, [r4, #84]	; 0x54
 8029352:	81a3      	strhlt	r3, [r4, #12]
 8029354:	bd10      	pop	{r4, pc}

08029356 <__swrite>:
 8029356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802935a:	461f      	mov	r7, r3
 802935c:	898b      	ldrh	r3, [r1, #12]
 802935e:	05db      	lsls	r3, r3, #23
 8029360:	4605      	mov	r5, r0
 8029362:	460c      	mov	r4, r1
 8029364:	4616      	mov	r6, r2
 8029366:	d505      	bpl.n	8029374 <__swrite+0x1e>
 8029368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802936c:	2302      	movs	r3, #2
 802936e:	2200      	movs	r2, #0
 8029370:	f000 f898 	bl	80294a4 <_lseek_r>
 8029374:	89a3      	ldrh	r3, [r4, #12]
 8029376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802937a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802937e:	81a3      	strh	r3, [r4, #12]
 8029380:	4632      	mov	r2, r6
 8029382:	463b      	mov	r3, r7
 8029384:	4628      	mov	r0, r5
 8029386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802938a:	f000 b817 	b.w	80293bc <_write_r>

0802938e <__sseek>:
 802938e:	b510      	push	{r4, lr}
 8029390:	460c      	mov	r4, r1
 8029392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029396:	f000 f885 	bl	80294a4 <_lseek_r>
 802939a:	1c43      	adds	r3, r0, #1
 802939c:	89a3      	ldrh	r3, [r4, #12]
 802939e:	bf15      	itete	ne
 80293a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80293a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80293a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80293aa:	81a3      	strheq	r3, [r4, #12]
 80293ac:	bf18      	it	ne
 80293ae:	81a3      	strhne	r3, [r4, #12]
 80293b0:	bd10      	pop	{r4, pc}

080293b2 <__sclose>:
 80293b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293b6:	f000 b831 	b.w	802941c <_close_r>
	...

080293bc <_write_r>:
 80293bc:	b538      	push	{r3, r4, r5, lr}
 80293be:	4d07      	ldr	r5, [pc, #28]	; (80293dc <_write_r+0x20>)
 80293c0:	4604      	mov	r4, r0
 80293c2:	4608      	mov	r0, r1
 80293c4:	4611      	mov	r1, r2
 80293c6:	2200      	movs	r2, #0
 80293c8:	602a      	str	r2, [r5, #0]
 80293ca:	461a      	mov	r2, r3
 80293cc:	f7e4 f959 	bl	800d682 <_write>
 80293d0:	1c43      	adds	r3, r0, #1
 80293d2:	d102      	bne.n	80293da <_write_r+0x1e>
 80293d4:	682b      	ldr	r3, [r5, #0]
 80293d6:	b103      	cbz	r3, 80293da <_write_r+0x1e>
 80293d8:	6023      	str	r3, [r4, #0]
 80293da:	bd38      	pop	{r3, r4, r5, pc}
 80293dc:	24006030 	.word	0x24006030

080293e0 <__assert_func>:
 80293e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80293e2:	4614      	mov	r4, r2
 80293e4:	461a      	mov	r2, r3
 80293e6:	4b09      	ldr	r3, [pc, #36]	; (802940c <__assert_func+0x2c>)
 80293e8:	681b      	ldr	r3, [r3, #0]
 80293ea:	4605      	mov	r5, r0
 80293ec:	68d8      	ldr	r0, [r3, #12]
 80293ee:	b14c      	cbz	r4, 8029404 <__assert_func+0x24>
 80293f0:	4b07      	ldr	r3, [pc, #28]	; (8029410 <__assert_func+0x30>)
 80293f2:	9100      	str	r1, [sp, #0]
 80293f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80293f8:	4906      	ldr	r1, [pc, #24]	; (8029414 <__assert_func+0x34>)
 80293fa:	462b      	mov	r3, r5
 80293fc:	f000 f81e 	bl	802943c <fiprintf>
 8029400:	f000 f8d3 	bl	80295aa <abort>
 8029404:	4b04      	ldr	r3, [pc, #16]	; (8029418 <__assert_func+0x38>)
 8029406:	461c      	mov	r4, r3
 8029408:	e7f3      	b.n	80293f2 <__assert_func+0x12>
 802940a:	bf00      	nop
 802940c:	240002a4 	.word	0x240002a4
 8029410:	0802b7ad 	.word	0x0802b7ad
 8029414:	0802b7ba 	.word	0x0802b7ba
 8029418:	0802b7e8 	.word	0x0802b7e8

0802941c <_close_r>:
 802941c:	b538      	push	{r3, r4, r5, lr}
 802941e:	4d06      	ldr	r5, [pc, #24]	; (8029438 <_close_r+0x1c>)
 8029420:	2300      	movs	r3, #0
 8029422:	4604      	mov	r4, r0
 8029424:	4608      	mov	r0, r1
 8029426:	602b      	str	r3, [r5, #0]
 8029428:	f7e4 f947 	bl	800d6ba <_close>
 802942c:	1c43      	adds	r3, r0, #1
 802942e:	d102      	bne.n	8029436 <_close_r+0x1a>
 8029430:	682b      	ldr	r3, [r5, #0]
 8029432:	b103      	cbz	r3, 8029436 <_close_r+0x1a>
 8029434:	6023      	str	r3, [r4, #0]
 8029436:	bd38      	pop	{r3, r4, r5, pc}
 8029438:	24006030 	.word	0x24006030

0802943c <fiprintf>:
 802943c:	b40e      	push	{r1, r2, r3}
 802943e:	b503      	push	{r0, r1, lr}
 8029440:	4601      	mov	r1, r0
 8029442:	ab03      	add	r3, sp, #12
 8029444:	4805      	ldr	r0, [pc, #20]	; (802945c <fiprintf+0x20>)
 8029446:	f853 2b04 	ldr.w	r2, [r3], #4
 802944a:	6800      	ldr	r0, [r0, #0]
 802944c:	9301      	str	r3, [sp, #4]
 802944e:	f7ff fe41 	bl	80290d4 <_vfiprintf_r>
 8029452:	b002      	add	sp, #8
 8029454:	f85d eb04 	ldr.w	lr, [sp], #4
 8029458:	b003      	add	sp, #12
 802945a:	4770      	bx	lr
 802945c:	240002a4 	.word	0x240002a4

08029460 <_fstat_r>:
 8029460:	b538      	push	{r3, r4, r5, lr}
 8029462:	4d07      	ldr	r5, [pc, #28]	; (8029480 <_fstat_r+0x20>)
 8029464:	2300      	movs	r3, #0
 8029466:	4604      	mov	r4, r0
 8029468:	4608      	mov	r0, r1
 802946a:	4611      	mov	r1, r2
 802946c:	602b      	str	r3, [r5, #0]
 802946e:	f7e4 f930 	bl	800d6d2 <_fstat>
 8029472:	1c43      	adds	r3, r0, #1
 8029474:	d102      	bne.n	802947c <_fstat_r+0x1c>
 8029476:	682b      	ldr	r3, [r5, #0]
 8029478:	b103      	cbz	r3, 802947c <_fstat_r+0x1c>
 802947a:	6023      	str	r3, [r4, #0]
 802947c:	bd38      	pop	{r3, r4, r5, pc}
 802947e:	bf00      	nop
 8029480:	24006030 	.word	0x24006030

08029484 <_isatty_r>:
 8029484:	b538      	push	{r3, r4, r5, lr}
 8029486:	4d06      	ldr	r5, [pc, #24]	; (80294a0 <_isatty_r+0x1c>)
 8029488:	2300      	movs	r3, #0
 802948a:	4604      	mov	r4, r0
 802948c:	4608      	mov	r0, r1
 802948e:	602b      	str	r3, [r5, #0]
 8029490:	f7e4 f92f 	bl	800d6f2 <_isatty>
 8029494:	1c43      	adds	r3, r0, #1
 8029496:	d102      	bne.n	802949e <_isatty_r+0x1a>
 8029498:	682b      	ldr	r3, [r5, #0]
 802949a:	b103      	cbz	r3, 802949e <_isatty_r+0x1a>
 802949c:	6023      	str	r3, [r4, #0]
 802949e:	bd38      	pop	{r3, r4, r5, pc}
 80294a0:	24006030 	.word	0x24006030

080294a4 <_lseek_r>:
 80294a4:	b538      	push	{r3, r4, r5, lr}
 80294a6:	4d07      	ldr	r5, [pc, #28]	; (80294c4 <_lseek_r+0x20>)
 80294a8:	4604      	mov	r4, r0
 80294aa:	4608      	mov	r0, r1
 80294ac:	4611      	mov	r1, r2
 80294ae:	2200      	movs	r2, #0
 80294b0:	602a      	str	r2, [r5, #0]
 80294b2:	461a      	mov	r2, r3
 80294b4:	f7e4 f928 	bl	800d708 <_lseek>
 80294b8:	1c43      	adds	r3, r0, #1
 80294ba:	d102      	bne.n	80294c2 <_lseek_r+0x1e>
 80294bc:	682b      	ldr	r3, [r5, #0]
 80294be:	b103      	cbz	r3, 80294c2 <_lseek_r+0x1e>
 80294c0:	6023      	str	r3, [r4, #0]
 80294c2:	bd38      	pop	{r3, r4, r5, pc}
 80294c4:	24006030 	.word	0x24006030

080294c8 <__ascii_mbtowc>:
 80294c8:	b082      	sub	sp, #8
 80294ca:	b901      	cbnz	r1, 80294ce <__ascii_mbtowc+0x6>
 80294cc:	a901      	add	r1, sp, #4
 80294ce:	b142      	cbz	r2, 80294e2 <__ascii_mbtowc+0x1a>
 80294d0:	b14b      	cbz	r3, 80294e6 <__ascii_mbtowc+0x1e>
 80294d2:	7813      	ldrb	r3, [r2, #0]
 80294d4:	600b      	str	r3, [r1, #0]
 80294d6:	7812      	ldrb	r2, [r2, #0]
 80294d8:	1e10      	subs	r0, r2, #0
 80294da:	bf18      	it	ne
 80294dc:	2001      	movne	r0, #1
 80294de:	b002      	add	sp, #8
 80294e0:	4770      	bx	lr
 80294e2:	4610      	mov	r0, r2
 80294e4:	e7fb      	b.n	80294de <__ascii_mbtowc+0x16>
 80294e6:	f06f 0001 	mvn.w	r0, #1
 80294ea:	e7f8      	b.n	80294de <__ascii_mbtowc+0x16>

080294ec <memmove>:
 80294ec:	4288      	cmp	r0, r1
 80294ee:	b510      	push	{r4, lr}
 80294f0:	eb01 0402 	add.w	r4, r1, r2
 80294f4:	d902      	bls.n	80294fc <memmove+0x10>
 80294f6:	4284      	cmp	r4, r0
 80294f8:	4623      	mov	r3, r4
 80294fa:	d807      	bhi.n	802950c <memmove+0x20>
 80294fc:	1e43      	subs	r3, r0, #1
 80294fe:	42a1      	cmp	r1, r4
 8029500:	d008      	beq.n	8029514 <memmove+0x28>
 8029502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029506:	f803 2f01 	strb.w	r2, [r3, #1]!
 802950a:	e7f8      	b.n	80294fe <memmove+0x12>
 802950c:	4402      	add	r2, r0
 802950e:	4601      	mov	r1, r0
 8029510:	428a      	cmp	r2, r1
 8029512:	d100      	bne.n	8029516 <memmove+0x2a>
 8029514:	bd10      	pop	{r4, pc}
 8029516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802951a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802951e:	e7f7      	b.n	8029510 <memmove+0x24>

08029520 <_realloc_r>:
 8029520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029522:	4607      	mov	r7, r0
 8029524:	4614      	mov	r4, r2
 8029526:	460e      	mov	r6, r1
 8029528:	b921      	cbnz	r1, 8029534 <_realloc_r+0x14>
 802952a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802952e:	4611      	mov	r1, r2
 8029530:	f7fd b968 	b.w	8026804 <_malloc_r>
 8029534:	b922      	cbnz	r2, 8029540 <_realloc_r+0x20>
 8029536:	f7fd f915 	bl	8026764 <_free_r>
 802953a:	4625      	mov	r5, r4
 802953c:	4628      	mov	r0, r5
 802953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029540:	f000 f83a 	bl	80295b8 <_malloc_usable_size_r>
 8029544:	42a0      	cmp	r0, r4
 8029546:	d20f      	bcs.n	8029568 <_realloc_r+0x48>
 8029548:	4621      	mov	r1, r4
 802954a:	4638      	mov	r0, r7
 802954c:	f7fd f95a 	bl	8026804 <_malloc_r>
 8029550:	4605      	mov	r5, r0
 8029552:	2800      	cmp	r0, #0
 8029554:	d0f2      	beq.n	802953c <_realloc_r+0x1c>
 8029556:	4631      	mov	r1, r6
 8029558:	4622      	mov	r2, r4
 802955a:	f7fd f8dd 	bl	8026718 <memcpy>
 802955e:	4631      	mov	r1, r6
 8029560:	4638      	mov	r0, r7
 8029562:	f7fd f8ff 	bl	8026764 <_free_r>
 8029566:	e7e9      	b.n	802953c <_realloc_r+0x1c>
 8029568:	4635      	mov	r5, r6
 802956a:	e7e7      	b.n	802953c <_realloc_r+0x1c>

0802956c <_read_r>:
 802956c:	b538      	push	{r3, r4, r5, lr}
 802956e:	4d07      	ldr	r5, [pc, #28]	; (802958c <_read_r+0x20>)
 8029570:	4604      	mov	r4, r0
 8029572:	4608      	mov	r0, r1
 8029574:	4611      	mov	r1, r2
 8029576:	2200      	movs	r2, #0
 8029578:	602a      	str	r2, [r5, #0]
 802957a:	461a      	mov	r2, r3
 802957c:	f7e4 f864 	bl	800d648 <_read>
 8029580:	1c43      	adds	r3, r0, #1
 8029582:	d102      	bne.n	802958a <_read_r+0x1e>
 8029584:	682b      	ldr	r3, [r5, #0]
 8029586:	b103      	cbz	r3, 802958a <_read_r+0x1e>
 8029588:	6023      	str	r3, [r4, #0]
 802958a:	bd38      	pop	{r3, r4, r5, pc}
 802958c:	24006030 	.word	0x24006030

08029590 <__ascii_wctomb>:
 8029590:	b149      	cbz	r1, 80295a6 <__ascii_wctomb+0x16>
 8029592:	2aff      	cmp	r2, #255	; 0xff
 8029594:	bf85      	ittet	hi
 8029596:	238a      	movhi	r3, #138	; 0x8a
 8029598:	6003      	strhi	r3, [r0, #0]
 802959a:	700a      	strbls	r2, [r1, #0]
 802959c:	f04f 30ff 	movhi.w	r0, #4294967295
 80295a0:	bf98      	it	ls
 80295a2:	2001      	movls	r0, #1
 80295a4:	4770      	bx	lr
 80295a6:	4608      	mov	r0, r1
 80295a8:	4770      	bx	lr

080295aa <abort>:
 80295aa:	b508      	push	{r3, lr}
 80295ac:	2006      	movs	r0, #6
 80295ae:	f000 f833 	bl	8029618 <raise>
 80295b2:	2001      	movs	r0, #1
 80295b4:	f7e4 f83e 	bl	800d634 <_exit>

080295b8 <_malloc_usable_size_r>:
 80295b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80295bc:	1f18      	subs	r0, r3, #4
 80295be:	2b00      	cmp	r3, #0
 80295c0:	bfbc      	itt	lt
 80295c2:	580b      	ldrlt	r3, [r1, r0]
 80295c4:	18c0      	addlt	r0, r0, r3
 80295c6:	4770      	bx	lr

080295c8 <_raise_r>:
 80295c8:	291f      	cmp	r1, #31
 80295ca:	b538      	push	{r3, r4, r5, lr}
 80295cc:	4604      	mov	r4, r0
 80295ce:	460d      	mov	r5, r1
 80295d0:	d904      	bls.n	80295dc <_raise_r+0x14>
 80295d2:	2316      	movs	r3, #22
 80295d4:	6003      	str	r3, [r0, #0]
 80295d6:	f04f 30ff 	mov.w	r0, #4294967295
 80295da:	bd38      	pop	{r3, r4, r5, pc}
 80295dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80295de:	b112      	cbz	r2, 80295e6 <_raise_r+0x1e>
 80295e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80295e4:	b94b      	cbnz	r3, 80295fa <_raise_r+0x32>
 80295e6:	4620      	mov	r0, r4
 80295e8:	f000 f830 	bl	802964c <_getpid_r>
 80295ec:	462a      	mov	r2, r5
 80295ee:	4601      	mov	r1, r0
 80295f0:	4620      	mov	r0, r4
 80295f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80295f6:	f000 b817 	b.w	8029628 <_kill_r>
 80295fa:	2b01      	cmp	r3, #1
 80295fc:	d00a      	beq.n	8029614 <_raise_r+0x4c>
 80295fe:	1c59      	adds	r1, r3, #1
 8029600:	d103      	bne.n	802960a <_raise_r+0x42>
 8029602:	2316      	movs	r3, #22
 8029604:	6003      	str	r3, [r0, #0]
 8029606:	2001      	movs	r0, #1
 8029608:	e7e7      	b.n	80295da <_raise_r+0x12>
 802960a:	2400      	movs	r4, #0
 802960c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029610:	4628      	mov	r0, r5
 8029612:	4798      	blx	r3
 8029614:	2000      	movs	r0, #0
 8029616:	e7e0      	b.n	80295da <_raise_r+0x12>

08029618 <raise>:
 8029618:	4b02      	ldr	r3, [pc, #8]	; (8029624 <raise+0xc>)
 802961a:	4601      	mov	r1, r0
 802961c:	6818      	ldr	r0, [r3, #0]
 802961e:	f7ff bfd3 	b.w	80295c8 <_raise_r>
 8029622:	bf00      	nop
 8029624:	240002a4 	.word	0x240002a4

08029628 <_kill_r>:
 8029628:	b538      	push	{r3, r4, r5, lr}
 802962a:	4d07      	ldr	r5, [pc, #28]	; (8029648 <_kill_r+0x20>)
 802962c:	2300      	movs	r3, #0
 802962e:	4604      	mov	r4, r0
 8029630:	4608      	mov	r0, r1
 8029632:	4611      	mov	r1, r2
 8029634:	602b      	str	r3, [r5, #0]
 8029636:	f7e3 ffed 	bl	800d614 <_kill>
 802963a:	1c43      	adds	r3, r0, #1
 802963c:	d102      	bne.n	8029644 <_kill_r+0x1c>
 802963e:	682b      	ldr	r3, [r5, #0]
 8029640:	b103      	cbz	r3, 8029644 <_kill_r+0x1c>
 8029642:	6023      	str	r3, [r4, #0]
 8029644:	bd38      	pop	{r3, r4, r5, pc}
 8029646:	bf00      	nop
 8029648:	24006030 	.word	0x24006030

0802964c <_getpid_r>:
 802964c:	f7e3 bfda 	b.w	800d604 <_getpid>

08029650 <powl>:
 8029650:	f000 b8d6 	b.w	8029800 <pow>
 8029654:	0000      	movs	r0, r0
	...

08029658 <ceil>:
 8029658:	ee10 1a90 	vmov	r1, s1
 802965c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8029660:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8029664:	2b13      	cmp	r3, #19
 8029666:	b530      	push	{r4, r5, lr}
 8029668:	ee10 0a10 	vmov	r0, s0
 802966c:	ee10 5a10 	vmov	r5, s0
 8029670:	dc2f      	bgt.n	80296d2 <ceil+0x7a>
 8029672:	2b00      	cmp	r3, #0
 8029674:	da13      	bge.n	802969e <ceil+0x46>
 8029676:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8029738 <ceil+0xe0>
 802967a:	ee30 0b07 	vadd.f64	d0, d0, d7
 802967e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8029682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029686:	dd05      	ble.n	8029694 <ceil+0x3c>
 8029688:	2900      	cmp	r1, #0
 802968a:	db4c      	blt.n	8029726 <ceil+0xce>
 802968c:	4301      	orrs	r1, r0
 802968e:	d04e      	beq.n	802972e <ceil+0xd6>
 8029690:	492b      	ldr	r1, [pc, #172]	; (8029740 <ceil+0xe8>)
 8029692:	2000      	movs	r0, #0
 8029694:	460b      	mov	r3, r1
 8029696:	4602      	mov	r2, r0
 8029698:	ec43 2b10 	vmov	d0, r2, r3
 802969c:	e020      	b.n	80296e0 <ceil+0x88>
 802969e:	4a29      	ldr	r2, [pc, #164]	; (8029744 <ceil+0xec>)
 80296a0:	411a      	asrs	r2, r3
 80296a2:	ea01 0402 	and.w	r4, r1, r2
 80296a6:	4304      	orrs	r4, r0
 80296a8:	d01a      	beq.n	80296e0 <ceil+0x88>
 80296aa:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8029738 <ceil+0xe0>
 80296ae:	ee30 0b07 	vadd.f64	d0, d0, d7
 80296b2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80296b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80296ba:	ddeb      	ble.n	8029694 <ceil+0x3c>
 80296bc:	2900      	cmp	r1, #0
 80296be:	bfc2      	ittt	gt
 80296c0:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 80296c4:	fa40 f303 	asrgt.w	r3, r0, r3
 80296c8:	18c9      	addgt	r1, r1, r3
 80296ca:	ea21 0102 	bic.w	r1, r1, r2
 80296ce:	2000      	movs	r0, #0
 80296d0:	e7e0      	b.n	8029694 <ceil+0x3c>
 80296d2:	2b33      	cmp	r3, #51	; 0x33
 80296d4:	dd05      	ble.n	80296e2 <ceil+0x8a>
 80296d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80296da:	d101      	bne.n	80296e0 <ceil+0x88>
 80296dc:	ee30 0b00 	vadd.f64	d0, d0, d0
 80296e0:	bd30      	pop	{r4, r5, pc}
 80296e2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80296e6:	f04f 32ff 	mov.w	r2, #4294967295
 80296ea:	40e2      	lsrs	r2, r4
 80296ec:	4202      	tst	r2, r0
 80296ee:	d0f7      	beq.n	80296e0 <ceil+0x88>
 80296f0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8029738 <ceil+0xe0>
 80296f4:	ee30 0b07 	vadd.f64	d0, d0, d7
 80296f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80296fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029700:	ddc8      	ble.n	8029694 <ceil+0x3c>
 8029702:	2900      	cmp	r1, #0
 8029704:	dd02      	ble.n	802970c <ceil+0xb4>
 8029706:	2b14      	cmp	r3, #20
 8029708:	d103      	bne.n	8029712 <ceil+0xba>
 802970a:	3101      	adds	r1, #1
 802970c:	ea20 0002 	bic.w	r0, r0, r2
 8029710:	e7c0      	b.n	8029694 <ceil+0x3c>
 8029712:	2401      	movs	r4, #1
 8029714:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8029718:	fa04 f303 	lsl.w	r3, r4, r3
 802971c:	4418      	add	r0, r3
 802971e:	42a8      	cmp	r0, r5
 8029720:	bf38      	it	cc
 8029722:	1909      	addcc	r1, r1, r4
 8029724:	e7f2      	b.n	802970c <ceil+0xb4>
 8029726:	2000      	movs	r0, #0
 8029728:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802972c:	e7b2      	b.n	8029694 <ceil+0x3c>
 802972e:	4608      	mov	r0, r1
 8029730:	e7b0      	b.n	8029694 <ceil+0x3c>
 8029732:	bf00      	nop
 8029734:	f3af 8000 	nop.w
 8029738:	8800759c 	.word	0x8800759c
 802973c:	7e37e43c 	.word	0x7e37e43c
 8029740:	3ff00000 	.word	0x3ff00000
 8029744:	000fffff 	.word	0x000fffff

08029748 <roundf>:
 8029748:	ee10 0a10 	vmov	r0, s0
 802974c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8029750:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8029754:	2a16      	cmp	r2, #22
 8029756:	dc15      	bgt.n	8029784 <roundf+0x3c>
 8029758:	2a00      	cmp	r2, #0
 802975a:	da08      	bge.n	802976e <roundf+0x26>
 802975c:	3201      	adds	r2, #1
 802975e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8029762:	d101      	bne.n	8029768 <roundf+0x20>
 8029764:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8029768:	ee00 3a10 	vmov	s0, r3
 802976c:	4770      	bx	lr
 802976e:	4908      	ldr	r1, [pc, #32]	; (8029790 <roundf+0x48>)
 8029770:	4111      	asrs	r1, r2
 8029772:	4208      	tst	r0, r1
 8029774:	d0fa      	beq.n	802976c <roundf+0x24>
 8029776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802977a:	4113      	asrs	r3, r2
 802977c:	4403      	add	r3, r0
 802977e:	ea23 0301 	bic.w	r3, r3, r1
 8029782:	e7f1      	b.n	8029768 <roundf+0x20>
 8029784:	2a80      	cmp	r2, #128	; 0x80
 8029786:	d1f1      	bne.n	802976c <roundf+0x24>
 8029788:	ee30 0a00 	vadd.f32	s0, s0, s0
 802978c:	4770      	bx	lr
 802978e:	bf00      	nop
 8029790:	007fffff 	.word	0x007fffff

08029794 <checkint>:
 8029794:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8029798:	f240 33fe 	movw	r3, #1022	; 0x3fe
 802979c:	429a      	cmp	r2, r3
 802979e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80297a0:	dd2b      	ble.n	80297fa <checkint+0x66>
 80297a2:	f240 4333 	movw	r3, #1075	; 0x433
 80297a6:	429a      	cmp	r2, r3
 80297a8:	dc25      	bgt.n	80297f6 <checkint+0x62>
 80297aa:	1a9b      	subs	r3, r3, r2
 80297ac:	f1a3 0620 	sub.w	r6, r3, #32
 80297b0:	f04f 32ff 	mov.w	r2, #4294967295
 80297b4:	fa02 f606 	lsl.w	r6, r2, r6
 80297b8:	fa02 f403 	lsl.w	r4, r2, r3
 80297bc:	f1c3 0520 	rsb	r5, r3, #32
 80297c0:	4334      	orrs	r4, r6
 80297c2:	fa22 f505 	lsr.w	r5, r2, r5
 80297c6:	432c      	orrs	r4, r5
 80297c8:	409a      	lsls	r2, r3
 80297ca:	ea20 0602 	bic.w	r6, r0, r2
 80297ce:	ea21 0704 	bic.w	r7, r1, r4
 80297d2:	ea56 0207 	orrs.w	r2, r6, r7
 80297d6:	f1a3 0420 	sub.w	r4, r3, #32
 80297da:	f1c3 0220 	rsb	r2, r3, #32
 80297de:	d10c      	bne.n	80297fa <checkint+0x66>
 80297e0:	40d8      	lsrs	r0, r3
 80297e2:	fa01 f302 	lsl.w	r3, r1, r2
 80297e6:	4318      	orrs	r0, r3
 80297e8:	40e1      	lsrs	r1, r4
 80297ea:	4308      	orrs	r0, r1
 80297ec:	f000 0301 	and.w	r3, r0, #1
 80297f0:	f1c3 0002 	rsb	r0, r3, #2
 80297f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80297f6:	2002      	movs	r0, #2
 80297f8:	e7fc      	b.n	80297f4 <checkint+0x60>
 80297fa:	2000      	movs	r0, #0
 80297fc:	e7fa      	b.n	80297f4 <checkint+0x60>
	...

08029800 <pow>:
 8029800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029804:	ed2d 8b0a 	vpush	{d8-d12}
 8029808:	b09b      	sub	sp, #108	; 0x6c
 802980a:	ed8d 0b02 	vstr	d0, [sp, #8]
 802980e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8029812:	ed8d 1b00 	vstr	d1, [sp]
 8029816:	ea4f 5915 	mov.w	r9, r5, lsr #20
 802981a:	e9dd 6700 	ldrd	r6, r7, [sp]
 802981e:	f109 30ff 	add.w	r0, r9, #4294967295
 8029822:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8029826:	4288      	cmp	r0, r1
 8029828:	46cc      	mov	ip, r9
 802982a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 802982e:	d806      	bhi.n	802983e <pow+0x3e>
 8029830:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8029834:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8029838:	297f      	cmp	r1, #127	; 0x7f
 802983a:	f240 81ab 	bls.w	8029b94 <pow+0x394>
 802983e:	19b1      	adds	r1, r6, r6
 8029840:	9104      	str	r1, [sp, #16]
 8029842:	eb47 0107 	adc.w	r1, r7, r7
 8029846:	9105      	str	r1, [sp, #20]
 8029848:	9904      	ldr	r1, [sp, #16]
 802984a:	f111 31ff 	adds.w	r1, r1, #4294967295
 802984e:	460a      	mov	r2, r1
 8029850:	9905      	ldr	r1, [sp, #20]
 8029852:	f141 31ff 	adc.w	r1, r1, #4294967295
 8029856:	460b      	mov	r3, r1
 8029858:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 802985c:	f06f 0001 	mvn.w	r0, #1
 8029860:	4299      	cmp	r1, r3
 8029862:	bf08      	it	eq
 8029864:	4290      	cmpeq	r0, r2
 8029866:	d260      	bcs.n	802992a <pow+0x12a>
 8029868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802986c:	4313      	orrs	r3, r2
 802986e:	d11a      	bne.n	80298a6 <pow+0xa6>
 8029870:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8029874:	1923      	adds	r3, r4, r4
 8029876:	930c      	str	r3, [sp, #48]	; 0x30
 8029878:	eb42 0302 	adc.w	r3, r2, r2
 802987c:	930d      	str	r3, [sp, #52]	; 0x34
 802987e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8029882:	4bcf      	ldr	r3, [pc, #828]	; (8029bc0 <pow+0x3c0>)
 8029884:	2200      	movs	r2, #0
 8029886:	428b      	cmp	r3, r1
 8029888:	bf08      	it	eq
 802988a:	4282      	cmpeq	r2, r0
 802988c:	f080 8265 	bcs.w	8029d5a <pow+0x55a>
 8029890:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029894:	ed9d 6b00 	vldr	d6, [sp]
 8029898:	ee37 0b06 	vadd.f64	d0, d7, d6
 802989c:	b01b      	add	sp, #108	; 0x6c
 802989e:	ecbd 8b0a 	vpop	{d8-d12}
 80298a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298a6:	49c7      	ldr	r1, [pc, #796]	; (8029bc4 <pow+0x3c4>)
 80298a8:	2000      	movs	r0, #0
 80298aa:	428d      	cmp	r5, r1
 80298ac:	bf08      	it	eq
 80298ae:	4284      	cmpeq	r4, r0
 80298b0:	d10b      	bne.n	80298ca <pow+0xca>
 80298b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80298b6:	19b3      	adds	r3, r6, r6
 80298b8:	930e      	str	r3, [sp, #56]	; 0x38
 80298ba:	eb42 0302 	adc.w	r3, r2, r2
 80298be:	930f      	str	r3, [sp, #60]	; 0x3c
 80298c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80298c4:	4bbe      	ldr	r3, [pc, #760]	; (8029bc0 <pow+0x3c0>)
 80298c6:	2200      	movs	r2, #0
 80298c8:	e7dd      	b.n	8029886 <pow+0x86>
 80298ca:	1921      	adds	r1, r4, r4
 80298cc:	9106      	str	r1, [sp, #24]
 80298ce:	eb45 0105 	adc.w	r1, r5, r5
 80298d2:	9107      	str	r1, [sp, #28]
 80298d4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80298d8:	49bb      	ldr	r1, [pc, #748]	; (8029bc8 <pow+0x3c8>)
 80298da:	2000      	movs	r0, #0
 80298dc:	42a1      	cmp	r1, r4
 80298de:	bf08      	it	eq
 80298e0:	4298      	cmpeq	r0, r3
 80298e2:	d3d5      	bcc.n	8029890 <pow+0x90>
 80298e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80298e8:	428c      	cmp	r4, r1
 80298ea:	bf08      	it	eq
 80298ec:	4283      	cmpeq	r3, r0
 80298ee:	d1cf      	bne.n	8029890 <pow+0x90>
 80298f0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80298f4:	49b5      	ldr	r1, [pc, #724]	; (8029bcc <pow+0x3cc>)
 80298f6:	2000      	movs	r0, #0
 80298f8:	428c      	cmp	r4, r1
 80298fa:	bf08      	it	eq
 80298fc:	4283      	cmpeq	r3, r0
 80298fe:	f000 822c 	beq.w	8029d5a <pow+0x55a>
 8029902:	49b3      	ldr	r1, [pc, #716]	; (8029bd0 <pow+0x3d0>)
 8029904:	f04f 30ff 	mov.w	r0, #4294967295
 8029908:	42a1      	cmp	r1, r4
 802990a:	bf08      	it	eq
 802990c:	4298      	cmpeq	r0, r3
 802990e:	ea6f 0307 	mvn.w	r3, r7
 8029912:	bf34      	ite	cc
 8029914:	2201      	movcc	r2, #1
 8029916:	2200      	movcs	r2, #0
 8029918:	0fdb      	lsrs	r3, r3, #31
 802991a:	429a      	cmp	r2, r3
 802991c:	f040 821a 	bne.w	8029d54 <pow+0x554>
 8029920:	ed9d 7b00 	vldr	d7, [sp]
 8029924:	ee27 0b07 	vmul.f64	d0, d7, d7
 8029928:	e7b8      	b.n	802989c <pow+0x9c>
 802992a:	1923      	adds	r3, r4, r4
 802992c:	9308      	str	r3, [sp, #32]
 802992e:	eb45 0305 	adc.w	r3, r5, r5
 8029932:	9309      	str	r3, [sp, #36]	; 0x24
 8029934:	9b08      	ldr	r3, [sp, #32]
 8029936:	f113 33ff 	adds.w	r3, r3, #4294967295
 802993a:	9310      	str	r3, [sp, #64]	; 0x40
 802993c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802993e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8029942:	9311      	str	r3, [sp, #68]	; 0x44
 8029944:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8029948:	4299      	cmp	r1, r3
 802994a:	bf08      	it	eq
 802994c:	4290      	cmpeq	r0, r2
 802994e:	d22d      	bcs.n	80299ac <pow+0x1ac>
 8029950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029954:	2c00      	cmp	r4, #0
 8029956:	f175 0300 	sbcs.w	r3, r5, #0
 802995a:	ee27 0b07 	vmul.f64	d0, d7, d7
 802995e:	da16      	bge.n	802998e <pow+0x18e>
 8029960:	4630      	mov	r0, r6
 8029962:	4639      	mov	r1, r7
 8029964:	f7ff ff16 	bl	8029794 <checkint>
 8029968:	2801      	cmp	r0, #1
 802996a:	d110      	bne.n	802998e <pow+0x18e>
 802996c:	eeb1 0b40 	vneg.f64	d0, d0
 8029970:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8029974:	4323      	orrs	r3, r4
 8029976:	d10c      	bne.n	8029992 <pow+0x192>
 8029978:	2e00      	cmp	r6, #0
 802997a:	f177 0300 	sbcs.w	r3, r7, #0
 802997e:	da8d      	bge.n	802989c <pow+0x9c>
 8029980:	b01b      	add	sp, #108	; 0x6c
 8029982:	ecbd 8b0a 	vpop	{d8-d12}
 8029986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802998a:	f000 ba29 	b.w	8029de0 <__math_divzero>
 802998e:	2000      	movs	r0, #0
 8029990:	e7ee      	b.n	8029970 <pow+0x170>
 8029992:	2e00      	cmp	r6, #0
 8029994:	f177 0300 	sbcs.w	r3, r7, #0
 8029998:	da80      	bge.n	802989c <pow+0x9c>
 802999a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802999e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80299a2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80299a6:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80299aa:	e777      	b.n	802989c <pow+0x9c>
 80299ac:	2c00      	cmp	r4, #0
 80299ae:	f175 0300 	sbcs.w	r3, r5, #0
 80299b2:	da35      	bge.n	8029a20 <pow+0x220>
 80299b4:	4630      	mov	r0, r6
 80299b6:	4639      	mov	r1, r7
 80299b8:	f7ff feec 	bl	8029794 <checkint>
 80299bc:	b940      	cbnz	r0, 80299d0 <pow+0x1d0>
 80299be:	ed9d 0b02 	vldr	d0, [sp, #8]
 80299c2:	b01b      	add	sp, #108	; 0x6c
 80299c4:	ecbd 8b0a 	vpop	{d8-d12}
 80299c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299cc:	f000 ba20 	b.w	8029e10 <__math_invalid>
 80299d0:	2801      	cmp	r0, #1
 80299d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80299d6:	bf14      	ite	ne
 80299d8:	2000      	movne	r0, #0
 80299da:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80299de:	461d      	mov	r5, r3
 80299e0:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 80299e4:	f3c8 030a 	ubfx	r3, r8, #0, #11
 80299e8:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 80299ec:	2a7f      	cmp	r2, #127	; 0x7f
 80299ee:	d933      	bls.n	8029a58 <pow+0x258>
 80299f0:	4974      	ldr	r1, [pc, #464]	; (8029bc4 <pow+0x3c4>)
 80299f2:	2000      	movs	r0, #0
 80299f4:	428d      	cmp	r5, r1
 80299f6:	bf08      	it	eq
 80299f8:	4284      	cmpeq	r4, r0
 80299fa:	f000 81ae 	beq.w	8029d5a <pow+0x55a>
 80299fe:	f240 32bd 	movw	r2, #957	; 0x3bd
 8029a02:	4293      	cmp	r3, r2
 8029a04:	d80e      	bhi.n	8029a24 <pow+0x224>
 8029a06:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8029a0a:	ed9d 7b00 	vldr	d7, [sp]
 8029a0e:	42a9      	cmp	r1, r5
 8029a10:	bf08      	it	eq
 8029a12:	42a0      	cmpeq	r0, r4
 8029a14:	bf34      	ite	cc
 8029a16:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8029a1a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8029a1e:	e73d      	b.n	802989c <pow+0x9c>
 8029a20:	2000      	movs	r0, #0
 8029a22:	e7df      	b.n	80299e4 <pow+0x1e4>
 8029a24:	42a9      	cmp	r1, r5
 8029a26:	bf08      	it	eq
 8029a28:	42a0      	cmpeq	r0, r4
 8029a2a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8029a2e:	bf2c      	ite	cs
 8029a30:	2301      	movcs	r3, #1
 8029a32:	2300      	movcc	r3, #0
 8029a34:	4590      	cmp	r8, r2
 8029a36:	bf8c      	ite	hi
 8029a38:	f04f 0800 	movhi.w	r8, #0
 8029a3c:	f04f 0801 	movls.w	r8, #1
 8029a40:	4543      	cmp	r3, r8
 8029a42:	f04f 0000 	mov.w	r0, #0
 8029a46:	f000 80af 	beq.w	8029ba8 <pow+0x3a8>
 8029a4a:	b01b      	add	sp, #108	; 0x6c
 8029a4c:	ecbd 8b0a 	vpop	{d8-d12}
 8029a50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a54:	f000 b9bc 	b.w	8029dd0 <__math_oflow>
 8029a58:	f1bc 0f00 	cmp.w	ip, #0
 8029a5c:	d10e      	bne.n	8029a7c <pow+0x27c>
 8029a5e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8029bb8 <pow+0x3b8>
 8029a62:	ed9d 6b02 	vldr	d6, [sp, #8]
 8029a66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029a6a:	ec57 6b17 	vmov	r6, r7, d7
 8029a6e:	4b59      	ldr	r3, [pc, #356]	; (8029bd4 <pow+0x3d4>)
 8029a70:	2100      	movs	r1, #0
 8029a72:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8029a76:	1874      	adds	r4, r6, r1
 8029a78:	eb42 0503 	adc.w	r5, r2, r3
 8029a7c:	2300      	movs	r3, #0
 8029a7e:	18e3      	adds	r3, r4, r3
 8029a80:	4b55      	ldr	r3, [pc, #340]	; (8029bd8 <pow+0x3d8>)
 8029a82:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8029a86:	eb45 0303 	adc.w	r3, r5, r3
 8029a8a:	1519      	asrs	r1, r3, #20
 8029a8c:	ee03 1a10 	vmov	s6, r1
 8029a90:	0d1e      	lsrs	r6, r3, #20
 8029a92:	2100      	movs	r1, #0
 8029a94:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8029a98:	0536      	lsls	r6, r6, #20
 8029a9a:	1a63      	subs	r3, r4, r1
 8029a9c:	9312      	str	r3, [sp, #72]	; 0x48
 8029a9e:	eb65 0306 	sbc.w	r3, r5, r6
 8029aa2:	9313      	str	r3, [sp, #76]	; 0x4c
 8029aa4:	4b4d      	ldr	r3, [pc, #308]	; (8029bdc <pow+0x3dc>)
 8029aa6:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8029aaa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8029aae:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8029ab2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8029ab6:	ed93 7b00 	vldr	d7, [r3]
 8029aba:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8029abe:	ed93 4b02 	vldr	d4, [r3, #8]
 8029ac2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8029ac6:	eea3 5b07 	vfma.f64	d5, d3, d7
 8029aca:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8029ace:	ee36 9b05 	vadd.f64	d9, d6, d5
 8029ad2:	ee35 5b49 	vsub.f64	d5, d5, d9
 8029ad6:	eea3 7b04 	vfma.f64	d7, d3, d4
 8029ada:	ed93 4b04 	vldr	d4, [r3, #16]
 8029ade:	ee35 5b06 	vadd.f64	d5, d5, d6
 8029ae2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8029ae6:	ee26 4b04 	vmul.f64	d4, d6, d4
 8029aea:	ed93 3b08 	vldr	d3, [r3, #32]
 8029aee:	ee26 0b04 	vmul.f64	d0, d6, d4
 8029af2:	eeb0 8b40 	vmov.f64	d8, d0
 8029af6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8029afa:	ed93 4b06 	vldr	d4, [r3, #24]
 8029afe:	ee26 ab00 	vmul.f64	d10, d6, d0
 8029b02:	ee39 1b00 	vadd.f64	d1, d9, d0
 8029b06:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8029b0a:	eea6 4b03 	vfma.f64	d4, d6, d3
 8029b0e:	ee39 9b41 	vsub.f64	d9, d9, d1
 8029b12:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8029b16:	ee37 8b08 	vadd.f64	d8, d7, d8
 8029b1a:	ee39 9b00 	vadd.f64	d9, d9, d0
 8029b1e:	eea6 3b02 	vfma.f64	d3, d6, d2
 8029b22:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8029b26:	ee38 9b09 	vadd.f64	d9, d8, d9
 8029b2a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8029b2e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8029b32:	ed9d 6b00 	vldr	d6, [sp]
 8029b36:	eea0 3b02 	vfma.f64	d3, d0, d2
 8029b3a:	eea0 4b03 	vfma.f64	d4, d0, d3
 8029b3e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8029b42:	ee31 7b09 	vadd.f64	d7, d1, d9
 8029b46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8029b4a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8029b4e:	eeb0 3b46 	vmov.f64	d3, d6
 8029b52:	ee31 1b47 	vsub.f64	d1, d1, d7
 8029b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029b5a:	ee31 9b09 	vadd.f64	d9, d1, d9
 8029b5e:	ed9d 6b00 	vldr	d6, [sp]
 8029b62:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8029b66:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8029b6a:	193c      	adds	r4, r7, r4
 8029b6c:	2c3e      	cmp	r4, #62	; 0x3e
 8029b6e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8029b72:	eea6 3b09 	vfma.f64	d3, d6, d9
 8029b76:	d934      	bls.n	8029be2 <pow+0x3e2>
 8029b78:	428c      	cmp	r4, r1
 8029b7a:	da0d      	bge.n	8029b98 <pow+0x398>
 8029b7c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8029b80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029b84:	ee37 0b00 	vadd.f64	d0, d7, d0
 8029b88:	2800      	cmp	r0, #0
 8029b8a:	f43f ae87 	beq.w	802989c <pow+0x9c>
 8029b8e:	eeb1 0b40 	vneg.f64	d0, d0
 8029b92:	e683      	b.n	802989c <pow+0x9c>
 8029b94:	2000      	movs	r0, #0
 8029b96:	e771      	b.n	8029a7c <pow+0x27c>
 8029b98:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8029b9c:	d920      	bls.n	8029be0 <pow+0x3e0>
 8029b9e:	2a00      	cmp	r2, #0
 8029ba0:	f173 0300 	sbcs.w	r3, r3, #0
 8029ba4:	f6bf af51 	bge.w	8029a4a <pow+0x24a>
 8029ba8:	b01b      	add	sp, #108	; 0x6c
 8029baa:	ecbd 8b0a 	vpop	{d8-d12}
 8029bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029bb2:	f000 b905 	b.w	8029dc0 <__math_uflow>
 8029bb6:	bf00      	nop
 8029bb8:	00000000 	.word	0x00000000
 8029bbc:	43300000 	.word	0x43300000
 8029bc0:	fff00000 	.word	0xfff00000
 8029bc4:	3ff00000 	.word	0x3ff00000
 8029bc8:	ffe00000 	.word	0xffe00000
 8029bcc:	7fe00000 	.word	0x7fe00000
 8029bd0:	7fdfffff 	.word	0x7fdfffff
 8029bd4:	fcc00000 	.word	0xfcc00000
 8029bd8:	c0196aab 	.word	0xc0196aab
 8029bdc:	0802b8f8 	.word	0x0802b8f8
 8029be0:	460f      	mov	r7, r1
 8029be2:	4e65      	ldr	r6, [pc, #404]	; (8029d78 <pow+0x578>)
 8029be4:	ed9d 4b02 	vldr	d4, [sp, #8]
 8029be8:	ed96 6b02 	vldr	d6, [r6, #8]
 8029bec:	ed96 7b00 	vldr	d7, [r6]
 8029bf0:	eeb0 5b46 	vmov.f64	d5, d6
 8029bf4:	eea4 5b07 	vfma.f64	d5, d4, d7
 8029bf8:	ed8d 5b00 	vstr	d5, [sp]
 8029bfc:	ee35 6b46 	vsub.f64	d6, d5, d6
 8029c00:	eeb0 5b44 	vmov.f64	d5, d4
 8029c04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029c08:	ed96 7b04 	vldr	d7, [r6, #16]
 8029c0c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8029c10:	eea6 5b07 	vfma.f64	d5, d6, d7
 8029c14:	eeb0 7b45 	vmov.f64	d7, d5
 8029c18:	ed96 5b06 	vldr	d5, [r6, #24]
 8029c1c:	1849      	adds	r1, r1, r1
 8029c1e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8029c22:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8029c26:	eea6 7b05 	vfma.f64	d7, d6, d5
 8029c2a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8029c2e:	ee33 3b07 	vadd.f64	d3, d3, d7
 8029c32:	ee23 6b03 	vmul.f64	d6, d3, d3
 8029c36:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8029c3a:	ed96 5b08 	vldr	d5, [r6, #32]
 8029c3e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8029c42:	1814      	adds	r4, r2, r0
 8029c44:	0365      	lsls	r5, r4, #13
 8029c46:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8029c4a:	eea3 5b04 	vfma.f64	d5, d3, d4
 8029c4e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8029c52:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8029c56:	ee26 6b06 	vmul.f64	d6, d6, d6
 8029c5a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8029c5e:	2000      	movs	r0, #0
 8029c60:	eb10 0a04 	adds.w	sl, r0, r4
 8029c64:	eea3 5b04 	vfma.f64	d5, d3, d4
 8029c68:	eb45 0b0c 	adc.w	fp, r5, ip
 8029c6c:	eea6 7b05 	vfma.f64	d7, d6, d5
 8029c70:	2f00      	cmp	r7, #0
 8029c72:	d16a      	bne.n	8029d4a <pow+0x54a>
 8029c74:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8029c78:	4639      	mov	r1, r7
 8029c7a:	ea50 0301 	orrs.w	r3, r0, r1
 8029c7e:	f04f 0300 	mov.w	r3, #0
 8029c82:	d115      	bne.n	8029cb0 <pow+0x4b0>
 8029c84:	eb1a 0303 	adds.w	r3, sl, r3
 8029c88:	ee0b 3a10 	vmov	s22, r3
 8029c8c:	4b3b      	ldr	r3, [pc, #236]	; (8029d7c <pow+0x57c>)
 8029c8e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8029d60 <pow+0x560>
 8029c92:	eb4b 0303 	adc.w	r3, fp, r3
 8029c96:	ee0b 3a90 	vmov	s23, r3
 8029c9a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8029c9e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8029ca2:	b01b      	add	sp, #108	; 0x6c
 8029ca4:	ecbd 8b0a 	vpop	{d8-d12}
 8029ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029cac:	f000 b8c8 	b.w	8029e40 <__math_check_oflow>
 8029cb0:	eb1a 0303 	adds.w	r3, sl, r3
 8029cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8029cb6:	4b32      	ldr	r3, [pc, #200]	; (8029d80 <pow+0x580>)
 8029cb8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8029cbc:	eb4b 0303 	adc.w	r3, fp, r3
 8029cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8029cc2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8029cc6:	ee27 6b05 	vmul.f64	d6, d7, d5
 8029cca:	ee35 7b06 	vadd.f64	d7, d5, d6
 8029cce:	eeb0 3bc7 	vabs.f64	d3, d7
 8029cd2:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8029cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029cda:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8029d68 <pow+0x568>
 8029cde:	d52b      	bpl.n	8029d38 <pow+0x538>
 8029ce0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8029ce4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8029ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029cec:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8029cf0:	ee35 6b06 	vadd.f64	d6, d5, d6
 8029cf4:	bf48      	it	mi
 8029cf6:	eeb0 4b43 	vmovmi.f64	d4, d3
 8029cfa:	ee37 3b04 	vadd.f64	d3, d7, d4
 8029cfe:	ee34 5b43 	vsub.f64	d5, d4, d3
 8029d02:	ee35 7b07 	vadd.f64	d7, d5, d7
 8029d06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8029d0a:	ee37 7b03 	vadd.f64	d7, d7, d3
 8029d0e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8029d12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8029d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029d1a:	d105      	bne.n	8029d28 <pow+0x528>
 8029d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029d1e:	463a      	mov	r2, r7
 8029d20:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8029d24:	ec43 2b17 	vmov	d7, r2, r3
 8029d28:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8029d2c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8029d30:	ee26 6b00 	vmul.f64	d6, d6, d0
 8029d34:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8029d38:	ee27 0b00 	vmul.f64	d0, d7, d0
 8029d3c:	b01b      	add	sp, #108	; 0x6c
 8029d3e:	ecbd 8b0a 	vpop	{d8-d12}
 8029d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d46:	f000 b872 	b.w	8029e2e <__math_check_uflow>
 8029d4a:	ec4b ab10 	vmov	d0, sl, fp
 8029d4e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8029d52:	e5a3      	b.n	802989c <pow+0x9c>
 8029d54:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8029d70 <pow+0x570>
 8029d58:	e5a0      	b.n	802989c <pow+0x9c>
 8029d5a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8029d5e:	e59d      	b.n	802989c <pow+0x9c>
 8029d60:	00000000 	.word	0x00000000
 8029d64:	7f000000 	.word	0x7f000000
 8029d68:	00000000 	.word	0x00000000
 8029d6c:	00100000 	.word	0x00100000
	...
 8029d78:	0802c940 	.word	0x0802c940
 8029d7c:	c0f00000 	.word	0xc0f00000
 8029d80:	3fe00000 	.word	0x3fe00000

08029d84 <with_errno>:
 8029d84:	b513      	push	{r0, r1, r4, lr}
 8029d86:	4604      	mov	r4, r0
 8029d88:	ed8d 0b00 	vstr	d0, [sp]
 8029d8c:	f7fc fc92 	bl	80266b4 <__errno>
 8029d90:	ed9d 0b00 	vldr	d0, [sp]
 8029d94:	6004      	str	r4, [r0, #0]
 8029d96:	b002      	add	sp, #8
 8029d98:	bd10      	pop	{r4, pc}

08029d9a <xflow>:
 8029d9a:	b082      	sub	sp, #8
 8029d9c:	b158      	cbz	r0, 8029db6 <xflow+0x1c>
 8029d9e:	eeb1 7b40 	vneg.f64	d7, d0
 8029da2:	ed8d 7b00 	vstr	d7, [sp]
 8029da6:	ed9d 7b00 	vldr	d7, [sp]
 8029daa:	2022      	movs	r0, #34	; 0x22
 8029dac:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029db0:	b002      	add	sp, #8
 8029db2:	f7ff bfe7 	b.w	8029d84 <with_errno>
 8029db6:	eeb0 7b40 	vmov.f64	d7, d0
 8029dba:	e7f2      	b.n	8029da2 <xflow+0x8>
 8029dbc:	0000      	movs	r0, r0
	...

08029dc0 <__math_uflow>:
 8029dc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8029dc8 <__math_uflow+0x8>
 8029dc4:	f7ff bfe9 	b.w	8029d9a <xflow>
 8029dc8:	00000000 	.word	0x00000000
 8029dcc:	10000000 	.word	0x10000000

08029dd0 <__math_oflow>:
 8029dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8029dd8 <__math_oflow+0x8>
 8029dd4:	f7ff bfe1 	b.w	8029d9a <xflow>
 8029dd8:	00000000 	.word	0x00000000
 8029ddc:	70000000 	.word	0x70000000

08029de0 <__math_divzero>:
 8029de0:	b082      	sub	sp, #8
 8029de2:	2800      	cmp	r0, #0
 8029de4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8029de8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8029dec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8029df0:	ed8d 7b00 	vstr	d7, [sp]
 8029df4:	ed9d 0b00 	vldr	d0, [sp]
 8029df8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8029e08 <__math_divzero+0x28>
 8029dfc:	2022      	movs	r0, #34	; 0x22
 8029dfe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8029e02:	b002      	add	sp, #8
 8029e04:	f7ff bfbe 	b.w	8029d84 <with_errno>
	...

08029e10 <__math_invalid>:
 8029e10:	eeb0 7b40 	vmov.f64	d7, d0
 8029e14:	eeb4 7b47 	vcmp.f64	d7, d7
 8029e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e1c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8029e20:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8029e24:	d602      	bvs.n	8029e2c <__math_invalid+0x1c>
 8029e26:	2021      	movs	r0, #33	; 0x21
 8029e28:	f7ff bfac 	b.w	8029d84 <with_errno>
 8029e2c:	4770      	bx	lr

08029e2e <__math_check_uflow>:
 8029e2e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8029e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e36:	d102      	bne.n	8029e3e <__math_check_uflow+0x10>
 8029e38:	2022      	movs	r0, #34	; 0x22
 8029e3a:	f7ff bfa3 	b.w	8029d84 <with_errno>
 8029e3e:	4770      	bx	lr

08029e40 <__math_check_oflow>:
 8029e40:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8029e60 <__math_check_oflow+0x20>
 8029e44:	eeb0 7bc0 	vabs.f64	d7, d0
 8029e48:	eeb4 7b46 	vcmp.f64	d7, d6
 8029e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e50:	dd02      	ble.n	8029e58 <__math_check_oflow+0x18>
 8029e52:	2022      	movs	r0, #34	; 0x22
 8029e54:	f7ff bf96 	b.w	8029d84 <with_errno>
 8029e58:	4770      	bx	lr
 8029e5a:	bf00      	nop
 8029e5c:	f3af 8000 	nop.w
 8029e60:	ffffffff 	.word	0xffffffff
 8029e64:	7fefffff 	.word	0x7fefffff

08029e68 <_init>:
 8029e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029e6a:	bf00      	nop
 8029e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029e6e:	bc08      	pop	{r3}
 8029e70:	469e      	mov	lr, r3
 8029e72:	4770      	bx	lr

08029e74 <_fini>:
 8029e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029e76:	bf00      	nop
 8029e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029e7a:	bc08      	pop	{r3}
 8029e7c:	469e      	mov	lr, r3
 8029e7e:	4770      	bx	lr
