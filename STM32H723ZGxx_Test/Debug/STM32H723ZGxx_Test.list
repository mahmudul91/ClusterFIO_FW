
STM32H723ZGxx_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d788  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800da58  0800da58  0001da58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db2c  0800db2c  0001db2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db34  0800db34  0001db34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800db38  0800db38  0001db38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800db3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  24000074  0800dbb0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000414  0800dbb0  00020414  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026de6  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035b9  00000000  00000000  00046e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001550  00000000  00000000  0004a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001458  00000000  00000000  0004b998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003523f  00000000  00000000  0004cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b7f3  00000000  00000000  0008202f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016322f  00000000  00000000  0009d822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00200a51  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006048  00000000  00000000  00200aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800da40 	.word	0x0800da40

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800da40 	.word	0x0800da40

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <HAL_UART_TxCpltCallback>:
	  {
	    Error_Handler();
	  }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	uint8_t pData[10] = {0};
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	809a      	strh	r2, [r3, #4]
	uint8_t len;
	len = sprintf((char*)pData,"RTU_TXC\r\n");
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	490b      	ldr	r1, [pc, #44]	; (80006f0 <HAL_UART_TxCpltCallback+0x48>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f00c fd8d 	bl	800d1e4 <siprintf>
 80006ca:	4603      	mov	r3, r0
 80006cc:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart3, pData, len, len);
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
 80006d4:	f107 010c 	add.w	r1, r7, #12
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <HAL_UART_TxCpltCallback+0x4c>)
 80006da:	f00a fbef 	bl	800aebc <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2108      	movs	r1, #8
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <HAL_UART_TxCpltCallback+0x50>)
 80006e4:	f006 f9ce 	bl	8006a84 <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	0800da58 	.word	0x0800da58
 80006f4:	24000160 	.word	0x24000160
 80006f8:	58021000 	.word	0x58021000

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09e      	sub	sp, #120	; 0x78
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f001 f8e1 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f931 	bl	800096c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800070a:	f000 fbdb 	bl	8000ec4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f000 fc01 	bl	8000f14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000712:	f000 f9a3 	bl	8000a5c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000716:	f000 fb89 	bl	8000e2c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800071a:	f000 fa17 	bl	8000b4c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800071e:	f000 fb35 	bl	8000d8c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000722:	f000 faab 	bl	8000c7c <MX_TIM4_Init>

  MX_TIM6_Init();
 8000726:	f000 faf9 	bl	8000d1c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  uint16_t duty = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  uint8_t pData[100] = {0};
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2260      	movs	r2, #96	; 0x60
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f00c fd49 	bl	800d1d4 <memset>
  uint16_t len = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
uint32_t tick = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	673b      	str	r3, [r7, #112]	; 0x70
uint16_t ADC_VAL[2] = {0};
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
len = sprintf((char*)pData,"Started...\r\n");
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4977      	ldr	r1, [pc, #476]	; (8000934 <main+0x238>)
 8000756:	4618      	mov	r0, r3
 8000758:	f00c fd44 	bl	800d1e4 <siprintf>
 800075c:	4603      	mov	r3, r0
 800075e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
HAL_UART_Transmit(&huart3,pData , len, len+2);
 8000762:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000766:	3302      	adds	r3, #2
 8000768:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800076c:	f107 0108 	add.w	r1, r7, #8
 8000770:	4871      	ldr	r0, [pc, #452]	; (8000938 <main+0x23c>)
 8000772:	f00a fba3 	bl	800aebc <HAL_UART_Transmit>

	HAL_StatusTypeDef status =  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000776:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800077a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800077e:	486f      	ldr	r0, [pc, #444]	; (800093c <main+0x240>)
 8000780:	f002 ff4a 	bl	8003618 <HAL_ADCEx_Calibration_Start>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	if(status != HAL_OK){
 800078a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800078e:	2b00      	cmp	r3, #0
 8000790:	d012      	beq.n	80007b8 <main+0xbc>
		len = sprintf((char*)pData,"status1: %d\r\n", status);
 8000792:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	4969      	ldr	r1, [pc, #420]	; (8000940 <main+0x244>)
 800079c:	4618      	mov	r0, r3
 800079e:	f00c fd21 	bl	800d1e4 <siprintf>
 80007a2:	4603      	mov	r3, r0
 80007a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart3, pData, len, 10);
 80007a8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80007ac:	f107 0108 	add.w	r1, r7, #8
 80007b0:	230a      	movs	r3, #10
 80007b2:	4861      	ldr	r0, [pc, #388]	; (8000938 <main+0x23c>)
 80007b4:	f00a fb82 	bl	800aebc <HAL_UART_Transmit>
	}

	status =  HAL_ADC_Start(&hadc1);
 80007b8:	4860      	ldr	r0, [pc, #384]	; (800093c <main+0x240>)
 80007ba:	f001 fe05 	bl	80023c8 <HAL_ADC_Start>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	if(status != HAL_OK){
 80007c4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d012      	beq.n	80007f2 <main+0xf6>
		len = sprintf((char*)pData,"status2: %d\r\n", status);
 80007cc:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	495b      	ldr	r1, [pc, #364]	; (8000944 <main+0x248>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f00c fd04 	bl	800d1e4 <siprintf>
 80007dc:	4603      	mov	r3, r0
 80007de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart3, pData, len, 10);
 80007e2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80007e6:	f107 0108 	add.w	r1, r7, #8
 80007ea:	230a      	movs	r3, #10
 80007ec:	4852      	ldr	r0, [pc, #328]	; (8000938 <main+0x23c>)
 80007ee:	f00a fb65 	bl	800aebc <HAL_UART_Transmit>
	}
	status =  HAL_ADC_PollForConversion(&hadc1, 10);
 80007f2:	210a      	movs	r1, #10
 80007f4:	4851      	ldr	r0, [pc, #324]	; (800093c <main+0x240>)
 80007f6:	f001 feb1 	bl	800255c <HAL_ADC_PollForConversion>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	if(status != HAL_OK){
 8000800:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000804:	2b00      	cmp	r3, #0
 8000806:	d012      	beq.n	800082e <main+0x132>
		len = sprintf((char*)pData,"status3: %d\r\n", status);
 8000808:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	494d      	ldr	r1, [pc, #308]	; (8000948 <main+0x24c>)
 8000812:	4618      	mov	r0, r3
 8000814:	f00c fce6 	bl	800d1e4 <siprintf>
 8000818:	4603      	mov	r3, r0
 800081a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart3, pData, len, 10);
 800081e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000822:	f107 0108 	add.w	r1, r7, #8
 8000826:	230a      	movs	r3, #10
 8000828:	4843      	ldr	r0, [pc, #268]	; (8000938 <main+0x23c>)
 800082a:	f00a fb47 	bl	800aebc <HAL_UART_Transmit>
	}
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 800082e:	4843      	ldr	r0, [pc, #268]	; (800093c <main+0x240>)
 8000830:	f001 ff88 	bl	8002744 <HAL_ADC_GetValue>
 8000834:	4603      	mov	r3, r0
 8000836:	b29b      	uxth	r3, r3
 8000838:	80bb      	strh	r3, [r7, #4]
//	HAL_ADC_Stop(&hadc1);
	len = sprintf((char*)pData,"ADC: %d\r\n", ADC_VAL[0]);
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	461a      	mov	r2, r3
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4942      	ldr	r1, [pc, #264]	; (800094c <main+0x250>)
 8000844:	4618      	mov	r0, r3
 8000846:	f00c fccd 	bl	800d1e4 <siprintf>
 800084a:	4603      	mov	r3, r0
 800084c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	HAL_UART_Transmit(&huart3, pData, len, 10);
 8000850:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000854:	f107 0108 	add.w	r1, r7, #8
 8000858:	230a      	movs	r3, #10
 800085a:	4837      	ldr	r0, [pc, #220]	; (8000938 <main+0x23c>)
 800085c:	f00a fb2e 	bl	800aebc <HAL_UART_Transmit>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2,  pData, 100);
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	2264      	movs	r2, #100	; 0x64
 8000866:	4619      	mov	r1, r3
 8000868:	4839      	ldr	r0, [pc, #228]	; (8000950 <main+0x254>)
 800086a:	f00c fbdf 	bl	800d02c <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_TIM_Base_Start_IT(&htim4);
 800086e:	4839      	ldr	r0, [pc, #228]	; (8000954 <main+0x258>)
 8000870:	f009 f9bc 	bl	8009bec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000874:	4838      	ldr	r0, [pc, #224]	; (8000958 <main+0x25c>)
 8000876:	f009 f9b9 	bl	8009bec <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - tick >= 3000){
 800087a:	f001 f8ab 	bl	80019d4 <HAL_GetTick>
 800087e:	4602      	mov	r2, r0
 8000880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000888:	4293      	cmp	r3, r2
 800088a:	d9f6      	bls.n	800087a <main+0x17e>

		  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2108      	movs	r1, #8
 8000890:	4832      	ldr	r0, [pc, #200]	; (800095c <main+0x260>)
 8000892:	f006 f8f7 	bl	8006a84 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f001 f8a8 	bl	80019ec <HAL_Delay>
//		  HAL_UART_Transmit(&huart2, (uint8_t *)"Test\r\n", 6, 10);
		  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"Test\r\n", 6);
 800089c:	2206      	movs	r2, #6
 800089e:	4930      	ldr	r1, [pc, #192]	; (8000960 <main+0x264>)
 80008a0:	482b      	ldr	r0, [pc, #172]	; (8000950 <main+0x254>)
 80008a2:	f00a fba1 	bl	800afe8 <HAL_UART_Transmit_DMA>
		  HAL_Delay(100);
 80008a6:	2064      	movs	r0, #100	; 0x64
 80008a8:	f001 f8a0 	bl	80019ec <HAL_Delay>
		  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2108      	movs	r1, #8
 80008b0:	482a      	ldr	r0, [pc, #168]	; (800095c <main+0x260>)
 80008b2:	f006 f8e7 	bl	8006a84 <HAL_GPIO_WritePin>

		  HAL_UART_Transmit_DMA(&huart3, pData, 6);
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2206      	movs	r2, #6
 80008bc:	4619      	mov	r1, r3
 80008be:	481e      	ldr	r0, [pc, #120]	; (8000938 <main+0x23c>)
 80008c0:	f00a fb92 	bl	800afe8 <HAL_UART_Transmit_DMA>

		  duty= 1000;
 80008c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  if(duty >= 4096) duty = 0;
 80008cc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80008d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008d4:	d302      	bcc.n	80008dc <main+0x1e0>
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  htim2.Instance->CCR1 = duty;
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <main+0x268>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
//		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

			ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 80008e6:	4815      	ldr	r0, [pc, #84]	; (800093c <main+0x240>)
 80008e8:	f001 ff2c 	bl	8002744 <HAL_ADC_GetValue>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	80bb      	strh	r3, [r7, #4]
		//	HAL_ADC_Stop(&hadc1);
			len = sprintf((char*)pData,"ADC: %d\r\n", ADC_VAL[0]);
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	461a      	mov	r2, r3
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4914      	ldr	r1, [pc, #80]	; (800094c <main+0x250>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00c fc71 	bl	800d1e4 <siprintf>
 8000902:	4603      	mov	r3, r0
 8000904:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			HAL_UART_Transmit(&huart3, pData, len, 10);
 8000908:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800090c:	f107 0108 	add.w	r1, r7, #8
 8000910:	230a      	movs	r3, #10
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <main+0x23c>)
 8000914:	f00a fad2 	bl	800aebc <HAL_UART_Transmit>

//		  HAL_GPIO_TogglePin(DO_1_GPIO_Port, DO_1_Pin);
//		  HAL_GPIO_TogglePin(DO_2_GPIO_Port, DO_2_Pin);
		  HAL_GPIO_TogglePin(DO_5_GPIO_Port, DO_5_Pin);
 8000918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <main+0x26c>)
 800091e:	f006 f8ca 	bl	8006ab6 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(DO_6_GPIO_Port, DO_6_Pin);
 8000922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000926:	4810      	ldr	r0, [pc, #64]	; (8000968 <main+0x26c>)
 8000928:	f006 f8c5 	bl	8006ab6 <HAL_GPIO_TogglePin>
//		  ADC_Select_CH0();


		  tick = HAL_GetTick();
 800092c:	f001 f852 	bl	80019d4 <HAL_GetTick>
 8000930:	6738      	str	r0, [r7, #112]	; 0x70
	  if(HAL_GetTick() - tick >= 3000){
 8000932:	e7a2      	b.n	800087a <main+0x17e>
 8000934:	0800da64 	.word	0x0800da64
 8000938:	24000160 	.word	0x24000160
 800093c:	240001f0 	.word	0x240001f0
 8000940:	0800da74 	.word	0x0800da74
 8000944:	0800da84 	.word	0x0800da84
 8000948:	0800da94 	.word	0x0800da94
 800094c:	0800daa4 	.word	0x0800daa4
 8000950:	24000370 	.word	0x24000370
 8000954:	24000114 	.word	0x24000114
 8000958:	240002d8 	.word	0x240002d8
 800095c:	58021000 	.word	0x58021000
 8000960:	0800dab0 	.word	0x0800dab0
 8000964:	24000324 	.word	0x24000324
 8000968:	58020800 	.word	0x58020800

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b09c      	sub	sp, #112	; 0x70
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	224c      	movs	r2, #76	; 0x4c
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f00c fc2a 	bl	800d1d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2220      	movs	r2, #32
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f00c fc24 	bl	800d1d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800098c:	2002      	movs	r0, #2
 800098e:	f006 f8d1 	bl	8006b34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <SystemClock_Config+0xe8>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a2e      	ldr	r2, [pc, #184]	; (8000a54 <SystemClock_Config+0xe8>)
 800099c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a0:	6193      	str	r3, [r2, #24]
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <SystemClock_Config+0xe8>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ae:	bf00      	nop
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <SystemClock_Config+0xe8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009bc:	d1f8      	bne.n	80009b0 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <SystemClock_Config+0xec>)
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <SystemClock_Config+0xec>)
 80009c4:	f023 0303 	bic.w	r3, r3, #3
 80009c8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ca:	2302      	movs	r3, #2
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d2:	2340      	movs	r3, #64	; 0x40
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009da:	2300      	movs	r3, #0
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009de:	2304      	movs	r3, #4
 80009e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80009e2:	2322      	movs	r3, #34	; 0x22
 80009e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f2:	230c      	movs	r3, #12
 80009f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80009fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f006 f8cf 	bl	8006ba8 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000a10:	f000 fb60 	bl	80010d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	233f      	movs	r3, #63	; 0x3f
 8000a16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a20:	2308      	movs	r3, #8
 8000a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a24:	2340      	movs	r3, #64	; 0x40
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a28:	2340      	movs	r3, #64	; 0x40
 8000a2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2103      	movs	r1, #3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f006 fc60 	bl	8007300 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000a46:	f000 fb45 	bl	80010d4 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3770      	adds	r7, #112	; 0x70
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	58024800 	.word	0x58024800
 8000a58:	58024400 	.word	0x58024400

08000a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2224      	movs	r2, #36	; 0x24
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00c fbad 	bl	800d1d4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000a7c:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000a80:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000a82:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000a86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a88:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ada:	4819      	ldr	r0, [pc, #100]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000adc:	f001 fa6c 	bl	8001fb8 <HAL_ADC_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ae6:	f000 faf5 	bl	80010d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4812      	ldr	r0, [pc, #72]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000af6:	f002 fdf3 	bl	80036e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000b00:	f000 fae8 	bl	80010d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_ADC1_Init+0xec>)
 8000b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b10:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b16:	2304      	movs	r3, #4
 8000b18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_ADC1_Init+0xe4>)
 8000b2a:	f001 fe19 	bl	8002760 <HAL_ADC_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b34:	f000 face 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3730      	adds	r7, #48	; 0x30
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	240001f0 	.word	0x240001f0
 8000b44:	40022000 	.word	0x40022000
 8000b48:	0c900008 	.word	0x0c900008

08000b4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b7e:	4b3e      	ldr	r3, [pc, #248]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11-1;
 8000b86:	4b3c      	ldr	r3, [pc, #240]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000b88:	220a      	movs	r2, #10
 8000b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2800-1;
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000b94:	f640 22ef 	movw	r2, #2799	; 0xaef
 8000b98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba6:	4834      	ldr	r0, [pc, #208]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000ba8:	f008 ffc8 	bl	8009b3c <HAL_TIM_Base_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bb2:	f000 fa8f 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	482d      	ldr	r0, [pc, #180]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000bc4:	f009 fb2c 	bl	800a220 <HAL_TIM_ConfigClockSource>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bce:	f000 fa81 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bd2:	4829      	ldr	r0, [pc, #164]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000bd4:	f009 f890 	bl	8009cf8 <HAL_TIM_PWM_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bde:	f000 fa79 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000be2:	2310      	movs	r3, #16
 8000be4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4821      	ldr	r0, [pc, #132]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000bf2:	f00a f859 	bl	800aca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bfc:	f000 fa6a 	bl	80010d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c00:	2360      	movs	r3, #96	; 0x60
 8000c02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	4818      	ldr	r0, [pc, #96]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000c18:	f009 f9ee 	bl	8009ff8 <HAL_TIM_PWM_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c22:	f000 fa57 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	2204      	movs	r2, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4812      	ldr	r0, [pc, #72]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000c2e:	f009 f9e3 	bl	8009ff8 <HAL_TIM_PWM_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c38:	f000 fa4c 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2208      	movs	r2, #8
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000c44:	f009 f9d8 	bl	8009ff8 <HAL_TIM_PWM_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000c4e:	f000 fa41 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	220c      	movs	r2, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000c5a:	f009 f9cd 	bl	8009ff8 <HAL_TIM_PWM_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000c64:	f000 fa36 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_TIM2_Init+0x12c>)
 8000c6a:	f000 fb1f 	bl	80012ac <HAL_TIM_MspPostInit>

}
 8000c6e:	bf00      	nop
 8000c70:	3738      	adds	r7, #56	; 0x38
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000324 	.word	0x24000324

08000c7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000c9c:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <MX_TIM4_Init+0x9c>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 275-1;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000ca2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000ca6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1563;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cb0:	f240 621b 	movw	r2, #1563	; 0x61b
 8000cb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cc4:	f008 ff3a 	bl	8009b3c <HAL_TIM_Base_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000cce:	f000 fa01 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000ce0:	f009 fa9e 	bl	800a220 <HAL_TIM_ConfigClockSource>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000cea:	f000 f9f3 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_TIM4_Init+0x98>)
 8000cfc:	f009 ffd4 	bl	800aca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000d06:	f000 f9e5 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	24000114 	.word	0x24000114
 8000d18:	40000800 	.word	0x40000800

08000d1c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_TIM6_Init+0x68>)
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <MX_TIM6_Init+0x6c>)
 8000d30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_TIM6_Init+0x68>)
 8000d34:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000d38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_TIM6_Init+0x68>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3647;
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_TIM6_Init+0x68>)
 8000d42:	f640 623f 	movw	r2, #3647	; 0xe3f
 8000d46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_TIM6_Init+0x68>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_TIM6_Init+0x68>)
 8000d50:	f008 fef4 	bl	8009b3c <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d5a:	f000 f9bb 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <MX_TIM6_Init+0x68>)
 8000d6c:	f009 ff9c 	bl	800aca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d76:	f000 f9ad 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	240002d8 	.word	0x240002d8
 8000d88:	40001000 	.word	0x40001000

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <MX_USART2_UART_Init+0x9c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000d98:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000da4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000dc2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dc6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dda:	4812      	ldr	r0, [pc, #72]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000ddc:	f00a f81e 	bl	800ae1c <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 8000de6:	f000 f975 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000dee:	f00c f8a1 	bl	800cf34 <HAL_UARTEx_SetTxFifoThreshold>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 f96c 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000e00:	f00c f8d6 	bl	800cfb0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 8000e0a:	f000 f963 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000e10:	f00c f857 	bl	800cec2 <HAL_UARTEx_DisableFifoMode>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8000e1a:	f000 f95b 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000370 	.word	0x24000370
 8000e28:	40004400 	.word	0x40004400

08000e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e32:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <MX_USART3_UART_Init+0x94>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e76:	f009 ffd1 	bl	800ae1c <HAL_UART_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e80:	f000 f928 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e88:	f00c f854 	bl	800cf34 <HAL_UARTEx_SetTxFifoThreshold>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e92:	f000 f91f 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e9a:	f00c f889 	bl	800cfb0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ea4:	f000 f916 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_USART3_UART_Init+0x90>)
 8000eaa:	f00c f80a 	bl	800cec2 <HAL_UARTEx_DisableFifoMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 f90e 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	24000160 	.word	0x24000160
 8000ec0:	40004800 	.word	0x40004800

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_DMA_Init+0x4c>)
 8000ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <MX_DMA_Init+0x4c>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <MX_DMA_Init+0x4c>)
 8000edc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	200b      	movs	r0, #11
 8000eee:	f002 fdb4 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ef2:	200b      	movs	r0, #11
 8000ef4:	f002 fdcb 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	200c      	movs	r0, #12
 8000efe:	f002 fdac 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f02:	200c      	movs	r0, #12
 8000f04:	f002 fdc3 	bl	8003a8e <HAL_NVIC_EnableIRQ>

}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2a:	4b65      	ldr	r3, [pc, #404]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	4a63      	ldr	r2, [pc, #396]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3a:	4b61      	ldr	r3, [pc, #388]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	4a5c      	ldr	r2, [pc, #368]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f58:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	4a54      	ldr	r2, [pc, #336]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f76:	4b52      	ldr	r3, [pc, #328]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	4a4d      	ldr	r2, [pc, #308]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f94:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <MX_GPIO_Init+0x1ac>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS485_DIR_Pin|DO_1_Pin|DO_2_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f640 2108 	movw	r1, #2568	; 0xa08
 8000fc6:	483f      	ldr	r0, [pc, #252]	; (80010c4 <MX_GPIO_Init+0x1b0>)
 8000fc8:	f005 fd5c 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DO_5_Pin|DO_6_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000fd2:	483d      	ldr	r0, [pc, #244]	; (80010c8 <MX_GPIO_Init+0x1b4>)
 8000fd4:	f005 fd56 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO_3_Pin|DO_4_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000fde:	483b      	ldr	r0, [pc, #236]	; (80010cc <MX_GPIO_Init+0x1b8>)
 8000fe0:	f005 fd50 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS485_DIR_Pin DO_1_Pin DO_2_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin|DO_1_Pin|DO_2_Pin;
 8000fe4:	f640 2308 	movw	r3, #2568	; 0xa08
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4831      	ldr	r0, [pc, #196]	; (80010c4 <MX_GPIO_Init+0x1b0>)
 8000ffe:	f005 fb99 	bl	8006734 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_8_Pin DI_1_Pin DI_2_Pin */
  GPIO_InitStruct.Pin = DI_8_Pin|DI_1_Pin|DI_2_Pin;
 8001002:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001008:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <MX_GPIO_Init+0x1b4>)
 800101a:	f005 fb8b 	bl	8006734 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_5_Pin DO_6_Pin */
  GPIO_InitStruct.Pin = DO_5_Pin|DO_6_Pin;
 800101e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4824      	ldr	r0, [pc, #144]	; (80010c8 <MX_GPIO_Init+0x1b4>)
 8001038:	f005 fb7c 	bl	8006734 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_3_Pin DI_4_Pin DI_5_Pin DI_6_Pin
                           DI_7_Pin */
  GPIO_InitStruct.Pin = DI_3_Pin|DI_4_Pin|DI_5_Pin|DI_6_Pin
 800103c:	f44f 734d 	mov.w	r3, #820	; 0x334
 8001040:	617b      	str	r3, [r7, #20]
                          |DI_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001042:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	481f      	ldr	r0, [pc, #124]	; (80010d0 <MX_GPIO_Init+0x1bc>)
 8001054:	f005 fb6e 	bl	8006734 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_3_Pin DO_4_Pin */
  GPIO_InitStruct.Pin = DO_3_Pin|DO_4_Pin;
 8001058:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4816      	ldr	r0, [pc, #88]	; (80010cc <MX_GPIO_Init+0x1b8>)
 8001072:	f005 fb5f 	bl	8006734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	2008      	movs	r0, #8
 800107c:	f002 fced 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001080:	2008      	movs	r0, #8
 8001082:	f002 fd04 	bl	8003a8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2105      	movs	r1, #5
 800108a:	200a      	movs	r0, #10
 800108c:	f002 fce5 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001090:	200a      	movs	r0, #10
 8001092:	f002 fcfc 	bl	8003a8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2105      	movs	r1, #5
 800109a:	2017      	movs	r0, #23
 800109c:	f002 fcdd 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a0:	2017      	movs	r0, #23
 80010a2:	f002 fcf4 	bl	8003a8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2105      	movs	r1, #5
 80010aa:	2028      	movs	r0, #40	; 0x28
 80010ac:	f002 fcd5 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b0:	2028      	movs	r0, #40	; 0x28
 80010b2:	f002 fcec 	bl	8003a8e <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58021000 	.word	0x58021000
 80010c8:	58020800 	.word	0x58020800
 80010cc:	58020000 	.word	0x58020000
 80010d0:	58020400 	.word	0x58020400

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	e7fe      	b.n	80010dc <Error_Handler+0x8>
	...

080010e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_MspInit+0x30>)
 80010e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ec:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x30>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x30>)
 80010f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	58024400 	.word	0x58024400

08001114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0b6      	sub	sp, #216	; 0xd8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	22b4      	movs	r2, #180	; 0xb4
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00c f84d 	bl	800d1d4 <memset>
  if(hadc->Instance==ADC1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a2a      	ldr	r2, [pc, #168]	; (80011e8 <HAL_ADC_MspInit+0xd4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d14c      	bne.n	80011de <HAL_ADC_MspInit+0xca>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001144:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001148:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800114a:	2304      	movs	r3, #4
 800114c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 800114e:	230c      	movs	r3, #12
 8001150:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001152:	2302      	movs	r3, #2
 8001154:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001156:	2302      	movs	r3, #2
 8001158:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800115a:	2302      	movs	r3, #2
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4618      	mov	r0, r3
 8001176:	f006 fc4f 	bl	8007a18 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001180:	f7ff ffa8 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_ADC_MspInit+0xd8>)
 8001186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_ADC_MspInit+0xd8>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_ADC_MspInit+0xd8>)
 8001196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_ADC_MspInit+0xd8>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_ADC_MspInit+0xd8>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_ADC_MspInit+0xd8>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011c0:	2340      	movs	r3, #64	; 0x40
 80011c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_ADC_MspInit+0xdc>)
 80011da:	f005 faab 	bl	8006734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	37d8      	adds	r7, #216	; 0xd8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020000 	.word	0x58020000

080011f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001204:	d10f      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 8001208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 8001218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001224:	e038      	b.n	8001298 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_TIM_Base_MspInit+0xb0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d117      	bne.n	8001260 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 8001232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001236:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 8001242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2103      	movs	r1, #3
 8001252:	201e      	movs	r0, #30
 8001254:	f002 fc01 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001258:	201e      	movs	r0, #30
 800125a:	f002 fc18 	bl	8003a8e <HAL_NVIC_EnableIRQ>
}
 800125e:	e01b      	b.n	8001298 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM6)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_TIM_Base_MspInit+0xb4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d116      	bne.n	8001298 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 800126c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 800127c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2103      	movs	r1, #3
 800128c:	2036      	movs	r0, #54	; 0x36
 800128e:	f002 fbe4 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001292:	2036      	movs	r0, #54	; 0x36
 8001294:	f002 fbfb 	bl	8003a8e <HAL_NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58024400 	.word	0x58024400
 80012a4:	40000800 	.word	0x40000800
 80012a8:	40001000 	.word	0x40001000

080012ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012cc:	d13f      	bne.n	800134e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <HAL_TIM_MspPostInit+0xac>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	4a20      	ldr	r2, [pc, #128]	; (8001358 <HAL_TIM_MspPostInit+0xac>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_TIM_MspPostInit+0xac>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_TIM_MspPostInit+0xac>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_TIM_MspPostInit+0xac>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_TIM_MspPostInit+0xac>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 800130a:	f248 0308 	movw	r3, #32776	; 0x8008
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800131c:	2301      	movs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <HAL_TIM_MspPostInit+0xb0>)
 8001328:	f005 fa04 	bl	8006734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800132c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800133e:	2301      	movs	r3, #1
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <HAL_TIM_MspPostInit+0xb4>)
 800134a:	f005 f9f3 	bl	8006734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	58024400 	.word	0x58024400
 800135c:	58020000 	.word	0x58020000
 8001360:	58020400 	.word	0x58020400

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0ba      	sub	sp, #232	; 0xe8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	22b4      	movs	r2, #180	; 0xb4
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f00b ff25 	bl	800d1d4 <memset>
  if(huart->Instance==USART2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a8e      	ldr	r2, [pc, #568]	; (80015c8 <HAL_UART_MspInit+0x264>)
 8001390:	4293      	cmp	r3, r2
 8001392:	f040 80a7 	bne.w	80014e4 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001396:	2302      	movs	r3, #2
 8001398:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 fb37 	bl	8007a18 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80013b0:	f7ff fe90 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b4:	4b85      	ldr	r3, [pc, #532]	; (80015cc <HAL_UART_MspInit+0x268>)
 80013b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ba:	4a84      	ldr	r2, [pc, #528]	; (80015cc <HAL_UART_MspInit+0x268>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013c4:	4b81      	ldr	r3, [pc, #516]	; (80015cc <HAL_UART_MspInit+0x268>)
 80013c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <HAL_UART_MspInit+0x268>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a7c      	ldr	r2, [pc, #496]	; (80015cc <HAL_UART_MspInit+0x268>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b7a      	ldr	r3, [pc, #488]	; (80015cc <HAL_UART_MspInit+0x268>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001408:	2307      	movs	r3, #7
 800140a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001412:	4619      	mov	r1, r3
 8001414:	486e      	ldr	r0, [pc, #440]	; (80015d0 <HAL_UART_MspInit+0x26c>)
 8001416:	f005 f98d 	bl	8006734 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 800141a:	4b6e      	ldr	r3, [pc, #440]	; (80015d4 <HAL_UART_MspInit+0x270>)
 800141c:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <HAL_UART_MspInit+0x274>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001420:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <HAL_UART_MspInit+0x270>)
 8001422:	222b      	movs	r2, #43	; 0x2b
 8001424:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001426:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <HAL_UART_MspInit+0x270>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142c:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <HAL_UART_MspInit+0x270>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <HAL_UART_MspInit+0x270>)
 8001434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001438:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143a:	4b66      	ldr	r3, [pc, #408]	; (80015d4 <HAL_UART_MspInit+0x270>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001440:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <HAL_UART_MspInit+0x270>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_UART_MspInit+0x270>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800144c:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <HAL_UART_MspInit+0x270>)
 800144e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001452:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001454:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_UART_MspInit+0x270>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800145a:	485e      	ldr	r0, [pc, #376]	; (80015d4 <HAL_UART_MspInit+0x270>)
 800145c:	f002 fb32 	bl	8003ac4 <HAL_DMA_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001466:	f7ff fe35 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a59      	ldr	r2, [pc, #356]	; (80015d4 <HAL_UART_MspInit+0x270>)
 800146e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001470:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <HAL_UART_MspInit+0x270>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8001476:	4b59      	ldr	r3, [pc, #356]	; (80015dc <HAL_UART_MspInit+0x278>)
 8001478:	4a59      	ldr	r2, [pc, #356]	; (80015e0 <HAL_UART_MspInit+0x27c>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800147c:	4b57      	ldr	r3, [pc, #348]	; (80015dc <HAL_UART_MspInit+0x278>)
 800147e:	222c      	movs	r2, #44	; 0x2c
 8001480:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <HAL_UART_MspInit+0x278>)
 8001484:	2240      	movs	r2, #64	; 0x40
 8001486:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b54      	ldr	r3, [pc, #336]	; (80015dc <HAL_UART_MspInit+0x278>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_UART_MspInit+0x278>)
 8001490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001494:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001496:	4b51      	ldr	r3, [pc, #324]	; (80015dc <HAL_UART_MspInit+0x278>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149c:	4b4f      	ldr	r3, [pc, #316]	; (80015dc <HAL_UART_MspInit+0x278>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014a2:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <HAL_UART_MspInit+0x278>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014a8:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <HAL_UART_MspInit+0x278>)
 80014aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b0:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_UART_MspInit+0x278>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014b6:	4849      	ldr	r0, [pc, #292]	; (80015dc <HAL_UART_MspInit+0x278>)
 80014b8:	f002 fb04 	bl	8003ac4 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80014c2:	f7ff fe07 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a44      	ldr	r2, [pc, #272]	; (80015dc <HAL_UART_MspInit+0x278>)
 80014ca:	679a      	str	r2, [r3, #120]	; 0x78
 80014cc:	4a43      	ldr	r2, [pc, #268]	; (80015dc <HAL_UART_MspInit+0x278>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2026      	movs	r0, #38	; 0x26
 80014d8:	f002 fabf 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014dc:	2026      	movs	r0, #38	; 0x26
 80014de:	f002 fad6 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014e2:	e06c      	b.n	80015be <HAL_UART_MspInit+0x25a>
  else if(huart->Instance==USART3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a3e      	ldr	r2, [pc, #248]	; (80015e4 <HAL_UART_MspInit+0x280>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d167      	bne.n	80015be <HAL_UART_MspInit+0x25a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ee:	2302      	movs	r3, #2
 80014f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4618      	mov	r0, r3
 80014fe:	f006 fa8b 	bl	8007a18 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001508:	f7ff fde4 	bl	80010d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <HAL_UART_MspInit+0x268>)
 800150e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001512:	4a2e      	ldr	r2, [pc, #184]	; (80015cc <HAL_UART_MspInit+0x268>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_UART_MspInit+0x268>)
 800151e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <HAL_UART_MspInit+0x268>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_UART_MspInit+0x268>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_UART_MspInit+0x268>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_UART_MspInit+0x268>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_UART_MspInit+0x268>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_UART_MspInit+0x268>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800156a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001580:	2307      	movs	r3, #7
 8001582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800158a:	4619      	mov	r1, r3
 800158c:	4816      	ldr	r0, [pc, #88]	; (80015e8 <HAL_UART_MspInit+0x284>)
 800158e:	f005 f8d1 	bl	8006734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ac:	2307      	movs	r3, #7
 80015ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <HAL_UART_MspInit+0x288>)
 80015ba:	f005 f8bb 	bl	8006734 <HAL_GPIO_Init>
}
 80015be:	bf00      	nop
 80015c0:	37e8      	adds	r7, #232	; 0xe8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40004400 	.word	0x40004400
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58020c00 	.word	0x58020c00
 80015d4:	2400009c 	.word	0x2400009c
 80015d8:	40020010 	.word	0x40020010
 80015dc:	24000260 	.word	0x24000260
 80015e0:	40020028 	.word	0x40020028
 80015e4:	40004800 	.word	0x40004800
 80015e8:	58020400 	.word	0x58020400
 80015ec:	58020800 	.word	0x58020800

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f9b6 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI_3_Pin);
 8001648:	2004      	movs	r0, #4
 800164a:	f005 fa4e 	bl	8006aea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}

08001652 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI_4_Pin);
 8001656:	2010      	movs	r0, #16
 8001658:	f005 fa47 	bl	8006aea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA1_Stream0_IRQHandler+0x10>)
 8001666:	f003 fd53 	bl	8005110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2400009c 	.word	0x2400009c

08001674 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <DMA1_Stream1_IRQHandler+0x10>)
 800167a:	f003 fd49 	bl	8005110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000260 	.word	0x24000260

08001688 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI_5_Pin);
 800168c:	2020      	movs	r0, #32
 800168e:	f005 fa2c 	bl	8006aea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DI_1_Pin);
 8001692:	2040      	movs	r0, #64	; 0x40
 8001694:	f005 fa29 	bl	8006aea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DI_2_Pin);
 8001698:	2080      	movs	r0, #128	; 0x80
 800169a:	f005 fa26 	bl	8006aea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DI_6_Pin);
 800169e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016a2:	f005 fa22 	bl	8006aea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DO_1_Pin);
 80016a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016aa:	f005 fa1e 	bl	8006aea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_GPIO_TogglePin(DO_1_GPIO_Port, DO_1_Pin);
 80016b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <TIM4_IRQHandler+0x18>)
 80016be:	f005 f9fa 	bl	8006ab6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <TIM4_IRQHandler+0x1c>)
 80016c4:	f008 fb79 	bl	8009dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58021000 	.word	0x58021000
 80016d0:	24000114 	.word	0x24000114

080016d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <USART2_IRQHandler+0x10>)
 80016da:	f009 fd17 	bl	800b10c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000370 	.word	0x24000370

080016e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI_8_Pin);
 80016ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016f0:	f005 f9fb 	bl	8006aea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HAL_GPIO_TogglePin(DO_2_GPIO_Port, DO_2_Pin);
 80016fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <TIM6_DAC_IRQHandler+0x18>)
 8001702:	f005 f9d8 	bl	8006ab6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <TIM6_DAC_IRQHandler+0x1c>)
 8001708:	f008 fb57 	bl	8009dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	58021000 	.word	0x58021000
 8001714:	240002d8 	.word	0x240002d8

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f00b fd1a 	bl	800d180 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	24050000 	.word	0x24050000
 8001778:	00000400 	.word	0x00000400
 800177c:	24000090 	.word	0x24000090
 8001780:	24000418 	.word	0x24000418

08001784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001788:	4b32      	ldr	r3, [pc, #200]	; (8001854 <SystemInit+0xd0>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a31      	ldr	r2, [pc, #196]	; (8001854 <SystemInit+0xd0>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <SystemInit+0xd4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	2b06      	cmp	r3, #6
 80017a2:	d807      	bhi.n	80017b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <SystemInit+0xd4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 030f 	bic.w	r3, r3, #15
 80017ac:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <SystemInit+0xd4>)
 80017ae:	f043 0307 	orr.w	r3, r3, #7
 80017b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <SystemInit+0xd8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a28      	ldr	r2, [pc, #160]	; (800185c <SystemInit+0xd8>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <SystemInit+0xd8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <SystemInit+0xd8>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4924      	ldr	r1, [pc, #144]	; (800185c <SystemInit+0xd8>)
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <SystemInit+0xdc>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <SystemInit+0xd4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <SystemInit+0xd4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 030f 	bic.w	r3, r3, #15
 80017e6:	4a1c      	ldr	r2, [pc, #112]	; (8001858 <SystemInit+0xd4>)
 80017e8:	f043 0307 	orr.w	r3, r3, #7
 80017ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <SystemInit+0xd8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <SystemInit+0xd8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <SystemInit+0xd8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <SystemInit+0xd8>)
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <SystemInit+0xe0>)
 8001804:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <SystemInit+0xd8>)
 8001808:	4a17      	ldr	r2, [pc, #92]	; (8001868 <SystemInit+0xe4>)
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <SystemInit+0xd8>)
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <SystemInit+0xe8>)
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <SystemInit+0xd8>)
 8001814:	2200      	movs	r2, #0
 8001816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <SystemInit+0xd8>)
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <SystemInit+0xe8>)
 800181c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <SystemInit+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <SystemInit+0xd8>)
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <SystemInit+0xe8>)
 8001828:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <SystemInit+0xd8>)
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <SystemInit+0xd8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <SystemInit+0xd8>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <SystemInit+0xd8>)
 800183e:	2200      	movs	r2, #0
 8001840:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <SystemInit+0xec>)
 8001844:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001848:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	52002000 	.word	0x52002000
 800185c:	58024400 	.word	0x58024400
 8001860:	eaf6ed7f 	.word	0xeaf6ed7f
 8001864:	02020200 	.word	0x02020200
 8001868:	01ff0000 	.word	0x01ff0000
 800186c:	01010280 	.word	0x01010280
 8001870:	52004000 	.word	0x52004000

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001878:	f7ff ff84 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	; (80018c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f00b fc73 	bl	800d18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7fe ff29 	bl	80006fc <main>
  bx  lr
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80018b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018b4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80018b8:	0800db3c 	.word	0x0800db3c
  ldr r2, =_sbss
 80018bc:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80018c0:	24000414 	.word	0x24000414

080018c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC3_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ce:	2003      	movs	r0, #3
 80018d0:	f002 f8b8 	bl	8003a44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018d4:	f005 feca 	bl	800766c <HAL_RCC_GetSysClockFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_Init+0x68>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	4913      	ldr	r1, [pc, #76]	; (8001934 <HAL_Init+0x6c>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_Init+0x68>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_Init+0x6c>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_Init+0x70>)
 800190a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800190c:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_Init+0x74>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001912:	200f      	movs	r0, #15
 8001914:	f000 f814 	bl	8001940 <HAL_InitTick>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e002      	b.n	8001928 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001922:	f7ff fbdd 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	58024400 	.word	0x58024400
 8001934:	0800dab8 	.word	0x0800dab8
 8001938:	24000004 	.word	0x24000004
 800193c:	24000000 	.word	0x24000000

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_InitTick+0x60>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e021      	b.n	8001998 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_InitTick+0x64>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_InitTick+0x60>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f002 f89d 	bl	8003aaa <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f002 f867 	bl	8003a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_InitTick+0x68>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2400000c 	.word	0x2400000c
 80019a4:	24000000 	.word	0x24000000
 80019a8:	24000008 	.word	0x24000008

080019ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	2400000c 	.word	0x2400000c
 80019d0:	24000400 	.word	0x24000400

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	24000400 	.word	0x24000400

080019ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff ffee 	bl	80019d4 <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d005      	beq.n	8001a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_Delay+0x44>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a12:	bf00      	nop
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8f7      	bhi.n	8001a14 <HAL_Delay+0x28>
  {
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2400000c 	.word	0x2400000c

08001a34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3360      	adds	r3, #96	; 0x60
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <LL_ADC_SetOffset+0x60>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d10b      	bne.n	8001ad8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ad6:	e00b      	b.n	8001af0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	58026000 	.word	0x58026000

08001b00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3360      	adds	r3, #96	; 0x60
 8001b0e:	461a      	mov	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	611a      	str	r2, [r3, #16]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00e      	beq.n	8001b92 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3360      	adds	r3, #96	; 0x60
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	601a      	str	r2, [r3, #0]
  }
}
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	58026000 	.word	0x58026000

08001ba4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <LL_ADC_SetOffsetSaturation+0x40>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d10e      	bne.n	8001bd6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3360      	adds	r3, #96	; 0x60
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	58026000 	.word	0x58026000

08001be8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <LL_ADC_SetOffsetSign+0x40>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d10e      	bne.n	8001c1a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3360      	adds	r3, #96	; 0x60
 8001c00:	461a      	mov	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	58026000 	.word	0x58026000

08001c2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3360      	adds	r3, #96	; 0x60
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <LL_ADC_SetOffsetState+0x50>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d108      	bne.n	8001c60 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001c5e:	e007      	b.n	8001c70 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	58026000 	.word	0x58026000

08001c80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3330      	adds	r3, #48	; 0x30
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	211f      	movs	r1, #31
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	401a      	ands	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	f003 011f 	and.w	r1, r3, #31
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	431a      	orrs	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cf2:	bf00      	nop
 8001cf4:	371c      	adds	r7, #28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b087      	sub	sp, #28
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	0e5b      	lsrs	r3, r3, #25
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2107      	movs	r1, #7
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	0d1b      	lsrs	r3, r3, #20
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	431a      	orrs	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <LL_ADC_SetChannelSingleDiff+0x78>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d115      	bne.n	8001d94 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0318 	and.w	r3, r3, #24
 8001d7e:	4914      	ldr	r1, [pc, #80]	; (8001dd0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001d80:	40d9      	lsrs	r1, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	400b      	ands	r3, r1
 8001d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001d92:	e014      	b.n	8001dbe <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0318 	and.w	r3, r3, #24
 8001daa:	4909      	ldr	r1, [pc, #36]	; (8001dd0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001dac:	40d9      	lsrs	r1, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	400b      	ands	r3, r1
 8001db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001db6:	431a      	orrs	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	58026000 	.word	0x58026000
 8001dd0:	000fffff 	.word	0x000fffff

08001dd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 031f 	and.w	r3, r3, #31
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6093      	str	r3, [r2, #8]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	5fffffc0 	.word	0x5fffffc0

08001e30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <LL_ADC_EnableInternalRegulator+0x24>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	6fffffc0 	.word	0x6fffffc0

08001e80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e94:	d101      	bne.n	8001e9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <LL_ADC_Enable+0x24>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	7fffffc0 	.word	0x7fffffc0

08001ed0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <LL_ADC_Disable+0x24>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	f043 0202 	orr.w	r2, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	7fffffc0 	.word	0x7fffffc0

08001ef8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <LL_ADC_IsEnabled+0x18>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <LL_ADC_IsEnabled+0x1a>
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d101      	bne.n	8001f36 <LL_ADC_IsDisableOngoing+0x18>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_ADC_IsDisableOngoing+0x1a>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <LL_ADC_REG_StartConversion+0x24>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	f043 0204 	orr.w	r2, r3, #4
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	7fffffc0 	.word	0x7fffffc0

08001f6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d101      	bne.n	8001f84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1ee      	b.n	80023b0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff f897 	bl	8001114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff19 	bl	8001e30 <LL_ADC_IsDeepPowerDownEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff feff 	bl	8001e0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff34 	bl	8001e80 <LL_ADC_IsInternalRegulatorEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d114      	bne.n	8002048 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff18 	bl	8001e58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002028:	4b8e      	ldr	r3, [pc, #568]	; (8002264 <HAL_ADC_Init+0x2ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	4a8e      	ldr	r2, [pc, #568]	; (8002268 <HAL_ADC_Init+0x2b0>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	3301      	adds	r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800203a:	e002      	b.n	8002042 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	3b01      	subs	r3, #1
 8002040:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff17 	bl	8001e80 <LL_ADC_IsInternalRegulatorEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205c:	f043 0210 	orr.w	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff77 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 800207e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 8188 	bne.w	800239e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 8184 	bne.w	800239e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800209e:	f043 0202 	orr.w	r2, r3, #2
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff24 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d136      	bne.n	8002124 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6c      	ldr	r2, [pc, #432]	; (800226c <HAL_ADC_Init+0x2b4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d004      	beq.n	80020ca <HAL_ADC_Init+0x112>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6a      	ldr	r2, [pc, #424]	; (8002270 <HAL_ADC_Init+0x2b8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10e      	bne.n	80020e8 <HAL_ADC_Init+0x130>
 80020ca:	4868      	ldr	r0, [pc, #416]	; (800226c <HAL_ADC_Init+0x2b4>)
 80020cc:	f7ff ff14 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020d0:	4604      	mov	r4, r0
 80020d2:	4867      	ldr	r0, [pc, #412]	; (8002270 <HAL_ADC_Init+0x2b8>)
 80020d4:	f7ff ff10 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020d8:	4603      	mov	r3, r0
 80020da:	4323      	orrs	r3, r4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e008      	b.n	80020fa <HAL_ADC_Init+0x142>
 80020e8:	4862      	ldr	r0, [pc, #392]	; (8002274 <HAL_ADC_Init+0x2bc>)
 80020ea:	f7ff ff05 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5a      	ldr	r2, [pc, #360]	; (800226c <HAL_ADC_Init+0x2b4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d004      	beq.n	8002112 <HAL_ADC_Init+0x15a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_ADC_Init+0x2b8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x15e>
 8002112:	4a59      	ldr	r2, [pc, #356]	; (8002278 <HAL_ADC_Init+0x2c0>)
 8002114:	e000      	b.n	8002118 <HAL_ADC_Init+0x160>
 8002116:	4a59      	ldr	r2, [pc, #356]	; (800227c <HAL_ADC_Init+0x2c4>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f7ff fc88 	bl	8001a34 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_ADC_Init+0x2bc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d129      	bne.n	8002182 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7e5b      	ldrb	r3, [r3, #25]
 8002132:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002138:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800213e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d013      	beq.n	8002170 <HAL_ADC_Init+0x1b8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b0c      	cmp	r3, #12
 800214e:	d00d      	beq.n	800216c <HAL_ADC_Init+0x1b4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b1c      	cmp	r3, #28
 8002156:	d007      	beq.n	8002168 <HAL_ADC_Init+0x1b0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b18      	cmp	r3, #24
 800215e:	d101      	bne.n	8002164 <HAL_ADC_Init+0x1ac>
 8002160:	2318      	movs	r3, #24
 8002162:	e006      	b.n	8002172 <HAL_ADC_Init+0x1ba>
 8002164:	2300      	movs	r3, #0
 8002166:	e004      	b.n	8002172 <HAL_ADC_Init+0x1ba>
 8002168:	2310      	movs	r3, #16
 800216a:	e002      	b.n	8002172 <HAL_ADC_Init+0x1ba>
 800216c:	2308      	movs	r3, #8
 800216e:	e000      	b.n	8002172 <HAL_ADC_Init+0x1ba>
 8002170:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002172:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e00e      	b.n	80021a0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7e5b      	ldrb	r3, [r3, #25]
 8002186:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800218c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002192:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d106      	bne.n	80021b8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	3b01      	subs	r3, #1
 80021b0:	045b      	lsls	r3, r3, #17
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a26      	ldr	r2, [pc, #152]	; (8002274 <HAL_ADC_Init+0x2bc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d115      	bne.n	800220a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_ADC_Init+0x2c8>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	611a      	str	r2, [r3, #16]
 8002208:	e009      	b.n	800221e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_ADC_Init+0x2cc>)
 8002212:	4013      	ands	r3, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	69b9      	ldr	r1, [r7, #24]
 800221a:	430b      	orrs	r3, r1
 800221c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fea2 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 8002228:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff feaf 	bl	8001f92 <LL_ADC_INJ_IsConversionOngoing>
 8002234:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 808e 	bne.w	800235a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 808a 	bne.w	800235a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_ADC_Init+0x2bc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d11b      	bne.n	8002288 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7e1b      	ldrb	r3, [r3, #24]
 8002254:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800225c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e018      	b.n	8002296 <HAL_ADC_Init+0x2de>
 8002264:	24000000 	.word	0x24000000
 8002268:	053e2d63 	.word	0x053e2d63
 800226c:	40022000 	.word	0x40022000
 8002270:	40022100 	.word	0x40022100
 8002274:	58026000 	.word	0x58026000
 8002278:	40022300 	.word	0x40022300
 800227c:	58026300 	.word	0x58026300
 8002280:	fff04007 	.word	0xfff04007
 8002284:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_ADC_Init+0x400>)
 800229e:	4013      	ands	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	69b9      	ldr	r1, [r7, #24]
 80022a6:	430b      	orrs	r3, r1
 80022a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d137      	bne.n	8002324 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a3f      	ldr	r2, [pc, #252]	; (80023bc <HAL_ADC_Init+0x404>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d116      	bne.n	80022f2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_ADC_Init+0x408>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022d6:	4311      	orrs	r1, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022dc:	4311      	orrs	r1, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80022e2:	430a      	orrs	r2, r1
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	611a      	str	r2, [r3, #16]
 80022f0:	e020      	b.n	8002334 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <HAL_ADC_Init+0x40c>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002300:	3a01      	subs	r2, #1
 8002302:	0411      	lsls	r1, r2, #16
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800230e:	4311      	orrs	r1, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002314:	430a      	orrs	r2, r1
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	e007      	b.n	8002334 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_ADC_Init+0x404>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d002      	beq.n	800235a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f001 f819 	bl	800338c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10c      	bne.n	800237c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f023 010f 	bic.w	r1, r3, #15
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
 800237a:	e007      	b.n	800238c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 020f 	bic.w	r2, r2, #15
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002390:	f023 0303 	bic.w	r3, r3, #3
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	661a      	str	r2, [r3, #96]	; 0x60
 800239c:	e007      	b.n	80023ae <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3724      	adds	r7, #36	; 0x24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	ffffbffc 	.word	0xffffbffc
 80023bc:	58026000 	.word	0x58026000
 80023c0:	fc00f81f 	.word	0xfc00f81f
 80023c4:	fc00f81e 	.word	0xfc00f81e

080023c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5c      	ldr	r2, [pc, #368]	; (8002548 <HAL_ADC_Start+0x180>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_Start+0x1c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a5b      	ldr	r2, [pc, #364]	; (800254c <HAL_ADC_Start+0x184>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_Start+0x20>
 80023e4:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <HAL_ADC_Start+0x188>)
 80023e6:	e000      	b.n	80023ea <HAL_ADC_Start+0x22>
 80023e8:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <HAL_ADC_Start+0x18c>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fcf2 	bl	8001dd4 <LL_ADC_GetMultimode>
 80023f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fdb8 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 809a 	bne.w	8002538 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Start+0x4a>
 800240e:	2302      	movs	r3, #2
 8002410:	e095      	b.n	800253e <HAL_ADC_Start+0x176>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fecc 	bl	80031b8 <ADC_Enable>
 8002420:	4603      	mov	r3, r0
 8002422:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 8081 	bne.w	800252e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002430:	4b49      	ldr	r3, [pc, #292]	; (8002558 <HAL_ADC_Start+0x190>)
 8002432:	4013      	ands	r3, r2
 8002434:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_ADC_Start+0x184>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d002      	beq.n	800244c <HAL_ADC_Start+0x84>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	e000      	b.n	800244e <HAL_ADC_Start+0x86>
 800244c:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_ADC_Start+0x180>)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	4293      	cmp	r3, r2
 8002454:	d002      	beq.n	800245c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d106      	bne.n	8002484 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247a:	f023 0206 	bic.w	r2, r3, #6
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	665a      	str	r2, [r3, #100]	; 0x64
 8002482:	e002      	b.n	800248a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	221c      	movs	r2, #28
 8002490:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_ADC_Start+0x184>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d002      	beq.n	80024aa <HAL_ADC_Start+0xe2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	e000      	b.n	80024ac <HAL_ADC_Start+0xe4>
 80024aa:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_ADC_Start+0x180>)
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d008      	beq.n	80024c6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d002      	beq.n	80024c6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	d114      	bne.n	80024f0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fd2b 	bl	8001f44 <LL_ADC_REG_StartConversion>
 80024ee:	e025      	b.n	800253c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a12      	ldr	r2, [pc, #72]	; (800254c <HAL_ADC_Start+0x184>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d002      	beq.n	800250c <HAL_ADC_Start+0x144>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	e000      	b.n	800250e <HAL_ADC_Start+0x146>
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_ADC_Start+0x180>)
 800250e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00f      	beq.n	800253c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002524:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	661a      	str	r2, [r3, #96]	; 0x60
 800252c:	e006      	b.n	800253c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002536:	e001      	b.n	800253c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002538:	2302      	movs	r3, #2
 800253a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800253c:	7dfb      	ldrb	r3, [r7, #23]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40022100 	.word	0x40022100
 8002550:	40022300 	.word	0x40022300
 8002554:	58026300 	.word	0x58026300
 8002558:	fffff0fe 	.word	0xfffff0fe

0800255c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a72      	ldr	r2, [pc, #456]	; (8002734 <HAL_ADC_PollForConversion+0x1d8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_ADC_PollForConversion+0x1e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a70      	ldr	r2, [pc, #448]	; (8002738 <HAL_ADC_PollForConversion+0x1dc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_ADC_PollForConversion+0x22>
 800257a:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_ADC_PollForConversion+0x1e0>)
 800257c:	e000      	b.n	8002580 <HAL_ADC_PollForConversion+0x24>
 800257e:	4b70      	ldr	r3, [pc, #448]	; (8002740 <HAL_ADC_PollForConversion+0x1e4>)
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fc27 	bl	8001dd4 <LL_ADC_GetMultimode>
 8002586:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d102      	bne.n	8002596 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002590:	2308      	movs	r3, #8
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	e037      	b.n	8002606 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d002      	beq.n	80025a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b09      	cmp	r3, #9
 80025a6:	d111      	bne.n	80025cc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f043 0220 	orr.w	r2, r3, #32
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0b1      	b.n	800272a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025c6:	2304      	movs	r3, #4
 80025c8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80025ca:	e01c      	b.n	8002606 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_ADC_PollForConversion+0x1d8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_ADC_PollForConversion+0x84>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a57      	ldr	r2, [pc, #348]	; (8002738 <HAL_ADC_PollForConversion+0x1dc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_PollForConversion+0x88>
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_ADC_PollForConversion+0x1e0>)
 80025e2:	e000      	b.n	80025e6 <HAL_ADC_PollForConversion+0x8a>
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_ADC_PollForConversion+0x1e4>)
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc02 	bl	8001df0 <LL_ADC_GetMultiDMATransfer>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f6:	f043 0220 	orr.w	r2, r3, #32
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e093      	b.n	800272a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002602:	2304      	movs	r3, #4
 8002604:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002606:	f7ff f9e5 	bl	80019d4 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800260c:	e021      	b.n	8002652 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d01d      	beq.n	8002652 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002616:	f7ff f9dd 	bl	80019d4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d302      	bcc.n	800262c <HAL_ADC_PollForConversion+0xd0>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d112      	bne.n	8002652 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10b      	bne.n	8002652 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e06b      	b.n	800272a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0d6      	beq.n	800260e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fb05 	bl	8001c80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01c      	beq.n	80026b6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7e5b      	ldrb	r3, [r3, #25]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d118      	bne.n	80026b6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b08      	cmp	r3, #8
 8002690:	d111      	bne.n	80026b6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_ADC_PollForConversion+0x1dc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d002      	beq.n	80026c6 <HAL_ADC_PollForConversion+0x16a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e000      	b.n	80026c8 <HAL_ADC_PollForConversion+0x16c>
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_ADC_PollForConversion+0x1d8>)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d008      	beq.n	80026e2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d002      	beq.n	80026e2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b09      	cmp	r3, #9
 80026e0:	d104      	bne.n	80026ec <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e00c      	b.n	8002706 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_ADC_PollForConversion+0x1dc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d002      	beq.n	80026fc <HAL_ADC_PollForConversion+0x1a0>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	e000      	b.n	80026fe <HAL_ADC_PollForConversion+0x1a2>
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_ADC_PollForConversion+0x1d8>)
 80026fe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d104      	bne.n	8002716 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2208      	movs	r2, #8
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e008      	b.n	8002728 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d103      	bne.n	8002728 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	220c      	movs	r2, #12
 8002726:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40022000 	.word	0x40022000
 8002738:	40022100 	.word	0x40022100
 800273c:	40022300 	.word	0x40022300
 8002740:	58026300 	.word	0x58026300

08002744 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b0b9      	sub	sp, #228	; 0xe4
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800277a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4ab3      	ldr	r2, [pc, #716]	; (8002a50 <HAL_ADC_ConfigChannel+0x2f0>)
 8002782:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x34>
 800278e:	2302      	movs	r3, #2
 8002790:	f000 bcfa 	b.w	8003188 <HAL_ADC_ConfigChannel+0xa28>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fbe3 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 84de 	bne.w	800316a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4aa8      	ldr	r2, [pc, #672]	; (8002a54 <HAL_ADC_ConfigChannel+0x2f4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d033      	beq.n	8002820 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x76>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2201      	movs	r2, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	e01d      	b.n	8002812 <HAL_ADC_ConfigChannel+0xb2>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e004      	b.n	8002808 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80027fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2201      	movs	r2, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	69d1      	ldr	r1, [r2, #28]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	430b      	orrs	r3, r1
 800281e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	f7ff fa3a 	bl	8001ca6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fb98 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 800283c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fba4 	bl	8001f92 <LL_ADC_INJ_IsConversionOngoing>
 800284a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 8270 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002858:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 826b 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	461a      	mov	r2, r3
 8002870:	f7ff fa45 	bl	8001cfe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a76      	ldr	r2, [pc, #472]	; (8002a54 <HAL_ADC_ConfigChannel+0x2f4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10d      	bne.n	800289a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	08db      	lsrs	r3, r3, #3
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002898:	e032      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_ADC_ConfigChannel+0x2f8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80028a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a6:	d10b      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x160>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	e01d      	b.n	80028fc <HAL_ADC_ConfigChannel+0x19c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x186>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	e00a      	b.n	80028fc <HAL_ADC_ConfigChannel+0x19c>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d048      	beq.n	800299a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6919      	ldr	r1, [r3, #16]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002918:	f7ff f8c0 	bl	8001a9c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4c      	ldr	r2, [pc, #304]	; (8002a54 <HAL_ADC_ConfigChannel+0x2f4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d119      	bne.n	800295a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6919      	ldr	r1, [r3, #16]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	461a      	mov	r2, r3
 8002934:	f7ff f958 	bl	8001be8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6919      	ldr	r1, [r3, #16]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d102      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1f0>
 800294a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294e:	e000      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1f2>
 8002950:	2300      	movs	r3, #0
 8002952:	461a      	mov	r2, r3
 8002954:	f7ff f926 	bl	8001ba4 <LL_ADC_SetOffsetSaturation>
 8002958:	e1ee      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6919      	ldr	r1, [r3, #16]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002968:	2b01      	cmp	r3, #1
 800296a:	d102      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x212>
 800296c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002970:	e000      	b.n	8002974 <HAL_ADC_ConfigChannel+0x214>
 8002972:	2300      	movs	r3, #0
 8002974:	461a      	mov	r2, r3
 8002976:	f7ff f8f3 	bl	8001b60 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6919      	ldr	r1, [r3, #16]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	7e1b      	ldrb	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d102      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x230>
 800298a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800298e:	e000      	b.n	8002992 <HAL_ADC_ConfigChannel+0x232>
 8002990:	2300      	movs	r3, #0
 8002992:	461a      	mov	r2, r3
 8002994:	f7ff f8ca 	bl	8001b2c <LL_ADC_SetDataRightShift>
 8002998:	e1ce      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <HAL_ADC_ConfigChannel+0x2f4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	f040 8181 	bne.w	8002ca8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f8a7 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x272>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f89c 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	e01e      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x2b0>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff f891 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80029f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80029f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e004      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x2c8>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	e01e      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x306>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e00a      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x306>
 8002a50:	47ff0000 	.word	0x47ff0000
 8002a54:	58026000 	.word	0x58026000
 8002a58:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8002a5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d106      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f8da 	bl	8001c2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f83e 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x344>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2101      	movs	r1, #1
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f833 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	f003 021f 	and.w	r2, r3, #31
 8002aa2:	e01e      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x382>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f828 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e004      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002ad6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x39a>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	e018      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x3cc>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e004      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002b22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d106      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff f877 	bl	8001c2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2102      	movs	r1, #2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe ffdb 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x40a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2102      	movs	r1, #2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe ffd0 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	e01e      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x448>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe ffc5 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e004      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x460>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	e014      	b.n	8002bea <HAL_ADC_ConfigChannel+0x48a>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e004      	b.n	8002bea <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f818 	bl	8001c2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2103      	movs	r1, #3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe ff7c 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x4c8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2103      	movs	r1, #3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe ff71 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	e017      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x4f8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2103      	movs	r1, #3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe ff66 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c42:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x510>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	e011      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x534>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c80:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e003      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d14f      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe ffc3 	bl	8001c2c <LL_ADC_SetOffsetState>
 8002ca6:	e047      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	069b      	lsls	r3, r3, #26
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	069b      	lsls	r3, r3, #26
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	069b      	lsls	r3, r3, #26
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d107      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d12:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	069b      	lsls	r3, r3, #26
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d107      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d36:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f8db 	bl	8001ef8 <LL_ADC_IsEnabled>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 8219 	bne.w	800317c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7fe fffc 	bl	8001d54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4aa1      	ldr	r2, [pc, #644]	; (8002fe8 <HAL_ADC_ConfigChannel+0x888>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	f040 812e 	bne.w	8002fc4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x630>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2b09      	cmp	r3, #9
 8002d86:	bf94      	ite	ls
 8002d88:	2301      	movls	r3, #1
 8002d8a:	2300      	movhi	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e019      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x664>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e003      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	bf94      	ite	ls
 8002dbe:	2301      	movls	r3, #1
 8002dc0:	2300      	movhi	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d079      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x684>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	3301      	adds	r3, #1
 8002ddc:	069b      	lsls	r3, r3, #26
 8002dde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de2:	e015      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x6b0>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e003      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	069b      	lsls	r3, r3, #26
 8002e0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x6d0>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	3301      	adds	r3, #1
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	e017      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x700>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002e48:	2320      	movs	r3, #32
 8002e4a:	e003      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	ea42 0103 	orr.w	r1, r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x726>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0e9b      	lsrs	r3, r3, #26
 8002e76:	3301      	adds	r3, #1
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	051b      	lsls	r3, r3, #20
 8002e84:	e018      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x758>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e003      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	e07e      	b.n	8002fba <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x778>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0e9b      	lsrs	r3, r3, #26
 8002ece:	3301      	adds	r3, #1
 8002ed0:	069b      	lsls	r3, r3, #26
 8002ed2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed6:	e015      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x7a4>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	e003      	b.n	8002efc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	069b      	lsls	r3, r3, #26
 8002f00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x7c4>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	3301      	adds	r3, #1
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	e017      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x7f4>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	61bb      	str	r3, [r7, #24]
  return result;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	ea42 0103 	orr.w	r1, r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10d      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x820>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	3b1e      	subs	r3, #30
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	e01b      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x858>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
  return result;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e003      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f003 021f 	and.w	r2, r3, #31
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b1e      	subs	r3, #30
 8002fb2:	051b      	lsls	r3, r3, #20
 8002fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	6892      	ldr	r2, [r2, #8]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f7fe fe9d 	bl	8001cfe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f280 80d7 	bge.w	800317c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a06      	ldr	r2, [pc, #24]	; (8002fec <HAL_ADC_ConfigChannel+0x88c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_ADC_ConfigChannel+0x882>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_ADC_ConfigChannel+0x890>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x898>
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <HAL_ADC_ConfigChannel+0x894>)
 8002fe4:	e009      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x89a>
 8002fe6:	bf00      	nop
 8002fe8:	47ff0000 	.word	0x47ff0000
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40022100 	.word	0x40022100
 8002ff4:	40022300 	.word	0x40022300
 8002ff8:	4b65      	ldr	r3, [pc, #404]	; (8003190 <HAL_ADC_ConfigChannel+0xa30>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fd40 	bl	8001a80 <LL_ADC_GetCommonPathInternalCh>
 8003000:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a62      	ldr	r2, [pc, #392]	; (8003194 <HAL_ADC_ConfigChannel+0xa34>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x8b8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a61      	ldr	r2, [pc, #388]	; (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d10e      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x8d6>
 8003018:	485e      	ldr	r0, [pc, #376]	; (8003194 <HAL_ADC_ConfigChannel+0xa34>)
 800301a:	f7fe ff6d 	bl	8001ef8 <LL_ADC_IsEnabled>
 800301e:	4604      	mov	r4, r0
 8003020:	485d      	ldr	r0, [pc, #372]	; (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 8003022:	f7fe ff69 	bl	8001ef8 <LL_ADC_IsEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	4323      	orrs	r3, r4
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e008      	b.n	8003048 <HAL_ADC_ConfigChannel+0x8e8>
 8003036:	4859      	ldr	r0, [pc, #356]	; (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 8003038:	f7fe ff5e 	bl	8001ef8 <LL_ADC_IsEnabled>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8084 	beq.w	8003156 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a53      	ldr	r2, [pc, #332]	; (80031a0 <HAL_ADC_ConfigChannel+0xa40>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d132      	bne.n	80030be <HAL_ADC_ConfigChannel+0x95e>
 8003058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800305c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d12c      	bne.n	80030be <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4c      	ldr	r2, [pc, #304]	; (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	f040 8086 	bne.w	800317c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a47      	ldr	r2, [pc, #284]	; (8003194 <HAL_ADC_ConfigChannel+0xa34>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_ADC_ConfigChannel+0x924>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a46      	ldr	r2, [pc, #280]	; (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x928>
 8003084:	4a47      	ldr	r2, [pc, #284]	; (80031a4 <HAL_ADC_ConfigChannel+0xa44>)
 8003086:	e000      	b.n	800308a <HAL_ADC_ConfigChannel+0x92a>
 8003088:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_ADC_ConfigChannel+0xa30>)
 800308a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800308e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f7fe fce0 	bl	8001a5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800309a:	4b43      	ldr	r3, [pc, #268]	; (80031a8 <HAL_ADC_ConfigChannel+0xa48>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_ADC_ConfigChannel+0xa4c>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	3301      	adds	r3, #1
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030ae:	e002      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f9      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030bc:	e05e      	b.n	800317c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3b      	ldr	r2, [pc, #236]	; (80031b0 <HAL_ADC_ConfigChannel+0xa50>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d120      	bne.n	800310a <HAL_ADC_ConfigChannel+0x9aa>
 80030c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11a      	bne.n	800310a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a30      	ldr	r2, [pc, #192]	; (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d14e      	bne.n	800317c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <HAL_ADC_ConfigChannel+0xa34>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x992>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x996>
 80030f2:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <HAL_ADC_ConfigChannel+0xa44>)
 80030f4:	e000      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x998>
 80030f6:	4a26      	ldr	r2, [pc, #152]	; (8003190 <HAL_ADC_ConfigChannel+0xa30>)
 80030f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f7fe fca9 	bl	8001a5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003108:	e038      	b.n	800317c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_ADC_ConfigChannel+0xa54>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d133      	bne.n	800317c <HAL_ADC_ConfigChannel+0xa1c>
 8003114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d12d      	bne.n	800317c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_ADC_ConfigChannel+0xa3c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d128      	bne.n	800317c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a19      	ldr	r2, [pc, #100]	; (8003194 <HAL_ADC_ConfigChannel+0xa34>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_ADC_ConfigChannel+0x9de>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_ADC_ConfigChannel+0xa38>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x9e2>
 800313e:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_ADC_ConfigChannel+0xa44>)
 8003140:	e000      	b.n	8003144 <HAL_ADC_ConfigChannel+0x9e4>
 8003142:	4a13      	ldr	r2, [pc, #76]	; (8003190 <HAL_ADC_ConfigChannel+0xa30>)
 8003144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003148:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7fe fc83 	bl	8001a5a <LL_ADC_SetCommonPathInternalCh>
 8003154:	e012      	b.n	800317c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003168:	e008      	b.n	800317c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003184:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003188:	4618      	mov	r0, r3
 800318a:	37e4      	adds	r7, #228	; 0xe4
 800318c:	46bd      	mov	sp, r7
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	58026300 	.word	0x58026300
 8003194:	40022000 	.word	0x40022000
 8003198:	40022100 	.word	0x40022100
 800319c:	58026000 	.word	0x58026000
 80031a0:	c7520000 	.word	0xc7520000
 80031a4:	40022300 	.word	0x40022300
 80031a8:	24000000 	.word	0x24000000
 80031ac:	053e2d63 	.word	0x053e2d63
 80031b0:	c3210000 	.word	0xc3210000
 80031b4:	cb840000 	.word	0xcb840000

080031b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fe97 	bl	8001ef8 <LL_ADC_IsEnabled>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d16e      	bne.n	80032ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <ADC_Enable+0x100>)
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	f043 0210 	orr.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e05a      	b.n	80032b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fe52 	bl	8001ea8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003204:	f7fe fbe6 	bl	80019d4 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2b      	ldr	r2, [pc, #172]	; (80032bc <ADC_Enable+0x104>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <ADC_Enable+0x66>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <ADC_Enable+0x108>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <ADC_Enable+0x6a>
 800321e:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <ADC_Enable+0x10c>)
 8003220:	e000      	b.n	8003224 <ADC_Enable+0x6c>
 8003222:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <ADC_Enable+0x110>)
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fdd5 	bl	8001dd4 <LL_ADC_GetMultimode>
 800322a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <ADC_Enable+0x108>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d002      	beq.n	800323c <ADC_Enable+0x84>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	e000      	b.n	800323e <ADC_Enable+0x86>
 800323c:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <ADC_Enable+0x104>)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4293      	cmp	r3, r2
 8003244:	d02c      	beq.n	80032a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d130      	bne.n	80032ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800324c:	e028      	b.n	80032a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fe50 	bl	8001ef8 <LL_ADC_IsEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe fe20 	bl	8001ea8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003268:	f7fe fbb4 	bl	80019d4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d914      	bls.n	80032a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d00d      	beq.n	80032a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003288:	f043 0210 	orr.w	r2, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e007      	b.n	80032b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d1cf      	bne.n	800324e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	8000003f 	.word	0x8000003f
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40022100 	.word	0x40022100
 80032c4:	40022300 	.word	0x40022300
 80032c8:	58026300 	.word	0x58026300

080032cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe fe20 	bl	8001f1e <LL_ADC_IsDisableOngoing>
 80032de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fe07 	bl	8001ef8 <LL_ADC_IsEnabled>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d047      	beq.n	8003380 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d144      	bne.n	8003380 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030d 	and.w	r3, r3, #13
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fde1 	bl	8001ed0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2203      	movs	r2, #3
 8003314:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003316:	f7fe fb5d 	bl	80019d4 <HAL_GetTick>
 800331a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800331c:	e029      	b.n	8003372 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	f043 0210 	orr.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e023      	b.n	8003382 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800333a:	f7fe fb4b 	bl	80019d4 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d914      	bls.n	8003372 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e007      	b.n	8003382 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1dc      	bne.n	800333a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6b      	ldr	r2, [pc, #428]	; (8003548 <ADC_ConfigureBoostMode+0x1bc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <ADC_ConfigureBoostMode+0x1c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6a      	ldr	r2, [pc, #424]	; (800354c <ADC_ConfigureBoostMode+0x1c0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d109      	bne.n	80033bc <ADC_ConfigureBoostMode+0x30>
 80033a8:	4b69      	ldr	r3, [pc, #420]	; (8003550 <ADC_ConfigureBoostMode+0x1c4>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e008      	b.n	80033ce <ADC_ConfigureBoostMode+0x42>
 80033bc:	4b65      	ldr	r3, [pc, #404]	; (8003554 <ADC_ConfigureBoostMode+0x1c8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01c      	beq.n	800340c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80033d2:	f004 fac5 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80033d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033e0:	d010      	beq.n	8003404 <ADC_ConfigureBoostMode+0x78>
 80033e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033e6:	d871      	bhi.n	80034cc <ADC_ConfigureBoostMode+0x140>
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d002      	beq.n	80033f4 <ADC_ConfigureBoostMode+0x68>
 80033ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033f2:	d16b      	bne.n	80034cc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	60fb      	str	r3, [r7, #12]
        break;
 8003402:	e066      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	60fb      	str	r3, [r7, #12]
        break;
 800340a:	e062      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800340c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003410:	f005 f9fc 	bl	800880c <HAL_RCCEx_GetPeriphCLKFreq>
 8003414:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800341e:	d051      	beq.n	80034c4 <ADC_ConfigureBoostMode+0x138>
 8003420:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003424:	d854      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 8003426:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800342a:	d047      	beq.n	80034bc <ADC_ConfigureBoostMode+0x130>
 800342c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003430:	d84e      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 8003432:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003436:	d03d      	beq.n	80034b4 <ADC_ConfigureBoostMode+0x128>
 8003438:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800343c:	d848      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 800343e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003442:	d033      	beq.n	80034ac <ADC_ConfigureBoostMode+0x120>
 8003444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003448:	d842      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 800344a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800344e:	d029      	beq.n	80034a4 <ADC_ConfigureBoostMode+0x118>
 8003450:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003454:	d83c      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 8003456:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800345a:	d01a      	beq.n	8003492 <ADC_ConfigureBoostMode+0x106>
 800345c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003460:	d836      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 8003462:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003466:	d014      	beq.n	8003492 <ADC_ConfigureBoostMode+0x106>
 8003468:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800346c:	d830      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 800346e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003472:	d00e      	beq.n	8003492 <ADC_ConfigureBoostMode+0x106>
 8003474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003478:	d82a      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 800347a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800347e:	d008      	beq.n	8003492 <ADC_ConfigureBoostMode+0x106>
 8003480:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003484:	d824      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 8003486:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800348a:	d002      	beq.n	8003492 <ADC_ConfigureBoostMode+0x106>
 800348c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003490:	d11e      	bne.n	80034d0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	0c9b      	lsrs	r3, r3, #18
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	60fb      	str	r3, [r7, #12]
        break;
 80034a2:	e016      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
        break;
 80034aa:	e012      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	60fb      	str	r3, [r7, #12]
        break;
 80034b2:	e00e      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	60fb      	str	r3, [r7, #12]
        break;
 80034ba:	e00a      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	09db      	lsrs	r3, r3, #7
 80034c0:	60fb      	str	r3, [r7, #12]
        break;
 80034c2:	e006      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	60fb      	str	r3, [r7, #12]
        break;
 80034ca:	e002      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
        break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80034d0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <ADC_ConfigureBoostMode+0x1cc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d808      	bhi.n	80034f2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034f0:	e025      	b.n	800353e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a19      	ldr	r2, [pc, #100]	; (800355c <ADC_ConfigureBoostMode+0x1d0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d80a      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350c:	609a      	str	r2, [r3, #8]
}
 800350e:	e016      	b.n	800353e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a13      	ldr	r2, [pc, #76]	; (8003560 <ADC_ConfigureBoostMode+0x1d4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d80a      	bhi.n	800352e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	e007      	b.n	800353e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800353c:	609a      	str	r2, [r3, #8]
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000
 800354c:	40022100 	.word	0x40022100
 8003550:	40022300 	.word	0x40022300
 8003554:	58026300 	.word	0x58026300
 8003558:	005f5e10 	.word	0x005f5e10
 800355c:	00bebc20 	.word	0x00bebc20
 8003560:	017d7840 	.word	0x017d7840

08003564 <LL_ADC_IsEnabled>:
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <LL_ADC_IsEnabled+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <LL_ADC_IsEnabled+0x1a>
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <LL_ADC_StartCalibration>:
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <LL_ADC_StartCalibration+0x38>)
 800359e:	4013      	ands	r3, r2
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035ac:	430a      	orrs	r2, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	3ffeffc0 	.word	0x3ffeffc0

080035c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035dc:	d101      	bne.n	80035e2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_ADC_REG_IsConversionOngoing>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d101      	bne.n	8003608 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_ADCEx_Calibration_Start+0x1e>
 8003632:	2302      	movs	r3, #2
 8003634:	e04c      	b.n	80036d0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff fe44 	bl	80032cc <ADC_Disable>
 8003644:	4603      	mov	r3, r0
 8003646:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d135      	bne.n	80036ba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003654:	4013      	ands	r3, r2
 8003656:	f043 0202 	orr.w	r2, r3, #2
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff ff90 	bl	800358c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800366c:	e014      	b.n	8003698 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3301      	adds	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_ADCEx_Calibration_Start+0xc4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d30d      	bcc.n	8003698 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	f023 0312 	bic.w	r3, r3, #18
 8003684:	f043 0210 	orr.w	r2, r3, #16
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e01b      	b.n	80036d0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff93 	bl	80035c8 <LL_ADC_IsCalibrationOnGoing>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e2      	bne.n	800366e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	f023 0303 	bic.w	r3, r3, #3
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	661a      	str	r2, [r3, #96]	; 0x60
 80036b8:	e005      	b.n	80036c6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	f043 0210 	orr.w	r2, r3, #16
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	ffffeefd 	.word	0xffffeefd
 80036dc:	25c3f800 	.word	0x25c3f800

080036e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b0a3      	sub	sp, #140	; 0x8c
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e0c1      	b.n	8003882 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800370a:	2300      	movs	r3, #0
 800370c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5e      	ldr	r2, [pc, #376]	; (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d102      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003718:	4b5d      	ldr	r3, [pc, #372]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e001      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0a0      	b.n	8003882 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff54 	bl	80035f0 <LL_ADC_REG_IsConversionOngoing>
 8003748:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff4d 	bl	80035f0 <LL_ADC_REG_IsConversionOngoing>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f040 8081 	bne.w	8003860 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800375e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d17c      	bne.n	8003860 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a48      	ldr	r2, [pc, #288]	; (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d004      	beq.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a46      	ldr	r2, [pc, #280]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800377a:	4b46      	ldr	r3, [pc, #280]	; (8003894 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800377c:	e000      	b.n	8003780 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800377e:	4b46      	ldr	r3, [pc, #280]	; (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003780:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d039      	beq.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800378a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	431a      	orrs	r2, r3
 8003798:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800379a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a3a      	ldr	r2, [pc, #232]	; (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a39      	ldr	r2, [pc, #228]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10e      	bne.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80037b0:	4836      	ldr	r0, [pc, #216]	; (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80037b2:	f7ff fed7 	bl	8003564 <LL_ADC_IsEnabled>
 80037b6:	4604      	mov	r4, r0
 80037b8:	4835      	ldr	r0, [pc, #212]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80037ba:	f7ff fed3 	bl	8003564 <LL_ADC_IsEnabled>
 80037be:	4603      	mov	r3, r0
 80037c0:	4323      	orrs	r3, r4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e008      	b.n	80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80037ce:	4833      	ldr	r0, [pc, #204]	; (800389c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80037d0:	f7ff fec8 	bl	8003564 <LL_ADC_IsEnabled>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf0c      	ite	eq
 80037da:	2301      	moveq	r3, #1
 80037dc:	2300      	movne	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d047      	beq.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	6811      	ldr	r1, [r2, #0]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	431a      	orrs	r2, r3
 80037f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037fc:	e03a      	b.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80037fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003806:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003808:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1f      	ldr	r2, [pc, #124]	; (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10e      	bne.n	800383c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800381e:	481b      	ldr	r0, [pc, #108]	; (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003820:	f7ff fea0 	bl	8003564 <LL_ADC_IsEnabled>
 8003824:	4604      	mov	r4, r0
 8003826:	481a      	ldr	r0, [pc, #104]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003828:	f7ff fe9c 	bl	8003564 <LL_ADC_IsEnabled>
 800382c:	4603      	mov	r3, r0
 800382e:	4323      	orrs	r3, r4
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e008      	b.n	800384e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800383c:	4817      	ldr	r0, [pc, #92]	; (800389c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800383e:	f7ff fe91 	bl	8003564 <LL_ADC_IsEnabled>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003858:	4013      	ands	r3, r2
 800385a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800385c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800385e:	e009      	b.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003872:	e000      	b.n	8003876 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003874:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800387e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003882:	4618      	mov	r0, r3
 8003884:	378c      	adds	r7, #140	; 0x8c
 8003886:	46bd      	mov	sp, r7
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	bf00      	nop
 800388c:	40022000 	.word	0x40022000
 8003890:	40022100 	.word	0x40022100
 8003894:	40022300 	.word	0x40022300
 8003898:	58026300 	.word	0x58026300
 800389c:	58026000 	.word	0x58026000
 80038a0:	fffff0e0 	.word	0xfffff0e0

080038a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <__NVIC_SetPriorityGrouping+0x40>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c0:	4013      	ands	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d2:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <__NVIC_SetPriorityGrouping+0x40>)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	60d3      	str	r3, [r2, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00
 80038e8:	05fa0000 	.word	0x05fa0000

080038ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <__NVIC_GetPriorityGrouping+0x18>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0307 	and.w	r3, r3, #7
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003916:	2b00      	cmp	r3, #0
 8003918:	db0b      	blt.n	8003932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	f003 021f 	and.w	r2, r3, #31
 8003920:	4907      	ldr	r1, [pc, #28]	; (8003940 <__NVIC_EnableIRQ+0x38>)
 8003922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2001      	movs	r0, #1
 800392a:	fa00 f202 	lsl.w	r2, r0, r2
 800392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000e100 	.word	0xe000e100

08003944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db0a      	blt.n	800396e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	490c      	ldr	r1, [pc, #48]	; (8003990 <__NVIC_SetPriority+0x4c>)
 800395e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	440b      	add	r3, r1
 8003968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800396c:	e00a      	b.n	8003984 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4908      	ldr	r1, [pc, #32]	; (8003994 <__NVIC_SetPriority+0x50>)
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3b04      	subs	r3, #4
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	440b      	add	r3, r1
 8003982:	761a      	strb	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f1c3 0307 	rsb	r3, r3, #7
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	bf28      	it	cs
 80039b6:	2304      	movcs	r3, #4
 80039b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3304      	adds	r3, #4
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d902      	bls.n	80039c8 <NVIC_EncodePriority+0x30>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3b03      	subs	r3, #3
 80039c6:	e000      	b.n	80039ca <NVIC_EncodePriority+0x32>
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039cc:	f04f 32ff 	mov.w	r2, #4294967295
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	401a      	ands	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	43d9      	mvns	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	4313      	orrs	r3, r2
         );
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a10:	d301      	bcc.n	8003a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00f      	b.n	8003a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <SysTick_Config+0x40>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1e:	210f      	movs	r1, #15
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	f7ff ff8e 	bl	8003944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <SysTick_Config+0x40>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <SysTick_Config+0x40>)
 8003a30:	2207      	movs	r2, #7
 8003a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	e000e010 	.word	0xe000e010

08003a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff29 	bl	80038a4 <__NVIC_SetPriorityGrouping>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a68:	f7ff ff40 	bl	80038ec <__NVIC_GetPriorityGrouping>
 8003a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f7ff ff90 	bl	8003998 <NVIC_EncodePriority>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff5f 	bl	8003944 <__NVIC_SetPriority>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4603      	mov	r3, r0
 8003a96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff33 	bl	8003908 <__NVIC_EnableIRQ>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffa4 	bl	8003a00 <SysTick_Config>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7fd ff82 	bl	80019d4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e314      	b.n	8004106 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a66      	ldr	r2, [pc, #408]	; (8003c7c <HAL_DMA_Init+0x1b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d04a      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a65      	ldr	r2, [pc, #404]	; (8003c80 <HAL_DMA_Init+0x1bc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d045      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a63      	ldr	r2, [pc, #396]	; (8003c84 <HAL_DMA_Init+0x1c0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d040      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a62      	ldr	r2, [pc, #392]	; (8003c88 <HAL_DMA_Init+0x1c4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d03b      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a60      	ldr	r2, [pc, #384]	; (8003c8c <HAL_DMA_Init+0x1c8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d036      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5f      	ldr	r2, [pc, #380]	; (8003c90 <HAL_DMA_Init+0x1cc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d031      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a5d      	ldr	r2, [pc, #372]	; (8003c94 <HAL_DMA_Init+0x1d0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d02c      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a5c      	ldr	r2, [pc, #368]	; (8003c98 <HAL_DMA_Init+0x1d4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d027      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a5a      	ldr	r2, [pc, #360]	; (8003c9c <HAL_DMA_Init+0x1d8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d022      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a59      	ldr	r2, [pc, #356]	; (8003ca0 <HAL_DMA_Init+0x1dc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d01d      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a57      	ldr	r2, [pc, #348]	; (8003ca4 <HAL_DMA_Init+0x1e0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d018      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <HAL_DMA_Init+0x1e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a54      	ldr	r2, [pc, #336]	; (8003cac <HAL_DMA_Init+0x1e8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00e      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a53      	ldr	r2, [pc, #332]	; (8003cb0 <HAL_DMA_Init+0x1ec>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a51      	ldr	r2, [pc, #324]	; (8003cb4 <HAL_DMA_Init+0x1f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_DMA_Init+0xb8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a50      	ldr	r2, [pc, #320]	; (8003cb8 <HAL_DMA_Init+0x1f4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_DMA_Init+0xbc>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_DMA_Init+0xbe>
 8003b80:	2300      	movs	r3, #0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 813c 	beq.w	8003e00 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a37      	ldr	r2, [pc, #220]	; (8003c7c <HAL_DMA_Init+0x1b8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d04a      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a36      	ldr	r2, [pc, #216]	; (8003c80 <HAL_DMA_Init+0x1bc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d045      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a34      	ldr	r2, [pc, #208]	; (8003c84 <HAL_DMA_Init+0x1c0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d040      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a33      	ldr	r2, [pc, #204]	; (8003c88 <HAL_DMA_Init+0x1c4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d03b      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a31      	ldr	r2, [pc, #196]	; (8003c8c <HAL_DMA_Init+0x1c8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d036      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_DMA_Init+0x1cc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d031      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2e      	ldr	r2, [pc, #184]	; (8003c94 <HAL_DMA_Init+0x1d0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d02c      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2d      	ldr	r2, [pc, #180]	; (8003c98 <HAL_DMA_Init+0x1d4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d027      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2b      	ldr	r2, [pc, #172]	; (8003c9c <HAL_DMA_Init+0x1d8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d022      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <HAL_DMA_Init+0x1dc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d01d      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a28      	ldr	r2, [pc, #160]	; (8003ca4 <HAL_DMA_Init+0x1e0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d018      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a27      	ldr	r2, [pc, #156]	; (8003ca8 <HAL_DMA_Init+0x1e4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d013      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a25      	ldr	r2, [pc, #148]	; (8003cac <HAL_DMA_Init+0x1e8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00e      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a24      	ldr	r2, [pc, #144]	; (8003cb0 <HAL_DMA_Init+0x1ec>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <HAL_DMA_Init+0x1f0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_DMA_Init+0x174>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <HAL_DMA_Init+0x1f4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <HAL_DMA_Init+0x186>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e007      	b.n	8003c5a <HAL_DMA_Init+0x196>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c5a:	e02f      	b.n	8003cbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c5c:	f7fd feba 	bl	80019d4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d928      	bls.n	8003cbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2203      	movs	r2, #3
 8003c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e244      	b.n	8004106 <HAL_DMA_Init+0x642>
 8003c7c:	40020010 	.word	0x40020010
 8003c80:	40020028 	.word	0x40020028
 8003c84:	40020040 	.word	0x40020040
 8003c88:	40020058 	.word	0x40020058
 8003c8c:	40020070 	.word	0x40020070
 8003c90:	40020088 	.word	0x40020088
 8003c94:	400200a0 	.word	0x400200a0
 8003c98:	400200b8 	.word	0x400200b8
 8003c9c:	40020410 	.word	0x40020410
 8003ca0:	40020428 	.word	0x40020428
 8003ca4:	40020440 	.word	0x40020440
 8003ca8:	40020458 	.word	0x40020458
 8003cac:	40020470 	.word	0x40020470
 8003cb0:	40020488 	.word	0x40020488
 8003cb4:	400204a0 	.word	0x400204a0
 8003cb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1c8      	bne.n	8003c5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4b84      	ldr	r3, [pc, #528]	; (8003ee8 <HAL_DMA_Init+0x424>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003ce2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d107      	bne.n	8003d20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b28      	cmp	r3, #40	; 0x28
 8003d26:	d903      	bls.n	8003d30 <HAL_DMA_Init+0x26c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d2e:	d91f      	bls.n	8003d70 <HAL_DMA_Init+0x2ac>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b3e      	cmp	r3, #62	; 0x3e
 8003d36:	d903      	bls.n	8003d40 <HAL_DMA_Init+0x27c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b42      	cmp	r3, #66	; 0x42
 8003d3e:	d917      	bls.n	8003d70 <HAL_DMA_Init+0x2ac>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b46      	cmp	r3, #70	; 0x46
 8003d46:	d903      	bls.n	8003d50 <HAL_DMA_Init+0x28c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b48      	cmp	r3, #72	; 0x48
 8003d4e:	d90f      	bls.n	8003d70 <HAL_DMA_Init+0x2ac>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b4e      	cmp	r3, #78	; 0x4e
 8003d56:	d903      	bls.n	8003d60 <HAL_DMA_Init+0x29c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b52      	cmp	r3, #82	; 0x52
 8003d5e:	d907      	bls.n	8003d70 <HAL_DMA_Init+0x2ac>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b73      	cmp	r3, #115	; 0x73
 8003d66:	d905      	bls.n	8003d74 <HAL_DMA_Init+0x2b0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b77      	cmp	r3, #119	; 0x77
 8003d6e:	d801      	bhi.n	8003d74 <HAL_DMA_Init+0x2b0>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_DMA_Init+0x2b2>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d80:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 0307 	bic.w	r3, r3, #7
 8003d98:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d117      	bne.n	8003ddc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00e      	beq.n	8003ddc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f002 fb2e 	bl	8006420 <DMA_CheckFifoParam>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2240      	movs	r2, #64	; 0x40
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e194      	b.n	8004106 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f002 fa69 	bl	80062bc <DMA_CalcBaseAndBitshift>
 8003dea:	4603      	mov	r3, r0
 8003dec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	223f      	movs	r2, #63	; 0x3f
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	e0ca      	b.n	8003f96 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a39      	ldr	r2, [pc, #228]	; (8003eec <HAL_DMA_Init+0x428>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_DMA_Init+0x38c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a38      	ldr	r2, [pc, #224]	; (8003ef0 <HAL_DMA_Init+0x42c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d01d      	beq.n	8003e50 <HAL_DMA_Init+0x38c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a36      	ldr	r2, [pc, #216]	; (8003ef4 <HAL_DMA_Init+0x430>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_DMA_Init+0x38c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a35      	ldr	r2, [pc, #212]	; (8003ef8 <HAL_DMA_Init+0x434>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_DMA_Init+0x38c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a33      	ldr	r2, [pc, #204]	; (8003efc <HAL_DMA_Init+0x438>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_DMA_Init+0x38c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a32      	ldr	r2, [pc, #200]	; (8003f00 <HAL_DMA_Init+0x43c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_DMA_Init+0x38c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a30      	ldr	r2, [pc, #192]	; (8003f04 <HAL_DMA_Init+0x440>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_DMA_Init+0x38c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <HAL_DMA_Init+0x444>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_DMA_Init+0x390>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_DMA_Init+0x392>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8094 	beq.w	8003f84 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a22      	ldr	r2, [pc, #136]	; (8003eec <HAL_DMA_Init+0x428>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d021      	beq.n	8003eaa <HAL_DMA_Init+0x3e6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <HAL_DMA_Init+0x42c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d01c      	beq.n	8003eaa <HAL_DMA_Init+0x3e6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <HAL_DMA_Init+0x430>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d017      	beq.n	8003eaa <HAL_DMA_Init+0x3e6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <HAL_DMA_Init+0x434>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d012      	beq.n	8003eaa <HAL_DMA_Init+0x3e6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <HAL_DMA_Init+0x438>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00d      	beq.n	8003eaa <HAL_DMA_Init+0x3e6>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <HAL_DMA_Init+0x43c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d008      	beq.n	8003eaa <HAL_DMA_Init+0x3e6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_DMA_Init+0x440>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <HAL_DMA_Init+0x3e6>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_DMA_Init+0x444>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <HAL_DMA_Init+0x448>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_Init+0x44c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d102      	bne.n	8003ee2 <HAL_DMA_Init+0x41e>
 8003edc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ee0:	e017      	b.n	8003f12 <HAL_DMA_Init+0x44e>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e015      	b.n	8003f12 <HAL_DMA_Init+0x44e>
 8003ee6:	bf00      	nop
 8003ee8:	fe10803f 	.word	0xfe10803f
 8003eec:	58025408 	.word	0x58025408
 8003ef0:	5802541c 	.word	0x5802541c
 8003ef4:	58025430 	.word	0x58025430
 8003ef8:	58025444 	.word	0x58025444
 8003efc:	58025458 	.word	0x58025458
 8003f00:	5802546c 	.word	0x5802546c
 8003f04:	58025480 	.word	0x58025480
 8003f08:	58025494 	.word	0x58025494
 8003f0c:	fffe000f 	.word	0xfffe000f
 8003f10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68d2      	ldr	r2, [r2, #12]
 8003f16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b6e      	ldr	r3, [pc, #440]	; (8004110 <HAL_DMA_Init+0x64c>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	4a6e      	ldr	r2, [pc, #440]	; (8004114 <HAL_DMA_Init+0x650>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	009a      	lsls	r2, r3, #2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f002 f9a7 	bl	80062bc <DMA_CalcBaseAndBitshift>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	e008      	b.n	8003f96 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0b7      	b.n	8004106 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5f      	ldr	r2, [pc, #380]	; (8004118 <HAL_DMA_Init+0x654>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d072      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5d      	ldr	r2, [pc, #372]	; (800411c <HAL_DMA_Init+0x658>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d06d      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5c      	ldr	r2, [pc, #368]	; (8004120 <HAL_DMA_Init+0x65c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d068      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5a      	ldr	r2, [pc, #360]	; (8004124 <HAL_DMA_Init+0x660>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d063      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a59      	ldr	r2, [pc, #356]	; (8004128 <HAL_DMA_Init+0x664>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d05e      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a57      	ldr	r2, [pc, #348]	; (800412c <HAL_DMA_Init+0x668>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d059      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a56      	ldr	r2, [pc, #344]	; (8004130 <HAL_DMA_Init+0x66c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d054      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a54      	ldr	r2, [pc, #336]	; (8004134 <HAL_DMA_Init+0x670>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d04f      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a53      	ldr	r2, [pc, #332]	; (8004138 <HAL_DMA_Init+0x674>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d04a      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a51      	ldr	r2, [pc, #324]	; (800413c <HAL_DMA_Init+0x678>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d045      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a50      	ldr	r2, [pc, #320]	; (8004140 <HAL_DMA_Init+0x67c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d040      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4e      	ldr	r2, [pc, #312]	; (8004144 <HAL_DMA_Init+0x680>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d03b      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a4d      	ldr	r2, [pc, #308]	; (8004148 <HAL_DMA_Init+0x684>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d036      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a4b      	ldr	r2, [pc, #300]	; (800414c <HAL_DMA_Init+0x688>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d031      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a4a      	ldr	r2, [pc, #296]	; (8004150 <HAL_DMA_Init+0x68c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d02c      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a48      	ldr	r2, [pc, #288]	; (8004154 <HAL_DMA_Init+0x690>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d027      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a47      	ldr	r2, [pc, #284]	; (8004158 <HAL_DMA_Init+0x694>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d022      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a45      	ldr	r2, [pc, #276]	; (800415c <HAL_DMA_Init+0x698>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01d      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a44      	ldr	r2, [pc, #272]	; (8004160 <HAL_DMA_Init+0x69c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d018      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_DMA_Init+0x6a0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a41      	ldr	r2, [pc, #260]	; (8004168 <HAL_DMA_Init+0x6a4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3f      	ldr	r2, [pc, #252]	; (800416c <HAL_DMA_Init+0x6a8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d009      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3e      	ldr	r2, [pc, #248]	; (8004170 <HAL_DMA_Init+0x6ac>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_DMA_Init+0x5c2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <HAL_DMA_Init+0x6b0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_DMA_Init+0x5c6>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_DMA_Init+0x5c8>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d032      	beq.n	80040f6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f002 fa41 	bl	8006518 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b80      	cmp	r3, #128	; 0x80
 800409c:	d102      	bne.n	80040a4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <HAL_DMA_Init+0x620>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d80c      	bhi.n	80040e4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f002 fabe 	bl	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	e008      	b.n	80040f6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	a7fdabf8 	.word	0xa7fdabf8
 8004114:	cccccccd 	.word	0xcccccccd
 8004118:	40020010 	.word	0x40020010
 800411c:	40020028 	.word	0x40020028
 8004120:	40020040 	.word	0x40020040
 8004124:	40020058 	.word	0x40020058
 8004128:	40020070 	.word	0x40020070
 800412c:	40020088 	.word	0x40020088
 8004130:	400200a0 	.word	0x400200a0
 8004134:	400200b8 	.word	0x400200b8
 8004138:	40020410 	.word	0x40020410
 800413c:	40020428 	.word	0x40020428
 8004140:	40020440 	.word	0x40020440
 8004144:	40020458 	.word	0x40020458
 8004148:	40020470 	.word	0x40020470
 800414c:	40020488 	.word	0x40020488
 8004150:	400204a0 	.word	0x400204a0
 8004154:	400204b8 	.word	0x400204b8
 8004158:	58025408 	.word	0x58025408
 800415c:	5802541c 	.word	0x5802541c
 8004160:	58025430 	.word	0x58025430
 8004164:	58025444 	.word	0x58025444
 8004168:	58025458 	.word	0x58025458
 800416c:	5802546c 	.word	0x5802546c
 8004170:	58025480 	.word	0x58025480
 8004174:	58025494 	.word	0x58025494

08004178 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e226      	b.n	80045e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_DMA_Start_IT+0x2a>
 800419e:	2302      	movs	r3, #2
 80041a0:	e21f      	b.n	80045e2 <HAL_DMA_Start_IT+0x46a>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	f040 820a 	bne.w	80045cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a68      	ldr	r2, [pc, #416]	; (800436c <HAL_DMA_Start_IT+0x1f4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04a      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a66      	ldr	r2, [pc, #408]	; (8004370 <HAL_DMA_Start_IT+0x1f8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d045      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a65      	ldr	r2, [pc, #404]	; (8004374 <HAL_DMA_Start_IT+0x1fc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d040      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a63      	ldr	r2, [pc, #396]	; (8004378 <HAL_DMA_Start_IT+0x200>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d03b      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a62      	ldr	r2, [pc, #392]	; (800437c <HAL_DMA_Start_IT+0x204>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d036      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a60      	ldr	r2, [pc, #384]	; (8004380 <HAL_DMA_Start_IT+0x208>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d031      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a5f      	ldr	r2, [pc, #380]	; (8004384 <HAL_DMA_Start_IT+0x20c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d02c      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a5d      	ldr	r2, [pc, #372]	; (8004388 <HAL_DMA_Start_IT+0x210>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d027      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a5c      	ldr	r2, [pc, #368]	; (800438c <HAL_DMA_Start_IT+0x214>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a5a      	ldr	r2, [pc, #360]	; (8004390 <HAL_DMA_Start_IT+0x218>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a59      	ldr	r2, [pc, #356]	; (8004394 <HAL_DMA_Start_IT+0x21c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a57      	ldr	r2, [pc, #348]	; (8004398 <HAL_DMA_Start_IT+0x220>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a56      	ldr	r2, [pc, #344]	; (800439c <HAL_DMA_Start_IT+0x224>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a54      	ldr	r2, [pc, #336]	; (80043a0 <HAL_DMA_Start_IT+0x228>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a53      	ldr	r2, [pc, #332]	; (80043a4 <HAL_DMA_Start_IT+0x22c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_DMA_Start_IT+0xee>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a51      	ldr	r2, [pc, #324]	; (80043a8 <HAL_DMA_Start_IT+0x230>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <HAL_DMA_Start_IT+0x100>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e007      	b.n	8004288 <HAL_DMA_Start_IT+0x110>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f001 fe68 	bl	8005f64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a34      	ldr	r2, [pc, #208]	; (800436c <HAL_DMA_Start_IT+0x1f4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04a      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a33      	ldr	r2, [pc, #204]	; (8004370 <HAL_DMA_Start_IT+0x1f8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d045      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a31      	ldr	r2, [pc, #196]	; (8004374 <HAL_DMA_Start_IT+0x1fc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a30      	ldr	r2, [pc, #192]	; (8004378 <HAL_DMA_Start_IT+0x200>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03b      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2e      	ldr	r2, [pc, #184]	; (800437c <HAL_DMA_Start_IT+0x204>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d036      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2d      	ldr	r2, [pc, #180]	; (8004380 <HAL_DMA_Start_IT+0x208>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d031      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <HAL_DMA_Start_IT+0x20c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <HAL_DMA_Start_IT+0x210>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d027      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a28      	ldr	r2, [pc, #160]	; (800438c <HAL_DMA_Start_IT+0x214>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a27      	ldr	r2, [pc, #156]	; (8004390 <HAL_DMA_Start_IT+0x218>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a25      	ldr	r2, [pc, #148]	; (8004394 <HAL_DMA_Start_IT+0x21c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a24      	ldr	r2, [pc, #144]	; (8004398 <HAL_DMA_Start_IT+0x220>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a22      	ldr	r2, [pc, #136]	; (800439c <HAL_DMA_Start_IT+0x224>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <HAL_DMA_Start_IT+0x228>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <HAL_DMA_Start_IT+0x22c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_DMA_Start_IT+0x1bc>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <HAL_DMA_Start_IT+0x230>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <HAL_DMA_Start_IT+0x1c0>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <HAL_DMA_Start_IT+0x1c2>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d036      	beq.n	80043ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f023 021e 	bic.w	r2, r3, #30
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0216 	orr.w	r2, r2, #22
 8004350:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d03e      	beq.n	80043d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e035      	b.n	80043d8 <HAL_DMA_Start_IT+0x260>
 800436c:	40020010 	.word	0x40020010
 8004370:	40020028 	.word	0x40020028
 8004374:	40020040 	.word	0x40020040
 8004378:	40020058 	.word	0x40020058
 800437c:	40020070 	.word	0x40020070
 8004380:	40020088 	.word	0x40020088
 8004384:	400200a0 	.word	0x400200a0
 8004388:	400200b8 	.word	0x400200b8
 800438c:	40020410 	.word	0x40020410
 8004390:	40020428 	.word	0x40020428
 8004394:	40020440 	.word	0x40020440
 8004398:	40020458 	.word	0x40020458
 800439c:	40020470 	.word	0x40020470
 80043a0:	40020488 	.word	0x40020488
 80043a4:	400204a0 	.word	0x400204a0
 80043a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 020e 	bic.w	r2, r3, #14
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 020a 	orr.w	r2, r2, #10
 80043be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0204 	orr.w	r2, r2, #4
 80043d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a83      	ldr	r2, [pc, #524]	; (80045ec <HAL_DMA_Start_IT+0x474>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d072      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a82      	ldr	r2, [pc, #520]	; (80045f0 <HAL_DMA_Start_IT+0x478>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d06d      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a80      	ldr	r2, [pc, #512]	; (80045f4 <HAL_DMA_Start_IT+0x47c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d068      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a7f      	ldr	r2, [pc, #508]	; (80045f8 <HAL_DMA_Start_IT+0x480>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d063      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a7d      	ldr	r2, [pc, #500]	; (80045fc <HAL_DMA_Start_IT+0x484>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d05e      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a7c      	ldr	r2, [pc, #496]	; (8004600 <HAL_DMA_Start_IT+0x488>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d059      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a7a      	ldr	r2, [pc, #488]	; (8004604 <HAL_DMA_Start_IT+0x48c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d054      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a79      	ldr	r2, [pc, #484]	; (8004608 <HAL_DMA_Start_IT+0x490>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d04f      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a77      	ldr	r2, [pc, #476]	; (800460c <HAL_DMA_Start_IT+0x494>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d04a      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a76      	ldr	r2, [pc, #472]	; (8004610 <HAL_DMA_Start_IT+0x498>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d045      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a74      	ldr	r2, [pc, #464]	; (8004614 <HAL_DMA_Start_IT+0x49c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d040      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a73      	ldr	r2, [pc, #460]	; (8004618 <HAL_DMA_Start_IT+0x4a0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d03b      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a71      	ldr	r2, [pc, #452]	; (800461c <HAL_DMA_Start_IT+0x4a4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d036      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a70      	ldr	r2, [pc, #448]	; (8004620 <HAL_DMA_Start_IT+0x4a8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d031      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a6e      	ldr	r2, [pc, #440]	; (8004624 <HAL_DMA_Start_IT+0x4ac>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d02c      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6d      	ldr	r2, [pc, #436]	; (8004628 <HAL_DMA_Start_IT+0x4b0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d027      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a6b      	ldr	r2, [pc, #428]	; (800462c <HAL_DMA_Start_IT+0x4b4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d022      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a6a      	ldr	r2, [pc, #424]	; (8004630 <HAL_DMA_Start_IT+0x4b8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d01d      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a68      	ldr	r2, [pc, #416]	; (8004634 <HAL_DMA_Start_IT+0x4bc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d018      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a67      	ldr	r2, [pc, #412]	; (8004638 <HAL_DMA_Start_IT+0x4c0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d013      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a65      	ldr	r2, [pc, #404]	; (800463c <HAL_DMA_Start_IT+0x4c4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a64      	ldr	r2, [pc, #400]	; (8004640 <HAL_DMA_Start_IT+0x4c8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d009      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a62      	ldr	r2, [pc, #392]	; (8004644 <HAL_DMA_Start_IT+0x4cc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_DMA_Start_IT+0x350>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a61      	ldr	r2, [pc, #388]	; (8004648 <HAL_DMA_Start_IT+0x4d0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <HAL_DMA_Start_IT+0x354>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_DMA_Start_IT+0x356>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01a      	beq.n	8004508 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004506:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a37      	ldr	r2, [pc, #220]	; (80045ec <HAL_DMA_Start_IT+0x474>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d04a      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a36      	ldr	r2, [pc, #216]	; (80045f0 <HAL_DMA_Start_IT+0x478>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d045      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a34      	ldr	r2, [pc, #208]	; (80045f4 <HAL_DMA_Start_IT+0x47c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d040      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a33      	ldr	r2, [pc, #204]	; (80045f8 <HAL_DMA_Start_IT+0x480>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d03b      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a31      	ldr	r2, [pc, #196]	; (80045fc <HAL_DMA_Start_IT+0x484>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d036      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a30      	ldr	r2, [pc, #192]	; (8004600 <HAL_DMA_Start_IT+0x488>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d031      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2e      	ldr	r2, [pc, #184]	; (8004604 <HAL_DMA_Start_IT+0x48c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d02c      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <HAL_DMA_Start_IT+0x490>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d027      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2b      	ldr	r2, [pc, #172]	; (800460c <HAL_DMA_Start_IT+0x494>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <HAL_DMA_Start_IT+0x498>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01d      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a28      	ldr	r2, [pc, #160]	; (8004614 <HAL_DMA_Start_IT+0x49c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a27      	ldr	r2, [pc, #156]	; (8004618 <HAL_DMA_Start_IT+0x4a0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a25      	ldr	r2, [pc, #148]	; (800461c <HAL_DMA_Start_IT+0x4a4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a24      	ldr	r2, [pc, #144]	; (8004620 <HAL_DMA_Start_IT+0x4a8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a22      	ldr	r2, [pc, #136]	; (8004624 <HAL_DMA_Start_IT+0x4ac>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_DMA_Start_IT+0x430>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <HAL_DMA_Start_IT+0x4b0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d108      	bne.n	80045ba <HAL_DMA_Start_IT+0x442>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e012      	b.n	80045e0 <HAL_DMA_Start_IT+0x468>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e009      	b.n	80045e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40020010 	.word	0x40020010
 80045f0:	40020028 	.word	0x40020028
 80045f4:	40020040 	.word	0x40020040
 80045f8:	40020058 	.word	0x40020058
 80045fc:	40020070 	.word	0x40020070
 8004600:	40020088 	.word	0x40020088
 8004604:	400200a0 	.word	0x400200a0
 8004608:	400200b8 	.word	0x400200b8
 800460c:	40020410 	.word	0x40020410
 8004610:	40020428 	.word	0x40020428
 8004614:	40020440 	.word	0x40020440
 8004618:	40020458 	.word	0x40020458
 800461c:	40020470 	.word	0x40020470
 8004620:	40020488 	.word	0x40020488
 8004624:	400204a0 	.word	0x400204a0
 8004628:	400204b8 	.word	0x400204b8
 800462c:	58025408 	.word	0x58025408
 8004630:	5802541c 	.word	0x5802541c
 8004634:	58025430 	.word	0x58025430
 8004638:	58025444 	.word	0x58025444
 800463c:	58025458 	.word	0x58025458
 8004640:	5802546c 	.word	0x5802546c
 8004644:	58025480 	.word	0x58025480
 8004648:	58025494 	.word	0x58025494

0800464c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004654:	f7fd f9be 	bl	80019d4 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e2dc      	b.n	8004c1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d008      	beq.n	8004682 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e2cd      	b.n	8004c1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a76      	ldr	r2, [pc, #472]	; (8004860 <HAL_DMA_Abort+0x214>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d04a      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a74      	ldr	r2, [pc, #464]	; (8004864 <HAL_DMA_Abort+0x218>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d045      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	; (8004868 <HAL_DMA_Abort+0x21c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d040      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a71      	ldr	r2, [pc, #452]	; (800486c <HAL_DMA_Abort+0x220>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d03b      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a70      	ldr	r2, [pc, #448]	; (8004870 <HAL_DMA_Abort+0x224>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d036      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6e      	ldr	r2, [pc, #440]	; (8004874 <HAL_DMA_Abort+0x228>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d031      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6d      	ldr	r2, [pc, #436]	; (8004878 <HAL_DMA_Abort+0x22c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d02c      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6b      	ldr	r2, [pc, #428]	; (800487c <HAL_DMA_Abort+0x230>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d027      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6a      	ldr	r2, [pc, #424]	; (8004880 <HAL_DMA_Abort+0x234>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d022      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_DMA_Abort+0x238>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01d      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a67      	ldr	r2, [pc, #412]	; (8004888 <HAL_DMA_Abort+0x23c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d018      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a65      	ldr	r2, [pc, #404]	; (800488c <HAL_DMA_Abort+0x240>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a64      	ldr	r2, [pc, #400]	; (8004890 <HAL_DMA_Abort+0x244>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00e      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a62      	ldr	r2, [pc, #392]	; (8004894 <HAL_DMA_Abort+0x248>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a61      	ldr	r2, [pc, #388]	; (8004898 <HAL_DMA_Abort+0x24c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_DMA_Abort+0xd6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5f      	ldr	r2, [pc, #380]	; (800489c <HAL_DMA_Abort+0x250>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <HAL_DMA_Abort+0xda>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_DMA_Abort+0xdc>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 021e 	bic.w	r2, r2, #30
 800473a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800474a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e00a      	b.n	800476a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 020e 	bic.w	r2, r2, #14
 8004762:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3c      	ldr	r2, [pc, #240]	; (8004860 <HAL_DMA_Abort+0x214>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d072      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3a      	ldr	r2, [pc, #232]	; (8004864 <HAL_DMA_Abort+0x218>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d06d      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a39      	ldr	r2, [pc, #228]	; (8004868 <HAL_DMA_Abort+0x21c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d068      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a37      	ldr	r2, [pc, #220]	; (800486c <HAL_DMA_Abort+0x220>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d063      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a36      	ldr	r2, [pc, #216]	; (8004870 <HAL_DMA_Abort+0x224>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d05e      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a34      	ldr	r2, [pc, #208]	; (8004874 <HAL_DMA_Abort+0x228>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d059      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a33      	ldr	r2, [pc, #204]	; (8004878 <HAL_DMA_Abort+0x22c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d054      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a31      	ldr	r2, [pc, #196]	; (800487c <HAL_DMA_Abort+0x230>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d04f      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a30      	ldr	r2, [pc, #192]	; (8004880 <HAL_DMA_Abort+0x234>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d04a      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2e      	ldr	r2, [pc, #184]	; (8004884 <HAL_DMA_Abort+0x238>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d045      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2d      	ldr	r2, [pc, #180]	; (8004888 <HAL_DMA_Abort+0x23c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d040      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2b      	ldr	r2, [pc, #172]	; (800488c <HAL_DMA_Abort+0x240>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d03b      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <HAL_DMA_Abort+0x244>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d036      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a28      	ldr	r2, [pc, #160]	; (8004894 <HAL_DMA_Abort+0x248>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d031      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a27      	ldr	r2, [pc, #156]	; (8004898 <HAL_DMA_Abort+0x24c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d02c      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <HAL_DMA_Abort+0x250>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d027      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <HAL_DMA_Abort+0x254>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d022      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <HAL_DMA_Abort+0x258>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01d      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <HAL_DMA_Abort+0x25c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <HAL_DMA_Abort+0x260>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <HAL_DMA_Abort+0x264>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_DMA_Abort+0x268>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_DMA_Abort+0x26c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_DMA_Abort+0x20e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <HAL_DMA_Abort+0x270>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d132      	bne.n	80048c0 <HAL_DMA_Abort+0x274>
 800485a:	2301      	movs	r3, #1
 800485c:	e031      	b.n	80048c2 <HAL_DMA_Abort+0x276>
 800485e:	bf00      	nop
 8004860:	40020010 	.word	0x40020010
 8004864:	40020028 	.word	0x40020028
 8004868:	40020040 	.word	0x40020040
 800486c:	40020058 	.word	0x40020058
 8004870:	40020070 	.word	0x40020070
 8004874:	40020088 	.word	0x40020088
 8004878:	400200a0 	.word	0x400200a0
 800487c:	400200b8 	.word	0x400200b8
 8004880:	40020410 	.word	0x40020410
 8004884:	40020428 	.word	0x40020428
 8004888:	40020440 	.word	0x40020440
 800488c:	40020458 	.word	0x40020458
 8004890:	40020470 	.word	0x40020470
 8004894:	40020488 	.word	0x40020488
 8004898:	400204a0 	.word	0x400204a0
 800489c:	400204b8 	.word	0x400204b8
 80048a0:	58025408 	.word	0x58025408
 80048a4:	5802541c 	.word	0x5802541c
 80048a8:	58025430 	.word	0x58025430
 80048ac:	58025444 	.word	0x58025444
 80048b0:	58025458 	.word	0x58025458
 80048b4:	5802546c 	.word	0x5802546c
 80048b8:	58025480 	.word	0x58025480
 80048bc:	58025494 	.word	0x58025494
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a6d      	ldr	r2, [pc, #436]	; (8004a90 <HAL_DMA_Abort+0x444>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d04a      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a6b      	ldr	r2, [pc, #428]	; (8004a94 <HAL_DMA_Abort+0x448>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d045      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <HAL_DMA_Abort+0x44c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d040      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a68      	ldr	r2, [pc, #416]	; (8004a9c <HAL_DMA_Abort+0x450>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d03b      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a67      	ldr	r2, [pc, #412]	; (8004aa0 <HAL_DMA_Abort+0x454>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d036      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a65      	ldr	r2, [pc, #404]	; (8004aa4 <HAL_DMA_Abort+0x458>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d031      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a64      	ldr	r2, [pc, #400]	; (8004aa8 <HAL_DMA_Abort+0x45c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d02c      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a62      	ldr	r2, [pc, #392]	; (8004aac <HAL_DMA_Abort+0x460>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d027      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a61      	ldr	r2, [pc, #388]	; (8004ab0 <HAL_DMA_Abort+0x464>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d022      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a5f      	ldr	r2, [pc, #380]	; (8004ab4 <HAL_DMA_Abort+0x468>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01d      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a5e      	ldr	r2, [pc, #376]	; (8004ab8 <HAL_DMA_Abort+0x46c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d018      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a5c      	ldr	r2, [pc, #368]	; (8004abc <HAL_DMA_Abort+0x470>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a5b      	ldr	r2, [pc, #364]	; (8004ac0 <HAL_DMA_Abort+0x474>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a59      	ldr	r2, [pc, #356]	; (8004ac4 <HAL_DMA_Abort+0x478>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d009      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a58      	ldr	r2, [pc, #352]	; (8004ac8 <HAL_DMA_Abort+0x47c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_DMA_Abort+0x32a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a56      	ldr	r2, [pc, #344]	; (8004acc <HAL_DMA_Abort+0x480>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d108      	bne.n	8004988 <HAL_DMA_Abort+0x33c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e007      	b.n	8004998 <HAL_DMA_Abort+0x34c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004998:	e013      	b.n	80049c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800499a:	f7fd f81b 	bl	80019d4 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b05      	cmp	r3, #5
 80049a6:	d90c      	bls.n	80049c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2203      	movs	r2, #3
 80049b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e12d      	b.n	8004c1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e5      	bne.n	800499a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2f      	ldr	r2, [pc, #188]	; (8004a90 <HAL_DMA_Abort+0x444>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d04a      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2d      	ldr	r2, [pc, #180]	; (8004a94 <HAL_DMA_Abort+0x448>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d045      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2c      	ldr	r2, [pc, #176]	; (8004a98 <HAL_DMA_Abort+0x44c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d040      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <HAL_DMA_Abort+0x450>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d03b      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a29      	ldr	r2, [pc, #164]	; (8004aa0 <HAL_DMA_Abort+0x454>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d036      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a27      	ldr	r2, [pc, #156]	; (8004aa4 <HAL_DMA_Abort+0x458>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d031      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a26      	ldr	r2, [pc, #152]	; (8004aa8 <HAL_DMA_Abort+0x45c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d02c      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a24      	ldr	r2, [pc, #144]	; (8004aac <HAL_DMA_Abort+0x460>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d027      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a23      	ldr	r2, [pc, #140]	; (8004ab0 <HAL_DMA_Abort+0x464>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d022      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <HAL_DMA_Abort+0x468>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01d      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <HAL_DMA_Abort+0x46c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d018      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_DMA_Abort+0x470>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <HAL_DMA_Abort+0x474>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00e      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1b      	ldr	r2, [pc, #108]	; (8004ac4 <HAL_DMA_Abort+0x478>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <HAL_DMA_Abort+0x47c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_DMA_Abort+0x422>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a18      	ldr	r2, [pc, #96]	; (8004acc <HAL_DMA_Abort+0x480>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d101      	bne.n	8004a72 <HAL_DMA_Abort+0x426>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_DMA_Abort+0x428>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02b      	beq.n	8004ad0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	223f      	movs	r2, #63	; 0x3f
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	609a      	str	r2, [r3, #8]
 8004a8e:	e02a      	b.n	8004ae6 <HAL_DMA_Abort+0x49a>
 8004a90:	40020010 	.word	0x40020010
 8004a94:	40020028 	.word	0x40020028
 8004a98:	40020040 	.word	0x40020040
 8004a9c:	40020058 	.word	0x40020058
 8004aa0:	40020070 	.word	0x40020070
 8004aa4:	40020088 	.word	0x40020088
 8004aa8:	400200a0 	.word	0x400200a0
 8004aac:	400200b8 	.word	0x400200b8
 8004ab0:	40020410 	.word	0x40020410
 8004ab4:	40020428 	.word	0x40020428
 8004ab8:	40020440 	.word	0x40020440
 8004abc:	40020458 	.word	0x40020458
 8004ac0:	40020470 	.word	0x40020470
 8004ac4:	40020488 	.word	0x40020488
 8004ac8:	400204a0 	.word	0x400204a0
 8004acc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2201      	movs	r2, #1
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a4f      	ldr	r2, [pc, #316]	; (8004c28 <HAL_DMA_Abort+0x5dc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d072      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a4d      	ldr	r2, [pc, #308]	; (8004c2c <HAL_DMA_Abort+0x5e0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d06d      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a4c      	ldr	r2, [pc, #304]	; (8004c30 <HAL_DMA_Abort+0x5e4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d068      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <HAL_DMA_Abort+0x5e8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d063      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a49      	ldr	r2, [pc, #292]	; (8004c38 <HAL_DMA_Abort+0x5ec>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d05e      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a47      	ldr	r2, [pc, #284]	; (8004c3c <HAL_DMA_Abort+0x5f0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d059      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a46      	ldr	r2, [pc, #280]	; (8004c40 <HAL_DMA_Abort+0x5f4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d054      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a44      	ldr	r2, [pc, #272]	; (8004c44 <HAL_DMA_Abort+0x5f8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04f      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a43      	ldr	r2, [pc, #268]	; (8004c48 <HAL_DMA_Abort+0x5fc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d04a      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a41      	ldr	r2, [pc, #260]	; (8004c4c <HAL_DMA_Abort+0x600>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d045      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a40      	ldr	r2, [pc, #256]	; (8004c50 <HAL_DMA_Abort+0x604>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d040      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a3e      	ldr	r2, [pc, #248]	; (8004c54 <HAL_DMA_Abort+0x608>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d03b      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a3d      	ldr	r2, [pc, #244]	; (8004c58 <HAL_DMA_Abort+0x60c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d036      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a3b      	ldr	r2, [pc, #236]	; (8004c5c <HAL_DMA_Abort+0x610>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a3a      	ldr	r2, [pc, #232]	; (8004c60 <HAL_DMA_Abort+0x614>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d02c      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a38      	ldr	r2, [pc, #224]	; (8004c64 <HAL_DMA_Abort+0x618>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d027      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a37      	ldr	r2, [pc, #220]	; (8004c68 <HAL_DMA_Abort+0x61c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a35      	ldr	r2, [pc, #212]	; (8004c6c <HAL_DMA_Abort+0x620>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a34      	ldr	r2, [pc, #208]	; (8004c70 <HAL_DMA_Abort+0x624>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a32      	ldr	r2, [pc, #200]	; (8004c74 <HAL_DMA_Abort+0x628>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a31      	ldr	r2, [pc, #196]	; (8004c78 <HAL_DMA_Abort+0x62c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a2f      	ldr	r2, [pc, #188]	; (8004c7c <HAL_DMA_Abort+0x630>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2e      	ldr	r2, [pc, #184]	; (8004c80 <HAL_DMA_Abort+0x634>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_DMA_Abort+0x58a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	; (8004c84 <HAL_DMA_Abort+0x638>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <HAL_DMA_Abort+0x58e>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_DMA_Abort+0x590>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004be8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00c      	beq.n	8004c0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40020010 	.word	0x40020010
 8004c2c:	40020028 	.word	0x40020028
 8004c30:	40020040 	.word	0x40020040
 8004c34:	40020058 	.word	0x40020058
 8004c38:	40020070 	.word	0x40020070
 8004c3c:	40020088 	.word	0x40020088
 8004c40:	400200a0 	.word	0x400200a0
 8004c44:	400200b8 	.word	0x400200b8
 8004c48:	40020410 	.word	0x40020410
 8004c4c:	40020428 	.word	0x40020428
 8004c50:	40020440 	.word	0x40020440
 8004c54:	40020458 	.word	0x40020458
 8004c58:	40020470 	.word	0x40020470
 8004c5c:	40020488 	.word	0x40020488
 8004c60:	400204a0 	.word	0x400204a0
 8004c64:	400204b8 	.word	0x400204b8
 8004c68:	58025408 	.word	0x58025408
 8004c6c:	5802541c 	.word	0x5802541c
 8004c70:	58025430 	.word	0x58025430
 8004c74:	58025444 	.word	0x58025444
 8004c78:	58025458 	.word	0x58025458
 8004c7c:	5802546c 	.word	0x5802546c
 8004c80:	58025480 	.word	0x58025480
 8004c84:	58025494 	.word	0x58025494

08004c88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e205      	b.n	80050a6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2280      	movs	r2, #128	; 0x80
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e1fa      	b.n	80050a6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a8c      	ldr	r2, [pc, #560]	; (8004ee8 <HAL_DMA_Abort_IT+0x260>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d04a      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a8b      	ldr	r2, [pc, #556]	; (8004eec <HAL_DMA_Abort_IT+0x264>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d045      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a89      	ldr	r2, [pc, #548]	; (8004ef0 <HAL_DMA_Abort_IT+0x268>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d040      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a88      	ldr	r2, [pc, #544]	; (8004ef4 <HAL_DMA_Abort_IT+0x26c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d03b      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a86      	ldr	r2, [pc, #536]	; (8004ef8 <HAL_DMA_Abort_IT+0x270>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d036      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a85      	ldr	r2, [pc, #532]	; (8004efc <HAL_DMA_Abort_IT+0x274>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d031      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a83      	ldr	r2, [pc, #524]	; (8004f00 <HAL_DMA_Abort_IT+0x278>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d02c      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a82      	ldr	r2, [pc, #520]	; (8004f04 <HAL_DMA_Abort_IT+0x27c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d027      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a80      	ldr	r2, [pc, #512]	; (8004f08 <HAL_DMA_Abort_IT+0x280>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d022      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a7f      	ldr	r2, [pc, #508]	; (8004f0c <HAL_DMA_Abort_IT+0x284>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d01d      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a7d      	ldr	r2, [pc, #500]	; (8004f10 <HAL_DMA_Abort_IT+0x288>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d018      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7c      	ldr	r2, [pc, #496]	; (8004f14 <HAL_DMA_Abort_IT+0x28c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a7a      	ldr	r2, [pc, #488]	; (8004f18 <HAL_DMA_Abort_IT+0x290>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00e      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a79      	ldr	r2, [pc, #484]	; (8004f1c <HAL_DMA_Abort_IT+0x294>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a77      	ldr	r2, [pc, #476]	; (8004f20 <HAL_DMA_Abort_IT+0x298>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xc8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a76      	ldr	r2, [pc, #472]	; (8004f24 <HAL_DMA_Abort_IT+0x29c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_DMA_Abort_IT+0xcc>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <HAL_DMA_Abort_IT+0xce>
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d065      	beq.n	8004e26 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a60      	ldr	r2, [pc, #384]	; (8004ee8 <HAL_DMA_Abort_IT+0x260>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d04a      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a5e      	ldr	r2, [pc, #376]	; (8004eec <HAL_DMA_Abort_IT+0x264>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d045      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a5d      	ldr	r2, [pc, #372]	; (8004ef0 <HAL_DMA_Abort_IT+0x268>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d040      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a5b      	ldr	r2, [pc, #364]	; (8004ef4 <HAL_DMA_Abort_IT+0x26c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d03b      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a5a      	ldr	r2, [pc, #360]	; (8004ef8 <HAL_DMA_Abort_IT+0x270>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d036      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a58      	ldr	r2, [pc, #352]	; (8004efc <HAL_DMA_Abort_IT+0x274>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d031      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a57      	ldr	r2, [pc, #348]	; (8004f00 <HAL_DMA_Abort_IT+0x278>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d02c      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a55      	ldr	r2, [pc, #340]	; (8004f04 <HAL_DMA_Abort_IT+0x27c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d027      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a54      	ldr	r2, [pc, #336]	; (8004f08 <HAL_DMA_Abort_IT+0x280>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d022      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a52      	ldr	r2, [pc, #328]	; (8004f0c <HAL_DMA_Abort_IT+0x284>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01d      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a51      	ldr	r2, [pc, #324]	; (8004f10 <HAL_DMA_Abort_IT+0x288>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d018      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a4f      	ldr	r2, [pc, #316]	; (8004f14 <HAL_DMA_Abort_IT+0x28c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a4e      	ldr	r2, [pc, #312]	; (8004f18 <HAL_DMA_Abort_IT+0x290>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a4c      	ldr	r2, [pc, #304]	; (8004f1c <HAL_DMA_Abort_IT+0x294>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a4b      	ldr	r2, [pc, #300]	; (8004f20 <HAL_DMA_Abort_IT+0x298>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x17a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a49      	ldr	r2, [pc, #292]	; (8004f24 <HAL_DMA_Abort_IT+0x29c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <HAL_DMA_Abort_IT+0x18c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e147      	b.n	80050a4 <HAL_DMA_Abort_IT+0x41c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e13e      	b.n	80050a4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 020e 	bic.w	r2, r2, #14
 8004e34:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2b      	ldr	r2, [pc, #172]	; (8004ee8 <HAL_DMA_Abort_IT+0x260>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d04a      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a29      	ldr	r2, [pc, #164]	; (8004eec <HAL_DMA_Abort_IT+0x264>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d045      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a28      	ldr	r2, [pc, #160]	; (8004ef0 <HAL_DMA_Abort_IT+0x268>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d040      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <HAL_DMA_Abort_IT+0x26c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d03b      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <HAL_DMA_Abort_IT+0x270>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d036      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a23      	ldr	r2, [pc, #140]	; (8004efc <HAL_DMA_Abort_IT+0x274>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d031      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <HAL_DMA_Abort_IT+0x278>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d02c      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <HAL_DMA_Abort_IT+0x27c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d027      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <HAL_DMA_Abort_IT+0x280>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d022      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <HAL_DMA_Abort_IT+0x284>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01d      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1c      	ldr	r2, [pc, #112]	; (8004f10 <HAL_DMA_Abort_IT+0x288>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d018      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <HAL_DMA_Abort_IT+0x28c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <HAL_DMA_Abort_IT+0x290>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <HAL_DMA_Abort_IT+0x294>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <HAL_DMA_Abort_IT+0x298>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_DMA_Abort_IT+0x24e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <HAL_DMA_Abort_IT+0x29c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d128      	bne.n	8004f28 <HAL_DMA_Abort_IT+0x2a0>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e027      	b.n	8004f38 <HAL_DMA_Abort_IT+0x2b0>
 8004ee8:	40020010 	.word	0x40020010
 8004eec:	40020028 	.word	0x40020028
 8004ef0:	40020040 	.word	0x40020040
 8004ef4:	40020058 	.word	0x40020058
 8004ef8:	40020070 	.word	0x40020070
 8004efc:	40020088 	.word	0x40020088
 8004f00:	400200a0 	.word	0x400200a0
 8004f04:	400200b8 	.word	0x400200b8
 8004f08:	40020410 	.word	0x40020410
 8004f0c:	40020428 	.word	0x40020428
 8004f10:	40020440 	.word	0x40020440
 8004f14:	40020458 	.word	0x40020458
 8004f18:	40020470 	.word	0x40020470
 8004f1c:	40020488 	.word	0x40020488
 8004f20:	400204a0 	.word	0x400204a0
 8004f24:	400204b8 	.word	0x400204b8
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5c      	ldr	r2, [pc, #368]	; (80050b0 <HAL_DMA_Abort_IT+0x428>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d072      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a5b      	ldr	r2, [pc, #364]	; (80050b4 <HAL_DMA_Abort_IT+0x42c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d06d      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a59      	ldr	r2, [pc, #356]	; (80050b8 <HAL_DMA_Abort_IT+0x430>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d068      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a58      	ldr	r2, [pc, #352]	; (80050bc <HAL_DMA_Abort_IT+0x434>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d063      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a56      	ldr	r2, [pc, #344]	; (80050c0 <HAL_DMA_Abort_IT+0x438>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d05e      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a55      	ldr	r2, [pc, #340]	; (80050c4 <HAL_DMA_Abort_IT+0x43c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d059      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a53      	ldr	r2, [pc, #332]	; (80050c8 <HAL_DMA_Abort_IT+0x440>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d054      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a52      	ldr	r2, [pc, #328]	; (80050cc <HAL_DMA_Abort_IT+0x444>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d04f      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a50      	ldr	r2, [pc, #320]	; (80050d0 <HAL_DMA_Abort_IT+0x448>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d04a      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a4f      	ldr	r2, [pc, #316]	; (80050d4 <HAL_DMA_Abort_IT+0x44c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d045      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a4d      	ldr	r2, [pc, #308]	; (80050d8 <HAL_DMA_Abort_IT+0x450>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d040      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4c      	ldr	r2, [pc, #304]	; (80050dc <HAL_DMA_Abort_IT+0x454>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d03b      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a4a      	ldr	r2, [pc, #296]	; (80050e0 <HAL_DMA_Abort_IT+0x458>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d036      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a49      	ldr	r2, [pc, #292]	; (80050e4 <HAL_DMA_Abort_IT+0x45c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d031      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a47      	ldr	r2, [pc, #284]	; (80050e8 <HAL_DMA_Abort_IT+0x460>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d02c      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a46      	ldr	r2, [pc, #280]	; (80050ec <HAL_DMA_Abort_IT+0x464>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d027      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a44      	ldr	r2, [pc, #272]	; (80050f0 <HAL_DMA_Abort_IT+0x468>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d022      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a43      	ldr	r2, [pc, #268]	; (80050f4 <HAL_DMA_Abort_IT+0x46c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d01d      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a41      	ldr	r2, [pc, #260]	; (80050f8 <HAL_DMA_Abort_IT+0x470>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a40      	ldr	r2, [pc, #256]	; (80050fc <HAL_DMA_Abort_IT+0x474>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a3e      	ldr	r2, [pc, #248]	; (8005100 <HAL_DMA_Abort_IT+0x478>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a3d      	ldr	r2, [pc, #244]	; (8005104 <HAL_DMA_Abort_IT+0x47c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a3b      	ldr	r2, [pc, #236]	; (8005108 <HAL_DMA_Abort_IT+0x480>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_DMA_Abort_IT+0x3a0>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a3a      	ldr	r2, [pc, #232]	; (800510c <HAL_DMA_Abort_IT+0x484>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <HAL_DMA_Abort_IT+0x3a4>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <HAL_DMA_Abort_IT+0x3a6>
 800502c:	2300      	movs	r3, #0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d028      	beq.n	8005084 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005040:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	2201      	movs	r2, #1
 8005052:	409a      	lsls	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005060:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005078:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005082:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40020010 	.word	0x40020010
 80050b4:	40020028 	.word	0x40020028
 80050b8:	40020040 	.word	0x40020040
 80050bc:	40020058 	.word	0x40020058
 80050c0:	40020070 	.word	0x40020070
 80050c4:	40020088 	.word	0x40020088
 80050c8:	400200a0 	.word	0x400200a0
 80050cc:	400200b8 	.word	0x400200b8
 80050d0:	40020410 	.word	0x40020410
 80050d4:	40020428 	.word	0x40020428
 80050d8:	40020440 	.word	0x40020440
 80050dc:	40020458 	.word	0x40020458
 80050e0:	40020470 	.word	0x40020470
 80050e4:	40020488 	.word	0x40020488
 80050e8:	400204a0 	.word	0x400204a0
 80050ec:	400204b8 	.word	0x400204b8
 80050f0:	58025408 	.word	0x58025408
 80050f4:	5802541c 	.word	0x5802541c
 80050f8:	58025430 	.word	0x58025430
 80050fc:	58025444 	.word	0x58025444
 8005100:	58025458 	.word	0x58025458
 8005104:	5802546c 	.word	0x5802546c
 8005108:	58025480 	.word	0x58025480
 800510c:	58025494 	.word	0x58025494

08005110 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800511c:	4b67      	ldr	r3, [pc, #412]	; (80052bc <HAL_DMA_IRQHandler+0x1ac>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a67      	ldr	r2, [pc, #412]	; (80052c0 <HAL_DMA_IRQHandler+0x1b0>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	0a9b      	lsrs	r3, r3, #10
 8005128:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a5f      	ldr	r2, [pc, #380]	; (80052c4 <HAL_DMA_IRQHandler+0x1b4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d04a      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <HAL_DMA_IRQHandler+0x1b8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d045      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a5c      	ldr	r2, [pc, #368]	; (80052cc <HAL_DMA_IRQHandler+0x1bc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d040      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a5a      	ldr	r2, [pc, #360]	; (80052d0 <HAL_DMA_IRQHandler+0x1c0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d03b      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a59      	ldr	r2, [pc, #356]	; (80052d4 <HAL_DMA_IRQHandler+0x1c4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d036      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <HAL_DMA_IRQHandler+0x1c8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a56      	ldr	r2, [pc, #344]	; (80052dc <HAL_DMA_IRQHandler+0x1cc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d02c      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a54      	ldr	r2, [pc, #336]	; (80052e0 <HAL_DMA_IRQHandler+0x1d0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d027      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a53      	ldr	r2, [pc, #332]	; (80052e4 <HAL_DMA_IRQHandler+0x1d4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d022      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a51      	ldr	r2, [pc, #324]	; (80052e8 <HAL_DMA_IRQHandler+0x1d8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a50      	ldr	r2, [pc, #320]	; (80052ec <HAL_DMA_IRQHandler+0x1dc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a4e      	ldr	r2, [pc, #312]	; (80052f0 <HAL_DMA_IRQHandler+0x1e0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a4d      	ldr	r2, [pc, #308]	; (80052f4 <HAL_DMA_IRQHandler+0x1e4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a4b      	ldr	r2, [pc, #300]	; (80052f8 <HAL_DMA_IRQHandler+0x1e8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4a      	ldr	r2, [pc, #296]	; (80052fc <HAL_DMA_IRQHandler+0x1ec>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xd2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a48      	ldr	r2, [pc, #288]	; (8005300 <HAL_DMA_IRQHandler+0x1f0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d101      	bne.n	80051e6 <HAL_DMA_IRQHandler+0xd6>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <HAL_DMA_IRQHandler+0xd8>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 842b 	beq.w	8005a44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	2208      	movs	r2, #8
 80051f8:	409a      	lsls	r2, r3
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80a2 	beq.w	8005348 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2e      	ldr	r2, [pc, #184]	; (80052c4 <HAL_DMA_IRQHandler+0x1b4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d04a      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <HAL_DMA_IRQHandler+0x1b8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d045      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <HAL_DMA_IRQHandler+0x1bc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d040      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2a      	ldr	r2, [pc, #168]	; (80052d0 <HAL_DMA_IRQHandler+0x1c0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d03b      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <HAL_DMA_IRQHandler+0x1c4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d036      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <HAL_DMA_IRQHandler+0x1c8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d031      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a25      	ldr	r2, [pc, #148]	; (80052dc <HAL_DMA_IRQHandler+0x1cc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d02c      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a24      	ldr	r2, [pc, #144]	; (80052e0 <HAL_DMA_IRQHandler+0x1d0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d027      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <HAL_DMA_IRQHandler+0x1d4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d022      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <HAL_DMA_IRQHandler+0x1d8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d01d      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <HAL_DMA_IRQHandler+0x1dc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d018      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <HAL_DMA_IRQHandler+0x1e0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <HAL_DMA_IRQHandler+0x1e4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <HAL_DMA_IRQHandler+0x1e8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a19      	ldr	r2, [pc, #100]	; (80052fc <HAL_DMA_IRQHandler+0x1ec>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x194>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_DMA_IRQHandler+0x1f0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d12f      	bne.n	8005304 <HAL_DMA_IRQHandler+0x1f4>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf14      	ite	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	2300      	moveq	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	e02e      	b.n	8005318 <HAL_DMA_IRQHandler+0x208>
 80052ba:	bf00      	nop
 80052bc:	24000000 	.word	0x24000000
 80052c0:	1b4e81b5 	.word	0x1b4e81b5
 80052c4:	40020010 	.word	0x40020010
 80052c8:	40020028 	.word	0x40020028
 80052cc:	40020040 	.word	0x40020040
 80052d0:	40020058 	.word	0x40020058
 80052d4:	40020070 	.word	0x40020070
 80052d8:	40020088 	.word	0x40020088
 80052dc:	400200a0 	.word	0x400200a0
 80052e0:	400200b8 	.word	0x400200b8
 80052e4:	40020410 	.word	0x40020410
 80052e8:	40020428 	.word	0x40020428
 80052ec:	40020440 	.word	0x40020440
 80052f0:	40020458 	.word	0x40020458
 80052f4:	40020470 	.word	0x40020470
 80052f8:	40020488 	.word	0x40020488
 80052fc:	400204a0 	.word	0x400204a0
 8005300:	400204b8 	.word	0x400204b8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	bf14      	ite	ne
 8005312:	2301      	movne	r3, #1
 8005314:	2300      	moveq	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d015      	beq.n	8005348 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0204 	bic.w	r2, r2, #4
 800532a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2208      	movs	r2, #8
 8005336:	409a      	lsls	r2, r3
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f043 0201 	orr.w	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	fa22 f303 	lsr.w	r3, r2, r3
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d06e      	beq.n	800543c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a69      	ldr	r2, [pc, #420]	; (8005508 <HAL_DMA_IRQHandler+0x3f8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d04a      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a67      	ldr	r2, [pc, #412]	; (800550c <HAL_DMA_IRQHandler+0x3fc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d045      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a66      	ldr	r2, [pc, #408]	; (8005510 <HAL_DMA_IRQHandler+0x400>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d040      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a64      	ldr	r2, [pc, #400]	; (8005514 <HAL_DMA_IRQHandler+0x404>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d03b      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a63      	ldr	r2, [pc, #396]	; (8005518 <HAL_DMA_IRQHandler+0x408>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d036      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a61      	ldr	r2, [pc, #388]	; (800551c <HAL_DMA_IRQHandler+0x40c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d031      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a60      	ldr	r2, [pc, #384]	; (8005520 <HAL_DMA_IRQHandler+0x410>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d02c      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5e      	ldr	r2, [pc, #376]	; (8005524 <HAL_DMA_IRQHandler+0x414>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d027      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a5d      	ldr	r2, [pc, #372]	; (8005528 <HAL_DMA_IRQHandler+0x418>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5b      	ldr	r2, [pc, #364]	; (800552c <HAL_DMA_IRQHandler+0x41c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01d      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a5a      	ldr	r2, [pc, #360]	; (8005530 <HAL_DMA_IRQHandler+0x420>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a58      	ldr	r2, [pc, #352]	; (8005534 <HAL_DMA_IRQHandler+0x424>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a57      	ldr	r2, [pc, #348]	; (8005538 <HAL_DMA_IRQHandler+0x428>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a55      	ldr	r2, [pc, #340]	; (800553c <HAL_DMA_IRQHandler+0x42c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a54      	ldr	r2, [pc, #336]	; (8005540 <HAL_DMA_IRQHandler+0x430>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2ee>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_DMA_IRQHandler+0x434>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10a      	bne.n	8005414 <HAL_DMA_IRQHandler+0x304>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e003      	b.n	800541c <HAL_DMA_IRQHandler+0x30c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2300      	movs	r3, #0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2201      	movs	r2, #1
 800542a:	409a      	lsls	r2, r3
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	f043 0202 	orr.w	r2, r3, #2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2204      	movs	r2, #4
 8005446:	409a      	lsls	r2, r3
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 808f 	beq.w	8005570 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <HAL_DMA_IRQHandler+0x3f8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04a      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2a      	ldr	r2, [pc, #168]	; (800550c <HAL_DMA_IRQHandler+0x3fc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d045      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a29      	ldr	r2, [pc, #164]	; (8005510 <HAL_DMA_IRQHandler+0x400>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d040      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a27      	ldr	r2, [pc, #156]	; (8005514 <HAL_DMA_IRQHandler+0x404>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d03b      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a26      	ldr	r2, [pc, #152]	; (8005518 <HAL_DMA_IRQHandler+0x408>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d036      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a24      	ldr	r2, [pc, #144]	; (800551c <HAL_DMA_IRQHandler+0x40c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a23      	ldr	r2, [pc, #140]	; (8005520 <HAL_DMA_IRQHandler+0x410>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d02c      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a21      	ldr	r2, [pc, #132]	; (8005524 <HAL_DMA_IRQHandler+0x414>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d027      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a20      	ldr	r2, [pc, #128]	; (8005528 <HAL_DMA_IRQHandler+0x418>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1e      	ldr	r2, [pc, #120]	; (800552c <HAL_DMA_IRQHandler+0x41c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1d      	ldr	r2, [pc, #116]	; (8005530 <HAL_DMA_IRQHandler+0x420>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_DMA_IRQHandler+0x424>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1a      	ldr	r2, [pc, #104]	; (8005538 <HAL_DMA_IRQHandler+0x428>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_DMA_IRQHandler+0x42c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a17      	ldr	r2, [pc, #92]	; (8005540 <HAL_DMA_IRQHandler+0x430>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x3e2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a15      	ldr	r2, [pc, #84]	; (8005544 <HAL_DMA_IRQHandler+0x434>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d12a      	bne.n	8005548 <HAL_DMA_IRQHandler+0x438>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e023      	b.n	8005550 <HAL_DMA_IRQHandler+0x440>
 8005508:	40020010 	.word	0x40020010
 800550c:	40020028 	.word	0x40020028
 8005510:	40020040 	.word	0x40020040
 8005514:	40020058 	.word	0x40020058
 8005518:	40020070 	.word	0x40020070
 800551c:	40020088 	.word	0x40020088
 8005520:	400200a0 	.word	0x400200a0
 8005524:	400200b8 	.word	0x400200b8
 8005528:	40020410 	.word	0x40020410
 800552c:	40020428 	.word	0x40020428
 8005530:	40020440 	.word	0x40020440
 8005534:	40020458 	.word	0x40020458
 8005538:	40020470 	.word	0x40020470
 800553c:	40020488 	.word	0x40020488
 8005540:	400204a0 	.word	0x400204a0
 8005544:	400204b8 	.word	0x400204b8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	2204      	movs	r2, #4
 800555e:	409a      	lsls	r2, r3
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	f043 0204 	orr.w	r2, r3, #4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005574:	f003 031f 	and.w	r3, r3, #31
 8005578:	2210      	movs	r2, #16
 800557a:	409a      	lsls	r2, r3
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80a6 	beq.w	80056d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a85      	ldr	r2, [pc, #532]	; (80057a0 <HAL_DMA_IRQHandler+0x690>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d04a      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a83      	ldr	r2, [pc, #524]	; (80057a4 <HAL_DMA_IRQHandler+0x694>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d045      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a82      	ldr	r2, [pc, #520]	; (80057a8 <HAL_DMA_IRQHandler+0x698>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d040      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a80      	ldr	r2, [pc, #512]	; (80057ac <HAL_DMA_IRQHandler+0x69c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d03b      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7f      	ldr	r2, [pc, #508]	; (80057b0 <HAL_DMA_IRQHandler+0x6a0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d036      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a7d      	ldr	r2, [pc, #500]	; (80057b4 <HAL_DMA_IRQHandler+0x6a4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d031      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a7c      	ldr	r2, [pc, #496]	; (80057b8 <HAL_DMA_IRQHandler+0x6a8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d02c      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a7a      	ldr	r2, [pc, #488]	; (80057bc <HAL_DMA_IRQHandler+0x6ac>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d027      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a79      	ldr	r2, [pc, #484]	; (80057c0 <HAL_DMA_IRQHandler+0x6b0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d022      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a77      	ldr	r2, [pc, #476]	; (80057c4 <HAL_DMA_IRQHandler+0x6b4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01d      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a76      	ldr	r2, [pc, #472]	; (80057c8 <HAL_DMA_IRQHandler+0x6b8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a74      	ldr	r2, [pc, #464]	; (80057cc <HAL_DMA_IRQHandler+0x6bc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a73      	ldr	r2, [pc, #460]	; (80057d0 <HAL_DMA_IRQHandler+0x6c0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a71      	ldr	r2, [pc, #452]	; (80057d4 <HAL_DMA_IRQHandler+0x6c4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a70      	ldr	r2, [pc, #448]	; (80057d8 <HAL_DMA_IRQHandler+0x6c8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_DMA_IRQHandler+0x516>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a6e      	ldr	r2, [pc, #440]	; (80057dc <HAL_DMA_IRQHandler+0x6cc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10a      	bne.n	800563c <HAL_DMA_IRQHandler+0x52c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e009      	b.n	8005650 <HAL_DMA_IRQHandler+0x540>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d03e      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2210      	movs	r2, #16
 800565e:	409a      	lsls	r2, r3
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d018      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d108      	bne.n	8005692 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d024      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
 8005690:	e01f      	b.n	80056d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01b      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
 80056a2:	e016      	b.n	80056d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0208 	bic.w	r2, r2, #8
 80056c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2220      	movs	r2, #32
 80056dc:	409a      	lsls	r2, r3
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 8110 	beq.w	8005908 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <HAL_DMA_IRQHandler+0x690>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d04a      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <HAL_DMA_IRQHandler+0x694>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d045      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a29      	ldr	r2, [pc, #164]	; (80057a8 <HAL_DMA_IRQHandler+0x698>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d040      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a28      	ldr	r2, [pc, #160]	; (80057ac <HAL_DMA_IRQHandler+0x69c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d03b      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <HAL_DMA_IRQHandler+0x6a0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d036      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <HAL_DMA_IRQHandler+0x6a4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d031      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <HAL_DMA_IRQHandler+0x6a8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02c      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a22      	ldr	r2, [pc, #136]	; (80057bc <HAL_DMA_IRQHandler+0x6ac>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d027      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <HAL_DMA_IRQHandler+0x6b0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d022      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1f      	ldr	r2, [pc, #124]	; (80057c4 <HAL_DMA_IRQHandler+0x6b4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01d      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <HAL_DMA_IRQHandler+0x6b8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <HAL_DMA_IRQHandler+0x6bc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1a      	ldr	r2, [pc, #104]	; (80057d0 <HAL_DMA_IRQHandler+0x6c0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a19      	ldr	r2, [pc, #100]	; (80057d4 <HAL_DMA_IRQHandler+0x6c4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <HAL_DMA_IRQHandler+0x6c8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_DMA_IRQHandler+0x678>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <HAL_DMA_IRQHandler+0x6cc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d12b      	bne.n	80057e0 <HAL_DMA_IRQHandler+0x6d0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	e02a      	b.n	80057f4 <HAL_DMA_IRQHandler+0x6e4>
 800579e:	bf00      	nop
 80057a0:	40020010 	.word	0x40020010
 80057a4:	40020028 	.word	0x40020028
 80057a8:	40020040 	.word	0x40020040
 80057ac:	40020058 	.word	0x40020058
 80057b0:	40020070 	.word	0x40020070
 80057b4:	40020088 	.word	0x40020088
 80057b8:	400200a0 	.word	0x400200a0
 80057bc:	400200b8 	.word	0x400200b8
 80057c0:	40020410 	.word	0x40020410
 80057c4:	40020428 	.word	0x40020428
 80057c8:	40020440 	.word	0x40020440
 80057cc:	40020458 	.word	0x40020458
 80057d0:	40020470 	.word	0x40020470
 80057d4:	40020488 	.word	0x40020488
 80057d8:	400204a0 	.word	0x400204a0
 80057dc:	400204b8 	.word	0x400204b8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8087 	beq.w	8005908 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2220      	movs	r2, #32
 8005804:	409a      	lsls	r2, r3
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b04      	cmp	r3, #4
 8005814:	d139      	bne.n	800588a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0216 	bic.w	r2, r2, #22
 8005824:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005834:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <HAL_DMA_IRQHandler+0x736>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0208 	bic.w	r2, r2, #8
 8005854:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	223f      	movs	r2, #63	; 0x3f
 8005860:	409a      	lsls	r2, r3
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 834a 	beq.w	8005f14 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
          }
          return;
 8005888:	e344      	b.n	8005f14 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d018      	beq.n	80058ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02c      	beq.n	8005908 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
 80058b6:	e027      	b.n	8005908 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d023      	beq.n	8005908 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
 80058c8:	e01e      	b.n	8005908 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10f      	bne.n	80058f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0210 	bic.w	r2, r2, #16
 80058e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8306 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8088 	beq.w	8005a30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a7a      	ldr	r2, [pc, #488]	; (8005b18 <HAL_DMA_IRQHandler+0xa08>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d04a      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a79      	ldr	r2, [pc, #484]	; (8005b1c <HAL_DMA_IRQHandler+0xa0c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d045      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a77      	ldr	r2, [pc, #476]	; (8005b20 <HAL_DMA_IRQHandler+0xa10>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d040      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a76      	ldr	r2, [pc, #472]	; (8005b24 <HAL_DMA_IRQHandler+0xa14>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d03b      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a74      	ldr	r2, [pc, #464]	; (8005b28 <HAL_DMA_IRQHandler+0xa18>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d036      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a73      	ldr	r2, [pc, #460]	; (8005b2c <HAL_DMA_IRQHandler+0xa1c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d031      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a71      	ldr	r2, [pc, #452]	; (8005b30 <HAL_DMA_IRQHandler+0xa20>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d02c      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a70      	ldr	r2, [pc, #448]	; (8005b34 <HAL_DMA_IRQHandler+0xa24>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d027      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a6e      	ldr	r2, [pc, #440]	; (8005b38 <HAL_DMA_IRQHandler+0xa28>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d022      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6d      	ldr	r2, [pc, #436]	; (8005b3c <HAL_DMA_IRQHandler+0xa2c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d01d      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a6b      	ldr	r2, [pc, #428]	; (8005b40 <HAL_DMA_IRQHandler+0xa30>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6a      	ldr	r2, [pc, #424]	; (8005b44 <HAL_DMA_IRQHandler+0xa34>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a68      	ldr	r2, [pc, #416]	; (8005b48 <HAL_DMA_IRQHandler+0xa38>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a67      	ldr	r2, [pc, #412]	; (8005b4c <HAL_DMA_IRQHandler+0xa3c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a65      	ldr	r2, [pc, #404]	; (8005b50 <HAL_DMA_IRQHandler+0xa40>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x8b8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a64      	ldr	r2, [pc, #400]	; (8005b54 <HAL_DMA_IRQHandler+0xa44>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d108      	bne.n	80059da <HAL_DMA_IRQHandler+0x8ca>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e007      	b.n	80059ea <HAL_DMA_IRQHandler+0x8da>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d307      	bcc.n	8005a06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f2      	bne.n	80059ea <HAL_DMA_IRQHandler+0x8da>
 8005a04:	e000      	b.n	8005a08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a06:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2203      	movs	r2, #3
 8005a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a1e:	e003      	b.n	8005a28 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8272 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
 8005a42:	e26c      	b.n	8005f1e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a43      	ldr	r2, [pc, #268]	; (8005b58 <HAL_DMA_IRQHandler+0xa48>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d022      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x984>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a42      	ldr	r2, [pc, #264]	; (8005b5c <HAL_DMA_IRQHandler+0xa4c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d01d      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x984>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a40      	ldr	r2, [pc, #256]	; (8005b60 <HAL_DMA_IRQHandler+0xa50>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d018      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x984>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a3f      	ldr	r2, [pc, #252]	; (8005b64 <HAL_DMA_IRQHandler+0xa54>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d013      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x984>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a3d      	ldr	r2, [pc, #244]	; (8005b68 <HAL_DMA_IRQHandler+0xa58>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00e      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x984>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a3c      	ldr	r2, [pc, #240]	; (8005b6c <HAL_DMA_IRQHandler+0xa5c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d009      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x984>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a3a      	ldr	r2, [pc, #232]	; (8005b70 <HAL_DMA_IRQHandler+0xa60>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d004      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x984>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a39      	ldr	r2, [pc, #228]	; (8005b74 <HAL_DMA_IRQHandler+0xa64>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d101      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x988>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_DMA_IRQHandler+0x98a>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 823f 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80cd 	beq.w	8005c58 <HAL_DMA_IRQHandler+0xb48>
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80c7 	beq.w	8005c58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	409a      	lsls	r2, r3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d049      	beq.n	8005b78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 8210 	beq.w	8005f18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b00:	e20a      	b.n	8005f18 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8206 	beq.w	8005f18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b14:	e200      	b.n	8005f18 <HAL_DMA_IRQHandler+0xe08>
 8005b16:	bf00      	nop
 8005b18:	40020010 	.word	0x40020010
 8005b1c:	40020028 	.word	0x40020028
 8005b20:	40020040 	.word	0x40020040
 8005b24:	40020058 	.word	0x40020058
 8005b28:	40020070 	.word	0x40020070
 8005b2c:	40020088 	.word	0x40020088
 8005b30:	400200a0 	.word	0x400200a0
 8005b34:	400200b8 	.word	0x400200b8
 8005b38:	40020410 	.word	0x40020410
 8005b3c:	40020428 	.word	0x40020428
 8005b40:	40020440 	.word	0x40020440
 8005b44:	40020458 	.word	0x40020458
 8005b48:	40020470 	.word	0x40020470
 8005b4c:	40020488 	.word	0x40020488
 8005b50:	400204a0 	.word	0x400204a0
 8005b54:	400204b8 	.word	0x400204b8
 8005b58:	58025408 	.word	0x58025408
 8005b5c:	5802541c 	.word	0x5802541c
 8005b60:	58025430 	.word	0x58025430
 8005b64:	58025444 	.word	0x58025444
 8005b68:	58025458 	.word	0x58025458
 8005b6c:	5802546c 	.word	0x5802546c
 8005b70:	58025480 	.word	0x58025480
 8005b74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d160      	bne.n	8005c44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a8c      	ldr	r2, [pc, #560]	; (8005db8 <HAL_DMA_IRQHandler+0xca8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a8a      	ldr	r2, [pc, #552]	; (8005dbc <HAL_DMA_IRQHandler+0xcac>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a89      	ldr	r2, [pc, #548]	; (8005dc0 <HAL_DMA_IRQHandler+0xcb0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a87      	ldr	r2, [pc, #540]	; (8005dc4 <HAL_DMA_IRQHandler+0xcb4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a86      	ldr	r2, [pc, #536]	; (8005dc8 <HAL_DMA_IRQHandler+0xcb8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a84      	ldr	r2, [pc, #528]	; (8005dcc <HAL_DMA_IRQHandler+0xcbc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a83      	ldr	r2, [pc, #524]	; (8005dd0 <HAL_DMA_IRQHandler+0xcc0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a81      	ldr	r2, [pc, #516]	; (8005dd4 <HAL_DMA_IRQHandler+0xcc4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a80      	ldr	r2, [pc, #512]	; (8005dd8 <HAL_DMA_IRQHandler+0xcc8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a7e      	ldr	r2, [pc, #504]	; (8005ddc <HAL_DMA_IRQHandler+0xccc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a7d      	ldr	r2, [pc, #500]	; (8005de0 <HAL_DMA_IRQHandler+0xcd0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7b      	ldr	r2, [pc, #492]	; (8005de4 <HAL_DMA_IRQHandler+0xcd4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a7a      	ldr	r2, [pc, #488]	; (8005de8 <HAL_DMA_IRQHandler+0xcd8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a78      	ldr	r2, [pc, #480]	; (8005dec <HAL_DMA_IRQHandler+0xcdc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a77      	ldr	r2, [pc, #476]	; (8005df0 <HAL_DMA_IRQHandler+0xce0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb12>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a75      	ldr	r2, [pc, #468]	; (8005df4 <HAL_DMA_IRQHandler+0xce4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <HAL_DMA_IRQHandler+0xb24>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0208 	bic.w	r2, r2, #8
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e007      	b.n	8005c44 <HAL_DMA_IRQHandler+0xb34>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0204 	bic.w	r2, r2, #4
 8005c42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8165 	beq.w	8005f18 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c56:	e15f      	b.n	8005f18 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2202      	movs	r2, #2
 8005c62:	409a      	lsls	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80c5 	beq.w	8005df8 <HAL_DMA_IRQHandler+0xce8>
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80bf 	beq.w	8005df8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	2202      	movs	r2, #2
 8005c84:	409a      	lsls	r2, r3
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 813a 	beq.w	8005f1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cb0:	e134      	b.n	8005f1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8130 	beq.w	8005f1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cc4:	e12a      	b.n	8005f1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d168      	bne.n	8005da2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a38      	ldr	r2, [pc, #224]	; (8005db8 <HAL_DMA_IRQHandler+0xca8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d04a      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a37      	ldr	r2, [pc, #220]	; (8005dbc <HAL_DMA_IRQHandler+0xcac>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d045      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a35      	ldr	r2, [pc, #212]	; (8005dc0 <HAL_DMA_IRQHandler+0xcb0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d040      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a34      	ldr	r2, [pc, #208]	; (8005dc4 <HAL_DMA_IRQHandler+0xcb4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d03b      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a32      	ldr	r2, [pc, #200]	; (8005dc8 <HAL_DMA_IRQHandler+0xcb8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d036      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a31      	ldr	r2, [pc, #196]	; (8005dcc <HAL_DMA_IRQHandler+0xcbc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d031      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2f      	ldr	r2, [pc, #188]	; (8005dd0 <HAL_DMA_IRQHandler+0xcc0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d02c      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2e      	ldr	r2, [pc, #184]	; (8005dd4 <HAL_DMA_IRQHandler+0xcc4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d027      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2c      	ldr	r2, [pc, #176]	; (8005dd8 <HAL_DMA_IRQHandler+0xcc8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2b      	ldr	r2, [pc, #172]	; (8005ddc <HAL_DMA_IRQHandler+0xccc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d01d      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <HAL_DMA_IRQHandler+0xcd0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <HAL_DMA_IRQHandler+0xcd4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <HAL_DMA_IRQHandler+0xcd8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a25      	ldr	r2, [pc, #148]	; (8005dec <HAL_DMA_IRQHandler+0xcdc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a23      	ldr	r2, [pc, #140]	; (8005df0 <HAL_DMA_IRQHandler+0xce0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_DMA_IRQHandler+0xc60>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <HAL_DMA_IRQHandler+0xce4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <HAL_DMA_IRQHandler+0xc72>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0214 	bic.w	r2, r2, #20
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e007      	b.n	8005d92 <HAL_DMA_IRQHandler+0xc82>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 020a 	bic.w	r2, r2, #10
 8005d90:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80b8 	beq.w	8005f1c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db4:	e0b2      	b.n	8005f1c <HAL_DMA_IRQHandler+0xe0c>
 8005db6:	bf00      	nop
 8005db8:	40020010 	.word	0x40020010
 8005dbc:	40020028 	.word	0x40020028
 8005dc0:	40020040 	.word	0x40020040
 8005dc4:	40020058 	.word	0x40020058
 8005dc8:	40020070 	.word	0x40020070
 8005dcc:	40020088 	.word	0x40020088
 8005dd0:	400200a0 	.word	0x400200a0
 8005dd4:	400200b8 	.word	0x400200b8
 8005dd8:	40020410 	.word	0x40020410
 8005ddc:	40020428 	.word	0x40020428
 8005de0:	40020440 	.word	0x40020440
 8005de4:	40020458 	.word	0x40020458
 8005de8:	40020470 	.word	0x40020470
 8005dec:	40020488 	.word	0x40020488
 8005df0:	400204a0 	.word	0x400204a0
 8005df4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2208      	movs	r2, #8
 8005e02:	409a      	lsls	r2, r3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8088 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe0e>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8082 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a41      	ldr	r2, [pc, #260]	; (8005f24 <HAL_DMA_IRQHandler+0xe14>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d04a      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a3f      	ldr	r2, [pc, #252]	; (8005f28 <HAL_DMA_IRQHandler+0xe18>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d045      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a3e      	ldr	r2, [pc, #248]	; (8005f2c <HAL_DMA_IRQHandler+0xe1c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d040      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	; (8005f30 <HAL_DMA_IRQHandler+0xe20>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d03b      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a3b      	ldr	r2, [pc, #236]	; (8005f34 <HAL_DMA_IRQHandler+0xe24>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d036      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a39      	ldr	r2, [pc, #228]	; (8005f38 <HAL_DMA_IRQHandler+0xe28>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d031      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a38      	ldr	r2, [pc, #224]	; (8005f3c <HAL_DMA_IRQHandler+0xe2c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d02c      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a36      	ldr	r2, [pc, #216]	; (8005f40 <HAL_DMA_IRQHandler+0xe30>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d027      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a35      	ldr	r2, [pc, #212]	; (8005f44 <HAL_DMA_IRQHandler+0xe34>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a33      	ldr	r2, [pc, #204]	; (8005f48 <HAL_DMA_IRQHandler+0xe38>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a32      	ldr	r2, [pc, #200]	; (8005f4c <HAL_DMA_IRQHandler+0xe3c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a30      	ldr	r2, [pc, #192]	; (8005f50 <HAL_DMA_IRQHandler+0xe40>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2f      	ldr	r2, [pc, #188]	; (8005f54 <HAL_DMA_IRQHandler+0xe44>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2d      	ldr	r2, [pc, #180]	; (8005f58 <HAL_DMA_IRQHandler+0xe48>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <HAL_DMA_IRQHandler+0xe4c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_IRQHandler+0xdaa>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <HAL_DMA_IRQHandler+0xe50>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d108      	bne.n	8005ecc <HAL_DMA_IRQHandler+0xdbc>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 021c 	bic.w	r2, r2, #28
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e007      	b.n	8005edc <HAL_DMA_IRQHandler+0xdcc>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 020e 	bic.w	r2, r2, #14
 8005eda:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
 8005f12:	e004      	b.n	8005f1e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f14:	bf00      	nop
 8005f16:	e002      	b.n	8005f1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f18:	bf00      	nop
 8005f1a:	e000      	b.n	8005f1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f1c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f1e:	3728      	adds	r7, #40	; 0x28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40020010 	.word	0x40020010
 8005f28:	40020028 	.word	0x40020028
 8005f2c:	40020040 	.word	0x40020040
 8005f30:	40020058 	.word	0x40020058
 8005f34:	40020070 	.word	0x40020070
 8005f38:	40020088 	.word	0x40020088
 8005f3c:	400200a0 	.word	0x400200a0
 8005f40:	400200b8 	.word	0x400200b8
 8005f44:	40020410 	.word	0x40020410
 8005f48:	40020428 	.word	0x40020428
 8005f4c:	40020440 	.word	0x40020440
 8005f50:	40020458 	.word	0x40020458
 8005f54:	40020470 	.word	0x40020470
 8005f58:	40020488 	.word	0x40020488
 8005f5c:	400204a0 	.word	0x400204a0
 8005f60:	400204b8 	.word	0x400204b8

08005f64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a84      	ldr	r2, [pc, #528]	; (8006194 <DMA_SetConfig+0x230>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d072      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a82      	ldr	r2, [pc, #520]	; (8006198 <DMA_SetConfig+0x234>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d06d      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a81      	ldr	r2, [pc, #516]	; (800619c <DMA_SetConfig+0x238>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d068      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a7f      	ldr	r2, [pc, #508]	; (80061a0 <DMA_SetConfig+0x23c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d063      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a7e      	ldr	r2, [pc, #504]	; (80061a4 <DMA_SetConfig+0x240>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d05e      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a7c      	ldr	r2, [pc, #496]	; (80061a8 <DMA_SetConfig+0x244>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d059      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a7b      	ldr	r2, [pc, #492]	; (80061ac <DMA_SetConfig+0x248>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d054      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a79      	ldr	r2, [pc, #484]	; (80061b0 <DMA_SetConfig+0x24c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04f      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a78      	ldr	r2, [pc, #480]	; (80061b4 <DMA_SetConfig+0x250>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d04a      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a76      	ldr	r2, [pc, #472]	; (80061b8 <DMA_SetConfig+0x254>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d045      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a75      	ldr	r2, [pc, #468]	; (80061bc <DMA_SetConfig+0x258>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d040      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a73      	ldr	r2, [pc, #460]	; (80061c0 <DMA_SetConfig+0x25c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d03b      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a72      	ldr	r2, [pc, #456]	; (80061c4 <DMA_SetConfig+0x260>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d036      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a70      	ldr	r2, [pc, #448]	; (80061c8 <DMA_SetConfig+0x264>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d031      	beq.n	800606e <DMA_SetConfig+0x10a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a6f      	ldr	r2, [pc, #444]	; (80061cc <DMA_SetConfig+0x268>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d02c      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a6d      	ldr	r2, [pc, #436]	; (80061d0 <DMA_SetConfig+0x26c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d027      	beq.n	800606e <DMA_SetConfig+0x10a>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a6c      	ldr	r2, [pc, #432]	; (80061d4 <DMA_SetConfig+0x270>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6a      	ldr	r2, [pc, #424]	; (80061d8 <DMA_SetConfig+0x274>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01d      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a69      	ldr	r2, [pc, #420]	; (80061dc <DMA_SetConfig+0x278>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <DMA_SetConfig+0x10a>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a67      	ldr	r2, [pc, #412]	; (80061e0 <DMA_SetConfig+0x27c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a66      	ldr	r2, [pc, #408]	; (80061e4 <DMA_SetConfig+0x280>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a64      	ldr	r2, [pc, #400]	; (80061e8 <DMA_SetConfig+0x284>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <DMA_SetConfig+0x10a>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a63      	ldr	r2, [pc, #396]	; (80061ec <DMA_SetConfig+0x288>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a61      	ldr	r2, [pc, #388]	; (80061f0 <DMA_SetConfig+0x28c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <DMA_SetConfig+0x10e>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <DMA_SetConfig+0x110>
 8006072:	2300      	movs	r3, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00d      	beq.n	8006094 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006080:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006092:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a3e      	ldr	r2, [pc, #248]	; (8006194 <DMA_SetConfig+0x230>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d04a      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a3d      	ldr	r2, [pc, #244]	; (8006198 <DMA_SetConfig+0x234>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d045      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a3b      	ldr	r2, [pc, #236]	; (800619c <DMA_SetConfig+0x238>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d040      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a3a      	ldr	r2, [pc, #232]	; (80061a0 <DMA_SetConfig+0x23c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d03b      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a38      	ldr	r2, [pc, #224]	; (80061a4 <DMA_SetConfig+0x240>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d036      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a37      	ldr	r2, [pc, #220]	; (80061a8 <DMA_SetConfig+0x244>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d031      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a35      	ldr	r2, [pc, #212]	; (80061ac <DMA_SetConfig+0x248>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d02c      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a34      	ldr	r2, [pc, #208]	; (80061b0 <DMA_SetConfig+0x24c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d027      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a32      	ldr	r2, [pc, #200]	; (80061b4 <DMA_SetConfig+0x250>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d022      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a31      	ldr	r2, [pc, #196]	; (80061b8 <DMA_SetConfig+0x254>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d01d      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2f      	ldr	r2, [pc, #188]	; (80061bc <DMA_SetConfig+0x258>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a2e      	ldr	r2, [pc, #184]	; (80061c0 <DMA_SetConfig+0x25c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2c      	ldr	r2, [pc, #176]	; (80061c4 <DMA_SetConfig+0x260>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2b      	ldr	r2, [pc, #172]	; (80061c8 <DMA_SetConfig+0x264>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a29      	ldr	r2, [pc, #164]	; (80061cc <DMA_SetConfig+0x268>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a28      	ldr	r2, [pc, #160]	; (80061d0 <DMA_SetConfig+0x26c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d101      	bne.n	8006138 <DMA_SetConfig+0x1d4>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <DMA_SetConfig+0x1d6>
 8006138:	2300      	movs	r3, #0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d05a      	beq.n	80061f4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	223f      	movs	r2, #63	; 0x3f
 8006148:	409a      	lsls	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800615c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d108      	bne.n	8006180 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800617e:	e087      	b.n	8006290 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	60da      	str	r2, [r3, #12]
}
 8006190:	e07e      	b.n	8006290 <DMA_SetConfig+0x32c>
 8006192:	bf00      	nop
 8006194:	40020010 	.word	0x40020010
 8006198:	40020028 	.word	0x40020028
 800619c:	40020040 	.word	0x40020040
 80061a0:	40020058 	.word	0x40020058
 80061a4:	40020070 	.word	0x40020070
 80061a8:	40020088 	.word	0x40020088
 80061ac:	400200a0 	.word	0x400200a0
 80061b0:	400200b8 	.word	0x400200b8
 80061b4:	40020410 	.word	0x40020410
 80061b8:	40020428 	.word	0x40020428
 80061bc:	40020440 	.word	0x40020440
 80061c0:	40020458 	.word	0x40020458
 80061c4:	40020470 	.word	0x40020470
 80061c8:	40020488 	.word	0x40020488
 80061cc:	400204a0 	.word	0x400204a0
 80061d0:	400204b8 	.word	0x400204b8
 80061d4:	58025408 	.word	0x58025408
 80061d8:	5802541c 	.word	0x5802541c
 80061dc:	58025430 	.word	0x58025430
 80061e0:	58025444 	.word	0x58025444
 80061e4:	58025458 	.word	0x58025458
 80061e8:	5802546c 	.word	0x5802546c
 80061ec:	58025480 	.word	0x58025480
 80061f0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a28      	ldr	r2, [pc, #160]	; (800629c <DMA_SetConfig+0x338>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d022      	beq.n	8006244 <DMA_SetConfig+0x2e0>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a27      	ldr	r2, [pc, #156]	; (80062a0 <DMA_SetConfig+0x33c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d01d      	beq.n	8006244 <DMA_SetConfig+0x2e0>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a25      	ldr	r2, [pc, #148]	; (80062a4 <DMA_SetConfig+0x340>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <DMA_SetConfig+0x2e0>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a24      	ldr	r2, [pc, #144]	; (80062a8 <DMA_SetConfig+0x344>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <DMA_SetConfig+0x2e0>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a22      	ldr	r2, [pc, #136]	; (80062ac <DMA_SetConfig+0x348>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <DMA_SetConfig+0x2e0>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <DMA_SetConfig+0x34c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <DMA_SetConfig+0x2e0>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1f      	ldr	r2, [pc, #124]	; (80062b4 <DMA_SetConfig+0x350>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <DMA_SetConfig+0x2e0>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <DMA_SetConfig+0x354>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d101      	bne.n	8006248 <DMA_SetConfig+0x2e4>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <DMA_SetConfig+0x2e6>
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d020      	beq.n	8006290 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	2201      	movs	r2, #1
 8006258:	409a      	lsls	r2, r3
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d108      	bne.n	8006280 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	60da      	str	r2, [r3, #12]
}
 800627e:	e007      	b.n	8006290 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
}
 8006290:	bf00      	nop
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	58025408 	.word	0x58025408
 80062a0:	5802541c 	.word	0x5802541c
 80062a4:	58025430 	.word	0x58025430
 80062a8:	58025444 	.word	0x58025444
 80062ac:	58025458 	.word	0x58025458
 80062b0:	5802546c 	.word	0x5802546c
 80062b4:	58025480 	.word	0x58025480
 80062b8:	58025494 	.word	0x58025494

080062bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a42      	ldr	r2, [pc, #264]	; (80063d4 <DMA_CalcBaseAndBitshift+0x118>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d04a      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a41      	ldr	r2, [pc, #260]	; (80063d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d045      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a3f      	ldr	r2, [pc, #252]	; (80063dc <DMA_CalcBaseAndBitshift+0x120>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d040      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a3e      	ldr	r2, [pc, #248]	; (80063e0 <DMA_CalcBaseAndBitshift+0x124>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d03b      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a3c      	ldr	r2, [pc, #240]	; (80063e4 <DMA_CalcBaseAndBitshift+0x128>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d036      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a3b      	ldr	r2, [pc, #236]	; (80063e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d031      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a39      	ldr	r2, [pc, #228]	; (80063ec <DMA_CalcBaseAndBitshift+0x130>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d02c      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a38      	ldr	r2, [pc, #224]	; (80063f0 <DMA_CalcBaseAndBitshift+0x134>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d027      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a36      	ldr	r2, [pc, #216]	; (80063f4 <DMA_CalcBaseAndBitshift+0x138>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d022      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a35      	ldr	r2, [pc, #212]	; (80063f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d01d      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a33      	ldr	r2, [pc, #204]	; (80063fc <DMA_CalcBaseAndBitshift+0x140>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d018      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a32      	ldr	r2, [pc, #200]	; (8006400 <DMA_CalcBaseAndBitshift+0x144>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a30      	ldr	r2, [pc, #192]	; (8006404 <DMA_CalcBaseAndBitshift+0x148>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00e      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a2f      	ldr	r2, [pc, #188]	; (8006408 <DMA_CalcBaseAndBitshift+0x14c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a2d      	ldr	r2, [pc, #180]	; (800640c <DMA_CalcBaseAndBitshift+0x150>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <DMA_CalcBaseAndBitshift+0xa8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2c      	ldr	r2, [pc, #176]	; (8006410 <DMA_CalcBaseAndBitshift+0x154>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d101      	bne.n	8006368 <DMA_CalcBaseAndBitshift+0xac>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <DMA_CalcBaseAndBitshift+0xae>
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d024      	beq.n	80063b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	3b10      	subs	r3, #16
 8006376:	4a27      	ldr	r2, [pc, #156]	; (8006414 <DMA_CalcBaseAndBitshift+0x158>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	4a24      	ldr	r2, [pc, #144]	; (8006418 <DMA_CalcBaseAndBitshift+0x15c>)
 8006388:	5cd3      	ldrb	r3, [r2, r3]
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b03      	cmp	r3, #3
 8006394:	d908      	bls.n	80063a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	4b1f      	ldr	r3, [pc, #124]	; (800641c <DMA_CalcBaseAndBitshift+0x160>)
 800639e:	4013      	ands	r3, r2
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	659a      	str	r2, [r3, #88]	; 0x58
 80063a6:	e00d      	b.n	80063c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <DMA_CalcBaseAndBitshift+0x160>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6593      	str	r3, [r2, #88]	; 0x58
 80063b6:	e005      	b.n	80063c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40020010 	.word	0x40020010
 80063d8:	40020028 	.word	0x40020028
 80063dc:	40020040 	.word	0x40020040
 80063e0:	40020058 	.word	0x40020058
 80063e4:	40020070 	.word	0x40020070
 80063e8:	40020088 	.word	0x40020088
 80063ec:	400200a0 	.word	0x400200a0
 80063f0:	400200b8 	.word	0x400200b8
 80063f4:	40020410 	.word	0x40020410
 80063f8:	40020428 	.word	0x40020428
 80063fc:	40020440 	.word	0x40020440
 8006400:	40020458 	.word	0x40020458
 8006404:	40020470 	.word	0x40020470
 8006408:	40020488 	.word	0x40020488
 800640c:	400204a0 	.word	0x400204a0
 8006410:	400204b8 	.word	0x400204b8
 8006414:	aaaaaaab 	.word	0xaaaaaaab
 8006418:	0800dac8 	.word	0x0800dac8
 800641c:	fffffc00 	.word	0xfffffc00

08006420 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d120      	bne.n	8006476 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006438:	2b03      	cmp	r3, #3
 800643a:	d858      	bhi.n	80064ee <DMA_CheckFifoParam+0xce>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <DMA_CheckFifoParam+0x24>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	08006455 	.word	0x08006455
 8006448:	08006467 	.word	0x08006467
 800644c:	08006455 	.word	0x08006455
 8006450:	080064ef 	.word	0x080064ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d048      	beq.n	80064f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006464:	e045      	b.n	80064f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800646e:	d142      	bne.n	80064f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006474:	e03f      	b.n	80064f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647e:	d123      	bne.n	80064c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	2b03      	cmp	r3, #3
 8006486:	d838      	bhi.n	80064fa <DMA_CheckFifoParam+0xda>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <DMA_CheckFifoParam+0x70>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064a7 	.word	0x080064a7
 8006498:	080064a1 	.word	0x080064a1
 800649c:	080064b9 	.word	0x080064b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
        break;
 80064a4:	e030      	b.n	8006508 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d025      	beq.n	80064fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064b6:	e022      	b.n	80064fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064c0:	d11f      	bne.n	8006502 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064c6:	e01c      	b.n	8006502 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d902      	bls.n	80064d6 <DMA_CheckFifoParam+0xb6>
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d003      	beq.n	80064dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80064d4:	e018      	b.n	8006508 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	73fb      	strb	r3, [r7, #15]
        break;
 80064da:	e015      	b.n	8006508 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00e      	beq.n	8006506 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
    break;
 80064ec:	e00b      	b.n	8006506 <DMA_CheckFifoParam+0xe6>
        break;
 80064ee:	bf00      	nop
 80064f0:	e00a      	b.n	8006508 <DMA_CheckFifoParam+0xe8>
        break;
 80064f2:	bf00      	nop
 80064f4:	e008      	b.n	8006508 <DMA_CheckFifoParam+0xe8>
        break;
 80064f6:	bf00      	nop
 80064f8:	e006      	b.n	8006508 <DMA_CheckFifoParam+0xe8>
        break;
 80064fa:	bf00      	nop
 80064fc:	e004      	b.n	8006508 <DMA_CheckFifoParam+0xe8>
        break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <DMA_CheckFifoParam+0xe8>
        break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <DMA_CheckFifoParam+0xe8>
    break;
 8006506:	bf00      	nop
    }
  }

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop

08006518 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a38      	ldr	r2, [pc, #224]	; (800660c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d022      	beq.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a36      	ldr	r2, [pc, #216]	; (8006610 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01d      	beq.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a35      	ldr	r2, [pc, #212]	; (8006614 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d018      	beq.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a33      	ldr	r2, [pc, #204]	; (8006618 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a32      	ldr	r2, [pc, #200]	; (800661c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00e      	beq.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a30      	ldr	r2, [pc, #192]	; (8006620 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a2f      	ldr	r2, [pc, #188]	; (8006624 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a2d      	ldr	r2, [pc, #180]	; (8006628 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d101      	bne.n	800657a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01a      	beq.n	80065b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	3b08      	subs	r3, #8
 8006588:	4a28      	ldr	r2, [pc, #160]	; (800662c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	091b      	lsrs	r3, r3, #4
 8006590:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4b26      	ldr	r3, [pc, #152]	; (8006630 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a24      	ldr	r2, [pc, #144]	; (8006634 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80065a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	2201      	movs	r2, #1
 80065ae:	409a      	lsls	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80065b4:	e024      	b.n	8006600 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	3b10      	subs	r3, #16
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4a1c      	ldr	r2, [pc, #112]	; (800663c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d806      	bhi.n	80065de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d902      	bls.n	80065de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3308      	adds	r3, #8
 80065dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4b18      	ldr	r3, [pc, #96]	; (8006644 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	461a      	mov	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a16      	ldr	r2, [pc, #88]	; (8006648 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80065f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2201      	movs	r2, #1
 80065fa:	409a      	lsls	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	58025408 	.word	0x58025408
 8006610:	5802541c 	.word	0x5802541c
 8006614:	58025430 	.word	0x58025430
 8006618:	58025444 	.word	0x58025444
 800661c:	58025458 	.word	0x58025458
 8006620:	5802546c 	.word	0x5802546c
 8006624:	58025480 	.word	0x58025480
 8006628:	58025494 	.word	0x58025494
 800662c:	cccccccd 	.word	0xcccccccd
 8006630:	16009600 	.word	0x16009600
 8006634:	58025880 	.word	0x58025880
 8006638:	aaaaaaab 	.word	0xaaaaaaab
 800663c:	400204b8 	.word	0x400204b8
 8006640:	4002040f 	.word	0x4002040f
 8006644:	10008200 	.word	0x10008200
 8006648:	40020880 	.word	0x40020880

0800664c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d04a      	beq.n	80066f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b08      	cmp	r3, #8
 8006666:	d847      	bhi.n	80066f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a25      	ldr	r2, [pc, #148]	; (8006704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d022      	beq.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a24      	ldr	r2, [pc, #144]	; (8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d01d      	beq.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a22      	ldr	r2, [pc, #136]	; (800670c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d018      	beq.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d013      	beq.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00e      	beq.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d009      	beq.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d101      	bne.n	80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80066bc:	2300      	movs	r3, #0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4b17      	ldr	r3, [pc, #92]	; (8006724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	461a      	mov	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a15      	ldr	r2, [pc, #84]	; (8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80066d4:	671a      	str	r2, [r3, #112]	; 0x70
 80066d6:	e009      	b.n	80066ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4b14      	ldr	r3, [pc, #80]	; (800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	461a      	mov	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a11      	ldr	r2, [pc, #68]	; (8006730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80066ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	2201      	movs	r2, #1
 80066f2:	409a      	lsls	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	58025408 	.word	0x58025408
 8006708:	5802541c 	.word	0x5802541c
 800670c:	58025430 	.word	0x58025430
 8006710:	58025444 	.word	0x58025444
 8006714:	58025458 	.word	0x58025458
 8006718:	5802546c 	.word	0x5802546c
 800671c:	58025480 	.word	0x58025480
 8006720:	58025494 	.word	0x58025494
 8006724:	1600963f 	.word	0x1600963f
 8006728:	58025940 	.word	0x58025940
 800672c:	1000823f 	.word	0x1000823f
 8006730:	40020940 	.word	0x40020940

08006734 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	; 0x24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006742:	4b86      	ldr	r3, [pc, #536]	; (800695c <HAL_GPIO_Init+0x228>)
 8006744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006746:	e18c      	b.n	8006a62 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	2101      	movs	r1, #1
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	fa01 f303 	lsl.w	r3, r1, r3
 8006754:	4013      	ands	r3, r2
 8006756:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 817e 	beq.w	8006a5c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	2b01      	cmp	r3, #1
 800676a:	d005      	beq.n	8006778 <HAL_GPIO_Init+0x44>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d130      	bne.n	80067da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	2203      	movs	r2, #3
 8006784:	fa02 f303 	lsl.w	r3, r2, r3
 8006788:	43db      	mvns	r3, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4013      	ands	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4313      	orrs	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067ae:	2201      	movs	r2, #1
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	43db      	mvns	r3, r3
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	4013      	ands	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	091b      	lsrs	r3, r3, #4
 80067c4:	f003 0201 	and.w	r2, r3, #1
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d017      	beq.n	8006816 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	2203      	movs	r2, #3
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	43db      	mvns	r3, r3
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	4013      	ands	r3, r2
 80067fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	4313      	orrs	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d123      	bne.n	800686a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	08da      	lsrs	r2, r3, #3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3208      	adds	r2, #8
 800682a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	220f      	movs	r2, #15
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	43db      	mvns	r3, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	4013      	ands	r3, r2
 8006844:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	fa02 f303 	lsl.w	r3, r2, r3
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	4313      	orrs	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	08da      	lsrs	r2, r3, #3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3208      	adds	r2, #8
 8006864:	69b9      	ldr	r1, [r7, #24]
 8006866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	2203      	movs	r2, #3
 8006876:	fa02 f303 	lsl.w	r3, r2, r3
 800687a:	43db      	mvns	r3, r3
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	4013      	ands	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 0203 	and.w	r2, r3, #3
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	4313      	orrs	r3, r2
 8006896:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80d8 	beq.w	8006a5c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ac:	4b2c      	ldr	r3, [pc, #176]	; (8006960 <HAL_GPIO_Init+0x22c>)
 80068ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068b2:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <HAL_GPIO_Init+0x22c>)
 80068b4:	f043 0302 	orr.w	r3, r3, #2
 80068b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80068bc:	4b28      	ldr	r3, [pc, #160]	; (8006960 <HAL_GPIO_Init+0x22c>)
 80068be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068ca:	4a26      	ldr	r2, [pc, #152]	; (8006964 <HAL_GPIO_Init+0x230>)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	089b      	lsrs	r3, r3, #2
 80068d0:	3302      	adds	r3, #2
 80068d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	220f      	movs	r2, #15
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	43db      	mvns	r3, r3
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	4013      	ands	r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <HAL_GPIO_Init+0x234>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d04a      	beq.n	800698c <HAL_GPIO_Init+0x258>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a1c      	ldr	r2, [pc, #112]	; (800696c <HAL_GPIO_Init+0x238>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d02b      	beq.n	8006956 <HAL_GPIO_Init+0x222>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1b      	ldr	r2, [pc, #108]	; (8006970 <HAL_GPIO_Init+0x23c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d025      	beq.n	8006952 <HAL_GPIO_Init+0x21e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <HAL_GPIO_Init+0x240>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01f      	beq.n	800694e <HAL_GPIO_Init+0x21a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a19      	ldr	r2, [pc, #100]	; (8006978 <HAL_GPIO_Init+0x244>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d019      	beq.n	800694a <HAL_GPIO_Init+0x216>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a18      	ldr	r2, [pc, #96]	; (800697c <HAL_GPIO_Init+0x248>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_GPIO_Init+0x212>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a17      	ldr	r2, [pc, #92]	; (8006980 <HAL_GPIO_Init+0x24c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00d      	beq.n	8006942 <HAL_GPIO_Init+0x20e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a16      	ldr	r2, [pc, #88]	; (8006984 <HAL_GPIO_Init+0x250>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <HAL_GPIO_Init+0x20a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a15      	ldr	r2, [pc, #84]	; (8006988 <HAL_GPIO_Init+0x254>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d101      	bne.n	800693a <HAL_GPIO_Init+0x206>
 8006936:	2309      	movs	r3, #9
 8006938:	e029      	b.n	800698e <HAL_GPIO_Init+0x25a>
 800693a:	230a      	movs	r3, #10
 800693c:	e027      	b.n	800698e <HAL_GPIO_Init+0x25a>
 800693e:	2307      	movs	r3, #7
 8006940:	e025      	b.n	800698e <HAL_GPIO_Init+0x25a>
 8006942:	2306      	movs	r3, #6
 8006944:	e023      	b.n	800698e <HAL_GPIO_Init+0x25a>
 8006946:	2305      	movs	r3, #5
 8006948:	e021      	b.n	800698e <HAL_GPIO_Init+0x25a>
 800694a:	2304      	movs	r3, #4
 800694c:	e01f      	b.n	800698e <HAL_GPIO_Init+0x25a>
 800694e:	2303      	movs	r3, #3
 8006950:	e01d      	b.n	800698e <HAL_GPIO_Init+0x25a>
 8006952:	2302      	movs	r3, #2
 8006954:	e01b      	b.n	800698e <HAL_GPIO_Init+0x25a>
 8006956:	2301      	movs	r3, #1
 8006958:	e019      	b.n	800698e <HAL_GPIO_Init+0x25a>
 800695a:	bf00      	nop
 800695c:	58000080 	.word	0x58000080
 8006960:	58024400 	.word	0x58024400
 8006964:	58000400 	.word	0x58000400
 8006968:	58020000 	.word	0x58020000
 800696c:	58020400 	.word	0x58020400
 8006970:	58020800 	.word	0x58020800
 8006974:	58020c00 	.word	0x58020c00
 8006978:	58021000 	.word	0x58021000
 800697c:	58021400 	.word	0x58021400
 8006980:	58021800 	.word	0x58021800
 8006984:	58021c00 	.word	0x58021c00
 8006988:	58022400 	.word	0x58022400
 800698c:	2300      	movs	r3, #0
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	f002 0203 	and.w	r2, r2, #3
 8006994:	0092      	lsls	r2, r2, #2
 8006996:	4093      	lsls	r3, r2
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4313      	orrs	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800699e:	4938      	ldr	r1, [pc, #224]	; (8006a80 <HAL_GPIO_Init+0x34c>)
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	089b      	lsrs	r3, r3, #2
 80069a4:	3302      	adds	r3, #2
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	43db      	mvns	r3, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	4013      	ands	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	43db      	mvns	r3, r3
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	4013      	ands	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4013      	ands	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f47f ae6b 	bne.w	8006748 <HAL_GPIO_Init+0x14>
  }
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	3724      	adds	r7, #36	; 0x24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	58000400 	.word	0x58000400

08006a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a94:	787b      	ldrb	r3, [r7, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a9a:	887a      	ldrh	r2, [r7, #2]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006aa0:	e003      	b.n	8006aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006aa2:	887b      	ldrh	r3, [r7, #2]
 8006aa4:	041a      	lsls	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	619a      	str	r2, [r3, #24]
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ac8:	887a      	ldrh	r2, [r7, #2]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4013      	ands	r3, r2
 8006ace:	041a      	lsls	r2, r3, #16
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	43d9      	mvns	r1, r3
 8006ad4:	887b      	ldrh	r3, [r7, #2]
 8006ad6:	400b      	ands	r3, r1
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	619a      	str	r2, [r3, #24]
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	4603      	mov	r3, r0
 8006af2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006afc:	88fb      	ldrh	r3, [r7, #6]
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 f804 	bl	8006b1e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	4603      	mov	r3, r0
 8006b26:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b3c:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d00a      	beq.n	8006b5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b48:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d001      	beq.n	8006b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e01f      	b.n	8006b9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e01d      	b.n	8006b9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b5e:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f023 0207 	bic.w	r2, r3, #7
 8006b66:	490f      	ldr	r1, [pc, #60]	; (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b6e:	f7fa ff31 	bl	80019d4 <HAL_GetTick>
 8006b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b74:	e009      	b.n	8006b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b76:	f7fa ff2d 	bl	80019d4 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b84:	d901      	bls.n	8006b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e007      	b.n	8006b9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b8a:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b96:	d1ee      	bne.n	8006b76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	58024800 	.word	0x58024800

08006ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08c      	sub	sp, #48	; 0x30
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e397      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 8087 	beq.w	8006cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bc8:	4b9e      	ldr	r3, [pc, #632]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bd2:	4b9c      	ldr	r3, [pc, #624]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	2b10      	cmp	r3, #16
 8006bdc:	d007      	beq.n	8006bee <HAL_RCC_OscConfig+0x46>
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2b18      	cmp	r3, #24
 8006be2:	d110      	bne.n	8006c06 <HAL_RCC_OscConfig+0x5e>
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d10b      	bne.n	8006c06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bee:	4b95      	ldr	r3, [pc, #596]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d06c      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x12c>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d168      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e371      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0e:	d106      	bne.n	8006c1e <HAL_RCC_OscConfig+0x76>
 8006c10:	4b8c      	ldr	r3, [pc, #560]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a8b      	ldr	r2, [pc, #556]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	e02e      	b.n	8006c7c <HAL_RCC_OscConfig+0xd4>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10c      	bne.n	8006c40 <HAL_RCC_OscConfig+0x98>
 8006c26:	4b87      	ldr	r3, [pc, #540]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a86      	ldr	r2, [pc, #536]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	4b84      	ldr	r3, [pc, #528]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a83      	ldr	r2, [pc, #524]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e01d      	b.n	8006c7c <HAL_RCC_OscConfig+0xd4>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCC_OscConfig+0xbc>
 8006c4a:	4b7e      	ldr	r3, [pc, #504]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7d      	ldr	r2, [pc, #500]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4b7b      	ldr	r3, [pc, #492]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a7a      	ldr	r2, [pc, #488]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e00b      	b.n	8006c7c <HAL_RCC_OscConfig+0xd4>
 8006c64:	4b77      	ldr	r3, [pc, #476]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a76      	ldr	r2, [pc, #472]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	4b74      	ldr	r3, [pc, #464]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a73      	ldr	r2, [pc, #460]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d013      	beq.n	8006cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c84:	f7fa fea6 	bl	80019d4 <HAL_GetTick>
 8006c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fa fea2 	bl	80019d4 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	; 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e325      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c9e:	4b69      	ldr	r3, [pc, #420]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0xe4>
 8006caa:	e014      	b.n	8006cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cac:	f7fa fe92 	bl	80019d4 <HAL_GetTick>
 8006cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb4:	f7fa fe8e 	bl	80019d4 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b64      	cmp	r3, #100	; 0x64
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e311      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cc6:	4b5f      	ldr	r3, [pc, #380]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f0      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x10c>
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 808a 	beq.w	8006df8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ce4:	4b57      	ldr	r3, [pc, #348]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cee:	4b55      	ldr	r3, [pc, #340]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <HAL_RCC_OscConfig+0x162>
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	2b18      	cmp	r3, #24
 8006cfe:	d137      	bne.n	8006d70 <HAL_RCC_OscConfig+0x1c8>
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d132      	bne.n	8006d70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d0a:	4b4e      	ldr	r3, [pc, #312]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_RCC_OscConfig+0x17a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e2e3      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d22:	4b48      	ldr	r3, [pc, #288]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 0219 	bic.w	r2, r3, #25
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	4945      	ldr	r1, [pc, #276]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d34:	f7fa fe4e 	bl	80019d4 <HAL_GetTick>
 8006d38:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d3c:	f7fa fe4a 	bl	80019d4 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e2cd      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d4e:	4b3d      	ldr	r3, [pc, #244]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d5a:	4b3a      	ldr	r3, [pc, #232]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	4936      	ldr	r1, [pc, #216]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d6e:	e043      	b.n	8006df8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d026      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d78:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f023 0219 	bic.w	r2, r3, #25
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	492f      	ldr	r1, [pc, #188]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8a:	f7fa fe23 	bl	80019d4 <HAL_GetTick>
 8006d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d92:	f7fa fe1f 	bl	80019d4 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e2a2      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006da4:	4b27      	ldr	r3, [pc, #156]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0f0      	beq.n	8006d92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db0:	4b24      	ldr	r3, [pc, #144]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	061b      	lsls	r3, r3, #24
 8006dbe:	4921      	ldr	r1, [pc, #132]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	604b      	str	r3, [r1, #4]
 8006dc4:	e018      	b.n	8006df8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dc6:	4b1f      	ldr	r3, [pc, #124]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a1e      	ldr	r2, [pc, #120]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd2:	f7fa fdff 	bl	80019d4 <HAL_GetTick>
 8006dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dda:	f7fa fdfb 	bl	80019d4 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e27e      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dec:	4b15      	ldr	r3, [pc, #84]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f0      	bne.n	8006dda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d06d      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d007      	beq.n	8006e2a <HAL_RCC_OscConfig+0x282>
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b18      	cmp	r3, #24
 8006e1e:	d11e      	bne.n	8006e5e <HAL_RCC_OscConfig+0x2b6>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d119      	bne.n	8006e5e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <HAL_RCC_OscConfig+0x29c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d008      	beq.n	8006e48 <HAL_RCC_OscConfig+0x2a0>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	2b80      	cmp	r3, #128	; 0x80
 8006e3c:	d004      	beq.n	8006e48 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e253      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
 8006e42:	bf00      	nop
 8006e44:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e48:	4ba3      	ldr	r3, [pc, #652]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	49a0      	ldr	r1, [pc, #640]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e5c:	e040      	b.n	8006ee0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d023      	beq.n	8006eae <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e66:	4b9c      	ldr	r3, [pc, #624]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a9b      	ldr	r2, [pc, #620]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e72:	f7fa fdaf 	bl	80019d4 <HAL_GetTick>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e78:	e008      	b.n	8006e8c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e7a:	f7fa fdab 	bl	80019d4 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e22e      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e8c:	4b92      	ldr	r3, [pc, #584]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e98:	4b8f      	ldr	r3, [pc, #572]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	061b      	lsls	r3, r3, #24
 8006ea6:	498c      	ldr	r1, [pc, #560]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60cb      	str	r3, [r1, #12]
 8006eac:	e018      	b.n	8006ee0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006eae:	4b8a      	ldr	r3, [pc, #552]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a89      	ldr	r2, [pc, #548]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eba:	f7fa fd8b 	bl	80019d4 <HAL_GetTick>
 8006ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ec2:	f7fa fd87 	bl	80019d4 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e20a      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ed4:	4b80      	ldr	r3, [pc, #512]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f0      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d036      	beq.n	8006f5a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d019      	beq.n	8006f28 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef4:	4b78      	ldr	r3, [pc, #480]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef8:	4a77      	ldr	r2, [pc, #476]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f00:	f7fa fd68 	bl	80019d4 <HAL_GetTick>
 8006f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f08:	f7fa fd64 	bl	80019d4 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e1e7      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f1a:	4b6f      	ldr	r3, [pc, #444]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0f0      	beq.n	8006f08 <HAL_RCC_OscConfig+0x360>
 8006f26:	e018      	b.n	8006f5a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f28:	4b6b      	ldr	r3, [pc, #428]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2c:	4a6a      	ldr	r2, [pc, #424]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f34:	f7fa fd4e 	bl	80019d4 <HAL_GetTick>
 8006f38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f3c:	f7fa fd4a 	bl	80019d4 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e1cd      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f4e:	4b62      	ldr	r3, [pc, #392]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d036      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d019      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f6e:	4b5a      	ldr	r3, [pc, #360]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a59      	ldr	r2, [pc, #356]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f7a:	f7fa fd2b 	bl	80019d4 <HAL_GetTick>
 8006f7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f82:	f7fa fd27 	bl	80019d4 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e1aa      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f94:	4b50      	ldr	r3, [pc, #320]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0f0      	beq.n	8006f82 <HAL_RCC_OscConfig+0x3da>
 8006fa0:	e018      	b.n	8006fd4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fa2:	4b4d      	ldr	r3, [pc, #308]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a4c      	ldr	r2, [pc, #304]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fae:	f7fa fd11 	bl	80019d4 <HAL_GetTick>
 8006fb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fb6:	f7fa fd0d 	bl	80019d4 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e190      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fc8:	4b43      	ldr	r3, [pc, #268]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f0      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8085 	beq.w	80070ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fe2:	4b3e      	ldr	r3, [pc, #248]	; (80070dc <HAL_RCC_OscConfig+0x534>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a3d      	ldr	r2, [pc, #244]	; (80070dc <HAL_RCC_OscConfig+0x534>)
 8006fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fee:	f7fa fcf1 	bl	80019d4 <HAL_GetTick>
 8006ff2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ff6:	f7fa fced 	bl	80019d4 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b64      	cmp	r3, #100	; 0x64
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e170      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007008:	4b34      	ldr	r3, [pc, #208]	; (80070dc <HAL_RCC_OscConfig+0x534>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d106      	bne.n	800702a <HAL_RCC_OscConfig+0x482>
 800701c:	4b2e      	ldr	r3, [pc, #184]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a2d      	ldr	r2, [pc, #180]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
 8007028:	e02d      	b.n	8007086 <HAL_RCC_OscConfig+0x4de>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10c      	bne.n	800704c <HAL_RCC_OscConfig+0x4a4>
 8007032:	4b29      	ldr	r3, [pc, #164]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	4a28      	ldr	r2, [pc, #160]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6713      	str	r3, [r2, #112]	; 0x70
 800703e:	4b26      	ldr	r3, [pc, #152]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	4a25      	ldr	r2, [pc, #148]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	6713      	str	r3, [r2, #112]	; 0x70
 800704a:	e01c      	b.n	8007086 <HAL_RCC_OscConfig+0x4de>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b05      	cmp	r3, #5
 8007052:	d10c      	bne.n	800706e <HAL_RCC_OscConfig+0x4c6>
 8007054:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007058:	4a1f      	ldr	r2, [pc, #124]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 800705a:	f043 0304 	orr.w	r3, r3, #4
 800705e:	6713      	str	r3, [r2, #112]	; 0x70
 8007060:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	6713      	str	r3, [r2, #112]	; 0x70
 800706c:	e00b      	b.n	8007086 <HAL_RCC_OscConfig+0x4de>
 800706e:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	4a19      	ldr	r2, [pc, #100]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	6713      	str	r3, [r2, #112]	; 0x70
 800707a:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	4a16      	ldr	r2, [pc, #88]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 8007080:	f023 0304 	bic.w	r3, r3, #4
 8007084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d015      	beq.n	80070ba <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708e:	f7fa fca1 	bl	80019d4 <HAL_GetTick>
 8007092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007094:	e00a      	b.n	80070ac <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007096:	f7fa fc9d 	bl	80019d4 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e11e      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <HAL_RCC_OscConfig+0x530>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0ee      	beq.n	8007096 <HAL_RCC_OscConfig+0x4ee>
 80070b8:	e018      	b.n	80070ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ba:	f7fa fc8b 	bl	80019d4 <HAL_GetTick>
 80070be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070c0:	e00e      	b.n	80070e0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c2:	f7fa fc87 	bl	80019d4 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d905      	bls.n	80070e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e108      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
 80070d8:	58024400 	.word	0x58024400
 80070dc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070e0:	4b84      	ldr	r3, [pc, #528]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80070e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1ea      	bne.n	80070c2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80f9 	beq.w	80072e8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070f6:	4b7f      	ldr	r3, [pc, #508]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070fe:	2b18      	cmp	r3, #24
 8007100:	f000 80b4 	beq.w	800726c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b02      	cmp	r3, #2
 800710a:	f040 8095 	bne.w	8007238 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710e:	4b79      	ldr	r3, [pc, #484]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a78      	ldr	r2, [pc, #480]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711a:	f7fa fc5b 	bl	80019d4 <HAL_GetTick>
 800711e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007122:	f7fa fc57 	bl	80019d4 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e0da      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007134:	4b6f      	ldr	r3, [pc, #444]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f0      	bne.n	8007122 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007140:	4b6c      	ldr	r3, [pc, #432]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007144:	4b6c      	ldr	r3, [pc, #432]	; (80072f8 <HAL_RCC_OscConfig+0x750>)
 8007146:	4013      	ands	r3, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007150:	0112      	lsls	r2, r2, #4
 8007152:	430a      	orrs	r2, r1
 8007154:	4967      	ldr	r1, [pc, #412]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007156:	4313      	orrs	r3, r2
 8007158:	628b      	str	r3, [r1, #40]	; 0x28
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	3b01      	subs	r3, #1
 8007160:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	3b01      	subs	r3, #1
 800716a:	025b      	lsls	r3, r3, #9
 800716c:	b29b      	uxth	r3, r3
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	3b01      	subs	r3, #1
 8007176:	041b      	lsls	r3, r3, #16
 8007178:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	3b01      	subs	r3, #1
 8007184:	061b      	lsls	r3, r3, #24
 8007186:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800718a:	495a      	ldr	r1, [pc, #360]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 800718c:	4313      	orrs	r3, r2
 800718e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007190:	4b58      	ldr	r3, [pc, #352]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a57      	ldr	r2, [pc, #348]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800719c:	4b55      	ldr	r3, [pc, #340]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 800719e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a0:	4b56      	ldr	r3, [pc, #344]	; (80072fc <HAL_RCC_OscConfig+0x754>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071a8:	00d2      	lsls	r2, r2, #3
 80071aa:	4952      	ldr	r1, [pc, #328]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071b0:	4b50      	ldr	r3, [pc, #320]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	f023 020c 	bic.w	r2, r3, #12
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	494d      	ldr	r1, [pc, #308]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071c2:	4b4c      	ldr	r3, [pc, #304]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	f023 0202 	bic.w	r2, r3, #2
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ce:	4949      	ldr	r1, [pc, #292]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071d4:	4b47      	ldr	r3, [pc, #284]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	4a46      	ldr	r2, [pc, #280]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e0:	4b44      	ldr	r3, [pc, #272]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a43      	ldr	r2, [pc, #268]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071ec:	4b41      	ldr	r3, [pc, #260]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	4a40      	ldr	r2, [pc, #256]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80071f8:	4b3e      	ldr	r3, [pc, #248]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	4a3d      	ldr	r2, [pc, #244]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 80071fe:	f043 0301 	orr.w	r3, r3, #1
 8007202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007204:	4b3b      	ldr	r3, [pc, #236]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a3a      	ldr	r2, [pc, #232]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 800720a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800720e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fa fbe0 	bl	80019d4 <HAL_GetTick>
 8007214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007218:	f7fa fbdc 	bl	80019d4 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e05f      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800722a:	4b32      	ldr	r3, [pc, #200]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0x670>
 8007236:	e057      	b.n	80072e8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007238:	4b2e      	ldr	r3, [pc, #184]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 800723e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fa fbc6 	bl	80019d4 <HAL_GetTick>
 8007248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800724c:	f7fa fbc2 	bl	80019d4 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e045      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800725e:	4b25      	ldr	r3, [pc, #148]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f0      	bne.n	800724c <HAL_RCC_OscConfig+0x6a4>
 800726a:	e03d      	b.n	80072e8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800726c:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007272:	4b20      	ldr	r3, [pc, #128]	; (80072f4 <HAL_RCC_OscConfig+0x74c>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	2b01      	cmp	r3, #1
 800727e:	d031      	beq.n	80072e4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f003 0203 	and.w	r2, r3, #3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800728a:	429a      	cmp	r2, r3
 800728c:	d12a      	bne.n	80072e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	091b      	lsrs	r3, r3, #4
 8007292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800729a:	429a      	cmp	r2, r3
 800729c:	d122      	bne.n	80072e4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d11a      	bne.n	80072e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	0a5b      	lsrs	r3, r3, #9
 80072b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072bc:	429a      	cmp	r2, r3
 80072be:	d111      	bne.n	80072e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	0c1b      	lsrs	r3, r3, #16
 80072c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d108      	bne.n	80072e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	0e1b      	lsrs	r3, r3, #24
 80072d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d001      	beq.n	80072e8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e000      	b.n	80072ea <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3730      	adds	r7, #48	; 0x30
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	58024400 	.word	0x58024400
 80072f8:	fffffc0c 	.word	0xfffffc0c
 80072fc:	ffff0007 	.word	0xffff0007

08007300 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e19c      	b.n	800764e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007314:	4b8a      	ldr	r3, [pc, #552]	; (8007540 <HAL_RCC_ClockConfig+0x240>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d910      	bls.n	8007344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007322:	4b87      	ldr	r3, [pc, #540]	; (8007540 <HAL_RCC_ClockConfig+0x240>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f023 020f 	bic.w	r2, r3, #15
 800732a:	4985      	ldr	r1, [pc, #532]	; (8007540 <HAL_RCC_ClockConfig+0x240>)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	4313      	orrs	r3, r2
 8007330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007332:	4b83      	ldr	r3, [pc, #524]	; (8007540 <HAL_RCC_ClockConfig+0x240>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d001      	beq.n	8007344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e184      	b.n	800764e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d010      	beq.n	8007372 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	4b7b      	ldr	r3, [pc, #492]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800735c:	429a      	cmp	r2, r3
 800735e:	d908      	bls.n	8007372 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007360:	4b78      	ldr	r3, [pc, #480]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	4975      	ldr	r1, [pc, #468]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 800736e:	4313      	orrs	r3, r2
 8007370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695a      	ldr	r2, [r3, #20]
 8007382:	4b70      	ldr	r3, [pc, #448]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800738a:	429a      	cmp	r2, r3
 800738c:	d908      	bls.n	80073a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800738e:	4b6d      	ldr	r3, [pc, #436]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	496a      	ldr	r1, [pc, #424]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 800739c:	4313      	orrs	r3, r2
 800739e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d010      	beq.n	80073ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699a      	ldr	r2, [r3, #24]
 80073b0:	4b64      	ldr	r3, [pc, #400]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d908      	bls.n	80073ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073bc:	4b61      	ldr	r3, [pc, #388]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	495e      	ldr	r1, [pc, #376]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d010      	beq.n	80073fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69da      	ldr	r2, [r3, #28]
 80073de:	4b59      	ldr	r3, [pc, #356]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d908      	bls.n	80073fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073ea:	4b56      	ldr	r3, [pc, #344]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	4953      	ldr	r1, [pc, #332]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	4b4d      	ldr	r3, [pc, #308]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f003 030f 	and.w	r3, r3, #15
 8007414:	429a      	cmp	r2, r3
 8007416:	d908      	bls.n	800742a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007418:	4b4a      	ldr	r3, [pc, #296]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f023 020f 	bic.w	r2, r3, #15
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4947      	ldr	r1, [pc, #284]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007426:	4313      	orrs	r3, r2
 8007428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d055      	beq.n	80074e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007436:	4b43      	ldr	r3, [pc, #268]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	4940      	ldr	r1, [pc, #256]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007444:	4313      	orrs	r3, r2
 8007446:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d107      	bne.n	8007460 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007450:	4b3c      	ldr	r3, [pc, #240]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d121      	bne.n	80074a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e0f6      	b.n	800764e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b03      	cmp	r3, #3
 8007466:	d107      	bne.n	8007478 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007468:	4b36      	ldr	r3, [pc, #216]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d115      	bne.n	80074a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e0ea      	b.n	800764e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d107      	bne.n	8007490 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007480:	4b30      	ldr	r3, [pc, #192]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007488:	2b00      	cmp	r3, #0
 800748a:	d109      	bne.n	80074a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e0de      	b.n	800764e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007490:	4b2c      	ldr	r3, [pc, #176]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e0d6      	b.n	800764e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074a0:	4b28      	ldr	r3, [pc, #160]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f023 0207 	bic.w	r2, r3, #7
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4925      	ldr	r1, [pc, #148]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b2:	f7fa fa8f 	bl	80019d4 <HAL_GetTick>
 80074b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074b8:	e00a      	b.n	80074d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ba:	f7fa fa8b 	bl	80019d4 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e0be      	b.n	800764e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074d0:	4b1c      	ldr	r3, [pc, #112]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	00db      	lsls	r3, r3, #3
 80074de:	429a      	cmp	r2, r3
 80074e0:	d1eb      	bne.n	80074ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d010      	beq.n	8007510 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	4b14      	ldr	r3, [pc, #80]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d208      	bcs.n	8007510 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074fe:	4b11      	ldr	r3, [pc, #68]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f023 020f 	bic.w	r2, r3, #15
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	490e      	ldr	r1, [pc, #56]	; (8007544 <HAL_RCC_ClockConfig+0x244>)
 800750c:	4313      	orrs	r3, r2
 800750e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <HAL_RCC_ClockConfig+0x240>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d214      	bcs.n	8007548 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751e:	4b08      	ldr	r3, [pc, #32]	; (8007540 <HAL_RCC_ClockConfig+0x240>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f023 020f 	bic.w	r2, r3, #15
 8007526:	4906      	ldr	r1, [pc, #24]	; (8007540 <HAL_RCC_ClockConfig+0x240>)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	4313      	orrs	r3, r2
 800752c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800752e:	4b04      	ldr	r3, [pc, #16]	; (8007540 <HAL_RCC_ClockConfig+0x240>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d005      	beq.n	8007548 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e086      	b.n	800764e <HAL_RCC_ClockConfig+0x34e>
 8007540:	52002000 	.word	0x52002000
 8007544:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	4b3f      	ldr	r3, [pc, #252]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007560:	429a      	cmp	r2, r3
 8007562:	d208      	bcs.n	8007576 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007564:	4b3c      	ldr	r3, [pc, #240]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	4939      	ldr	r1, [pc, #228]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 8007572:	4313      	orrs	r3, r2
 8007574:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d010      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	695a      	ldr	r2, [r3, #20]
 8007586:	4b34      	ldr	r3, [pc, #208]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800758e:	429a      	cmp	r2, r3
 8007590:	d208      	bcs.n	80075a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007592:	4b31      	ldr	r3, [pc, #196]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	492e      	ldr	r1, [pc, #184]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d010      	beq.n	80075d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699a      	ldr	r2, [r3, #24]
 80075b4:	4b28      	ldr	r3, [pc, #160]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075bc:	429a      	cmp	r2, r3
 80075be:	d208      	bcs.n	80075d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075c0:	4b25      	ldr	r3, [pc, #148]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	4922      	ldr	r1, [pc, #136]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d010      	beq.n	8007600 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69da      	ldr	r2, [r3, #28]
 80075e2:	4b1d      	ldr	r3, [pc, #116]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d208      	bcs.n	8007600 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075ee:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	4917      	ldr	r1, [pc, #92]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007600:	f000 f834 	bl	800766c <HAL_RCC_GetSysClockFreq>
 8007604:	4602      	mov	r2, r0
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	0a1b      	lsrs	r3, r3, #8
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	4912      	ldr	r1, [pc, #72]	; (800765c <HAL_RCC_ClockConfig+0x35c>)
 8007612:	5ccb      	ldrb	r3, [r1, r3]
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	fa22 f303 	lsr.w	r3, r2, r3
 800761c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800761e:	4b0e      	ldr	r3, [pc, #56]	; (8007658 <HAL_RCC_ClockConfig+0x358>)
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	4a0d      	ldr	r2, [pc, #52]	; (800765c <HAL_RCC_ClockConfig+0x35c>)
 8007628:	5cd3      	ldrb	r3, [r2, r3]
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
 8007634:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <HAL_RCC_ClockConfig+0x360>)
 8007636:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007638:	4a0a      	ldr	r2, [pc, #40]	; (8007664 <HAL_RCC_ClockConfig+0x364>)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <HAL_RCC_ClockConfig+0x368>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4618      	mov	r0, r3
 8007644:	f7fa f97c 	bl	8001940 <HAL_InitTick>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	58024400 	.word	0x58024400
 800765c:	0800dab8 	.word	0x0800dab8
 8007660:	24000004 	.word	0x24000004
 8007664:	24000000 	.word	0x24000000
 8007668:	24000008 	.word	0x24000008

0800766c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800766c:	b480      	push	{r7}
 800766e:	b089      	sub	sp, #36	; 0x24
 8007670:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007672:	4bb3      	ldr	r3, [pc, #716]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800767a:	2b18      	cmp	r3, #24
 800767c:	f200 8155 	bhi.w	800792a <HAL_RCC_GetSysClockFreq+0x2be>
 8007680:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	080076ed 	.word	0x080076ed
 800768c:	0800792b 	.word	0x0800792b
 8007690:	0800792b 	.word	0x0800792b
 8007694:	0800792b 	.word	0x0800792b
 8007698:	0800792b 	.word	0x0800792b
 800769c:	0800792b 	.word	0x0800792b
 80076a0:	0800792b 	.word	0x0800792b
 80076a4:	0800792b 	.word	0x0800792b
 80076a8:	08007713 	.word	0x08007713
 80076ac:	0800792b 	.word	0x0800792b
 80076b0:	0800792b 	.word	0x0800792b
 80076b4:	0800792b 	.word	0x0800792b
 80076b8:	0800792b 	.word	0x0800792b
 80076bc:	0800792b 	.word	0x0800792b
 80076c0:	0800792b 	.word	0x0800792b
 80076c4:	0800792b 	.word	0x0800792b
 80076c8:	08007719 	.word	0x08007719
 80076cc:	0800792b 	.word	0x0800792b
 80076d0:	0800792b 	.word	0x0800792b
 80076d4:	0800792b 	.word	0x0800792b
 80076d8:	0800792b 	.word	0x0800792b
 80076dc:	0800792b 	.word	0x0800792b
 80076e0:	0800792b 	.word	0x0800792b
 80076e4:	0800792b 	.word	0x0800792b
 80076e8:	0800771f 	.word	0x0800771f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ec:	4b94      	ldr	r3, [pc, #592]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d009      	beq.n	800770c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076f8:	4b91      	ldr	r3, [pc, #580]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	08db      	lsrs	r3, r3, #3
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	4a90      	ldr	r2, [pc, #576]	; (8007944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007704:	fa22 f303 	lsr.w	r3, r2, r3
 8007708:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800770a:	e111      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800770c:	4b8d      	ldr	r3, [pc, #564]	; (8007944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800770e:	61bb      	str	r3, [r7, #24]
    break;
 8007710:	e10e      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007712:	4b8d      	ldr	r3, [pc, #564]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007714:	61bb      	str	r3, [r7, #24]
    break;
 8007716:	e10b      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007718:	4b8c      	ldr	r3, [pc, #560]	; (800794c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800771a:	61bb      	str	r3, [r7, #24]
    break;
 800771c:	e108      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800771e:	4b88      	ldr	r3, [pc, #544]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007728:	4b85      	ldr	r3, [pc, #532]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007732:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007734:	4b82      	ldr	r3, [pc, #520]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800773e:	4b80      	ldr	r3, [pc, #512]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007742:	08db      	lsrs	r3, r3, #3
 8007744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	fb02 f303 	mul.w	r3, r2, r3
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 80e1 	beq.w	8007924 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b02      	cmp	r3, #2
 8007766:	f000 8083 	beq.w	8007870 <HAL_RCC_GetSysClockFreq+0x204>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b02      	cmp	r3, #2
 800776e:	f200 80a1 	bhi.w	80078b4 <HAL_RCC_GetSysClockFreq+0x248>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_RCC_GetSysClockFreq+0x114>
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d056      	beq.n	800782c <HAL_RCC_GetSysClockFreq+0x1c0>
 800777e:	e099      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007780:	4b6f      	ldr	r3, [pc, #444]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	d02d      	beq.n	80077e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800778c:	4b6c      	ldr	r3, [pc, #432]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	08db      	lsrs	r3, r3, #3
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	4a6b      	ldr	r2, [pc, #428]	; (8007944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
 800779c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b62      	ldr	r3, [pc, #392]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007950 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80077e6:	e087      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007954 <HAL_RCC_GetSysClockFreq+0x2e8>
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b51      	ldr	r3, [pc, #324]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a02 	vldr	s12, [r7, #8]
 800780e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007950 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800782a:	e065      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007958 <HAL_RCC_GetSysClockFreq+0x2ec>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b40      	ldr	r3, [pc, #256]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007852:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007950 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786e:	e043      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800795c <HAL_RCC_GetSysClockFreq+0x2f0>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b2f      	ldr	r3, [pc, #188]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007892:	ed97 6a02 	vldr	s12, [r7, #8]
 8007896:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007950 <HAL_RCC_GetSysClockFreq+0x2e4>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b2:	e021      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007958 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c6:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80078da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007950 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80078f8:	4b11      	ldr	r3, [pc, #68]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	0a5b      	lsrs	r3, r3, #9
 80078fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007902:	3301      	adds	r3, #1
 8007904:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007910:	edd7 6a07 	vldr	s13, [r7, #28]
 8007914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791c:	ee17 3a90 	vmov	r3, s15
 8007920:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007922:	e005      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
    break;
 8007928:	e002      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800792a:	4b07      	ldr	r3, [pc, #28]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800792c:	61bb      	str	r3, [r7, #24]
    break;
 800792e:	bf00      	nop
  }

  return sysclockfreq;
 8007930:	69bb      	ldr	r3, [r7, #24]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3724      	adds	r7, #36	; 0x24
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	58024400 	.word	0x58024400
 8007944:	03d09000 	.word	0x03d09000
 8007948:	003d0900 	.word	0x003d0900
 800794c:	017d7840 	.word	0x017d7840
 8007950:	46000000 	.word	0x46000000
 8007954:	4c742400 	.word	0x4c742400
 8007958:	4a742400 	.word	0x4a742400
 800795c:	4bbebc20 	.word	0x4bbebc20

08007960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007966:	f7ff fe81 	bl	800766c <HAL_RCC_GetSysClockFreq>
 800796a:	4602      	mov	r2, r0
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	0a1b      	lsrs	r3, r3, #8
 8007972:	f003 030f 	and.w	r3, r3, #15
 8007976:	490f      	ldr	r1, [pc, #60]	; (80079b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007978:	5ccb      	ldrb	r3, [r1, r3]
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	fa22 f303 	lsr.w	r3, r2, r3
 8007982:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007984:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f003 030f 	and.w	r3, r3, #15
 800798c:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800798e:	5cd3      	ldrb	r3, [r2, r3]
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	fa22 f303 	lsr.w	r3, r2, r3
 800799a:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800799c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800799e:	4a07      	ldr	r2, [pc, #28]	; (80079bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80079a6:	681b      	ldr	r3, [r3, #0]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	58024400 	.word	0x58024400
 80079b4:	0800dab8 	.word	0x0800dab8
 80079b8:	24000004 	.word	0x24000004
 80079bc:	24000000 	.word	0x24000000

080079c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079c4:	f7ff ffcc 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80079c8:	4602      	mov	r2, r0
 80079ca:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	4904      	ldr	r1, [pc, #16]	; (80079e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079d6:	5ccb      	ldrb	r3, [r1, r3]
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	58024400 	.word	0x58024400
 80079e8:	0800dab8 	.word	0x0800dab8

080079ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079f0:	f7ff ffb6 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80079f4:	4602      	mov	r2, r0
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	4904      	ldr	r1, [pc, #16]	; (8007a14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a02:	5ccb      	ldrb	r3, [r1, r3]
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	58024400 	.word	0x58024400
 8007a14:	0800dab8 	.word	0x0800dab8

08007a18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a20:	2300      	movs	r3, #0
 8007a22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a24:	2300      	movs	r3, #0
 8007a26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d03f      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a3c:	d02a      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a42:	d824      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a48:	d018      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a4e:	d81e      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a58:	d007      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a5a:	e018      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5c:	4bab      	ldr	r3, [pc, #684]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	4aaa      	ldr	r2, [pc, #680]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a68:	e015      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 feff 	bl	8009874 <RCCEx_PLL2_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a7a:	e00c      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	2102      	movs	r1, #2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 ffa8 	bl	80099d8 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a8c:	e003      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
      break;
 8007a92:	e000      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d109      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a9c:	4b9b      	ldr	r3, [pc, #620]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa8:	4998      	ldr	r1, [pc, #608]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	650b      	str	r3, [r1, #80]	; 0x50
 8007aae:	e001      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d03d      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d826      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007ac8:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007ae5 	.word	0x08007ae5
 8007ad4:	08007af3 	.word	0x08007af3
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	08007b1d 	.word	0x08007b1d
 8007ae0:	08007b1d 	.word	0x08007b1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae4:	4b89      	ldr	r3, [pc, #548]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	4a88      	ldr	r2, [pc, #544]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007af0:	e015      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 febb 	bl	8009874 <RCCEx_PLL2_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b02:	e00c      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3324      	adds	r3, #36	; 0x24
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 ff64 	bl	80099d8 <RCCEx_PLL3_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b14:	e003      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1a:	e000      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b24:	4b79      	ldr	r3, [pc, #484]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b28:	f023 0207 	bic.w	r2, r3, #7
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b30:	4976      	ldr	r1, [pc, #472]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	650b      	str	r3, [r1, #80]	; 0x50
 8007b36:	e001      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d051      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b4e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b52:	d036      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b54:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b58:	d830      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b5e:	d032      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007b60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b64:	d82a      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b6a:	d02e      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007b6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b70:	d824      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b76:	d018      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b7c:	d81e      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b86:	d007      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007b88:	e018      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8a:	4b60      	ldr	r3, [pc, #384]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	4a5f      	ldr	r2, [pc, #380]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b96:	e019      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 fe68 	bl	8009874 <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007ba8:	e010      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3324      	adds	r3, #36	; 0x24
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 ff11 	bl	80099d8 <RCCEx_PLL3_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bba:	e007      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc0:	e004      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e002      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bd2:	4b4e      	ldr	r3, [pc, #312]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007be0:	494a      	ldr	r1, [pc, #296]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	658b      	str	r3, [r1, #88]	; 0x58
 8007be6:	e001      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d051      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bfe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007c02:	d036      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007c04:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007c08:	d830      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c0e:	d032      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007c10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c14:	d82a      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c1a:	d02e      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007c1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c20:	d824      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c26:	d018      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007c28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c2c:	d81e      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007c32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c36:	d007      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007c38:	e018      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c3a:	4b34      	ldr	r3, [pc, #208]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	4a33      	ldr	r2, [pc, #204]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c46:	e019      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 fe10 	bl	8009874 <RCCEx_PLL2_Config>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c58:	e010      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3324      	adds	r3, #36	; 0x24
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 feb9 	bl	80099d8 <RCCEx_PLL3_Config>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c6a:	e007      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c70:	e004      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c72:	bf00      	nop
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c76:	bf00      	nop
 8007c78:	e000      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c82:	4b22      	ldr	r3, [pc, #136]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c86:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c90:	491e      	ldr	r1, [pc, #120]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	658b      	str	r3, [r1, #88]	; 0x58
 8007c96:	e001      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d035      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cac:	2b30      	cmp	r3, #48	; 0x30
 8007cae:	d01c      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cb0:	2b30      	cmp	r3, #48	; 0x30
 8007cb2:	d817      	bhi.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	d00c      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d813      	bhi.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d016      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007cc0:	2b10      	cmp	r3, #16
 8007cc2:	d10f      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc4:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007cd0:	e00e      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	2102      	movs	r1, #2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 fdcb 	bl	8009874 <RCCEx_PLL2_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007ce2:	e005      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce8:	e002      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007cea:	bf00      	nop
 8007cec:	e000      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10c      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d02:	4902      	ldr	r1, [pc, #8]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d08:	e004      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007d0a:	bf00      	nop
 8007d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d047      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d28:	d030      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007d2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d2e:	d82a      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d34:	d02c      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007d36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d3a:	d824      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d40:	d018      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d46:	d81e      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d50:	d007      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d52:	e018      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d54:	4bac      	ldr	r3, [pc, #688]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4aab      	ldr	r2, [pc, #684]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d60:	e017      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3304      	adds	r3, #4
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 fd83 	bl	8009874 <RCCEx_PLL2_Config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d72:	e00e      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3324      	adds	r3, #36	; 0x24
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fe2c 	bl	80099d8 <RCCEx_PLL3_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d84:	e005      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8a:	e002      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007d8c:	bf00      	nop
 8007d8e:	e000      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d98:	4b9b      	ldr	r3, [pc, #620]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da4:	4998      	ldr	r1, [pc, #608]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	650b      	str	r3, [r1, #80]	; 0x50
 8007daa:	e001      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d049      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dc4:	d02e      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dca:	d828      	bhi.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd0:	d02a      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd6:	d822      	bhi.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007dd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ddc:	d026      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007dde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007de2:	d81c      	bhi.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de8:	d010      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dee:	d816      	bhi.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01d      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df8:	d111      	bne.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	2101      	movs	r1, #1
 8007e00:	4618      	mov	r0, r3
 8007e02:	f001 fd37 	bl	8009874 <RCCEx_PLL2_Config>
 8007e06:	4603      	mov	r3, r0
 8007e08:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e0a:	e012      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3324      	adds	r3, #36	; 0x24
 8007e10:	2101      	movs	r1, #1
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fde0 	bl	80099d8 <RCCEx_PLL3_Config>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e1c:	e009      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	75fb      	strb	r3, [r7, #23]
      break;
 8007e22:	e006      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e24:	bf00      	nop
 8007e26:	e004      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e28:	bf00      	nop
 8007e2a:	e002      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e000      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e38:	4b73      	ldr	r3, [pc, #460]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e44:	4970      	ldr	r1, [pc, #448]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	650b      	str	r3, [r1, #80]	; 0x50
 8007e4a:	e001      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d04b      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e66:	d02e      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e6c:	d828      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e72:	d02a      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e78:	d822      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e7e:	d026      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007e80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e84:	d81c      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8a:	d010      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e90:	d816      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d01d      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e9a:	d111      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f001 fce6 	bl	8009874 <RCCEx_PLL2_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007eac:	e012      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3324      	adds	r3, #36	; 0x24
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 fd8f 	bl	80099d8 <RCCEx_PLL3_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ebe:	e009      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec4:	e006      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007ec6:	bf00      	nop
 8007ec8:	e004      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007eca:	bf00      	nop
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007eda:	4b4b      	ldr	r3, [pc, #300]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ede:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ee8:	4947      	ldr	r1, [pc, #284]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	658b      	str	r3, [r1, #88]	; 0x58
 8007eee:	e001      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d02f      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f08:	d00e      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f0e:	d814      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d015      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f18:	d10f      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1a:	4b3b      	ldr	r3, [pc, #236]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	4a3a      	ldr	r2, [pc, #232]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f26:	e00c      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 fca0 	bl	8009874 <RCCEx_PLL2_Config>
 8007f34:	4603      	mov	r3, r0
 8007f36:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f38:	e003      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3e:	e000      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f48:	4b2f      	ldr	r3, [pc, #188]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f54:	492c      	ldr	r1, [pc, #176]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	650b      	str	r3, [r1, #80]	; 0x50
 8007f5a:	e001      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d032      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d81b      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fb3 	.word	0x08007fb3
 8007f80:	08007f8d 	.word	0x08007f8d
 8007f84:	08007f9b 	.word	0x08007f9b
 8007f88:	08007fb3 	.word	0x08007fb3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f8c:	4b1e      	ldr	r3, [pc, #120]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	4a1d      	ldr	r2, [pc, #116]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f98:	e00c      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	2102      	movs	r1, #2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fc67 	bl	8009874 <RCCEx_PLL2_Config>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007faa:	e003      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb0:	e000      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d109      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fba:	4b13      	ldr	r3, [pc, #76]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fbe:	f023 0203 	bic.w	r2, r3, #3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	4910      	ldr	r1, [pc, #64]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fcc:	e001      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 808a 	beq.w	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a09      	ldr	r2, [pc, #36]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fec:	f7f9 fcf2 	bl	80019d4 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ff2:	e00d      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff4:	f7f9 fcee 	bl	80019d4 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b64      	cmp	r3, #100	; 0x64
 8008000:	d906      	bls.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	75fb      	strb	r3, [r7, #23]
        break;
 8008006:	e009      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008008:	58024400 	.word	0x58024400
 800800c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008010:	4bb9      	ldr	r3, [pc, #740]	; (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0eb      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d166      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008022:	4bb6      	ldr	r3, [pc, #728]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800802c:	4053      	eors	r3, r2
 800802e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008032:	2b00      	cmp	r3, #0
 8008034:	d013      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008036:	4bb1      	ldr	r3, [pc, #708]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800803e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008040:	4bae      	ldr	r3, [pc, #696]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008044:	4aad      	ldr	r2, [pc, #692]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800804a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800804c:	4bab      	ldr	r3, [pc, #684]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800804e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008050:	4aaa      	ldr	r2, [pc, #680]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008056:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008058:	4aa8      	ldr	r2, [pc, #672]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008068:	d115      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806a:	f7f9 fcb3 	bl	80019d4 <HAL_GetTick>
 800806e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008070:	e00b      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008072:	f7f9 fcaf 	bl	80019d4 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008080:	4293      	cmp	r3, r2
 8008082:	d902      	bls.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	75fb      	strb	r3, [r7, #23]
            break;
 8008088:	e005      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800808a:	4b9c      	ldr	r3, [pc, #624]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800808c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0ed      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d126      	bne.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080aa:	d10d      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80080ac:	4b93      	ldr	r3, [pc, #588]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080ba:	0919      	lsrs	r1, r3, #4
 80080bc:	4b90      	ldr	r3, [pc, #576]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80080be:	400b      	ands	r3, r1
 80080c0:	498e      	ldr	r1, [pc, #568]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	610b      	str	r3, [r1, #16]
 80080c6:	e005      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80080c8:	4b8c      	ldr	r3, [pc, #560]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	4a8b      	ldr	r2, [pc, #556]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080d2:	6113      	str	r3, [r2, #16]
 80080d4:	4b89      	ldr	r3, [pc, #548]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080e2:	4986      	ldr	r1, [pc, #536]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	670b      	str	r3, [r1, #112]	; 0x70
 80080e8:	e004      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	75bb      	strb	r3, [r7, #22]
 80080ee:	e001      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d07e      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008104:	2b28      	cmp	r3, #40	; 0x28
 8008106:	d867      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008108:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	080081df 	.word	0x080081df
 8008114:	080081d9 	.word	0x080081d9
 8008118:	080081d9 	.word	0x080081d9
 800811c:	080081d9 	.word	0x080081d9
 8008120:	080081d9 	.word	0x080081d9
 8008124:	080081d9 	.word	0x080081d9
 8008128:	080081d9 	.word	0x080081d9
 800812c:	080081d9 	.word	0x080081d9
 8008130:	080081b5 	.word	0x080081b5
 8008134:	080081d9 	.word	0x080081d9
 8008138:	080081d9 	.word	0x080081d9
 800813c:	080081d9 	.word	0x080081d9
 8008140:	080081d9 	.word	0x080081d9
 8008144:	080081d9 	.word	0x080081d9
 8008148:	080081d9 	.word	0x080081d9
 800814c:	080081d9 	.word	0x080081d9
 8008150:	080081c7 	.word	0x080081c7
 8008154:	080081d9 	.word	0x080081d9
 8008158:	080081d9 	.word	0x080081d9
 800815c:	080081d9 	.word	0x080081d9
 8008160:	080081d9 	.word	0x080081d9
 8008164:	080081d9 	.word	0x080081d9
 8008168:	080081d9 	.word	0x080081d9
 800816c:	080081d9 	.word	0x080081d9
 8008170:	080081df 	.word	0x080081df
 8008174:	080081d9 	.word	0x080081d9
 8008178:	080081d9 	.word	0x080081d9
 800817c:	080081d9 	.word	0x080081d9
 8008180:	080081d9 	.word	0x080081d9
 8008184:	080081d9 	.word	0x080081d9
 8008188:	080081d9 	.word	0x080081d9
 800818c:	080081d9 	.word	0x080081d9
 8008190:	080081df 	.word	0x080081df
 8008194:	080081d9 	.word	0x080081d9
 8008198:	080081d9 	.word	0x080081d9
 800819c:	080081d9 	.word	0x080081d9
 80081a0:	080081d9 	.word	0x080081d9
 80081a4:	080081d9 	.word	0x080081d9
 80081a8:	080081d9 	.word	0x080081d9
 80081ac:	080081d9 	.word	0x080081d9
 80081b0:	080081df 	.word	0x080081df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3304      	adds	r3, #4
 80081b8:	2101      	movs	r1, #1
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 fb5a 	bl	8009874 <RCCEx_PLL2_Config>
 80081c0:	4603      	mov	r3, r0
 80081c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081c4:	e00c      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3324      	adds	r3, #36	; 0x24
 80081ca:	2101      	movs	r1, #1
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 fc03 	bl	80099d8 <RCCEx_PLL3_Config>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081d6:	e003      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	75fb      	strb	r3, [r7, #23]
      break;
 80081dc:	e000      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80081de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d109      	bne.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081e6:	4b45      	ldr	r3, [pc, #276]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f2:	4942      	ldr	r1, [pc, #264]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	654b      	str	r3, [r1, #84]	; 0x54
 80081f8:	e001      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d037      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820e:	2b05      	cmp	r3, #5
 8008210:	d820      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	0800825b 	.word	0x0800825b
 800821c:	08008231 	.word	0x08008231
 8008220:	08008243 	.word	0x08008243
 8008224:	0800825b 	.word	0x0800825b
 8008228:	0800825b 	.word	0x0800825b
 800822c:	0800825b 	.word	0x0800825b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3304      	adds	r3, #4
 8008234:	2101      	movs	r1, #1
 8008236:	4618      	mov	r0, r3
 8008238:	f001 fb1c 	bl	8009874 <RCCEx_PLL2_Config>
 800823c:	4603      	mov	r3, r0
 800823e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008240:	e00c      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3324      	adds	r3, #36	; 0x24
 8008246:	2101      	movs	r1, #1
 8008248:	4618      	mov	r0, r3
 800824a:	f001 fbc5 	bl	80099d8 <RCCEx_PLL3_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008252:	e003      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
      break;
 8008258:	e000      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800825a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008262:	4b26      	ldr	r3, [pc, #152]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	f023 0207 	bic.w	r2, r3, #7
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	4923      	ldr	r1, [pc, #140]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008270:	4313      	orrs	r3, r2
 8008272:	654b      	str	r3, [r1, #84]	; 0x54
 8008274:	e001      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d040      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800828c:	2b05      	cmp	r3, #5
 800828e:	d821      	bhi.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082db 	.word	0x080082db
 800829c:	080082b1 	.word	0x080082b1
 80082a0:	080082c3 	.word	0x080082c3
 80082a4:	080082db 	.word	0x080082db
 80082a8:	080082db 	.word	0x080082db
 80082ac:	080082db 	.word	0x080082db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3304      	adds	r3, #4
 80082b4:	2101      	movs	r1, #1
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 fadc 	bl	8009874 <RCCEx_PLL2_Config>
 80082bc:	4603      	mov	r3, r0
 80082be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082c0:	e00c      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3324      	adds	r3, #36	; 0x24
 80082c6:	2101      	movs	r1, #1
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 fb85 	bl	80099d8 <RCCEx_PLL3_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082d2:	e003      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	e000      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80082da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d110      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80082e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e6:	f023 0207 	bic.w	r2, r3, #7
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f0:	4902      	ldr	r1, [pc, #8]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	658b      	str	r3, [r1, #88]	; 0x58
 80082f6:	e007      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80082f8:	58024800 	.word	0x58024800
 80082fc:	58024400 	.word	0x58024400
 8008300:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d04b      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800831e:	d02e      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008324:	d828      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832a:	d02a      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800832c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008330:	d822      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008332:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008336:	d026      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008338:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800833c:	d81c      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800833e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008342:	d010      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008348:	d816      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01d      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800834e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008352:	d111      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3304      	adds	r3, #4
 8008358:	2100      	movs	r1, #0
 800835a:	4618      	mov	r0, r3
 800835c:	f001 fa8a 	bl	8009874 <RCCEx_PLL2_Config>
 8008360:	4603      	mov	r3, r0
 8008362:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008364:	e012      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3324      	adds	r3, #36	; 0x24
 800836a:	2102      	movs	r1, #2
 800836c:	4618      	mov	r0, r3
 800836e:	f001 fb33 	bl	80099d8 <RCCEx_PLL3_Config>
 8008372:	4603      	mov	r3, r0
 8008374:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008376:	e009      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	75fb      	strb	r3, [r7, #23]
      break;
 800837c:	e006      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800837e:	bf00      	nop
 8008380:	e004      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008382:	bf00      	nop
 8008384:	e002      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008386:	bf00      	nop
 8008388:	e000      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800838a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008392:	4bb2      	ldr	r3, [pc, #712]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a0:	49ae      	ldr	r1, [pc, #696]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	654b      	str	r3, [r1, #84]	; 0x54
 80083a6:	e001      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d04b      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083c2:	d02e      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80083c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083c8:	d828      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ce:	d02a      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80083d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d4:	d822      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083da:	d026      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80083dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e0:	d81c      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e6:	d010      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80083e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ec:	d816      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d01d      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80083f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f6:	d111      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	2100      	movs	r1, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 fa38 	bl	8009874 <RCCEx_PLL2_Config>
 8008404:	4603      	mov	r3, r0
 8008406:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008408:	e012      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3324      	adds	r3, #36	; 0x24
 800840e:	2102      	movs	r1, #2
 8008410:	4618      	mov	r0, r3
 8008412:	f001 fae1 	bl	80099d8 <RCCEx_PLL3_Config>
 8008416:	4603      	mov	r3, r0
 8008418:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800841a:	e009      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	75fb      	strb	r3, [r7, #23]
      break;
 8008420:	e006      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008422:	bf00      	nop
 8008424:	e004      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008426:	bf00      	nop
 8008428:	e002      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800842a:	bf00      	nop
 800842c:	e000      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800842e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008436:	4b89      	ldr	r3, [pc, #548]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008444:	4985      	ldr	r1, [pc, #532]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008446:	4313      	orrs	r3, r2
 8008448:	658b      	str	r3, [r1, #88]	; 0x58
 800844a:	e001      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008458:	2b00      	cmp	r3, #0
 800845a:	d04b      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008462:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008466:	d02e      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008468:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800846c:	d828      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800846e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008472:	d02a      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008478:	d822      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800847a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800847e:	d026      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008480:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008484:	d81c      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800848a:	d010      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800848c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008490:	d816      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01d      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849a:	d111      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3304      	adds	r3, #4
 80084a0:	2100      	movs	r1, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 f9e6 	bl	8009874 <RCCEx_PLL2_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084ac:	e012      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3324      	adds	r3, #36	; 0x24
 80084b2:	2102      	movs	r1, #2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 fa8f 	bl	80099d8 <RCCEx_PLL3_Config>
 80084ba:	4603      	mov	r3, r0
 80084bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084be:	e009      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	75fb      	strb	r3, [r7, #23]
      break;
 80084c4:	e006      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084c6:	bf00      	nop
 80084c8:	e004      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084ca:	bf00      	nop
 80084cc:	e002      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084ce:	bf00      	nop
 80084d0:	e000      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084da:	4b60      	ldr	r3, [pc, #384]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084e8:	495c      	ldr	r1, [pc, #368]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	658b      	str	r3, [r1, #88]	; 0x58
 80084ee:	e001      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d018      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008508:	d10a      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3324      	adds	r3, #36	; 0x24
 800850e:	2102      	movs	r1, #2
 8008510:	4618      	mov	r0, r3
 8008512:	f001 fa61 	bl	80099d8 <RCCEx_PLL3_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008520:	4b4e      	ldr	r3, [pc, #312]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008524:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800852c:	494b      	ldr	r1, [pc, #300]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800852e:	4313      	orrs	r3, r2
 8008530:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2b00      	cmp	r3, #0
 800853c:	d01a      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008548:	d10a      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3324      	adds	r3, #36	; 0x24
 800854e:	2102      	movs	r1, #2
 8008550:	4618      	mov	r0, r3
 8008552:	f001 fa41 	bl	80099d8 <RCCEx_PLL3_Config>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008560:	4b3e      	ldr	r3, [pc, #248]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800856e:	493b      	ldr	r1, [pc, #236]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008570:	4313      	orrs	r3, r2
 8008572:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d034      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800858a:	d01d      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800858c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008590:	d817      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859a:	d009      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800859c:	e011      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3304      	adds	r3, #4
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 f965 	bl	8009874 <RCCEx_PLL2_Config>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085ae:	e00c      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3324      	adds	r3, #36	; 0x24
 80085b4:	2102      	movs	r1, #2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 fa0e 	bl	80099d8 <RCCEx_PLL3_Config>
 80085bc:	4603      	mov	r3, r0
 80085be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085c0:	e003      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	75fb      	strb	r3, [r7, #23]
      break;
 80085c6:	e000      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80085c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085d0:	4b22      	ldr	r3, [pc, #136]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085de:	491f      	ldr	r1, [pc, #124]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	658b      	str	r3, [r1, #88]	; 0x58
 80085e4:	e001      	b.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d036      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008600:	d01c      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008602:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008606:	d816      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800860c:	d003      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800860e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008612:	d007      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008614:	e00f      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008616:	4b11      	ldr	r3, [pc, #68]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861a:	4a10      	ldr	r2, [pc, #64]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800861c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008620:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008622:	e00c      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3324      	adds	r3, #36	; 0x24
 8008628:	2101      	movs	r1, #1
 800862a:	4618      	mov	r0, r3
 800862c:	f001 f9d4 	bl	80099d8 <RCCEx_PLL3_Config>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008634:	e003      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	75fb      	strb	r3, [r7, #23]
      break;
 800863a:	e000      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800863c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10d      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008644:	4b05      	ldr	r3, [pc, #20]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008652:	4902      	ldr	r1, [pc, #8]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008654:	4313      	orrs	r3, r2
 8008656:	654b      	str	r3, [r1, #84]	; 0x54
 8008658:	e004      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800865a:	bf00      	nop
 800865c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d029      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867c:	d007      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800867e:	e00f      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008680:	4b61      	ldr	r3, [pc, #388]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4a60      	ldr	r2, [pc, #384]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800868a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800868c:	e00b      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	2102      	movs	r1, #2
 8008694:	4618      	mov	r0, r3
 8008696:	f001 f8ed 	bl	8009874 <RCCEx_PLL2_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800869e:	e002      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	75fb      	strb	r3, [r7, #23]
      break;
 80086a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d109      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086ac:	4b56      	ldr	r3, [pc, #344]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b8:	4953      	ldr	r1, [pc, #332]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086be:	e001      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3324      	adds	r3, #36	; 0x24
 80086d4:	2102      	movs	r1, #2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 f97e 	bl	80099d8 <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d030      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086fa:	d017      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008700:	d811      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008706:	d013      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800870c:	d80b      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d010      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008716:	d106      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008718:	4b3b      	ldr	r3, [pc, #236]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	4a3a      	ldr	r2, [pc, #232]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800871e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008722:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008724:	e007      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
      break;
 800872a:	e004      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800872c:	bf00      	nop
 800872e:	e002      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008730:	bf00      	nop
 8008732:	e000      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800873c:	4b32      	ldr	r3, [pc, #200]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800873e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008748:	492f      	ldr	r1, [pc, #188]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800874a:	4313      	orrs	r3, r2
 800874c:	654b      	str	r3, [r1, #84]	; 0x54
 800874e:	e001      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008760:	4b29      	ldr	r3, [pc, #164]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008764:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800876c:	4926      	ldr	r1, [pc, #152]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800876e:	4313      	orrs	r3, r2
 8008770:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800877e:	4b22      	ldr	r3, [pc, #136]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008782:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878a:	491f      	ldr	r1, [pc, #124]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800878c:	4313      	orrs	r3, r2
 800878e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00d      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800879c:	4b1a      	ldr	r3, [pc, #104]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	4a19      	ldr	r2, [pc, #100]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087a6:	6113      	str	r3, [r2, #16]
 80087a8:	4b17      	ldr	r3, [pc, #92]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087aa:	691a      	ldr	r2, [r3, #16]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087b2:	4915      	ldr	r1, [pc, #84]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da08      	bge.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087c0:	4b11      	ldr	r3, [pc, #68]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087cc:	490e      	ldr	r1, [pc, #56]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d009      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80087de:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ec:	4906      	ldr	r1, [pc, #24]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80087f2:	7dbb      	ldrb	r3, [r7, #22]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	e000      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	58024400 	.word	0x58024400

0800880c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b090      	sub	sp, #64	; 0x40
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800881a:	f040 8089 	bne.w	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800881e:	4b95      	ldr	r3, [pc, #596]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	633b      	str	r3, [r7, #48]	; 0x30
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	2b04      	cmp	r3, #4
 800882c:	d87d      	bhi.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800882e:	a201      	add	r2, pc, #4	; (adr r2, 8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	08008849 	.word	0x08008849
 8008838:	0800886d 	.word	0x0800886d
 800883c:	08008891 	.word	0x08008891
 8008840:	08008925 	.word	0x08008925
 8008844:	080088b5 	.word	0x080088b5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008848:	4b8a      	ldr	r3, [pc, #552]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008854:	d107      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800885a:	4618      	mov	r0, r3
 800885c:	f000 feb8 	bl	80095d0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008864:	e3ed      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800886a:	e3ea      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800886c:	4b81      	ldr	r3, [pc, #516]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008878:	d107      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887a:	f107 0318 	add.w	r3, r7, #24
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fbfe 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008888:	e3db      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800888e:	e3d8      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008890:	4b78      	ldr	r3, [pc, #480]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800889c:	d107      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889e:	f107 030c 	add.w	r3, r7, #12
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fd40 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088ac:	e3c9      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088b2:	e3c6      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088b4:	4b6f      	ldr	r3, [pc, #444]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088be:	4b6d      	ldr	r3, [pc, #436]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d10c      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80088ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d109      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088d0:	4b68      	ldr	r3, [pc, #416]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	08db      	lsrs	r3, r3, #3
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	4a67      	ldr	r2, [pc, #412]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80088dc:	fa22 f303 	lsr.w	r3, r2, r3
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e2:	e01e      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088e4:	4b63      	ldr	r3, [pc, #396]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f0:	d106      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80088f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088f8:	d102      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088fa:	4b60      	ldr	r3, [pc, #384]	; (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088fe:	e010      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008900:	4b5c      	ldr	r3, [pc, #368]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800890c:	d106      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008914:	d102      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008916:	4b5a      	ldr	r3, [pc, #360]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891a:	e002      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008920:	e38f      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008922:	e38e      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008924:	4b57      	ldr	r3, [pc, #348]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008928:	e38b      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800892e:	e388      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008936:	f040 80a7 	bne.w	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800893a:	4b4e      	ldr	r3, [pc, #312]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800893c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008942:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800894a:	d054      	beq.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008952:	f200 808b 	bhi.w	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800895c:	f000 8083 	beq.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008966:	f200 8081 	bhi.w	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008970:	d02f      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008978:	d878      	bhi.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008986:	d012      	beq.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008988:	e070      	b.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800898a:	4b3a      	ldr	r3, [pc, #232]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008996:	d107      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fe17 	bl	80095d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089a6:	e34c      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ac:	e349      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ae:	4b31      	ldr	r3, [pc, #196]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089ba:	d107      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089bc:	f107 0318 	add.w	r3, r7, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fb5d 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089ca:	e33a      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d0:	e337      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089d2:	4b28      	ldr	r3, [pc, #160]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089de:	d107      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e0:	f107 030c 	add.w	r3, r7, #12
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fc9f 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089ee:	e328      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089f4:	e325      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089f6:	4b1f      	ldr	r3, [pc, #124]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089fe:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a00:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a12:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	08db      	lsrs	r3, r3, #3
 8008a18:	f003 0303 	and.w	r3, r3, #3
 8008a1c:	4a16      	ldr	r2, [pc, #88]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a24:	e01e      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a26:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a32:	d106      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a3a:	d102      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a40:	e010      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a42:	4b0c      	ldr	r3, [pc, #48]	; (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a4e:	d106      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a56:	d102      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a58:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a5c:	e002      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a62:	e2ee      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a64:	e2ed      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a66:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a6a:	e2ea      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a70:	e2e7      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a72:	bf00      	nop
 8008a74:	58024400 	.word	0x58024400
 8008a78:	03d09000 	.word	0x03d09000
 8008a7c:	003d0900 	.word	0x003d0900
 8008a80:	017d7840 	.word	0x017d7840
 8008a84:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a8e:	f040 809c 	bne.w	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008a92:	4b9e      	ldr	r3, [pc, #632]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a96:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aa2:	d054      	beq.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aaa:	f200 808b 	bhi.w	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ab4:	f000 8083 	beq.w	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008abe:	f200 8081 	bhi.w	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ac8:	d02f      	beq.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ad0:	d878      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ade:	d012      	beq.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008ae0:	e070      	b.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ae2:	4b8a      	ldr	r3, [pc, #552]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aee:	d107      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fd6b 	bl	80095d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008afe:	e2a0      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b04:	e29d      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b06:	4b81      	ldr	r3, [pc, #516]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b12:	d107      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b14:	f107 0318 	add.w	r3, r7, #24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fab1 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008b22:	e28e      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b28:	e28b      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b2a:	4b78      	ldr	r3, [pc, #480]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b36:	d107      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b38:	f107 030c 	add.w	r3, r7, #12
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fbf3 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b46:	e27c      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b4c:	e279      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b4e:	4b6f      	ldr	r3, [pc, #444]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b56:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b58:	4b6c      	ldr	r3, [pc, #432]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d10c      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b6a:	4b68      	ldr	r3, [pc, #416]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	08db      	lsrs	r3, r3, #3
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	4a66      	ldr	r2, [pc, #408]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b76:	fa22 f303 	lsr.w	r3, r2, r3
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b7c:	e01e      	b.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b7e:	4b63      	ldr	r3, [pc, #396]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8a:	d106      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b92:	d102      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b94:	4b5f      	ldr	r3, [pc, #380]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b98:	e010      	b.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b9a:	4b5c      	ldr	r3, [pc, #368]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ba6:	d106      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bae:	d102      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008bb0:	4b59      	ldr	r3, [pc, #356]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb4:	e002      	b.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008bba:	e242      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008bbc:	e241      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bbe:	4b57      	ldr	r3, [pc, #348]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bc2:	e23e      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bc8:	e23b      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd0:	f040 80a6 	bne.w	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008bd4:	4b4d      	ldr	r3, [pc, #308]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bdc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008be4:	d054      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bec:	f200 808b 	bhi.w	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bf6:	f000 8083 	beq.w	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c00:	f200 8081 	bhi.w	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0a:	d02f      	beq.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c12:	d878      	bhi.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c20:	d012      	beq.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8008c22:	e070      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c24:	4b39      	ldr	r3, [pc, #228]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c30:	d107      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fcca 	bl	80095d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c40:	e1ff      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c46:	e1fc      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c48:	4b30      	ldr	r3, [pc, #192]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c54:	d107      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c56:	f107 0318 	add.w	r3, r7, #24
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fa10 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c64:	e1ed      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6a:	e1ea      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c6c:	4b27      	ldr	r3, [pc, #156]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c78:	d107      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7a:	f107 030c 	add.w	r3, r7, #12
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fb52 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c88:	e1db      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c8e:	e1d8      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c90:	4b1e      	ldr	r3, [pc, #120]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c98:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c9a:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0304 	and.w	r3, r3, #4
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d10c      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d109      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cac:	4b17      	ldr	r3, [pc, #92]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	08db      	lsrs	r3, r3, #3
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	4a16      	ldr	r2, [pc, #88]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cbe:	e01e      	b.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cc0:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ccc:	d106      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cd4:	d102      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008cd6:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cda:	e010      	b.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cdc:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ce8:	d106      	bne.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf0:	d102      	bne.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf6:	e002      	b.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008cfc:	e1a1      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008cfe:	e1a0      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d04:	e19d      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d0a:	e19a      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	03d09000 	.word	0x03d09000
 8008d14:	003d0900 	.word	0x003d0900
 8008d18:	017d7840 	.word	0x017d7840
 8008d1c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d26:	d173      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008d28:	4b9a      	ldr	r3, [pc, #616]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d38:	d02f      	beq.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d40:	d863      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d4e:	d012      	beq.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008d50:	e05b      	b.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d52:	4b90      	ldr	r3, [pc, #576]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d5e:	d107      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d60:	f107 0318 	add.w	r3, r7, #24
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 f98b 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d6e:	e168      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d74:	e165      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d76:	4b87      	ldr	r3, [pc, #540]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d82:	d107      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d84:	f107 030c 	add.w	r3, r7, #12
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 facd 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d92:	e156      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d98:	e153      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d9a:	4b7e      	ldr	r3, [pc, #504]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008da4:	4b7b      	ldr	r3, [pc, #492]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d10c      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d109      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008db6:	4b77      	ldr	r3, [pc, #476]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	08db      	lsrs	r3, r3, #3
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	4a75      	ldr	r2, [pc, #468]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc8:	e01e      	b.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dca:	4b72      	ldr	r3, [pc, #456]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd6:	d106      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dde:	d102      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008de0:	4b6e      	ldr	r3, [pc, #440]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de4:	e010      	b.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008de6:	4b6b      	ldr	r3, [pc, #428]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008df2:	d106      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dfa:	d102      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008dfc:	4b68      	ldr	r3, [pc, #416]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e06:	e11c      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008e08:	e11b      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e0e:	e118      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e16:	d133      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008e18:	4b5e      	ldr	r3, [pc, #376]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e2e:	d012      	beq.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008e30:	e023      	b.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e32:	4b58      	ldr	r3, [pc, #352]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e3e:	d107      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fbc3 	bl	80095d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e4e:	e0f8      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e54:	e0f5      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e56:	4b4f      	ldr	r3, [pc, #316]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e62:	d107      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f909 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e72:	e0e6      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e78:	e0e3      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7e:	e0e0      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e86:	f040 808d 	bne.w	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008e8a:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008e92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e9a:	d06b      	beq.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ea2:	d874      	bhi.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eaa:	d056      	beq.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb2:	d86c      	bhi.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eba:	d03b      	beq.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ec2:	d864      	bhi.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eca:	d021      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed2:	d85c      	bhi.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d004      	beq.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee0:	d004      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008ee2:	e054      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ee4:	f000 f8b6 	bl	8009054 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ee8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008eea:	e0aa      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eec:	4b29      	ldr	r3, [pc, #164]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ef8:	d107      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008efa:	f107 0318 	add.w	r3, r7, #24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 f8be 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f08:	e09b      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0e:	e098      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f10:	4b20      	ldr	r3, [pc, #128]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f1c:	d107      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f1e:	f107 030c 	add.w	r3, r7, #12
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fa00 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f2c:	e089      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f32:	e086      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f34:	4b17      	ldr	r3, [pc, #92]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d109      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f40:	4b14      	ldr	r3, [pc, #80]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	08db      	lsrs	r3, r3, #3
 8008f46:	f003 0303 	and.w	r3, r3, #3
 8008f4a:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f52:	e076      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f54:	2300      	movs	r3, #0
 8008f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f58:	e073      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f5a:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f66:	d102      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008f68:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f6c:	e069      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f72:	e066      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f74:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f80:	d102      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008f82:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f86:	e05c      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f8c:	e059      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f92:	e056      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008f94:	58024400 	.word	0x58024400
 8008f98:	03d09000 	.word	0x03d09000
 8008f9c:	003d0900 	.word	0x003d0900
 8008fa0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008faa:	d148      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008fac:	4b27      	ldr	r3, [pc, #156]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fb4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fbc:	d02a      	beq.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc4:	d838      	bhi.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd2:	d00d      	beq.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008fd4:	e030      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fd6:	4b1d      	ldr	r3, [pc, #116]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fe2:	d102      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008fe4:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fe8:	e02b      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fee:	e028      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ff0:	4b16      	ldr	r3, [pc, #88]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ffc:	d107      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fae4 	bl	80095d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800900c:	e019      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009012:	e016      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009014:	4b0d      	ldr	r3, [pc, #52]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800901c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009020:	d107      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009022:	f107 0318 	add.w	r3, r7, #24
 8009026:	4618      	mov	r0, r3
 8009028:	f000 f82a 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009030:	e007      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009036:	e004      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800903c:	e001      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009044:	4618      	mov	r0, r3
 8009046:	3740      	adds	r7, #64	; 0x40
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	58024400 	.word	0x58024400
 8009050:	017d7840 	.word	0x017d7840

08009054 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009058:	f7fe fc82 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 800905c:	4602      	mov	r2, r0
 800905e:	4b06      	ldr	r3, [pc, #24]	; (8009078 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	091b      	lsrs	r3, r3, #4
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	4904      	ldr	r1, [pc, #16]	; (800907c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800906a:	5ccb      	ldrb	r3, [r1, r3]
 800906c:	f003 031f 	and.w	r3, r3, #31
 8009070:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009074:	4618      	mov	r0, r3
 8009076:	bd80      	pop	{r7, pc}
 8009078:	58024400 	.word	0x58024400
 800907c:	0800dab8 	.word	0x0800dab8

08009080 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009080:	b480      	push	{r7}
 8009082:	b089      	sub	sp, #36	; 0x24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009088:	4ba1      	ldr	r3, [pc, #644]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908c:	f003 0303 	and.w	r3, r3, #3
 8009090:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009092:	4b9f      	ldr	r3, [pc, #636]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	0b1b      	lsrs	r3, r3, #12
 8009098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800909c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800909e:	4b9c      	ldr	r3, [pc, #624]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	091b      	lsrs	r3, r3, #4
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80090aa:	4b99      	ldr	r3, [pc, #612]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ae:	08db      	lsrs	r3, r3, #3
 80090b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	fb02 f303 	mul.w	r3, r2, r3
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8111 	beq.w	80092f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	f000 8083 	beq.w	80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b02      	cmp	r3, #2
 80090da:	f200 80a1 	bhi.w	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d056      	beq.n	8009198 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090ea:	e099      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090ec:	4b88      	ldr	r3, [pc, #544]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0320 	and.w	r3, r3, #32
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d02d      	beq.n	8009154 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090f8:	4b85      	ldr	r3, [pc, #532]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	08db      	lsrs	r3, r3, #3
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	4a84      	ldr	r2, [pc, #528]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009104:	fa22 f303 	lsr.w	r3, r2, r3
 8009108:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009122:	4b7b      	ldr	r3, [pc, #492]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009132:	ed97 6a03 	vldr	s12, [r7, #12]
 8009136:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800913a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800914a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009152:	e087      	b.n	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800931c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009166:	4b6a      	ldr	r3, [pc, #424]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009176:	ed97 6a03 	vldr	s12, [r7, #12]
 800917a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800917e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800918a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009196:	e065      	b.n	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091aa:	4b59      	ldr	r3, [pc, #356]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80091be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091da:	e043      	b.n	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ee:	4b48      	ldr	r3, [pc, #288]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009202:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800921e:	e021      	b.n	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800922e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009232:	4b37      	ldr	r3, [pc, #220]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009242:	ed97 6a03 	vldr	s12, [r7, #12]
 8009246:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800924a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009262:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009264:	4b2a      	ldr	r3, [pc, #168]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	0a5b      	lsrs	r3, r3, #9
 800926a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926e:	ee07 3a90 	vmov	s15, r3
 8009272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800927a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800927e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800928a:	ee17 2a90 	vmov	r2, s15
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009292:	4b1f      	ldr	r3, [pc, #124]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	0c1b      	lsrs	r3, r3, #16
 8009298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092b8:	ee17 2a90 	vmov	r2, s15
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80092c0:	4b13      	ldr	r3, [pc, #76]	; (8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	0e1b      	lsrs	r3, r3, #24
 80092c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092da:	edd7 6a07 	vldr	s13, [r7, #28]
 80092de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092e6:	ee17 2a90 	vmov	r2, s15
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092ee:	e008      	b.n	8009302 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	609a      	str	r2, [r3, #8]
}
 8009302:	bf00      	nop
 8009304:	3724      	adds	r7, #36	; 0x24
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	58024400 	.word	0x58024400
 8009314:	03d09000 	.word	0x03d09000
 8009318:	46000000 	.word	0x46000000
 800931c:	4c742400 	.word	0x4c742400
 8009320:	4a742400 	.word	0x4a742400
 8009324:	4bbebc20 	.word	0x4bbebc20

08009328 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009328:	b480      	push	{r7}
 800932a:	b089      	sub	sp, #36	; 0x24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009330:	4ba1      	ldr	r3, [pc, #644]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800933a:	4b9f      	ldr	r3, [pc, #636]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800933c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933e:	0d1b      	lsrs	r3, r3, #20
 8009340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009344:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009346:	4b9c      	ldr	r3, [pc, #624]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	0a1b      	lsrs	r3, r3, #8
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009352:	4b99      	ldr	r3, [pc, #612]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009356:	08db      	lsrs	r3, r3, #3
 8009358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	fb02 f303 	mul.w	r3, r2, r3
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 8111 	beq.w	8009598 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b02      	cmp	r3, #2
 800937a:	f000 8083 	beq.w	8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	2b02      	cmp	r3, #2
 8009382:	f200 80a1 	bhi.w	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d056      	beq.n	8009440 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009392:	e099      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009394:	4b88      	ldr	r3, [pc, #544]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	d02d      	beq.n	80093fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093a0:	4b85      	ldr	r3, [pc, #532]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	08db      	lsrs	r3, r3, #3
 80093a6:	f003 0303 	and.w	r3, r3, #3
 80093aa:	4a84      	ldr	r2, [pc, #528]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
 80093b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ca:	4b7b      	ldr	r3, [pc, #492]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093da:	ed97 6a03 	vldr	s12, [r7, #12]
 80093de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093fa:	e087      	b.n	800950c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	4b6a      	ldr	r3, [pc, #424]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009422:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800943e:	e065      	b.n	800950c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b59      	ldr	r3, [pc, #356]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a03 	vldr	s12, [r7, #12]
 8009466:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009482:	e043      	b.n	800950c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	4b48      	ldr	r3, [pc, #288]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094c6:	e021      	b.n	800950c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094da:	4b37      	ldr	r3, [pc, #220]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800950a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800950c:	4b2a      	ldr	r3, [pc, #168]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	0a5b      	lsrs	r3, r3, #9
 8009512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009526:	edd7 6a07 	vldr	s13, [r7, #28]
 800952a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800952e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009532:	ee17 2a90 	vmov	r2, s15
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800953a:	4b1f      	ldr	r3, [pc, #124]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	0c1b      	lsrs	r3, r3, #16
 8009540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009544:	ee07 3a90 	vmov	s15, r3
 8009548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009554:	edd7 6a07 	vldr	s13, [r7, #28]
 8009558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800955c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009560:	ee17 2a90 	vmov	r2, s15
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009568:	4b13      	ldr	r3, [pc, #76]	; (80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	0e1b      	lsrs	r3, r3, #24
 800956e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800957e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009582:	edd7 6a07 	vldr	s13, [r7, #28]
 8009586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800958a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800958e:	ee17 2a90 	vmov	r2, s15
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009596:	e008      	b.n	80095aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	609a      	str	r2, [r3, #8]
}
 80095aa:	bf00      	nop
 80095ac:	3724      	adds	r7, #36	; 0x24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	58024400 	.word	0x58024400
 80095bc:	03d09000 	.word	0x03d09000
 80095c0:	46000000 	.word	0x46000000
 80095c4:	4c742400 	.word	0x4c742400
 80095c8:	4a742400 	.word	0x4a742400
 80095cc:	4bbebc20 	.word	0x4bbebc20

080095d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b089      	sub	sp, #36	; 0x24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095d8:	4ba0      	ldr	r3, [pc, #640]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095dc:	f003 0303 	and.w	r3, r3, #3
 80095e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80095e2:	4b9e      	ldr	r3, [pc, #632]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e6:	091b      	lsrs	r3, r3, #4
 80095e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095ee:	4b9b      	ldr	r3, [pc, #620]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80095f8:	4b98      	ldr	r3, [pc, #608]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	fb02 f303 	mul.w	r3, r2, r3
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009610:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 8111 	beq.w	800983e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	2b02      	cmp	r3, #2
 8009620:	f000 8083 	beq.w	800972a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b02      	cmp	r3, #2
 8009628:	f200 80a1 	bhi.w	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d056      	beq.n	80096e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009638:	e099      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800963a:	4b88      	ldr	r3, [pc, #544]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d02d      	beq.n	80096a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009646:	4b85      	ldr	r3, [pc, #532]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	08db      	lsrs	r3, r3, #3
 800964c:	f003 0303 	and.w	r3, r3, #3
 8009650:	4a83      	ldr	r2, [pc, #524]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009652:	fa22 f303 	lsr.w	r3, r2, r3
 8009656:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	ee07 3a90 	vmov	s15, r3
 8009668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009670:	4b7a      	ldr	r3, [pc, #488]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009680:	ed97 6a03 	vldr	s12, [r7, #12]
 8009684:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096a0:	e087      	b.n	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009868 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b4:	4b69      	ldr	r3, [pc, #420]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096e4:	e065      	b.n	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800986c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80096f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f8:	4b58      	ldr	r3, [pc, #352]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009708:	ed97 6a03 	vldr	s12, [r7, #12]
 800970c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800971c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009728:	e043      	b.n	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009734:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009870 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973c:	4b47      	ldr	r3, [pc, #284]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009744:	ee07 3a90 	vmov	s15, r3
 8009748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009750:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800976c:	e021      	b.n	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009778:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009868 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800977c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009780:	4b36      	ldr	r3, [pc, #216]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009788:	ee07 3a90 	vmov	s15, r3
 800978c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009790:	ed97 6a03 	vldr	s12, [r7, #12]
 8009794:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80097b2:	4b2a      	ldr	r3, [pc, #168]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b6:	0a5b      	lsrs	r3, r3, #9
 80097b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097bc:	ee07 3a90 	vmov	s15, r3
 80097c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097d8:	ee17 2a90 	vmov	r2, s15
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80097e0:	4b1e      	ldr	r3, [pc, #120]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e4:	0c1b      	lsrs	r3, r3, #16
 80097e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80097fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009806:	ee17 2a90 	vmov	r2, s15
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800980e:	4b13      	ldr	r3, [pc, #76]	; (800985c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	0e1b      	lsrs	r3, r3, #24
 8009814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009824:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009828:	edd7 6a07 	vldr	s13, [r7, #28]
 800982c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009834:	ee17 2a90 	vmov	r2, s15
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800983c:	e008      	b.n	8009850 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	609a      	str	r2, [r3, #8]
}
 8009850:	bf00      	nop
 8009852:	3724      	adds	r7, #36	; 0x24
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	58024400 	.word	0x58024400
 8009860:	03d09000 	.word	0x03d09000
 8009864:	46000000 	.word	0x46000000
 8009868:	4c742400 	.word	0x4c742400
 800986c:	4a742400 	.word	0x4a742400
 8009870:	4bbebc20 	.word	0x4bbebc20

08009874 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009882:	4b53      	ldr	r3, [pc, #332]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d101      	bne.n	8009892 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e099      	b.n	80099c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009892:	4b4f      	ldr	r3, [pc, #316]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a4e      	ldr	r2, [pc, #312]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009898:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800989c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800989e:	f7f8 f899 	bl	80019d4 <HAL_GetTick>
 80098a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098a4:	e008      	b.n	80098b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80098a6:	f7f8 f895 	bl	80019d4 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d901      	bls.n	80098b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e086      	b.n	80099c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098b8:	4b45      	ldr	r3, [pc, #276]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1f0      	bne.n	80098a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098c4:	4b42      	ldr	r3, [pc, #264]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 80098c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	031b      	lsls	r3, r3, #12
 80098d2:	493f      	ldr	r1, [pc, #252]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	628b      	str	r3, [r1, #40]	; 0x28
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	3b01      	subs	r3, #1
 80098de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	025b      	lsls	r3, r3, #9
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	431a      	orrs	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098fa:	431a      	orrs	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	3b01      	subs	r3, #1
 8009902:	061b      	lsls	r3, r3, #24
 8009904:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009908:	4931      	ldr	r1, [pc, #196]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800990a:	4313      	orrs	r3, r2
 800990c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800990e:	4b30      	ldr	r3, [pc, #192]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	492d      	ldr	r1, [pc, #180]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800991c:	4313      	orrs	r3, r2
 800991e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009920:	4b2b      	ldr	r3, [pc, #172]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	f023 0220 	bic.w	r2, r3, #32
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	4928      	ldr	r1, [pc, #160]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800992e:	4313      	orrs	r3, r2
 8009930:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009932:	4b27      	ldr	r3, [pc, #156]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009936:	4a26      	ldr	r2, [pc, #152]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009938:	f023 0310 	bic.w	r3, r3, #16
 800993c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800993e:	4b24      	ldr	r3, [pc, #144]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009942:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <RCCEx_PLL2_Config+0x160>)
 8009944:	4013      	ands	r3, r2
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	69d2      	ldr	r2, [r2, #28]
 800994a:	00d2      	lsls	r2, r2, #3
 800994c:	4920      	ldr	r1, [pc, #128]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800994e:	4313      	orrs	r3, r2
 8009950:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009952:	4b1f      	ldr	r3, [pc, #124]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009956:	4a1e      	ldr	r2, [pc, #120]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009958:	f043 0310 	orr.w	r3, r3, #16
 800995c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d106      	bne.n	8009972 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009964:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	4a19      	ldr	r2, [pc, #100]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800996a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800996e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009970:	e00f      	b.n	8009992 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d106      	bne.n	8009986 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	4a14      	ldr	r2, [pc, #80]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800997e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009984:	e005      	b.n	8009992 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009986:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998a:	4a11      	ldr	r2, [pc, #68]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800998c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009990:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009992:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a0e      	ldr	r2, [pc, #56]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800999c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800999e:	f7f8 f819 	bl	80019d4 <HAL_GetTick>
 80099a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099a4:	e008      	b.n	80099b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099a6:	f7f8 f815 	bl	80019d4 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d901      	bls.n	80099b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e006      	b.n	80099c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d0f0      	beq.n	80099a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	58024400 	.word	0x58024400
 80099d4:	ffff0007 	.word	0xffff0007

080099d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099e6:	4b53      	ldr	r3, [pc, #332]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d101      	bne.n	80099f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e099      	b.n	8009b2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099f6:	4b4f      	ldr	r3, [pc, #316]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a4e      	ldr	r2, [pc, #312]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a02:	f7f7 ffe7 	bl	80019d4 <HAL_GetTick>
 8009a06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a08:	e008      	b.n	8009a1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a0a:	f7f7 ffe3 	bl	80019d4 <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d901      	bls.n	8009a1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e086      	b.n	8009b2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a1c:	4b45      	ldr	r3, [pc, #276]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f0      	bne.n	8009a0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a28:	4b42      	ldr	r3, [pc, #264]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	051b      	lsls	r3, r3, #20
 8009a36:	493f      	ldr	r1, [pc, #252]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	628b      	str	r3, [r1, #40]	; 0x28
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	025b      	lsls	r3, r3, #9
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	431a      	orrs	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	041b      	lsls	r3, r3, #16
 8009a5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	061b      	lsls	r3, r3, #24
 8009a68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a6c:	4931      	ldr	r1, [pc, #196]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a72:	4b30      	ldr	r3, [pc, #192]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	492d      	ldr	r1, [pc, #180]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a84:	4b2b      	ldr	r3, [pc, #172]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	4928      	ldr	r1, [pc, #160]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	4a26      	ldr	r2, [pc, #152]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009aa2:	4b24      	ldr	r3, [pc, #144]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aa6:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <RCCEx_PLL3_Config+0x160>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	69d2      	ldr	r2, [r2, #28]
 8009aae:	00d2      	lsls	r2, r2, #3
 8009ab0:	4920      	ldr	r1, [pc, #128]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ab6:	4b1f      	ldr	r3, [pc, #124]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	4a1e      	ldr	r2, [pc, #120]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d106      	bne.n	8009ad6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ac8:	4b1a      	ldr	r3, [pc, #104]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	4a19      	ldr	r2, [pc, #100]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ad4:	e00f      	b.n	8009af6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d106      	bne.n	8009aea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009adc:	4b15      	ldr	r3, [pc, #84]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ae2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ae8:	e005      	b.n	8009af6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aea:	4b12      	ldr	r3, [pc, #72]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	4a11      	ldr	r2, [pc, #68]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009af4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009af6:	4b0f      	ldr	r3, [pc, #60]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a0e      	ldr	r2, [pc, #56]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b02:	f7f7 ff67 	bl	80019d4 <HAL_GetTick>
 8009b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b08:	e008      	b.n	8009b1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b0a:	f7f7 ff63 	bl	80019d4 <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d901      	bls.n	8009b1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e006      	b.n	8009b2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0f0      	beq.n	8009b0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	58024400 	.word	0x58024400
 8009b38:	ffff0007 	.word	0xffff0007

08009b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e049      	b.n	8009be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f7 fb46 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	f000 fc7a 	bl	800a474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d001      	beq.n	8009c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e05e      	b.n	8009cc2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f042 0201 	orr.w	r2, r2, #1
 8009c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a2b      	ldr	r2, [pc, #172]	; (8009cd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d02c      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c2e:	d027      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a27      	ldr	r2, [pc, #156]	; (8009cd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d022      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a26      	ldr	r2, [pc, #152]	; (8009cd8 <HAL_TIM_Base_Start_IT+0xec>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d01d      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a24      	ldr	r2, [pc, #144]	; (8009cdc <HAL_TIM_Base_Start_IT+0xf0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d018      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a23      	ldr	r2, [pc, #140]	; (8009ce0 <HAL_TIM_Base_Start_IT+0xf4>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d013      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a21      	ldr	r2, [pc, #132]	; (8009ce4 <HAL_TIM_Base_Start_IT+0xf8>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d00e      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a20      	ldr	r2, [pc, #128]	; (8009ce8 <HAL_TIM_Base_Start_IT+0xfc>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d009      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a1e      	ldr	r2, [pc, #120]	; (8009cec <HAL_TIM_Base_Start_IT+0x100>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d004      	beq.n	8009c80 <HAL_TIM_Base_Start_IT+0x94>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a1d      	ldr	r2, [pc, #116]	; (8009cf0 <HAL_TIM_Base_Start_IT+0x104>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d115      	bne.n	8009cac <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	4b1b      	ldr	r3, [pc, #108]	; (8009cf4 <HAL_TIM_Base_Start_IT+0x108>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b06      	cmp	r3, #6
 8009c90:	d015      	beq.n	8009cbe <HAL_TIM_Base_Start_IT+0xd2>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c98:	d011      	beq.n	8009cbe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f042 0201 	orr.w	r2, r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009caa:	e008      	b.n	8009cbe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f042 0201 	orr.w	r2, r2, #1
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	e000      	b.n	8009cc0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	40010000 	.word	0x40010000
 8009cd4:	40000400 	.word	0x40000400
 8009cd8:	40000800 	.word	0x40000800
 8009cdc:	40000c00 	.word	0x40000c00
 8009ce0:	40010400 	.word	0x40010400
 8009ce4:	40001800 	.word	0x40001800
 8009ce8:	40014000 	.word	0x40014000
 8009cec:	4000e000 	.word	0x4000e000
 8009cf0:	4000e400 	.word	0x4000e400
 8009cf4:	00010007 	.word	0x00010007

08009cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e049      	b.n	8009d9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f841 	bl	8009da6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4619      	mov	r1, r3
 8009d36:	4610      	mov	r0, r2
 8009d38:	f000 fb9c 	bl	800a474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b083      	sub	sp, #12
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	f003 0302 	and.w	r3, r3, #2
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d122      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f003 0302 	and.w	r3, r3, #2
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d11b      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f06f 0202 	mvn.w	r2, #2
 8009de6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	f003 0303 	and.w	r3, r3, #3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fb1b 	bl	800a438 <HAL_TIM_IC_CaptureCallback>
 8009e02:	e005      	b.n	8009e10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fb0d 	bl	800a424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fb1e 	bl	800a44c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d122      	bne.n	8009e6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d11b      	bne.n	8009e6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f06f 0204 	mvn.w	r2, #4
 8009e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 faf1 	bl	800a438 <HAL_TIM_IC_CaptureCallback>
 8009e56:	e005      	b.n	8009e64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fae3 	bl	800a424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 faf4 	bl	800a44c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	f003 0308 	and.w	r3, r3, #8
 8009e74:	2b08      	cmp	r3, #8
 8009e76:	d122      	bne.n	8009ebe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f003 0308 	and.w	r3, r3, #8
 8009e82:	2b08      	cmp	r3, #8
 8009e84:	d11b      	bne.n	8009ebe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f06f 0208 	mvn.w	r2, #8
 8009e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2204      	movs	r2, #4
 8009e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fac7 	bl	800a438 <HAL_TIM_IC_CaptureCallback>
 8009eaa:	e005      	b.n	8009eb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fab9 	bl	800a424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 faca 	bl	800a44c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d122      	bne.n	8009f12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f003 0310 	and.w	r3, r3, #16
 8009ed6:	2b10      	cmp	r3, #16
 8009ed8:	d11b      	bne.n	8009f12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f06f 0210 	mvn.w	r2, #16
 8009ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2208      	movs	r2, #8
 8009ee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa9d 	bl	800a438 <HAL_TIM_IC_CaptureCallback>
 8009efe:	e005      	b.n	8009f0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fa8f 	bl	800a424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 faa0 	bl	800a44c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d10e      	bne.n	8009f3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d107      	bne.n	8009f3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f06f 0201 	mvn.w	r2, #1
 8009f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fa69 	bl	800a410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f48:	2b80      	cmp	r3, #128	; 0x80
 8009f4a:	d10e      	bne.n	8009f6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f56:	2b80      	cmp	r3, #128	; 0x80
 8009f58:	d107      	bne.n	8009f6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 ff45 	bl	800adf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f78:	d10e      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f84:	2b80      	cmp	r3, #128	; 0x80
 8009f86:	d107      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 ff38 	bl	800ae08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa2:	2b40      	cmp	r3, #64	; 0x40
 8009fa4:	d10e      	bne.n	8009fc4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb0:	2b40      	cmp	r3, #64	; 0x40
 8009fb2:	d107      	bne.n	8009fc4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fa4e 	bl	800a460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f003 0320 	and.w	r3, r3, #32
 8009fce:	2b20      	cmp	r3, #32
 8009fd0:	d10e      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f003 0320 	and.w	r3, r3, #32
 8009fdc:	2b20      	cmp	r3, #32
 8009fde:	d107      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f06f 0220 	mvn.w	r2, #32
 8009fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fef8 	bl	800ade0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a012:	2302      	movs	r3, #2
 800a014:	e0ff      	b.n	800a216 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b14      	cmp	r3, #20
 800a022:	f200 80f0 	bhi.w	800a206 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	0800a207 	.word	0x0800a207
 800a034:	0800a207 	.word	0x0800a207
 800a038:	0800a207 	.word	0x0800a207
 800a03c:	0800a0c1 	.word	0x0800a0c1
 800a040:	0800a207 	.word	0x0800a207
 800a044:	0800a207 	.word	0x0800a207
 800a048:	0800a207 	.word	0x0800a207
 800a04c:	0800a103 	.word	0x0800a103
 800a050:	0800a207 	.word	0x0800a207
 800a054:	0800a207 	.word	0x0800a207
 800a058:	0800a207 	.word	0x0800a207
 800a05c:	0800a143 	.word	0x0800a143
 800a060:	0800a207 	.word	0x0800a207
 800a064:	0800a207 	.word	0x0800a207
 800a068:	0800a207 	.word	0x0800a207
 800a06c:	0800a185 	.word	0x0800a185
 800a070:	0800a207 	.word	0x0800a207
 800a074:	0800a207 	.word	0x0800a207
 800a078:	0800a207 	.word	0x0800a207
 800a07c:	0800a1c5 	.word	0x0800a1c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fa9a 	bl	800a5c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699a      	ldr	r2, [r3, #24]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f042 0208 	orr.w	r2, r2, #8
 800a09a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 0204 	bic.w	r2, r2, #4
 800a0aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6999      	ldr	r1, [r3, #24]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	691a      	ldr	r2, [r3, #16]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	619a      	str	r2, [r3, #24]
      break;
 800a0be:	e0a5      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fb0a 	bl	800a6e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6999      	ldr	r1, [r3, #24]
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	021a      	lsls	r2, r3, #8
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	619a      	str	r2, [r3, #24]
      break;
 800a100:	e084      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fb73 	bl	800a7f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0208 	orr.w	r2, r2, #8
 800a11c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0204 	bic.w	r2, r2, #4
 800a12c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69d9      	ldr	r1, [r3, #28]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	691a      	ldr	r2, [r3, #16]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	61da      	str	r2, [r3, #28]
      break;
 800a140:	e064      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fbdb 	bl	800a904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69da      	ldr	r2, [r3, #28]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a15c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a16c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	69d9      	ldr	r1, [r3, #28]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	021a      	lsls	r2, r3, #8
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	61da      	str	r2, [r3, #28]
      break;
 800a182:	e043      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68b9      	ldr	r1, [r7, #8]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fc24 	bl	800a9d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f042 0208 	orr.w	r2, r2, #8
 800a19e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0204 	bic.w	r2, r2, #4
 800a1ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	691a      	ldr	r2, [r3, #16]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1c2:	e023      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68b9      	ldr	r1, [r7, #8]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fc68 	bl	800aaa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	021a      	lsls	r2, r3, #8
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a204:	e002      	b.n	800a20c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	75fb      	strb	r3, [r7, #23]
      break;
 800a20a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a214:	7dfb      	ldrb	r3, [r7, #23]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop

0800a220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_TIM_ConfigClockSource+0x1c>
 800a238:	2302      	movs	r3, #2
 800a23a:	e0dc      	b.n	800a3f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	4b6a      	ldr	r3, [pc, #424]	; (800a400 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a258:	4013      	ands	r3, r2
 800a25a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a64      	ldr	r2, [pc, #400]	; (800a404 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a272:	4293      	cmp	r3, r2
 800a274:	f000 80a9 	beq.w	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a278:	4a62      	ldr	r2, [pc, #392]	; (800a404 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	f200 80ae 	bhi.w	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a280:	4a61      	ldr	r2, [pc, #388]	; (800a408 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a282:	4293      	cmp	r3, r2
 800a284:	f000 80a1 	beq.w	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a288:	4a5f      	ldr	r2, [pc, #380]	; (800a408 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	f200 80a6 	bhi.w	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a290:	4a5e      	ldr	r2, [pc, #376]	; (800a40c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a292:	4293      	cmp	r3, r2
 800a294:	f000 8099 	beq.w	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a298:	4a5c      	ldr	r2, [pc, #368]	; (800a40c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	f200 809e 	bhi.w	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a2a4:	f000 8091 	beq.w	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a2a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a2ac:	f200 8096 	bhi.w	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2b4:	f000 8089 	beq.w	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a2b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2bc:	f200 808e 	bhi.w	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2c4:	d03e      	beq.n	800a344 <HAL_TIM_ConfigClockSource+0x124>
 800a2c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ca:	f200 8087 	bhi.w	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d2:	f000 8086 	beq.w	800a3e2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2da:	d87f      	bhi.n	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2dc:	2b70      	cmp	r3, #112	; 0x70
 800a2de:	d01a      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0xf6>
 800a2e0:	2b70      	cmp	r3, #112	; 0x70
 800a2e2:	d87b      	bhi.n	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2e4:	2b60      	cmp	r3, #96	; 0x60
 800a2e6:	d050      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x16a>
 800a2e8:	2b60      	cmp	r3, #96	; 0x60
 800a2ea:	d877      	bhi.n	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2ec:	2b50      	cmp	r3, #80	; 0x50
 800a2ee:	d03c      	beq.n	800a36a <HAL_TIM_ConfigClockSource+0x14a>
 800a2f0:	2b50      	cmp	r3, #80	; 0x50
 800a2f2:	d873      	bhi.n	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2f4:	2b40      	cmp	r3, #64	; 0x40
 800a2f6:	d058      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x18a>
 800a2f8:	2b40      	cmp	r3, #64	; 0x40
 800a2fa:	d86f      	bhi.n	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a2fc:	2b30      	cmp	r3, #48	; 0x30
 800a2fe:	d064      	beq.n	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a300:	2b30      	cmp	r3, #48	; 0x30
 800a302:	d86b      	bhi.n	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a304:	2b20      	cmp	r3, #32
 800a306:	d060      	beq.n	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a308:	2b20      	cmp	r3, #32
 800a30a:	d867      	bhi.n	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d05c      	beq.n	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a310:	2b10      	cmp	r3, #16
 800a312:	d05a      	beq.n	800a3ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a314:	e062      	b.n	800a3dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	6899      	ldr	r1, [r3, #8]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f000 fc9f 	bl	800ac68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	609a      	str	r2, [r3, #8]
      break;
 800a342:	e04f      	b.n	800a3e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6818      	ldr	r0, [r3, #0]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	6899      	ldr	r1, [r3, #8]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f000 fc88 	bl	800ac68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a366:	609a      	str	r2, [r3, #8]
      break;
 800a368:	e03c      	b.n	800a3e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	6859      	ldr	r1, [r3, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	461a      	mov	r2, r3
 800a378:	f000 fbf8 	bl	800ab6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2150      	movs	r1, #80	; 0x50
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fc52 	bl	800ac2c <TIM_ITRx_SetConfig>
      break;
 800a388:	e02c      	b.n	800a3e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	6859      	ldr	r1, [r3, #4]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	461a      	mov	r2, r3
 800a398:	f000 fc17 	bl	800abca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2160      	movs	r1, #96	; 0x60
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 fc42 	bl	800ac2c <TIM_ITRx_SetConfig>
      break;
 800a3a8:	e01c      	b.n	800a3e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6859      	ldr	r1, [r3, #4]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f000 fbd8 	bl	800ab6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2140      	movs	r1, #64	; 0x40
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fc32 	bl	800ac2c <TIM_ITRx_SetConfig>
      break;
 800a3c8:	e00c      	b.n	800a3e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	f000 fc29 	bl	800ac2c <TIM_ITRx_SetConfig>
      break;
 800a3da:	e003      	b.n	800a3e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e0:	e000      	b.n	800a3e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a3e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	ffceff88 	.word	0xffceff88
 800a404:	00100040 	.word	0x00100040
 800a408:	00100030 	.word	0x00100030
 800a40c:	00100020 	.word	0x00100020

0800a410 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a44      	ldr	r2, [pc, #272]	; (800a598 <TIM_Base_SetConfig+0x124>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d013      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a492:	d00f      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a41      	ldr	r2, [pc, #260]	; (800a59c <TIM_Base_SetConfig+0x128>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00b      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a40      	ldr	r2, [pc, #256]	; (800a5a0 <TIM_Base_SetConfig+0x12c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d007      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a3f      	ldr	r2, [pc, #252]	; (800a5a4 <TIM_Base_SetConfig+0x130>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d003      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a3e      	ldr	r2, [pc, #248]	; (800a5a8 <TIM_Base_SetConfig+0x134>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d108      	bne.n	800a4c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a33      	ldr	r2, [pc, #204]	; (800a598 <TIM_Base_SetConfig+0x124>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d027      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4d4:	d023      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a30      	ldr	r2, [pc, #192]	; (800a59c <TIM_Base_SetConfig+0x128>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d01f      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a2f      	ldr	r2, [pc, #188]	; (800a5a0 <TIM_Base_SetConfig+0x12c>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d01b      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a2e      	ldr	r2, [pc, #184]	; (800a5a4 <TIM_Base_SetConfig+0x130>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d017      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a2d      	ldr	r2, [pc, #180]	; (800a5a8 <TIM_Base_SetConfig+0x134>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d013      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a2c      	ldr	r2, [pc, #176]	; (800a5ac <TIM_Base_SetConfig+0x138>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d00f      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a2b      	ldr	r2, [pc, #172]	; (800a5b0 <TIM_Base_SetConfig+0x13c>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d00b      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a2a      	ldr	r2, [pc, #168]	; (800a5b4 <TIM_Base_SetConfig+0x140>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d007      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a29      	ldr	r2, [pc, #164]	; (800a5b8 <TIM_Base_SetConfig+0x144>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d003      	beq.n	800a51e <TIM_Base_SetConfig+0xaa>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a28      	ldr	r2, [pc, #160]	; (800a5bc <TIM_Base_SetConfig+0x148>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d108      	bne.n	800a530 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a10      	ldr	r2, [pc, #64]	; (800a598 <TIM_Base_SetConfig+0x124>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00f      	beq.n	800a57c <TIM_Base_SetConfig+0x108>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a12      	ldr	r2, [pc, #72]	; (800a5a8 <TIM_Base_SetConfig+0x134>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d00b      	beq.n	800a57c <TIM_Base_SetConfig+0x108>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a11      	ldr	r2, [pc, #68]	; (800a5ac <TIM_Base_SetConfig+0x138>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d007      	beq.n	800a57c <TIM_Base_SetConfig+0x108>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a10      	ldr	r2, [pc, #64]	; (800a5b0 <TIM_Base_SetConfig+0x13c>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d003      	beq.n	800a57c <TIM_Base_SetConfig+0x108>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a0f      	ldr	r2, [pc, #60]	; (800a5b4 <TIM_Base_SetConfig+0x140>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d103      	bne.n	800a584 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	691a      	ldr	r2, [r3, #16]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	615a      	str	r2, [r3, #20]
}
 800a58a:	bf00      	nop
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	40010000 	.word	0x40010000
 800a59c:	40000400 	.word	0x40000400
 800a5a0:	40000800 	.word	0x40000800
 800a5a4:	40000c00 	.word	0x40000c00
 800a5a8:	40010400 	.word	0x40010400
 800a5ac:	40014000 	.word	0x40014000
 800a5b0:	40014400 	.word	0x40014400
 800a5b4:	40014800 	.word	0x40014800
 800a5b8:	4000e000 	.word	0x4000e000
 800a5bc:	4000e400 	.word	0x4000e400

0800a5c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	f023 0201 	bic.w	r2, r3, #1
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4b37      	ldr	r3, [pc, #220]	; (800a6c8 <TIM_OC1_SetConfig+0x108>)
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f023 0303 	bic.w	r3, r3, #3
 800a5f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f023 0302 	bic.w	r3, r3, #2
 800a608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	4313      	orrs	r3, r2
 800a612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a2d      	ldr	r2, [pc, #180]	; (800a6cc <TIM_OC1_SetConfig+0x10c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00f      	beq.n	800a63c <TIM_OC1_SetConfig+0x7c>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a2c      	ldr	r2, [pc, #176]	; (800a6d0 <TIM_OC1_SetConfig+0x110>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d00b      	beq.n	800a63c <TIM_OC1_SetConfig+0x7c>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a2b      	ldr	r2, [pc, #172]	; (800a6d4 <TIM_OC1_SetConfig+0x114>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d007      	beq.n	800a63c <TIM_OC1_SetConfig+0x7c>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a2a      	ldr	r2, [pc, #168]	; (800a6d8 <TIM_OC1_SetConfig+0x118>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d003      	beq.n	800a63c <TIM_OC1_SetConfig+0x7c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a29      	ldr	r2, [pc, #164]	; (800a6dc <TIM_OC1_SetConfig+0x11c>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d10c      	bne.n	800a656 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f023 0308 	bic.w	r3, r3, #8
 800a642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f023 0304 	bic.w	r3, r3, #4
 800a654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a1c      	ldr	r2, [pc, #112]	; (800a6cc <TIM_OC1_SetConfig+0x10c>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d00f      	beq.n	800a67e <TIM_OC1_SetConfig+0xbe>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a1b      	ldr	r2, [pc, #108]	; (800a6d0 <TIM_OC1_SetConfig+0x110>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d00b      	beq.n	800a67e <TIM_OC1_SetConfig+0xbe>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <TIM_OC1_SetConfig+0x114>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d007      	beq.n	800a67e <TIM_OC1_SetConfig+0xbe>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a19      	ldr	r2, [pc, #100]	; (800a6d8 <TIM_OC1_SetConfig+0x118>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d003      	beq.n	800a67e <TIM_OC1_SetConfig+0xbe>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a18      	ldr	r2, [pc, #96]	; (800a6dc <TIM_OC1_SetConfig+0x11c>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d111      	bne.n	800a6a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a68c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	4313      	orrs	r3, r2
 800a696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	621a      	str	r2, [r3, #32]
}
 800a6bc:	bf00      	nop
 800a6be:	371c      	adds	r7, #28
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	fffeff8f 	.word	0xfffeff8f
 800a6cc:	40010000 	.word	0x40010000
 800a6d0:	40010400 	.word	0x40010400
 800a6d4:	40014000 	.word	0x40014000
 800a6d8:	40014400 	.word	0x40014400
 800a6dc:	40014800 	.word	0x40014800

0800a6e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	f023 0210 	bic.w	r2, r3, #16
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4b34      	ldr	r3, [pc, #208]	; (800a7dc <TIM_OC2_SetConfig+0xfc>)
 800a70c:	4013      	ands	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f023 0320 	bic.w	r3, r3, #32
 800a72a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	011b      	lsls	r3, r3, #4
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a29      	ldr	r2, [pc, #164]	; (800a7e0 <TIM_OC2_SetConfig+0x100>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d003      	beq.n	800a748 <TIM_OC2_SetConfig+0x68>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a28      	ldr	r2, [pc, #160]	; (800a7e4 <TIM_OC2_SetConfig+0x104>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d10d      	bne.n	800a764 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a74e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	011b      	lsls	r3, r3, #4
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	4313      	orrs	r3, r2
 800a75a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a1e      	ldr	r2, [pc, #120]	; (800a7e0 <TIM_OC2_SetConfig+0x100>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d00f      	beq.n	800a78c <TIM_OC2_SetConfig+0xac>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a1d      	ldr	r2, [pc, #116]	; (800a7e4 <TIM_OC2_SetConfig+0x104>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d00b      	beq.n	800a78c <TIM_OC2_SetConfig+0xac>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a1c      	ldr	r2, [pc, #112]	; (800a7e8 <TIM_OC2_SetConfig+0x108>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d007      	beq.n	800a78c <TIM_OC2_SetConfig+0xac>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a1b      	ldr	r2, [pc, #108]	; (800a7ec <TIM_OC2_SetConfig+0x10c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d003      	beq.n	800a78c <TIM_OC2_SetConfig+0xac>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a1a      	ldr	r2, [pc, #104]	; (800a7f0 <TIM_OC2_SetConfig+0x110>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d113      	bne.n	800a7b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a79a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	621a      	str	r2, [r3, #32]
}
 800a7ce:	bf00      	nop
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	feff8fff 	.word	0xfeff8fff
 800a7e0:	40010000 	.word	0x40010000
 800a7e4:	40010400 	.word	0x40010400
 800a7e8:	40014000 	.word	0x40014000
 800a7ec:	40014400 	.word	0x40014400
 800a7f0:	40014800 	.word	0x40014800

0800a7f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4b33      	ldr	r3, [pc, #204]	; (800a8ec <TIM_OC3_SetConfig+0xf8>)
 800a820:	4013      	ands	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0303 	bic.w	r3, r3, #3
 800a82a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a83c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	021b      	lsls	r3, r3, #8
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a28      	ldr	r2, [pc, #160]	; (800a8f0 <TIM_OC3_SetConfig+0xfc>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d003      	beq.n	800a85a <TIM_OC3_SetConfig+0x66>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a27      	ldr	r2, [pc, #156]	; (800a8f4 <TIM_OC3_SetConfig+0x100>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d10d      	bne.n	800a876 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a1d      	ldr	r2, [pc, #116]	; (800a8f0 <TIM_OC3_SetConfig+0xfc>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00f      	beq.n	800a89e <TIM_OC3_SetConfig+0xaa>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a1c      	ldr	r2, [pc, #112]	; (800a8f4 <TIM_OC3_SetConfig+0x100>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00b      	beq.n	800a89e <TIM_OC3_SetConfig+0xaa>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a1b      	ldr	r2, [pc, #108]	; (800a8f8 <TIM_OC3_SetConfig+0x104>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d007      	beq.n	800a89e <TIM_OC3_SetConfig+0xaa>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a1a      	ldr	r2, [pc, #104]	; (800a8fc <TIM_OC3_SetConfig+0x108>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d003      	beq.n	800a89e <TIM_OC3_SetConfig+0xaa>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a19      	ldr	r2, [pc, #100]	; (800a900 <TIM_OC3_SetConfig+0x10c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d113      	bne.n	800a8c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	011b      	lsls	r3, r3, #4
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	621a      	str	r2, [r3, #32]
}
 800a8e0:	bf00      	nop
 800a8e2:	371c      	adds	r7, #28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	fffeff8f 	.word	0xfffeff8f
 800a8f0:	40010000 	.word	0x40010000
 800a8f4:	40010400 	.word	0x40010400
 800a8f8:	40014000 	.word	0x40014000
 800a8fc:	40014400 	.word	0x40014400
 800a900:	40014800 	.word	0x40014800

0800a904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <TIM_OC4_SetConfig+0xbc>)
 800a930:	4013      	ands	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	021b      	lsls	r3, r3, #8
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	4313      	orrs	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a94e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	031b      	lsls	r3, r3, #12
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a19      	ldr	r2, [pc, #100]	; (800a9c4 <TIM_OC4_SetConfig+0xc0>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d00f      	beq.n	800a984 <TIM_OC4_SetConfig+0x80>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a18      	ldr	r2, [pc, #96]	; (800a9c8 <TIM_OC4_SetConfig+0xc4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d00b      	beq.n	800a984 <TIM_OC4_SetConfig+0x80>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a17      	ldr	r2, [pc, #92]	; (800a9cc <TIM_OC4_SetConfig+0xc8>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d007      	beq.n	800a984 <TIM_OC4_SetConfig+0x80>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a16      	ldr	r2, [pc, #88]	; (800a9d0 <TIM_OC4_SetConfig+0xcc>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d003      	beq.n	800a984 <TIM_OC4_SetConfig+0x80>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a15      	ldr	r2, [pc, #84]	; (800a9d4 <TIM_OC4_SetConfig+0xd0>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d109      	bne.n	800a998 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a98a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	019b      	lsls	r3, r3, #6
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4313      	orrs	r3, r2
 800a996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	621a      	str	r2, [r3, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	feff8fff 	.word	0xfeff8fff
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40010400 	.word	0x40010400
 800a9cc:	40014000 	.word	0x40014000
 800a9d0:	40014400 	.word	0x40014400
 800a9d4:	40014800 	.word	0x40014800

0800a9d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4b21      	ldr	r3, [pc, #132]	; (800aa88 <TIM_OC5_SetConfig+0xb0>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aa18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	041b      	lsls	r3, r3, #16
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a18      	ldr	r2, [pc, #96]	; (800aa8c <TIM_OC5_SetConfig+0xb4>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00f      	beq.n	800aa4e <TIM_OC5_SetConfig+0x76>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a17      	ldr	r2, [pc, #92]	; (800aa90 <TIM_OC5_SetConfig+0xb8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d00b      	beq.n	800aa4e <TIM_OC5_SetConfig+0x76>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a16      	ldr	r2, [pc, #88]	; (800aa94 <TIM_OC5_SetConfig+0xbc>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d007      	beq.n	800aa4e <TIM_OC5_SetConfig+0x76>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a15      	ldr	r2, [pc, #84]	; (800aa98 <TIM_OC5_SetConfig+0xc0>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d003      	beq.n	800aa4e <TIM_OC5_SetConfig+0x76>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a14      	ldr	r2, [pc, #80]	; (800aa9c <TIM_OC5_SetConfig+0xc4>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d109      	bne.n	800aa62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	621a      	str	r2, [r3, #32]
}
 800aa7c:	bf00      	nop
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	fffeff8f 	.word	0xfffeff8f
 800aa8c:	40010000 	.word	0x40010000
 800aa90:	40010400 	.word	0x40010400
 800aa94:	40014000 	.word	0x40014000
 800aa98:	40014400 	.word	0x40014400
 800aa9c:	40014800 	.word	0x40014800

0800aaa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	4b22      	ldr	r3, [pc, #136]	; (800ab54 <TIM_OC6_SetConfig+0xb4>)
 800aacc:	4013      	ands	r3, r2
 800aace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	051b      	lsls	r3, r3, #20
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a19      	ldr	r2, [pc, #100]	; (800ab58 <TIM_OC6_SetConfig+0xb8>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d00f      	beq.n	800ab18 <TIM_OC6_SetConfig+0x78>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a18      	ldr	r2, [pc, #96]	; (800ab5c <TIM_OC6_SetConfig+0xbc>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d00b      	beq.n	800ab18 <TIM_OC6_SetConfig+0x78>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a17      	ldr	r2, [pc, #92]	; (800ab60 <TIM_OC6_SetConfig+0xc0>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d007      	beq.n	800ab18 <TIM_OC6_SetConfig+0x78>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a16      	ldr	r2, [pc, #88]	; (800ab64 <TIM_OC6_SetConfig+0xc4>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d003      	beq.n	800ab18 <TIM_OC6_SetConfig+0x78>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a15      	ldr	r2, [pc, #84]	; (800ab68 <TIM_OC6_SetConfig+0xc8>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d109      	bne.n	800ab2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	695b      	ldr	r3, [r3, #20]
 800ab24:	029b      	lsls	r3, r3, #10
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	621a      	str	r2, [r3, #32]
}
 800ab46:	bf00      	nop
 800ab48:	371c      	adds	r7, #28
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	feff8fff 	.word	0xfeff8fff
 800ab58:	40010000 	.word	0x40010000
 800ab5c:	40010400 	.word	0x40010400
 800ab60:	40014000 	.word	0x40014000
 800ab64:	40014400 	.word	0x40014400
 800ab68:	40014800 	.word	0x40014800

0800ab6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	f023 0201 	bic.w	r2, r3, #1
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	011b      	lsls	r3, r3, #4
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f023 030a 	bic.w	r3, r3, #10
 800aba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	4313      	orrs	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	621a      	str	r2, [r3, #32]
}
 800abbe:	bf00      	nop
 800abc0:	371c      	adds	r7, #28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abca:	b480      	push	{r7}
 800abcc:	b087      	sub	sp, #28
 800abce:	af00      	add	r7, sp, #0
 800abd0:	60f8      	str	r0, [r7, #12]
 800abd2:	60b9      	str	r1, [r7, #8]
 800abd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	f023 0210 	bic.w	r2, r3, #16
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800abf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	031b      	lsls	r3, r3, #12
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	011b      	lsls	r3, r3, #4
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	621a      	str	r2, [r3, #32]
}
 800ac1e:	bf00      	nop
 800ac20:	371c      	adds	r7, #28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	4b09      	ldr	r3, [pc, #36]	; (800ac64 <TIM_ITRx_SetConfig+0x38>)
 800ac40:	4013      	ands	r3, r2
 800ac42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	f043 0307 	orr.w	r3, r3, #7
 800ac4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	609a      	str	r2, [r3, #8]
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	ffcfff8f 	.word	0xffcfff8f

0800ac68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
 800ac74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	021a      	lsls	r2, r3, #8
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	431a      	orrs	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	697a      	ldr	r2, [r7, #20]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	609a      	str	r2, [r3, #8]
}
 800ac9c:	bf00      	nop
 800ac9e:	371c      	adds	r7, #28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d101      	bne.n	800acc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acbc:	2302      	movs	r3, #2
 800acbe:	e077      	b.n	800adb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a35      	ldr	r2, [pc, #212]	; (800adbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d004      	beq.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a34      	ldr	r2, [pc, #208]	; (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d108      	bne.n	800ad06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800acfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a25      	ldr	r2, [pc, #148]	; (800adbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d02c      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad32:	d027      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a22      	ldr	r2, [pc, #136]	; (800adc4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d022      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a21      	ldr	r2, [pc, #132]	; (800adc8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d01d      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a1f      	ldr	r2, [pc, #124]	; (800adcc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d018      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a1a      	ldr	r2, [pc, #104]	; (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d013      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a1b      	ldr	r2, [pc, #108]	; (800add0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d00e      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a1a      	ldr	r2, [pc, #104]	; (800add4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d009      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a18      	ldr	r2, [pc, #96]	; (800add8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d004      	beq.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a17      	ldr	r2, [pc, #92]	; (800addc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d10c      	bne.n	800ad9e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	40010000 	.word	0x40010000
 800adc0:	40010400 	.word	0x40010400
 800adc4:	40000400 	.word	0x40000400
 800adc8:	40000800 	.word	0x40000800
 800adcc:	40000c00 	.word	0x40000c00
 800add0:	40001800 	.word	0x40001800
 800add4:	40014000 	.word	0x40014000
 800add8:	4000e000 	.word	0x4000e000
 800addc:	4000e400 	.word	0x4000e400

0800ade0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e042      	b.n	800aeb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7f6 fa8f 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2224      	movs	r2, #36	; 0x24
 800ae4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f022 0201 	bic.w	r2, r2, #1
 800ae5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fd26 	bl	800b8b0 <UART_SetConfig>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d101      	bne.n	800ae6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e022      	b.n	800aeb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d002      	beq.n	800ae7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f001 fb78 	bl	800c56c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f042 0201 	orr.w	r2, r2, #1
 800aeaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 fbff 	bl	800c6b0 <UART_CheckIdleState>
 800aeb2:	4603      	mov	r3, r0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08a      	sub	sp, #40	; 0x28
 800aec0:	af02      	add	r7, sp, #8
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	603b      	str	r3, [r7, #0]
 800aec8:	4613      	mov	r3, r2
 800aeca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	f040 8083 	bne.w	800afde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d002      	beq.n	800aee4 <HAL_UART_Transmit+0x28>
 800aede:	88fb      	ldrh	r3, [r7, #6]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e07b      	b.n	800afe0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d101      	bne.n	800aef6 <HAL_UART_Transmit+0x3a>
 800aef2:	2302      	movs	r3, #2
 800aef4:	e074      	b.n	800afe0 <HAL_UART_Transmit+0x124>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2221      	movs	r2, #33	; 0x21
 800af0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af0e:	f7f6 fd61 	bl	80019d4 <HAL_GetTick>
 800af12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	88fa      	ldrh	r2, [r7, #6]
 800af18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	88fa      	ldrh	r2, [r7, #6]
 800af20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af2c:	d108      	bne.n	800af40 <HAL_UART_Transmit+0x84>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d104      	bne.n	800af40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800af36:	2300      	movs	r3, #0
 800af38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	61bb      	str	r3, [r7, #24]
 800af3e:	e003      	b.n	800af48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af44:	2300      	movs	r3, #0
 800af46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800af50:	e02c      	b.n	800afac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2200      	movs	r2, #0
 800af5a:	2180      	movs	r1, #128	; 0x80
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f001 fbf2 	bl	800c746 <UART_WaitOnFlagUntilTimeout>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d001      	beq.n	800af6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e039      	b.n	800afe0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10b      	bne.n	800af8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	3302      	adds	r3, #2
 800af86:	61bb      	str	r3, [r7, #24]
 800af88:	e007      	b.n	800af9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	781a      	ldrb	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	3301      	adds	r3, #1
 800af98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	3b01      	subs	r3, #1
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1cc      	bne.n	800af52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2200      	movs	r2, #0
 800afc0:	2140      	movs	r1, #64	; 0x40
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f001 fbbf 	bl	800c746 <UART_WaitOnFlagUntilTimeout>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	e006      	b.n	800afe0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2220      	movs	r2, #32
 800afd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800afda:	2300      	movs	r3, #0
 800afdc:	e000      	b.n	800afe0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800afde:	2302      	movs	r3, #2
  }
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3720      	adds	r7, #32
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08a      	sub	sp, #40	; 0x28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800affc:	2b20      	cmp	r3, #32
 800affe:	d17a      	bne.n	800b0f6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <HAL_UART_Transmit_DMA+0x24>
 800b006:	88fb      	ldrh	r3, [r7, #6]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e073      	b.n	800b0f8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b016:	2b01      	cmp	r3, #1
 800b018:	d101      	bne.n	800b01e <HAL_UART_Transmit_DMA+0x36>
 800b01a:	2302      	movs	r3, #2
 800b01c:	e06c      	b.n	800b0f8 <HAL_UART_Transmit_DMA+0x110>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	88fa      	ldrh	r2, [r7, #6]
 800b030:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	88fa      	ldrh	r2, [r7, #6]
 800b038:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2221      	movs	r2, #33	; 0x21
 800b048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b050:	2b00      	cmp	r3, #0
 800b052:	d02c      	beq.n	800b0ae <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b058:	4a29      	ldr	r2, [pc, #164]	; (800b100 <HAL_UART_Transmit_DMA+0x118>)
 800b05a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b060:	4a28      	ldr	r2, [pc, #160]	; (800b104 <HAL_UART_Transmit_DMA+0x11c>)
 800b062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b068:	4a27      	ldr	r2, [pc, #156]	; (800b108 <HAL_UART_Transmit_DMA+0x120>)
 800b06a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b070:	2200      	movs	r2, #0
 800b072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b07c:	4619      	mov	r1, r3
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3328      	adds	r3, #40	; 0x28
 800b084:	461a      	mov	r2, r3
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	f7f9 f876 	bl	8004178 <HAL_DMA_Start_IT>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00d      	beq.n	800b0ae <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2210      	movs	r2, #16
 800b096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2220      	movs	r2, #32
 800b0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e024      	b.n	800b0f8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2240      	movs	r2, #64	; 0x40
 800b0b4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3308      	adds	r3, #8
 800b0c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	e853 3f00 	ldrex	r3, [r3]
 800b0cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3308      	adds	r3, #8
 800b0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0de:	623a      	str	r2, [r7, #32]
 800b0e0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	69f9      	ldr	r1, [r7, #28]
 800b0e4:	6a3a      	ldr	r2, [r7, #32]
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e5      	bne.n	800b0be <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e000      	b.n	800b0f8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b0f6:	2302      	movs	r3, #2
  }
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3728      	adds	r7, #40	; 0x28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	0800cb79 	.word	0x0800cb79
 800b104:	0800cc0f 	.word	0x0800cc0f
 800b108:	0800cd85 	.word	0x0800cd85

0800b10c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b0ba      	sub	sp, #232	; 0xe8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b132:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b136:	f640 030f 	movw	r3, #2063	; 0x80f
 800b13a:	4013      	ands	r3, r2
 800b13c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b144:	2b00      	cmp	r3, #0
 800b146:	d11b      	bne.n	800b180 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14c:	f003 0320 	and.w	r3, r3, #32
 800b150:	2b00      	cmp	r3, #0
 800b152:	d015      	beq.n	800b180 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b158:	f003 0320 	and.w	r3, r3, #32
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d105      	bne.n	800b16c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d009      	beq.n	800b180 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 835a 	beq.w	800b82a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
      }
      return;
 800b17e:	e354      	b.n	800b82a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 811f 	beq.w	800b3c8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b18a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b18e:	4b8b      	ldr	r3, [pc, #556]	; (800b3bc <HAL_UART_IRQHandler+0x2b0>)
 800b190:	4013      	ands	r3, r2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d106      	bne.n	800b1a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b196:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b19a:	4b89      	ldr	r3, [pc, #548]	; (800b3c0 <HAL_UART_IRQHandler+0x2b4>)
 800b19c:	4013      	ands	r3, r2
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f000 8112 	beq.w	800b3c8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d011      	beq.n	800b1d4 <HAL_UART_IRQHandler+0xc8>
 800b1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ca:	f043 0201 	orr.w	r2, r3, #1
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1d8:	f003 0302 	and.w	r3, r3, #2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d011      	beq.n	800b204 <HAL_UART_IRQHandler+0xf8>
 800b1e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00b      	beq.n	800b204 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1fa:	f043 0204 	orr.w	r2, r3, #4
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d011      	beq.n	800b234 <HAL_UART_IRQHandler+0x128>
 800b210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00b      	beq.n	800b234 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2204      	movs	r2, #4
 800b222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b22a:	f043 0202 	orr.w	r2, r3, #2
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b238:	f003 0308 	and.w	r3, r3, #8
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d017      	beq.n	800b270 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b244:	f003 0320 	and.w	r3, r3, #32
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d105      	bne.n	800b258 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b24c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b250:	4b5a      	ldr	r3, [pc, #360]	; (800b3bc <HAL_UART_IRQHandler+0x2b0>)
 800b252:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2208      	movs	r2, #8
 800b25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b266:	f043 0208 	orr.w	r2, r3, #8
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d012      	beq.n	800b2a2 <HAL_UART_IRQHandler+0x196>
 800b27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00c      	beq.n	800b2a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b298:	f043 0220 	orr.w	r2, r3, #32
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 82c0 	beq.w	800b82e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b2:	f003 0320 	and.w	r3, r3, #32
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d013      	beq.n	800b2e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b2ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2be:	f003 0320 	and.w	r3, r3, #32
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d105      	bne.n	800b2d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b2c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d007      	beq.n	800b2e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f6:	2b40      	cmp	r3, #64	; 0x40
 800b2f8:	d005      	beq.n	800b306 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b2fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b302:	2b00      	cmp	r3, #0
 800b304:	d04f      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f001 fbd0 	bl	800caac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b316:	2b40      	cmp	r3, #64	; 0x40
 800b318:	d141      	bne.n	800b39e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3308      	adds	r3, #8
 800b320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b328:	e853 3f00 	ldrex	r3, [r3]
 800b32c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b34a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b356:	e841 2300 	strex	r3, r2, [r1]
 800b35a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b35e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1d9      	bne.n	800b31a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d013      	beq.n	800b396 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b372:	4a14      	ldr	r2, [pc, #80]	; (800b3c4 <HAL_UART_IRQHandler+0x2b8>)
 800b374:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7f9 fc84 	bl	8004c88 <HAL_DMA_Abort_IT>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d017      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b390:	4610      	mov	r0, r2
 800b392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b394:	e00f      	b.n	800b3b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fa74 	bl	800b884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b39c:	e00b      	b.n	800b3b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fa70 	bl	800b884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3a4:	e007      	b.n	800b3b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa6c 	bl	800b884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b3b4:	e23b      	b.n	800b82e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b6:	bf00      	nop
    return;
 800b3b8:	e239      	b.n	800b82e <HAL_UART_IRQHandler+0x722>
 800b3ba:	bf00      	nop
 800b3bc:	10000001 	.word	0x10000001
 800b3c0:	04000120 	.word	0x04000120
 800b3c4:	0800ce05 	.word	0x0800ce05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	f040 81ce 	bne.w	800b76e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3d6:	f003 0310 	and.w	r3, r3, #16
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 81c7 	beq.w	800b76e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b3e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e4:	f003 0310 	and.w	r3, r3, #16
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 81c0 	beq.w	800b76e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2210      	movs	r2, #16
 800b3f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b400:	2b40      	cmp	r3, #64	; 0x40
 800b402:	f040 813b 	bne.w	800b67c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a8b      	ldr	r2, [pc, #556]	; (800b63c <HAL_UART_IRQHandler+0x530>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d059      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a89      	ldr	r2, [pc, #548]	; (800b640 <HAL_UART_IRQHandler+0x534>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d053      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a87      	ldr	r2, [pc, #540]	; (800b644 <HAL_UART_IRQHandler+0x538>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d04d      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a85      	ldr	r2, [pc, #532]	; (800b648 <HAL_UART_IRQHandler+0x53c>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d047      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a83      	ldr	r2, [pc, #524]	; (800b64c <HAL_UART_IRQHandler+0x540>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d041      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a81      	ldr	r2, [pc, #516]	; (800b650 <HAL_UART_IRQHandler+0x544>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d03b      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a7f      	ldr	r2, [pc, #508]	; (800b654 <HAL_UART_IRQHandler+0x548>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d035      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a7d      	ldr	r2, [pc, #500]	; (800b658 <HAL_UART_IRQHandler+0x54c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d02f      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a7b      	ldr	r2, [pc, #492]	; (800b65c <HAL_UART_IRQHandler+0x550>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d029      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a79      	ldr	r2, [pc, #484]	; (800b660 <HAL_UART_IRQHandler+0x554>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d023      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a77      	ldr	r2, [pc, #476]	; (800b664 <HAL_UART_IRQHandler+0x558>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d01d      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a75      	ldr	r2, [pc, #468]	; (800b668 <HAL_UART_IRQHandler+0x55c>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d017      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a73      	ldr	r2, [pc, #460]	; (800b66c <HAL_UART_IRQHandler+0x560>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d011      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a71      	ldr	r2, [pc, #452]	; (800b670 <HAL_UART_IRQHandler+0x564>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d00b      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a6f      	ldr	r2, [pc, #444]	; (800b674 <HAL_UART_IRQHandler+0x568>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d005      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x3ba>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a6d      	ldr	r2, [pc, #436]	; (800b678 <HAL_UART_IRQHandler+0x56c>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d105      	bne.n	800b4d2 <HAL_UART_IRQHandler+0x3c6>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	e004      	b.n	800b4dc <HAL_UART_IRQHandler+0x3d0>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 81a4 	beq.w	800b832 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	f080 819c 	bcs.w	800b832 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b50e:	f000 8086 	beq.w	800b61e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b51e:	e853 3f00 	ldrex	r3, [r3]
 800b522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b52a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b52e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b53c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b540:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b544:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b548:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b54c:	e841 2300 	strex	r3, r2, [r1]
 800b550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1da      	bne.n	800b512 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3308      	adds	r3, #8
 800b562:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b56c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b56e:	f023 0301 	bic.w	r3, r3, #1
 800b572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3308      	adds	r3, #8
 800b57c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b580:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b584:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b586:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b588:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b58c:	e841 2300 	strex	r3, r2, [r1]
 800b590:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e1      	bne.n	800b55c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3308      	adds	r3, #8
 800b59e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5a2:	e853 3f00 	ldrex	r3, [r3]
 800b5a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b5a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	3308      	adds	r3, #8
 800b5b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b5be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5c4:	e841 2300 	strex	r3, r2, [r1]
 800b5c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b5ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1e3      	bne.n	800b598 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2220      	movs	r2, #32
 800b5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e6:	e853 3f00 	ldrex	r3, [r3]
 800b5ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ee:	f023 0310 	bic.w	r3, r3, #16
 800b5f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b600:	65bb      	str	r3, [r7, #88]	; 0x58
 800b602:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b604:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b606:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b608:	e841 2300 	strex	r3, r2, [r1]
 800b60c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1e4      	bne.n	800b5de <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b618:	4618      	mov	r0, r3
 800b61a:	f7f9 f817 	bl	800464c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	b29b      	uxth	r3, r3
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f930 	bl	800b898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b638:	e0fb      	b.n	800b832 <HAL_UART_IRQHandler+0x726>
 800b63a:	bf00      	nop
 800b63c:	40020010 	.word	0x40020010
 800b640:	40020028 	.word	0x40020028
 800b644:	40020040 	.word	0x40020040
 800b648:	40020058 	.word	0x40020058
 800b64c:	40020070 	.word	0x40020070
 800b650:	40020088 	.word	0x40020088
 800b654:	400200a0 	.word	0x400200a0
 800b658:	400200b8 	.word	0x400200b8
 800b65c:	40020410 	.word	0x40020410
 800b660:	40020428 	.word	0x40020428
 800b664:	40020440 	.word	0x40020440
 800b668:	40020458 	.word	0x40020458
 800b66c:	40020470 	.word	0x40020470
 800b670:	40020488 	.word	0x40020488
 800b674:	400204a0 	.word	0x400204a0
 800b678:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b688:	b29b      	uxth	r3, r3
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b696:	b29b      	uxth	r3, r3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 80cc 	beq.w	800b836 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b69e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 80c7 	beq.w	800b836 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	e853 3f00 	ldrex	r3, [r3]
 800b6b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b6cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6d2:	e841 2300 	strex	r3, r2, [r1]
 800b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1e4      	bne.n	800b6a8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b6ee:	6a3a      	ldr	r2, [r7, #32]
 800b6f0:	4b54      	ldr	r3, [pc, #336]	; (800b844 <HAL_UART_IRQHandler+0x738>)
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b702:	633a      	str	r2, [r7, #48]	; 0x30
 800b704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b70a:	e841 2300 	strex	r3, r2, [r1]
 800b70e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1e3      	bne.n	800b6de <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2220      	movs	r2, #32
 800b71a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	e853 3f00 	ldrex	r3, [r3]
 800b736:	60fb      	str	r3, [r7, #12]
   return(result);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f023 0310 	bic.w	r3, r3, #16
 800b73e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	461a      	mov	r2, r3
 800b748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b74c:	61fb      	str	r3, [r7, #28]
 800b74e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b750:	69b9      	ldr	r1, [r7, #24]
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	e841 2300 	strex	r3, r2, [r1]
 800b758:	617b      	str	r3, [r7, #20]
   return(result);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1e4      	bne.n	800b72a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f896 	bl	800b898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b76c:	e063      	b.n	800b836 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00e      	beq.n	800b798 <HAL_UART_IRQHandler+0x68c>
 800b77a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b77e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b782:	2b00      	cmp	r3, #0
 800b784:	d008      	beq.n	800b798 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b78e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f001 fb78 	bl	800ce86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b796:	e051      	b.n	800b83c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d014      	beq.n	800b7ce <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d105      	bne.n	800b7bc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b7b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d008      	beq.n	800b7ce <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d03a      	beq.n	800b83a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	4798      	blx	r3
    }
    return;
 800b7cc:	e035      	b.n	800b83a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d009      	beq.n	800b7ee <HAL_UART_IRQHandler+0x6e2>
 800b7da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 fb22 	bl	800ce30 <UART_EndTransmit_IT>
    return;
 800b7ec:	e026      	b.n	800b83c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <HAL_UART_IRQHandler+0x702>
 800b7fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d003      	beq.n	800b80e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f001 fb51 	bl	800ceae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b80c:	e016      	b.n	800b83c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b80e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d010      	beq.n	800b83c <HAL_UART_IRQHandler+0x730>
 800b81a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da0c      	bge.n	800b83c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f001 fb39 	bl	800ce9a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b828:	e008      	b.n	800b83c <HAL_UART_IRQHandler+0x730>
      return;
 800b82a:	bf00      	nop
 800b82c:	e006      	b.n	800b83c <HAL_UART_IRQHandler+0x730>
    return;
 800b82e:	bf00      	nop
 800b830:	e004      	b.n	800b83c <HAL_UART_IRQHandler+0x730>
      return;
 800b832:	bf00      	nop
 800b834:	e002      	b.n	800b83c <HAL_UART_IRQHandler+0x730>
      return;
 800b836:	bf00      	nop
 800b838:	e000      	b.n	800b83c <HAL_UART_IRQHandler+0x730>
    return;
 800b83a:	bf00      	nop
  }
}
 800b83c:	37e8      	adds	r7, #232	; 0xe8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	effffffe 	.word	0xeffffffe

0800b848 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8b0:	b5b0      	push	{r4, r5, r7, lr}
 800b8b2:	b08e      	sub	sp, #56	; 0x38
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	689a      	ldr	r2, [r3, #8]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	695b      	ldr	r3, [r3, #20]
 800b8cc:	431a      	orrs	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	4bbf      	ldr	r3, [pc, #764]	; (800bbdc <UART_SetConfig+0x32c>)
 800b8de:	4013      	ands	r3, r2
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	6812      	ldr	r2, [r2, #0]
 800b8e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8e6:	430b      	orrs	r3, r1
 800b8e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68da      	ldr	r2, [r3, #12]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	430a      	orrs	r2, r1
 800b8fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4ab5      	ldr	r2, [pc, #724]	; (800bbe0 <UART_SetConfig+0x330>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d004      	beq.n	800b91a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a1b      	ldr	r3, [r3, #32]
 800b914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b916:	4313      	orrs	r3, r2
 800b918:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	4bb0      	ldr	r3, [pc, #704]	; (800bbe4 <UART_SetConfig+0x334>)
 800b922:	4013      	ands	r3, r2
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	6812      	ldr	r2, [r2, #0]
 800b928:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b92a:	430b      	orrs	r3, r1
 800b92c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b934:	f023 010f 	bic.w	r1, r3, #15
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4aa7      	ldr	r2, [pc, #668]	; (800bbe8 <UART_SetConfig+0x338>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d176      	bne.n	800ba3c <UART_SetConfig+0x18c>
 800b94e:	4ba7      	ldr	r3, [pc, #668]	; (800bbec <UART_SetConfig+0x33c>)
 800b950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b956:	2b28      	cmp	r3, #40	; 0x28
 800b958:	d86c      	bhi.n	800ba34 <UART_SetConfig+0x184>
 800b95a:	a201      	add	r2, pc, #4	; (adr r2, 800b960 <UART_SetConfig+0xb0>)
 800b95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b960:	0800ba05 	.word	0x0800ba05
 800b964:	0800ba35 	.word	0x0800ba35
 800b968:	0800ba35 	.word	0x0800ba35
 800b96c:	0800ba35 	.word	0x0800ba35
 800b970:	0800ba35 	.word	0x0800ba35
 800b974:	0800ba35 	.word	0x0800ba35
 800b978:	0800ba35 	.word	0x0800ba35
 800b97c:	0800ba35 	.word	0x0800ba35
 800b980:	0800ba0d 	.word	0x0800ba0d
 800b984:	0800ba35 	.word	0x0800ba35
 800b988:	0800ba35 	.word	0x0800ba35
 800b98c:	0800ba35 	.word	0x0800ba35
 800b990:	0800ba35 	.word	0x0800ba35
 800b994:	0800ba35 	.word	0x0800ba35
 800b998:	0800ba35 	.word	0x0800ba35
 800b99c:	0800ba35 	.word	0x0800ba35
 800b9a0:	0800ba15 	.word	0x0800ba15
 800b9a4:	0800ba35 	.word	0x0800ba35
 800b9a8:	0800ba35 	.word	0x0800ba35
 800b9ac:	0800ba35 	.word	0x0800ba35
 800b9b0:	0800ba35 	.word	0x0800ba35
 800b9b4:	0800ba35 	.word	0x0800ba35
 800b9b8:	0800ba35 	.word	0x0800ba35
 800b9bc:	0800ba35 	.word	0x0800ba35
 800b9c0:	0800ba1d 	.word	0x0800ba1d
 800b9c4:	0800ba35 	.word	0x0800ba35
 800b9c8:	0800ba35 	.word	0x0800ba35
 800b9cc:	0800ba35 	.word	0x0800ba35
 800b9d0:	0800ba35 	.word	0x0800ba35
 800b9d4:	0800ba35 	.word	0x0800ba35
 800b9d8:	0800ba35 	.word	0x0800ba35
 800b9dc:	0800ba35 	.word	0x0800ba35
 800b9e0:	0800ba25 	.word	0x0800ba25
 800b9e4:	0800ba35 	.word	0x0800ba35
 800b9e8:	0800ba35 	.word	0x0800ba35
 800b9ec:	0800ba35 	.word	0x0800ba35
 800b9f0:	0800ba35 	.word	0x0800ba35
 800b9f4:	0800ba35 	.word	0x0800ba35
 800b9f8:	0800ba35 	.word	0x0800ba35
 800b9fc:	0800ba35 	.word	0x0800ba35
 800ba00:	0800ba2d 	.word	0x0800ba2d
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba0a:	e326      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba0c:	2304      	movs	r3, #4
 800ba0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba12:	e322      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba14:	2308      	movs	r3, #8
 800ba16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba1a:	e31e      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba1c:	2310      	movs	r3, #16
 800ba1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba22:	e31a      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba24:	2320      	movs	r3, #32
 800ba26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba2a:	e316      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba2c:	2340      	movs	r3, #64	; 0x40
 800ba2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba32:	e312      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba34:	2380      	movs	r3, #128	; 0x80
 800ba36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3a:	e30e      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a6b      	ldr	r2, [pc, #428]	; (800bbf0 <UART_SetConfig+0x340>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d130      	bne.n	800baa8 <UART_SetConfig+0x1f8>
 800ba46:	4b69      	ldr	r3, [pc, #420]	; (800bbec <UART_SetConfig+0x33c>)
 800ba48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba4a:	f003 0307 	and.w	r3, r3, #7
 800ba4e:	2b05      	cmp	r3, #5
 800ba50:	d826      	bhi.n	800baa0 <UART_SetConfig+0x1f0>
 800ba52:	a201      	add	r2, pc, #4	; (adr r2, 800ba58 <UART_SetConfig+0x1a8>)
 800ba54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba58:	0800ba71 	.word	0x0800ba71
 800ba5c:	0800ba79 	.word	0x0800ba79
 800ba60:	0800ba81 	.word	0x0800ba81
 800ba64:	0800ba89 	.word	0x0800ba89
 800ba68:	0800ba91 	.word	0x0800ba91
 800ba6c:	0800ba99 	.word	0x0800ba99
 800ba70:	2300      	movs	r3, #0
 800ba72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba76:	e2f0      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba78:	2304      	movs	r3, #4
 800ba7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba7e:	e2ec      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba80:	2308      	movs	r3, #8
 800ba82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba86:	e2e8      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba88:	2310      	movs	r3, #16
 800ba8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba8e:	e2e4      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba90:	2320      	movs	r3, #32
 800ba92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba96:	e2e0      	b.n	800c05a <UART_SetConfig+0x7aa>
 800ba98:	2340      	movs	r3, #64	; 0x40
 800ba9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9e:	e2dc      	b.n	800c05a <UART_SetConfig+0x7aa>
 800baa0:	2380      	movs	r3, #128	; 0x80
 800baa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa6:	e2d8      	b.n	800c05a <UART_SetConfig+0x7aa>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a51      	ldr	r2, [pc, #324]	; (800bbf4 <UART_SetConfig+0x344>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d130      	bne.n	800bb14 <UART_SetConfig+0x264>
 800bab2:	4b4e      	ldr	r3, [pc, #312]	; (800bbec <UART_SetConfig+0x33c>)
 800bab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab6:	f003 0307 	and.w	r3, r3, #7
 800baba:	2b05      	cmp	r3, #5
 800babc:	d826      	bhi.n	800bb0c <UART_SetConfig+0x25c>
 800babe:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <UART_SetConfig+0x214>)
 800bac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac4:	0800badd 	.word	0x0800badd
 800bac8:	0800bae5 	.word	0x0800bae5
 800bacc:	0800baed 	.word	0x0800baed
 800bad0:	0800baf5 	.word	0x0800baf5
 800bad4:	0800bafd 	.word	0x0800bafd
 800bad8:	0800bb05 	.word	0x0800bb05
 800badc:	2300      	movs	r3, #0
 800bade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bae2:	e2ba      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bae4:	2304      	movs	r3, #4
 800bae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baea:	e2b6      	b.n	800c05a <UART_SetConfig+0x7aa>
 800baec:	2308      	movs	r3, #8
 800baee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baf2:	e2b2      	b.n	800c05a <UART_SetConfig+0x7aa>
 800baf4:	2310      	movs	r3, #16
 800baf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafa:	e2ae      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bafc:	2320      	movs	r3, #32
 800bafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb02:	e2aa      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb04:	2340      	movs	r3, #64	; 0x40
 800bb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0a:	e2a6      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb0c:	2380      	movs	r3, #128	; 0x80
 800bb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb12:	e2a2      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a37      	ldr	r2, [pc, #220]	; (800bbf8 <UART_SetConfig+0x348>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d130      	bne.n	800bb80 <UART_SetConfig+0x2d0>
 800bb1e:	4b33      	ldr	r3, [pc, #204]	; (800bbec <UART_SetConfig+0x33c>)
 800bb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb22:	f003 0307 	and.w	r3, r3, #7
 800bb26:	2b05      	cmp	r3, #5
 800bb28:	d826      	bhi.n	800bb78 <UART_SetConfig+0x2c8>
 800bb2a:	a201      	add	r2, pc, #4	; (adr r2, 800bb30 <UART_SetConfig+0x280>)
 800bb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb30:	0800bb49 	.word	0x0800bb49
 800bb34:	0800bb51 	.word	0x0800bb51
 800bb38:	0800bb59 	.word	0x0800bb59
 800bb3c:	0800bb61 	.word	0x0800bb61
 800bb40:	0800bb69 	.word	0x0800bb69
 800bb44:	0800bb71 	.word	0x0800bb71
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb4e:	e284      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb50:	2304      	movs	r3, #4
 800bb52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb56:	e280      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb58:	2308      	movs	r3, #8
 800bb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb5e:	e27c      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb60:	2310      	movs	r3, #16
 800bb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb66:	e278      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb68:	2320      	movs	r3, #32
 800bb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6e:	e274      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb70:	2340      	movs	r3, #64	; 0x40
 800bb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb76:	e270      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb78:	2380      	movs	r3, #128	; 0x80
 800bb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7e:	e26c      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a1d      	ldr	r2, [pc, #116]	; (800bbfc <UART_SetConfig+0x34c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d142      	bne.n	800bc10 <UART_SetConfig+0x360>
 800bb8a:	4b18      	ldr	r3, [pc, #96]	; (800bbec <UART_SetConfig+0x33c>)
 800bb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8e:	f003 0307 	and.w	r3, r3, #7
 800bb92:	2b05      	cmp	r3, #5
 800bb94:	d838      	bhi.n	800bc08 <UART_SetConfig+0x358>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <UART_SetConfig+0x2ec>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbb5 	.word	0x0800bbb5
 800bba0:	0800bbbd 	.word	0x0800bbbd
 800bba4:	0800bbc5 	.word	0x0800bbc5
 800bba8:	0800bbcd 	.word	0x0800bbcd
 800bbac:	0800bbd5 	.word	0x0800bbd5
 800bbb0:	0800bc01 	.word	0x0800bc01
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbba:	e24e      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bbbc:	2304      	movs	r3, #4
 800bbbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbc2:	e24a      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbca:	e246      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd2:	e242      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bbd4:	2320      	movs	r3, #32
 800bbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbda:	e23e      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bbdc:	cfff69f3 	.word	0xcfff69f3
 800bbe0:	58000c00 	.word	0x58000c00
 800bbe4:	11fff4ff 	.word	0x11fff4ff
 800bbe8:	40011000 	.word	0x40011000
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	40004400 	.word	0x40004400
 800bbf4:	40004800 	.word	0x40004800
 800bbf8:	40004c00 	.word	0x40004c00
 800bbfc:	40005000 	.word	0x40005000
 800bc00:	2340      	movs	r3, #64	; 0x40
 800bc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc06:	e228      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bc08:	2380      	movs	r3, #128	; 0x80
 800bc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc0e:	e224      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4ab1      	ldr	r2, [pc, #708]	; (800bedc <UART_SetConfig+0x62c>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d176      	bne.n	800bd08 <UART_SetConfig+0x458>
 800bc1a:	4bb1      	ldr	r3, [pc, #708]	; (800bee0 <UART_SetConfig+0x630>)
 800bc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc22:	2b28      	cmp	r3, #40	; 0x28
 800bc24:	d86c      	bhi.n	800bd00 <UART_SetConfig+0x450>
 800bc26:	a201      	add	r2, pc, #4	; (adr r2, 800bc2c <UART_SetConfig+0x37c>)
 800bc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2c:	0800bcd1 	.word	0x0800bcd1
 800bc30:	0800bd01 	.word	0x0800bd01
 800bc34:	0800bd01 	.word	0x0800bd01
 800bc38:	0800bd01 	.word	0x0800bd01
 800bc3c:	0800bd01 	.word	0x0800bd01
 800bc40:	0800bd01 	.word	0x0800bd01
 800bc44:	0800bd01 	.word	0x0800bd01
 800bc48:	0800bd01 	.word	0x0800bd01
 800bc4c:	0800bcd9 	.word	0x0800bcd9
 800bc50:	0800bd01 	.word	0x0800bd01
 800bc54:	0800bd01 	.word	0x0800bd01
 800bc58:	0800bd01 	.word	0x0800bd01
 800bc5c:	0800bd01 	.word	0x0800bd01
 800bc60:	0800bd01 	.word	0x0800bd01
 800bc64:	0800bd01 	.word	0x0800bd01
 800bc68:	0800bd01 	.word	0x0800bd01
 800bc6c:	0800bce1 	.word	0x0800bce1
 800bc70:	0800bd01 	.word	0x0800bd01
 800bc74:	0800bd01 	.word	0x0800bd01
 800bc78:	0800bd01 	.word	0x0800bd01
 800bc7c:	0800bd01 	.word	0x0800bd01
 800bc80:	0800bd01 	.word	0x0800bd01
 800bc84:	0800bd01 	.word	0x0800bd01
 800bc88:	0800bd01 	.word	0x0800bd01
 800bc8c:	0800bce9 	.word	0x0800bce9
 800bc90:	0800bd01 	.word	0x0800bd01
 800bc94:	0800bd01 	.word	0x0800bd01
 800bc98:	0800bd01 	.word	0x0800bd01
 800bc9c:	0800bd01 	.word	0x0800bd01
 800bca0:	0800bd01 	.word	0x0800bd01
 800bca4:	0800bd01 	.word	0x0800bd01
 800bca8:	0800bd01 	.word	0x0800bd01
 800bcac:	0800bcf1 	.word	0x0800bcf1
 800bcb0:	0800bd01 	.word	0x0800bd01
 800bcb4:	0800bd01 	.word	0x0800bd01
 800bcb8:	0800bd01 	.word	0x0800bd01
 800bcbc:	0800bd01 	.word	0x0800bd01
 800bcc0:	0800bd01 	.word	0x0800bd01
 800bcc4:	0800bd01 	.word	0x0800bd01
 800bcc8:	0800bd01 	.word	0x0800bd01
 800bccc:	0800bcf9 	.word	0x0800bcf9
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcd6:	e1c0      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bcd8:	2304      	movs	r3, #4
 800bcda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcde:	e1bc      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bce0:	2308      	movs	r3, #8
 800bce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bce6:	e1b8      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bce8:	2310      	movs	r3, #16
 800bcea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcee:	e1b4      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bcf0:	2320      	movs	r3, #32
 800bcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf6:	e1b0      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bcf8:	2340      	movs	r3, #64	; 0x40
 800bcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfe:	e1ac      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd00:	2380      	movs	r3, #128	; 0x80
 800bd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd06:	e1a8      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a75      	ldr	r2, [pc, #468]	; (800bee4 <UART_SetConfig+0x634>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d130      	bne.n	800bd74 <UART_SetConfig+0x4c4>
 800bd12:	4b73      	ldr	r3, [pc, #460]	; (800bee0 <UART_SetConfig+0x630>)
 800bd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	d826      	bhi.n	800bd6c <UART_SetConfig+0x4bc>
 800bd1e:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <UART_SetConfig+0x474>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bd3d 	.word	0x0800bd3d
 800bd28:	0800bd45 	.word	0x0800bd45
 800bd2c:	0800bd4d 	.word	0x0800bd4d
 800bd30:	0800bd55 	.word	0x0800bd55
 800bd34:	0800bd5d 	.word	0x0800bd5d
 800bd38:	0800bd65 	.word	0x0800bd65
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd42:	e18a      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd44:	2304      	movs	r3, #4
 800bd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd4a:	e186      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd4c:	2308      	movs	r3, #8
 800bd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd52:	e182      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd54:	2310      	movs	r3, #16
 800bd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5a:	e17e      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd5c:	2320      	movs	r3, #32
 800bd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd62:	e17a      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd64:	2340      	movs	r3, #64	; 0x40
 800bd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6a:	e176      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd6c:	2380      	movs	r3, #128	; 0x80
 800bd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd72:	e172      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a5b      	ldr	r2, [pc, #364]	; (800bee8 <UART_SetConfig+0x638>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d130      	bne.n	800bde0 <UART_SetConfig+0x530>
 800bd7e:	4b58      	ldr	r3, [pc, #352]	; (800bee0 <UART_SetConfig+0x630>)
 800bd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd82:	f003 0307 	and.w	r3, r3, #7
 800bd86:	2b05      	cmp	r3, #5
 800bd88:	d826      	bhi.n	800bdd8 <UART_SetConfig+0x528>
 800bd8a:	a201      	add	r2, pc, #4	; (adr r2, 800bd90 <UART_SetConfig+0x4e0>)
 800bd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd90:	0800bda9 	.word	0x0800bda9
 800bd94:	0800bdb1 	.word	0x0800bdb1
 800bd98:	0800bdb9 	.word	0x0800bdb9
 800bd9c:	0800bdc1 	.word	0x0800bdc1
 800bda0:	0800bdc9 	.word	0x0800bdc9
 800bda4:	0800bdd1 	.word	0x0800bdd1
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdae:	e154      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bdb0:	2304      	movs	r3, #4
 800bdb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdb6:	e150      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bdb8:	2308      	movs	r3, #8
 800bdba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdbe:	e14c      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bdc0:	2310      	movs	r3, #16
 800bdc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdc6:	e148      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bdc8:	2320      	movs	r3, #32
 800bdca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdce:	e144      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bdd0:	2340      	movs	r3, #64	; 0x40
 800bdd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd6:	e140      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bdd8:	2380      	movs	r3, #128	; 0x80
 800bdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdde:	e13c      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a41      	ldr	r2, [pc, #260]	; (800beec <UART_SetConfig+0x63c>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	f040 8082 	bne.w	800bef0 <UART_SetConfig+0x640>
 800bdec:	4b3c      	ldr	r3, [pc, #240]	; (800bee0 <UART_SetConfig+0x630>)
 800bdee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdf4:	2b28      	cmp	r3, #40	; 0x28
 800bdf6:	d86d      	bhi.n	800bed4 <UART_SetConfig+0x624>
 800bdf8:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <UART_SetConfig+0x550>)
 800bdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800bea5 	.word	0x0800bea5
 800be04:	0800bed5 	.word	0x0800bed5
 800be08:	0800bed5 	.word	0x0800bed5
 800be0c:	0800bed5 	.word	0x0800bed5
 800be10:	0800bed5 	.word	0x0800bed5
 800be14:	0800bed5 	.word	0x0800bed5
 800be18:	0800bed5 	.word	0x0800bed5
 800be1c:	0800bed5 	.word	0x0800bed5
 800be20:	0800bead 	.word	0x0800bead
 800be24:	0800bed5 	.word	0x0800bed5
 800be28:	0800bed5 	.word	0x0800bed5
 800be2c:	0800bed5 	.word	0x0800bed5
 800be30:	0800bed5 	.word	0x0800bed5
 800be34:	0800bed5 	.word	0x0800bed5
 800be38:	0800bed5 	.word	0x0800bed5
 800be3c:	0800bed5 	.word	0x0800bed5
 800be40:	0800beb5 	.word	0x0800beb5
 800be44:	0800bed5 	.word	0x0800bed5
 800be48:	0800bed5 	.word	0x0800bed5
 800be4c:	0800bed5 	.word	0x0800bed5
 800be50:	0800bed5 	.word	0x0800bed5
 800be54:	0800bed5 	.word	0x0800bed5
 800be58:	0800bed5 	.word	0x0800bed5
 800be5c:	0800bed5 	.word	0x0800bed5
 800be60:	0800bebd 	.word	0x0800bebd
 800be64:	0800bed5 	.word	0x0800bed5
 800be68:	0800bed5 	.word	0x0800bed5
 800be6c:	0800bed5 	.word	0x0800bed5
 800be70:	0800bed5 	.word	0x0800bed5
 800be74:	0800bed5 	.word	0x0800bed5
 800be78:	0800bed5 	.word	0x0800bed5
 800be7c:	0800bed5 	.word	0x0800bed5
 800be80:	0800bec5 	.word	0x0800bec5
 800be84:	0800bed5 	.word	0x0800bed5
 800be88:	0800bed5 	.word	0x0800bed5
 800be8c:	0800bed5 	.word	0x0800bed5
 800be90:	0800bed5 	.word	0x0800bed5
 800be94:	0800bed5 	.word	0x0800bed5
 800be98:	0800bed5 	.word	0x0800bed5
 800be9c:	0800bed5 	.word	0x0800bed5
 800bea0:	0800becd 	.word	0x0800becd
 800bea4:	2301      	movs	r3, #1
 800bea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beaa:	e0d6      	b.n	800c05a <UART_SetConfig+0x7aa>
 800beac:	2304      	movs	r3, #4
 800beae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb2:	e0d2      	b.n	800c05a <UART_SetConfig+0x7aa>
 800beb4:	2308      	movs	r3, #8
 800beb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beba:	e0ce      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bebc:	2310      	movs	r3, #16
 800bebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bec2:	e0ca      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bec4:	2320      	movs	r3, #32
 800bec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beca:	e0c6      	b.n	800c05a <UART_SetConfig+0x7aa>
 800becc:	2340      	movs	r3, #64	; 0x40
 800bece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bed2:	e0c2      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bed4:	2380      	movs	r3, #128	; 0x80
 800bed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beda:	e0be      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bedc:	40011400 	.word	0x40011400
 800bee0:	58024400 	.word	0x58024400
 800bee4:	40007800 	.word	0x40007800
 800bee8:	40007c00 	.word	0x40007c00
 800beec:	40011800 	.word	0x40011800
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4aad      	ldr	r2, [pc, #692]	; (800c1ac <UART_SetConfig+0x8fc>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d176      	bne.n	800bfe8 <UART_SetConfig+0x738>
 800befa:	4bad      	ldr	r3, [pc, #692]	; (800c1b0 <UART_SetConfig+0x900>)
 800befc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf02:	2b28      	cmp	r3, #40	; 0x28
 800bf04:	d86c      	bhi.n	800bfe0 <UART_SetConfig+0x730>
 800bf06:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <UART_SetConfig+0x65c>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bfb1 	.word	0x0800bfb1
 800bf10:	0800bfe1 	.word	0x0800bfe1
 800bf14:	0800bfe1 	.word	0x0800bfe1
 800bf18:	0800bfe1 	.word	0x0800bfe1
 800bf1c:	0800bfe1 	.word	0x0800bfe1
 800bf20:	0800bfe1 	.word	0x0800bfe1
 800bf24:	0800bfe1 	.word	0x0800bfe1
 800bf28:	0800bfe1 	.word	0x0800bfe1
 800bf2c:	0800bfb9 	.word	0x0800bfb9
 800bf30:	0800bfe1 	.word	0x0800bfe1
 800bf34:	0800bfe1 	.word	0x0800bfe1
 800bf38:	0800bfe1 	.word	0x0800bfe1
 800bf3c:	0800bfe1 	.word	0x0800bfe1
 800bf40:	0800bfe1 	.word	0x0800bfe1
 800bf44:	0800bfe1 	.word	0x0800bfe1
 800bf48:	0800bfe1 	.word	0x0800bfe1
 800bf4c:	0800bfc1 	.word	0x0800bfc1
 800bf50:	0800bfe1 	.word	0x0800bfe1
 800bf54:	0800bfe1 	.word	0x0800bfe1
 800bf58:	0800bfe1 	.word	0x0800bfe1
 800bf5c:	0800bfe1 	.word	0x0800bfe1
 800bf60:	0800bfe1 	.word	0x0800bfe1
 800bf64:	0800bfe1 	.word	0x0800bfe1
 800bf68:	0800bfe1 	.word	0x0800bfe1
 800bf6c:	0800bfc9 	.word	0x0800bfc9
 800bf70:	0800bfe1 	.word	0x0800bfe1
 800bf74:	0800bfe1 	.word	0x0800bfe1
 800bf78:	0800bfe1 	.word	0x0800bfe1
 800bf7c:	0800bfe1 	.word	0x0800bfe1
 800bf80:	0800bfe1 	.word	0x0800bfe1
 800bf84:	0800bfe1 	.word	0x0800bfe1
 800bf88:	0800bfe1 	.word	0x0800bfe1
 800bf8c:	0800bfd1 	.word	0x0800bfd1
 800bf90:	0800bfe1 	.word	0x0800bfe1
 800bf94:	0800bfe1 	.word	0x0800bfe1
 800bf98:	0800bfe1 	.word	0x0800bfe1
 800bf9c:	0800bfe1 	.word	0x0800bfe1
 800bfa0:	0800bfe1 	.word	0x0800bfe1
 800bfa4:	0800bfe1 	.word	0x0800bfe1
 800bfa8:	0800bfe1 	.word	0x0800bfe1
 800bfac:	0800bfd9 	.word	0x0800bfd9
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfb6:	e050      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bfb8:	2304      	movs	r3, #4
 800bfba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfbe:	e04c      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bfc0:	2308      	movs	r3, #8
 800bfc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfc6:	e048      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bfc8:	2310      	movs	r3, #16
 800bfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfce:	e044      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bfd0:	2320      	movs	r3, #32
 800bfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfd6:	e040      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bfd8:	2340      	movs	r3, #64	; 0x40
 800bfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfde:	e03c      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bfe0:	2380      	movs	r3, #128	; 0x80
 800bfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfe6:	e038      	b.n	800c05a <UART_SetConfig+0x7aa>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a71      	ldr	r2, [pc, #452]	; (800c1b4 <UART_SetConfig+0x904>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d130      	bne.n	800c054 <UART_SetConfig+0x7a4>
 800bff2:	4b6f      	ldr	r3, [pc, #444]	; (800c1b0 <UART_SetConfig+0x900>)
 800bff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bff6:	f003 0307 	and.w	r3, r3, #7
 800bffa:	2b05      	cmp	r3, #5
 800bffc:	d826      	bhi.n	800c04c <UART_SetConfig+0x79c>
 800bffe:	a201      	add	r2, pc, #4	; (adr r2, 800c004 <UART_SetConfig+0x754>)
 800c000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c004:	0800c01d 	.word	0x0800c01d
 800c008:	0800c025 	.word	0x0800c025
 800c00c:	0800c02d 	.word	0x0800c02d
 800c010:	0800c035 	.word	0x0800c035
 800c014:	0800c03d 	.word	0x0800c03d
 800c018:	0800c045 	.word	0x0800c045
 800c01c:	2302      	movs	r3, #2
 800c01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c022:	e01a      	b.n	800c05a <UART_SetConfig+0x7aa>
 800c024:	2304      	movs	r3, #4
 800c026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c02a:	e016      	b.n	800c05a <UART_SetConfig+0x7aa>
 800c02c:	2308      	movs	r3, #8
 800c02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c032:	e012      	b.n	800c05a <UART_SetConfig+0x7aa>
 800c034:	2310      	movs	r3, #16
 800c036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c03a:	e00e      	b.n	800c05a <UART_SetConfig+0x7aa>
 800c03c:	2320      	movs	r3, #32
 800c03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c042:	e00a      	b.n	800c05a <UART_SetConfig+0x7aa>
 800c044:	2340      	movs	r3, #64	; 0x40
 800c046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c04a:	e006      	b.n	800c05a <UART_SetConfig+0x7aa>
 800c04c:	2380      	movs	r3, #128	; 0x80
 800c04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c052:	e002      	b.n	800c05a <UART_SetConfig+0x7aa>
 800c054:	2380      	movs	r3, #128	; 0x80
 800c056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a55      	ldr	r2, [pc, #340]	; (800c1b4 <UART_SetConfig+0x904>)
 800c060:	4293      	cmp	r3, r2
 800c062:	f040 80f0 	bne.w	800c246 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c066:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c06a:	2b20      	cmp	r3, #32
 800c06c:	dc46      	bgt.n	800c0fc <UART_SetConfig+0x84c>
 800c06e:	2b02      	cmp	r3, #2
 800c070:	db75      	blt.n	800c15e <UART_SetConfig+0x8ae>
 800c072:	3b02      	subs	r3, #2
 800c074:	2b1e      	cmp	r3, #30
 800c076:	d872      	bhi.n	800c15e <UART_SetConfig+0x8ae>
 800c078:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <UART_SetConfig+0x7d0>)
 800c07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07e:	bf00      	nop
 800c080:	0800c103 	.word	0x0800c103
 800c084:	0800c15f 	.word	0x0800c15f
 800c088:	0800c10b 	.word	0x0800c10b
 800c08c:	0800c15f 	.word	0x0800c15f
 800c090:	0800c15f 	.word	0x0800c15f
 800c094:	0800c15f 	.word	0x0800c15f
 800c098:	0800c11b 	.word	0x0800c11b
 800c09c:	0800c15f 	.word	0x0800c15f
 800c0a0:	0800c15f 	.word	0x0800c15f
 800c0a4:	0800c15f 	.word	0x0800c15f
 800c0a8:	0800c15f 	.word	0x0800c15f
 800c0ac:	0800c15f 	.word	0x0800c15f
 800c0b0:	0800c15f 	.word	0x0800c15f
 800c0b4:	0800c15f 	.word	0x0800c15f
 800c0b8:	0800c12b 	.word	0x0800c12b
 800c0bc:	0800c15f 	.word	0x0800c15f
 800c0c0:	0800c15f 	.word	0x0800c15f
 800c0c4:	0800c15f 	.word	0x0800c15f
 800c0c8:	0800c15f 	.word	0x0800c15f
 800c0cc:	0800c15f 	.word	0x0800c15f
 800c0d0:	0800c15f 	.word	0x0800c15f
 800c0d4:	0800c15f 	.word	0x0800c15f
 800c0d8:	0800c15f 	.word	0x0800c15f
 800c0dc:	0800c15f 	.word	0x0800c15f
 800c0e0:	0800c15f 	.word	0x0800c15f
 800c0e4:	0800c15f 	.word	0x0800c15f
 800c0e8:	0800c15f 	.word	0x0800c15f
 800c0ec:	0800c15f 	.word	0x0800c15f
 800c0f0:	0800c15f 	.word	0x0800c15f
 800c0f4:	0800c15f 	.word	0x0800c15f
 800c0f8:	0800c151 	.word	0x0800c151
 800c0fc:	2b40      	cmp	r3, #64	; 0x40
 800c0fe:	d02a      	beq.n	800c156 <UART_SetConfig+0x8a6>
 800c100:	e02d      	b.n	800c15e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c102:	f7fc ffa7 	bl	8009054 <HAL_RCCEx_GetD3PCLK1Freq>
 800c106:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c108:	e02f      	b.n	800c16a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c10a:	f107 0314 	add.w	r3, r7, #20
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fc ffb6 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c118:	e027      	b.n	800c16a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c11a:	f107 0308 	add.w	r3, r7, #8
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fd f902 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c128:	e01f      	b.n	800c16a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c12a:	4b21      	ldr	r3, [pc, #132]	; (800c1b0 <UART_SetConfig+0x900>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f003 0320 	and.w	r3, r3, #32
 800c132:	2b00      	cmp	r3, #0
 800c134:	d009      	beq.n	800c14a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c136:	4b1e      	ldr	r3, [pc, #120]	; (800c1b0 <UART_SetConfig+0x900>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	08db      	lsrs	r3, r3, #3
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	4a1d      	ldr	r2, [pc, #116]	; (800c1b8 <UART_SetConfig+0x908>)
 800c142:	fa22 f303 	lsr.w	r3, r2, r3
 800c146:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c148:	e00f      	b.n	800c16a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c14a:	4b1b      	ldr	r3, [pc, #108]	; (800c1b8 <UART_SetConfig+0x908>)
 800c14c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c14e:	e00c      	b.n	800c16a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c150:	4b1a      	ldr	r3, [pc, #104]	; (800c1bc <UART_SetConfig+0x90c>)
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c154:	e009      	b.n	800c16a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c15a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c15c:	e005      	b.n	800c16a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c168:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 81e6 	beq.w	800c53e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c176:	4a12      	ldr	r2, [pc, #72]	; (800c1c0 <UART_SetConfig+0x910>)
 800c178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c17c:	461a      	mov	r2, r3
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	fbb3 f3f2 	udiv	r3, r3, r2
 800c184:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	4613      	mov	r3, r2
 800c18c:	005b      	lsls	r3, r3, #1
 800c18e:	4413      	add	r3, r2
 800c190:	6a3a      	ldr	r2, [r7, #32]
 800c192:	429a      	cmp	r2, r3
 800c194:	d305      	bcc.n	800c1a2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c19c:	6a3a      	ldr	r2, [r7, #32]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d910      	bls.n	800c1c4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c1a8:	e1c9      	b.n	800c53e <UART_SetConfig+0xc8e>
 800c1aa:	bf00      	nop
 800c1ac:	40011c00 	.word	0x40011c00
 800c1b0:	58024400 	.word	0x58024400
 800c1b4:	58000c00 	.word	0x58000c00
 800c1b8:	03d09000 	.word	0x03d09000
 800c1bc:	003d0900 	.word	0x003d0900
 800c1c0:	0800dad0 	.word	0x0800dad0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f04f 0100 	mov.w	r1, #0
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d0:	4ac1      	ldr	r2, [pc, #772]	; (800c4d8 <UART_SetConfig+0xc28>)
 800c1d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	f04f 0300 	mov.w	r3, #0
 800c1dc:	f7f4 f8e8 	bl	80003b0 <__aeabi_uldivmod>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	f04f 0200 	mov.w	r2, #0
 800c1ec:	f04f 0300 	mov.w	r3, #0
 800c1f0:	020b      	lsls	r3, r1, #8
 800c1f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c1f6:	0202      	lsls	r2, r0, #8
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	6849      	ldr	r1, [r1, #4]
 800c1fc:	0849      	lsrs	r1, r1, #1
 800c1fe:	4608      	mov	r0, r1
 800c200:	f04f 0100 	mov.w	r1, #0
 800c204:	1814      	adds	r4, r2, r0
 800c206:	eb43 0501 	adc.w	r5, r3, r1
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	461a      	mov	r2, r3
 800c210:	f04f 0300 	mov.w	r3, #0
 800c214:	4620      	mov	r0, r4
 800c216:	4629      	mov	r1, r5
 800c218:	f7f4 f8ca 	bl	80003b0 <__aeabi_uldivmod>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4613      	mov	r3, r2
 800c222:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c22a:	d308      	bcc.n	800c23e <UART_SetConfig+0x98e>
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c232:	d204      	bcs.n	800c23e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c23a:	60da      	str	r2, [r3, #12]
 800c23c:	e17f      	b.n	800c53e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c244:	e17b      	b.n	800c53e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	69db      	ldr	r3, [r3, #28]
 800c24a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c24e:	f040 80bd 	bne.w	800c3cc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800c252:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c256:	2b20      	cmp	r3, #32
 800c258:	dc48      	bgt.n	800c2ec <UART_SetConfig+0xa3c>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	db7b      	blt.n	800c356 <UART_SetConfig+0xaa6>
 800c25e:	2b20      	cmp	r3, #32
 800c260:	d879      	bhi.n	800c356 <UART_SetConfig+0xaa6>
 800c262:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <UART_SetConfig+0x9b8>)
 800c264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c268:	0800c2f3 	.word	0x0800c2f3
 800c26c:	0800c2fb 	.word	0x0800c2fb
 800c270:	0800c357 	.word	0x0800c357
 800c274:	0800c357 	.word	0x0800c357
 800c278:	0800c303 	.word	0x0800c303
 800c27c:	0800c357 	.word	0x0800c357
 800c280:	0800c357 	.word	0x0800c357
 800c284:	0800c357 	.word	0x0800c357
 800c288:	0800c313 	.word	0x0800c313
 800c28c:	0800c357 	.word	0x0800c357
 800c290:	0800c357 	.word	0x0800c357
 800c294:	0800c357 	.word	0x0800c357
 800c298:	0800c357 	.word	0x0800c357
 800c29c:	0800c357 	.word	0x0800c357
 800c2a0:	0800c357 	.word	0x0800c357
 800c2a4:	0800c357 	.word	0x0800c357
 800c2a8:	0800c323 	.word	0x0800c323
 800c2ac:	0800c357 	.word	0x0800c357
 800c2b0:	0800c357 	.word	0x0800c357
 800c2b4:	0800c357 	.word	0x0800c357
 800c2b8:	0800c357 	.word	0x0800c357
 800c2bc:	0800c357 	.word	0x0800c357
 800c2c0:	0800c357 	.word	0x0800c357
 800c2c4:	0800c357 	.word	0x0800c357
 800c2c8:	0800c357 	.word	0x0800c357
 800c2cc:	0800c357 	.word	0x0800c357
 800c2d0:	0800c357 	.word	0x0800c357
 800c2d4:	0800c357 	.word	0x0800c357
 800c2d8:	0800c357 	.word	0x0800c357
 800c2dc:	0800c357 	.word	0x0800c357
 800c2e0:	0800c357 	.word	0x0800c357
 800c2e4:	0800c357 	.word	0x0800c357
 800c2e8:	0800c349 	.word	0x0800c349
 800c2ec:	2b40      	cmp	r3, #64	; 0x40
 800c2ee:	d02e      	beq.n	800c34e <UART_SetConfig+0xa9e>
 800c2f0:	e031      	b.n	800c356 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2f2:	f7fb fb65 	bl	80079c0 <HAL_RCC_GetPCLK1Freq>
 800c2f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c2f8:	e033      	b.n	800c362 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2fa:	f7fb fb77 	bl	80079ec <HAL_RCC_GetPCLK2Freq>
 800c2fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c300:	e02f      	b.n	800c362 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c302:	f107 0314 	add.w	r3, r7, #20
 800c306:	4618      	mov	r0, r3
 800c308:	f7fc feba 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c310:	e027      	b.n	800c362 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c312:	f107 0308 	add.w	r3, r7, #8
 800c316:	4618      	mov	r0, r3
 800c318:	f7fd f806 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c320:	e01f      	b.n	800c362 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c322:	4b6e      	ldr	r3, [pc, #440]	; (800c4dc <UART_SetConfig+0xc2c>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 0320 	and.w	r3, r3, #32
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d009      	beq.n	800c342 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c32e:	4b6b      	ldr	r3, [pc, #428]	; (800c4dc <UART_SetConfig+0xc2c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	08db      	lsrs	r3, r3, #3
 800c334:	f003 0303 	and.w	r3, r3, #3
 800c338:	4a69      	ldr	r2, [pc, #420]	; (800c4e0 <UART_SetConfig+0xc30>)
 800c33a:	fa22 f303 	lsr.w	r3, r2, r3
 800c33e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c340:	e00f      	b.n	800c362 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800c342:	4b67      	ldr	r3, [pc, #412]	; (800c4e0 <UART_SetConfig+0xc30>)
 800c344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c346:	e00c      	b.n	800c362 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c348:	4b66      	ldr	r3, [pc, #408]	; (800c4e4 <UART_SetConfig+0xc34>)
 800c34a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c34c:	e009      	b.n	800c362 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c34e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c352:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c354:	e005      	b.n	800c362 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c364:	2b00      	cmp	r3, #0
 800c366:	f000 80ea 	beq.w	800c53e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36e:	4a5a      	ldr	r2, [pc, #360]	; (800c4d8 <UART_SetConfig+0xc28>)
 800c370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c374:	461a      	mov	r2, r3
 800c376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c378:	fbb3 f3f2 	udiv	r3, r3, r2
 800c37c:	005a      	lsls	r2, r3, #1
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	085b      	lsrs	r3, r3, #1
 800c384:	441a      	add	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c38e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	2b0f      	cmp	r3, #15
 800c394:	d916      	bls.n	800c3c4 <UART_SetConfig+0xb14>
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c39c:	d212      	bcs.n	800c3c4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	f023 030f 	bic.w	r3, r3, #15
 800c3a6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	085b      	lsrs	r3, r3, #1
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	f003 0307 	and.w	r3, r3, #7
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c3c0:	60da      	str	r2, [r3, #12]
 800c3c2:	e0bc      	b.n	800c53e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c3ca:	e0b8      	b.n	800c53e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c3cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c3d0:	2b20      	cmp	r3, #32
 800c3d2:	dc4b      	bgt.n	800c46c <UART_SetConfig+0xbbc>
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f2c0 8087 	blt.w	800c4e8 <UART_SetConfig+0xc38>
 800c3da:	2b20      	cmp	r3, #32
 800c3dc:	f200 8084 	bhi.w	800c4e8 <UART_SetConfig+0xc38>
 800c3e0:	a201      	add	r2, pc, #4	; (adr r2, 800c3e8 <UART_SetConfig+0xb38>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c473 	.word	0x0800c473
 800c3ec:	0800c47b 	.word	0x0800c47b
 800c3f0:	0800c4e9 	.word	0x0800c4e9
 800c3f4:	0800c4e9 	.word	0x0800c4e9
 800c3f8:	0800c483 	.word	0x0800c483
 800c3fc:	0800c4e9 	.word	0x0800c4e9
 800c400:	0800c4e9 	.word	0x0800c4e9
 800c404:	0800c4e9 	.word	0x0800c4e9
 800c408:	0800c493 	.word	0x0800c493
 800c40c:	0800c4e9 	.word	0x0800c4e9
 800c410:	0800c4e9 	.word	0x0800c4e9
 800c414:	0800c4e9 	.word	0x0800c4e9
 800c418:	0800c4e9 	.word	0x0800c4e9
 800c41c:	0800c4e9 	.word	0x0800c4e9
 800c420:	0800c4e9 	.word	0x0800c4e9
 800c424:	0800c4e9 	.word	0x0800c4e9
 800c428:	0800c4a3 	.word	0x0800c4a3
 800c42c:	0800c4e9 	.word	0x0800c4e9
 800c430:	0800c4e9 	.word	0x0800c4e9
 800c434:	0800c4e9 	.word	0x0800c4e9
 800c438:	0800c4e9 	.word	0x0800c4e9
 800c43c:	0800c4e9 	.word	0x0800c4e9
 800c440:	0800c4e9 	.word	0x0800c4e9
 800c444:	0800c4e9 	.word	0x0800c4e9
 800c448:	0800c4e9 	.word	0x0800c4e9
 800c44c:	0800c4e9 	.word	0x0800c4e9
 800c450:	0800c4e9 	.word	0x0800c4e9
 800c454:	0800c4e9 	.word	0x0800c4e9
 800c458:	0800c4e9 	.word	0x0800c4e9
 800c45c:	0800c4e9 	.word	0x0800c4e9
 800c460:	0800c4e9 	.word	0x0800c4e9
 800c464:	0800c4e9 	.word	0x0800c4e9
 800c468:	0800c4c9 	.word	0x0800c4c9
 800c46c:	2b40      	cmp	r3, #64	; 0x40
 800c46e:	d02e      	beq.n	800c4ce <UART_SetConfig+0xc1e>
 800c470:	e03a      	b.n	800c4e8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c472:	f7fb faa5 	bl	80079c0 <HAL_RCC_GetPCLK1Freq>
 800c476:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c478:	e03c      	b.n	800c4f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c47a:	f7fb fab7 	bl	80079ec <HAL_RCC_GetPCLK2Freq>
 800c47e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c480:	e038      	b.n	800c4f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c482:	f107 0314 	add.w	r3, r7, #20
 800c486:	4618      	mov	r0, r3
 800c488:	f7fc fdfa 	bl	8009080 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c490:	e030      	b.n	800c4f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c492:	f107 0308 	add.w	r3, r7, #8
 800c496:	4618      	mov	r0, r3
 800c498:	f7fc ff46 	bl	8009328 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4a0:	e028      	b.n	800c4f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4a2:	4b0e      	ldr	r3, [pc, #56]	; (800c4dc <UART_SetConfig+0xc2c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 0320 	and.w	r3, r3, #32
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d009      	beq.n	800c4c2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4ae:	4b0b      	ldr	r3, [pc, #44]	; (800c4dc <UART_SetConfig+0xc2c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	08db      	lsrs	r3, r3, #3
 800c4b4:	f003 0303 	and.w	r3, r3, #3
 800c4b8:	4a09      	ldr	r2, [pc, #36]	; (800c4e0 <UART_SetConfig+0xc30>)
 800c4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c4be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4c0:	e018      	b.n	800c4f4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800c4c2:	4b07      	ldr	r3, [pc, #28]	; (800c4e0 <UART_SetConfig+0xc30>)
 800c4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4c6:	e015      	b.n	800c4f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4c8:	4b06      	ldr	r3, [pc, #24]	; (800c4e4 <UART_SetConfig+0xc34>)
 800c4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4cc:	e012      	b.n	800c4f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4d4:	e00e      	b.n	800c4f4 <UART_SetConfig+0xc44>
 800c4d6:	bf00      	nop
 800c4d8:	0800dad0 	.word	0x0800dad0
 800c4dc:	58024400 	.word	0x58024400
 800c4e0:	03d09000 	.word	0x03d09000
 800c4e4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c4f2:	bf00      	nop
    }

    if (pclk != 0U)
 800c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d021      	beq.n	800c53e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fe:	4a1a      	ldr	r2, [pc, #104]	; (800c568 <UART_SetConfig+0xcb8>)
 800c500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c504:	461a      	mov	r2, r3
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	fbb3 f2f2 	udiv	r2, r3, r2
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	085b      	lsrs	r3, r3, #1
 800c512:	441a      	add	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	fbb2 f3f3 	udiv	r3, r2, r3
 800c51c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c520:	2b0f      	cmp	r3, #15
 800c522:	d909      	bls.n	800c538 <UART_SetConfig+0xc88>
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c52a:	d205      	bcs.n	800c538 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52e:	b29a      	uxth	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	60da      	str	r2, [r3, #12]
 800c536:	e002      	b.n	800c53e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c55a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3738      	adds	r7, #56	; 0x38
 800c562:	46bd      	mov	sp, r7
 800c564:	bdb0      	pop	{r4, r5, r7, pc}
 800c566:	bf00      	nop
 800c568:	0800dad0 	.word	0x0800dad0

0800c56c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c578:	f003 0301 	and.w	r3, r3, #1
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00a      	beq.n	800c596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	430a      	orrs	r2, r1
 800c594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59a:	f003 0302 	and.w	r3, r3, #2
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00a      	beq.n	800c5b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	430a      	orrs	r2, r1
 800c5b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5bc:	f003 0304 	and.w	r3, r3, #4
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00a      	beq.n	800c5da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	430a      	orrs	r2, r1
 800c5d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5de:	f003 0308 	and.w	r3, r3, #8
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00a      	beq.n	800c5fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	430a      	orrs	r2, r1
 800c5fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c600:	f003 0310 	and.w	r3, r3, #16
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00a      	beq.n	800c61e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	430a      	orrs	r2, r1
 800c61c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c622:	f003 0320 	and.w	r3, r3, #32
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00a      	beq.n	800c640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	430a      	orrs	r2, r1
 800c63e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d01a      	beq.n	800c682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	430a      	orrs	r2, r1
 800c660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c66a:	d10a      	bne.n	800c682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00a      	beq.n	800c6a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	605a      	str	r2, [r3, #4]
  }
}
 800c6a4:	bf00      	nop
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af02      	add	r7, sp, #8
 800c6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c6c0:	f7f5 f988 	bl	80019d4 <HAL_GetTick>
 800c6c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 0308 	and.w	r3, r3, #8
 800c6d0:	2b08      	cmp	r3, #8
 800c6d2:	d10e      	bne.n	800c6f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f82f 	bl	800c746 <UART_WaitOnFlagUntilTimeout>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e025      	b.n	800c73e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0304 	and.w	r3, r3, #4
 800c6fc:	2b04      	cmp	r3, #4
 800c6fe:	d10e      	bne.n	800c71e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f819 	bl	800c746 <UART_WaitOnFlagUntilTimeout>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c71a:	2303      	movs	r3, #3
 800c71c:	e00f      	b.n	800c73e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2220      	movs	r2, #32
 800c722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2220      	movs	r2, #32
 800c72a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b09c      	sub	sp, #112	; 0x70
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	60f8      	str	r0, [r7, #12]
 800c74e:	60b9      	str	r1, [r7, #8]
 800c750:	603b      	str	r3, [r7, #0]
 800c752:	4613      	mov	r3, r2
 800c754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c756:	e0a9      	b.n	800c8ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75e:	f000 80a5 	beq.w	800c8ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c762:	f7f5 f937 	bl	80019d4 <HAL_GetTick>
 800c766:	4602      	mov	r2, r0
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c76e:	429a      	cmp	r2, r3
 800c770:	d302      	bcc.n	800c778 <UART_WaitOnFlagUntilTimeout+0x32>
 800c772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c774:	2b00      	cmp	r3, #0
 800c776:	d140      	bne.n	800c7fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c780:	e853 3f00 	ldrex	r3, [r3]
 800c784:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c788:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c78c:	667b      	str	r3, [r7, #100]	; 0x64
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c796:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c798:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c79c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c79e:	e841 2300 	strex	r3, r2, [r1]
 800c7a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c7a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e6      	bne.n	800c778 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b4:	e853 3f00 	ldrex	r3, [r3]
 800c7b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	f023 0301 	bic.w	r3, r3, #1
 800c7c0:	663b      	str	r3, [r7, #96]	; 0x60
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3308      	adds	r3, #8
 800c7c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800c7cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c7d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7d2:	e841 2300 	strex	r3, r2, [r1]
 800c7d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1e5      	bne.n	800c7aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2220      	movs	r2, #32
 800c7e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2220      	movs	r2, #32
 800c7ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e069      	b.n	800c8ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f003 0304 	and.w	r3, r3, #4
 800c804:	2b00      	cmp	r3, #0
 800c806:	d051      	beq.n	800c8ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c816:	d149      	bne.n	800c8ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c820:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	e853 3f00 	ldrex	r3, [r3]
 800c82e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c836:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	461a      	mov	r2, r3
 800c83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c840:	637b      	str	r3, [r7, #52]	; 0x34
 800c842:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c848:	e841 2300 	strex	r3, r2, [r1]
 800c84c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1e6      	bne.n	800c822 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	3308      	adds	r3, #8
 800c85a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	e853 3f00 	ldrex	r3, [r3]
 800c862:	613b      	str	r3, [r7, #16]
   return(result);
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	f023 0301 	bic.w	r3, r3, #1
 800c86a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3308      	adds	r3, #8
 800c872:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c874:	623a      	str	r2, [r7, #32]
 800c876:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c878:	69f9      	ldr	r1, [r7, #28]
 800c87a:	6a3a      	ldr	r2, [r7, #32]
 800c87c:	e841 2300 	strex	r3, r2, [r1]
 800c880:	61bb      	str	r3, [r7, #24]
   return(result);
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1e5      	bne.n	800c854 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2220      	movs	r2, #32
 800c88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2220      	movs	r2, #32
 800c894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2220      	movs	r2, #32
 800c89c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e010      	b.n	800c8ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	69da      	ldr	r2, [r3, #28]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	bf0c      	ite	eq
 800c8bc:	2301      	moveq	r3, #1
 800c8be:	2300      	movne	r3, #0
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	f43f af46 	beq.w	800c758 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3770      	adds	r7, #112	; 0x70
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
	...

0800c8d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b096      	sub	sp, #88	; 0x58
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	88fa      	ldrh	r2, [r7, #6]
 800c8f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2222      	movs	r2, #34	; 0x22
 800c900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d02c      	beq.n	800c966 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c910:	4a42      	ldr	r2, [pc, #264]	; (800ca1c <UART_Start_Receive_DMA+0x144>)
 800c912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c918:	4a41      	ldr	r2, [pc, #260]	; (800ca20 <UART_Start_Receive_DMA+0x148>)
 800c91a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c920:	4a40      	ldr	r2, [pc, #256]	; (800ca24 <UART_Start_Receive_DMA+0x14c>)
 800c922:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c928:	2200      	movs	r2, #0
 800c92a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	3324      	adds	r3, #36	; 0x24
 800c936:	4619      	mov	r1, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c93c:	461a      	mov	r2, r3
 800c93e:	88fb      	ldrh	r3, [r7, #6]
 800c940:	f7f7 fc1a 	bl	8004178 <HAL_DMA_Start_IT>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00d      	beq.n	800c966 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2210      	movs	r2, #16
 800c94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2220      	movs	r2, #32
 800c95e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	e055      	b.n	800ca12 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d018      	beq.n	800c9a8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97e:	e853 3f00 	ldrex	r3, [r3]
 800c982:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c98a:	657b      	str	r3, [r7, #84]	; 0x54
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	461a      	mov	r2, r3
 800c992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c994:	64bb      	str	r3, [r7, #72]	; 0x48
 800c996:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c998:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c99a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c99c:	e841 2300 	strex	r3, r2, [r1]
 800c9a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1e6      	bne.n	800c976 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3308      	adds	r3, #8
 800c9ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	e853 3f00 	ldrex	r3, [r3]
 800c9b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	653b      	str	r3, [r7, #80]	; 0x50
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9c8:	637a      	str	r2, [r7, #52]	; 0x34
 800c9ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9d0:	e841 2300 	strex	r3, r2, [r1]
 800c9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1e5      	bne.n	800c9a8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	e853 3f00 	ldrex	r3, [r3]
 800c9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9fc:	623a      	str	r2, [r7, #32]
 800c9fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca00:	69f9      	ldr	r1, [r7, #28]
 800ca02:	6a3a      	ldr	r2, [r7, #32]
 800ca04:	e841 2300 	strex	r3, r2, [r1]
 800ca08:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1e5      	bne.n	800c9dc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3758      	adds	r7, #88	; 0x58
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	0800cc2b 	.word	0x0800cc2b
 800ca20:	0800cd4d 	.word	0x0800cd4d
 800ca24:	0800cd85 	.word	0x0800cd85

0800ca28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b08f      	sub	sp, #60	; 0x3c
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	e853 3f00 	ldrex	r3, [r3]
 800ca3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ca44:	637b      	str	r3, [r7, #52]	; 0x34
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca50:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca56:	e841 2300 	strex	r3, r2, [r1]
 800ca5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1e6      	bne.n	800ca30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	3308      	adds	r3, #8
 800ca68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	e853 3f00 	ldrex	r3, [r3]
 800ca70:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ca78:	633b      	str	r3, [r7, #48]	; 0x30
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3308      	adds	r3, #8
 800ca80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca82:	61ba      	str	r2, [r7, #24]
 800ca84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca86:	6979      	ldr	r1, [r7, #20]
 800ca88:	69ba      	ldr	r2, [r7, #24]
 800ca8a:	e841 2300 	strex	r3, r2, [r1]
 800ca8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1e5      	bne.n	800ca62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2220      	movs	r2, #32
 800ca9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ca9e:	bf00      	nop
 800caa0:	373c      	adds	r7, #60	; 0x3c
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
	...

0800caac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800caac:	b480      	push	{r7}
 800caae:	b095      	sub	sp, #84	; 0x54
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cabc:	e853 3f00 	ldrex	r3, [r3]
 800cac0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad2:	643b      	str	r3, [r7, #64]	; 0x40
 800cad4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cada:	e841 2300 	strex	r3, r2, [r1]
 800cade:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1e6      	bne.n	800cab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	3308      	adds	r3, #8
 800caec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caee:	6a3b      	ldr	r3, [r7, #32]
 800caf0:	e853 3f00 	ldrex	r3, [r3]
 800caf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800caf6:	69fa      	ldr	r2, [r7, #28]
 800caf8:	4b1e      	ldr	r3, [pc, #120]	; (800cb74 <UART_EndRxTransfer+0xc8>)
 800cafa:	4013      	ands	r3, r2
 800cafc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3308      	adds	r3, #8
 800cb04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb0e:	e841 2300 	strex	r3, r2, [r1]
 800cb12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1e5      	bne.n	800cae6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d118      	bne.n	800cb54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	e853 3f00 	ldrex	r3, [r3]
 800cb2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	f023 0310 	bic.w	r3, r3, #16
 800cb36:	647b      	str	r3, [r7, #68]	; 0x44
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb40:	61bb      	str	r3, [r7, #24]
 800cb42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb44:	6979      	ldr	r1, [r7, #20]
 800cb46:	69ba      	ldr	r2, [r7, #24]
 800cb48:	e841 2300 	strex	r3, r2, [r1]
 800cb4c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1e6      	bne.n	800cb22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2220      	movs	r2, #32
 800cb58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cb68:	bf00      	nop
 800cb6a:	3754      	adds	r7, #84	; 0x54
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	effffffe 	.word	0xeffffffe

0800cb78 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b090      	sub	sp, #64	; 0x40
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb84:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	69db      	ldr	r3, [r3, #28]
 800cb8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb8e:	d037      	beq.n	800cc00 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb92:	2200      	movs	r2, #0
 800cb94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	e853 3f00 	ldrex	r3, [r3]
 800cba6:	623b      	str	r3, [r7, #32]
   return(result);
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbae:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbb8:	633a      	str	r2, [r7, #48]	; 0x30
 800cbba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc0:	e841 2300 	strex	r3, r2, [r1]
 800cbc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e5      	bne.n	800cb98 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	e853 3f00 	ldrex	r3, [r3]
 800cbd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbea:	61fb      	str	r3, [r7, #28]
 800cbec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbee:	69b9      	ldr	r1, [r7, #24]
 800cbf0:	69fa      	ldr	r2, [r7, #28]
 800cbf2:	e841 2300 	strex	r3, r2, [r1]
 800cbf6:	617b      	str	r3, [r7, #20]
   return(result);
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1e6      	bne.n	800cbcc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cbfe:	e002      	b.n	800cc06 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cc00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cc02:	f7f3 fd51 	bl	80006a8 <HAL_UART_TxCpltCallback>
}
 800cc06:	bf00      	nop
 800cc08:	3740      	adds	r7, #64	; 0x40
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f7fe fe13 	bl	800b848 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc22:	bf00      	nop
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b09c      	sub	sp, #112	; 0x70
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc36:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	69db      	ldr	r3, [r3, #28]
 800cc3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc40:	d071      	beq.n	800cd26 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800cc42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc44:	2200      	movs	r2, #0
 800cc46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc52:	e853 3f00 	ldrex	r3, [r3]
 800cc56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cc58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc5e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	461a      	mov	r2, r3
 800cc66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc68:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc70:	e841 2300 	strex	r3, r2, [r1]
 800cc74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cc76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1e6      	bne.n	800cc4a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3308      	adds	r3, #8
 800cc82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	e853 3f00 	ldrex	r3, [r3]
 800cc8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8e:	f023 0301 	bic.w	r3, r3, #1
 800cc92:	667b      	str	r3, [r7, #100]	; 0x64
 800cc94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3308      	adds	r3, #8
 800cc9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc9c:	647a      	str	r2, [r7, #68]	; 0x44
 800cc9e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cca4:	e841 2300 	strex	r3, r2, [r1]
 800cca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ccaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1e5      	bne.n	800cc7c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	e853 3f00 	ldrex	r3, [r3]
 800ccbe:	623b      	str	r3, [r7, #32]
   return(result);
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccc6:	663b      	str	r3, [r7, #96]	; 0x60
 800ccc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	3308      	adds	r3, #8
 800ccce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ccd0:	633a      	str	r2, [r7, #48]	; 0x30
 800ccd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccd8:	e841 2300 	strex	r3, r2, [r1]
 800ccdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ccde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1e5      	bne.n	800ccb0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce6:	2220      	movs	r2, #32
 800cce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d118      	bne.n	800cd26 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	e853 3f00 	ldrex	r3, [r3]
 800cd00:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f023 0310 	bic.w	r3, r3, #16
 800cd08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd12:	61fb      	str	r3, [r7, #28]
 800cd14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd16:	69b9      	ldr	r1, [r7, #24]
 800cd18:	69fa      	ldr	r2, [r7, #28]
 800cd1a:	e841 2300 	strex	r3, r2, [r1]
 800cd1e:	617b      	str	r3, [r7, #20]
   return(result);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1e6      	bne.n	800ccf4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d107      	bne.n	800cd3e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd34:	4619      	mov	r1, r3
 800cd36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cd38:	f7fe fdae 	bl	800b898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd3c:	e002      	b.n	800cd44 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800cd3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cd40:	f7fe fd8c 	bl	800b85c <HAL_UART_RxCpltCallback>
}
 800cd44:	bf00      	nop
 800cd46:	3770      	adds	r7, #112	; 0x70
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d109      	bne.n	800cd76 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd68:	085b      	lsrs	r3, r3, #1
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f7fe fd92 	bl	800b898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd74:	e002      	b.n	800cd7c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f7fe fd7a 	bl	800b870 <HAL_UART_RxHalfCpltCallback>
}
 800cd7c:	bf00      	nop
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd98:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cda0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdac:	2b80      	cmp	r3, #128	; 0x80
 800cdae:	d109      	bne.n	800cdc4 <UART_DMAError+0x40>
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	2b21      	cmp	r3, #33	; 0x21
 800cdb4:	d106      	bne.n	800cdc4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cdbe:	6978      	ldr	r0, [r7, #20]
 800cdc0:	f7ff fe32 	bl	800ca28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdce:	2b40      	cmp	r3, #64	; 0x40
 800cdd0:	d109      	bne.n	800cde6 <UART_DMAError+0x62>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2b22      	cmp	r3, #34	; 0x22
 800cdd6:	d106      	bne.n	800cde6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cde0:	6978      	ldr	r0, [r7, #20]
 800cde2:	f7ff fe63 	bl	800caac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdec:	f043 0210 	orr.w	r2, r3, #16
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdf6:	6978      	ldr	r0, [r7, #20]
 800cdf8:	f7fe fd44 	bl	800b884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdfc:	bf00      	nop
 800cdfe:	3718      	adds	r7, #24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f7fe fd2e 	bl	800b884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce28:	bf00      	nop
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	e853 3f00 	ldrex	r3, [r3]
 800ce44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce4c:	61fb      	str	r3, [r7, #28]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	461a      	mov	r2, r3
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	61bb      	str	r3, [r7, #24]
 800ce58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5a:	6979      	ldr	r1, [r7, #20]
 800ce5c:	69ba      	ldr	r2, [r7, #24]
 800ce5e:	e841 2300 	strex	r3, r2, [r1]
 800ce62:	613b      	str	r3, [r7, #16]
   return(result);
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1e6      	bne.n	800ce38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2220      	movs	r2, #32
 800ce6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f7f3 fc15 	bl	80006a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce7e:	bf00      	nop
 800ce80:	3720      	adds	r7, #32
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce86:	b480      	push	{r7}
 800ce88:	b083      	sub	sp, #12
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce8e:	bf00      	nop
 800ce90:	370c      	adds	r7, #12
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b083      	sub	sp, #12
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cea2:	bf00      	nop
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ceae:	b480      	push	{r7}
 800ceb0:	b083      	sub	sp, #12
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ceb6:	bf00      	nop
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b085      	sub	sp, #20
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d101      	bne.n	800ced8 <HAL_UARTEx_DisableFifoMode+0x16>
 800ced4:	2302      	movs	r3, #2
 800ced6:	e027      	b.n	800cf28 <HAL_UARTEx_DisableFifoMode+0x66>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2224      	movs	r2, #36	; 0x24
 800cee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f022 0201 	bic.w	r2, r2, #1
 800cefe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2220      	movs	r2, #32
 800cf1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d101      	bne.n	800cf4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf48:	2302      	movs	r3, #2
 800cf4a:	e02d      	b.n	800cfa8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2224      	movs	r2, #36	; 0x24
 800cf58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f022 0201 	bic.w	r2, r2, #1
 800cf72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f8ab 	bl	800d0e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2220      	movs	r2, #32
 800cf9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d101      	bne.n	800cfc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	e02d      	b.n	800d024 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2224      	movs	r2, #36	; 0x24
 800cfd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f022 0201 	bic.w	r2, r2, #1
 800cfee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	430a      	orrs	r2, r1
 800d002:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f86d 	bl	800d0e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2220      	movs	r2, #32
 800d016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d022:	2300      	movs	r3, #0
}
 800d024:	4618      	mov	r0, r3
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b08c      	sub	sp, #48	; 0x30
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	4613      	mov	r3, r2
 800d038:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d040:	2b20      	cmp	r3, #32
 800d042:	d14a      	bne.n	800d0da <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800d04a:	88fb      	ldrh	r3, [r7, #6]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d101      	bne.n	800d054 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	e043      	b.n	800d0dc <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d101      	bne.n	800d062 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800d05e:	2302      	movs	r3, #2
 800d060:	e03c      	b.n	800d0dc <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2201      	movs	r2, #1
 800d06e:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800d070:	88fb      	ldrh	r3, [r7, #6]
 800d072:	461a      	mov	r2, r3
 800d074:	68b9      	ldr	r1, [r7, #8]
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7ff fc2e 	bl	800c8d8 <UART_Start_Receive_DMA>
 800d07c:	4603      	mov	r3, r0
 800d07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800d082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d086:	2b00      	cmp	r3, #0
 800d088:	d124      	bne.n	800d0d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d11d      	bne.n	800d0ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2210      	movs	r2, #16
 800d098:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	e853 3f00 	ldrex	r3, [r3]
 800d0a6:	617b      	str	r3, [r7, #20]
   return(result);
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f043 0310 	orr.w	r3, r3, #16
 800d0ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d0ba:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0bc:	6a39      	ldr	r1, [r7, #32]
 800d0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c0:	e841 2300 	strex	r3, r2, [r1]
 800d0c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1e6      	bne.n	800d09a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800d0cc:	e002      	b.n	800d0d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800d0d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0d8:	e000      	b.n	800d0dc <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800d0da:	2302      	movs	r3, #2
  }
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3730      	adds	r7, #48	; 0x30
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d108      	bne.n	800d106 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d104:	e031      	b.n	800d16a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d106:	2310      	movs	r3, #16
 800d108:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d10a:	2310      	movs	r3, #16
 800d10c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	0e5b      	lsrs	r3, r3, #25
 800d116:	b2db      	uxtb	r3, r3
 800d118:	f003 0307 	and.w	r3, r3, #7
 800d11c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	0f5b      	lsrs	r3, r3, #29
 800d126:	b2db      	uxtb	r3, r3
 800d128:	f003 0307 	and.w	r3, r3, #7
 800d12c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
 800d130:	7b3a      	ldrb	r2, [r7, #12]
 800d132:	4911      	ldr	r1, [pc, #68]	; (800d178 <UARTEx_SetNbDataToProcess+0x94>)
 800d134:	5c8a      	ldrb	r2, [r1, r2]
 800d136:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d13a:	7b3a      	ldrb	r2, [r7, #12]
 800d13c:	490f      	ldr	r1, [pc, #60]	; (800d17c <UARTEx_SetNbDataToProcess+0x98>)
 800d13e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d140:	fb93 f3f2 	sdiv	r3, r3, r2
 800d144:	b29a      	uxth	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	7b7a      	ldrb	r2, [r7, #13]
 800d150:	4909      	ldr	r1, [pc, #36]	; (800d178 <UARTEx_SetNbDataToProcess+0x94>)
 800d152:	5c8a      	ldrb	r2, [r1, r2]
 800d154:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d158:	7b7a      	ldrb	r2, [r7, #13]
 800d15a:	4908      	ldr	r1, [pc, #32]	; (800d17c <UARTEx_SetNbDataToProcess+0x98>)
 800d15c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d15e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d162:	b29a      	uxth	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d16a:	bf00      	nop
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	0800dae8 	.word	0x0800dae8
 800d17c:	0800daf0 	.word	0x0800daf0

0800d180 <__errno>:
 800d180:	4b01      	ldr	r3, [pc, #4]	; (800d188 <__errno+0x8>)
 800d182:	6818      	ldr	r0, [r3, #0]
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	24000010 	.word	0x24000010

0800d18c <__libc_init_array>:
 800d18c:	b570      	push	{r4, r5, r6, lr}
 800d18e:	4d0d      	ldr	r5, [pc, #52]	; (800d1c4 <__libc_init_array+0x38>)
 800d190:	4c0d      	ldr	r4, [pc, #52]	; (800d1c8 <__libc_init_array+0x3c>)
 800d192:	1b64      	subs	r4, r4, r5
 800d194:	10a4      	asrs	r4, r4, #2
 800d196:	2600      	movs	r6, #0
 800d198:	42a6      	cmp	r6, r4
 800d19a:	d109      	bne.n	800d1b0 <__libc_init_array+0x24>
 800d19c:	4d0b      	ldr	r5, [pc, #44]	; (800d1cc <__libc_init_array+0x40>)
 800d19e:	4c0c      	ldr	r4, [pc, #48]	; (800d1d0 <__libc_init_array+0x44>)
 800d1a0:	f000 fc4e 	bl	800da40 <_init>
 800d1a4:	1b64      	subs	r4, r4, r5
 800d1a6:	10a4      	asrs	r4, r4, #2
 800d1a8:	2600      	movs	r6, #0
 800d1aa:	42a6      	cmp	r6, r4
 800d1ac:	d105      	bne.n	800d1ba <__libc_init_array+0x2e>
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}
 800d1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1b4:	4798      	blx	r3
 800d1b6:	3601      	adds	r6, #1
 800d1b8:	e7ee      	b.n	800d198 <__libc_init_array+0xc>
 800d1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1be:	4798      	blx	r3
 800d1c0:	3601      	adds	r6, #1
 800d1c2:	e7f2      	b.n	800d1aa <__libc_init_array+0x1e>
 800d1c4:	0800db34 	.word	0x0800db34
 800d1c8:	0800db34 	.word	0x0800db34
 800d1cc:	0800db34 	.word	0x0800db34
 800d1d0:	0800db38 	.word	0x0800db38

0800d1d4 <memset>:
 800d1d4:	4402      	add	r2, r0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d100      	bne.n	800d1de <memset+0xa>
 800d1dc:	4770      	bx	lr
 800d1de:	f803 1b01 	strb.w	r1, [r3], #1
 800d1e2:	e7f9      	b.n	800d1d8 <memset+0x4>

0800d1e4 <siprintf>:
 800d1e4:	b40e      	push	{r1, r2, r3}
 800d1e6:	b500      	push	{lr}
 800d1e8:	b09c      	sub	sp, #112	; 0x70
 800d1ea:	ab1d      	add	r3, sp, #116	; 0x74
 800d1ec:	9002      	str	r0, [sp, #8]
 800d1ee:	9006      	str	r0, [sp, #24]
 800d1f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1f4:	4809      	ldr	r0, [pc, #36]	; (800d21c <siprintf+0x38>)
 800d1f6:	9107      	str	r1, [sp, #28]
 800d1f8:	9104      	str	r1, [sp, #16]
 800d1fa:	4909      	ldr	r1, [pc, #36]	; (800d220 <siprintf+0x3c>)
 800d1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d200:	9105      	str	r1, [sp, #20]
 800d202:	6800      	ldr	r0, [r0, #0]
 800d204:	9301      	str	r3, [sp, #4]
 800d206:	a902      	add	r1, sp, #8
 800d208:	f000 f868 	bl	800d2dc <_svfiprintf_r>
 800d20c:	9b02      	ldr	r3, [sp, #8]
 800d20e:	2200      	movs	r2, #0
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	b01c      	add	sp, #112	; 0x70
 800d214:	f85d eb04 	ldr.w	lr, [sp], #4
 800d218:	b003      	add	sp, #12
 800d21a:	4770      	bx	lr
 800d21c:	24000010 	.word	0x24000010
 800d220:	ffff0208 	.word	0xffff0208

0800d224 <__ssputs_r>:
 800d224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d228:	688e      	ldr	r6, [r1, #8]
 800d22a:	429e      	cmp	r6, r3
 800d22c:	4682      	mov	sl, r0
 800d22e:	460c      	mov	r4, r1
 800d230:	4690      	mov	r8, r2
 800d232:	461f      	mov	r7, r3
 800d234:	d838      	bhi.n	800d2a8 <__ssputs_r+0x84>
 800d236:	898a      	ldrh	r2, [r1, #12]
 800d238:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d23c:	d032      	beq.n	800d2a4 <__ssputs_r+0x80>
 800d23e:	6825      	ldr	r5, [r4, #0]
 800d240:	6909      	ldr	r1, [r1, #16]
 800d242:	eba5 0901 	sub.w	r9, r5, r1
 800d246:	6965      	ldr	r5, [r4, #20]
 800d248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d24c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d250:	3301      	adds	r3, #1
 800d252:	444b      	add	r3, r9
 800d254:	106d      	asrs	r5, r5, #1
 800d256:	429d      	cmp	r5, r3
 800d258:	bf38      	it	cc
 800d25a:	461d      	movcc	r5, r3
 800d25c:	0553      	lsls	r3, r2, #21
 800d25e:	d531      	bpl.n	800d2c4 <__ssputs_r+0xa0>
 800d260:	4629      	mov	r1, r5
 800d262:	f000 fb47 	bl	800d8f4 <_malloc_r>
 800d266:	4606      	mov	r6, r0
 800d268:	b950      	cbnz	r0, 800d280 <__ssputs_r+0x5c>
 800d26a:	230c      	movs	r3, #12
 800d26c:	f8ca 3000 	str.w	r3, [sl]
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d276:	81a3      	strh	r3, [r4, #12]
 800d278:	f04f 30ff 	mov.w	r0, #4294967295
 800d27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d280:	6921      	ldr	r1, [r4, #16]
 800d282:	464a      	mov	r2, r9
 800d284:	f000 fabe 	bl	800d804 <memcpy>
 800d288:	89a3      	ldrh	r3, [r4, #12]
 800d28a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d28e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d292:	81a3      	strh	r3, [r4, #12]
 800d294:	6126      	str	r6, [r4, #16]
 800d296:	6165      	str	r5, [r4, #20]
 800d298:	444e      	add	r6, r9
 800d29a:	eba5 0509 	sub.w	r5, r5, r9
 800d29e:	6026      	str	r6, [r4, #0]
 800d2a0:	60a5      	str	r5, [r4, #8]
 800d2a2:	463e      	mov	r6, r7
 800d2a4:	42be      	cmp	r6, r7
 800d2a6:	d900      	bls.n	800d2aa <__ssputs_r+0x86>
 800d2a8:	463e      	mov	r6, r7
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	6820      	ldr	r0, [r4, #0]
 800d2ae:	4641      	mov	r1, r8
 800d2b0:	f000 fab6 	bl	800d820 <memmove>
 800d2b4:	68a3      	ldr	r3, [r4, #8]
 800d2b6:	6822      	ldr	r2, [r4, #0]
 800d2b8:	1b9b      	subs	r3, r3, r6
 800d2ba:	4432      	add	r2, r6
 800d2bc:	60a3      	str	r3, [r4, #8]
 800d2be:	6022      	str	r2, [r4, #0]
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	e7db      	b.n	800d27c <__ssputs_r+0x58>
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	f000 fb6f 	bl	800d9a8 <_realloc_r>
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d1e1      	bne.n	800d294 <__ssputs_r+0x70>
 800d2d0:	6921      	ldr	r1, [r4, #16]
 800d2d2:	4650      	mov	r0, sl
 800d2d4:	f000 fabe 	bl	800d854 <_free_r>
 800d2d8:	e7c7      	b.n	800d26a <__ssputs_r+0x46>
	...

0800d2dc <_svfiprintf_r>:
 800d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e0:	4698      	mov	r8, r3
 800d2e2:	898b      	ldrh	r3, [r1, #12]
 800d2e4:	061b      	lsls	r3, r3, #24
 800d2e6:	b09d      	sub	sp, #116	; 0x74
 800d2e8:	4607      	mov	r7, r0
 800d2ea:	460d      	mov	r5, r1
 800d2ec:	4614      	mov	r4, r2
 800d2ee:	d50e      	bpl.n	800d30e <_svfiprintf_r+0x32>
 800d2f0:	690b      	ldr	r3, [r1, #16]
 800d2f2:	b963      	cbnz	r3, 800d30e <_svfiprintf_r+0x32>
 800d2f4:	2140      	movs	r1, #64	; 0x40
 800d2f6:	f000 fafd 	bl	800d8f4 <_malloc_r>
 800d2fa:	6028      	str	r0, [r5, #0]
 800d2fc:	6128      	str	r0, [r5, #16]
 800d2fe:	b920      	cbnz	r0, 800d30a <_svfiprintf_r+0x2e>
 800d300:	230c      	movs	r3, #12
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	e0d1      	b.n	800d4ae <_svfiprintf_r+0x1d2>
 800d30a:	2340      	movs	r3, #64	; 0x40
 800d30c:	616b      	str	r3, [r5, #20]
 800d30e:	2300      	movs	r3, #0
 800d310:	9309      	str	r3, [sp, #36]	; 0x24
 800d312:	2320      	movs	r3, #32
 800d314:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d318:	f8cd 800c 	str.w	r8, [sp, #12]
 800d31c:	2330      	movs	r3, #48	; 0x30
 800d31e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4c8 <_svfiprintf_r+0x1ec>
 800d322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d326:	f04f 0901 	mov.w	r9, #1
 800d32a:	4623      	mov	r3, r4
 800d32c:	469a      	mov	sl, r3
 800d32e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d332:	b10a      	cbz	r2, 800d338 <_svfiprintf_r+0x5c>
 800d334:	2a25      	cmp	r2, #37	; 0x25
 800d336:	d1f9      	bne.n	800d32c <_svfiprintf_r+0x50>
 800d338:	ebba 0b04 	subs.w	fp, sl, r4
 800d33c:	d00b      	beq.n	800d356 <_svfiprintf_r+0x7a>
 800d33e:	465b      	mov	r3, fp
 800d340:	4622      	mov	r2, r4
 800d342:	4629      	mov	r1, r5
 800d344:	4638      	mov	r0, r7
 800d346:	f7ff ff6d 	bl	800d224 <__ssputs_r>
 800d34a:	3001      	adds	r0, #1
 800d34c:	f000 80aa 	beq.w	800d4a4 <_svfiprintf_r+0x1c8>
 800d350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d352:	445a      	add	r2, fp
 800d354:	9209      	str	r2, [sp, #36]	; 0x24
 800d356:	f89a 3000 	ldrb.w	r3, [sl]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f000 80a2 	beq.w	800d4a4 <_svfiprintf_r+0x1c8>
 800d360:	2300      	movs	r3, #0
 800d362:	f04f 32ff 	mov.w	r2, #4294967295
 800d366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d36a:	f10a 0a01 	add.w	sl, sl, #1
 800d36e:	9304      	str	r3, [sp, #16]
 800d370:	9307      	str	r3, [sp, #28]
 800d372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d376:	931a      	str	r3, [sp, #104]	; 0x68
 800d378:	4654      	mov	r4, sl
 800d37a:	2205      	movs	r2, #5
 800d37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d380:	4851      	ldr	r0, [pc, #324]	; (800d4c8 <_svfiprintf_r+0x1ec>)
 800d382:	f7f2 ffc5 	bl	8000310 <memchr>
 800d386:	9a04      	ldr	r2, [sp, #16]
 800d388:	b9d8      	cbnz	r0, 800d3c2 <_svfiprintf_r+0xe6>
 800d38a:	06d0      	lsls	r0, r2, #27
 800d38c:	bf44      	itt	mi
 800d38e:	2320      	movmi	r3, #32
 800d390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d394:	0711      	lsls	r1, r2, #28
 800d396:	bf44      	itt	mi
 800d398:	232b      	movmi	r3, #43	; 0x2b
 800d39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d39e:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a4:	d015      	beq.n	800d3d2 <_svfiprintf_r+0xf6>
 800d3a6:	9a07      	ldr	r2, [sp, #28]
 800d3a8:	4654      	mov	r4, sl
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	f04f 0c0a 	mov.w	ip, #10
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3b6:	3b30      	subs	r3, #48	; 0x30
 800d3b8:	2b09      	cmp	r3, #9
 800d3ba:	d94e      	bls.n	800d45a <_svfiprintf_r+0x17e>
 800d3bc:	b1b0      	cbz	r0, 800d3ec <_svfiprintf_r+0x110>
 800d3be:	9207      	str	r2, [sp, #28]
 800d3c0:	e014      	b.n	800d3ec <_svfiprintf_r+0x110>
 800d3c2:	eba0 0308 	sub.w	r3, r0, r8
 800d3c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	9304      	str	r3, [sp, #16]
 800d3ce:	46a2      	mov	sl, r4
 800d3d0:	e7d2      	b.n	800d378 <_svfiprintf_r+0x9c>
 800d3d2:	9b03      	ldr	r3, [sp, #12]
 800d3d4:	1d19      	adds	r1, r3, #4
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	9103      	str	r1, [sp, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	bfbb      	ittet	lt
 800d3de:	425b      	neglt	r3, r3
 800d3e0:	f042 0202 	orrlt.w	r2, r2, #2
 800d3e4:	9307      	strge	r3, [sp, #28]
 800d3e6:	9307      	strlt	r3, [sp, #28]
 800d3e8:	bfb8      	it	lt
 800d3ea:	9204      	strlt	r2, [sp, #16]
 800d3ec:	7823      	ldrb	r3, [r4, #0]
 800d3ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d3f0:	d10c      	bne.n	800d40c <_svfiprintf_r+0x130>
 800d3f2:	7863      	ldrb	r3, [r4, #1]
 800d3f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f6:	d135      	bne.n	800d464 <_svfiprintf_r+0x188>
 800d3f8:	9b03      	ldr	r3, [sp, #12]
 800d3fa:	1d1a      	adds	r2, r3, #4
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	9203      	str	r2, [sp, #12]
 800d400:	2b00      	cmp	r3, #0
 800d402:	bfb8      	it	lt
 800d404:	f04f 33ff 	movlt.w	r3, #4294967295
 800d408:	3402      	adds	r4, #2
 800d40a:	9305      	str	r3, [sp, #20]
 800d40c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4d8 <_svfiprintf_r+0x1fc>
 800d410:	7821      	ldrb	r1, [r4, #0]
 800d412:	2203      	movs	r2, #3
 800d414:	4650      	mov	r0, sl
 800d416:	f7f2 ff7b 	bl	8000310 <memchr>
 800d41a:	b140      	cbz	r0, 800d42e <_svfiprintf_r+0x152>
 800d41c:	2340      	movs	r3, #64	; 0x40
 800d41e:	eba0 000a 	sub.w	r0, r0, sl
 800d422:	fa03 f000 	lsl.w	r0, r3, r0
 800d426:	9b04      	ldr	r3, [sp, #16]
 800d428:	4303      	orrs	r3, r0
 800d42a:	3401      	adds	r4, #1
 800d42c:	9304      	str	r3, [sp, #16]
 800d42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d432:	4826      	ldr	r0, [pc, #152]	; (800d4cc <_svfiprintf_r+0x1f0>)
 800d434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d438:	2206      	movs	r2, #6
 800d43a:	f7f2 ff69 	bl	8000310 <memchr>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d038      	beq.n	800d4b4 <_svfiprintf_r+0x1d8>
 800d442:	4b23      	ldr	r3, [pc, #140]	; (800d4d0 <_svfiprintf_r+0x1f4>)
 800d444:	bb1b      	cbnz	r3, 800d48e <_svfiprintf_r+0x1b2>
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	3307      	adds	r3, #7
 800d44a:	f023 0307 	bic.w	r3, r3, #7
 800d44e:	3308      	adds	r3, #8
 800d450:	9303      	str	r3, [sp, #12]
 800d452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d454:	4433      	add	r3, r6
 800d456:	9309      	str	r3, [sp, #36]	; 0x24
 800d458:	e767      	b.n	800d32a <_svfiprintf_r+0x4e>
 800d45a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d45e:	460c      	mov	r4, r1
 800d460:	2001      	movs	r0, #1
 800d462:	e7a5      	b.n	800d3b0 <_svfiprintf_r+0xd4>
 800d464:	2300      	movs	r3, #0
 800d466:	3401      	adds	r4, #1
 800d468:	9305      	str	r3, [sp, #20]
 800d46a:	4619      	mov	r1, r3
 800d46c:	f04f 0c0a 	mov.w	ip, #10
 800d470:	4620      	mov	r0, r4
 800d472:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d476:	3a30      	subs	r2, #48	; 0x30
 800d478:	2a09      	cmp	r2, #9
 800d47a:	d903      	bls.n	800d484 <_svfiprintf_r+0x1a8>
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d0c5      	beq.n	800d40c <_svfiprintf_r+0x130>
 800d480:	9105      	str	r1, [sp, #20]
 800d482:	e7c3      	b.n	800d40c <_svfiprintf_r+0x130>
 800d484:	fb0c 2101 	mla	r1, ip, r1, r2
 800d488:	4604      	mov	r4, r0
 800d48a:	2301      	movs	r3, #1
 800d48c:	e7f0      	b.n	800d470 <_svfiprintf_r+0x194>
 800d48e:	ab03      	add	r3, sp, #12
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	462a      	mov	r2, r5
 800d494:	4b0f      	ldr	r3, [pc, #60]	; (800d4d4 <_svfiprintf_r+0x1f8>)
 800d496:	a904      	add	r1, sp, #16
 800d498:	4638      	mov	r0, r7
 800d49a:	f3af 8000 	nop.w
 800d49e:	1c42      	adds	r2, r0, #1
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	d1d6      	bne.n	800d452 <_svfiprintf_r+0x176>
 800d4a4:	89ab      	ldrh	r3, [r5, #12]
 800d4a6:	065b      	lsls	r3, r3, #25
 800d4a8:	f53f af2c 	bmi.w	800d304 <_svfiprintf_r+0x28>
 800d4ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ae:	b01d      	add	sp, #116	; 0x74
 800d4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b4:	ab03      	add	r3, sp, #12
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	462a      	mov	r2, r5
 800d4ba:	4b06      	ldr	r3, [pc, #24]	; (800d4d4 <_svfiprintf_r+0x1f8>)
 800d4bc:	a904      	add	r1, sp, #16
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f000 f87a 	bl	800d5b8 <_printf_i>
 800d4c4:	e7eb      	b.n	800d49e <_svfiprintf_r+0x1c2>
 800d4c6:	bf00      	nop
 800d4c8:	0800daf8 	.word	0x0800daf8
 800d4cc:	0800db02 	.word	0x0800db02
 800d4d0:	00000000 	.word	0x00000000
 800d4d4:	0800d225 	.word	0x0800d225
 800d4d8:	0800dafe 	.word	0x0800dafe

0800d4dc <_printf_common>:
 800d4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e0:	4616      	mov	r6, r2
 800d4e2:	4699      	mov	r9, r3
 800d4e4:	688a      	ldr	r2, [r1, #8]
 800d4e6:	690b      	ldr	r3, [r1, #16]
 800d4e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	bfb8      	it	lt
 800d4f0:	4613      	movlt	r3, r2
 800d4f2:	6033      	str	r3, [r6, #0]
 800d4f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4f8:	4607      	mov	r7, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	b10a      	cbz	r2, 800d502 <_printf_common+0x26>
 800d4fe:	3301      	adds	r3, #1
 800d500:	6033      	str	r3, [r6, #0]
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	0699      	lsls	r1, r3, #26
 800d506:	bf42      	ittt	mi
 800d508:	6833      	ldrmi	r3, [r6, #0]
 800d50a:	3302      	addmi	r3, #2
 800d50c:	6033      	strmi	r3, [r6, #0]
 800d50e:	6825      	ldr	r5, [r4, #0]
 800d510:	f015 0506 	ands.w	r5, r5, #6
 800d514:	d106      	bne.n	800d524 <_printf_common+0x48>
 800d516:	f104 0a19 	add.w	sl, r4, #25
 800d51a:	68e3      	ldr	r3, [r4, #12]
 800d51c:	6832      	ldr	r2, [r6, #0]
 800d51e:	1a9b      	subs	r3, r3, r2
 800d520:	42ab      	cmp	r3, r5
 800d522:	dc26      	bgt.n	800d572 <_printf_common+0x96>
 800d524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d528:	1e13      	subs	r3, r2, #0
 800d52a:	6822      	ldr	r2, [r4, #0]
 800d52c:	bf18      	it	ne
 800d52e:	2301      	movne	r3, #1
 800d530:	0692      	lsls	r2, r2, #26
 800d532:	d42b      	bmi.n	800d58c <_printf_common+0xb0>
 800d534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d538:	4649      	mov	r1, r9
 800d53a:	4638      	mov	r0, r7
 800d53c:	47c0      	blx	r8
 800d53e:	3001      	adds	r0, #1
 800d540:	d01e      	beq.n	800d580 <_printf_common+0xa4>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	68e5      	ldr	r5, [r4, #12]
 800d546:	6832      	ldr	r2, [r6, #0]
 800d548:	f003 0306 	and.w	r3, r3, #6
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	bf08      	it	eq
 800d550:	1aad      	subeq	r5, r5, r2
 800d552:	68a3      	ldr	r3, [r4, #8]
 800d554:	6922      	ldr	r2, [r4, #16]
 800d556:	bf0c      	ite	eq
 800d558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d55c:	2500      	movne	r5, #0
 800d55e:	4293      	cmp	r3, r2
 800d560:	bfc4      	itt	gt
 800d562:	1a9b      	subgt	r3, r3, r2
 800d564:	18ed      	addgt	r5, r5, r3
 800d566:	2600      	movs	r6, #0
 800d568:	341a      	adds	r4, #26
 800d56a:	42b5      	cmp	r5, r6
 800d56c:	d11a      	bne.n	800d5a4 <_printf_common+0xc8>
 800d56e:	2000      	movs	r0, #0
 800d570:	e008      	b.n	800d584 <_printf_common+0xa8>
 800d572:	2301      	movs	r3, #1
 800d574:	4652      	mov	r2, sl
 800d576:	4649      	mov	r1, r9
 800d578:	4638      	mov	r0, r7
 800d57a:	47c0      	blx	r8
 800d57c:	3001      	adds	r0, #1
 800d57e:	d103      	bne.n	800d588 <_printf_common+0xac>
 800d580:	f04f 30ff 	mov.w	r0, #4294967295
 800d584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d588:	3501      	adds	r5, #1
 800d58a:	e7c6      	b.n	800d51a <_printf_common+0x3e>
 800d58c:	18e1      	adds	r1, r4, r3
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	2030      	movs	r0, #48	; 0x30
 800d592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d596:	4422      	add	r2, r4
 800d598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d59c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5a0:	3302      	adds	r3, #2
 800d5a2:	e7c7      	b.n	800d534 <_printf_common+0x58>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	4649      	mov	r1, r9
 800d5aa:	4638      	mov	r0, r7
 800d5ac:	47c0      	blx	r8
 800d5ae:	3001      	adds	r0, #1
 800d5b0:	d0e6      	beq.n	800d580 <_printf_common+0xa4>
 800d5b2:	3601      	adds	r6, #1
 800d5b4:	e7d9      	b.n	800d56a <_printf_common+0x8e>
	...

0800d5b8 <_printf_i>:
 800d5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5bc:	460c      	mov	r4, r1
 800d5be:	4691      	mov	r9, r2
 800d5c0:	7e27      	ldrb	r7, [r4, #24]
 800d5c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d5c4:	2f78      	cmp	r7, #120	; 0x78
 800d5c6:	4680      	mov	r8, r0
 800d5c8:	469a      	mov	sl, r3
 800d5ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5ce:	d807      	bhi.n	800d5e0 <_printf_i+0x28>
 800d5d0:	2f62      	cmp	r7, #98	; 0x62
 800d5d2:	d80a      	bhi.n	800d5ea <_printf_i+0x32>
 800d5d4:	2f00      	cmp	r7, #0
 800d5d6:	f000 80d8 	beq.w	800d78a <_printf_i+0x1d2>
 800d5da:	2f58      	cmp	r7, #88	; 0x58
 800d5dc:	f000 80a3 	beq.w	800d726 <_printf_i+0x16e>
 800d5e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d5e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5e8:	e03a      	b.n	800d660 <_printf_i+0xa8>
 800d5ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5ee:	2b15      	cmp	r3, #21
 800d5f0:	d8f6      	bhi.n	800d5e0 <_printf_i+0x28>
 800d5f2:	a001      	add	r0, pc, #4	; (adr r0, 800d5f8 <_printf_i+0x40>)
 800d5f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d5f8:	0800d651 	.word	0x0800d651
 800d5fc:	0800d665 	.word	0x0800d665
 800d600:	0800d5e1 	.word	0x0800d5e1
 800d604:	0800d5e1 	.word	0x0800d5e1
 800d608:	0800d5e1 	.word	0x0800d5e1
 800d60c:	0800d5e1 	.word	0x0800d5e1
 800d610:	0800d665 	.word	0x0800d665
 800d614:	0800d5e1 	.word	0x0800d5e1
 800d618:	0800d5e1 	.word	0x0800d5e1
 800d61c:	0800d5e1 	.word	0x0800d5e1
 800d620:	0800d5e1 	.word	0x0800d5e1
 800d624:	0800d771 	.word	0x0800d771
 800d628:	0800d695 	.word	0x0800d695
 800d62c:	0800d753 	.word	0x0800d753
 800d630:	0800d5e1 	.word	0x0800d5e1
 800d634:	0800d5e1 	.word	0x0800d5e1
 800d638:	0800d793 	.word	0x0800d793
 800d63c:	0800d5e1 	.word	0x0800d5e1
 800d640:	0800d695 	.word	0x0800d695
 800d644:	0800d5e1 	.word	0x0800d5e1
 800d648:	0800d5e1 	.word	0x0800d5e1
 800d64c:	0800d75b 	.word	0x0800d75b
 800d650:	680b      	ldr	r3, [r1, #0]
 800d652:	1d1a      	adds	r2, r3, #4
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	600a      	str	r2, [r1, #0]
 800d658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d660:	2301      	movs	r3, #1
 800d662:	e0a3      	b.n	800d7ac <_printf_i+0x1f4>
 800d664:	6825      	ldr	r5, [r4, #0]
 800d666:	6808      	ldr	r0, [r1, #0]
 800d668:	062e      	lsls	r6, r5, #24
 800d66a:	f100 0304 	add.w	r3, r0, #4
 800d66e:	d50a      	bpl.n	800d686 <_printf_i+0xce>
 800d670:	6805      	ldr	r5, [r0, #0]
 800d672:	600b      	str	r3, [r1, #0]
 800d674:	2d00      	cmp	r5, #0
 800d676:	da03      	bge.n	800d680 <_printf_i+0xc8>
 800d678:	232d      	movs	r3, #45	; 0x2d
 800d67a:	426d      	negs	r5, r5
 800d67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d680:	485e      	ldr	r0, [pc, #376]	; (800d7fc <_printf_i+0x244>)
 800d682:	230a      	movs	r3, #10
 800d684:	e019      	b.n	800d6ba <_printf_i+0x102>
 800d686:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d68a:	6805      	ldr	r5, [r0, #0]
 800d68c:	600b      	str	r3, [r1, #0]
 800d68e:	bf18      	it	ne
 800d690:	b22d      	sxthne	r5, r5
 800d692:	e7ef      	b.n	800d674 <_printf_i+0xbc>
 800d694:	680b      	ldr	r3, [r1, #0]
 800d696:	6825      	ldr	r5, [r4, #0]
 800d698:	1d18      	adds	r0, r3, #4
 800d69a:	6008      	str	r0, [r1, #0]
 800d69c:	0628      	lsls	r0, r5, #24
 800d69e:	d501      	bpl.n	800d6a4 <_printf_i+0xec>
 800d6a0:	681d      	ldr	r5, [r3, #0]
 800d6a2:	e002      	b.n	800d6aa <_printf_i+0xf2>
 800d6a4:	0669      	lsls	r1, r5, #25
 800d6a6:	d5fb      	bpl.n	800d6a0 <_printf_i+0xe8>
 800d6a8:	881d      	ldrh	r5, [r3, #0]
 800d6aa:	4854      	ldr	r0, [pc, #336]	; (800d7fc <_printf_i+0x244>)
 800d6ac:	2f6f      	cmp	r7, #111	; 0x6f
 800d6ae:	bf0c      	ite	eq
 800d6b0:	2308      	moveq	r3, #8
 800d6b2:	230a      	movne	r3, #10
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6ba:	6866      	ldr	r6, [r4, #4]
 800d6bc:	60a6      	str	r6, [r4, #8]
 800d6be:	2e00      	cmp	r6, #0
 800d6c0:	bfa2      	ittt	ge
 800d6c2:	6821      	ldrge	r1, [r4, #0]
 800d6c4:	f021 0104 	bicge.w	r1, r1, #4
 800d6c8:	6021      	strge	r1, [r4, #0]
 800d6ca:	b90d      	cbnz	r5, 800d6d0 <_printf_i+0x118>
 800d6cc:	2e00      	cmp	r6, #0
 800d6ce:	d04d      	beq.n	800d76c <_printf_i+0x1b4>
 800d6d0:	4616      	mov	r6, r2
 800d6d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6d6:	fb03 5711 	mls	r7, r3, r1, r5
 800d6da:	5dc7      	ldrb	r7, [r0, r7]
 800d6dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6e0:	462f      	mov	r7, r5
 800d6e2:	42bb      	cmp	r3, r7
 800d6e4:	460d      	mov	r5, r1
 800d6e6:	d9f4      	bls.n	800d6d2 <_printf_i+0x11a>
 800d6e8:	2b08      	cmp	r3, #8
 800d6ea:	d10b      	bne.n	800d704 <_printf_i+0x14c>
 800d6ec:	6823      	ldr	r3, [r4, #0]
 800d6ee:	07df      	lsls	r7, r3, #31
 800d6f0:	d508      	bpl.n	800d704 <_printf_i+0x14c>
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	6861      	ldr	r1, [r4, #4]
 800d6f6:	4299      	cmp	r1, r3
 800d6f8:	bfde      	ittt	le
 800d6fa:	2330      	movle	r3, #48	; 0x30
 800d6fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d700:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d704:	1b92      	subs	r2, r2, r6
 800d706:	6122      	str	r2, [r4, #16]
 800d708:	f8cd a000 	str.w	sl, [sp]
 800d70c:	464b      	mov	r3, r9
 800d70e:	aa03      	add	r2, sp, #12
 800d710:	4621      	mov	r1, r4
 800d712:	4640      	mov	r0, r8
 800d714:	f7ff fee2 	bl	800d4dc <_printf_common>
 800d718:	3001      	adds	r0, #1
 800d71a:	d14c      	bne.n	800d7b6 <_printf_i+0x1fe>
 800d71c:	f04f 30ff 	mov.w	r0, #4294967295
 800d720:	b004      	add	sp, #16
 800d722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d726:	4835      	ldr	r0, [pc, #212]	; (800d7fc <_printf_i+0x244>)
 800d728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	680e      	ldr	r6, [r1, #0]
 800d730:	061f      	lsls	r7, r3, #24
 800d732:	f856 5b04 	ldr.w	r5, [r6], #4
 800d736:	600e      	str	r6, [r1, #0]
 800d738:	d514      	bpl.n	800d764 <_printf_i+0x1ac>
 800d73a:	07d9      	lsls	r1, r3, #31
 800d73c:	bf44      	itt	mi
 800d73e:	f043 0320 	orrmi.w	r3, r3, #32
 800d742:	6023      	strmi	r3, [r4, #0]
 800d744:	b91d      	cbnz	r5, 800d74e <_printf_i+0x196>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	f023 0320 	bic.w	r3, r3, #32
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	2310      	movs	r3, #16
 800d750:	e7b0      	b.n	800d6b4 <_printf_i+0xfc>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	f043 0320 	orr.w	r3, r3, #32
 800d758:	6023      	str	r3, [r4, #0]
 800d75a:	2378      	movs	r3, #120	; 0x78
 800d75c:	4828      	ldr	r0, [pc, #160]	; (800d800 <_printf_i+0x248>)
 800d75e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d762:	e7e3      	b.n	800d72c <_printf_i+0x174>
 800d764:	065e      	lsls	r6, r3, #25
 800d766:	bf48      	it	mi
 800d768:	b2ad      	uxthmi	r5, r5
 800d76a:	e7e6      	b.n	800d73a <_printf_i+0x182>
 800d76c:	4616      	mov	r6, r2
 800d76e:	e7bb      	b.n	800d6e8 <_printf_i+0x130>
 800d770:	680b      	ldr	r3, [r1, #0]
 800d772:	6826      	ldr	r6, [r4, #0]
 800d774:	6960      	ldr	r0, [r4, #20]
 800d776:	1d1d      	adds	r5, r3, #4
 800d778:	600d      	str	r5, [r1, #0]
 800d77a:	0635      	lsls	r5, r6, #24
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	d501      	bpl.n	800d784 <_printf_i+0x1cc>
 800d780:	6018      	str	r0, [r3, #0]
 800d782:	e002      	b.n	800d78a <_printf_i+0x1d2>
 800d784:	0671      	lsls	r1, r6, #25
 800d786:	d5fb      	bpl.n	800d780 <_printf_i+0x1c8>
 800d788:	8018      	strh	r0, [r3, #0]
 800d78a:	2300      	movs	r3, #0
 800d78c:	6123      	str	r3, [r4, #16]
 800d78e:	4616      	mov	r6, r2
 800d790:	e7ba      	b.n	800d708 <_printf_i+0x150>
 800d792:	680b      	ldr	r3, [r1, #0]
 800d794:	1d1a      	adds	r2, r3, #4
 800d796:	600a      	str	r2, [r1, #0]
 800d798:	681e      	ldr	r6, [r3, #0]
 800d79a:	6862      	ldr	r2, [r4, #4]
 800d79c:	2100      	movs	r1, #0
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f7f2 fdb6 	bl	8000310 <memchr>
 800d7a4:	b108      	cbz	r0, 800d7aa <_printf_i+0x1f2>
 800d7a6:	1b80      	subs	r0, r0, r6
 800d7a8:	6060      	str	r0, [r4, #4]
 800d7aa:	6863      	ldr	r3, [r4, #4]
 800d7ac:	6123      	str	r3, [r4, #16]
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7b4:	e7a8      	b.n	800d708 <_printf_i+0x150>
 800d7b6:	6923      	ldr	r3, [r4, #16]
 800d7b8:	4632      	mov	r2, r6
 800d7ba:	4649      	mov	r1, r9
 800d7bc:	4640      	mov	r0, r8
 800d7be:	47d0      	blx	sl
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	d0ab      	beq.n	800d71c <_printf_i+0x164>
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	079b      	lsls	r3, r3, #30
 800d7c8:	d413      	bmi.n	800d7f2 <_printf_i+0x23a>
 800d7ca:	68e0      	ldr	r0, [r4, #12]
 800d7cc:	9b03      	ldr	r3, [sp, #12]
 800d7ce:	4298      	cmp	r0, r3
 800d7d0:	bfb8      	it	lt
 800d7d2:	4618      	movlt	r0, r3
 800d7d4:	e7a4      	b.n	800d720 <_printf_i+0x168>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	4632      	mov	r2, r6
 800d7da:	4649      	mov	r1, r9
 800d7dc:	4640      	mov	r0, r8
 800d7de:	47d0      	blx	sl
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	d09b      	beq.n	800d71c <_printf_i+0x164>
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	68e3      	ldr	r3, [r4, #12]
 800d7e8:	9903      	ldr	r1, [sp, #12]
 800d7ea:	1a5b      	subs	r3, r3, r1
 800d7ec:	42ab      	cmp	r3, r5
 800d7ee:	dcf2      	bgt.n	800d7d6 <_printf_i+0x21e>
 800d7f0:	e7eb      	b.n	800d7ca <_printf_i+0x212>
 800d7f2:	2500      	movs	r5, #0
 800d7f4:	f104 0619 	add.w	r6, r4, #25
 800d7f8:	e7f5      	b.n	800d7e6 <_printf_i+0x22e>
 800d7fa:	bf00      	nop
 800d7fc:	0800db09 	.word	0x0800db09
 800d800:	0800db1a 	.word	0x0800db1a

0800d804 <memcpy>:
 800d804:	440a      	add	r2, r1
 800d806:	4291      	cmp	r1, r2
 800d808:	f100 33ff 	add.w	r3, r0, #4294967295
 800d80c:	d100      	bne.n	800d810 <memcpy+0xc>
 800d80e:	4770      	bx	lr
 800d810:	b510      	push	{r4, lr}
 800d812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d81a:	4291      	cmp	r1, r2
 800d81c:	d1f9      	bne.n	800d812 <memcpy+0xe>
 800d81e:	bd10      	pop	{r4, pc}

0800d820 <memmove>:
 800d820:	4288      	cmp	r0, r1
 800d822:	b510      	push	{r4, lr}
 800d824:	eb01 0402 	add.w	r4, r1, r2
 800d828:	d902      	bls.n	800d830 <memmove+0x10>
 800d82a:	4284      	cmp	r4, r0
 800d82c:	4623      	mov	r3, r4
 800d82e:	d807      	bhi.n	800d840 <memmove+0x20>
 800d830:	1e43      	subs	r3, r0, #1
 800d832:	42a1      	cmp	r1, r4
 800d834:	d008      	beq.n	800d848 <memmove+0x28>
 800d836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d83e:	e7f8      	b.n	800d832 <memmove+0x12>
 800d840:	4402      	add	r2, r0
 800d842:	4601      	mov	r1, r0
 800d844:	428a      	cmp	r2, r1
 800d846:	d100      	bne.n	800d84a <memmove+0x2a>
 800d848:	bd10      	pop	{r4, pc}
 800d84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d852:	e7f7      	b.n	800d844 <memmove+0x24>

0800d854 <_free_r>:
 800d854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d856:	2900      	cmp	r1, #0
 800d858:	d048      	beq.n	800d8ec <_free_r+0x98>
 800d85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d85e:	9001      	str	r0, [sp, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	f1a1 0404 	sub.w	r4, r1, #4
 800d866:	bfb8      	it	lt
 800d868:	18e4      	addlt	r4, r4, r3
 800d86a:	f000 f8d3 	bl	800da14 <__malloc_lock>
 800d86e:	4a20      	ldr	r2, [pc, #128]	; (800d8f0 <_free_r+0x9c>)
 800d870:	9801      	ldr	r0, [sp, #4]
 800d872:	6813      	ldr	r3, [r2, #0]
 800d874:	4615      	mov	r5, r2
 800d876:	b933      	cbnz	r3, 800d886 <_free_r+0x32>
 800d878:	6063      	str	r3, [r4, #4]
 800d87a:	6014      	str	r4, [r2, #0]
 800d87c:	b003      	add	sp, #12
 800d87e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d882:	f000 b8cd 	b.w	800da20 <__malloc_unlock>
 800d886:	42a3      	cmp	r3, r4
 800d888:	d90b      	bls.n	800d8a2 <_free_r+0x4e>
 800d88a:	6821      	ldr	r1, [r4, #0]
 800d88c:	1862      	adds	r2, r4, r1
 800d88e:	4293      	cmp	r3, r2
 800d890:	bf04      	itt	eq
 800d892:	681a      	ldreq	r2, [r3, #0]
 800d894:	685b      	ldreq	r3, [r3, #4]
 800d896:	6063      	str	r3, [r4, #4]
 800d898:	bf04      	itt	eq
 800d89a:	1852      	addeq	r2, r2, r1
 800d89c:	6022      	streq	r2, [r4, #0]
 800d89e:	602c      	str	r4, [r5, #0]
 800d8a0:	e7ec      	b.n	800d87c <_free_r+0x28>
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	b10b      	cbz	r3, 800d8ac <_free_r+0x58>
 800d8a8:	42a3      	cmp	r3, r4
 800d8aa:	d9fa      	bls.n	800d8a2 <_free_r+0x4e>
 800d8ac:	6811      	ldr	r1, [r2, #0]
 800d8ae:	1855      	adds	r5, r2, r1
 800d8b0:	42a5      	cmp	r5, r4
 800d8b2:	d10b      	bne.n	800d8cc <_free_r+0x78>
 800d8b4:	6824      	ldr	r4, [r4, #0]
 800d8b6:	4421      	add	r1, r4
 800d8b8:	1854      	adds	r4, r2, r1
 800d8ba:	42a3      	cmp	r3, r4
 800d8bc:	6011      	str	r1, [r2, #0]
 800d8be:	d1dd      	bne.n	800d87c <_free_r+0x28>
 800d8c0:	681c      	ldr	r4, [r3, #0]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	6053      	str	r3, [r2, #4]
 800d8c6:	4421      	add	r1, r4
 800d8c8:	6011      	str	r1, [r2, #0]
 800d8ca:	e7d7      	b.n	800d87c <_free_r+0x28>
 800d8cc:	d902      	bls.n	800d8d4 <_free_r+0x80>
 800d8ce:	230c      	movs	r3, #12
 800d8d0:	6003      	str	r3, [r0, #0]
 800d8d2:	e7d3      	b.n	800d87c <_free_r+0x28>
 800d8d4:	6825      	ldr	r5, [r4, #0]
 800d8d6:	1961      	adds	r1, r4, r5
 800d8d8:	428b      	cmp	r3, r1
 800d8da:	bf04      	itt	eq
 800d8dc:	6819      	ldreq	r1, [r3, #0]
 800d8de:	685b      	ldreq	r3, [r3, #4]
 800d8e0:	6063      	str	r3, [r4, #4]
 800d8e2:	bf04      	itt	eq
 800d8e4:	1949      	addeq	r1, r1, r5
 800d8e6:	6021      	streq	r1, [r4, #0]
 800d8e8:	6054      	str	r4, [r2, #4]
 800d8ea:	e7c7      	b.n	800d87c <_free_r+0x28>
 800d8ec:	b003      	add	sp, #12
 800d8ee:	bd30      	pop	{r4, r5, pc}
 800d8f0:	24000094 	.word	0x24000094

0800d8f4 <_malloc_r>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	1ccd      	adds	r5, r1, #3
 800d8f8:	f025 0503 	bic.w	r5, r5, #3
 800d8fc:	3508      	adds	r5, #8
 800d8fe:	2d0c      	cmp	r5, #12
 800d900:	bf38      	it	cc
 800d902:	250c      	movcc	r5, #12
 800d904:	2d00      	cmp	r5, #0
 800d906:	4606      	mov	r6, r0
 800d908:	db01      	blt.n	800d90e <_malloc_r+0x1a>
 800d90a:	42a9      	cmp	r1, r5
 800d90c:	d903      	bls.n	800d916 <_malloc_r+0x22>
 800d90e:	230c      	movs	r3, #12
 800d910:	6033      	str	r3, [r6, #0]
 800d912:	2000      	movs	r0, #0
 800d914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d916:	f000 f87d 	bl	800da14 <__malloc_lock>
 800d91a:	4921      	ldr	r1, [pc, #132]	; (800d9a0 <_malloc_r+0xac>)
 800d91c:	680a      	ldr	r2, [r1, #0]
 800d91e:	4614      	mov	r4, r2
 800d920:	b99c      	cbnz	r4, 800d94a <_malloc_r+0x56>
 800d922:	4f20      	ldr	r7, [pc, #128]	; (800d9a4 <_malloc_r+0xb0>)
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	b923      	cbnz	r3, 800d932 <_malloc_r+0x3e>
 800d928:	4621      	mov	r1, r4
 800d92a:	4630      	mov	r0, r6
 800d92c:	f000 f862 	bl	800d9f4 <_sbrk_r>
 800d930:	6038      	str	r0, [r7, #0]
 800d932:	4629      	mov	r1, r5
 800d934:	4630      	mov	r0, r6
 800d936:	f000 f85d 	bl	800d9f4 <_sbrk_r>
 800d93a:	1c43      	adds	r3, r0, #1
 800d93c:	d123      	bne.n	800d986 <_malloc_r+0x92>
 800d93e:	230c      	movs	r3, #12
 800d940:	6033      	str	r3, [r6, #0]
 800d942:	4630      	mov	r0, r6
 800d944:	f000 f86c 	bl	800da20 <__malloc_unlock>
 800d948:	e7e3      	b.n	800d912 <_malloc_r+0x1e>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	1b5b      	subs	r3, r3, r5
 800d94e:	d417      	bmi.n	800d980 <_malloc_r+0x8c>
 800d950:	2b0b      	cmp	r3, #11
 800d952:	d903      	bls.n	800d95c <_malloc_r+0x68>
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	441c      	add	r4, r3
 800d958:	6025      	str	r5, [r4, #0]
 800d95a:	e004      	b.n	800d966 <_malloc_r+0x72>
 800d95c:	6863      	ldr	r3, [r4, #4]
 800d95e:	42a2      	cmp	r2, r4
 800d960:	bf0c      	ite	eq
 800d962:	600b      	streq	r3, [r1, #0]
 800d964:	6053      	strne	r3, [r2, #4]
 800d966:	4630      	mov	r0, r6
 800d968:	f000 f85a 	bl	800da20 <__malloc_unlock>
 800d96c:	f104 000b 	add.w	r0, r4, #11
 800d970:	1d23      	adds	r3, r4, #4
 800d972:	f020 0007 	bic.w	r0, r0, #7
 800d976:	1ac2      	subs	r2, r0, r3
 800d978:	d0cc      	beq.n	800d914 <_malloc_r+0x20>
 800d97a:	1a1b      	subs	r3, r3, r0
 800d97c:	50a3      	str	r3, [r4, r2]
 800d97e:	e7c9      	b.n	800d914 <_malloc_r+0x20>
 800d980:	4622      	mov	r2, r4
 800d982:	6864      	ldr	r4, [r4, #4]
 800d984:	e7cc      	b.n	800d920 <_malloc_r+0x2c>
 800d986:	1cc4      	adds	r4, r0, #3
 800d988:	f024 0403 	bic.w	r4, r4, #3
 800d98c:	42a0      	cmp	r0, r4
 800d98e:	d0e3      	beq.n	800d958 <_malloc_r+0x64>
 800d990:	1a21      	subs	r1, r4, r0
 800d992:	4630      	mov	r0, r6
 800d994:	f000 f82e 	bl	800d9f4 <_sbrk_r>
 800d998:	3001      	adds	r0, #1
 800d99a:	d1dd      	bne.n	800d958 <_malloc_r+0x64>
 800d99c:	e7cf      	b.n	800d93e <_malloc_r+0x4a>
 800d99e:	bf00      	nop
 800d9a0:	24000094 	.word	0x24000094
 800d9a4:	24000098 	.word	0x24000098

0800d9a8 <_realloc_r>:
 800d9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9aa:	4607      	mov	r7, r0
 800d9ac:	4614      	mov	r4, r2
 800d9ae:	460e      	mov	r6, r1
 800d9b0:	b921      	cbnz	r1, 800d9bc <_realloc_r+0x14>
 800d9b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	f7ff bf9c 	b.w	800d8f4 <_malloc_r>
 800d9bc:	b922      	cbnz	r2, 800d9c8 <_realloc_r+0x20>
 800d9be:	f7ff ff49 	bl	800d854 <_free_r>
 800d9c2:	4625      	mov	r5, r4
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c8:	f000 f830 	bl	800da2c <_malloc_usable_size_r>
 800d9cc:	42a0      	cmp	r0, r4
 800d9ce:	d20f      	bcs.n	800d9f0 <_realloc_r+0x48>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	4638      	mov	r0, r7
 800d9d4:	f7ff ff8e 	bl	800d8f4 <_malloc_r>
 800d9d8:	4605      	mov	r5, r0
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d0f2      	beq.n	800d9c4 <_realloc_r+0x1c>
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	f7ff ff0f 	bl	800d804 <memcpy>
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7ff ff33 	bl	800d854 <_free_r>
 800d9ee:	e7e9      	b.n	800d9c4 <_realloc_r+0x1c>
 800d9f0:	4635      	mov	r5, r6
 800d9f2:	e7e7      	b.n	800d9c4 <_realloc_r+0x1c>

0800d9f4 <_sbrk_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	4d06      	ldr	r5, [pc, #24]	; (800da10 <_sbrk_r+0x1c>)
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	4608      	mov	r0, r1
 800d9fe:	602b      	str	r3, [r5, #0]
 800da00:	f7f3 fe8a 	bl	8001718 <_sbrk>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_sbrk_r+0x1a>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_sbrk_r+0x1a>
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	24000404 	.word	0x24000404

0800da14 <__malloc_lock>:
 800da14:	4801      	ldr	r0, [pc, #4]	; (800da1c <__malloc_lock+0x8>)
 800da16:	f000 b811 	b.w	800da3c <__retarget_lock_acquire_recursive>
 800da1a:	bf00      	nop
 800da1c:	2400040c 	.word	0x2400040c

0800da20 <__malloc_unlock>:
 800da20:	4801      	ldr	r0, [pc, #4]	; (800da28 <__malloc_unlock+0x8>)
 800da22:	f000 b80c 	b.w	800da3e <__retarget_lock_release_recursive>
 800da26:	bf00      	nop
 800da28:	2400040c 	.word	0x2400040c

0800da2c <_malloc_usable_size_r>:
 800da2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da30:	1f18      	subs	r0, r3, #4
 800da32:	2b00      	cmp	r3, #0
 800da34:	bfbc      	itt	lt
 800da36:	580b      	ldrlt	r3, [r1, r0]
 800da38:	18c0      	addlt	r0, r0, r3
 800da3a:	4770      	bx	lr

0800da3c <__retarget_lock_acquire_recursive>:
 800da3c:	4770      	bx	lr

0800da3e <__retarget_lock_release_recursive>:
 800da3e:	4770      	bx	lr

0800da40 <_init>:
 800da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da42:	bf00      	nop
 800da44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da46:	bc08      	pop	{r3}
 800da48:	469e      	mov	lr, r3
 800da4a:	4770      	bx	lr

0800da4c <_fini>:
 800da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4e:	bf00      	nop
 800da50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da52:	bc08      	pop	{r3}
 800da54:	469e      	mov	lr, r3
 800da56:	4770      	bx	lr
